sensor_table_set_value (struct snmp_node_instance * instance, u16_t len, void * value)
{
  s32_t * temperature;
  u32_t i;
  snmp_err_t D.7553;
  long int _1;
  snmp_err_t _8;

  <bb 2> :
  i_4 = instance_3(D)->reference.u32;
  temperature_6 = value_5(D);
  _1 = *temperature_6;
  sensors[i_4].value = _1;
  _8 = 0;

  <bb 3> :
<L0>:
  return _8;

}


sensor_table_get_value (struct snmp_node_instance * instance, void * value)
{
  s32_t * temperature;
  u32_t i;
  s16_t D.7551;
  long unsigned int _1;
  long int _2;
  char[21] * _3;
  char[21] * _4;
  unsigned int _5;
  char[21] * _6;
  unsigned int _7;
  s16_t _8;
  s16_t _16;
  s16_t _18;
  s16_t _19;

  <bb 2> :
  i_12 = instance_11(D)->reference.u32;
  temperature_14 = value_13(D);
  _1 = instance_11(D)->instance_oid.id[1];
  switch (_1) <default: <L2> [INV], case 1: <L0> [INV], case 2: <L1> [INV]>

  <bb 3> :
<L0>:
  _2 = sensors[i_12].value;
  *temperature_14 = _2;
  _18 = 4;
  goto <bb 6>; [INV]

  <bb 4> :
<L1>:
  _3 = &sensors[i_12].file;
  _4 = &sensors[i_12].file;
  _5 = strlen (_4);
  memcpy (value_13(D), _3, _5);
  _6 = &sensors[i_12].file;
  _7 = strlen (_6);
  _16 = (s16_t) _7;
  goto <bb 6>; [INV]

  <bb 5> :
<L2>:
  _19 = 0;

  <bb 6> :
  # _8 = PHI <_18(3), _16(4), _19(5)>
<L3>:
  return _8;

}


sensor_table_get_next_cell_instance (const u32_t * column, struct snmp_obj_id * row_oid, struct snmp_node_instance * cell_instance)
{
  u32_t test_oid[1];
  u32_t result_temp[1];
  struct snmp_next_oid_state state;
  size_t i;
  snmp_err_t D.7548;
  u32_t[50] * _1;
  unsigned char _2;
  unsigned char _3;
  unsigned char _4;
  long unsigned int _5;
  void * i.1_6;
  <unnamed type> _7;
  u32_t * _8;
  unsigned char _9;
  void * _10;
  long unsigned int _11;
  snmp_err_t _13;
  snmp_err_t _21;
  snmp_err_t _25;

  <bb 2> :
  _1 = &row_oid_17(D)->id;
  _2 = row_oid_17(D)->len;
  snmp_next_oid_init (&state, _1, _2, &result_temp, 1);
  i_20 = 0;
  goto <bb 6>; [INV]

  <bb 3> :
  _3 = sensors[i_12].num;
  if (_3 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _4 = sensors[i_12].num;
  _5 = (long unsigned int) _4;
  test_oid[0] = _5;
  i.1_6 = (void *) i_12;
  snmp_next_oid_check (&state, &test_oid, 1, i.1_6);
  test_oid ={v} {CLOBBER};

  <bb 5> :
  i_31 = i_12 + 1;

  <bb 6> :
  # i_12 = PHI <i_20(2), i_31(5)>
  if (i_12 <= 9)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _7 = state.status;
  if (_7 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  _8 = state.next_oid;
  _9 = state.next_oid_len;
  snmp_oid_assign (row_oid_17(D), _8, _9);
  _10 = state.reference;
  _11 = (long unsigned int) _10;
  cell_instance_23(D)->reference.u32 = _11;
  _25 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 10>; [INV]

  <bb 9> :
  _21 = 241;

  <bb 10> :
  # _13 = PHI <_25(8), _21(9)>
  state ={v} {CLOBBER};
  result_temp ={v} {CLOBBER};

  <bb 11> :
<L8>:
  return _13;

}


sensor_table_get_cell_instance (const u32_t * column, const u32_t * row_oid, u8_t row_oid_len, struct snmp_node_instance * cell_instance)
{
  size_t i;
  u32_t sensor_num;
  snmp_err_t D.7538;
  unsigned char _1;
  unsigned char _2;
  unsigned char _3;
  long unsigned int _4;
  snmp_err_t _6;
  snmp_err_t _14;
  snmp_err_t _17;
  snmp_err_t _19;

  <bb 2> :
  _1 = snmp_oid_in_range (row_oid_9(D), row_oid_len_10(D), &sensor_table_oid_ranges, 1);
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _19 = 241;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 11>; [INV]

  <bb 4> :
  sensor_num_12 = *row_oid_9(D);
  i_13 = 0;
  goto <bb 9>; [INV]

  <bb 5> :
  _2 = sensors[i_5].num;
  if (_2 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  _3 = sensors[i_5].num;
  _4 = (long unsigned int) _3;
  if (sensor_num_12 == _4)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  cell_instance_15(D)->reference.u32 = i_5;
  _17 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 11>; [INV]

  <bb 8> :
  i_18 = i_5 + 1;

  <bb 9> :
  # i_5 = PHI <i_13(4), i_18(8)>
  if (i_5 <= 9)
    goto <bb 5>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  _14 = 241;

  <bb 11> :
  # _6 = PHI <_19(3), _17(7), _14(10)>
<L9>:
  return _6;

}


sensor_count_get_value (struct snmp_node_instance * instance, void * value)
{
  u32_t * uint_ptr;
  size_t count;
  s16_t D.7534;
  unsigned char _1;
  s16_t _3;
  s16_t _9;
  s16_t _13;

  <bb 2> :
  count_5 = 0;
  uint_ptr_7 = value_6(D);
  count_8 = 0;
  goto <bb 6>; [INV]

  <bb 3> :
  _1 = sensors[count_2].num;
  if (_1 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  *uint_ptr_7 = count_2;
  _13 = 4;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 8>; [INV]

  <bb 5> :
  count_11 = count_2 + 1;

  <bb 6> :
  # count_2 = PHI <count_8(2), count_11(5)>
  if (count_2 <= 9)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _9 = 0;

  <bb 8> :
  # _3 = PHI <_13(4), _9(7)>
<L5>:
  return _3;

}


lwip_privmib_init ()
{
  u8_t i;
  int _1;
  unsigned char _2;
  int _3;
  char[21] * _4;
  int _5;
  int _6;
  int _7;
  int _8;
  int _9;
  unsigned char i.0_10;

  <bb 2> :
  memset (&sensors, 0, 280);
  __builtin_puts (&"SNMP private MIB start, detecting sensors."[0]);
  i_16 = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  _1 = (int) i_11;
  _2 = i_11 + 1;
  sensors[_1].num = _2;
  _3 = (int) i_11;
  _4 = &sensors[_3].file;
  _5 = (int) i_11;
  snprintf (_4, 21, "%d.txt", _5);
  _6 = (int) i_11;
  _7 = _6 + 1;
  _8 = (int) i_11;
  _9 = _7 * 11;
  sensors[_8].value = _9;
  i.0_10 = i_11;
  i_20 = i.0_10 + 1;

  <bb 4> :
  # i_11 = PHI <i_16(2), i_20(3)>
  if (i_11 <= 3)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  return;

}


