udpecho_raw_init ()
{
  err_t err;

  <bb 2> :
  _1 = udp_new_ip_type (46);
  udpecho_raw_pcb = _1;
  udpecho_raw_pcb.0_2 = udpecho_raw_pcb;
  if (udpecho_raw_pcb.0_2 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  udpecho_raw_pcb.1_3 = udpecho_raw_pcb;
  err = udp_bind (udpecho_raw_pcb.1_3, &ip_addr_any_type, 7);
  if (err == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  udpecho_raw_pcb.2_4 = udpecho_raw_pcb;
  udp_recv (udpecho_raw_pcb.2_4, udpecho_raw_recv, 0B);

  <bb 5> :
  return;

}


udpecho_raw_recv (void * arg, struct udp_pcb * upcb, struct pbuf * p, const struct ip_addr_t * addr, u16_t port)
{
  struct ip6_addr_t gaddr;
  err_t err;
  struct ip_addr_t gaddr;
  err_t err;
  char * data_recv;

  <bb 2> :
  if (p != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 3> :
  data_recv = 0B;
  data_recv = p->payload;
  _1 = p->tot_len;
  if (_1 == 12)
    goto <bb 4>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 4> :
  _2 = strncmp (data_recv, "IGMP", 4);
  if (_2 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 5> :
  _3 = data_recv + 8;
  _4 = *_3;
  _5 = (long unsigned int) _4;
  _6 = _5 << 24;
  _7 = data_recv + 9;
  _8 = *_7;
  _9 = (long unsigned int) _8;
  _10 = _9 << 16;
  _11 = _6 | _10;
  _12 = data_recv + 10;
  _13 = *_12;
  _14 = (long unsigned int) _13;
  _15 = _14 << 8;
  _16 = _11 | _15;
  _17 = data_recv + 11;
  _18 = *_17;
  _19 = (long unsigned int) _18;
  _20 = _16 | _19;
  _21 = _20 << 24;
  _22 = data_recv + 8;
  _23 = *_22;
  _24 = (long unsigned int) _23;
  _25 = _24 << 24;
  _26 = data_recv + 9;
  _27 = *_26;
  _28 = (long unsigned int) _27;
  _29 = _28 << 16;
  _30 = _25 | _29;
  _31 = data_recv + 10;
  _32 = *_31;
  _33 = (long unsigned int) _32;
  _34 = _33 << 8;
  _35 = _30 | _34;
  _36 = data_recv + 11;
  _37 = *_36;
  _38 = (long unsigned int) _37;
  _39 = _35 | _38;
  _40 = _39 << 8;
  _41 = _40 & 16711680;
  _42 = _21 | _41;
  _43 = data_recv + 8;
  _44 = *_43;
  _45 = (long unsigned int) _44;
  _46 = _45 << 24;
  _47 = data_recv + 9;
  _48 = *_47;
  _49 = (long unsigned int) _48;
  _50 = _49 << 16;
  _51 = _46 | _50;
  _52 = data_recv + 10;
  _53 = *_52;
  _54 = (long unsigned int) _53;
  _55 = _54 << 8;
  _56 = _51 | _55;
  _57 = data_recv + 11;
  _58 = *_57;
  _59 = (long unsigned int) _58;
  _60 = _56 | _59;
  _61 = _60 >> 8;
  _62 = _61 & 65280;
  _63 = _42 | _62;
  _64 = data_recv + 8;
  _65 = *_64;
  _66 = (long unsigned int) _65;
  _67 = _66 << 24;
  _68 = data_recv + 9;
  _69 = *_68;
  _70 = (long unsigned int) _69;
  _71 = _70 << 16;
  _72 = _67 | _71;
  _73 = data_recv + 10;
  _74 = *_73;
  _75 = (long unsigned int) _74;
  _76 = _75 << 8;
  _77 = _72 | _76;
  _78 = data_recv + 11;
  _79 = *_78;
  _80 = (long unsigned int) _79;
  _81 = _77 | _80;
  _82 = _81 >> 24;
  _83 = _63 | _82;
  gaddr.u_addr.ip4.addr = _83;
  gaddr.type = 0;
  _84 = data_recv + 4;
  _85 = strncmp (_84, "JOIN", 4);
  if (_85 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  err = igmp_joingroup (&ip_addr_any.u_addr.ip4, &gaddr.u_addr.ip4);

  <bb 7> :
  _86 = data_recv + 4;
  _87 = strncmp (_86, "LEAV", 4);
  if (_87 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  err = igmp_leavegroup (&ip_addr_any.u_addr.ip4, &gaddr.u_addr.ip4);

  <bb 9> :
  gaddr = {CLOBBER};
  goto <bb 12>; [INV]

  <bb 10> :
  _88 = is_netif_shutdown_command (data_recv, 14);
  if (_88 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  end_tcpip_execution (0B);

  <bb 12> :
  data_recv = p->payload;
  _89 = p->tot_len;
  if (_89 == 24)
    goto <bb 13>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 13> :
  _90 = strncmp (data_recv, "MLD6", 4);
  if (_90 == 0)
    goto <bb 14>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 14> :
  _91 = MEM[(u32_t *)data_recv + 8B];
  gaddr.addr[0] = _91;
  _92 = MEM[(u32_t *)data_recv + 12B];
  gaddr.addr[1] = _92;
  _93 = MEM[(u32_t *)data_recv + 16B];
  gaddr.addr[2] = _93;
  _94 = MEM[(u32_t *)data_recv + 20B];
  gaddr.addr[3] = _94;
  gaddr.zone = 0;
  _95 = data_recv + 4;
  _96 = strncmp (_95, "JOIN", 4);
  if (_96 == 0)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  err = mld6_joingroup (&ip6_addr_any.u_addr.ip6, &gaddr);

  <bb 16> :
  _97 = data_recv + 4;
  _98 = strncmp (_97, "LEAV", 4);
  if (_98 == 0)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  err = mld6_leavegroup (&ip6_addr_any.u_addr.ip6, &gaddr);

  <bb 18> :
  gaddr = {CLOBBER};

  <bb 19> :
  udp_sendto (upcb, p, addr, port);
  pbuf_free (p);

  <bb 20> :
  return;

}


