netio_init ()
{
  struct tcp_pcb * pcb;

  <bb 2> :
  pcb_3 = tcp_new_ip_type (46);
  tcp_bind (pcb_3, &ip_addr_any_type, 18767);
  pcb_6 = tcp_listen_with_backlog (pcb_3, 255);
  tcp_accept (pcb_6, netio_accept);
  return;

}


netio_accept (void * arg, struct tcp_pcb * pcb, err_t err)
{
  err_t D.7460;
  err_t _7;

  <bb 2> :
  if (pcb_2(D) != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  tcp_arg (pcb_2(D), 0B);
  tcp_sent (pcb_2(D), 0B);
  tcp_recv (pcb_2(D), netio_recv);

  <bb 4> :
  _7 = 0;

  <bb 5> :
<L2>:
  return _7;

}


netio_recv (void * arg, struct tcp_pcb * pcb, struct pbuf * p, err_t err)
{
  err_t D.7456;
  short unsigned int _1;
  err_t _15;

  <bb 2> :
  if (err_4(D) == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  if (p_5(D) != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _1 = p_5(D)->tot_len;
  tcp_recved (pcb_7(D), _1);
  pbuf_free (p_5(D));
  goto <bb 6>; [INV]

  <bb 5> :
  pbuf_free (p_5(D));

  <bb 6> :
  if (err_4(D) == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  if (p_5(D) == 0B)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  tcp_arg (pcb_7(D), 0B);
  tcp_sent (pcb_7(D), 0B);
  tcp_recv (pcb_7(D), 0B);
  tcp_close (pcb_7(D));

  <bb 9> :
  _15 = 0;

  <bb 10> :
<L8>:
  return _15;

}


