
Marking local functions:


Marking externally visible functions:


Marking externally visible variables: snmp_mib2_udp_root/20


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

snmp_table_simple_get_next_instance/34 (snmp_table_simple_get_next_instance) @06d720e0
  Type: function
  Visibility: external public
  Address is taken.
  References: 
  Referring: udp_Table/16 (addr) udp_endpointTable/18 (addr) 
  Availability: not_available
  Function flags:
  Called by: 
  Calls: 
snmp_table_simple_get_instance/33 (snmp_table_simple_get_instance) @06d72000
  Type: function
  Visibility: external public
  Address is taken.
  References: 
  Referring: udp_Table/16 (addr) udp_endpointTable/18 (addr) 
  Availability: not_available
  Function flags:
  Called by: 
  Calls: 
snmp_scalar_get_next_instance/32 (snmp_scalar_get_next_instance) @06d4fee0
  Type: function
  Visibility: external public
  Address is taken.
  References: 
  Referring: udp_inDatagrams/9 (addr) udp_noPorts/10 (addr) udp_inErrors/11 (addr) udp_outDatagrams/12 (addr) udp_HCInDatagrams/13 (addr) udp_HCOutDatagrams/14 (addr) 
  Availability: not_available
  Function flags:
  Called by: 
  Calls: 
snmp_scalar_get_instance/31 (snmp_scalar_get_instance) @06d4fe00
  Type: function
  Visibility: external public
  Address is taken.
  References: 
  Referring: udp_inDatagrams/9 (addr) udp_noPorts/10 (addr) udp_inErrors/11 (addr) udp_outDatagrams/12 (addr) udp_HCInDatagrams/13 (addr) udp_HCOutDatagrams/14 (addr) 
  Availability: not_available
  Function flags:
  Called by: 
  Calls: 
snmp_ip4_to_oid/30 (snmp_ip4_to_oid) @06d4fd20
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: udp_Table_get_next_cell_instance_and_value/8 
  Calls: 
snmp_oid_to_ip4/29 (snmp_oid_to_ip4) @06d4fb60
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: udp_Table_get_cell_value/7 
  Calls: 
snmp_oid_in_range/28 (snmp_oid_in_range) @06d4fa80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: udp_Table_get_cell_value/7 
  Calls: 
snmp_oid_assign/27 (snmp_oid_assign) @06d4f7e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: udp_Table_get_next_cell_instance_and_value/8 udp_endpointTable_get_next_cell_instance_and_value/4 
  Calls: 
snmp_next_oid_check/26 (snmp_next_oid_check) @06d4f700
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: udp_Table_get_next_cell_instance_and_value/8 udp_endpointTable_get_next_cell_instance_and_value/4 
  Calls: 
snmp_ip_port_to_oid/25 (snmp_ip_port_to_oid) @06d4f620
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: udp_endpointTable_get_next_cell_instance_and_value/4 udp_endpointTable_get_next_cell_instance_and_value/4 
  Calls: 
snmp_next_oid_init/24 (snmp_next_oid_init) @06d4f540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: udp_Table_get_next_cell_instance_and_value/8 udp_endpointTable_get_next_cell_instance_and_value/4 
  Calls: 
udp_pcbs/23 (udp_pcbs) @06d689d8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: udp_endpointTable_get_next_cell_instance_and_value/4 (read) udp_Table_get_cell_value/7 (read) udp_endpointTable_get_cell_value/3 (read) udp_Table_get_next_cell_instance_and_value/8 (read) 
  Availability: not_available
  Varpool flags:
snmp_oid_to_ip_port/22 (snmp_oid_to_ip_port) @06d4f380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: udp_endpointTable_get_cell_value/3 udp_endpointTable_get_cell_value/3 
  Calls: 
lwip_stats/21 (lwip_stats) @06d4b708
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: udp_get_value/1 (read) udp_get_value/1 (read) udp_get_value/1 (read) udp_get_value/1 (read) udp_get_value/1 (read) udp_get_value/1 (read) 
  Availability: not_available
  Varpool flags:
snmp_mib2_udp_root/20 (snmp_mib2_udp_root) @06d4b168
  Type: variable definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: udp_nodes/19 (addr) 
  Referring: 
  Availability: available
  Varpool flags: initialized read-only const-value-known
udp_nodes/19 (udp_nodes) @06d4b048
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: udp_inDatagrams/9 (addr) udp_noPorts/10 (addr) udp_inErrors/11 (addr) udp_outDatagrams/12 (addr) udp_Table/16 (addr) udp_endpointTable/18 (addr) udp_HCInDatagrams/13 (addr) udp_HCOutDatagrams/14 (addr) 
  Referring: snmp_mib2_udp_root/20 (addr) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
udp_endpointTable/18 (udp_endpointTable) @06cf5f30
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: snmp_table_simple_get_instance/33 (addr) snmp_table_simple_get_next_instance/34 (addr) udp_endpointTable_columns/17 (addr) udp_endpointTable_get_cell_value/3 (addr) udp_endpointTable_get_next_cell_instance_and_value/4 (addr) 
  Referring: udp_nodes/19 (addr) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
udp_endpointTable_columns/17 (udp_endpointTable_columns) @06cf5e58
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: udp_endpointTable/18 (addr) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
udp_Table/16 (udp_Table) @06cf5dc8
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: snmp_table_simple_get_instance/33 (addr) snmp_table_simple_get_next_instance/34 (addr) udp_Table_columns/15 (addr) udp_Table_get_cell_value/7 (addr) udp_Table_get_next_cell_instance_and_value/8 (addr) 
  Referring: udp_nodes/19 (addr) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
udp_Table_columns/15 (udp_Table_columns) @06cf5cf0
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: udp_Table/16 (addr) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
udp_HCOutDatagrams/14 (udp_HCOutDatagrams) @06cf5c60
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: snmp_scalar_get_instance/31 (addr) snmp_scalar_get_next_instance/32 (addr) udp_get_value/1 (addr) 
  Referring: udp_nodes/19 (addr) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
udp_HCInDatagrams/13 (udp_HCInDatagrams) @06cf5b88
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: snmp_scalar_get_instance/31 (addr) snmp_scalar_get_next_instance/32 (addr) udp_get_value/1 (addr) 
  Referring: udp_nodes/19 (addr) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
udp_outDatagrams/12 (udp_outDatagrams) @06cf5ab0
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: snmp_scalar_get_instance/31 (addr) snmp_scalar_get_next_instance/32 (addr) udp_get_value/1 (addr) 
  Referring: udp_nodes/19 (addr) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
udp_inErrors/11 (udp_inErrors) @06cf59d8
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: snmp_scalar_get_instance/31 (addr) snmp_scalar_get_next_instance/32 (addr) udp_get_value/1 (addr) 
  Referring: udp_nodes/19 (addr) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
udp_noPorts/10 (udp_noPorts) @06cf5900
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: snmp_scalar_get_instance/31 (addr) snmp_scalar_get_next_instance/32 (addr) udp_get_value/1 (addr) 
  Referring: udp_nodes/19 (addr) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
udp_inDatagrams/9 (udp_inDatagrams) @06cf5828
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: snmp_scalar_get_instance/31 (addr) snmp_scalar_get_next_instance/32 (addr) udp_get_value/1 (addr) 
  Referring: udp_nodes/19 (addr) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
udp_Table_get_next_cell_instance_and_value/8 (udp_Table_get_next_cell_instance_and_value) @06d101c0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: udp_pcbs/23 (read) 
  Referring: udp_Table/16 (addr) 
  Availability: available
  Function flags: body
  Called by: 
  Calls: udp_Table_get_cell_value_core/6 snmp_oid_assign/27 snmp_next_oid_check/26 snmp_ip4_to_oid/30 snmp_next_oid_init/24 
udp_Table_get_cell_value/7 (udp_Table_get_cell_value) @06d0ba80
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: udp_Table_oid_ranges/5 (addr) udp_pcbs/23 (read) 
  Referring: udp_Table/16 (addr) 
  Availability: available
  Function flags: body
  Called by: 
  Calls: udp_Table_get_cell_value_core/6 snmp_oid_to_ip4/29 snmp_oid_in_range/28 
udp_Table_get_cell_value_core/6 (udp_Table_get_cell_value_core) @06d0b620
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: udp_Table_get_next_cell_instance_and_value/8 udp_Table_get_cell_value/7 
  Calls: 
udp_Table_oid_ranges/5 (udp_Table_oid_ranges) @06cf54c8
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: udp_Table_get_cell_value/7 (addr) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
udp_endpointTable_get_next_cell_instance_and_value/4 (udp_endpointTable_get_next_cell_instance_and_value) @06cf8e00
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: udp_pcbs/23 (read) 
  Referring: udp_endpointTable/18 (addr) 
  Availability: available
  Function flags: body
  Called by: 
  Calls: udp_endpointTable_get_cell_value_core/2 snmp_oid_assign/27 snmp_next_oid_check/26 snmp_ip_port_to_oid/25 snmp_ip_port_to_oid/25 snmp_next_oid_init/24 
udp_endpointTable_get_cell_value/3 (udp_endpointTable_get_cell_value) @06cf89a0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: udp_pcbs/23 (read) 
  Referring: udp_endpointTable/18 (addr) 
  Availability: available
  Function flags: body
  Called by: 
  Calls: udp_endpointTable_get_cell_value_core/2 snmp_oid_to_ip_port/22 snmp_oid_to_ip_port/22 
udp_endpointTable_get_cell_value_core/2 (udp_endpointTable_get_cell_value_core) @06cf8000
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: udp_endpointTable_get_next_cell_instance_and_value/4 udp_endpointTable_get_cell_value/3 
  Calls: 
udp_get_value/1 (udp_get_value) @06ceec40
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: lwip_stats/21 (read) lwip_stats/21 (read) lwip_stats/21 (read) lwip_stats/21 (read) lwip_stats/21 (read) lwip_stats/21 (read) 
  Referring: udp_inDatagrams/9 (addr) udp_noPorts/10 (addr) udp_inErrors/11 (addr) udp_outDatagrams/12 (addr) udp_HCInDatagrams/13 (addr) udp_HCOutDatagrams/14 (addr) 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
udp_Table_get_next_cell_instance_and_value (const u32_t * column, struct snmp_obj_id * row_oid, union snmp_variant_value * value, u32_t * value_len)
{
  u32_t test_oid[5];
  u32_t result_temp[5];
  struct snmp_next_oid_state state;
  struct udp_pcb * pcb;
  snmp_err_t D.7959;
  u32_t[50] * _1;
  unsigned char _2;
  unsigned char _3;
  struct ip4_addr_t * _4;
  short unsigned int _5;
  long unsigned int _6;
  <unnamed type> _7;
  u32_t * _8;
  unsigned char _9;
  void * _10;
  snmp_err_t _12;
  snmp_err_t _20;
  snmp_err_t _26;

  <bb 2> :
  _1 = &row_oid_16(D)->id;
  _2 = row_oid_16(D)->len;
  snmp_next_oid_init (&state, _1, _2, &result_temp, 5);
  pcb_19 = udp_pcbs;
  goto <bb 6>; [INV]

  <bb 3> :
  _3 = pcb_11->local_ip.type;
  if (_3 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _4 = &pcb_11->local_ip.u_addr.ip4;
  snmp_ip4_to_oid (_4, &test_oid[0]);
  _5 = pcb_11->local_port;
  _6 = (long unsigned int) _5;
  test_oid[4] = _6;
  snmp_next_oid_check (&state, &test_oid, 5, pcb_11);

  <bb 5> :
  pcb_32 = pcb_11->next;
  test_oid ={v} {CLOBBER};

  <bb 6> :
  # pcb_11 = PHI <pcb_19(2), pcb_32(5)>
  if (pcb_11 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _7 = state.status;
  if (_7 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  _8 = state.next_oid;
  _9 = state.next_oid_len;
  snmp_oid_assign (row_oid_16(D), _8, _9);
  _10 = state.reference;
  _26 = udp_Table_get_cell_value_core (_10, column_22(D), value_23(D), value_len_24(D));
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 10>; [INV]

  <bb 9> :
  _20 = 241;
  // predicted unlikely by early return (on trees) predictor.

  <bb 10> :
  # _12 = PHI <_26(8), _20(9)>
  state ={v} {CLOBBER};
  result_temp ={v} {CLOBBER};

  <bb 11> :
<L8>:
  return _12;

}


udp_Table_get_cell_value (const u32_t * column, const u32_t * row_oid, u8_t row_oid_len, union snmp_variant_value * value, u32_t * value_len)
{
  struct udp_pcb * pcb;
  u16_t port;
  struct ip4_addr_t ip;
  snmp_err_t D.7946;
  unsigned char _1;
  const u32_t * _2;
  long unsigned int _3;
  unsigned char _4;
  long unsigned int _5;
  long unsigned int _6;
  short unsigned int _7;
  snmp_err_t _9;
  snmp_err_t _18;
  snmp_err_t _23;
  snmp_err_t _25;

  <bb 2> :
  _1 = snmp_oid_in_range (row_oid_12(D), row_oid_len_13(D), &udp_Table_oid_ranges, 5);
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _25 = 241;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 12>; [INV]

  <bb 4> :
  snmp_oid_to_ip4 (row_oid_12(D), &ip);
  _2 = row_oid_12(D) + 16;
  _3 = *_2;
  port_16 = (u16_t) _3;
  pcb_17 = udp_pcbs;
  goto <bb 10>; [INV]

  <bb 5> :
  _4 = pcb_8->local_ip.type;
  if (_4 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 6> :
  _5 = ip.addr;
  _6 = pcb_8->local_ip.u_addr.ip4.addr;
  if (_5 == _6)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  _7 = pcb_8->local_port;
  if (port_16 == _7)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  _23 = udp_Table_get_cell_value_core (pcb_8, column_19(D), value_20(D), value_len_21(D));
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 12>; [INV]

  <bb 9> :
  pcb_24 = pcb_8->next;

  <bb 10> :
  # pcb_8 = PHI <pcb_17(4), pcb_24(9)>
  if (pcb_8 != 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  _18 = 241;

  <bb 12> :
  # _9 = PHI <_25(3), _23(8), _18(11)>
  ip ={v} {CLOBBER};

  <bb 13> :
<L12>:
  return _9;

}


udp_Table_get_cell_value_core (struct udp_pcb * pcb, const u32_t * column, union snmp_variant_value * value, u32_t * value_len)
{
  snmp_err_t D.7942;
  long unsigned int _1;
  long unsigned int _2;
  short unsigned int _3;
  long unsigned int _4;
  snmp_err_t _5;
  snmp_err_t _14;
  snmp_err_t _15;

  <bb 2> :
  _1 = *column_9(D);
  switch (_1) <default: <L2> [INV], case 1: <L0> [INV], case 2: <L1> [INV]>

  <bb 3> :
<L0>:
  _2 = pcb_10(D)->local_ip.u_addr.ip4.addr;
  value_11(D)->u32 = _2;
  goto <bb 6>; [INV]

  <bb 4> :
<L1>:
  _3 = pcb_10(D)->local_port;
  _4 = (long unsigned int) _3;
  value_11(D)->u32 = _4;
  goto <bb 6>; [INV]

  <bb 5> :
<L2>:
  _15 = 241;
  goto <bb 7>; [INV]

  <bb 6> :
  _14 = 0;

  <bb 7> :
  # _5 = PHI <_15(5), _14(6)>
<L4>:
  return _5;

}


udp_endpointTable_get_next_cell_instance_and_value (const u32_t * column, struct snmp_obj_id * row_oid, union snmp_variant_value * value, u32_t * value_len)
{
  u8_t idx;
  u32_t test_oid[39];
  u32_t result_temp[39];
  struct snmp_next_oid_state state;
  struct udp_pcb * pcb;
  snmp_err_t D.7939;
  unsigned char D.7936;
  unsigned char D.7935;
  u32_t[50] * _1;
  unsigned char _2;
  struct ip_addr_t * _3;
  short unsigned int _4;
  int _5;
  u32_t * _6;
  struct ip_addr_t * _7;
  short unsigned int _8;
  int _9;
  u32_t * _10;
  int _11;
  unsigned char idx.8_12;
  <unnamed type> _13;
  u32_t * _14;
  unsigned char _15;
  snmp_err_t _17;
  snmp_err_t _24;
  snmp_err_t _29;
  unsigned char _34;
  unsigned char _37;

  <bb 2> :
  _1 = &row_oid_20(D)->id;
  _2 = row_oid_20(D)->len;
  snmp_next_oid_init (&state, _1, _2, &result_temp, 39);
  pcb_23 = udp_pcbs;
  goto <bb 4>; [INV]

  <bb 3> :
  idx_32 = 0;
  _3 = &pcb_16->local_ip;
  _4 = pcb_16->local_port;
  _5 = (int) idx_32;
  _6 = &test_oid[_5];
  _34 = snmp_ip_port_to_oid (_3, _4, _6);
  idx_35 = _34 + idx_32;
  _7 = &pcb_16->remote_ip;
  _8 = pcb_16->remote_port;
  _9 = (int) idx_35;
  _10 = &test_oid[_9];
  _37 = snmp_ip_port_to_oid (_7, _8, _10);
  idx_38 = _37 + idx_35;
  _11 = (int) idx_38;
  test_oid[_11] = 0;
  idx.8_12 = idx_38;
  idx_40 = idx.8_12 + 1;
  snmp_next_oid_check (&state, &test_oid, idx_40, 0B);
  pcb_42 = pcb_16->next;
  test_oid ={v} {CLOBBER};

  <bb 4> :
  # pcb_16 = PHI <pcb_23(2), pcb_42(3)>
  if (pcb_16 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  _13 = state.status;
  if (_13 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _14 = state.next_oid;
  _15 = state.next_oid_len;
  snmp_oid_assign (row_oid_20(D), _14, _15);
  _29 = udp_endpointTable_get_cell_value_core (column_26(D), value_27(D));
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 8>; [INV]

  <bb 7> :
  _24 = 241;
  // predicted unlikely by early return (on trees) predictor.

  <bb 8> :
  # _17 = PHI <_29(6), _24(7)>
  state ={v} {CLOBBER};
  result_temp ={v} {CLOBBER};

  <bb 9> :
<L6>:
  return _17;

}


udp_endpointTable_get_cell_value (const u32_t * column, const u32_t * row_oid, u8_t row_oid_len, union snmp_variant_value * value, u32_t * value_len)
{
  u8_t idx;
  struct udp_pcb * pcb;
  u16_t remote_port;
  u16_t local_port;
  struct ip_addr_t remote_ip;
  struct ip_addr_t local_ip;
  int iftmp.6;
  _Bool iftmp.5;
  _Bool iftmp.4;
  int iftmp.2;
  _Bool iftmp.1;
  _Bool iftmp.0;
  unsigned char D.7886;
  snmp_err_t D.7885;
  unsigned char D.7882;
  unsigned int _1;
  unsigned int _2;
  const u32_t * _3;
  unsigned char _4;
  unsigned int _5;
  unsigned int _6;
  const u32_t * _7;
  unsigned char _8;
  unsigned int _9;
  unsigned int _10;
  const u32_t * _11;
  long unsigned int _12;
  unsigned char _13;
  unsigned char _14;
  unsigned char _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;
  long unsigned int _23;
  unsigned char _24;
  unsigned char _25;
  long unsigned int _26;
  long unsigned int _27;
  short unsigned int _28;
  short unsigned int local_port.3_29;
  unsigned char _30;
  unsigned char _31;
  unsigned char _32;
  long unsigned int _33;
  long unsigned int _34;
  long unsigned int _35;
  long unsigned int _36;
  long unsigned int _37;
  long unsigned int _38;
  long unsigned int _39;
  long unsigned int _40;
  unsigned char _41;
  unsigned char _42;
  long unsigned int _43;
  long unsigned int _44;
  short unsigned int _45;
  short unsigned int remote_port.7_46;
  snmp_err_t _48;
  _Bool iftmp.0_49;
  _Bool iftmp.1_50;
  int iftmp.2_51;
  _Bool iftmp.4_52;
  _Bool iftmp.5_53;
  int iftmp.6_54;
  unsigned char _61;
  unsigned char _64;
  snmp_err_t _67;
  _Bool iftmp.0_68;
  _Bool iftmp.1_69;
  int iftmp.2_70;
  int iftmp.2_71;
  _Bool iftmp.1_72;
  _Bool iftmp.0_73;
  _Bool iftmp.4_74;
  _Bool iftmp.5_75;
  int iftmp.6_76;
  int iftmp.6_77;
  _Bool iftmp.5_78;
  _Bool iftmp.4_79;
  snmp_err_t _83;
  snmp_err_t _85;
  snmp_err_t _86;
  snmp_err_t _87;
  snmp_err_t _88;

  <bb 2> :
  idx_56 = 0;
  _1 = (unsigned int) idx_56;
  _2 = _1 * 4;
  _3 = row_oid_57(D) + _2;
  _4 = row_oid_len_58(D) - idx_56;
  _61 = snmp_oid_to_ip_port (_3, _4, &local_ip, &local_port);
  idx_62 = _61 + idx_56;
  if (idx_62 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _88 = 241;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 45>; [INV]

  <bb 4> :
  _5 = (unsigned int) idx_62;
  _6 = _5 * 4;
  _7 = row_oid_57(D) + _6;
  _8 = row_oid_len_58(D) - idx_62;
  _64 = snmp_oid_to_ip_port (_7, _8, &remote_ip, &remote_port);
  idx_65 = _64 + idx_62;
  if (idx_65 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _87 = 241;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 45>; [INV]

  <bb 6> :
  if (idx_65 >= row_oid_len_58(D))
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _86 = 241;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 45>; [INV]

  <bb 8> :
  _9 = (unsigned int) idx_65;
  _10 = _9 * 4;
  _11 = row_oid_57(D) + _10;
  _12 = *_11;
  if (_12 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  _85 = 241;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 45>; [INV]

  <bb 10> :
  pcb_66 = udp_pcbs;
  goto <bb 43>; [INV]

  <bb 11> :
  _13 = local_ip.type;
  _14 = pcb_47->local_ip.type;
  if (_13 == _14)
    goto <bb 12>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 12> :
  _15 = local_ip.type;
  if (_15 == 6)
    goto <bb 13>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 13> :
  _16 = local_ip.u_addr.ip6.addr[0];
  _17 = pcb_47->local_ip.u_addr.ip6.addr[0];
  if (_16 == _17)
    goto <bb 14>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 14> :
  _18 = local_ip.u_addr.ip6.addr[1];
  _19 = pcb_47->local_ip.u_addr.ip6.addr[1];
  if (_18 == _19)
    goto <bb 15>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 15> :
  _20 = local_ip.u_addr.ip6.addr[2];
  _21 = pcb_47->local_ip.u_addr.ip6.addr[2];
  if (_20 == _21)
    goto <bb 16>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 16> :
  _22 = local_ip.u_addr.ip6.addr[3];
  _23 = pcb_47->local_ip.u_addr.ip6.addr[3];
  if (_22 == _23)
    goto <bb 17>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 17> :
  _24 = local_ip.u_addr.ip6.zone;
  _25 = pcb_47->local_ip.u_addr.ip6.zone;
  if (_24 == _25)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  iftmp.2_70 = 1;
  goto <bb 20>; [INV]

  <bb 19> :
  iftmp.2_71 = 0;

  <bb 20> :
  # iftmp.2_51 = PHI <iftmp.2_70(18), iftmp.2_71(19)>
  iftmp.1_72 = (_Bool) iftmp.2_51;
  goto <bb 22>; [INV]

  <bb 21> :
  _26 = local_ip.u_addr.ip4.addr;
  _27 = pcb_47->local_ip.u_addr.ip4.addr;
  iftmp.1_69 = _26 == _27;

  <bb 22> :
  # iftmp.1_50 = PHI <iftmp.1_72(20), iftmp.1_69(21)>
  iftmp.0_73 = iftmp.1_50;
  goto <bb 24>; [INV]

  <bb 23> :
  iftmp.0_68 = 0;

  <bb 24> :
  # iftmp.0_49 = PHI <iftmp.0_73(22), iftmp.0_68(23)>
  if (iftmp.0_49 != 0)
    goto <bb 25>; [INV]
  else
    goto <bb 42>; [INV]

  <bb 25> :
  _28 = pcb_47->local_port;
  local_port.3_29 = local_port;
  if (_28 == local_port.3_29)
    goto <bb 26>; [INV]
  else
    goto <bb 42>; [INV]

  <bb 26> :
  _30 = remote_ip.type;
  _31 = pcb_47->remote_ip.type;
  if (_30 == _31)
    goto <bb 27>; [INV]
  else
    goto <bb 38>; [INV]

  <bb 27> :
  _32 = remote_ip.type;
  if (_32 == 6)
    goto <bb 28>; [INV]
  else
    goto <bb 36>; [INV]

  <bb 28> :
  _33 = remote_ip.u_addr.ip6.addr[0];
  _34 = pcb_47->remote_ip.u_addr.ip6.addr[0];
  if (_33 == _34)
    goto <bb 29>; [INV]
  else
    goto <bb 34>; [INV]

  <bb 29> :
  _35 = remote_ip.u_addr.ip6.addr[1];
  _36 = pcb_47->remote_ip.u_addr.ip6.addr[1];
  if (_35 == _36)
    goto <bb 30>; [INV]
  else
    goto <bb 34>; [INV]

  <bb 30> :
  _37 = remote_ip.u_addr.ip6.addr[2];
  _38 = pcb_47->remote_ip.u_addr.ip6.addr[2];
  if (_37 == _38)
    goto <bb 31>; [INV]
  else
    goto <bb 34>; [INV]

  <bb 31> :
  _39 = remote_ip.u_addr.ip6.addr[3];
  _40 = pcb_47->remote_ip.u_addr.ip6.addr[3];
  if (_39 == _40)
    goto <bb 32>; [INV]
  else
    goto <bb 34>; [INV]

  <bb 32> :
  _41 = remote_ip.u_addr.ip6.zone;
  _42 = pcb_47->remote_ip.u_addr.ip6.zone;
  if (_41 == _42)
    goto <bb 33>; [INV]
  else
    goto <bb 34>; [INV]

  <bb 33> :
  iftmp.6_76 = 1;
  goto <bb 35>; [INV]

  <bb 34> :
  iftmp.6_77 = 0;

  <bb 35> :
  # iftmp.6_54 = PHI <iftmp.6_76(33), iftmp.6_77(34)>
  iftmp.5_78 = (_Bool) iftmp.6_54;
  goto <bb 37>; [INV]

  <bb 36> :
  _43 = remote_ip.u_addr.ip4.addr;
  _44 = pcb_47->remote_ip.u_addr.ip4.addr;
  iftmp.5_75 = _43 == _44;

  <bb 37> :
  # iftmp.5_53 = PHI <iftmp.5_78(35), iftmp.5_75(36)>
  iftmp.4_79 = iftmp.5_53;
  goto <bb 39>; [INV]

  <bb 38> :
  iftmp.4_74 = 0;

  <bb 39> :
  # iftmp.4_52 = PHI <iftmp.4_79(37), iftmp.4_74(38)>
  if (iftmp.4_52 != 0)
    goto <bb 40>; [INV]
  else
    goto <bb 42>; [INV]

  <bb 40> :
  _45 = pcb_47->remote_port;
  remote_port.7_46 = remote_port;
  if (_45 == remote_port.7_46)
    goto <bb 41>; [INV]
  else
    goto <bb 42>; [INV]

  <bb 41> :
  _83 = udp_endpointTable_get_cell_value_core (column_80(D), value_81(D));
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 45>; [INV]

  <bb 42> :
  pcb_84 = pcb_47->next;

  <bb 43> :
  # pcb_47 = PHI <pcb_66(10), pcb_84(42)>
  if (pcb_47 != 0B)
    goto <bb 11>; [INV]
  else
    goto <bb 44>; [INV]

  <bb 44> :
  _67 = 241;

  <bb 45> :
  # _48 = PHI <_88(3), _87(5), _86(7), _85(9), _83(41), _67(44)>
  local_ip ={v} {CLOBBER};
  remote_ip ={v} {CLOBBER};
  local_port ={v} {CLOBBER};
  remote_port ={v} {CLOBBER};

  <bb 46> :
<L46>:
  return _48;

}


udp_endpointTable_get_cell_value_core (const u32_t * column, union snmp_variant_value * value)
{
  snmp_err_t D.7880;
  long unsigned int _1;
  snmp_err_t _2;
  snmp_err_t _8;
  snmp_err_t _9;

  <bb 2> :
  _1 = *column_5(D);
  if (_1 == 8)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
<L0>:
  value_6(D)->u32 = 0;
  goto <bb 5>; [INV]

  <bb 4> :
<L1>:
  _9 = 241;
  goto <bb 6>; [INV]

  <bb 5> :
  _8 = 0;

  <bb 6> :
  # _2 = PHI <_9(4), _8(5)>
<L3>:
  return _2;

}


udp_get_value (struct snmp_node_instance * instance, void * value)
{
  u64_t val64;
  u64_t val64;
  u32_t * uint_ptr;
  s16_t D.7878;
  const struct snmp_node * _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  s16_t _9;
  s16_t _17;
  s16_t _20;
  s16_t _22;
  s16_t _24;
  s16_t _26;
  s16_t _28;
  s16_t _29;

  <bb 2> :
  uint_ptr_12 = value_11(D);
  _1 = instance_14(D)->node;
  _2 = _1->oid;
  switch (_2) <default: <L6> [INV], case 1: <L0> [INV], case 2: <L1> [INV], case 3: <L2> [INV], case 4: <L3> [INV], case 8: <L4> [INV], case 9: <L5> [INV]>

  <bb 3> :
<L0>:
  _3 = lwip_stats.mib2.udpindatagrams;
  *uint_ptr_12 = _3;
  _28 = 4;
  goto <bb 11>; [INV]

  <bb 4> :
<L1>:
  _4 = lwip_stats.mib2.udpnoports;
  *uint_ptr_12 = _4;
  _26 = 4;
  goto <bb 11>; [INV]

  <bb 5> :
<L2>:
  _5 = lwip_stats.mib2.udpinerrors;
  *uint_ptr_12 = _5;
  _24 = 4;
  goto <bb 11>; [INV]

  <bb 6> :
<L3>:
  _6 = lwip_stats.mib2.udpoutdatagrams;
  *uint_ptr_12 = _6;
  _22 = 4;
  goto <bb 11>; [INV]

  <bb 7> :
<L4>:
  _7 = lwip_stats.mib2.udpindatagrams;
  val64_18 = (u64_t) _7;
  MEM[(u64_t *)value_11(D)] = val64_18;
  _20 = 8;
  goto <bb 11>; [INV]

  <bb 8> :
<L5>:
  _8 = lwip_stats.mib2.udpoutdatagrams;
  val64_15 = (u64_t) _8;
  MEM[(u64_t *)value_11(D)] = val64_15;
  _17 = 8;
  goto <bb 11>; [INV]

  <bb 9> :
<L6>:

  <bb 10> :
  _29 = 0;

  <bb 11> :
  # _9 = PHI <_28(3), _26(4), _24(5), _22(6), _20(7), _17(8), _29(10)>
<L8>:
  return _9;

}


