sys_timeouts_sleeptime ()
{
  u32_t ret;
  u32_t now;
  u32_t D.7938;

  <bb 2> :
  next_timeout.12_1 = next_timeout;
  if (next_timeout.12_1 == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  D.7938 = 4294967295;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 9>; [INV]

  <bb 4> :
  now = sys_now ();
  next_timeout.13_2 = next_timeout;
  _3 = next_timeout.13_2->time;
  _4 = _3 - now;
  _5 = _4 >> 31;
  _6 = (_Bool) _5;
  if (_6 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  D.7938 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 9>; [INV]

  <bb 6> :
  next_timeout.14_7 = next_timeout;
  _8 = next_timeout.14_7->time;
  ret = _8 - now;
  ret.15_9 = (signed int) ret;
  if (ret.15_9 < 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  __asm__ __volatile__("BKPT #0
	");
  goto <bb 7>; [INV]

  <bb 8> :
  D.7938 = ret;
  // predicted unlikely by early return (on trees) predictor.

  <bb 9> :
<L7>:
  return D.7938;

}


sys_restart_timeouts ()
{
  struct sys_timeo * t;
  u32_t base;
  u32_t now;

  <bb 2> :
  next_timeout.10_1 = next_timeout;
  if (next_timeout.10_1 == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 7>; [INV]

  <bb 4> :
  now = sys_now ();
  next_timeout.11_2 = next_timeout;
  base = next_timeout.11_2->time;
  t = next_timeout;
  goto <bb 6>; [INV]

  <bb 5> :
  _3 = t->time;
  _4 = _3 - base;
  _5 = now + _4;
  t->time = _5;
  t = t->next;

  <bb 6> :
  if (t != 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
<L5>:
  return;

}


sys_check_timeouts ()
{
  void * arg;
  void (*sys_timeout_handler) (void *) handler;
  struct sys_timeo * tmptimeout;
  u32_t now;

  <bb 2> :
  now = sys_now ();

  <bb 3> :
  tmptimeout = next_timeout;
  if (tmptimeout == 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 10>; [INV]

  <bb 5> :
  _1 = tmptimeout->time;
  _2 = now - _1;
  _3 = _2 >> 31;
  _4 = (_Bool) _3;
  if (_4 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 10>; [INV]

  <bb 7> :
  _5 = tmptimeout->next;
  next_timeout = _5;
  handler = tmptimeout->h;
  arg = tmptimeout->arg;
  _6 = tmptimeout->time;
  current_timeout_due_time = _6;
  memp_free (9, tmptimeout);
  if (handler != 0B)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  handler (arg);

  <bb 9> :
  goto <bb 3>; [INV]

  <bb 10> :
<L7>:
  return;

}


sys_untimeout (void (*sys_timeout_handler) (void *) handler, void * arg)
{
  struct sys_timeo * t;
  struct sys_timeo * prev_t;

  <bb 2> :
  next_timeout.9_1 = next_timeout;
  if (next_timeout.9_1 == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 14>; [INV]

  <bb 4> :
  t = next_timeout;
  prev_t = 0B;
  goto <bb 12>; [INV]

  <bb 5> :
  _2 = t->h;
  if (handler == _2)
    goto <bb 6>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 6> :
  _3 = t->arg;
  if (arg == _3)
    goto <bb 7>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 7> :
  if (prev_t == 0B)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  _4 = t->next;
  next_timeout = _4;
  goto <bb 10>; [INV]

  <bb 9> :
  _5 = t->next;
  prev_t->next = _5;

  <bb 10> :
  memp_free (9, t);
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 14>; [INV]

  <bb 11> :
  prev_t = t;
  t = t->next;

  <bb 12> :
  if (t != 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :

  <bb 14> :
<L12>:
  return;

}


sys_timeout (u32_t msecs, void (*sys_timeout_handler) (void *) handler, void * arg)
{
  u32_t next_timeout_time;

  <bb 2> :
  if (msecs > 1073741823)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  __asm__ __volatile__("BKPT #0
	");
  goto <bb 3>; [INV]

  <bb 4> :
  _1 = sys_now ();
  next_timeout_time = msecs + _1;
  sys_timeout_abs (next_timeout_time, handler, arg);
  return;

}


sys_timeouts_init ()
{
  size_t i;

  <bb 2> :
  i = 1;
  goto <bb 4>; [INV]

  <bb 3> :
  _1 = lwip_cyclic_timers[i].interval_ms;
  _2 = &lwip_cyclic_timers[i];
  sys_timeout (_1, lwip_cyclic_timer, _2);
  i = i + 1;

  <bb 4> :
  if (i <= 7)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  return;

}


lwip_cyclic_timer (void * arg)
{
  const struct lwip_cyclic_timer * cyclic;
  u32_t next_timeout_time;
  u32_t now;

  <bb 2> :
  cyclic = arg;
  _1 = cyclic->handler;
  _1 ();
  now = sys_now ();
  _2 = cyclic->interval_ms;
  current_timeout_due_time.8_3 = current_timeout_due_time;
  next_timeout_time = _2 + current_timeout_due_time.8_3;
  _4 = next_timeout_time - now;
  _5 = _4 >> 31;
  _6 = (_Bool) _5;
  if (_6 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _7 = cyclic->interval_ms;
  _8 = now + _7;
  sys_timeout_abs (_8, lwip_cyclic_timer, arg);
  goto <bb 5>; [INV]

  <bb 4> :
  sys_timeout_abs (next_timeout_time, lwip_cyclic_timer, arg);

  <bb 5> :
  return;

}


sys_timeout_abs (u32_t abs_time, void (*sys_timeout_handler) (void *) handler, void * arg)
{
  struct sys_timeo * t;
  struct sys_timeo * timeout;

  <bb 2> :
  timeout = memp_malloc (9);
  if (timeout == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  if (timeout == 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  __asm__ __volatile__("BKPT #0
	");
  goto <bb 4>; [INV]

  <bb 5> :
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 16>; [INV]

  <bb 6> :
  timeout->next = 0B;
  timeout->h = handler;
  timeout->arg = arg;
  timeout->time = abs_time;
  next_timeout.5_1 = next_timeout;
  if (next_timeout.5_1 == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  next_timeout = timeout;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 16>; [INV]

  <bb 8> :
  _2 = timeout->time;
  next_timeout.6_3 = next_timeout;
  _4 = next_timeout.6_3->time;
  _5 = _2 - _4;
  _6 = _5 >> 31;
  _7 = (_Bool) _6;
  if (_7 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  next_timeout.7_8 = next_timeout;
  timeout->next = next_timeout.7_8;
  next_timeout = timeout;
  goto <bb 16>; [INV]

  <bb 10> :
  t = next_timeout;
  goto <bb 15>; [INV]

  <bb 11> :
  _9 = t->next;
  if (_9 == 0B)
    goto <bb 13>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  _10 = timeout->time;
  _11 = t->next;
  _12 = _11->time;
  _13 = _10 - _12;
  _14 = _13 >> 31;
  _15 = (_Bool) _14;
  if (_15 != 0)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  _16 = t->next;
  timeout->next = _16;
  t->next = timeout;
  goto <bb 16>; [INV]

  <bb 14> :
  t = t->next;

  <bb 15> :
  if (t != 0B)
    goto <bb 11>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 16> :
<L16>:
  return;

}


tcp_timer_needed ()
{
  <bb 2> :
  tcpip_tcp_timer_active.2_1 = tcpip_tcp_timer_active;
  if (tcpip_tcp_timer_active.2_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  tcp_active_pcbs.3_2 = tcp_active_pcbs;
  if (tcp_active_pcbs.3_2 != 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  tcp_tw_pcbs.4_3 = tcp_tw_pcbs;
  if (tcp_tw_pcbs.4_3 != 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  tcpip_tcp_timer_active = 1;
  sys_timeout (250, tcpip_tcp_timer, 0B);

  <bb 6> :
  return;

}


tcpip_tcp_timer (void * arg)
{
  <bb 2> :
  tcp_tmr ();
  tcp_active_pcbs.0_1 = tcp_active_pcbs;
  if (tcp_active_pcbs.0_1 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  tcp_tw_pcbs.1_2 = tcp_tw_pcbs;
  if (tcp_tw_pcbs.1_2 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  sys_timeout (250, tcpip_tcp_timer, 0B);
  goto <bb 6>; [INV]

  <bb 5> :
  tcpip_tcp_timer_active = 0;

  <bb 6> :
  return;

}


