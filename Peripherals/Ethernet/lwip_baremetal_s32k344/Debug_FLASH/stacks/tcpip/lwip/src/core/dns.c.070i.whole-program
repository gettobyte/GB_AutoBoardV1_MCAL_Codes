
Marking local functions:


Marking externally visible functions: dns_gethostbyname_addrtype/28 dns_gethostbyname/27 dns_tmr/12 dns_getserver/11 dns_setserver/10 dns_init/9


Marking externally visible variables: dns_mquery_v6group/8 dns_mquery_v4group/7


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

ipaddr_aton/51 (ipaddr_aton) @06d53700
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: dns_gethostbyname_addrtype/28 
  Calls: 
memcpy/50 (memcpy) @06d532a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: dns_enqueue/26 
  Calls: 
lwip_htonl/49 (lwip_htonl) @06d0bee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: dns_recv/25 dns_recv/25 
  Calls: 
pbuf_copy_partial/48 (pbuf_copy_partial) @06d0b700
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: dns_recv/25 dns_recv/25 dns_recv/25 dns_recv/25 dns_recv/25 
  Calls: 
udp_recv/47 (udp_recv) @06d0b1c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: dns_alloc_random_port/17 
  Calls: 
udp_remove/46 (udp_remove) @06d0b0e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: dns_call_found/19 dns_alloc_random_port/17 
  Calls: 
ip_addr_any_type/45 (ip_addr_any_type) @06d09a68
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: dns_alloc_random_port/17 (addr) 
  Availability: not_available
  Varpool flags: read-only
udp_bind/44 (udp_bind) @06d0b000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: dns_alloc_random_port/17 
  Calls: 
rand/43 (rand) @06cfd540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: dns_create_txid/20 dns_alloc_random_port/17 
  Calls: 
udp_new_ip_type/42 (udp_new_ip_type) @06cfdee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: dns_alloc_random_port/17 
  Calls: 
pbuf_free/41 (pbuf_free) @06cfdd20
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: dns_recv/25 dns_recv/25 dns_recv/25 dns_recv/25 dns_recv/25 dns_send/16 dns_send/16 
  Calls: 
udp_sendto/40 (udp_sendto) @06cfdc40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: dns_send/16 
  Calls: 
pbuf_take_at/39 (pbuf_take_at) @06cfdb60
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: dns_send/16 dns_send/16 
  Calls: 
pbuf_put_at/38 (pbuf_put_at) @06cfda80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: dns_send/16 dns_send/16 
  Calls: 
pbuf_take/37 (pbuf_take) @06cfd9a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: dns_send/16 
  Calls: 
lwip_htons/36 (lwip_htons) @06cfd8c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: dns_recv/25 dns_recv/25 dns_recv/25 dns_recv/25 dns_recv/25 dns_send/16 
  Calls: 
memset/35 (memset) @06cfd7e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: dns_send/16 
  Calls: 
pbuf_alloc/34 (pbuf_alloc) @06cfd700
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: dns_send/16 
  Calls: 
strlen/33 (strlen) @06cfd620
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: dns_gethostbyname_addrtype/28 dns_send/16 
  Calls: 
_ctype_/32 (_ctype_) @06cfe120
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: dns_compare_name/14 (addr) dns_compare_name/14 (addr) 
  Availability: not_available
  Varpool flags: read-only
pbuf_try_get_at/31 (pbuf_try_get_at) @06cfd0e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: dns_skip_name/15 dns_skip_name/15 dns_compare_name/14 dns_compare_name/14 dns_compare_name/14 
  Calls: 
lwip_strnicmp/30 (lwip_strnicmp) @06cebd20
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: dns_enqueue/26 dns_lookup/13 
  Calls: 
ip_addr_any/29 (ip_addr_any) @06cd2a20
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: dns_setserver/10 (read) dns_getserver/11 (addr) 
  Availability: not_available
  Varpool flags: read-only
dns_gethostbyname_addrtype/28 (dns_gethostbyname_addrtype) @06ceb380
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: dns_servers/6 (read) dns_servers/6 (read) dns_servers/6 (read) dns_servers/6 (read) dns_servers/6 (read) dns_servers/6 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: dns_gethostbyname/27 
  Calls: dns_enqueue/26 dns_lookup/13 dns_lookup/13 ipaddr_aton/51 strlen/33 
dns_gethostbyname/27 (dns_gethostbyname) @06cccee0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: dns_gethostbyname_addrtype/28 
dns_enqueue/26 (dns_enqueue) @06cccc40
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: dns_table/4 (read) dns_table/4 (addr) dns_table/4 (read) dns_requests/5 (read) dns_requests/5 (write) dns_requests/5 (write) dns_requests/5 (write) dns_requests/5 (write) dns_table/4 (addr) dns_seqno/3 (read) dns_table/4 (read) dns_table/4 (addr) dns_requests/5 (read) dns_requests/5 (addr) dns_seqno/3 (read) dns_seqno/3 (read) dns_seqno/3 (write) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: dns_gethostbyname_addrtype/28 
  Calls: dns_check_entry/22 dns_alloc_pcb/18 memcpy/50 lwip_strnicmp/30 
dns_recv/25 (dns_recv) @06ccc700
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: dns_table/4 (addr) dns_servers/6 (read) dns_servers/6 (read) dns_servers/6 (read) dns_servers/6 (read) dns_servers/6 (read) dns_servers/6 (read) dns_servers/6 (read) dns_table/4 (write) dns_table/4 (write) dns_table/4 (write) dns_table/4 (read) dns_table/4 (write) dns_table/4 (read) dns_table/4 (write) dns_table/4 (write) dns_table/4 (write) dns_table/4 (write) dns_table/4 (write) dns_table/4 (write) dns_table/4 (write) dns_table/4 (write) dns_table/4 (write) dns_table/4 (write) dns_table/4 (write) dns_table/4 (write) 
  Referring: dns_alloc_random_port/17 (addr) 
  Availability: available
  Function flags: body
  Called by: 
  Calls: pbuf_free/41 dns_call_found/19 pbuf_free/41 dns_check_entry/22 pbuf_free/41 lwip_htons/36 lwip_htons/36 dns_correct_response/24 lwip_htonl/49 pbuf_free/41 pbuf_copy_partial/48 dns_correct_response/24 lwip_htonl/49 pbuf_free/41 pbuf_copy_partial/48 pbuf_copy_partial/48 dns_skip_name/15 dns_check_entry/22 dns_backupserver_available/21 pbuf_copy_partial/48 dns_compare_name/14 lwip_htons/36 lwip_htons/36 lwip_htons/36 pbuf_copy_partial/48 
dns_correct_response/24 (dns_correct_response) @06c938c0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: dns_table/4 (addr) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: dns_recv/25 dns_recv/25 
  Calls: dns_call_found/19 
dns_check_entries/23 (dns_check_entries) @06c93460
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: dns_tmr/12 
  Calls: dns_check_entry/22 
dns_check_entry/22 (dns_check_entry) @06c931c0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: dns_table/4 (addr) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: dns_enqueue/26 dns_recv/25 dns_recv/25 dns_check_entries/23 
  Calls: dns_send/16 dns_call_found/19 dns_backupserver_available/21 dns_send/16 dns_create_txid/20 
dns_backupserver_available/21 (dns_backupserver_available) @06c88ee0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: dns_servers/6 (read) dns_servers/6 (read) dns_servers/6 (read) dns_servers/6 (read) dns_servers/6 (read) dns_servers/6 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: dns_recv/25 dns_check_entry/22 
  Calls: 
dns_create_txid/20 (dns_create_txid) @06c888c0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: dns_table/4 (read) dns_table/4 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: dns_check_entry/22 
  Calls: rand/43 
dns_call_found/19 (dns_call_found) @06c88620
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: dns_table/4 (read) dns_table/4 (read) dns_table/4 (write) dns_table/4 (read) dns_table/4 (read) dns_table/4 (write) dns_requests/5 (read) dns_requests/5 (read) dns_requests/5 (read) dns_table/4 (addr) dns_requests/5 (read) dns_requests/5 (write) dns_table/4 (read) dns_table/4 (read) dns_table/4 (read) dns_table/4 (write) dns_table/4 (read) dns_table/4 (read) dns_pcbs/1 (read) dns_table/4 (read) dns_pcbs/1 (write) dns_table/4 (write) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: dns_recv/25 dns_correct_response/24 dns_check_entry/22 dns_send/16 
  Calls: udp_remove/46 
   Indirect call Num speculative call targets: 0
dns_alloc_pcb/18 (dns_alloc_pcb) @06c88380
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: dns_pcbs/1 (read) dns_pcbs/1 (write) dns_pcbs/1 (read) dns_last_pcb_idx/2 (write) dns_last_pcb_idx/2 (read) dns_pcbs/1 (read) dns_last_pcb_idx/2 (write) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: dns_enqueue/26 
  Calls: dns_alloc_random_port/17 
dns_alloc_random_port/17 (dns_alloc_random_port) @06c880e0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: ip_addr_any_type/45 (addr) dns_recv/25 (addr) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: dns_alloc_pcb/18 
  Calls: udp_recv/47 udp_remove/46 udp_bind/44 rand/43 udp_new_ip_type/42 
dns_send/16 (dns_send) @06c6fe00
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: dns_table/4 (addr) dns_servers/6 (read) dns_servers/6 (read) dns_servers/6 (read) dns_servers/6 (read) dns_servers/6 (read) dns_servers/6 (read) dns_servers/6 (addr) dns_pcbs/1 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: dns_check_entry/22 dns_check_entry/22 
  Calls: pbuf_free/41 pbuf_free/41 udp_sendto/40 pbuf_take_at/39 pbuf_put_at/38 pbuf_take_at/39 pbuf_put_at/38 pbuf_take/37 lwip_htons/36 memset/35 pbuf_alloc/34 strlen/33 dns_call_found/19 
dns_skip_name/15 (dns_skip_name) @06c6f8c0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: dns_recv/25 
  Calls: pbuf_try_get_at/31 pbuf_try_get_at/31 
dns_compare_name/14 (dns_compare_name) @06c6f620
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: _ctype_/32 (addr) _ctype_/32 (addr) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: dns_recv/25 
  Calls: pbuf_try_get_at/31 pbuf_try_get_at/31 pbuf_try_get_at/31 
dns_lookup/13 (dns_lookup) @06c6f000
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: dns_table/4 (read) dns_table/4 (addr) dns_table/4 (read) dns_table/4 (read) dns_table/4 (read) dns_table/4 (read) dns_table/4 (read) dns_table/4 (read) dns_table/4 (read) dns_table/4 (read) dns_table/4 (read) dns_table/4 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: dns_gethostbyname_addrtype/28 dns_gethostbyname_addrtype/28 
  Calls: lwip_strnicmp/30 
dns_tmr/12 (dns_tmr) @06c5f460
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: dns_check_entries/23 
dns_getserver/11 (dns_getserver) @06c5f1c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: dns_servers/6 (addr) ip_addr_any/29 (addr) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
dns_setserver/10 (dns_setserver) @06c18ee0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: dns_servers/6 (write) dns_servers/6 (write) ip_addr_any/29 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
dns_init/9 (dns_init) @06c18e00
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
dns_mquery_v6group/8 (dns_mquery_v6group) @06c13c18
  Type: variable definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Varpool flags: initialized read-only const-value-known
dns_mquery_v4group/7 (dns_mquery_v4group) @06a23ca8
  Type: variable definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Varpool flags: initialized read-only const-value-known
dns_servers/6 (dns_servers) @06c13bd0
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: dns_backupserver_available/21 (read) dns_backupserver_available/21 (read) dns_recv/25 (read) dns_send/16 (addr) dns_backupserver_available/21 (read) dns_backupserver_available/21 (read) dns_backupserver_available/21 (read) dns_backupserver_available/21 (read) dns_recv/25 (read) dns_setserver/10 (write) dns_recv/25 (read) dns_recv/25 (read) dns_recv/25 (read) dns_recv/25 (read) dns_setserver/10 (write) dns_getserver/11 (addr) dns_send/16 (read) dns_send/16 (read) dns_send/16 (read) dns_send/16 (read) dns_send/16 (read) dns_send/16 (read) dns_recv/25 (read) dns_gethostbyname_addrtype/28 (read) dns_gethostbyname_addrtype/28 (read) dns_gethostbyname_addrtype/28 (read) dns_gethostbyname_addrtype/28 (read) dns_gethostbyname_addrtype/28 (read) dns_gethostbyname_addrtype/28 (read) 
  Availability: available
  Varpool flags:
dns_requests/5 (dns_requests) @06c13b40
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: dns_call_found/19 (read) dns_call_found/19 (read) dns_call_found/19 (read) dns_call_found/19 (read) dns_call_found/19 (write) dns_enqueue/26 (read) dns_enqueue/26 (write) dns_enqueue/26 (write) dns_enqueue/26 (write) dns_enqueue/26 (write) dns_enqueue/26 (read) dns_enqueue/26 (addr) 
  Availability: available
  Varpool flags:
dns_table/4 (dns_table) @06c13ab0
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: dns_lookup/13 (read) dns_lookup/13 (read) dns_lookup/13 (read) dns_lookup/13 (read) dns_call_found/19 (read) dns_check_entry/22 (addr) dns_call_found/19 (read) dns_call_found/19 (write) dns_call_found/19 (read) dns_call_found/19 (read) dns_create_txid/20 (read) dns_correct_response/24 (addr) dns_lookup/13 (read) dns_lookup/13 (read) dns_lookup/13 (read) dns_lookup/13 (read) dns_call_found/19 (read) dns_call_found/19 (read) dns_call_found/19 (write) dns_call_found/19 (addr) dns_call_found/19 (read) dns_call_found/19 (read) dns_recv/25 (write) dns_recv/25 (write) dns_recv/25 (write) dns_recv/25 (write) dns_recv/25 (write) dns_recv/25 (write) dns_lookup/13 (read) dns_call_found/19 (write) dns_send/16 (addr) dns_create_txid/20 (read) dns_call_found/19 (write) dns_lookup/13 (read) dns_lookup/13 (addr) dns_lookup/13 (read) dns_call_found/19 (read) dns_call_found/19 (read) dns_recv/25 (addr) dns_recv/25 (write) dns_recv/25 (write) dns_recv/25 (write) dns_recv/25 (read) dns_recv/25 (write) dns_recv/25 (read) dns_recv/25 (write) dns_recv/25 (write) dns_recv/25 (write) dns_recv/25 (write) dns_recv/25 (write) dns_recv/25 (write) dns_enqueue/26 (read) dns_enqueue/26 (addr) dns_enqueue/26 (read) dns_enqueue/26 (addr) dns_enqueue/26 (read) dns_enqueue/26 (addr) 
  Availability: available
  Varpool flags:
dns_seqno/3 (dns_seqno) @06c13a20
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: dns_enqueue/26 (read) dns_enqueue/26 (read) dns_enqueue/26 (read) dns_enqueue/26 (write) 
  Availability: available
  Varpool flags:
dns_last_pcb_idx/2 (dns_last_pcb_idx) @06c13990
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: dns_alloc_pcb/18 (write) dns_alloc_pcb/18 (read) dns_alloc_pcb/18 (write) 
  Availability: available
  Varpool flags:
dns_pcbs/1 (dns_pcbs) @06c13900
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: dns_alloc_pcb/18 (read) dns_alloc_pcb/18 (read) dns_call_found/19 (write) dns_alloc_pcb/18 (read) dns_alloc_pcb/18 (write) dns_call_found/19 (read) dns_send/16 (read) 
  Availability: available
  Varpool flags:
dns_gethostbyname_addrtype (const char * hostname, struct ip_addr_t * addr, void (*dns_found_callback) (const char *, const struct ip_addr_t *, void *) found, void * callback_arg, u8_t dns_addrtype)
{
  u8_t fallback;
  size_t hostnamelen;
  int iftmp.32;
  _Bool iftmp.31;
  err_t D.7934;
  char _1;
  int _2;
  unsigned char _3;
  unsigned char _4;
  signed char _5;
  signed char _6;
  unsigned char _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  err_t _14;
  _Bool iftmp.31_15;
  int iftmp.32_16;
  err_t _25;
  err_t _30;
  _Bool iftmp.31_31;
  int iftmp.32_32;
  int iftmp.32_33;
  _Bool iftmp.31_34;
  err_t _38;
  err_t _39;
  err_t _40;
  err_t _41;
  err_t _42;

  <bb 2> :
  if (addr_19(D) == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  if (hostname_20(D) == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  _1 = *hostname_20(D);
  if (_1 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _42 = -16;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 37>; [INV]

  <bb 6> :
  hostnamelen_22 = strlen (hostname_20(D));
  if (hostnamelen_22 > 255)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _41 = -16;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 37>; [INV]

  <bb 8> :
  _2 = ipaddr_aton (hostname_20(D), addr_19(D));
  if (_2 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 9> :
  if (addr_19(D) != 0B)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  _3 = addr_19(D)->type;
  if (_3 == 6)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  if (dns_addrtype_24(D) != 0)
    goto <bb 15>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  if (addr_19(D) == 0B)
    goto <bb 14>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  _4 = addr_19(D)->type;
  if (_4 == 0)
    goto <bb 14>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 14> :
  if (dns_addrtype_24(D) != 1)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  _25 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 37>; [INV]

  <bb 16> :
  _5 = dns_lookup (hostname_20(D), addr_19(D), dns_addrtype_24(D));
  if (_5 == 0)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  _40 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 37>; [INV]

  <bb 18> :
  if (dns_addrtype_24(D) == 2)
    goto <bb 20>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 19> :
  if (dns_addrtype_24(D) == 3)
    goto <bb 20>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 20> :
  if (dns_addrtype_24(D) == 2)
    goto <bb 21>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 21> :
  fallback_28 = 1;
  goto <bb 23>; [INV]

  <bb 22> :
  fallback_27 = 0;

  <bb 23> :
  # fallback_13 = PHI <fallback_28(21), fallback_27(22)>
  _6 = dns_lookup (hostname_20(D), addr_19(D), fallback_13);
  if (_6 == 0)
    goto <bb 24>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 24> :
  _30 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 37>; [INV]

  <bb 25> :
  _7 = dns_servers[0].type;
  if (_7 == 6)
    goto <bb 26>; [INV]
  else
    goto <bb 33>; [INV]

  <bb 26> :
  _8 = dns_servers[0].u_addr.ip6.addr[0];
  if (_8 == 0)
    goto <bb 27>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 27> :
  _9 = dns_servers[0].u_addr.ip6.addr[1];
  if (_9 == 0)
    goto <bb 28>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 28> :
  _10 = dns_servers[0].u_addr.ip6.addr[2];
  if (_10 == 0)
    goto <bb 29>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 29> :
  _11 = dns_servers[0].u_addr.ip6.addr[3];
  if (_11 == 0)
    goto <bb 30>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 30> :
  iftmp.32_32 = 1;
  goto <bb 32>; [INV]

  <bb 31> :
  iftmp.32_33 = 0;

  <bb 32> :
  # iftmp.32_16 = PHI <iftmp.32_32(30), iftmp.32_33(31)>
  iftmp.31_34 = (_Bool) iftmp.32_16;
  goto <bb 34>; [INV]

  <bb 33> :
  _12 = dns_servers[0].u_addr.ip4.addr;
  iftmp.31_31 = _12 == 0;

  <bb 34> :
  # iftmp.31_15 = PHI <iftmp.31_34(32), iftmp.31_31(33)>
  if (iftmp.31_15 != 0)
    goto <bb 35>; [INV]
  else
    goto <bb 36>; [INV]

  <bb 35> :
  _39 = -6;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 37>; [INV]

  <bb 36> :
  _38 = dns_enqueue (hostname_20(D), hostnamelen_22, found_35(D), callback_arg_36(D), dns_addrtype_24(D));

  <bb 37> :
  # _14 = PHI <_42(5), _41(7), _25(15), _40(17), _30(24), _39(35), _38(36)>
<L36>:
  return _14;

}


dns_gethostbyname (const char * hostname, struct ip_addr_t * addr, void (*dns_found_callback) (const char *, const struct ip_addr_t *, void *) found, void * callback_arg)
{
  err_t D.7928;
  err_t _7;

  <bb 2> :
  _7 = dns_gethostbyname_addrtype (hostname_2(D), addr_3(D), found_4(D), callback_arg_5(D), 2);

  <bb 3> :
<L0>:
  return _7;

}


dns_enqueue (const char * name, size_t hostnamelen, void (*dns_found_callback) (const char *, const struct ip_addr_t *, void *) found, void * callback_arg, u8_t dns_addrtype)
{
  u8_t age;
  u8_t r;
  struct dns_req_entry * req;
  size_t namelen;
  struct dns_table_entry * entry;
  u8_t lseqi;
  u8_t lseq;
  u8_t i;
  err_t D.7909;
  int _1;
  unsigned char _2;
  int _3;
  char[256] * _4;
  int _5;
  int _6;
  unsigned char _7;
  int _8;
  void (*<T76b>) (const char *, const struct ip_addr_t *, void *) _9;
  int _10;
  int _11;
  int _12;
  int _13;
  unsigned char r.24_14;
  unsigned char i.25_15;
  int _16;
  unsigned char _17;
  unsigned char _18;
  unsigned char dns_seqno.26_19;
  unsigned char _20;
  int _21;
  unsigned char _22;
  int _23;
  int _24;
  void (*<T76b>) (const char *, const struct ip_addr_t *, void *) _25;
  int _26;
  unsigned char r.27_27;
  unsigned char dns_seqno.28_28;
  char[256] * _29;
  unsigned char _30;
  unsigned char _31;
  unsigned char dns_seqno.29_32;
  unsigned char dns_seqno.30_33;
  unsigned char _34;
  err_t _48;
  err_t _65;
  err_t _89;
  err_t _92;
  err_t _93;
  err_t _101;

  <bb 2> :
  entry_52 = 0B;
  i_53 = 0;
  goto <bb 13>; [INV]

  <bb 3> :
  _1 = (int) i_35;
  _2 = dns_table[_1].state;
  if (_2 == 2)
    goto <bb 4>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 4> :
  _3 = (int) i_35;
  _4 = &dns_table[_3].name;
  _5 = lwip_strnicmp (name_82(D), _4, 256);
  if (_5 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 5> :
  _6 = (int) i_35;
  _7 = dns_table[_6].reqaddrtype;
  if (dns_addrtype_73(D) != _7)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  // predicted unlikely by continue predictor.
  goto <bb 12>; [INV]

  <bb 7> :
  r_95 = 0;
  goto <bb 11>; [INV]

  <bb 8> :
  _8 = (int) r_46;
  _9 = dns_requests[_8].found;
  if (_9 == 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  _10 = (int) r_46;
  dns_requests[_10].found = found_76(D);
  _11 = (int) r_46;
  dns_requests[_11].arg = callback_arg_78(D);
  _12 = (int) r_46;
  dns_requests[_12].dns_table_idx = i_35;
  _13 = (int) r_46;
  dns_requests[_13].reqaddrtype = dns_addrtype_73(D);
  _101 = -5;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 37>; [INV]

  <bb 10> :
  r.24_14 = r_46;
  r_96 = r.24_14 + 1;

  <bb 11> :
  # r_46 = PHI <r_95(7), r_96(10)>
  if (r_46 <= 3)
    goto <bb 8>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  i.25_15 = i_35;
  i_102 = i.25_15 + 1;

  <bb 13> :
  # i_35 = PHI <i_53(2), i_102(12)>
  if (i_35 <= 3)
    goto <bb 3>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 14> :
  lseq_55 = 0;
  lseqi_56 = 4;
  i_57 = 0;
  goto <bb 21>; [INV]

  <bb 15> :
  _16 = (int) i_36;
  entry_58 = &dns_table[_16];
  _17 = entry_58->state;
  if (_17 == 0)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  goto <bb 22>; [INV]

  <bb 17> :
  _18 = entry_58->state;
  if (_18 == 3)
    goto <bb 18>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 18> :
  dns_seqno.26_19 = dns_seqno;
  _20 = entry_58->seqno;
  age_59 = dns_seqno.26_19 - _20;
  if (age_59 > lseq_39)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  lseq_60 = age_59;
  lseqi_61 = i_36;

  <bb 20> :
  # lseq_38 = PHI <lseq_39(17), lseq_39(18), lseq_60(19)>
  # lseqi_40 = PHI <lseqi_41(17), lseqi_41(18), lseqi_61(19)>
  i_62 = i_36 + 1;

  <bb 21> :
  # i_36 = PHI <i_57(14), i_62(20)>
  # lseq_39 = PHI <lseq_55(14), lseq_38(20)>
  # lseqi_41 = PHI <lseqi_56(14), lseqi_40(20)>
  # entry_42 = PHI <entry_52(14), entry_58(20)>
  if (i_36 <= 3)
    goto <bb 15>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 22> :
  # entry_43 = PHI <entry_58(16), entry_42(21)>
  if (i_36 == 4)
    goto <bb 23>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 23> :
  if (lseqi_41 > 3)
    goto <bb 25>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 24> :
  _21 = (int) lseqi_41;
  _22 = dns_table[_21].state;
  if (_22 != 3)
    goto <bb 25>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 25> :
  _65 = -1;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 37>; [INV]

  <bb 26> :
  i_63 = lseqi_41;
  _23 = (int) i_63;
  entry_64 = &dns_table[_23];

  <bb 27> :
  # i_37 = PHI <i_36(22), i_63(26)>
  # entry_44 = PHI <entry_43(22), entry_64(26)>
  req_66 = 0B;
  r_67 = 0;
  goto <bb 31>; [INV]

  <bb 28> :
  _24 = (int) r_47;
  _25 = dns_requests[_24].found;
  if (_25 == 0B)
    goto <bb 29>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 29> :
  _26 = (int) r_47;
  req_69 = &dns_requests[_26];
  goto <bb 32>; [INV]

  <bb 30> :
  r.27_27 = r_47;
  r_68 = r.27_27 + 1;

  <bb 31> :
  # r_47 = PHI <r_67(27), r_68(30)>
  if (r_47 <= 3)
    goto <bb 28>; [INV]
  else
    goto <bb 32>; [INV]

  <bb 32> :
  # req_45 = PHI <req_69(29), req_66(31)>
  if (req_45 == 0B)
    goto <bb 33>; [INV]
  else
    goto <bb 34>; [INV]

  <bb 33> :
  _93 = -1;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 37>; [INV]

  <bb 34> :
  req_45->dns_table_idx = i_37;
  entry_44->state = 1;
  dns_seqno.28_28 = dns_seqno;
  entry_44->seqno = dns_seqno.28_28;
  entry_44->reqaddrtype = dns_addrtype_73(D);
  req_45->reqaddrtype = dns_addrtype_73(D);
  req_45->found = found_76(D);
  req_45->arg = callback_arg_78(D);
  namelen_81 = MIN_EXPR <hostnamelen_80(D), 255>;
  _29 = &entry_44->name;
  memcpy (_29, name_82(D), namelen_81);
  entry_44->name[namelen_81] = 0;
  _30 = dns_alloc_pcb ();
  entry_44->pcb_idx = _30;
  _31 = entry_44->pcb_idx;
  if (_31 > 3)
    goto <bb 35>; [INV]
  else
    goto <bb 36>; [INV]

  <bb 35> :
  entry_44->state = 0;
  req_45->found = 0B;
  _92 = -1;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 37>; [INV]

  <bb 36> :
  dns_seqno.29_32 = dns_seqno;
  dns_seqno.30_33 = dns_seqno.29_32;
  _34 = dns_seqno.30_33 + 1;
  dns_seqno = _34;
  dns_check_entry (i_37);
  _89 = -5;

  <bb 37> :
  # _48 = PHI <_101(9), _65(25), _93(33), _92(35), _89(36)>
<L38>:
  return _48;

}


dns_recv (void * arg, struct udp_pcb * pcb, struct pbuf * p, const struct ip_addr_t * addr, u16_t port)
{
  struct ip6_addr_p_t ip6addr;
  struct ip4_addr_t ip4addr;
  struct dns_table_entry * entry;
  u16_t nanswers;
  u16_t nquestions;
  struct dns_query qry;
  struct dns_answer ans;
  struct dns_hdr hdr;
  u16_t res_idx;
  u16_t txid;
  u8_t i;
  int iftmp.22;
  _Bool iftmp.21;
  _Bool iftmp.20;
  short unsigned int _1;
  short unsigned int _2;
  short unsigned int _3;
  int _4;
  unsigned char _5;
  short unsigned int _6;
  short unsigned int _7;
  short unsigned int _8;
  unsigned char _9;
  signed char _10;
  unsigned char _11;
  unsigned char _12;
  int _13;
  unsigned char _14;
  unsigned char _15;
  long unsigned int _16;
  unsigned char _17;
  int _18;
  long unsigned int _19;
  long unsigned int _20;
  unsigned char _21;
  int _22;
  long unsigned int _23;
  long unsigned int _24;
  unsigned char _25;
  int _26;
  long unsigned int _27;
  long unsigned int _28;
  unsigned char _29;
  int _30;
  long unsigned int _31;
  unsigned char _32;
  unsigned char _33;
  int _34;
  unsigned char _35;
  long unsigned int _36;
  unsigned char _37;
  int _38;
  long unsigned int _39;
  char[256] * _40;
  short unsigned int _41;
  short unsigned int _42;
  unsigned char _43;
  unsigned char _44;
  short unsigned int _45;
  unsigned char _46;
  unsigned char _47;
  short unsigned int _48;
  unsigned char _49;
  int _50;
  int _51;
  unsigned char _52;
  short unsigned int _53;
  short unsigned int _54;
  short unsigned int _55;
  short unsigned int _56;
  unsigned char _57;
  unsigned char _58;
  short unsigned int _59;
  int _60;
  long unsigned int _61;
  int _62;
  int _63;
  int _64;
  long unsigned int _65;
  int _66;
  long unsigned int _67;
  int _68;
  long unsigned int _69;
  long unsigned int _70;
  short unsigned int _71;
  short unsigned int _72;
  unsigned char _73;
  unsigned char _74;
  short unsigned int _75;
  int _76;
  long unsigned int _77;
  int _78;
  long unsigned int _79;
  int _80;
  long unsigned int _81;
  int _82;
  long unsigned int _83;
  int _84;
  int _85;
  long unsigned int _86;
  long unsigned int _87;
  int _88;
  short unsigned int _89;
  short unsigned int _90;
  int _91;
  int _92;
  short unsigned int _93;
  short unsigned int _94;
  short unsigned int _95;
  unsigned char _96;
  unsigned char _97;
  unsigned char _98;
  int _99;
  int _100;
  int _101;
  int _102;
  unsigned char i.23_103;
  _Bool iftmp.20_107;
  _Bool iftmp.21_108;
  int iftmp.22_109;
  _Bool iftmp.20_127;
  _Bool iftmp.21_128;
  int iftmp.22_129;
  int iftmp.22_130;
  _Bool iftmp.21_131;
  _Bool iftmp.20_132;

  <bb 2> :
  _1 = p_116(D)->tot_len;
  if (_1 <= 15)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  // predicted unlikely by goto predictor.
  goto <bb 80>; [INV]

  <bb 4> :
  _2 = pbuf_copy_partial (p_116(D), &hdr, 12, 0);
  if (_2 == 12)
    goto <bb 5>; [INV]
  else
    goto <bb 80>; [INV]

  <bb 5> :
  _3 = hdr.id;
  txid_119 = lwip_htons (_3);
  i_120 = 0;
  goto <bb 79>; [INV]

  <bb 6> :
  _4 = (int) i_104;
  entry_121 = &dns_table[_4];
  _5 = entry_121->state;
  if (_5 == 2)
    goto <bb 7>; [INV]
  else
    goto <bb 78>; [INV]

  <bb 7> :
  _6 = entry_121->txid;
  if (txid_119 == _6)
    goto <bb 8>; [INV]
  else
    goto <bb 78>; [INV]

  <bb 8> :
  _7 = hdr.numquestions;
  nquestions_123 = lwip_htons (_7);
  _8 = hdr.numanswers;
  nanswers_125 = lwip_htons (_8);
  _9 = hdr.flags1;
  _10 = (signed char) _9;
  if (_10 >= 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  // predicted unlikely by goto predictor.
  goto <bb 80>; [INV]

  <bb 10> :
  if (nquestions_123 != 1)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  // predicted unlikely by goto predictor.
  goto <bb 80>; [INV]

  <bb 12> :
  _11 = addr_126(D)->type;
  _12 = entry_121->server_idx;
  _13 = (int) _12;
  _14 = dns_servers[_13].type;
  if (_11 == _14)
    goto <bb 13>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 13> :
  _15 = addr_126(D)->type;
  if (_15 == 6)
    goto <bb 14>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 14> :
  _16 = addr_126(D)->u_addr.ip6.addr[0];
  _17 = entry_121->server_idx;
  _18 = (int) _17;
  _19 = dns_servers[_18].u_addr.ip6.addr[0];
  if (_16 != _19)
    goto <bb 19>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  _20 = addr_126(D)->u_addr.ip6.addr[1];
  _21 = entry_121->server_idx;
  _22 = (int) _21;
  _23 = dns_servers[_22].u_addr.ip6.addr[1];
  if (_20 != _23)
    goto <bb 19>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 16> :
  _24 = addr_126(D)->u_addr.ip6.addr[2];
  _25 = entry_121->server_idx;
  _26 = (int) _25;
  _27 = dns_servers[_26].u_addr.ip6.addr[2];
  if (_24 != _27)
    goto <bb 19>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 17> :
  _28 = addr_126(D)->u_addr.ip6.addr[3];
  _29 = entry_121->server_idx;
  _30 = (int) _29;
  _31 = dns_servers[_30].u_addr.ip6.addr[3];
  if (_28 != _31)
    goto <bb 19>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 18> :
  _32 = addr_126(D)->u_addr.ip6.zone;
  _33 = entry_121->server_idx;
  _34 = (int) _33;
  _35 = dns_servers[_34].u_addr.ip6.zone;
  if (_32 != _35)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  iftmp.22_130 = 1;
  goto <bb 21>; [INV]

  <bb 20> :
  iftmp.22_129 = 0;

  <bb 21> :
  # iftmp.22_109 = PHI <iftmp.22_130(19), iftmp.22_129(20)>
  iftmp.21_131 = (_Bool) iftmp.22_109;
  goto <bb 23>; [INV]

  <bb 22> :
  _36 = addr_126(D)->u_addr.ip4.addr;
  _37 = entry_121->server_idx;
  _38 = (int) _37;
  _39 = dns_servers[_38].u_addr.ip4.addr;
  iftmp.21_128 = _36 != _39;

  <bb 23> :
  # iftmp.21_108 = PHI <iftmp.21_131(21), iftmp.21_128(22)>
  iftmp.20_132 = iftmp.21_108;
  goto <bb 25>; [INV]

  <bb 24> :
  iftmp.20_127 = 1;

  <bb 25> :
  # iftmp.20_107 = PHI <iftmp.20_132(23), iftmp.20_127(24)>
  if (iftmp.20_107 != 0)
    goto <bb 26>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 26> :
  // predicted unlikely by goto predictor.
  goto <bb 80>; [INV]

  <bb 27> :
  _40 = &entry_121->name;
  res_idx_134 = dns_compare_name (_40, p_116(D), 12);
  if (res_idx_134 == 65535)
    goto <bb 28>; [INV]
  else
    goto <bb 29>; [INV]

  <bb 28> :
  // predicted unlikely by goto predictor.
  goto <bb 80>; [INV]

  <bb 29> :
  _41 = pbuf_copy_partial (p_116(D), &qry, 4, res_idx_134);
  if (_41 != 4)
    goto <bb 30>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 30> :
  // predicted unlikely by goto predictor.
  goto <bb 80>; [INV]

  <bb 31> :
  _42 = qry.cls;
  if (_42 != 256)
    goto <bb 38>; [INV]
  else
    goto <bb 32>; [INV]

  <bb 32> :
  _43 = entry_121->reqaddrtype;
  if (_43 == 3)
    goto <bb 34>; [INV]
  else
    goto <bb 33>; [INV]

  <bb 33> :
  _44 = entry_121->reqaddrtype;
  if (_44 == 1)
    goto <bb 34>; [INV]
  else
    goto <bb 35>; [INV]

  <bb 34> :
  _45 = qry.type;
  if (_45 != 7168)
    goto <bb 38>; [INV]
  else
    goto <bb 35>; [INV]

  <bb 35> :
  _46 = entry_121->reqaddrtype;
  if (_46 != 3)
    goto <bb 36>; [INV]
  else
    goto <bb 39>; [INV]

  <bb 36> :
  _47 = entry_121->reqaddrtype;
  if (_47 != 1)
    goto <bb 37>; [INV]
  else
    goto <bb 39>; [INV]

  <bb 37> :
  _48 = qry.type;
  if (_48 != 256)
    goto <bb 38>; [INV]
  else
    goto <bb 39>; [INV]

  <bb 38> :
  // predicted unlikely by goto predictor.
  goto <bb 80>; [INV]

  <bb 39> :
  if (res_idx_134 > 65531)
    goto <bb 40>; [INV]
  else
    goto <bb 41>; [INV]

  <bb 40> :
  // predicted unlikely by goto predictor.
  goto <bb 80>; [INV]

  <bb 41> :
  res_idx_136 = res_idx_134 + 4;
  _49 = hdr.flags2;
  _50 = (int) _49;
  _51 = _50 & 15;
  if (_51 != 0)
    goto <bb 42>; [INV]
  else
    goto <bb 44>; [INV]

  <bb 42> :
  _52 = dns_backupserver_available (entry_121);
  if (_52 != 0)
    goto <bb 43>; [INV]
  else
    goto <bb 77>; [INV]

  <bb 43> :
  entry_121->retries = 3;
  entry_121->tmr = 1;
  dns_check_entry (i_104);
  // predicted unlikely by goto predictor.
  goto <bb 80>; [INV]

  <bb 44> :
  goto <bb 69>; [INV]

  <bb 45> :
  res_idx_138 = dns_skip_name (p_116(D), res_idx_105);
  if (res_idx_138 == 65535)
    goto <bb 46>; [INV]
  else
    goto <bb 47>; [INV]

  <bb 46> :
  // predicted unlikely by goto predictor.
  goto <bb 80>; [INV]

  <bb 47> :
  _53 = pbuf_copy_partial (p_116(D), &ans, 10, res_idx_138);
  if (_53 != 10)
    goto <bb 48>; [INV]
  else
    goto <bb 49>; [INV]

  <bb 48> :
  // predicted unlikely by goto predictor.
  goto <bb 80>; [INV]

  <bb 49> :
  if (res_idx_138 > 65525)
    goto <bb 50>; [INV]
  else
    goto <bb 51>; [INV]

  <bb 50> :
  // predicted unlikely by goto predictor.
  goto <bb 80>; [INV]

  <bb 51> :
  res_idx_140 = res_idx_138 + 10;
  _54 = ans.cls;
  if (_54 == 256)
    goto <bb 52>; [INV]
  else
    goto <bb 66>; [INV]

  <bb 52> :
  _55 = ans.type;
  if (_55 == 256)
    goto <bb 53>; [INV]
  else
    goto <bb 59>; [INV]

  <bb 53> :
  _56 = ans.len;
  if (_56 == 1024)
    goto <bb 54>; [INV]
  else
    goto <bb 59>; [INV]

  <bb 54> :
  _57 = entry_121->reqaddrtype;
  if (_57 != 3)
    goto <bb 55>; [INV]
  else
    goto <bb 59>; [INV]

  <bb 55> :
  _58 = entry_121->reqaddrtype;
  if (_58 != 1)
    goto <bb 56>; [INV]
  else
    goto <bb 59>; [INV]

  <bb 56> :
  _59 = pbuf_copy_partial (p_116(D), &ip4addr, 4, res_idx_140);
  if (_59 != 4)
    goto <bb 57>; [INV]
  else
    goto <bb 58>; [INV]

  <bb 57> :
  // predicted unlikely by goto predictor.
  ip4addr ={v} {CLOBBER};
  goto <bb 80>; [INV]

  <bb 58> :
  _60 = (int) i_104;
  _61 = ip4addr.addr;
  dns_table[_60].ipaddr.u_addr.ip4.addr = _61;
  _62 = (int) i_104;
  dns_table[_62].ipaddr.type = 0;
  _63 = (int) i_104;
  dns_table[_63].ipaddr.u_addr.ip6.addr[3] = 0;
  _64 = (int) i_104;
  _65 = dns_table[_63].ipaddr.u_addr.ip6.addr[3];
  dns_table[_64].ipaddr.u_addr.ip6.addr[2] = _65;
  _66 = (int) i_104;
  _67 = dns_table[_64].ipaddr.u_addr.ip6.addr[2];
  dns_table[_66].ipaddr.u_addr.ip6.addr[1] = _67;
  _68 = (int) i_104;
  dns_table[_68].ipaddr.u_addr.ip6.zone = 0;
  pbuf_free (p_116(D));
  _69 = ans.ttl;
  _70 = lwip_htonl (_69);
  dns_correct_response (i_104, _70);
  // predicted unlikely by early return (on trees) predictor.
  ip4addr ={v} {CLOBBER};
  goto <bb 81>; [INV]

  <bb 59> :
  _71 = ans.type;
  if (_71 == 7168)
    goto <bb 60>; [INV]
  else
    goto <bb 66>; [INV]

  <bb 60> :
  _72 = ans.len;
  if (_72 == 4096)
    goto <bb 61>; [INV]
  else
    goto <bb 66>; [INV]

  <bb 61> :
  _73 = entry_121->reqaddrtype;
  if (_73 == 3)
    goto <bb 63>; [INV]
  else
    goto <bb 62>; [INV]

  <bb 62> :
  _74 = entry_121->reqaddrtype;
  if (_74 == 1)
    goto <bb 63>; [INV]
  else
    goto <bb 66>; [INV]

  <bb 63> :
  _75 = pbuf_copy_partial (p_116(D), &ip6addr, 16, res_idx_140);
  if (_75 != 16)
    goto <bb 64>; [INV]
  else
    goto <bb 65>; [INV]

  <bb 64> :
  // predicted unlikely by goto predictor.
  ip6addr ={v} {CLOBBER};
  goto <bb 80>; [INV]

  <bb 65> :
  _76 = (int) i_104;
  _77 = ip6addr.addr[0];
  dns_table[_76].ipaddr.u_addr.ip6.addr[0] = _77;
  _78 = (int) i_104;
  _79 = ip6addr.addr[1];
  dns_table[_78].ipaddr.u_addr.ip6.addr[1] = _79;
  _80 = (int) i_104;
  _81 = ip6addr.addr[2];
  dns_table[_80].ipaddr.u_addr.ip6.addr[2] = _81;
  _82 = (int) i_104;
  _83 = ip6addr.addr[3];
  dns_table[_82].ipaddr.u_addr.ip6.addr[3] = _83;
  _84 = (int) i_104;
  dns_table[_84].ipaddr.u_addr.ip6.zone = 0;
  _85 = (int) i_104;
  dns_table[_85].ipaddr.type = 6;
  pbuf_free (p_116(D));
  _86 = ans.ttl;
  _87 = lwip_htonl (_86);
  dns_correct_response (i_104, _87);
  // predicted unlikely by early return (on trees) predictor.
  ip6addr ={v} {CLOBBER};
  goto <bb 81>; [INV]

  <bb 66> :
  _88 = (int) res_idx_140;
  _89 = ans.len;
  _90 = lwip_htons (_89);
  _91 = (int) _90;
  _92 = _88 + _91;
  if (_92 > 65535)
    goto <bb 67>; [INV]
  else
    goto <bb 68>; [INV]

  <bb 67> :
  // predicted unlikely by goto predictor.
  goto <bb 80>; [INV]

  <bb 68> :
  _93 = ans.len;
  _94 = lwip_htons (_93);
  res_idx_167 = res_idx_140 + _94;
  nanswers_168 = nanswers_106 + 65535;

  <bb 69> :
  # res_idx_105 = PHI <res_idx_136(44), res_idx_167(68)>
  # nanswers_106 = PHI <nanswers_125(44), nanswers_168(68)>
  if (nanswers_106 != 0)
    goto <bb 70>; [INV]
  else
    goto <bb 71>; [INV]

  <bb 70> :
  _95 = p_116(D)->tot_len;
  if (res_idx_105 < _95)
    goto <bb 45>; [INV]
  else
    goto <bb 71>; [INV]

  <bb 71> :
  _96 = entry_121->reqaddrtype;
  if (_96 == 2)
    goto <bb 73>; [INV]
  else
    goto <bb 72>; [INV]

  <bb 72> :
  _97 = entry_121->reqaddrtype;
  if (_97 == 3)
    goto <bb 73>; [INV]
  else
    goto <bb 77>; [INV]

  <bb 73> :
  _98 = entry_121->reqaddrtype;
  if (_98 == 2)
    goto <bb 74>; [INV]
  else
    goto <bb 75>; [INV]

  <bb 74> :
  _99 = (int) i_104;
  dns_table[_99].reqaddrtype = 1;
  goto <bb 76>; [INV]

  <bb 75> :
  _100 = (int) i_104;
  dns_table[_100].reqaddrtype = 0;

  <bb 76> :
  pbuf_free (p_116(D));
  _101 = (int) i_104;
  dns_table[_101].state = 1;
  dns_check_entry (i_104);
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 81>; [INV]

  <bb 77> :
  pbuf_free (p_116(D));
  dns_call_found (i_104, 0B);
  _102 = (int) i_104;
  dns_table[_102].state = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 81>; [INV]

  <bb 78> :
  i.23_103 = i_104;
  i_181 = i.23_103 + 1;

  <bb 79> :
  # i_104 = PHI <i_120(5), i_181(78)>
  if (i_104 <= 3)
    goto <bb 6>; [INV]
  else
    goto <bb 80>; [INV]

  <bb 80> :
ignore_packet:
  pbuf_free (p_116(D));

  <bb 81> :
  hdr ={v} {CLOBBER};
  ans ={v} {CLOBBER};
  qry ={v} {CLOBBER};

  <bb 82> :
<L94>:
  return;

}


dns_correct_response (u8_t idx, u32_t ttl)
{
  struct dns_table_entry * entry;
  int _1;
  unsigned char _2;
  long unsigned int _3;
  struct ip_addr_t * _4;
  long unsigned int _5;
  unsigned char _6;

  <bb 2> :
  _1 = (int) idx_9(D);
  entry_10 = &dns_table[_1];
  entry_10->state = 3;
  _2 = entry_10->ipaddr.type;

  <bb 3> :
  entry_10->ttl = ttl_13(D);
  _3 = entry_10->ttl;
  if (_3 > 604800)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  entry_10->ttl = 604800;

  <bb 5> :
  _4 = &entry_10->ipaddr;
  dns_call_found (idx_9(D), _4);
  _5 = entry_10->ttl;
  if (_5 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  _6 = entry_10->state;
  if (_6 == 3)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  entry_10->state = 0;

  <bb 8> :
  return;

}


dns_check_entries ()
{
  u8_t i;

  <bb 2> :
  i_3 = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  dns_check_entry (i_1);
  i_6 = i_1 + 1;

  <bb 4> :
  # i_1 = PHI <i_3(2), i_6(3)>
  if (i_1 <= 3)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  return;

}


dns_check_entry (u8_t i)
{
  struct dns_table_entry * entry;
  err_t err;
  int _1;
  unsigned char _2;
  int _3;
  short unsigned int _4;
  unsigned char _5;
  unsigned char _6;
  unsigned char _7;
  unsigned char _8;
  unsigned char _9;
  unsigned char _10;
  unsigned char _11;
  unsigned char _12;
  unsigned char _13;
  unsigned char _14;
  unsigned char _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;

  <bb 2> :
  _1 = (int) i_27(D);
  entry_28 = &dns_table[_1];
  if (i_27(D) > 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  __asm__ __volatile__("BKPT #0
	");
  goto <bb 3>; [INV]

  <bb 4> :
  _2 = entry_28->state;
  _3 = (int) _2;
  switch (_3) <default: <L22> [INV], case 0: <L21> [INV], case 1: <L3> [INV], case 2: <L6> [INV], case 3: <L17> [INV]>

  <bb 5> :
<L3>:
  _4 = dns_create_txid ();
  entry_28->txid = _4;
  entry_28->state = 2;
  entry_28->server_idx = 0;
  entry_28->tmr = 1;
  entry_28->retries = 0;
  err_50 = dns_send (i_27(D));

  <bb 6> :
  goto <bb 22>; [INV]

  <bb 7> :
<L6>:
  _5 = entry_28->tmr;
  _6 = _5 + 255;
  entry_28->tmr = _6;
  _7 = entry_28->tmr;
  if (_7 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 8> :
  _8 = entry_28->retries;
  _9 = _8 + 1;
  entry_28->retries = _9;
  _10 = entry_28->retries;
  if (_10 == 4)
    goto <bb 9>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 9> :
  _11 = dns_backupserver_available (entry_28);
  if (_11 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  _12 = entry_28->server_idx;
  _13 = _12;
  _14 = _13 + 1;
  entry_28->server_idx = _14;
  entry_28->tmr = 1;
  entry_28->retries = 0;
  goto <bb 13>; [INV]

  <bb 11> :
  dns_call_found (i_27(D), 0B);
  entry_28->state = 0;
  goto <bb 22>; [INV]

  <bb 12> :
  _15 = entry_28->retries;
  entry_28->tmr = _15;

  <bb 13> :
  err_42 = dns_send (i_27(D));

  <bb 14> :
  goto <bb 22>; [INV]

  <bb 15> :
<L17>:
  _16 = entry_28->ttl;
  if (_16 == 0)
    goto <bb 17>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 16> :
  _17 = entry_28->ttl;
  _18 = _17 + 4294967295;
  entry_28->ttl = _18;
  _19 = entry_28->ttl;
  if (_19 == 0)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  entry_28->state = 0;

  <bb 18> :
  goto <bb 22>; [INV]

  <bb 19> :
<L21>:
  goto <bb 22>; [INV]

  <bb 20> :
<L22>:

  <bb 21> :
  __asm__ __volatile__("BKPT #0
	");
  goto <bb 21>; [INV]

  <bb 22> :
  return;

}


dns_backupserver_available (struct dns_table_entry * pentry)
{
  u8_t ret;
  u8_t D.7780;
  int iftmp.19;
  _Bool iftmp.18;
  unsigned char _1;
  unsigned char _2;
  int _3;
  int _4;
  unsigned char _5;
  unsigned char _6;
  int _7;
  int _8;
  long unsigned int _9;
  unsigned char _10;
  int _11;
  int _12;
  long unsigned int _13;
  unsigned char _14;
  int _15;
  int _16;
  long unsigned int _17;
  unsigned char _18;
  int _19;
  int _20;
  long unsigned int _21;
  unsigned char _22;
  int _23;
  int _24;
  long unsigned int _25;
  _Bool iftmp.18_27;
  int iftmp.19_28;
  _Bool iftmp.18_32;
  int iftmp.19_33;
  int iftmp.19_34;
  _Bool iftmp.18_35;
  u8_t _37;

  <bb 2> :
  ret_29 = 0;
  if (pentry_30(D) != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 3> :
  _1 = pentry_30(D)->server_idx;
  if (_1 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 4> :
  _2 = pentry_30(D)->server_idx;
  _3 = (int) _2;
  _4 = _3 + 1;
  _5 = dns_servers[_4].type;
  if (_5 == 6)
    goto <bb 5>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 5> :
  _6 = pentry_30(D)->server_idx;
  _7 = (int) _6;
  _8 = _7 + 1;
  _9 = dns_servers[_8].u_addr.ip6.addr[0];
  if (_9 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  _10 = pentry_30(D)->server_idx;
  _11 = (int) _10;
  _12 = _11 + 1;
  _13 = dns_servers[_12].u_addr.ip6.addr[1];
  if (_13 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _14 = pentry_30(D)->server_idx;
  _15 = (int) _14;
  _16 = _15 + 1;
  _17 = dns_servers[_16].u_addr.ip6.addr[2];
  if (_17 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  _18 = pentry_30(D)->server_idx;
  _19 = (int) _18;
  _20 = _19 + 1;
  _21 = dns_servers[_20].u_addr.ip6.addr[3];
  if (_21 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  iftmp.19_34 = 1;
  goto <bb 11>; [INV]

  <bb 10> :
  iftmp.19_33 = 0;

  <bb 11> :
  # iftmp.19_28 = PHI <iftmp.19_34(9), iftmp.19_33(10)>
  iftmp.18_35 = (_Bool) iftmp.19_28;
  goto <bb 13>; [INV]

  <bb 12> :
  _22 = pentry_30(D)->server_idx;
  _23 = (int) _22;
  _24 = _23 + 1;
  _25 = dns_servers[_24].u_addr.ip4.addr;
  iftmp.18_32 = _25 != 0;

  <bb 13> :
  # iftmp.18_27 = PHI <iftmp.18_35(11), iftmp.18_32(12)>
  if (iftmp.18_27 != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  ret_36 = 1;

  <bb 15> :
  # ret_26 = PHI <ret_29(2), ret_29(3), ret_29(13), ret_36(14)>
  _37 = ret_26;

  <bb 16> :
<L15>:
  return _37;

}


dns_create_txid ()
{
  u8_t i;
  u16_t txid;
  u16_t D.7761;
  int _1;
  int _2;
  unsigned char _3;
  int _4;
  short unsigned int _5;
  unsigned char i.17_6;
  u16_t _13;

  <bb 2> :
again:
  _1 = rand ();
  txid_11 = (u16_t) _1;
  i_12 = 0;
  goto <bb 7>; [INV]

  <bb 3> :
  _2 = (int) i_7;
  _3 = dns_table[_2].state;
  if (_3 == 2)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _4 = (int) i_7;
  _5 = dns_table[_4].txid;
  if (txid_11 == _5)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  // predicted unlikely by goto predictor.
  goto <bb 2>; [INV]

  <bb 6> :
  i.17_6 = i_7;
  i_14 = i.17_6 + 1;

  <bb 7> :
  # i_7 = PHI <i_12(2), i_14(6)>
  if (i_7 <= 3)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  _13 = txid_11;

  <bb 9> :
<L8>:
  return _13;

}


dns_call_found (u8_t idx, struct ip_addr_t * addr)
{
  u8_t i;
  unsigned char _1;
  int _2;
  unsigned char _3;
  int _4;
  unsigned char _5;
  int _6;
  int _7;
  unsigned char _8;
  int _9;
  unsigned char _10;
  int _11;
  int _12;
  void (*<T76b>) (const char *, const struct ip_addr_t *, void *) _13;
  int _14;
  unsigned char _15;
  int _16;
  void (*<T76b>) (const char *, const struct ip_addr_t *, void *) _17;
  int _18;
  char[256] * _19;
  int _20;
  void * _21;
  int _22;
  unsigned char i.15_23;
  int _24;
  unsigned char _25;
  int _26;
  unsigned char _27;
  int _28;
  unsigned char _29;
  int _30;
  unsigned char i.16_31;
  int _32;
  unsigned char _33;
  int _34;
  unsigned char _35;
  int _36;
  struct udp_pcb * _37;
  int _38;
  unsigned char _39;
  int _40;
  int _41;

  <bb 2> :
  if (addr_51(D) != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 3> :
  _1 = addr_51(D)->type;
  if (_1 == 6)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  _2 = (int) idx_53(D);
  _3 = dns_table[_2].reqaddrtype;
  if (_3 != 3)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _4 = (int) idx_53(D);
  _5 = dns_table[_4].reqaddrtype;
  if (_5 != 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  __asm__ __volatile__("BKPT #0
	");
  goto <bb 6>; [INV]

  <bb 7> :
  _6 = (int) idx_53(D);
  dns_table[_6].reqaddrtype = 1;
  goto <bb 12>; [INV]

  <bb 8> :
  _7 = (int) idx_53(D);
  _8 = dns_table[_7].reqaddrtype;
  if (_8 == 3)
    goto <bb 10>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  _9 = (int) idx_53(D);
  _10 = dns_table[_9].reqaddrtype;
  if (_10 == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  __asm__ __volatile__("BKPT #0
	");
  goto <bb 10>; [INV]

  <bb 11> :
  _11 = (int) idx_53(D);
  dns_table[_11].reqaddrtype = 0;

  <bb 12> :
  i_58 = 0;
  goto <bb 17>; [INV]

  <bb 13> :
  _12 = (int) i_42;
  _13 = dns_requests[_12].found;
  if (_13 != 0B)
    goto <bb 14>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 14> :
  _14 = (int) i_42;
  _15 = dns_requests[_14].dns_table_idx;
  if (idx_53(D) == _15)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  _16 = (int) i_42;
  _17 = dns_requests[_16].found;
  _18 = (int) idx_53(D);
  _19 = &dns_table[_18].name;
  _20 = (int) i_42;
  _21 = dns_requests[_20].arg;
  _17 (_19, addr_51(D), _21);
  _22 = (int) i_42;
  dns_requests[_22].found = 0B;

  <bb 16> :
  i.15_23 = i_42;
  i_67 = i.15_23 + 1;

  <bb 17> :
  # i_42 = PHI <i_58(12), i_67(16)>
  if (i_42 <= 3)
    goto <bb 13>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 18> :
  i_59 = 0;
  goto <bb 25>; [INV]

  <bb 19> :
  if (i_43 == idx_53(D))
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  // predicted unlikely by continue predictor.
  goto <bb 24>; [INV]

  <bb 21> :
  _24 = (int) i_43;
  _25 = dns_table[_24].state;
  if (_25 == 2)
    goto <bb 22>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 22> :
  _26 = (int) i_43;
  _27 = dns_table[_26].pcb_idx;
  _28 = (int) idx_53(D);
  _29 = dns_table[_28].pcb_idx;
  if (_27 == _29)
    goto <bb 23>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 23> :
  _30 = (int) idx_53(D);
  dns_table[_30].pcb_idx = 4;
  goto <bb 26>; [INV]

  <bb 24> :
  i.16_31 = i_43;
  i_61 = i.16_31 + 1;

  <bb 25> :
  # i_43 = PHI <i_59(18), i_61(24)>
  if (i_43 <= 3)
    goto <bb 19>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 26> :
  _32 = (int) idx_53(D);
  _33 = dns_table[_32].pcb_idx;
  if (_33 <= 3)
    goto <bb 27>; [INV]
  else
    goto <bb 28>; [INV]

  <bb 27> :
  _34 = (int) idx_53(D);
  _35 = dns_table[_34].pcb_idx;
  _36 = (int) _35;
  _37 = dns_pcbs[_36];
  udp_remove (_37);
  _38 = (int) idx_53(D);
  _39 = dns_table[_38].pcb_idx;
  _40 = (int) _39;
  dns_pcbs[_40] = 0B;
  _41 = (int) idx_53(D);
  dns_table[_41].pcb_idx = 4;

  <bb 28> :
  return;

}


dns_alloc_pcb ()
{
  u8_t idx;
  u8_t i;
  u8_t D.7727;
  int _1;
  struct udp_pcb * _2;
  unsigned char i.11_3;
  int _4;
  struct udp_pcb * _5;
  int _6;
  struct udp_pcb * _7;
  unsigned char dns_last_pcb_idx.12_8;
  int _9;
  struct udp_pcb * _10;
  unsigned char i.13_11;
  unsigned char idx.14_12;
  u8_t _17;
  u8_t _26;
  u8_t _29;
  u8_t _34;

  <bb 2> :
  i_20 = 0;
  goto <bb 6>; [INV]

  <bb 3> :
  _1 = (int) i_13;
  _2 = dns_pcbs[_1];
  if (_2 == 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  goto <bb 7>; [INV]

  <bb 5> :
  i.11_3 = i_13;
  i_22 = i.11_3 + 1;

  <bb 6> :
  # i_13 = PHI <i_20(2), i_22(5)>
  if (i_13 <= 3)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  if (i_13 <= 3)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 8> :
  _4 = (int) i_13;
  _5 = dns_alloc_random_port ();
  dns_pcbs[_4] = _5;
  _6 = (int) i_13;
  _7 = dns_pcbs[_6];
  if (_7 != 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  dns_last_pcb_idx = i_13;
  _26 = i_13;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 18>; [INV]

  <bb 10> :
  i_27 = 0;
  dns_last_pcb_idx.12_8 = dns_last_pcb_idx;
  idx_28 = dns_last_pcb_idx.12_8 + 1;
  goto <bb 16>; [INV]

  <bb 11> :
  if (idx_16 > 3)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  idx_30 = 0;

  <bb 13> :
  # idx_15 = PHI <idx_16(11), idx_30(12)>
  _9 = (int) idx_15;
  _10 = dns_pcbs[_9];
  if (_10 != 0B)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  dns_last_pcb_idx = idx_15;
  _34 = idx_15;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 18>; [INV]

  <bb 15> :
  i.13_11 = i_14;
  i_31 = i.13_11 + 1;
  idx.14_12 = idx_15;
  idx_32 = idx.14_12 + 1;

  <bb 16> :
  # i_14 = PHI <i_27(10), i_31(15)>
  # idx_16 = PHI <idx_28(10), idx_32(15)>
  if (i_14 <= 3)
    goto <bb 11>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 17> :
  _29 = 4;

  <bb 18> :
  # _17 = PHI <_26(9), _34(14), _29(17)>
<L16>:
  return _17;

}


dns_alloc_random_port ()
{
  u16_t port;
  struct udp_pcb * pcb;
  err_t err;
  struct udp_pcb * D.7714;
  int _1;
  struct udp_pcb * _3;
  struct udp_pcb * _16;
  struct udp_pcb * _18;
  struct udp_pcb * _19;

  <bb 2> :
  pcb_9 = udp_new_ip_type (46);
  if (pcb_9 == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _19 = 0B;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 11>; [INV]

  <bb 4> :
  _1 = rand ();
  port_11 = (u16_t) _1;
  if (port_11 > 1023)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  err_14 = udp_bind (pcb_9, &ip_addr_any_type, port_11);
  goto <bb 7>; [INV]

  <bb 6> :
  err_12 = -8;

  <bb 7> :
  # err_2 = PHI <err_14(5), err_12(6)>
  if (err_2 == -8)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  if (err_2 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  udp_remove (pcb_9);
  _18 = 0B;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 11>; [INV]

  <bb 10> :
  udp_recv (pcb_9, dns_recv, 0B);
  _16 = pcb_9;

  <bb 11> :
  # _3 = PHI <_19(3), _18(9), _16(10)>
<L9>:
  return _3;

}


dns_send (u8_t idx)
{
  u16_t dst_port;
  const struct ip_addr_t * dst;
  struct dns_table_entry * entry;
  u8_t pcb_idx;
  u8_t n;
  const char * hostname_part;
  const char * hostname;
  u16_t copy_len;
  u16_t query_idx;
  struct pbuf * p;
  struct dns_query qry;
  struct dns_hdr hdr;
  err_t err;
  err_t D.7699;
  int iftmp.9;
  _Bool iftmp.8;
  int _1;
  unsigned char _2;
  unsigned char _3;
  int _4;
  unsigned char _5;
  unsigned char _6;
  int _7;
  long unsigned int _8;
  unsigned char _9;
  int _10;
  long unsigned int _11;
  unsigned char _12;
  int _13;
  long unsigned int _14;
  unsigned char _15;
  int _16;
  long unsigned int _17;
  unsigned char _18;
  int _19;
  long unsigned int _20;
  char[256] * _21;
  unsigned int _22;
  short unsigned int _23;
  short unsigned int _24;
  short unsigned int _25;
  short unsigned int _26;
  char _27;
  char _28;
  int _29;
  int _30;
  int _31;
  int _32;
  short unsigned int _33;
  short unsigned int _34;
  short unsigned int _35;
  char _36;
  short unsigned int query_idx.10_37;
  unsigned char _38;
  unsigned char _39;
  unsigned char _40;
  int _41;
  int _42;
  struct udp_pcb * _43;
  _Bool iftmp.8_49;
  int iftmp.9_50;
  err_t _51;
  _Bool iftmp.8_60;
  int iftmp.9_61;
  int iftmp.9_62;
  _Bool iftmp.8_63;
  err_t _98;
  err_t _99;
  err_t _102;

  <bb 2> :
  _1 = (int) idx_57(D);
  entry_58 = &dns_table[_1];
  _2 = entry_58->server_idx;
  if (_2 > 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  __asm__ __volatile__("BKPT #0
	");
  goto <bb 3>; [INV]

  <bb 4> :
  _3 = entry_58->server_idx;
  _4 = (int) _3;
  _5 = dns_servers[_4].type;
  if (_5 == 6)
    goto <bb 5>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 5> :
  _6 = entry_58->server_idx;
  _7 = (int) _6;
  _8 = dns_servers[_7].u_addr.ip6.addr[0];
  if (_8 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 6> :
  _9 = entry_58->server_idx;
  _10 = (int) _9;
  _11 = dns_servers[_10].u_addr.ip6.addr[1];
  if (_11 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 7> :
  _12 = entry_58->server_idx;
  _13 = (int) _12;
  _14 = dns_servers[_13].u_addr.ip6.addr[2];
  if (_14 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 8> :
  _15 = entry_58->server_idx;
  _16 = (int) _15;
  _17 = dns_servers[_16].u_addr.ip6.addr[3];
  if (_17 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  iftmp.9_61 = 1;
  goto <bb 11>; [INV]

  <bb 10> :
  iftmp.9_62 = 0;

  <bb 11> :
  # iftmp.9_50 = PHI <iftmp.9_61(9), iftmp.9_62(10)>
  iftmp.8_63 = (_Bool) iftmp.9_50;
  goto <bb 13>; [INV]

  <bb 12> :
  _18 = entry_58->server_idx;
  _19 = (int) _18;
  _20 = dns_servers[_19].u_addr.ip4.addr;
  iftmp.8_60 = _20 == 0;

  <bb 13> :
  # iftmp.8_49 = PHI <iftmp.8_63(11), iftmp.8_60(12)>
  if (iftmp.8_49 != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  dns_call_found (idx_57(D), 0B);
  entry_58->state = 0;
  _102 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 32>; [INV]

  <bb 15> :
  _21 = &entry_58->name;
  _22 = strlen (_21);
  _23 = (short unsigned int) _22;
  _24 = _23 + 18;
  p_65 = pbuf_alloc (74, _24, 640);
  if (p_65 != 0B)
    goto <bb 16>; [INV]
  else
    goto <bb 29>; [INV]

  <bb 16> :
  memset (&hdr, 0, 12);
  _25 = entry_58->txid;
  _26 = lwip_htons (_25);
  hdr.id = _26;
  hdr.flags1 = 1;
  hdr.numquestions = 256;
  pbuf_take (p_65, &hdr, 12);
  hostname_73 = &entry_58->name;
  hostname_74 = hostname_73 + 4294967295;
  query_idx_75 = 12;

  <bb 17> :
  # query_idx_45 = PHI <query_idx_75(16), query_idx_84(23)>
  # hostname_46 = PHI <hostname_74(16), hostname_47(23)>
  hostname_76 = hostname_46 + 1;
  hostname_part_77 = hostname_76;
  n_78 = 0;
  goto <bb 19>; [INV]

  <bb 18> :
  n_79 = n_48 + 1;
  hostname_80 = hostname_47 + 1;

  <bb 19> :
  # hostname_47 = PHI <hostname_76(17), hostname_80(18)>
  # n_48 = PHI <n_78(17), n_79(18)>
  _27 = *hostname_47;
  if (_27 != 46)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  _28 = *hostname_47;
  if (_28 != 0)
    goto <bb 18>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 21> :
  _29 = hostname_47 - hostname_part_77;
  copy_len_81 = (u16_t) _29;
  _30 = (int) query_idx_45;
  _31 = (int) n_48;
  _32 = _30 + _31;
  if (_32 > 65534)
    goto <bb 22>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 22> :
  // predicted unlikely by goto predictor.
  goto <bb 31>; [INV]

  <bb 23> :
  pbuf_put_at (p_65, query_idx_45, n_48);
  _33 = query_idx_45 + 1;
  pbuf_take_at (p_65, hostname_part_77, copy_len_81, _33);
  _34 = (short unsigned int) n_48;
  _35 = query_idx_45 + _34;
  query_idx_84 = _35 + 1;
  _36 = *hostname_47;
  if (_36 != 0)
    goto <bb 17>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 24> :
  pbuf_put_at (p_65, query_idx_84, 0);
  query_idx.10_37 = query_idx_84;
  query_idx_86 = query_idx.10_37 + 1;
  _38 = entry_58->reqaddrtype;
  if (_38 == 3)
    goto <bb 26>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 25> :
  _39 = entry_58->reqaddrtype;
  if (_39 == 1)
    goto <bb 26>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 26> :
  qry.type = 7168;
  goto <bb 28>; [INV]

  <bb 27> :
  qry.type = 256;

  <bb 28> :
  qry.cls = 256;
  pbuf_take_at (p_65, &qry, 4, query_idx_86);
  pcb_idx_91 = entry_58->pcb_idx;
  dst_port_92 = 53;
  _40 = entry_58->server_idx;
  _41 = (int) _40;
  dst_93 = &dns_servers[_41];
  _42 = (int) pcb_idx_91;
  _43 = dns_pcbs[_42];
  err_95 = udp_sendto (_43, p_65, dst_93, dst_port_92);
  pbuf_free (p_65);
  goto <bb 30>; [INV]

  <bb 29> :
  err_66 = -1;

  <bb 30> :
  # err_44 = PHI <err_95(28), err_66(29)>
  _99 = err_44;
  goto <bb 32>; [INV]

  <bb 31> :
overflow_return:
  pbuf_free (p_65);
  _98 = -6;

  <bb 32> :
  # _51 = PHI <_102(14), _99(30), _98(31)>
  hdr ={v} {CLOBBER};
  qry ={v} {CLOBBER};

  <bb 33> :
<L31>:
  return _51;

}


dns_skip_name (struct pbuf * p, u16_t query_idx)
{
  u16_t offset;
  int n;
  u16_t D.7674;
  short unsigned int offset.7_1;
  int _2;
  int _3;
  int _4;
  short unsigned int _5;
  int _6;
  short unsigned int _7;
  u16_t _10;
  u16_t _24;
  u16_t _25;
  u16_t _26;
  u16_t _27;
  u16_t _28;

  <bb 2> :
  offset_15 = query_idx_14(D);

  <bb 3> :
  # offset_8 = PHI <offset_15(2), offset_21(12)>
  offset.7_1 = offset_8;
  offset_17 = offset.7_1 + 1;
  n_20 = pbuf_try_get_at (p_18(D), offset.7_1);
  if (n_20 < 0)
    goto <bb 5>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  if (offset_17 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _28 = 65535;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 16>; [INV]

  <bb 6> :
  _2 = n_20 & 192;
  if (_2 == 192)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  goto <bb 13>; [INV]

  <bb 8> :
  _3 = (int) offset_17;
  _4 = n_20 + _3;
  _5 = p_18(D)->tot_len;
  _6 = (int) _5;
  if (_4 >= _6)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  _25 = 65535;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 16>; [INV]

  <bb 10> :
  _7 = (short unsigned int) n_20;
  offset_21 = offset_17 + _7;
  n_23 = pbuf_try_get_at (p_18(D), offset_21);
  if (n_23 < 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  _24 = 65535;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 16>; [INV]

  <bb 12> :
  if (n_23 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  # offset_9 = PHI <offset_17(7), offset_21(12)>
  if (offset_9 == 65535)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  _27 = 65535;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 16>; [INV]

  <bb 15> :
  _26 = offset_9 + 1;

  <bb 16> :
  # _10 = PHI <_28(5), _25(9), _24(11), _27(14), _26(15)>
<L13>:
  return _10;

}


dns_compare_name (const char * query, struct pbuf * p, u16_t start_offset)
{
  unsigned char __x;
  unsigned char __x;
  int c;
  u16_t response_offset;
  int n;
  int iftmp.5;
  int D.7423;
  int iftmp.4;
  int D.7421;
  u16_t D.7649;
  short unsigned int response_offset.3_1;
  int _2;
  sizetype _3;
  sizetype _4;
  const char * _5;
  char _6;
  int _7;
  int _8;
  int _9;
  sizetype _10;
  sizetype _11;
  const char * _12;
  char _13;
  int _14;
  int _15;
  int _16;
  short unsigned int response_offset.6_17;
  u16_t _23;
  int iftmp.4_24;
  int iftmp.5_25;
  u16_t _40;
  u16_t _41;
  u16_t _42;
  int iftmp.4_46;
  int iftmp.4_47;
  int _48;
  int iftmp.5_50;
  int iftmp.5_51;
  int _52;
  u16_t _56;
  u16_t _57;
  u16_t _58;
  u16_t _59;
  u16_t _60;

  <bb 2> :
  response_offset_30 = start_offset_29(D);

  <bb 3> :
  # query_18 = PHI <query_31(D)(2), query_37(25)>
  # response_offset_21 = PHI <response_offset_30(2), response_offset_22(25)>
  n_35 = pbuf_try_get_at (p_33(D), response_offset_21);
  if (n_35 < 0)
    goto <bb 5>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  if (response_offset_21 == 65535)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _60 = 65535;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 29>; [INV]

  <bb 6> :
  response_offset.3_1 = response_offset_21;
  response_offset_36 = response_offset.3_1 + 1;
  _2 = n_35 & 192;
  if (_2 == 192)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _59 = 65535;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 29>; [INV]

  <bb 8> :
  goto <bb 22>; [INV]

  <bb 9> :
  c_44 = pbuf_try_get_at (p_33(D), response_offset_22);
  if (c_44 < 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  _58 = 65535;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 29>; [INV]

  <bb 11> :
  __x_45 = *query_19;
  _3 = (sizetype) __x_45;
  _4 = _3 + 1;
  _5 = &_ctype_ + _4;
  _6 = *_5;
  _7 = (int) _6;
  _8 = _7 & 3;
  if (_8 == 1)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  _9 = (int) __x_45;
  iftmp.4_47 = _9 + 32;
  goto <bb 14>; [INV]

  <bb 13> :
  iftmp.4_46 = (int) __x_45;

  <bb 14> :
  # iftmp.4_24 = PHI <iftmp.4_47(12), iftmp.4_46(13)>
  _48 = iftmp.4_24;
  __x_49 = (unsigned char) c_44;
  _10 = (sizetype) __x_49;
  _11 = _10 + 1;
  _12 = &_ctype_ + _11;
  _13 = *_12;
  _14 = (int) _13;
  _15 = _14 & 3;
  if (_15 == 1)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  _16 = (int) __x_49;
  iftmp.5_51 = _16 + 32;
  goto <bb 17>; [INV]

  <bb 16> :
  iftmp.5_50 = (int) __x_49;

  <bb 17> :
  # iftmp.5_25 = PHI <iftmp.5_51(15), iftmp.5_50(16)>
  _52 = iftmp.5_25;
  if (_48 != _52)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  _57 = 65535;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 29>; [INV]

  <bb 19> :
  if (response_offset_22 == 65535)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  _56 = 65535;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 29>; [INV]

  <bb 21> :
  response_offset.6_17 = response_offset_22;
  response_offset_53 = response_offset.6_17 + 1;
  query_54 = query_19 + 1;
  n_55 = n_20 + -1;

  <bb 22> :
  # query_19 = PHI <query_18(8), query_54(21)>
  # n_20 = PHI <n_35(8), n_55(21)>
  # response_offset_22 = PHI <response_offset_36(8), response_offset_53(21)>
  if (n_20 > 0)
    goto <bb 9>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 23> :
  query_37 = query_19 + 1;
  n_39 = pbuf_try_get_at (p_33(D), response_offset_22);
  if (n_39 < 0)
    goto <bb 24>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 24> :
  _42 = 65535;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 29>; [INV]

  <bb 25> :
  if (n_39 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 26> :
  if (response_offset_22 == 65535)
    goto <bb 27>; [INV]
  else
    goto <bb 28>; [INV]

  <bb 27> :
  _41 = 65535;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 29>; [INV]

  <bb 28> :
  _40 = response_offset_22 + 1;

  <bb 29> :
  # _23 = PHI <_60(5), _59(7), _58(10), _57(18), _56(20), _42(24), _41(27), _40(28)>
<L26>:
  return _23;

}


dns_lookup (const char * name, struct ip_addr_t * addr, u8_t dns_addrtype)
{
  u8_t i;
  err_t D.7644;
  int iftmp.2;
  int iftmp.1;
  _Bool iftmp.0;
  int _1;
  unsigned char _2;
  int _3;
  char[256] * _4;
  int _5;
  int _6;
  unsigned char _7;
  int _8;
  unsigned char _9;
  int _10;
  unsigned char _11;
  int _12;
  unsigned char _13;
  int _14;
  long unsigned int _15;
  int _16;
  long unsigned int _17;
  int _18;
  long unsigned int _19;
  int _20;
  long unsigned int _21;
  int _22;
  unsigned char _23;
  int _24;
  long unsigned int _25;
  long unsigned int _26;
  long unsigned int _27;
  _Bool iftmp.0_29;
  int iftmp.1_30;
  int iftmp.2_31;
  err_t _32;
  err_t _39;
  int iftmp.2_43;
  int iftmp.2_44;
  _Bool iftmp.0_45;
  int iftmp.1_46;
  int iftmp.1_47;
  _Bool iftmp.0_48;
  err_t _61;

  <bb 2> :
  i_37 = 0;
  goto <bb 24>; [INV]

  <bb 3> :
  _1 = (int) i_28;
  _2 = dns_table[_1].state;
  if (_2 == 3)
    goto <bb 4>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 4> :
  _3 = (int) i_28;
  _4 = &dns_table[_3].name;
  _5 = lwip_strnicmp (name_40(D), _4, 256);
  if (_5 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 5> :
  _6 = (int) i_28;
  _7 = dns_table[_6].ipaddr.type;
  if (_7 == 6)
    goto <bb 6>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 6> :
  if (dns_addrtype_42(D) == 3)
    goto <bb 8>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  if (dns_addrtype_42(D) == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  iftmp.1_47 = 1;
  goto <bb 10>; [INV]

  <bb 9> :
  iftmp.1_46 = 0;

  <bb 10> :
  # iftmp.1_30 = PHI <iftmp.1_47(8), iftmp.1_46(9)>
  iftmp.0_48 = (_Bool) iftmp.1_30;
  goto <bb 16>; [INV]

  <bb 11> :
  if (dns_addrtype_42(D) != 3)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 12> :
  if (dns_addrtype_42(D) != 1)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  iftmp.2_43 = 1;
  goto <bb 15>; [INV]

  <bb 14> :
  iftmp.2_44 = 0;

  <bb 15> :
  # iftmp.2_31 = PHI <iftmp.2_43(13), iftmp.2_44(14)>
  iftmp.0_45 = (_Bool) iftmp.2_31;

  <bb 16> :
  # iftmp.0_29 = PHI <iftmp.0_48(10), iftmp.0_45(15)>
  if (iftmp.0_29 != 0)
    goto <bb 17>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 17> :
  _8 = (int) i_28;
  _9 = dns_table[_8].ipaddr.type;

  <bb 18> :
  if (addr_49(D) != 0B)
    goto <bb 19>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 19> :
  _10 = (int) i_28;
  _11 = dns_table[_10].ipaddr.type;
  addr_49(D)->type = _11;
  _12 = (int) i_28;
  _13 = dns_table[_12].ipaddr.type;
  if (_13 == 6)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  _14 = (int) i_28;
  _15 = dns_table[_14].ipaddr.u_addr.ip6.addr[0];
  addr_49(D)->u_addr.ip6.addr[0] = _15;
  _16 = (int) i_28;
  _17 = dns_table[_16].ipaddr.u_addr.ip6.addr[1];
  addr_49(D)->u_addr.ip6.addr[1] = _17;
  _18 = (int) i_28;
  _19 = dns_table[_18].ipaddr.u_addr.ip6.addr[2];
  addr_49(D)->u_addr.ip6.addr[2] = _19;
  _20 = (int) i_28;
  _21 = dns_table[_20].ipaddr.u_addr.ip6.addr[3];
  addr_49(D)->u_addr.ip6.addr[3] = _21;
  _22 = (int) i_28;
  _23 = dns_table[_22].ipaddr.u_addr.ip6.zone;
  addr_49(D)->u_addr.ip6.zone = _23;
  goto <bb 22>; [INV]

  <bb 21> :
  _24 = (int) i_28;
  _25 = dns_table[_24].ipaddr.u_addr.ip4.addr;
  addr_49(D)->u_addr.ip4.addr = _25;
  addr_49(D)->u_addr.ip6.addr[3] = 0;
  _26 = addr_49(D)->u_addr.ip6.addr[3];
  addr_49(D)->u_addr.ip6.addr[2] = _26;
  _27 = addr_49(D)->u_addr.ip6.addr[2];
  addr_49(D)->u_addr.ip6.addr[1] = _27;
  addr_49(D)->u_addr.ip6.zone = 0;

  <bb 22> :
  _61 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 26>; [INV]

  <bb 23> :
  i_62 = i_28 + 1;

  <bb 24> :
  # i_28 = PHI <i_37(2), i_62(23)>
  if (i_28 <= 3)
    goto <bb 3>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 25> :
  _39 = -16;

  <bb 26> :
  # _32 = PHI <_61(22), _39(25)>
<L28>:
  return _32;

}


dns_tmr ()
{
  <bb 2> :
  dns_check_entries ();
  return;

}


dns_getserver (u8_t numdns)
{
  const struct ip_addr_t * D.7614;
  int _1;
  const struct ip_addr_t * _2;
  const struct ip_addr_t * _4;
  const struct ip_addr_t * _5;

  <bb 2> :
  if (numdns_3(D) <= 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 = (int) numdns_3(D);
  _5 = &dns_servers[_1];
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 5>; [INV]

  <bb 4> :
  _4 = &ip_addr_any;
  // predicted unlikely by early return (on trees) predictor.

  <bb 5> :
  # _2 = PHI <_5(3), _4(4)>
<L2>:
  return _2;

}


dns_setserver (u8_t numdns, const struct ip_addr_t * dnsserver)
{
  int _1;
  int _2;

  <bb 2> :
  if (numdns_4(D) <= 1)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  if (dnsserver_6(D) != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _1 = (int) numdns_4(D);
  dns_servers[_1] = *dnsserver_6(D);
  goto <bb 6>; [INV]

  <bb 5> :
  _2 = (int) numdns_4(D);
  dns_servers[_2] = ip_addr_any;

  <bb 6> :
  return;

}


dns_init ()
{
  <bb 2> :

  <bb 3> :
  return;

}


