
Marking local functions:


Marking externally visible functions: ip4addr_ntoa_r/8 ip4addr_ntoa/7 ip4addr_aton/6 ipaddr_addr/5 ip4_addr_netmask_valid/4 ip4_addr_isbroadcast_u32/3


Marking externally visible variables: ip_addr_broadcast/2 ip_addr_any/1


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

str.0/11 (str) @06c13318
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: ip4addr_ntoa/7 (addr) 
  Availability: available
  Varpool flags:
_ctype_/10 (_ctype_) @06c13120
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: ip4addr_aton/6 (addr) ip4addr_aton/6 (addr) ip4addr_aton/6 (addr) ip4addr_aton/6 (addr) ip4addr_aton/6 (addr) 
  Availability: not_available
  Varpool flags: read-only
lwip_htonl/9 (lwip_htonl) @06c080e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: ip4addr_aton/6 ip4_addr_netmask_valid/4 
  Calls: 
ip4addr_ntoa_r/8 (ip4addr_ntoa_r) @06bb3e00
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: ip4addr_ntoa/7 
  Calls: 
ip4addr_ntoa/7 (ip4addr_ntoa) @06bb3b60
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: str.0/11 (addr) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: ip4addr_ntoa_r/8 
ip4addr_aton/6 (ip4addr_aton) @06bb38c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: _ctype_/10 (addr) _ctype_/10 (addr) _ctype_/10 (addr) _ctype_/10 (addr) _ctype_/10 (addr) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: ipaddr_addr/5 
  Calls: lwip_htonl/9 
ipaddr_addr/5 (ipaddr_addr) @06bb3000
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: ip4addr_aton/6 
ip4_addr_netmask_valid/4 (ip4_addr_netmask_valid) @06bae2a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: lwip_htonl/9 
ip4_addr_isbroadcast_u32/3 (ip4_addr_isbroadcast_u32) @06baed20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
ip_addr_broadcast/2 (ip_addr_broadcast) @06ba5cf0
  Type: variable definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Varpool flags: initialized read-only const-value-known
ip_addr_any/1 (ip_addr_any) @069ecca8
  Type: variable definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Varpool flags: initialized read-only const-value-known
ip4addr_ntoa_r (const struct ip4_addr_t * addr, char * buf, int buflen)
{
  int len;
  u8_t i;
  u8_t n;
  u8_t rem;
  u8_t * ap;
  char * rp;
  char inv[3];
  u32_t s_addr;
  char * D.7139;

  <bb 2> :
  len = 0;
  _1 = addr->addr;
  s_addr = _1;
  rp = buf;
  ap = &s_addr;
  n = 0;
  goto <bb 13>; [INV]

  <bb 3> :
  i = 0;

  <bb 4> :
  _2 = *ap;
  rem = _2 % 10;
  _3 = *ap;
  _4 = _3 / 10;
  *ap = _4;
  i.2_5 = i;
  i = i.2_5 + 1;
  _6 = (int) i.2_5;
  _7 = rem + 48;
  inv[_6] = _7;
  _8 = *ap;
  if (_8 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  goto <bb 9>; [INV]

  <bb 6> :
  len.3_9 = len;
  len = len.3_9 + 1;
  if (buflen <= len.3_9)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  D.7139 = 0B;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 15>; [INV]

  <bb 8> :
  _10 = (int) i;
  rp.4_11 = rp;
  rp = rp.4_11 + 1;
  _12 = inv[_10];
  *rp.4_11 = _12;

  <bb 9> :
  i.5_13 = i;
  i = i.5_13 + 255;
  if (i.5_13 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  len.6_14 = len;
  len = len.6_14 + 1;
  if (buflen <= len.6_14)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  D.7139 = 0B;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 15>; [INV]

  <bb 12> :
  rp.7_15 = rp;
  rp = rp.7_15 + 1;
  *rp.7_15 = 46;
  ap = ap + 1;
  n.8_16 = n;
  n = n.8_16 + 1;

  <bb 13> :
  if (n <= 3)
    goto <bb 3>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 14> :
  rp = rp + 4294967295;
  *rp = 0;
  D.7139 = buf;

  <bb 15> :
  s_addr = {CLOBBER};
  inv = {CLOBBER};

  <bb 16> :
<L13>:
  return D.7139;

}


ip4addr_ntoa (const struct ip4_addr_t * addr)
{
  static char str[16];
  char * D.7135;

  <bb 2> :
  D.7135 = ip4addr_ntoa_r (addr, &str, 16);

  <bb 3> :
<L0>:
  return D.7135;

}


ip4addr_aton (const char * cp, struct ip4_addr_t * addr)
{
  u32_t * pp;
  u32_t parts[4];
  char c;
  u8_t base;
  u32_t val;
  int iftmp.0;
  int D.7085;

  <bb 2> :
  pp = &parts;
  c = *cp;

  <bb 3> :
  _1 = (sizetype) c;
  _2 = _1 + 1;
  _3 = &_ctype_ + _2;
  _4 = *_3;
  _5 = (int) _4;
  _6 = _5 & 4;
  if (_6 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  D.7085 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 57>; [INV]

  <bb 5> :
  val = 0;
  base = 10;
  if (c == 48)
    goto <bb 6>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 6> :
  cp = cp + 1;
  c = *cp;
  if (c == 120)
    goto <bb 8>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  if (c == 88)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  base = 16;
  cp = cp + 1;
  c = *cp;
  goto <bb 10>; [INV]

  <bb 9> :
  base = 8;

  <bb 10> :
  _7 = (sizetype) c;
  _8 = _7 + 1;
  _9 = &_ctype_ + _8;
  _10 = *_9;
  _11 = (int) _10;
  _12 = _11 & 4;
  if (_12 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 11> :
  if (base == 8)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 12> :
  _13 = (int) c;
  _14 = _13 + -48;
  _15 = (long unsigned int) _14;
  if (_15 > 7)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  goto <bb 22>; [INV]

  <bb 14> :
  _16 = (long unsigned int) base;
  _17 = val * _16;
  _18 = (long unsigned int) c;
  _19 = _17 + _18;
  val = _19 + 4294967248;
  cp = cp + 1;
  c = *cp;
  goto <bb 21>; [INV]

  <bb 15> :
  if (base == 16)
    goto <bb 16>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 16> :
  _20 = (sizetype) c;
  _21 = _20 + 1;
  _22 = &_ctype_ + _21;
  _23 = *_22;
  _24 = (int) _23;
  _25 = _24 & 68;
  if (_25 != 0)
    goto <bb 17>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 17> :
  _26 = val << 4;
  _27 = (int) c;
  _28 = _27 + 10;
  _29 = (sizetype) c;
  _30 = _29 + 1;
  _31 = &_ctype_ + _30;
  _32 = *_31;
  _33 = (int) _32;
  _34 = _33 & 3;
  if (_34 == 2)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  iftmp.0 = 97;
  goto <bb 20>; [INV]

  <bb 19> :
  iftmp.0 = 65;

  <bb 20> :
  _35 = _28 - iftmp.0;
  _36 = (long unsigned int) _35;
  val = _26 | _36;
  cp = cp + 1;
  c = *cp;

  <bb 21> :
  goto <bb 10>; [INV]

  <bb 22> :
  if (c == 46)
    goto <bb 23>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 23> :
  _37 = &parts + 12;
  if (pp >= _37)
    goto <bb 24>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 24> :
  D.7085 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 57>; [INV]

  <bb 25> :
  pp.1_38 = pp;
  pp = pp.1_38 + 4;
  *pp.1_38 = val;
  cp = cp + 1;
  c = *cp;
  goto <bb 27>; [INV]

  <bb 26> :
  goto <bb 28>; [INV]

  <bb 27> :
  goto <bb 3>; [INV]

  <bb 28> :
  if (c != 0)
    goto <bb 29>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 29> :
  _39 = (sizetype) c;
  _40 = _39 + 1;
  _41 = &_ctype_ + _40;
  _42 = *_41;
  _43 = (int) _42;
  _44 = _43 & 8;
  if (_44 == 0)
    goto <bb 30>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 30> :
  D.7085 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 57>; [INV]

  <bb 31> :
  _45 = pp - &parts;
  _46 = _45 /[ex] 4;
  _47 = _46 + 1;
  switch (_47) <default: <L53> [INV], case 0: <L33> [INV], case 1: <L34> [INV], case 2: <L35> [INV], case 3: <L40> [INV], case 4: <L46> [INV]>

  <bb 32> :
<L33>:
  D.7085 = 0;
  goto <bb 57>; [INV]

  <bb 33> :
<L34>:
  goto <bb 54>; [INV]

  <bb 34> :
<L35>:
  if (val > 16777215)
    goto <bb 35>; [INV]
  else
    goto <bb 36>; [INV]

  <bb 35> :
  D.7085 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 57>; [INV]

  <bb 36> :
  _48 = parts[0];
  if (_48 > 255)
    goto <bb 37>; [INV]
  else
    goto <bb 38>; [INV]

  <bb 37> :
  D.7085 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 57>; [INV]

  <bb 38> :
  _49 = parts[0];
  _50 = _49 << 24;
  val = val | _50;
  goto <bb 54>; [INV]

  <bb 39> :
<L40>:
  if (val > 65535)
    goto <bb 40>; [INV]
  else
    goto <bb 41>; [INV]

  <bb 40> :
  D.7085 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 57>; [INV]

  <bb 41> :
  _51 = parts[0];
  if (_51 > 255)
    goto <bb 43>; [INV]
  else
    goto <bb 42>; [INV]

  <bb 42> :
  _52 = parts[1];
  if (_52 > 255)
    goto <bb 43>; [INV]
  else
    goto <bb 44>; [INV]

  <bb 43> :
  D.7085 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 57>; [INV]

  <bb 44> :
  _53 = parts[0];
  _54 = _53 << 24;
  _55 = parts[1];
  _56 = _55 << 16;
  _57 = _54 | _56;
  val = val | _57;
  goto <bb 54>; [INV]

  <bb 45> :
<L46>:
  if (val > 255)
    goto <bb 46>; [INV]
  else
    goto <bb 47>; [INV]

  <bb 46> :
  D.7085 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 57>; [INV]

  <bb 47> :
  _58 = parts[0];
  if (_58 > 255)
    goto <bb 50>; [INV]
  else
    goto <bb 48>; [INV]

  <bb 48> :
  _59 = parts[1];
  if (_59 > 255)
    goto <bb 50>; [INV]
  else
    goto <bb 49>; [INV]

  <bb 49> :
  _60 = parts[2];
  if (_60 > 255)
    goto <bb 50>; [INV]
  else
    goto <bb 51>; [INV]

  <bb 50> :
  D.7085 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 57>; [INV]

  <bb 51> :
  _61 = parts[0];
  _62 = _61 << 24;
  _63 = parts[1];
  _64 = _63 << 16;
  _65 = _62 | _64;
  _66 = parts[2];
  _67 = _66 << 8;
  _68 = _65 | _67;
  val = val | _68;
  goto <bb 54>; [INV]

  <bb 52> :
<L53>:

  <bb 53> :
  __asm__ __volatile__("BKPT #0
	");
  goto <bb 53>; [INV]

  <bb 54> :
  if (addr != 0B)
    goto <bb 55>; [INV]
  else
    goto <bb 56>; [INV]

  <bb 55> :
  _69 = lwip_htonl (val);
  addr->addr = _69;

  <bb 56> :
  D.7085 = 1;

  <bb 57> :
  parts = {CLOBBER};

  <bb 58> :
<L61>:
  return D.7085;

}


ipaddr_addr (const char * cp)
{
  struct ip4_addr_t val;
  u32_t D.7080;

  <bb 2> :
  _1 = ip4addr_aton (cp, &val);
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  D.7080 = val.addr;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 5>; [INV]

  <bb 4> :
  D.7080 = 4294967295;

  <bb 5> :
  val = {CLOBBER};

  <bb 6> :
<L3>:
  return D.7080;

}


ip4_addr_netmask_valid (u32_t netmask)
{
  u32_t nm_hostorder;
  u32_t mask;
  u8_t D.7076;

  <bb 2> :
  nm_hostorder = lwip_htonl (netmask);
  mask = 2147483648;
  goto <bb 6>; [INV]

  <bb 3> :
  _1 = nm_hostorder & mask;
  if (_1 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  goto <bb 7>; [INV]

  <bb 5> :
  mask = mask >> 1;

  <bb 6> :
  if (mask != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  goto <bb 11>; [INV]

  <bb 8> :
  _2 = nm_hostorder & mask;
  if (_2 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  D.7076 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 13>; [INV]

  <bb 10> :
  mask = mask >> 1;

  <bb 11> :
  if (mask != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  D.7076 = 1;

  <bb 13> :
<L10>:
  return D.7076;

}


ip4_addr_isbroadcast_u32 (u32_t addr, const struct netif * netif)
{
  struct ip4_addr_t ipaddr;
  u8_t D.7062;

  <bb 2> :
  ipaddr.addr = addr;
  if (addr == 4294967295)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  if (addr == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  D.7062 = 1;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 13>; [INV]

  <bb 5> :
  _1 = netif->flags;
  _2 = (unsigned int) _1;
  _3 = _2 & 2;
  if (_3 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  D.7062 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 13>; [INV]

  <bb 7> :
  _4 = netif->ip_addr.u_addr.ip4.addr;
  if (addr == _4)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  D.7062 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 13>; [INV]

  <bb 9> :
  _5 = ipaddr.addr;
  _6 = netif->ip_addr.u_addr.ip4.addr;
  _7 = _5 ^ _6;
  _8 = netif->netmask.u_addr.ip4.addr;
  _9 = _7 & _8;
  if (_9 == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  _10 = netif->netmask.u_addr.ip4.addr;
  _11 = ~_10;
  _12 = addr & _11;
  _13 = netif->netmask.u_addr.ip4.addr;
  _14 = ~_13;
  if (_12 == _14)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  D.7062 = 1;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 13>; [INV]

  <bb 12> :
  D.7062 = 0;
  // predicted unlikely by early return (on trees) predictor.

  <bb 13> :
  ipaddr = {CLOBBER};

  <bb 14> :
<L11>:
  return D.7062;

}


