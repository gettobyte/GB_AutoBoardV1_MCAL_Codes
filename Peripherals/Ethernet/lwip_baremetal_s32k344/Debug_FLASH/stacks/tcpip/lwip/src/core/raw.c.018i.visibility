
Marking local functions:


Marking externally visible functions: raw_netif_ip_addr_changed/16 raw_new_ip_type/15 raw_new/14 raw_remove/13 raw_send/12 raw_sendto_if_src/11 raw_sendto/10 raw_recv/9 raw_disconnect/8 raw_connect/7 raw_bind_netif/6 raw_bind/5 raw_input/4


Marking externally visible variables:


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

memset/33 (memset) @06e28540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: raw_new/14 
  Calls: 
memp_malloc/32 (memp_malloc) @06e28460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: raw_new/14 
  Calls: 
memp_free/31 (memp_free) @06e282a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: raw_remove/13 
  Calls: 
pbuf_free/30 (pbuf_free) @06e28000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: raw_sendto_if_src/11 
  Calls: 
ip6_chksum_pseudo/29 (ip6_chksum_pseudo) @06dc2e00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: raw_sendto_if_src/11 
  Calls: 
pbuf_remove_header/28 (pbuf_remove_header) @06dc2d20
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: raw_sendto_if_src/11 
  Calls: 
pbuf_chain/27 (pbuf_chain) @06dc2c40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: raw_sendto_if_src/11 
  Calls: 
pbuf_alloc/26 (pbuf_alloc) @06dc28c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: raw_sendto_if_src/11 
  Calls: 
pbuf_add_header/25 (pbuf_add_header) @06dc27e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: raw_sendto_if_src/11 
  Calls: 
ip4_output_if/24 (ip4_output_if) @06dc2540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: raw_sendto_if_src/11 raw_sendto_if_src/11 
  Calls: 
ip6_output_if/23 (ip6_output_if) @06dc2ee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: raw_sendto_if_src/11 raw_sendto_if_src/11 
  Calls: 
ip6_select_source_address/22 (ip6_select_source_address) @06dc2b60
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: raw_sendto/10 
  Calls: 
ip4_route/21 (ip4_route) @06dc2a80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: raw_sendto/10 
  Calls: 
netif_get_by_index/20 (netif_get_by_index) @06dc29a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: raw_sendto/10 raw_sendto/10 
  Calls: 
ip_addr_any_type/19 (ip_addr_any_type) @06e0b240
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: raw_disconnect/8 (read) raw_disconnect/8 (read) raw_disconnect/8 (read) raw_disconnect/8 (read) raw_disconnect/8 (read) raw_disconnect/8 (read) raw_disconnect/8 (read) raw_disconnect/8 (read) 
  Availability: not_available
  Varpool flags: read-only
ip6_route/18 (ip6_route) @06dc2000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: raw_sendto/10 raw_connect/7 raw_bind/5 
  Calls: 
ip4_addr_isbroadcast_u32/17 (ip4_addr_isbroadcast_u32) @06d68e00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: raw_input/4 
  Calls: 
raw_netif_ip_addr_changed/16 (raw_netif_ip_addr_changed) @06d68460
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: raw_pcbs/1 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
raw_new_ip_type/15 (raw_new_ip_type) @06d577e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: raw_new/14 
raw_new/14 (raw_new) @06d57380
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: raw_pcbs/1 (read) raw_pcbs/1 (write) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: raw_new_ip_type/15 
  Calls: memset/33 memp_malloc/32 
raw_remove/13 (raw_remove) @06d57000
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: raw_pcbs/1 (read) raw_pcbs/1 (read) raw_pcbs/1 (write) raw_pcbs/1 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: memp_free/31 
raw_send/12 (raw_send) @06d401c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: raw_sendto/10 
raw_sendto_if_src/11 (raw_sendto_if_src) @06d40d20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: raw_sendto/10 
  Calls: pbuf_free/30 ip4_output_if/24 ip6_output_if/23 ip6_chksum_pseudo/29 pbuf_remove_header/28 pbuf_chain/27 pbuf_alloc/26 pbuf_add_header/25 ip4_output_if/24 ip6_output_if/23 
raw_sendto/10 (raw_sendto) @06d400e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: raw_send/12 
  Calls: raw_sendto_if_src/11 ip6_select_source_address/22 ip4_route/21 ip6_route/18 netif_get_by_index/20 netif_get_by_index/20 
raw_recv/9 (raw_recv) @06ce0700
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
raw_disconnect/8 (raw_disconnect) @06ce0460
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: ip_addr_any_type/19 (read) ip_addr_any_type/19 (read) ip_addr_any_type/19 (read) ip_addr_any_type/19 (read) ip_addr_any_type/19 (read) ip_addr_any_type/19 (read) ip_addr_any_type/19 (read) ip_addr_any_type/19 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
raw_connect/7 (raw_connect) @06ccf460
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: ip6_route/18 
raw_bind_netif/6 (raw_bind_netif) @06cb9540
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
raw_bind/5 (raw_bind) @06cb92a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: ip6_route/18 
raw_input/4 (raw_input) @06cac2a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: ip_data/3 (read) ip_data/3 (read) ip_data/3 (read) raw_pcbs/1 (read) ip_data/3 (read) ip_data/3 (read) ip_data/3 (read) ip_data/3 (read) ip_data/3 (read) ip_data/3 (read) ip_data/3 (read) ip_data/3 (addr) raw_pcbs/1 (read) raw_pcbs/1 (write) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: raw_input_local_match/2 ip4_addr_isbroadcast_u32/17 
   Indirect call Num speculative call targets: 0
ip_data/3 (ip_data) @06c9f750
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: raw_input_local_match/2 (read) raw_input_local_match/2 (read) raw_input_local_match/2 (read) raw_input_local_match/2 (read) raw_input_local_match/2 (read) raw_input_local_match/2 (read) raw_input_local_match/2 (read) raw_input_local_match/2 (read) raw_input_local_match/2 (read) raw_input/4 (read) raw_input/4 (read) raw_input/4 (read) raw_input/4 (read) raw_input/4 (read) raw_input/4 (read) raw_input/4 (read) raw_input/4 (read) raw_input/4 (read) raw_input/4 (read) raw_input/4 (addr) 
  Availability: not_available
  Varpool flags:
raw_input_local_match/2 (raw_input_local_match) @06ca47e0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: ip_data/3 (read) ip_data/3 (read) ip_data/3 (read) ip_data/3 (read) ip_data/3 (read) ip_data/3 (read) ip_data/3 (read) ip_data/3 (read) ip_data/3 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: raw_input/4 
  Calls: 
raw_pcbs/1 (raw_pcbs) @06c9f510
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: raw_input/4 (read) raw_input/4 (read) raw_input/4 (write) raw_remove/13 (read) raw_remove/13 (read) raw_remove/13 (write) raw_remove/13 (read) raw_new/14 (read) raw_new/14 (write) raw_netif_ip_addr_changed/16 (read) 
  Availability: available
  Varpool flags:
raw_netif_ip_addr_changed (const struct ip_addr_t * old_addr, const struct ip_addr_t * new_addr)
{
  struct raw_pcb * rpcb;
  int iftmp.46;
  _Bool iftmp.45;
  _Bool iftmp.44;
  int iftmp.43;
  int iftmp.42;
  _Bool iftmp.41;
  _Bool iftmp.40;
  int iftmp.39;
  int iftmp.38;
  _Bool iftmp.37;
  _Bool iftmp.36;

  <bb 2> :
  if (old_addr != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 3> :
  if (old_addr != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 4> :
  _1 = old_addr->type;
  if (_1 == 6)
    goto <bb 5>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 5> :
  _2 = &old_addr->u_addr.ip6;
  if (_2 != 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 6> :
  _3 = old_addr->u_addr.ip6.addr[0];
  if (_3 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _4 = old_addr->u_addr.ip6.addr[1];
  if (_4 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  _5 = old_addr->u_addr.ip6.addr[2];
  if (_5 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  _6 = old_addr->u_addr.ip6.addr[3];
  if (_6 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  iftmp.38 = 1;
  goto <bb 12>; [INV]

  <bb 11> :
  iftmp.38 = 0;

  <bb 12> :
  iftmp.37 = (_Bool) iftmp.38;
  goto <bb 18>; [INV]

  <bb 13> :
  _7 = &old_addr->u_addr.ip4;
  if (_7 != 0B)
    goto <bb 14>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 14> :
  _8 = old_addr->u_addr.ip4.addr;
  if (_8 != 0)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  iftmp.39 = 1;
  goto <bb 17>; [INV]

  <bb 16> :
  iftmp.39 = 0;

  <bb 17> :
  iftmp.37 = (_Bool) iftmp.39;

  <bb 18> :
  iftmp.36 = iftmp.37;
  goto <bb 20>; [INV]

  <bb 19> :
  iftmp.36 = 0;

  <bb 20> :
  if (iftmp.36 != 0)
    goto <bb 21>; [INV]
  else
    goto <bb 60>; [INV]

  <bb 21> :
  if (new_addr != 0B)
    goto <bb 22>; [INV]
  else
    goto <bb 38>; [INV]

  <bb 22> :
  if (new_addr != 0B)
    goto <bb 23>; [INV]
  else
    goto <bb 32>; [INV]

  <bb 23> :
  _9 = new_addr->type;
  if (_9 == 6)
    goto <bb 24>; [INV]
  else
    goto <bb 32>; [INV]

  <bb 24> :
  _10 = &new_addr->u_addr.ip6;
  if (_10 != 0B)
    goto <bb 25>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 25> :
  _11 = new_addr->u_addr.ip6.addr[0];
  if (_11 != 0)
    goto <bb 29>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 26> :
  _12 = new_addr->u_addr.ip6.addr[1];
  if (_12 != 0)
    goto <bb 29>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 27> :
  _13 = new_addr->u_addr.ip6.addr[2];
  if (_13 != 0)
    goto <bb 29>; [INV]
  else
    goto <bb 28>; [INV]

  <bb 28> :
  _14 = new_addr->u_addr.ip6.addr[3];
  if (_14 != 0)
    goto <bb 29>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 29> :
  iftmp.42 = 1;
  goto <bb 31>; [INV]

  <bb 30> :
  iftmp.42 = 0;

  <bb 31> :
  iftmp.41 = (_Bool) iftmp.42;
  goto <bb 37>; [INV]

  <bb 32> :
  _15 = &new_addr->u_addr.ip4;
  if (_15 != 0B)
    goto <bb 33>; [INV]
  else
    goto <bb 35>; [INV]

  <bb 33> :
  _16 = new_addr->u_addr.ip4.addr;
  if (_16 != 0)
    goto <bb 34>; [INV]
  else
    goto <bb 35>; [INV]

  <bb 34> :
  iftmp.43 = 1;
  goto <bb 36>; [INV]

  <bb 35> :
  iftmp.43 = 0;

  <bb 36> :
  iftmp.41 = (_Bool) iftmp.43;

  <bb 37> :
  iftmp.40 = iftmp.41;
  goto <bb 39>; [INV]

  <bb 38> :
  iftmp.40 = 0;

  <bb 39> :
  if (iftmp.40 != 0)
    goto <bb 40>; [INV]
  else
    goto <bb 60>; [INV]

  <bb 40> :
  rpcb = raw_pcbs;
  goto <bb 59>; [INV]

  <bb 41> :
  _17 = rpcb->local_ip.type;
  _18 = old_addr->type;
  if (_17 == _18)
    goto <bb 42>; [INV]
  else
    goto <bb 53>; [INV]

  <bb 42> :
  _19 = rpcb->local_ip.type;
  if (_19 == 6)
    goto <bb 43>; [INV]
  else
    goto <bb 51>; [INV]

  <bb 43> :
  _20 = rpcb->local_ip.u_addr.ip6.addr[0];
  _21 = old_addr->u_addr.ip6.addr[0];
  if (_20 == _21)
    goto <bb 44>; [INV]
  else
    goto <bb 49>; [INV]

  <bb 44> :
  _22 = rpcb->local_ip.u_addr.ip6.addr[1];
  _23 = old_addr->u_addr.ip6.addr[1];
  if (_22 == _23)
    goto <bb 45>; [INV]
  else
    goto <bb 49>; [INV]

  <bb 45> :
  _24 = rpcb->local_ip.u_addr.ip6.addr[2];
  _25 = old_addr->u_addr.ip6.addr[2];
  if (_24 == _25)
    goto <bb 46>; [INV]
  else
    goto <bb 49>; [INV]

  <bb 46> :
  _26 = rpcb->local_ip.u_addr.ip6.addr[3];
  _27 = old_addr->u_addr.ip6.addr[3];
  if (_26 == _27)
    goto <bb 47>; [INV]
  else
    goto <bb 49>; [INV]

  <bb 47> :
  _28 = rpcb->local_ip.u_addr.ip6.zone;
  _29 = old_addr->u_addr.ip6.zone;
  if (_28 == _29)
    goto <bb 48>; [INV]
  else
    goto <bb 49>; [INV]

  <bb 48> :
  iftmp.46 = 1;
  goto <bb 50>; [INV]

  <bb 49> :
  iftmp.46 = 0;

  <bb 50> :
  iftmp.45 = (_Bool) iftmp.46;
  goto <bb 52>; [INV]

  <bb 51> :
  _30 = rpcb->local_ip.u_addr.ip4.addr;
  _31 = old_addr->u_addr.ip4.addr;
  iftmp.45 = _30 == _31;

  <bb 52> :
  iftmp.44 = iftmp.45;
  goto <bb 54>; [INV]

  <bb 53> :
  iftmp.44 = 0;

  <bb 54> :
  if (iftmp.44 != 0)
    goto <bb 55>; [INV]
  else
    goto <bb 58>; [INV]

  <bb 55> :
  _32 = new_addr->type;
  rpcb->local_ip.type = _32;
  _33 = new_addr->type;
  if (_33 == 6)
    goto <bb 56>; [INV]
  else
    goto <bb 57>; [INV]

  <bb 56> :
  _34 = new_addr->u_addr.ip6.addr[0];
  rpcb->local_ip.u_addr.ip6.addr[0] = _34;
  _35 = new_addr->u_addr.ip6.addr[1];
  rpcb->local_ip.u_addr.ip6.addr[1] = _35;
  _36 = new_addr->u_addr.ip6.addr[2];
  rpcb->local_ip.u_addr.ip6.addr[2] = _36;
  _37 = new_addr->u_addr.ip6.addr[3];
  rpcb->local_ip.u_addr.ip6.addr[3] = _37;
  _38 = new_addr->u_addr.ip6.zone;
  rpcb->local_ip.u_addr.ip6.zone = _38;
  goto <bb 58>; [INV]

  <bb 57> :
  _39 = new_addr->u_addr.ip4.addr;
  rpcb->local_ip.u_addr.ip4.addr = _39;
  rpcb->local_ip.u_addr.ip6.addr[3] = 0;
  _40 = rpcb->local_ip.u_addr.ip6.addr[3];
  rpcb->local_ip.u_addr.ip6.addr[2] = _40;
  _41 = rpcb->local_ip.u_addr.ip6.addr[2];
  rpcb->local_ip.u_addr.ip6.addr[1] = _41;
  rpcb->local_ip.u_addr.ip6.zone = 0;

  <bb 58> :
  rpcb = rpcb->next;

  <bb 59> :
  if (rpcb != 0B)
    goto <bb 41>; [INV]
  else
    goto <bb 60>; [INV]

  <bb 60> :
  return;

}


raw_new_ip_type (u8_t type, u8_t proto)
{
  struct raw_pcb * pcb;
  struct raw_pcb * D.7802;

  <bb 2> :
  pcb = raw_new (proto);
  if (pcb != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  pcb->local_ip.type = type;
  pcb->remote_ip.type = type;

  <bb 4> :
  D.7802 = pcb;

  <bb 5> :
<L2>:
  return D.7802;

}


raw_new (u8_t proto)
{
  struct raw_pcb * pcb;
  struct raw_pcb * D.7798;

  <bb 2> :
  pcb = memp_malloc (0);
  if (pcb != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  memset (pcb, 0, 72);
  pcb->protocol = proto;
  pcb->ttl = 255;
  pcb->mcast_ttl = 255;
  raw_pcbs.35_1 = raw_pcbs;
  pcb->next = raw_pcbs.35_1;
  raw_pcbs = pcb;

  <bb 4> :
  D.7798 = pcb;

  <bb 5> :
<L2>:
  return D.7798;

}


raw_remove (struct raw_pcb * pcb)
{
  struct raw_pcb * pcb2;

  <bb 2> :
  raw_pcbs.33_1 = raw_pcbs;
  if (pcb == raw_pcbs.33_1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  raw_pcbs.34_2 = raw_pcbs;
  _3 = raw_pcbs.34_2->next;
  raw_pcbs = _3;
  goto <bb 10>; [INV]

  <bb 4> :
  pcb2 = raw_pcbs;
  goto <bb 9>; [INV]

  <bb 5> :
  _4 = pcb2->next;
  if (_4 != 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  _5 = pcb2->next;
  if (pcb == _5)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _6 = pcb->next;
  pcb2->next = _6;
  goto <bb 10>; [INV]

  <bb 8> :
  pcb2 = pcb2->next;

  <bb 9> :
  if (pcb2 != 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  memp_free (0, pcb);
  return;

}


raw_send (struct raw_pcb * pcb, struct pbuf * p)
{
  err_t D.7787;

  <bb 2> :
  _1 = &pcb->remote_ip;
  D.7787 = raw_sendto (pcb, p, _1);

  <bb 3> :
<L0>:
  return D.7787;

}


raw_sendto_if_src (struct raw_pcb * pcb, struct pbuf * p, const struct ip_addr_t * dst_ip, struct netif * netif, const struct ip_addr_t * src_ip)
{
  short unsigned int D.7786;
  u16_t chksum;
  u8_t ttl;
  u16_t header_size;
  struct pbuf * q;
  err_t err;
  err_t iftmp.32;
  _Bool iftmp.31;
  u8_t iftmp.30;
  _Bool iftmp.29;
  err_t iftmp.28;
  u16_t iftmp.27;
  err_t D.7724;

  <bb 2> :
  if (pcb == 0B)
    goto <bb 10>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  if (dst_ip == 0B)
    goto <bb 10>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  if (netif == 0B)
    goto <bb 10>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  if (src_ip == 0B)
    goto <bb 10>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  _1 = pcb->local_ip.type;
  if (_1 != 46)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _2 = pcb->local_ip.type;
  _3 = src_ip->type;
  if (_2 != _3)
    goto <bb 10>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  _4 = pcb->local_ip.type;
  if (_4 != 46)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  _5 = pcb->local_ip.type;
  _6 = dst_ip->type;
  if (_5 != _6)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  D.7724 = -6;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 59>; [INV]

  <bb 11> :
  if (dst_ip != 0B)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 12> :
  _7 = dst_ip->type;
  if (_7 == 6)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  iftmp.27 = 40;
  goto <bb 15>; [INV]

  <bb 14> :
  iftmp.27 = 20;

  <bb 15> :
  header_size = iftmp.27;
  _8 = pcb->flags;
  _9 = (unsigned int) _8;
  _10 = _9 & 2;
  if (_10 != 0)
    goto <bb 16>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 16> :
  _11 = p->len;
  if (header_size > _11)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  D.7724 = -6;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 59>; [INV]

  <bb 18> :
  if (dst_ip != 0B)
    goto <bb 19>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 19> :
  _12 = dst_ip->type;
  if (_12 == 6)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  _13 = &src_ip->u_addr.ip6;
  iftmp.28 = ip6_output_if (p, _13, 0B, 0, 0, 0, netif);
  goto <bb 22>; [INV]

  <bb 21> :
  _14 = &src_ip->u_addr.ip4;
  iftmp.28 = ip4_output_if (p, _14, 0B, 0, 0, 0, netif);

  <bb 22> :
  err = iftmp.28;
  D.7724 = err;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 59>; [INV]

  <bb 23> :
  _15 = p->tot_len;
  _16 = header_size + _15;
  _17 = p->tot_len;
  if (_16 < _17)
    goto <bb 24>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 24> :
  D.7724 = -1;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 59>; [INV]

  <bb 25> :
  _18 = (unsigned int) header_size;
  _19 = pbuf_add_header (p, _18);
  if (_19 != 0)
    goto <bb 26>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 26> :
  q = pbuf_alloc (54, 0, 640);
  if (q == 0B)
    goto <bb 27>; [INV]
  else
    goto <bb 28>; [INV]

  <bb 27> :
  D.7724 = -1;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 59>; [INV]

  <bb 28> :
  _20 = p->tot_len;
  if (_20 != 0)
    goto <bb 29>; [INV]
  else
    goto <bb 32>; [INV]

  <bb 29> :
  pbuf_chain (q, p);
  goto <bb 32>; [INV]

  <bb 30> :
  q = p;
  _21 = (unsigned int) header_size;
  _22 = pbuf_remove_header (q, _21);
  if (_22 != 0)
    goto <bb 31>; [INV]
  else
    goto <bb 32>; [INV]

  <bb 31> :
  __asm__ __volatile__("BKPT #0
	");
  goto <bb 31>; [INV]

  <bb 32> :
  _23 = pcb->flags;
  _24 = (unsigned int) _23;
  _25 = _24 & 4;
  if (_25 != 0)
    goto <bb 33>; [INV]
  else
    goto <bb 39>; [INV]

  <bb 33> :
  if (dst_ip != 0B)
    goto <bb 34>; [INV]
  else
    goto <bb 36>; [INV]

  <bb 34> :
  _26 = dst_ip->type;
  if (_26 == 6)
    goto <bb 35>; [INV]
  else
    goto <bb 36>; [INV]

  <bb 35> :
  _27 = dst_ip->u_addr.ip6.addr[0];
  _28 = _27 & 255;
  iftmp.29 = _28 == 255;
  goto <bb 37>; [INV]

  <bb 36> :
  _29 = dst_ip->u_addr.ip4.addr;
  _30 = _29 & 240;
  iftmp.29 = _30 == 224;

  <bb 37> :
  if (iftmp.29 != 0)
    goto <bb 38>; [INV]
  else
    goto <bb 39>; [INV]

  <bb 38> :
  _31 = q->flags;
  _32 = _31 | 4;
  q->flags = _32;

  <bb 39> :
  if (dst_ip != 0B)
    goto <bb 40>; [INV]
  else
    goto <bb 45>; [INV]

  <bb 40> :
  _33 = dst_ip->type;
  if (_33 == 6)
    goto <bb 41>; [INV]
  else
    goto <bb 45>; [INV]

  <bb 41> :
  _34 = pcb->chksum_reqd;
  if (_34 != 0)
    goto <bb 42>; [INV]
  else
    goto <bb 45>; [INV]

  <bb 42> :
  _35 = pcb->protocol;
  _36 = p->tot_len;
  _37 = &src_ip->u_addr.ip6;
  _38 = &dst_ip->u_addr.ip6;
  _39 = ip6_chksum_pseudo (p, _35, _36, _37, _38);
  chksum = _39;
  _40 = pcb->chksum_offset;
  _41 = (int) _40;
  _42 = _41 + 1;
  _43 = p->len;
  _44 = (int) _43;
  if (_42 >= _44)
    goto <bb 43>; [INV]
  else
    goto <bb 44>; [INV]

  <bb 43> :
  __asm__ __volatile__("BKPT #0
	");
  goto <bb 43>; [INV]

  <bb 44> :
  _45 = p->payload;
  _46 = pcb->chksum_offset;
  _47 = (sizetype) _46;
  _48 = _45 + _47;
  D.7786 = MEM <short unsigned int> [(char * {ref-all})&chksum];
  MEM <short unsigned int> [(char * {ref-all})_48] = D.7786;
  chksum = {CLOBBER};

  <bb 45> :
  if (dst_ip != 0B)
    goto <bb 46>; [INV]
  else
    goto <bb 48>; [INV]

  <bb 46> :
  _49 = dst_ip->type;
  if (_49 == 6)
    goto <bb 47>; [INV]
  else
    goto <bb 48>; [INV]

  <bb 47> :
  _50 = dst_ip->u_addr.ip6.addr[0];
  _51 = _50 & 255;
  iftmp.31 = _51 == 255;
  goto <bb 49>; [INV]

  <bb 48> :
  _52 = dst_ip->u_addr.ip4.addr;
  _53 = _52 & 240;
  iftmp.31 = _53 == 224;

  <bb 49> :
  if (iftmp.31 != 0)
    goto <bb 50>; [INV]
  else
    goto <bb 51>; [INV]

  <bb 50> :
  iftmp.30 = pcb->mcast_ttl;
  goto <bb 52>; [INV]

  <bb 51> :
  iftmp.30 = pcb->ttl;

  <bb 52> :
  ttl = iftmp.30;
  if (dst_ip != 0B)
    goto <bb 53>; [INV]
  else
    goto <bb 55>; [INV]

  <bb 53> :
  _54 = dst_ip->type;
  if (_54 == 6)
    goto <bb 54>; [INV]
  else
    goto <bb 55>; [INV]

  <bb 54> :
  _55 = &src_ip->u_addr.ip6;
  _56 = &dst_ip->u_addr.ip6;
  _57 = pcb->tos;
  _58 = pcb->protocol;
  iftmp.32 = ip6_output_if (q, _55, _56, ttl, _57, _58, netif);
  goto <bb 56>; [INV]

  <bb 55> :
  _59 = &src_ip->u_addr.ip4;
  _60 = &dst_ip->u_addr.ip4;
  _61 = pcb->tos;
  _62 = pcb->protocol;
  iftmp.32 = ip4_output_if (q, _59, _60, ttl, _61, _62, netif);

  <bb 56> :
  err = iftmp.32;
  if (q != p)
    goto <bb 57>; [INV]
  else
    goto <bb 58>; [INV]

  <bb 57> :
  pbuf_free (q);

  <bb 58> :
  D.7724 = err;

  <bb 59> :
<L65>:
  return D.7724;

}


raw_sendto (struct raw_pcb * pcb, struct pbuf * p, const struct ip_addr_t * ipaddr)
{
  const struct ip_addr_t * src_ip;
  struct netif * netif;
  const struct ip_addr_t * iftmp.26;
  const struct ip_addr_t * iftmp.25;
  const struct ip_addr_t * iftmp.24;
  int iftmp.23;
  int iftmp.22;
  struct netif * iftmp.21;
  _Bool iftmp.20;
  err_t D.7645;

  <bb 2> :
  if (pcb == 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  if (ipaddr == 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  _1 = pcb->local_ip.type;
  if (_1 != 46)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _2 = pcb->local_ip.type;
  _3 = ipaddr->type;
  if (_2 != _3)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  D.7645 = -6;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 62>; [INV]

  <bb 7> :
  _4 = pcb->netif_idx;
  if (_4 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  _5 = pcb->netif_idx;
  netif = netif_get_by_index (_5);
  goto <bb 21>; [INV]

  <bb 9> :
  netif = 0B;
  if (ipaddr != 0B)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  _6 = ipaddr->type;
  if (_6 == 6)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  _7 = ipaddr->u_addr.ip6.addr[0];
  _8 = _7 & 255;
  iftmp.20 = _8 == 255;
  goto <bb 13>; [INV]

  <bb 12> :
  _9 = ipaddr->u_addr.ip4.addr;
  _10 = _9 & 240;
  iftmp.20 = _10 == 224;

  <bb 13> :
  if (iftmp.20 != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  _11 = pcb->mcast_ifindex;
  netif = netif_get_by_index (_11);

  <bb 15> :
  if (netif == 0B)
    goto <bb 16>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 16> :
  if (ipaddr != 0B)
    goto <bb 17>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 17> :
  _12 = ipaddr->type;
  if (_12 == 6)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  _13 = &pcb->local_ip.u_addr.ip6;
  _14 = &ipaddr->u_addr.ip6;
  iftmp.21 = ip6_route (_13, _14);
  goto <bb 20>; [INV]

  <bb 19> :
  _15 = &ipaddr->u_addr.ip4;
  iftmp.21 = ip4_route (_15);

  <bb 20> :
  netif = iftmp.21;

  <bb 21> :
  if (netif == 0B)
    goto <bb 22>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 22> :
  if (ipaddr != 0B)
    goto <bb 23>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 23> :
  _16 = ipaddr->type;

  <bb 24> :
  D.7645 = -4;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 62>; [INV]

  <bb 25> :
  _17 = &pcb->local_ip;
  if (_17 != 0B)
    goto <bb 26>; [INV]
  else
    goto <bb 47>; [INV]

  <bb 26> :
  _18 = &pcb->local_ip;
  if (_18 != 0B)
    goto <bb 27>; [INV]
  else
    goto <bb 37>; [INV]

  <bb 27> :
  _19 = pcb->local_ip.type;
  if (_19 == 6)
    goto <bb 28>; [INV]
  else
    goto <bb 37>; [INV]

  <bb 28> :
  _20 = &pcb->local_ip.u_addr.ip6;
  if (_20 == 0B)
    goto <bb 33>; [INV]
  else
    goto <bb 29>; [INV]

  <bb 29> :
  _21 = pcb->local_ip.u_addr.ip6.addr[0];
  if (_21 == 0)
    goto <bb 30>; [INV]
  else
    goto <bb 34>; [INV]

  <bb 30> :
  _22 = pcb->local_ip.u_addr.ip6.addr[1];
  if (_22 == 0)
    goto <bb 31>; [INV]
  else
    goto <bb 34>; [INV]

  <bb 31> :
  _23 = pcb->local_ip.u_addr.ip6.addr[2];
  if (_23 == 0)
    goto <bb 32>; [INV]
  else
    goto <bb 34>; [INV]

  <bb 32> :
  _24 = pcb->local_ip.u_addr.ip6.addr[3];
  if (_24 == 0)
    goto <bb 33>; [INV]
  else
    goto <bb 34>; [INV]

  <bb 33> :
  iftmp.22 = 1;
  goto <bb 35>; [INV]

  <bb 34> :
  iftmp.22 = 0;

  <bb 35> :
  _25 = (_Bool) iftmp.22;
  if (_25 != 0)
    goto <bb 47>; [INV]
  else
    goto <bb 36>; [INV]

  <bb 36> :
  goto <bb 42>; [INV]

  <bb 37> :
  _26 = &pcb->local_ip.u_addr.ip4;
  if (_26 == 0B)
    goto <bb 39>; [INV]
  else
    goto <bb 38>; [INV]

  <bb 38> :
  _27 = pcb->local_ip.u_addr.ip4.addr;
  if (_27 == 0)
    goto <bb 39>; [INV]
  else
    goto <bb 40>; [INV]

  <bb 39> :
  iftmp.23 = 1;
  goto <bb 41>; [INV]

  <bb 40> :
  iftmp.23 = 0;

  <bb 41> :
  _28 = (_Bool) iftmp.23;
  if (_28 != 0)
    goto <bb 47>; [INV]
  else
    goto <bb 42>; [INV]

  <bb 42> :

  <bb 43> :
  _29 = &pcb->local_ip;
  if (_29 != 0B)
    goto <bb 44>; [INV]
  else
    goto <bb 46>; [INV]

  <bb 44> :
  _30 = pcb->local_ip.type;
  if (_30 == 6)
    goto <bb 45>; [INV]
  else
    goto <bb 46>; [INV]

  <bb 45> :
  _31 = pcb->local_ip.u_addr.ip6.addr[0];
  _32 = _31 & 255;
  if (_32 == 255)
    goto <bb 47>; [INV]
  else
    goto <bb 60>; [INV]

  <bb 46> :
  _33 = pcb->local_ip.u_addr.ip4.addr;
  _34 = _33 & 240;
  if (_34 == 224)
    goto <bb 47>; [INV]
  else
    goto <bb 60>; [INV]

  <bb 47> :
  if (ipaddr != 0B)
    goto <bb 48>; [INV]
  else
    goto <bb 53>; [INV]

  <bb 48> :
  _35 = ipaddr->type;
  if (_35 == 6)
    goto <bb 49>; [INV]
  else
    goto <bb 53>; [INV]

  <bb 49> :
  if (netif != 0B)
    goto <bb 50>; [INV]
  else
    goto <bb 51>; [INV]

  <bb 50> :
  _36 = &ipaddr->u_addr.ip6;
  iftmp.25 = ip6_select_source_address (netif, _36);
  goto <bb 52>; [INV]

  <bb 51> :
  iftmp.25 = 0B;

  <bb 52> :
  iftmp.24 = iftmp.25;
  goto <bb 57>; [INV]

  <bb 53> :
  if (netif != 0B)
    goto <bb 54>; [INV]
  else
    goto <bb 55>; [INV]

  <bb 54> :
  iftmp.26 = &netif->ip_addr;
  goto <bb 56>; [INV]

  <bb 55> :
  iftmp.26 = 0B;

  <bb 56> :
  iftmp.24 = iftmp.26;

  <bb 57> :
  src_ip = iftmp.24;
  if (src_ip == 0B)
    goto <bb 58>; [INV]
  else
    goto <bb 59>; [INV]

  <bb 58> :
  D.7645 = -4;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 62>; [INV]

  <bb 59> :
  goto <bb 61>; [INV]

  <bb 60> :
  src_ip = &pcb->local_ip;

  <bb 61> :
  D.7645 = raw_sendto_if_src (pcb, p, ipaddr, netif, src_ip);

  <bb 62> :
<L66>:
  return D.7645;

}


raw_recv (struct raw_pcb * pcb, u8_t (*raw_recv_fn) (void *, struct raw_pcb *, struct pbuf *, const struct ip_addr_t *) recv, void * recv_arg)
{
  <bb 2> :
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
  return;

}


raw_disconnect (struct raw_pcb * pcb)
{
  <bb 2> :
  _1 = pcb->local_ip.type;
  if (_1 == 46)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  _2 = ip_addr_any_type.type;
  pcb->remote_ip.type = _2;
  _3 = ip_addr_any_type.type;
  if (_3 == 6)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _4 = ip_addr_any_type.u_addr.ip6.addr[0];
  pcb->remote_ip.u_addr.ip6.addr[0] = _4;
  _5 = ip_addr_any_type.u_addr.ip6.addr[1];
  pcb->remote_ip.u_addr.ip6.addr[1] = _5;
  _6 = ip_addr_any_type.u_addr.ip6.addr[2];
  pcb->remote_ip.u_addr.ip6.addr[2] = _6;
  _7 = ip_addr_any_type.u_addr.ip6.addr[3];
  pcb->remote_ip.u_addr.ip6.addr[3] = _7;
  _8 = ip_addr_any_type.u_addr.ip6.zone;
  pcb->remote_ip.u_addr.ip6.zone = _8;
  goto <bb 12>; [INV]

  <bb 5> :
  _9 = ip_addr_any_type.u_addr.ip4.addr;
  pcb->remote_ip.u_addr.ip4.addr = _9;
  pcb->remote_ip.u_addr.ip6.addr[3] = 0;
  _10 = pcb->remote_ip.u_addr.ip6.addr[3];
  pcb->remote_ip.u_addr.ip6.addr[2] = _10;
  _11 = pcb->remote_ip.u_addr.ip6.addr[2];
  pcb->remote_ip.u_addr.ip6.addr[1] = _11;
  pcb->remote_ip.u_addr.ip6.zone = 0;
  goto <bb 12>; [INV]

  <bb 6> :
  _12 = pcb->remote_ip.type;
  if (_12 == 6)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  pcb->remote_ip.u_addr.ip6.addr[0] = 0;
  pcb->remote_ip.u_addr.ip6.addr[1] = 0;
  pcb->remote_ip.u_addr.ip6.addr[2] = 0;
  pcb->remote_ip.u_addr.ip6.addr[3] = 0;
  pcb->remote_ip.u_addr.ip6.zone = 0;
  _13 = &pcb->remote_ip;
  if (_13 != 0B)
    goto <bb 8>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 8> :
  pcb->remote_ip.type = 6;
  goto <bb 12>; [INV]

  <bb 9> :
  pcb->remote_ip.u_addr.ip4.addr = 0;
  _14 = &pcb->remote_ip;
  if (_14 != 0B)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  pcb->remote_ip.type = 0;

  <bb 11> :
  pcb->remote_ip.u_addr.ip6.addr[3] = 0;
  _15 = pcb->remote_ip.u_addr.ip6.addr[3];
  pcb->remote_ip.u_addr.ip6.addr[2] = _15;
  _16 = pcb->remote_ip.u_addr.ip6.addr[2];
  pcb->remote_ip.u_addr.ip6.addr[1] = _16;
  pcb->remote_ip.u_addr.ip6.zone = 0;

  <bb 12> :
  pcb->netif_idx = 0;
  _17 = pcb->flags;
  _18 = _17 & 254;
  pcb->flags = _18;
  return;

}


raw_connect (struct raw_pcb * pcb, const struct ip_addr_t * ipaddr)
{
  struct netif * selected_netif;
  u8_t iftmp.19;
  const long unsigned int iftmp.18;
  u8_t iftmp.17;
  const long unsigned int iftmp.16;
  const long unsigned int iftmp.15;
  const long unsigned int iftmp.14;
  const long unsigned int iftmp.13;
  err_t D.7577;

  <bb 2> :
  if (pcb == 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  if (ipaddr == 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  D.7577 = -6;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 43>; [INV]

  <bb 5> :
  _1 = &pcb->remote_ip;
  if (_1 != 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _2 = ipaddr->type;
  pcb->remote_ip.type = _2;

  <bb 7> :
  if (ipaddr != 0B)
    goto <bb 8>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 8> :
  _3 = ipaddr->type;
  if (_3 == 6)
    goto <bb 9>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 9> :
  _4 = &ipaddr->u_addr.ip6;
  if (_4 != 0B)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  iftmp.13 = ipaddr->u_addr.ip6.addr[0];
  goto <bb 12>; [INV]

  <bb 11> :
  iftmp.13 = 0;

  <bb 12> :
  pcb->remote_ip.u_addr.ip6.addr[0] = iftmp.13;
  _5 = &ipaddr->u_addr.ip6;
  if (_5 != 0B)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  iftmp.14 = ipaddr->u_addr.ip6.addr[1];
  goto <bb 15>; [INV]

  <bb 14> :
  iftmp.14 = 0;

  <bb 15> :
  pcb->remote_ip.u_addr.ip6.addr[1] = iftmp.14;
  _6 = &ipaddr->u_addr.ip6;
  if (_6 != 0B)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  iftmp.15 = ipaddr->u_addr.ip6.addr[2];
  goto <bb 18>; [INV]

  <bb 17> :
  iftmp.15 = 0;

  <bb 18> :
  pcb->remote_ip.u_addr.ip6.addr[2] = iftmp.15;
  _7 = &ipaddr->u_addr.ip6;
  if (_7 != 0B)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  iftmp.16 = ipaddr->u_addr.ip6.addr[3];
  goto <bb 21>; [INV]

  <bb 20> :
  iftmp.16 = 0;

  <bb 21> :
  pcb->remote_ip.u_addr.ip6.addr[3] = iftmp.16;
  _8 = &ipaddr->u_addr.ip6;
  if (_8 != 0B)
    goto <bb 22>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 22> :
  iftmp.17 = ipaddr->u_addr.ip6.zone;
  goto <bb 24>; [INV]

  <bb 23> :
  iftmp.17 = 0;

  <bb 24> :
  pcb->remote_ip.u_addr.ip6.zone = iftmp.17;
  goto <bb 29>; [INV]

  <bb 25> :
  _9 = &ipaddr->u_addr.ip4;
  if (_9 != 0B)
    goto <bb 26>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 26> :
  iftmp.18 = ipaddr->u_addr.ip4.addr;
  goto <bb 28>; [INV]

  <bb 27> :
  iftmp.18 = 0;

  <bb 28> :
  pcb->remote_ip.u_addr.ip4.addr = iftmp.18;
  pcb->remote_ip.u_addr.ip6.addr[3] = 0;
  _10 = pcb->remote_ip.u_addr.ip6.addr[3];
  pcb->remote_ip.u_addr.ip6.addr[2] = _10;
  _11 = pcb->remote_ip.u_addr.ip6.addr[2];
  pcb->remote_ip.u_addr.ip6.addr[1] = _11;
  pcb->remote_ip.u_addr.ip6.zone = 0;

  <bb 29> :
  _12 = &pcb->remote_ip;
  if (_12 != 0B)
    goto <bb 30>; [INV]
  else
    goto <bb 42>; [INV]

  <bb 30> :
  _13 = pcb->remote_ip.type;
  if (_13 == 6)
    goto <bb 31>; [INV]
  else
    goto <bb 42>; [INV]

  <bb 31> :
  _14 = pcb->remote_ip.u_addr.ip6.zone;
  if (_14 == 0)
    goto <bb 32>; [INV]
  else
    goto <bb 42>; [INV]

  <bb 32> :
  _15 = pcb->remote_ip.u_addr.ip6.addr[0];
  _16 = _15 & 49407;
  if (_16 == 33022)
    goto <bb 35>; [INV]
  else
    goto <bb 33>; [INV]

  <bb 33> :
  _17 = pcb->remote_ip.u_addr.ip6.addr[0];
  _18 = _17 & 36863;
  if (_18 == 511)
    goto <bb 35>; [INV]
  else
    goto <bb 34>; [INV]

  <bb 34> :
  _19 = pcb->remote_ip.u_addr.ip6.addr[0];
  _20 = _19 & 36863;
  if (_20 == 767)
    goto <bb 35>; [INV]
  else
    goto <bb 42>; [INV]

  <bb 35> :
  _21 = &pcb->local_ip.u_addr.ip6;
  _22 = &pcb->remote_ip.u_addr.ip6;
  selected_netif = ip6_route (_21, _22);
  if (selected_netif != 0B)
    goto <bb 36>; [INV]
  else
    goto <bb 42>; [INV]

  <bb 36> :
  _23 = pcb->remote_ip.u_addr.ip6.addr[0];
  _24 = _23 & 49407;
  if (_24 == 33022)
    goto <bb 39>; [INV]
  else
    goto <bb 37>; [INV]

  <bb 37> :
  _25 = pcb->remote_ip.u_addr.ip6.addr[0];
  _26 = _25 & 36863;
  if (_26 == 511)
    goto <bb 39>; [INV]
  else
    goto <bb 38>; [INV]

  <bb 38> :
  _27 = pcb->remote_ip.u_addr.ip6.addr[0];
  _28 = _27 & 36863;
  if (_28 == 767)
    goto <bb 39>; [INV]
  else
    goto <bb 40>; [INV]

  <bb 39> :
  _29 = selected_netif->num;
  iftmp.19 = _29 + 1;
  goto <bb 41>; [INV]

  <bb 40> :
  iftmp.19 = 0;

  <bb 41> :
  pcb->remote_ip.u_addr.ip6.zone = iftmp.19;

  <bb 42> :
  _30 = pcb->flags;
  _31 = _30 | 1;
  pcb->flags = _31;
  D.7577 = 0;

  <bb 43> :
<L44>:
  return D.7577;

}


raw_bind_netif (struct raw_pcb * pcb, const struct netif * netif)
{
  <bb 2> :
  if (netif != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 = netif->num;
  _2 = _1 + 1;
  pcb->netif_idx = _2;
  goto <bb 5>; [INV]

  <bb 4> :
  pcb->netif_idx = 0;

  <bb 5> :
  return;

}


raw_bind (struct raw_pcb * pcb, const struct ip_addr_t * ipaddr)
{
  struct netif * selected_netif;
  u8_t iftmp.12;
  const long unsigned int iftmp.11;
  u8_t iftmp.10;
  const long unsigned int iftmp.9;
  const long unsigned int iftmp.8;
  const long unsigned int iftmp.7;
  const long unsigned int iftmp.6;
  err_t D.7521;

  <bb 2> :
  if (pcb == 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  if (ipaddr == 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  D.7521 = -6;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 43>; [INV]

  <bb 5> :
  _1 = &pcb->local_ip;
  if (_1 != 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _2 = ipaddr->type;
  pcb->local_ip.type = _2;

  <bb 7> :
  if (ipaddr != 0B)
    goto <bb 8>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 8> :
  _3 = ipaddr->type;
  if (_3 == 6)
    goto <bb 9>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 9> :
  _4 = &ipaddr->u_addr.ip6;
  if (_4 != 0B)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  iftmp.6 = ipaddr->u_addr.ip6.addr[0];
  goto <bb 12>; [INV]

  <bb 11> :
  iftmp.6 = 0;

  <bb 12> :
  pcb->local_ip.u_addr.ip6.addr[0] = iftmp.6;
  _5 = &ipaddr->u_addr.ip6;
  if (_5 != 0B)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  iftmp.7 = ipaddr->u_addr.ip6.addr[1];
  goto <bb 15>; [INV]

  <bb 14> :
  iftmp.7 = 0;

  <bb 15> :
  pcb->local_ip.u_addr.ip6.addr[1] = iftmp.7;
  _6 = &ipaddr->u_addr.ip6;
  if (_6 != 0B)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  iftmp.8 = ipaddr->u_addr.ip6.addr[2];
  goto <bb 18>; [INV]

  <bb 17> :
  iftmp.8 = 0;

  <bb 18> :
  pcb->local_ip.u_addr.ip6.addr[2] = iftmp.8;
  _7 = &ipaddr->u_addr.ip6;
  if (_7 != 0B)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  iftmp.9 = ipaddr->u_addr.ip6.addr[3];
  goto <bb 21>; [INV]

  <bb 20> :
  iftmp.9 = 0;

  <bb 21> :
  pcb->local_ip.u_addr.ip6.addr[3] = iftmp.9;
  _8 = &ipaddr->u_addr.ip6;
  if (_8 != 0B)
    goto <bb 22>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 22> :
  iftmp.10 = ipaddr->u_addr.ip6.zone;
  goto <bb 24>; [INV]

  <bb 23> :
  iftmp.10 = 0;

  <bb 24> :
  pcb->local_ip.u_addr.ip6.zone = iftmp.10;
  goto <bb 29>; [INV]

  <bb 25> :
  _9 = &ipaddr->u_addr.ip4;
  if (_9 != 0B)
    goto <bb 26>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 26> :
  iftmp.11 = ipaddr->u_addr.ip4.addr;
  goto <bb 28>; [INV]

  <bb 27> :
  iftmp.11 = 0;

  <bb 28> :
  pcb->local_ip.u_addr.ip4.addr = iftmp.11;
  pcb->local_ip.u_addr.ip6.addr[3] = 0;
  _10 = pcb->local_ip.u_addr.ip6.addr[3];
  pcb->local_ip.u_addr.ip6.addr[2] = _10;
  _11 = pcb->local_ip.u_addr.ip6.addr[2];
  pcb->local_ip.u_addr.ip6.addr[1] = _11;
  pcb->local_ip.u_addr.ip6.zone = 0;

  <bb 29> :
  _12 = &pcb->local_ip;
  if (_12 != 0B)
    goto <bb 30>; [INV]
  else
    goto <bb 42>; [INV]

  <bb 30> :
  _13 = pcb->local_ip.type;
  if (_13 == 6)
    goto <bb 31>; [INV]
  else
    goto <bb 42>; [INV]

  <bb 31> :
  _14 = pcb->local_ip.u_addr.ip6.zone;
  if (_14 == 0)
    goto <bb 32>; [INV]
  else
    goto <bb 42>; [INV]

  <bb 32> :
  _15 = pcb->local_ip.u_addr.ip6.addr[0];
  _16 = _15 & 49407;
  if (_16 == 33022)
    goto <bb 35>; [INV]
  else
    goto <bb 33>; [INV]

  <bb 33> :
  _17 = pcb->local_ip.u_addr.ip6.addr[0];
  _18 = _17 & 36863;
  if (_18 == 511)
    goto <bb 35>; [INV]
  else
    goto <bb 34>; [INV]

  <bb 34> :
  _19 = pcb->local_ip.u_addr.ip6.addr[0];
  _20 = _19 & 36863;
  if (_20 == 767)
    goto <bb 35>; [INV]
  else
    goto <bb 42>; [INV]

  <bb 35> :
  _21 = &pcb->local_ip.u_addr.ip6;
  _22 = &pcb->local_ip.u_addr.ip6;
  selected_netif = ip6_route (_21, _22);
  if (selected_netif != 0B)
    goto <bb 36>; [INV]
  else
    goto <bb 42>; [INV]

  <bb 36> :
  _23 = pcb->local_ip.u_addr.ip6.addr[0];
  _24 = _23 & 49407;
  if (_24 == 33022)
    goto <bb 39>; [INV]
  else
    goto <bb 37>; [INV]

  <bb 37> :
  _25 = pcb->local_ip.u_addr.ip6.addr[0];
  _26 = _25 & 36863;
  if (_26 == 511)
    goto <bb 39>; [INV]
  else
    goto <bb 38>; [INV]

  <bb 38> :
  _27 = pcb->local_ip.u_addr.ip6.addr[0];
  _28 = _27 & 36863;
  if (_28 == 767)
    goto <bb 39>; [INV]
  else
    goto <bb 40>; [INV]

  <bb 39> :
  _29 = selected_netif->num;
  iftmp.12 = _29 + 1;
  goto <bb 41>; [INV]

  <bb 40> :
  iftmp.12 = 0;

  <bb 41> :
  pcb->local_ip.u_addr.ip6.zone = iftmp.12;

  <bb 42> :
  D.7521 = 0;

  <bb 43> :
<L44>:
  return D.7521;

}


raw_input (struct pbuf * p, struct netif * inp)
{
  void * old_payload;
  u8_t eaten;
  struct ip6_hdr * ip6hdr;
  u8_t broadcast;
  raw_input_state_t ret;
  s16_t proto;
  struct raw_pcb * prev;
  struct raw_pcb * pcb;
  raw_input_state_t D.7514;
  int iftmp.4;
  u8_t iftmp.3;

  <bb 2> :
  ret = 0;
  _1 = ip_data.current_iphdr_dest.type;
  if (_1 != 6)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _2 = ip_data.current_iphdr_dest.u_addr.ip4.addr;
  _3 = ip_data.current_netif;
  iftmp.3 = ip4_addr_isbroadcast_u32 (_2, _3);
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.3 = 0;

  <bb 5> :
  broadcast = iftmp.3;
  _4 = p->payload;
  _5 = MEM[(u8_t *)_4];
  _6 = _5 >> 4;
  if (_6 == 6)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  ip6hdr = p->payload;
  _7 = ip6hdr->_nexth;
  proto = (s16_t) _7;
  goto <bb 8>; [INV]

  <bb 7> :
  _8 = p->payload;
  _9 = MEM[(struct ip_hdr *)_8]._proto;
  proto = (s16_t) _9;

  <bb 8> :
  prev = 0B;
  pcb = raw_pcbs;
  goto <bb 31>; [INV]

  <bb 9> :
  _10 = pcb->protocol;
  _11 = (int) _10;
  _12 = (int) proto;
  if (_11 == _12)
    goto <bb 10>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 10> :
  _13 = raw_input_local_match (pcb, broadcast);
  if (_13 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 11> :
  _14 = pcb->flags;
  _15 = (unsigned int) _14;
  _16 = _15 & 1;
  if (_16 == 0)
    goto <bb 23>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  _17 = pcb->remote_ip.type;
  _18 = ip_data.current_iphdr_src.type;
  if (_17 == _18)
    goto <bb 13>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 13> :
  _19 = pcb->remote_ip.type;
  if (_19 == 6)
    goto <bb 14>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 14> :
  _20 = pcb->remote_ip.u_addr.ip6.addr[0];
  _21 = ip_data.current_iphdr_src.u_addr.ip6.addr[0];
  if (_20 == _21)
    goto <bb 15>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 15> :
  _22 = pcb->remote_ip.u_addr.ip6.addr[1];
  _23 = ip_data.current_iphdr_src.u_addr.ip6.addr[1];
  if (_22 == _23)
    goto <bb 16>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 16> :
  _24 = pcb->remote_ip.u_addr.ip6.addr[2];
  _25 = ip_data.current_iphdr_src.u_addr.ip6.addr[2];
  if (_24 == _25)
    goto <bb 17>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 17> :
  _26 = pcb->remote_ip.u_addr.ip6.addr[3];
  _27 = ip_data.current_iphdr_src.u_addr.ip6.addr[3];
  if (_26 == _27)
    goto <bb 18>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 18> :
  _28 = pcb->remote_ip.u_addr.ip6.zone;
  _29 = ip_data.current_iphdr_src.u_addr.ip6.zone;
  if (_28 == _29)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  iftmp.4 = 1;
  goto <bb 21>; [INV]

  <bb 20> :
  iftmp.4 = 0;

  <bb 21> :
  _30 = (_Bool) iftmp.4;
  if (_30 != 0)
    goto <bb 23>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 22> :
  _31 = pcb->remote_ip.u_addr.ip4.addr;
  _32 = ip_data.current_iphdr_src.u_addr.ip4.addr;
  if (_31 == _32)
    goto <bb 23>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 23> :
  _33 = pcb->recv;
  if (_33 != 0B)
    goto <bb 24>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 24> :
  old_payload = p->payload;
  ret = 2;
  _34 = pcb->recv;
  _35 = pcb->recv_arg;
  eaten = _34 (_35, pcb, p, &ip_data.current_iphdr_src);
  if (eaten != 0)
    goto <bb 25>; [INV]
  else
    goto <bb 28>; [INV]

  <bb 25> :
  p = 0B;
  if (prev != 0B)
    goto <bb 26>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 26> :
  _36 = pcb->next;
  prev->next = _36;
  raw_pcbs.5_37 = raw_pcbs;
  pcb->next = raw_pcbs.5_37;
  raw_pcbs = pcb;

  <bb 27> :
  D.7514 = 1;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 33>; [INV]

  <bb 28> :
  _38 = p->payload;
  if (old_payload != _38)
    goto <bb 29>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 29> :
  __asm__ __volatile__("BKPT #0
	");
  goto <bb 29>; [INV]

  <bb 30> :
  prev = pcb;
  pcb = pcb->next;

  <bb 31> :
  if (pcb != 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 32>; [INV]

  <bb 32> :
  D.7514 = ret;

  <bb 33> :
<L36>:
  return D.7514;

}


raw_input_local_match (struct raw_pcb * pcb, u8_t broadcast)
{
  int iftmp.2;
  int iftmp.1;
  int iftmp.0;
  u8_t D.7433;

  <bb 2> :
  _1 = pcb->netif_idx;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _2 = pcb->netif_idx;
  _3 = ip_data.current_input_netif;
  _4 = _3->num;
  _5 = _4 + 1;
  if (_2 != _5)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  D.7433 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 43>; [INV]

  <bb 5> :
  _6 = pcb->local_ip.type;
  if (_6 == 46)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  D.7433 = 1;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 43>; [INV]

  <bb 7> :
  _7 = pcb->local_ip.type;
  _8 = ip_data.current_iphdr_dest.type;
  if (_7 == _8)
    goto <bb 8>; [INV]
  else
    goto <bb 42>; [INV]

  <bb 8> :
  if (broadcast != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 9> :
  _9 = &pcb->local_ip.u_addr.ip4;
  if (_9 == 0B)
    goto <bb 11>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  _10 = pcb->local_ip.u_addr.ip4.addr;
  if (_10 == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 42>; [INV]

  <bb 11> :
  D.7433 = 1;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 43>; [INV]

  <bb 12> :
  _11 = &pcb->local_ip;
  if (_11 != 0B)
    goto <bb 13>; [INV]
  else
    goto <bb 41>; [INV]

  <bb 13> :
  _12 = &pcb->local_ip;
  if (_12 != 0B)
    goto <bb 14>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 14> :
  _13 = pcb->local_ip.type;
  if (_13 == 6)
    goto <bb 15>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 15> :
  _14 = &pcb->local_ip.u_addr.ip6;
  if (_14 == 0B)
    goto <bb 20>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 16> :
  _15 = pcb->local_ip.u_addr.ip6.addr[0];
  if (_15 == 0)
    goto <bb 17>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 17> :
  _16 = pcb->local_ip.u_addr.ip6.addr[1];
  if (_16 == 0)
    goto <bb 18>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 18> :
  _17 = pcb->local_ip.u_addr.ip6.addr[2];
  if (_17 == 0)
    goto <bb 19>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 19> :
  _18 = pcb->local_ip.u_addr.ip6.addr[3];
  if (_18 == 0)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  iftmp.0 = 1;
  goto <bb 22>; [INV]

  <bb 21> :
  iftmp.0 = 0;

  <bb 22> :
  _19 = (_Bool) iftmp.0;
  if (_19 != 0)
    goto <bb 41>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 23> :
  goto <bb 29>; [INV]

  <bb 24> :
  _20 = &pcb->local_ip.u_addr.ip4;
  if (_20 == 0B)
    goto <bb 26>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 25> :
  _21 = pcb->local_ip.u_addr.ip4.addr;
  if (_21 == 0)
    goto <bb 26>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 26> :
  iftmp.1 = 1;
  goto <bb 28>; [INV]

  <bb 27> :
  iftmp.1 = 0;

  <bb 28> :
  _22 = (_Bool) iftmp.1;
  if (_22 != 0)
    goto <bb 41>; [INV]
  else
    goto <bb 29>; [INV]

  <bb 29> :

  <bb 30> :
  _23 = pcb->local_ip.type;
  _24 = ip_data.current_iphdr_dest.type;
  if (_23 == _24)
    goto <bb 31>; [INV]
  else
    goto <bb 42>; [INV]

  <bb 31> :
  _25 = pcb->local_ip.type;
  if (_25 == 6)
    goto <bb 32>; [INV]
  else
    goto <bb 40>; [INV]

  <bb 32> :
  _26 = pcb->local_ip.u_addr.ip6.addr[0];
  _27 = ip_data.current_iphdr_dest.u_addr.ip6.addr[0];
  if (_26 == _27)
    goto <bb 33>; [INV]
  else
    goto <bb 38>; [INV]

  <bb 33> :
  _28 = pcb->local_ip.u_addr.ip6.addr[1];
  _29 = ip_data.current_iphdr_dest.u_addr.ip6.addr[1];
  if (_28 == _29)
    goto <bb 34>; [INV]
  else
    goto <bb 38>; [INV]

  <bb 34> :
  _30 = pcb->local_ip.u_addr.ip6.addr[2];
  _31 = ip_data.current_iphdr_dest.u_addr.ip6.addr[2];
  if (_30 == _31)
    goto <bb 35>; [INV]
  else
    goto <bb 38>; [INV]

  <bb 35> :
  _32 = pcb->local_ip.u_addr.ip6.addr[3];
  _33 = ip_data.current_iphdr_dest.u_addr.ip6.addr[3];
  if (_32 == _33)
    goto <bb 36>; [INV]
  else
    goto <bb 38>; [INV]

  <bb 36> :
  _34 = pcb->local_ip.u_addr.ip6.zone;
  _35 = ip_data.current_iphdr_dest.u_addr.ip6.zone;
  if (_34 == _35)
    goto <bb 37>; [INV]
  else
    goto <bb 38>; [INV]

  <bb 37> :
  iftmp.2 = 1;
  goto <bb 39>; [INV]

  <bb 38> :
  iftmp.2 = 0;

  <bb 39> :
  _36 = (_Bool) iftmp.2;
  if (_36 != 0)
    goto <bb 41>; [INV]
  else
    goto <bb 42>; [INV]

  <bb 40> :
  _37 = pcb->local_ip.u_addr.ip4.addr;
  _38 = ip_data.current_iphdr_dest.u_addr.ip4.addr;
  if (_37 == _38)
    goto <bb 41>; [INV]
  else
    goto <bb 42>; [INV]

  <bb 41> :
  D.7433 = 1;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 43>; [INV]

  <bb 42> :
  D.7433 = 0;

  <bb 43> :
<L48>:
  return D.7433;

}


