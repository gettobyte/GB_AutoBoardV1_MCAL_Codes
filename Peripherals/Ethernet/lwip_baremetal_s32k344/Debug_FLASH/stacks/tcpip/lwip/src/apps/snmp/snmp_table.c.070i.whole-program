
Marking local functions:


Marking externally visible functions: snmp_table_extract_value_from_refconstptr/7 snmp_table_extract_value_from_u32ref/6 snmp_table_extract_value_from_s32ref/5 snmp_table_simple_get_next_instance/4 snmp_table_simple_get_instance/3 snmp_table_get_next_instance/2 snmp_table_get_instance/1


Marking externally visible variables:


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

memcpy/10 (memcpy) @06ce92a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: snmp_table_extract_value_from_refconstptr/7 
  Calls: 
snmp_oid_append/9 (snmp_oid_append) @06c94b60
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: snmp_table_simple_get_next_instance/4 snmp_table_get_next_instance/2 
  Calls: 
snmp_oid_assign/8 (snmp_oid_assign) @06c94a80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: snmp_table_simple_get_next_instance/4 snmp_table_get_next_instance/2 
  Calls: 
snmp_table_extract_value_from_refconstptr/7 (snmp_table_extract_value_from_refconstptr) @06c94380
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  Address is taken.
  References: 
  Referring: snmp_table_simple_get_instance/3 (addr) snmp_table_simple_get_next_instance/4 (addr) 
  Availability: available
  Function flags: body
  Called by: 
  Calls: memcpy/10 
snmp_table_extract_value_from_u32ref/6 (snmp_table_extract_value_from_u32ref) @06c94000
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  Address is taken.
  References: 
  Referring: snmp_table_simple_get_instance/3 (addr) snmp_table_simple_get_next_instance/4 (addr) 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
snmp_table_extract_value_from_s32ref/5 (snmp_table_extract_value_from_s32ref) @06c7e7e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  Address is taken.
  References: 
  Referring: snmp_table_simple_get_instance/3 (addr) snmp_table_simple_get_next_instance/4 (addr) 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
snmp_table_simple_get_next_instance/4 (snmp_table_simple_get_next_instance) @06c7e2a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: snmp_table_extract_value_from_u32ref/6 (addr) snmp_table_extract_value_from_s32ref/5 (addr) snmp_table_extract_value_from_refconstptr/7 (addr) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: snmp_oid_append/9 snmp_oid_assign/8 
   Indirect call Num speculative call targets: 0
snmp_table_simple_get_instance/3 (snmp_table_simple_get_instance) @06c7e700
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: snmp_table_extract_value_from_u32ref/6 (addr) snmp_table_extract_value_from_s32ref/5 (addr) snmp_table_extract_value_from_refconstptr/7 (addr) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call Num speculative call targets: 0
snmp_table_get_next_instance/2 (snmp_table_get_next_instance) @06c7e460
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: snmp_oid_append/9 snmp_oid_assign/8 
   Indirect call Num speculative call targets: 0
snmp_table_get_instance/1 (snmp_table_get_instance) @06c7e0e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call Num speculative call targets: 0
snmp_table_extract_value_from_refconstptr (struct snmp_node_instance * instance, void * value)
{
  s16_t D.7036;
  const void * _1;
  long unsigned int _2;
  long unsigned int _3;
  s16_t _8;

  <bb 2> :
  _1 = instance_5(D)->reference.const_ptr;
  _2 = instance_5(D)->reference_len;
  memcpy (value_6(D), _1, _2);
  _3 = instance_5(D)->reference_len;
  _8 = (s16_t) _3;

  <bb 3> :
<L0>:
  return _8;

}


snmp_table_extract_value_from_u32ref (struct snmp_node_instance * instance, void * value)
{
  u32_t * dst;
  s16_t D.7034;
  long unsigned int _1;
  s16_t _7;

  <bb 2> :
  dst_3 = value_2(D);
  _1 = instance_5(D)->reference.u32;
  *dst_3 = _1;
  _7 = 4;

  <bb 3> :
<L0>:
  return _7;

}


snmp_table_extract_value_from_s32ref (struct snmp_node_instance * instance, void * value)
{
  s32_t * dst;
  s16_t D.7032;
  long int _1;
  s16_t _7;

  <bb 2> :
  dst_3 = value_2(D);
  _1 = instance_5(D)->reference.s32;
  *dst_3 = _1;
  _7 = 4;

  <bb 3> :
<L0>:
  return _7;

}


snmp_table_simple_get_next_instance (const u32_t * root_oid, u8_t root_oid_len, struct snmp_node_instance * instance)
{
  const struct snmp_table_simple_col_def * next_col_def;
  u32_t i;
  snmp_err_t result;
  u32_t column;
  struct snmp_obj_id row_oid;
  const struct snmp_table_simple_col_def * col_def;
  const struct snmp_table_simple_node * table_node;
  snmp_err_t D.7013;
  unsigned char _1;
  long unsigned int _2;
  unsigned char _3;
  unsigned char _4;
  u32_t * _5;
  unsigned char _6;
  unsigned char _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  short unsigned int _12;
  long unsigned int _13;
  snmp_err_t (*<T6e3>) (const u32_t *, struct snmp_obj_id *, union snmp_variant_value *, u32_t *) _14;
  const u32_t * _15;
  union snmp_variant_value * _16;
  u32_t * _17;
  long unsigned int _18;
  unsigned char _19;
  <unnamed type> _20;
  long unsigned int _21;
  struct snmp_obj_id * _22;
  unsigned char _23;
  snmp_err_t _31;
  snmp_err_t _39;
  snmp_err_t _66;
  snmp_err_t _67;
  snmp_err_t _68;

  <bb 2> :
  table_node_37 = instance_36(D)->node;
  column_38 = 0;
  _1 = instance_36(D)->instance_oid.len;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _2 = instance_36(D)->instance_oid.id[0];
  if (_2 > 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _39 = 241;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 30>; [INV]

  <bb 5> :
  _3 = instance_36(D)->instance_oid.len;
  if (_3 > 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  column_40 = instance_36(D)->instance_oid.id[1];

  <bb 7> :
  # column_25 = PHI <column_38(5), column_40(6)>
  _4 = instance_36(D)->instance_oid.len;
  if (_4 > 2)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  _5 = &instance_36(D)->instance_oid.id[2];
  _6 = instance_36(D)->instance_oid.len;
  _7 = _6 + 254;
  snmp_oid_assign (&row_oid, _5, _7);
  goto <bb 10>; [INV]

  <bb 9> :
  row_oid.len = 0;

  <bb 10> :
  # column_26 = PHI <column_25(8), column_25(9), column_53(23)>
  next_col_def_43 = 0B;
  col_def_44 = table_node_37->columns;
  i_45 = 0;
  goto <bb 18>; [INV]

  <bb 11> :
  _8 = col_def_24->index;
  if (column_26 == _8)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  next_col_def_49 = col_def_24;
  goto <bb 19>; [INV]

  <bb 13> :
  _9 = col_def_24->index;
  if (column_26 < _9)
    goto <bb 14>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 14> :
  if (next_col_def_29 == 0B)
    goto <bb 16>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  _10 = col_def_24->index;
  _11 = next_col_def_29->index;
  if (_10 < _11)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  next_col_def_46 = col_def_24;

  <bb 17> :
  # next_col_def_28 = PHI <next_col_def_29(13), next_col_def_29(15), next_col_def_46(16)>
  col_def_47 = col_def_24 + 12;
  i_48 = i_27 + 1;

  <bb 18> :
  # col_def_24 = PHI <col_def_44(10), col_def_47(17)>
  # i_27 = PHI <i_45(10), i_48(17)>
  # next_col_def_29 = PHI <next_col_def_43(10), next_col_def_28(17)>
  _12 = table_node_37->column_count;
  _13 = (long unsigned int) _12;
  if (i_27 < _13)
    goto <bb 11>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 19> :
  # next_col_def_30 = PHI <next_col_def_49(12), next_col_def_29(18)>
  if (next_col_def_30 == 0B)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  _68 = 241;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 30>; [INV]

  <bb 21> :
  _14 = table_node_37->get_next_cell_instance_and_value;
  _15 = &next_col_def_30->index;
  _16 = &instance_36(D)->reference;
  _17 = &instance_36(D)->reference_len;
  result_51 = _14 (_15, &row_oid, _16, _17);
  if (result_51 == 0)
    goto <bb 22>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 22> :
  col_def_54 = next_col_def_30;
  goto <bb 24>; [INV]

  <bb 23> :
  row_oid.len = 0;
  _18 = next_col_def_30->index;
  column_53 = _18 + 1;
  goto <bb 10>; [INV]

  <bb 24> :
  _19 = col_def_54->asn1_type;
  instance_36(D)->asn1_type = _19;
  instance_36(D)->access = 1;
  instance_36(D)->set_test = 0B;
  instance_36(D)->set_value = 0B;
  _20 = col_def_54->data_type;
  switch (_20) <default: <L29> [INV], case 0: <L25> [INV], case 1: <L26> [INV], case 2 ... 3: <L27> [INV]>

  <bb 25> :
<L25>:
  instance_36(D)->get_value = snmp_table_extract_value_from_u32ref;
  goto <bb 29>; [INV]

  <bb 26> :
<L26>:
  instance_36(D)->get_value = snmp_table_extract_value_from_s32ref;
  goto <bb 29>; [INV]

  <bb 27> :
<L27>:
  instance_36(D)->get_value = snmp_table_extract_value_from_refconstptr;
  goto <bb 29>; [INV]

  <bb 28> :
<L29>:
  _67 = 5;
  goto <bb 30>; [INV]

  <bb 29> :
  instance_36(D)->instance_oid.len = 2;
  instance_36(D)->instance_oid.id[0] = 1;
  _21 = col_def_54->index;
  instance_36(D)->instance_oid.id[1] = _21;
  _22 = &instance_36(D)->instance_oid;
  _23 = row_oid.len;
  snmp_oid_append (_22, &row_oid.id, _23);
  _66 = 0;

  <bb 30> :
  # _31 = PHI <_39(4), _68(20), _67(28), _66(29)>
  row_oid ={v} {CLOBBER};

  <bb 31> :
<L32>:
  return _31;

}


snmp_table_simple_get_instance (const u32_t * root_oid, u8_t root_oid_len, struct snmp_node_instance * instance)
{
  u32_t i;
  const struct snmp_table_simple_col_def * col_def;
  const struct snmp_table_simple_node * table_node;
  snmp_err_t ret;
  snmp_err_t D.7006;
  unsigned char _1;
  long unsigned int _2;
  snmp_err_t (*<T6df>) (const u32_t *, const u32_t *, u8_t, union snmp_variant_value *, u32_t *) _3;
  u32_t * _4;
  u32_t * _5;
  unsigned char _6;
  unsigned char _7;
  union snmp_variant_value * _8;
  u32_t * _9;
  short unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  unsigned char _13;
  <unnamed type> _14;
  snmp_err_t _18;
  snmp_err_t _41;
  snmp_err_t _42;

  <bb 2> :
  ret_22 = 241;
  table_node_25 = instance_24(D)->node;
  _1 = instance_24(D)->instance_oid.len;
  if (_1 > 2)
    goto <bb 3>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 3> :
  _2 = instance_24(D)->instance_oid.id[0];
  if (_2 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 4> :
  _3 = table_node_25->get_cell_value;
  _4 = &instance_24(D)->instance_oid.id[1];
  _5 = &instance_24(D)->instance_oid.id[2];
  _6 = instance_24(D)->instance_oid.len;
  _7 = _6 + 254;
  _8 = &instance_24(D)->reference;
  _9 = &instance_24(D)->reference_len;
  ret_27 = _3 (_4, _5, _7, _8, _9);
  if (ret_27 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 5> :
  col_def_28 = table_node_25->columns;
  _10 = table_node_25->column_count;
  i_29 = (u32_t) _10;
  goto <bb 9>; [INV]

  <bb 6> :
  _11 = col_def_16->index;
  _12 = instance_24(D)->instance_oid.id[1];
  if (_11 == _12)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  goto <bb 10>; [INV]

  <bb 8> :
  col_def_30 = col_def_16 + 12;
  i_31 = i_17 + 4294967295;

  <bb 9> :
  # col_def_16 = PHI <col_def_28(5), col_def_30(8)>
  # i_17 = PHI <i_29(5), i_31(8)>
  if (i_17 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  if (i_17 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 11> :
  _13 = col_def_16->asn1_type;
  instance_24(D)->asn1_type = _13;
  instance_24(D)->access = 1;
  instance_24(D)->set_test = 0B;
  instance_24(D)->set_value = 0B;
  _14 = col_def_16->data_type;
  switch (_14) <default: <L13> [INV], case 0: <L9> [INV], case 1: <L10> [INV], case 2 ... 3: <L11> [INV]>

  <bb 12> :
<L9>:
  instance_24(D)->get_value = snmp_table_extract_value_from_u32ref;
  goto <bb 16>; [INV]

  <bb 13> :
<L10>:
  instance_24(D)->get_value = snmp_table_extract_value_from_s32ref;
  goto <bb 16>; [INV]

  <bb 14> :
<L11>:
  instance_24(D)->get_value = snmp_table_extract_value_from_refconstptr;
  goto <bb 16>; [INV]

  <bb 15> :
<L13>:
  _41 = 5;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 19>; [INV]

  <bb 16> :
  ret_40 = 0;
  goto <bb 18>; [INV]

  <bb 17> :
  ret_32 = 241;

  <bb 18> :
  # ret_15 = PHI <ret_22(2), ret_22(3), ret_27(4), ret_40(16), ret_32(17)>
  _42 = ret_15;

  <bb 19> :
  # _18 = PHI <_41(15), _42(18)>
<L20>:
  return _18;

}


snmp_table_get_next_instance (const u32_t * root_oid, u8_t root_oid_len, struct snmp_node_instance * instance)
{
  const struct snmp_table_col_def * next_col_def;
  u16_t i;
  snmp_err_t result;
  u32_t column;
  struct snmp_obj_id row_oid;
  const struct snmp_table_col_def * col_def;
  const struct snmp_table_node * table_node;
  snmp_err_t D.6977;
  unsigned char _1;
  long unsigned int _2;
  unsigned char _3;
  unsigned char _4;
  u32_t * _5;
  unsigned char _6;
  unsigned char _7;
  s16_t (*<T675>) (struct snmp_node_instance *, void *) _8;
  snmp_err_t (*<T67a>) (struct snmp_node_instance *, u16_t, void *) _9;
  snmp_err_t (*<T67a>) (struct snmp_node_instance *, u16_t, void *) _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  short unsigned int i.1_15;
  short unsigned int _16;
  unsigned char _17;
  <unnamed type> _18;
  snmp_err_t (*<T6d4>) (const u32_t *, struct snmp_obj_id *, struct snmp_node_instance *) _19;
  const u32_t * _20;
  long unsigned int _21;
  long unsigned int _22;
  struct snmp_obj_id * _23;
  unsigned char _24;
  snmp_err_t _32;
  snmp_err_t _40;
  snmp_err_t _65;
  snmp_err_t _66;

  <bb 2> :
  table_node_38 = instance_37(D)->node;
  column_39 = 0;
  _1 = instance_37(D)->instance_oid.len;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _2 = instance_37(D)->instance_oid.id[0];
  if (_2 > 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _40 = 241;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 26>; [INV]

  <bb 5> :
  _3 = instance_37(D)->instance_oid.len;
  if (_3 > 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  column_41 = instance_37(D)->instance_oid.id[1];

  <bb 7> :
  # column_26 = PHI <column_39(5), column_41(6)>
  _4 = instance_37(D)->instance_oid.len;
  if (_4 > 2)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  _5 = &instance_37(D)->instance_oid.id[2];
  _6 = instance_37(D)->instance_oid.len;
  _7 = _6 + 254;
  snmp_oid_assign (&row_oid, _5, _7);
  goto <bb 10>; [INV]

  <bb 9> :
  row_oid.len = 0;

  <bb 10> :
  _8 = table_node_38->get_value;
  instance_37(D)->get_value = _8;
  _9 = table_node_38->set_test;
  instance_37(D)->set_test = _9;
  _10 = table_node_38->set_value;
  instance_37(D)->set_value = _10;

  <bb 11> :
  # column_27 = PHI <column_26(10), column_59(24)>
  next_col_def_47 = 0B;
  col_def_48 = table_node_38->columns;
  i_49 = 0;
  goto <bb 19>; [INV]

  <bb 12> :
  _11 = col_def_25->index;
  if (column_27 == _11)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  next_col_def_53 = col_def_25;
  goto <bb 20>; [INV]

  <bb 14> :
  _12 = col_def_25->index;
  if (column_27 < _12)
    goto <bb 15>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 15> :
  if (next_col_def_30 == 0B)
    goto <bb 17>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 16> :
  _13 = col_def_25->index;
  _14 = next_col_def_30->index;
  if (_13 < _14)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  next_col_def_50 = col_def_25;

  <bb 18> :
  # next_col_def_29 = PHI <next_col_def_30(14), next_col_def_30(16), next_col_def_50(17)>
  col_def_51 = col_def_25 + 12;
  i.1_15 = i_28;
  i_52 = i.1_15 + 1;

  <bb 19> :
  # col_def_25 = PHI <col_def_48(11), col_def_51(18)>
  # i_28 = PHI <i_49(11), i_52(18)>
  # next_col_def_30 = PHI <next_col_def_47(11), next_col_def_29(18)>
  _16 = table_node_38->column_count;
  if (i_28 < _16)
    goto <bb 12>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 20> :
  # next_col_def_31 = PHI <next_col_def_53(13), next_col_def_30(19)>
  if (next_col_def_31 == 0B)
    goto <bb 21>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 21> :
  _66 = 241;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 26>; [INV]

  <bb 22> :
  _17 = next_col_def_31->asn1_type;
  instance_37(D)->asn1_type = _17;
  _18 = next_col_def_31->access;
  instance_37(D)->access = _18;
  _19 = table_node_38->get_next_cell_instance;
  _20 = &next_col_def_31->index;
  result_57 = _19 (_20, &row_oid, instance_37(D));
  if (result_57 == 0)
    goto <bb 23>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 23> :
  col_def_60 = next_col_def_31;
  goto <bb 25>; [INV]

  <bb 24> :
  row_oid.len = 0;
  _21 = next_col_def_31->index;
  column_59 = _21 + 1;
  goto <bb 11>; [INV]

  <bb 25> :
  instance_37(D)->instance_oid.len = 2;
  instance_37(D)->instance_oid.id[0] = 1;
  _22 = col_def_60->index;
  instance_37(D)->instance_oid.id[1] = _22;
  _23 = &instance_37(D)->instance_oid;
  _24 = row_oid.len;
  snmp_oid_append (_23, &row_oid.id, _24);
  _65 = 0;

  <bb 26> :
  # _32 = PHI <_40(4), _66(21), _65(25)>
  row_oid ={v} {CLOBBER};

  <bb 27> :
<L26>:
  return _32;

}


snmp_table_get_instance (const u32_t * root_oid, u8_t root_oid_len, struct snmp_node_instance * instance)
{
  u16_t i;
  const struct snmp_table_col_def * col_def;
  const struct snmp_table_node * table_node;
  snmp_err_t ret;
  snmp_err_t D.6971;
  unsigned char _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  short unsigned int i.0_5;
  unsigned char _6;
  <unnamed type> _7;
  s16_t (*<T675>) (struct snmp_node_instance *, void *) _8;
  snmp_err_t (*<T67a>) (struct snmp_node_instance *, u16_t, void *) _9;
  snmp_err_t (*<T67a>) (struct snmp_node_instance *, u16_t, void *) _10;
  snmp_err_t (*<T6d0>) (const u32_t *, const u32_t *, u8_t, struct snmp_node_instance *) _11;
  u32_t * _12;
  u32_t * _13;
  unsigned char _14;
  unsigned char _15;
  snmp_err_t _35;

  <bb 2> :
  ret_20 = 241;
  table_node_23 = instance_22(D)->node;
  _1 = instance_22(D)->instance_oid.len;
  if (_1 > 2)
    goto <bb 3>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 3> :
  _2 = instance_22(D)->instance_oid.id[0];
  if (_2 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 4> :
  col_def_24 = table_node_23->columns;
  i_25 = table_node_23->column_count;
  goto <bb 8>; [INV]

  <bb 5> :
  _3 = col_def_17->index;
  _4 = instance_22(D)->instance_oid.id[1];
  if (_3 == _4)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  goto <bb 9>; [INV]

  <bb 7> :
  col_def_26 = col_def_17 + 12;
  i.0_5 = i_18;
  i_27 = i.0_5 + 65535;

  <bb 8> :
  # col_def_17 = PHI <col_def_24(4), col_def_26(7)>
  # i_18 = PHI <i_25(4), i_27(7)>
  if (i_18 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  if (i_18 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  _6 = col_def_17->asn1_type;
  instance_22(D)->asn1_type = _6;
  _7 = col_def_17->access;
  instance_22(D)->access = _7;
  _8 = table_node_23->get_value;
  instance_22(D)->get_value = _8;
  _9 = table_node_23->set_test;
  instance_22(D)->set_test = _9;
  _10 = table_node_23->set_value;
  instance_22(D)->set_value = _10;
  _11 = table_node_23->get_cell_instance;
  _12 = &instance_22(D)->instance_oid.id[1];
  _13 = &instance_22(D)->instance_oid.id[2];
  _14 = instance_22(D)->instance_oid.len;
  _15 = _14 + 254;
  ret_34 = _11 (_12, _13, _15, instance_22(D));

  <bb 11> :
  # ret_16 = PHI <ret_20(2), ret_20(3), ret_20(9), ret_34(10)>
  _35 = ret_16;

  <bb 12> :
<L11>:
  return _35;

}


