
Marking local functions:


Marking externally visible functions: mld6_tmr/11 mld6_leavegroup_netif/10 mld6_leavegroup/9 mld6_joingroup_netif/8 mld6_joingroup/7 mld6_input/6 mld6_lookfor_group/3 mld6_report_groups/2 mld6_stop/1


Marking externally visible variables:


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

ip6_output_if/28 (ip6_output_if) @06cf4a80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: mld6_send/13 
  Calls: 
ip6_options_add_hbh_ra/27 (ip6_options_add_hbh_ra) @06cf49a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: mld6_send/13 
  Calls: 
ip6_chksum_pseudo/26 (ip6_chksum_pseudo) @06cf48c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: mld6_send/13 
  Calls: 
ip6_addr_any/25 (ip6_addr_any) @06d03240
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: mld6_send/13 (addr) 
  Availability: not_available
  Varpool flags: read-only
pbuf_remove_header/24 (pbuf_remove_header) @06cf4700
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: mld6_send/13 
  Calls: 
pbuf_alloc/23 (pbuf_alloc) @06cf4620
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: mld6_send/13 
  Calls: 
rand/22 (rand) @06cf4460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: mld6_delayed_report/12 
  Calls: 
netif_get_ip6_addr_match/21 (netif_get_ip6_addr_match) @06c88c40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: mld6_leavegroup/9 mld6_joingroup/7 
  Calls: 
netif_list/20 (netif_list) @06ceb168
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: mld6_joingroup/7 (read) mld6_leavegroup/9 (read) mld6_tmr/11 (read) 
  Availability: not_available
  Varpool flags:
lwip_htons/19 (lwip_htons) @06c88a80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: mld6_input/6 mld6_input/6 
  Calls: 
ip_data/18 (ip_data) @06ce2ab0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: mld6_input/6 (read) mld6_input/6 (read) mld6_input/6 (read) mld6_input/6 (read) mld6_input/6 (addr) mld6_input/6 (addr) 
  Availability: not_available
  Varpool flags:
pbuf_free/17 (pbuf_free) @06c888c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: mld6_send/13 mld6_send/13 mld6_input/6 mld6_input/6 
  Calls: 
lwip_stats/16 (lwip_stats) @06ce2a20
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: mld6_input/6 (read) mld6_input/6 (write) mld6_input/6 (read) mld6_input/6 (write) mld6_input/6 (read) mld6_input/6 (write) mld6_input/6 (read) mld6_input/6 (write) mld6_input/6 (read) mld6_input/6 (write) mld6_input/6 (read) mld6_input/6 (write) mld6_input/6 (read) mld6_input/6 (write) mld6_input/6 (read) mld6_input/6 (write) mld6_joingroup_netif/8 (read) mld6_joingroup_netif/8 (write) mld6_leavegroup_netif/10 (read) mld6_leavegroup_netif/10 (write) mld6_tmr/11 (read) mld6_tmr/11 (write) mld6_send/13 (read) mld6_send/13 (write) mld6_send/13 (read) mld6_send/13 (write) mld6_send/13 (read) mld6_send/13 (write) 
  Availability: not_available
  Varpool flags:
memp_malloc/15 (memp_malloc) @06c88460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: mld6_new_group/4 
  Calls: 
memp_free/14 (memp_free) @06c880e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: mld6_leavegroup_netif/10 mld6_stop/1 
  Calls: 
mld6_send/13 (mld6_send) @06c77ee0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: lwip_stats/16 (read) lwip_stats/16 (write) lwip_stats/16 (read) lwip_stats/16 (write) ip6_addr_any/25 (addr) lwip_stats/16 (read) lwip_stats/16 (write) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: mld6_tmr/11 mld6_leavegroup_netif/10 mld6_joingroup_netif/8 
  Calls: pbuf_free/17 ip6_output_if/28 ip6_options_add_hbh_ra/27 ip6_chksum_pseudo/26 pbuf_free/17 pbuf_remove_header/24 pbuf_alloc/23 
mld6_delayed_report/12 (mld6_delayed_report) @06c778c0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: mld6_joingroup_netif/8 mld6_input/6 mld6_input/6 mld6_report_groups/2 
  Calls: rand/22 
mld6_tmr/11 (mld6_tmr) @06c77620
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: netif_list/20 (read) lwip_stats/16 (read) lwip_stats/16 (write) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: mld6_send/13 
mld6_leavegroup_netif/10 (mld6_leavegroup_netif) @06c77380
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: lwip_stats/16 (read) lwip_stats/16 (write) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: mld6_leavegroup/9 
  Calls: memp_free/14 mld6_send/13 mld6_remove_group/5 mld6_lookfor_group/3 
   Indirect call Num speculative call targets: 0
mld6_leavegroup/9 (mld6_leavegroup) @06c5c8c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: netif_list/20 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: mld6_leavegroup_netif/10 netif_get_ip6_addr_match/21 
mld6_joingroup_netif/8 (mld6_joingroup_netif) @06c5ce00
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: lwip_stats/16 (read) lwip_stats/16 (write) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: mld6_joingroup/7 
  Calls: mld6_delayed_report/12 mld6_send/13 mld6_new_group/4 mld6_lookfor_group/3 
   Indirect call Num speculative call targets: 0
mld6_joingroup/7 (mld6_joingroup) @06c5c7e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: netif_list/20 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: mld6_joingroup_netif/8 netif_get_ip6_addr_match/21 
mld6_input/6 (mld6_input) @06c5c460
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: lwip_stats/16 (read) lwip_stats/16 (write) lwip_stats/16 (read) lwip_stats/16 (write) lwip_stats/16 (read) lwip_stats/16 (write) ip_data/18 (read) ip_data/18 (read) ip_data/18 (read) ip_data/18 (read) lwip_stats/16 (read) lwip_stats/16 (write) lwip_stats/16 (read) lwip_stats/16 (write) ip_data/18 (addr) lwip_stats/16 (read) lwip_stats/16 (write) ip_data/18 (addr) lwip_stats/16 (read) lwip_stats/16 (write) lwip_stats/16 (read) lwip_stats/16 (write) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: pbuf_free/17 mld6_lookfor_group/3 mld6_delayed_report/12 lwip_htons/19 mld6_lookfor_group/3 mld6_delayed_report/12 lwip_htons/19 pbuf_free/17 
mld6_remove_group/5 (mld6_remove_group) @06c4fe00
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: mld6_leavegroup_netif/10 
  Calls: 
mld6_new_group/4 (mld6_new_group) @06c4f540
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: mld6_joingroup_netif/8 
  Calls: memp_malloc/15 
mld6_lookfor_group/3 (mld6_lookfor_group) @06c4fd20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: mld6_leavegroup_netif/10 mld6_joingroup_netif/8 mld6_input/6 mld6_input/6 
  Calls: 
mld6_report_groups/2 (mld6_report_groups) @06c4fa80
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: mld6_delayed_report/12 
mld6_stop/1 (mld6_stop) @06c4f7e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: memp_free/14 
   Indirect call Num speculative call targets: 0
mld6_send (struct netif * netif, struct mld_group * group, u8_t type)
{
  const struct ip6_addr_t * src_addr;
  struct pbuf * p;
  struct mld_header * mld_hdr;
  const struct ip6_addr_t * iftmp.17;

  <bb 2> :
  p = pbuf_alloc (54, 32, 640);
  if (p == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 = lwip_stats.mld6.memerr;
  _2 = _1 + 1;
  lwip_stats.mld6.memerr = _2;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 19>; [INV]

  <bb 4> :
  _3 = pbuf_remove_header (p, 8);
  if (_3 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  pbuf_free (p);
  _4 = lwip_stats.mld6.lenerr;
  _5 = _4 + 1;
  lwip_stats.mld6.lenerr = _5;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 19>; [INV]

  <bb 6> :
  _6 = netif->ip6_addr_state[0];
  _7 = (int) _6;
  _8 = _7 & 16;
  if (_8 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  src_addr = &ip6_addr_any.u_addr.ip6;
  goto <bb 9>; [INV]

  <bb 8> :
  src_addr = &netif->ip6_addr[0].u_addr.ip6;

  <bb 9> :
  mld_hdr = p->payload;
  mld_hdr->type = type;
  mld_hdr->code = 0;
  mld_hdr->chksum = 0;
  mld_hdr->max_resp_delay = 0;
  mld_hdr->reserved = 0;
  _9 = group->group_address.addr[0];
  mld_hdr->multicast_address.addr[0] = _9;
  _10 = group->group_address.addr[1];
  mld_hdr->multicast_address.addr[1] = _10;
  _11 = group->group_address.addr[2];
  mld_hdr->multicast_address.addr[2] = _11;
  _12 = group->group_address.addr[3];
  mld_hdr->multicast_address.addr[3] = _12;
  _13 = p->len;
  _14 = &group->group_address;
  _15 = ip6_chksum_pseudo (p, 58, _13, src_addr, _14);
  mld_hdr->chksum = _15;
  ip6_options_add_hbh_ra (p, 58, 0);
  if (type == 131)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  group->last_reporter_flag = 1;

  <bb 11> :
  _16 = lwip_stats.mld6.xmit;
  _17 = _16 + 1;
  lwip_stats.mld6.xmit = _17;
  if (src_addr != 0B)
    goto <bb 12>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 12> :
  _18 = src_addr->addr[0];
  if (_18 != 0)
    goto <bb 16>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  _19 = src_addr->addr[1];
  if (_19 != 0)
    goto <bb 16>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 14> :
  _20 = src_addr->addr[2];
  if (_20 != 0)
    goto <bb 16>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  _21 = src_addr->addr[3];
  if (_21 != 0)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  iftmp.17 = src_addr;
  goto <bb 18>; [INV]

  <bb 17> :
  iftmp.17 = 0B;

  <bb 18> :
  _22 = &group->group_address;
  ip6_output_if (p, iftmp.17, _22, 1, 0, 0, netif);
  pbuf_free (p);

  <bb 19> :
<L16>:
  return;

}


mld6_delayed_report (struct mld_group * group, u16_t maxresp_in)
{
  u16_t maxresp;

  <bb 2> :
  maxresp = maxresp_in / 100;
  if (maxresp == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  maxresp = 1;

  <bb 4> :
  _1 = rand ();
  _2 = (long unsigned int) _1;
  _3 = (long unsigned int) maxresp;
  _4 = _2 % _3;
  maxresp = (u16_t) _4;
  if (maxresp == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  maxresp = 1;

  <bb 6> :
  _5 = group->group_state;
  if (_5 == 2)
    goto <bb 10>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _6 = group->group_state;
  if (_6 == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 8> :
  _7 = group->timer;
  if (_7 == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  _8 = group->timer;
  if (maxresp < _8)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  group->timer = maxresp;
  group->group_state = 1;

  <bb 11> :
  return;

}


mld6_tmr ()
{
  struct mld_group * group;
  struct netif * netif;

  <bb 2> :
  netif = netif_list;
  goto <bb 11>; [INV]

  <bb 3> :
  group = netif->client_data[1];
  goto <bb 9>; [INV]

  <bb 4> :
  _1 = group->timer;
  if (_1 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  _2 = group->timer;
  _3 = _2;
  _4 = _3 + 65535;
  group->timer = _4;
  _5 = group->timer;
  if (_5 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  _6 = group->group_state;
  if (_6 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _7 = lwip_stats.mld6.tx_report;
  _8 = _7 + 1;
  lwip_stats.mld6.tx_report = _8;
  mld6_send (netif, group, 131);
  group->group_state = 2;

  <bb 8> :
  group = group->next;

  <bb 9> :
  if (group != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  netif = netif->next;

  <bb 11> :
  if (netif != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  return;

}


mld6_leavegroup_netif (struct netif * netif, const struct ip6_addr_t * groupaddr)
{
  struct ip6_addr_t ip6addr;
  struct mld_group * group;
  err_t D.7678;
  u8_t iftmp.16;
  u8_t iftmp.15;
  const long unsigned int iftmp.14;
  const long unsigned int iftmp.13;
  const long unsigned int iftmp.12;
  const long unsigned int iftmp.11;

  <bb 2> :
  _1 = groupaddr->zone;
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 3> :
  _2 = groupaddr->addr[0];
  _3 = _2 & 49407;
  if (_3 == 33022)
    goto <bb 6>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  _4 = groupaddr->addr[0];
  _5 = _4 & 36863;
  if (_5 == 511)
    goto <bb 6>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  _6 = groupaddr->addr[0];
  _7 = _6 & 36863;
  if (_7 == 767)
    goto <bb 6>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 6> :
  if (groupaddr != 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  iftmp.11 = groupaddr->addr[0];
  goto <bb 9>; [INV]

  <bb 8> :
  iftmp.11 = 0;

  <bb 9> :
  ip6addr.addr[0] = iftmp.11;
  if (groupaddr != 0B)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  iftmp.12 = groupaddr->addr[1];
  goto <bb 12>; [INV]

  <bb 11> :
  iftmp.12 = 0;

  <bb 12> :
  ip6addr.addr[1] = iftmp.12;
  if (groupaddr != 0B)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  iftmp.13 = groupaddr->addr[2];
  goto <bb 15>; [INV]

  <bb 14> :
  iftmp.13 = 0;

  <bb 15> :
  ip6addr.addr[2] = iftmp.13;
  if (groupaddr != 0B)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  iftmp.14 = groupaddr->addr[3];
  goto <bb 18>; [INV]

  <bb 17> :
  iftmp.14 = 0;

  <bb 18> :
  ip6addr.addr[3] = iftmp.14;
  if (groupaddr != 0B)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  iftmp.15 = groupaddr->zone;
  goto <bb 21>; [INV]

  <bb 20> :
  iftmp.15 = 0;

  <bb 21> :
  ip6addr.zone = iftmp.15;
  _8 = ip6addr.addr[0];
  _9 = _8 & 49407;
  if (_9 == 33022)
    goto <bb 24>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 22> :
  _10 = ip6addr.addr[0];
  _11 = _10 & 36863;
  if (_11 == 511)
    goto <bb 24>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 23> :
  _12 = ip6addr.addr[0];
  _13 = _12 & 36863;
  if (_13 == 767)
    goto <bb 24>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 24> :
  _14 = netif->num;
  iftmp.16 = _14 + 1;
  goto <bb 26>; [INV]

  <bb 25> :
  iftmp.16 = 0;

  <bb 26> :
  ip6addr.zone = iftmp.16;
  groupaddr = &ip6addr;

  <bb 27> :
  group = mld6_lookfor_group (netif, groupaddr);
  if (group != 0B)
    goto <bb 28>; [INV]
  else
    goto <bb 36>; [INV]

  <bb 28> :
  _15 = group->use;
  if (_15 <= 1)
    goto <bb 29>; [INV]
  else
    goto <bb 34>; [INV]

  <bb 29> :
  mld6_remove_group (netif, group);
  _16 = group->last_reporter_flag;
  if (_16 != 0)
    goto <bb 30>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 30> :
  _17 = lwip_stats.mld6.tx_leave;
  _18 = _17 + 1;
  lwip_stats.mld6.tx_leave = _18;
  mld6_send (netif, group, 132);

  <bb 31> :
  _19 = netif->mld_mac_filter;
  if (_19 != 0B)
    goto <bb 32>; [INV]
  else
    goto <bb 33>; [INV]

  <bb 32> :
  _20 = netif->mld_mac_filter;
  _20 (netif, groupaddr, 0);

  <bb 33> :
  memp_free (12, group);
  goto <bb 35>; [INV]

  <bb 34> :
  _21 = group->use;
  _22 = _21;
  _23 = _22 + 255;
  group->use = _23;

  <bb 35> :
  D.7678 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 37>; [INV]

  <bb 36> :
  D.7678 = -6;

  <bb 37> :
  ip6addr = {CLOBBER};

  <bb 38> :
<L36>:
  return D.7678;

}


mld6_leavegroup (const struct ip6_addr_t * srcaddr, const struct ip6_addr_t * groupaddr)
{
  err_t res;
  struct netif * netif;
  err_t err;
  err_t D.7635;

  <bb 2> :
  err = -6;
  netif = netif_list;
  goto <bb 12>; [INV]

  <bb 3> :
  if (srcaddr == 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  _1 = srcaddr->addr[0];
  if (_1 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  _2 = srcaddr->addr[1];
  if (_2 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  _3 = srcaddr->addr[2];
  if (_3 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _4 = srcaddr->addr[3];
  if (_4 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  _5 = netif_get_ip6_addr_match (netif, srcaddr);
  if (_5 >= 0)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  res = mld6_leavegroup_netif (netif, groupaddr);
  if (err != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  err = res;

  <bb 11> :
  netif = netif->next;

  <bb 12> :
  if (netif != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  D.7635 = err;

  <bb 14> :
<L12>:
  return D.7635;

}


mld6_joingroup_netif (struct netif * netif, const struct ip6_addr_t * groupaddr)
{
  struct ip6_addr_t ip6addr;
  struct mld_group * group;
  err_t D.7621;
  u8_t iftmp.10;
  u8_t iftmp.9;
  const long unsigned int iftmp.8;
  const long unsigned int iftmp.7;
  const long unsigned int iftmp.6;
  const long unsigned int iftmp.5;

  <bb 2> :
  _1 = groupaddr->zone;
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 3> :
  _2 = groupaddr->addr[0];
  _3 = _2 & 49407;
  if (_3 == 33022)
    goto <bb 6>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  _4 = groupaddr->addr[0];
  _5 = _4 & 36863;
  if (_5 == 511)
    goto <bb 6>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  _6 = groupaddr->addr[0];
  _7 = _6 & 36863;
  if (_7 == 767)
    goto <bb 6>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 6> :
  if (groupaddr != 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  iftmp.5 = groupaddr->addr[0];
  goto <bb 9>; [INV]

  <bb 8> :
  iftmp.5 = 0;

  <bb 9> :
  ip6addr.addr[0] = iftmp.5;
  if (groupaddr != 0B)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  iftmp.6 = groupaddr->addr[1];
  goto <bb 12>; [INV]

  <bb 11> :
  iftmp.6 = 0;

  <bb 12> :
  ip6addr.addr[1] = iftmp.6;
  if (groupaddr != 0B)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  iftmp.7 = groupaddr->addr[2];
  goto <bb 15>; [INV]

  <bb 14> :
  iftmp.7 = 0;

  <bb 15> :
  ip6addr.addr[2] = iftmp.7;
  if (groupaddr != 0B)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  iftmp.8 = groupaddr->addr[3];
  goto <bb 18>; [INV]

  <bb 17> :
  iftmp.8 = 0;

  <bb 18> :
  ip6addr.addr[3] = iftmp.8;
  if (groupaddr != 0B)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  iftmp.9 = groupaddr->zone;
  goto <bb 21>; [INV]

  <bb 20> :
  iftmp.9 = 0;

  <bb 21> :
  ip6addr.zone = iftmp.9;
  _8 = ip6addr.addr[0];
  _9 = _8 & 49407;
  if (_9 == 33022)
    goto <bb 24>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 22> :
  _10 = ip6addr.addr[0];
  _11 = _10 & 36863;
  if (_11 == 511)
    goto <bb 24>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 23> :
  _12 = ip6addr.addr[0];
  _13 = _12 & 36863;
  if (_13 == 767)
    goto <bb 24>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 24> :
  _14 = netif->num;
  iftmp.10 = _14 + 1;
  goto <bb 26>; [INV]

  <bb 25> :
  iftmp.10 = 0;

  <bb 26> :
  ip6addr.zone = iftmp.10;
  groupaddr = &ip6addr;

  <bb 27> :
  group = mld6_lookfor_group (netif, groupaddr);
  if (group == 0B)
    goto <bb 28>; [INV]
  else
    goto <bb 33>; [INV]

  <bb 28> :
  group = mld6_new_group (netif, groupaddr);
  if (group == 0B)
    goto <bb 29>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 29> :
  D.7621 = -1;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 34>; [INV]

  <bb 30> :
  _15 = netif->mld_mac_filter;
  if (_15 != 0B)
    goto <bb 31>; [INV]
  else
    goto <bb 32>; [INV]

  <bb 31> :
  _16 = netif->mld_mac_filter;
  _16 (netif, groupaddr, 1);

  <bb 32> :
  _17 = lwip_stats.mld6.tx_report;
  _18 = _17 + 1;
  lwip_stats.mld6.tx_report = _18;
  mld6_send (netif, group, 131);
  mld6_delayed_report (group, 500);

  <bb 33> :
  _19 = group->use;
  _20 = _19;
  _21 = _20 + 1;
  group->use = _21;
  D.7621 = 0;

  <bb 34> :
  ip6addr = {CLOBBER};

  <bb 35> :
<L33>:
  return D.7621;

}


mld6_joingroup (const struct ip6_addr_t * srcaddr, const struct ip6_addr_t * groupaddr)
{
  struct netif * netif;
  err_t err;
  err_t D.7583;

  <bb 2> :
  err = -6;
  netif = netif_list;
  goto <bb 12>; [INV]

  <bb 3> :
  if (srcaddr == 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  _1 = srcaddr->addr[0];
  if (_1 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  _2 = srcaddr->addr[1];
  if (_2 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  _3 = srcaddr->addr[2];
  if (_3 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _4 = srcaddr->addr[3];
  if (_4 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  _5 = netif_get_ip6_addr_match (netif, srcaddr);
  if (_5 >= 0)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  err = mld6_joingroup_netif (netif, groupaddr);
  if (err != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  D.7583 = err;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 14>; [INV]

  <bb 11> :
  netif = netif->next;

  <bb 12> :
  if (netif != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  D.7583 = err;

  <bb 14> :
<L12>:
  return D.7583;

}


mld6_input (struct pbuf * p, struct netif * inp)
{
  struct mld_group * group;
  struct mld_header * mld_hdr;

  <bb 2> :
  _1 = lwip_stats.mld6.recv;
  _2 = _1 + 1;
  lwip_stats.mld6.recv = _2;
  _3 = p->len;
  if (_3 <= 23)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  pbuf_free (p);
  _4 = lwip_stats.mld6.lenerr;
  _5 = _4 + 1;
  lwip_stats.mld6.lenerr = _5;
  _6 = lwip_stats.mld6.drop;
  _7 = _6 + 1;
  lwip_stats.mld6.drop = _7;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 34>; [INV]

  <bb 4> :
  mld_hdr = p->payload;
  _8 = mld_hdr->type;
  _9 = (int) _8;
  switch (_9) <default: <L32> [INV], case 130: <L2> [INV], case 131: <L26> [INV], case 132: <L31> [INV]>

  <bb 5> :
<L2>:
  _10 = ip_data.current_iphdr_dest.u_addr.ip6.addr[0];
  if (_10 == 767)
    goto <bb 6>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 6> :
  _11 = ip_data.current_iphdr_dest.u_addr.ip6.addr[1];
  if (_11 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 7> :
  _12 = ip_data.current_iphdr_dest.u_addr.ip6.addr[2];
  if (_12 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 8> :
  _13 = ip_data.current_iphdr_dest.u_addr.ip6.addr[3];
  if (_13 == 16777216)
    goto <bb 9>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 9> :
  _14 = &mld_hdr->multicast_address;
  if (_14 == 0B)
    goto <bb 14>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  _15 = mld_hdr->multicast_address.addr[0];
  if (_15 == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 11> :
  _16 = mld_hdr->multicast_address.addr[1];
  if (_16 == 0)
    goto <bb 12>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 12> :
  _17 = mld_hdr->multicast_address.addr[2];
  if (_17 == 0)
    goto <bb 13>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 13> :
  _18 = mld_hdr->multicast_address.addr[3];
  if (_18 == 0)
    goto <bb 14>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 14> :
  _19 = lwip_stats.mld6.rx_general;
  _20 = _19 + 1;
  lwip_stats.mld6.rx_general = _20;
  group = inp->client_data[1];
  goto <bb 22>; [INV]

  <bb 15> :
  _21 = group->group_address.addr[0];
  _22 = _21 & 36863;
  if (_22 != 511)
    goto <bb 16>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 16> :
  _23 = group->group_address.addr[0];
  if (_23 != 767)
    goto <bb 20>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 17> :
  _24 = group->group_address.addr[1];
  if (_24 != 0)
    goto <bb 20>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 18> :
  _25 = group->group_address.addr[2];
  if (_25 != 0)
    goto <bb 20>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 19> :
  _26 = group->group_address.addr[3];
  if (_26 != 16777216)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  _27 = mld_hdr->max_resp_delay;
  _28 = lwip_htons (_27);
  mld6_delayed_report (group, _28);

  <bb 21> :
  group = group->next;

  <bb 22> :
  if (group != 0B)
    goto <bb 15>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 23> :
  goto <bb 26>; [INV]

  <bb 24> :
  _29 = lwip_stats.mld6.rx_group;
  _30 = _29 + 1;
  lwip_stats.mld6.rx_group = _30;
  group = mld6_lookfor_group (inp, &ip_data.current_iphdr_dest.u_addr.ip6);
  if (group != 0B)
    goto <bb 25>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 25> :
  _31 = mld_hdr->max_resp_delay;
  _32 = lwip_htons (_31);
  mld6_delayed_report (group, _32);

  <bb 26> :
  goto <bb 33>; [INV]

  <bb 27> :
<L26>:
  _33 = lwip_stats.mld6.rx_report;
  _34 = _33 + 1;
  lwip_stats.mld6.rx_report = _34;
  group = mld6_lookfor_group (inp, &ip_data.current_iphdr_dest.u_addr.ip6);
  if (group != 0B)
    goto <bb 28>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 28> :
  _35 = group->group_state;
  if (_35 == 1)
    goto <bb 29>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 29> :
  group->timer = 0;
  group->group_state = 2;
  group->last_reporter_flag = 0;

  <bb 30> :
  goto <bb 33>; [INV]

  <bb 31> :
<L31>:
  goto <bb 33>; [INV]

  <bb 32> :
<L32>:
  _36 = lwip_stats.mld6.proterr;
  _37 = _36 + 1;
  lwip_stats.mld6.proterr = _37;
  _38 = lwip_stats.mld6.drop;
  _39 = _38 + 1;
  lwip_stats.mld6.drop = _39;

  <bb 33> :
  pbuf_free (p);

  <bb 34> :
<L34>:
  return;

}


mld6_remove_group (struct netif * netif, struct mld_group * group)
{
  struct mld_group * tmpGroup;
  err_t err;
  err_t D.7545;

  <bb 2> :
  err = 0;
  _1 = netif->client_data[1];
  if (group == _1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _2 = group->next;
  netif->client_data[1] = _2;
  goto <bb 11>; [INV]

  <bb 4> :
  tmpGroup = netif->client_data[1];
  goto <bb 8>; [INV]

  <bb 5> :
  _3 = tmpGroup->next;
  if (group == _3)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _4 = group->next;
  tmpGroup->next = _4;
  goto <bb 9>; [INV]

  <bb 7> :
  tmpGroup = tmpGroup->next;

  <bb 8> :
  if (tmpGroup != 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  if (tmpGroup == 0B)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  err = -16;

  <bb 11> :
  D.7545 = err;

  <bb 12> :
<L10>:
  return D.7545;

}


mld6_new_group (struct netif * ifp, const struct ip6_addr_t * addr)
{
  struct mld_group * group;
  struct mld_group * D.7536;
  u8_t iftmp.4;
  const long unsigned int iftmp.3;
  const long unsigned int iftmp.2;
  const long unsigned int iftmp.1;
  const long unsigned int iftmp.0;

  <bb 2> :
  group = memp_malloc (12);
  if (group != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 3> :
  if (addr != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  iftmp.0 = addr->addr[0];
  goto <bb 6>; [INV]

  <bb 5> :
  iftmp.0 = 0;

  <bb 6> :
  group->group_address.addr[0] = iftmp.0;
  if (addr != 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  iftmp.1 = addr->addr[1];
  goto <bb 9>; [INV]

  <bb 8> :
  iftmp.1 = 0;

  <bb 9> :
  group->group_address.addr[1] = iftmp.1;
  if (addr != 0B)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  iftmp.2 = addr->addr[2];
  goto <bb 12>; [INV]

  <bb 11> :
  iftmp.2 = 0;

  <bb 12> :
  group->group_address.addr[2] = iftmp.2;
  if (addr != 0B)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  iftmp.3 = addr->addr[3];
  goto <bb 15>; [INV]

  <bb 14> :
  iftmp.3 = 0;

  <bb 15> :
  group->group_address.addr[3] = iftmp.3;
  if (addr != 0B)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  iftmp.4 = addr->zone;
  goto <bb 18>; [INV]

  <bb 17> :
  iftmp.4 = 0;

  <bb 18> :
  group->group_address.zone = iftmp.4;
  group->timer = 0;
  group->group_state = 2;
  group->last_reporter_flag = 0;
  group->use = 0;
  _1 = ifp->client_data[1];
  group->next = _1;
  ifp->client_data[1] = group;

  <bb 19> :
  D.7536 = group;

  <bb 20> :
<L17>:
  return D.7536;

}


mld6_lookfor_group (struct netif * ifp, const struct ip6_addr_t * addr)
{
  struct mld_group * group;
  struct mld_group * D.7512;

  <bb 2> :
  group = ifp->client_data[1];
  goto <bb 10>; [INV]

  <bb 3> :
  _1 = group->group_address.addr[0];
  _2 = addr->addr[0];
  if (_1 == _2)
    goto <bb 4>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 4> :
  _3 = group->group_address.addr[1];
  _4 = addr->addr[1];
  if (_3 == _4)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 5> :
  _5 = group->group_address.addr[2];
  _6 = addr->addr[2];
  if (_5 == _6)
    goto <bb 6>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 6> :
  _7 = group->group_address.addr[3];
  _8 = addr->addr[3];
  if (_7 == _8)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  _9 = group->group_address.zone;
  _10 = addr->zone;
  if (_9 == _10)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  D.7512 = group;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 12>; [INV]

  <bb 9> :
  group = group->next;

  <bb 10> :
  if (group != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  D.7512 = 0B;

  <bb 12> :
<L13>:
  return D.7512;

}


mld6_report_groups (struct netif * netif)
{
  struct mld_group * group;

  <bb 2> :
  group = netif->client_data[1];
  goto <bb 4>; [INV]

  <bb 3> :
  mld6_delayed_report (group, 500);
  group = group->next;

  <bb 4> :
  if (group != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  return;

}


mld6_stop (struct netif * netif)
{
  struct mld_group * next;
  struct mld_group * group;
  err_t D.7500;

  <bb 2> :
  group = netif->client_data[1];
  netif->client_data[1] = 0B;
  goto <bb 6>; [INV]

  <bb 3> :
  next = group->next;
  _1 = netif->mld_mac_filter;
  if (_1 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _2 = netif->mld_mac_filter;
  _3 = &group->group_address;
  _2 (netif, _3, 0);

  <bb 5> :
  memp_free (12, group);
  group = next;

  <bb 6> :
  if (group != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  D.7500 = 0;

  <bb 8> :
<L5>:
  return D.7500;

}


