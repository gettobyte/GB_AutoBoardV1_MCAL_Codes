Symbol table:

snmp_scalar_array_set_value/7 (snmp_scalar_array_set_value) @06b952a0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: 
  Referring: snmp_scalar_array_get_instance/3 (addr) snmp_scalar_array_get_next_instance/4 (addr) 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call Num speculative call targets: 0
snmp_scalar_array_set_test/6 (snmp_scalar_array_set_test) @06b95000
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: 
  Referring: snmp_scalar_array_get_instance/3 (addr) snmp_scalar_array_get_next_instance/4 (addr) 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call Num speculative call targets: 0
snmp_scalar_array_get_value/5 (snmp_scalar_array_get_value) @06b86b60
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: 
  Referring: snmp_scalar_array_get_instance/3 (addr) snmp_scalar_array_get_next_instance/4 (addr) 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call Num speculative call targets: 0
snmp_scalar_array_get_next_instance/4 (snmp_scalar_array_get_next_instance) @06b86620
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: snmp_scalar_array_get_value/5 (addr) snmp_scalar_array_set_test/6 (addr) snmp_scalar_array_set_value/7 (addr) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
snmp_scalar_array_get_instance/3 (snmp_scalar_array_get_instance) @06b86d20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: snmp_scalar_array_get_value/5 (addr) snmp_scalar_array_set_test/6 (addr) snmp_scalar_array_set_value/7 (addr) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
snmp_scalar_get_next_instance/2 (snmp_scalar_get_next_instance) @06b86a80
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: snmp_scalar_get_instance/1 
snmp_scalar_get_instance/1 (snmp_scalar_get_instance) @06b867e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: snmp_scalar_get_next_instance/2 
  Calls: 
snmp_scalar_array_set_value (struct snmp_node_instance * instance, u16_t value_len, void * value)
{
  const struct snmp_scalar_array_node_def * array_node_def;
  const struct snmp_scalar_array_node * array_node;
  snmp_err_t result;
  snmp_err_t D.6895;
  snmp_err_t (*<T6d5>) (const struct snmp_scalar_array_node_def *, u16_t, void *) _1;
  snmp_err_t (*<T6d5>) (const struct snmp_scalar_array_node_def *, u16_t, void *) _2;
  snmp_err_t _14;

  <bb 2> :
  result_5 = 17;
  array_node_8 = instance_7(D)->node;
  array_node_def_9 = instance_7(D)->reference.const_ptr;
  _1 = array_node_8->set_value;
  if (_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _2 = array_node_8->set_value;
  result_13 = _2 (array_node_def_9, value_len_10(D), value_11(D));

  <bb 4> :
  # result_3 = PHI <result_5(2), result_13(3)>
  _14 = result_3;

  <bb 5> :
<L2>:
  return _14;

}


snmp_scalar_array_set_test (struct snmp_node_instance * instance, u16_t value_len, void * value)
{
  const struct snmp_scalar_array_node_def * array_node_def;
  const struct snmp_scalar_array_node * array_node;
  snmp_err_t result;
  snmp_err_t D.6891;
  snmp_err_t (*<T6d5>) (const struct snmp_scalar_array_node_def *, u16_t, void *) _1;
  snmp_err_t (*<T6d5>) (const struct snmp_scalar_array_node_def *, u16_t, void *) _2;
  snmp_err_t _14;

  <bb 2> :
  result_5 = 17;
  array_node_8 = instance_7(D)->node;
  array_node_def_9 = instance_7(D)->reference.const_ptr;
  _1 = array_node_8->set_test;
  if (_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _2 = array_node_8->set_test;
  result_13 = _2 (array_node_def_9, value_len_10(D), value_11(D));

  <bb 4> :
  # result_3 = PHI <result_5(2), result_13(3)>
  _14 = result_3;

  <bb 5> :
<L2>:
  return _14;

}


snmp_scalar_array_get_value (struct snmp_node_instance * instance, void * value)
{
  const struct snmp_scalar_array_node_def * array_node_def;
  const struct snmp_scalar_array_node * array_node;
  s16_t result;
  s16_t D.6887;
  s16_t (*<T6d0>) (const struct snmp_scalar_array_node_def *, void *) _1;
  s16_t (*<T6d0>) (const struct snmp_scalar_array_node_def *, void *) _2;
  s16_t _13;

  <bb 2> :
  result_5 = -1;
  array_node_8 = instance_7(D)->node;
  array_node_def_9 = instance_7(D)->reference.const_ptr;
  _1 = array_node_8->get_value;
  if (_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _2 = array_node_8->get_value;
  result_12 = _2 (array_node_def_9, value_10(D));

  <bb 4> :
  # result_3 = PHI <result_5(2), result_12(3)>
  _13 = result_3;

  <bb 5> :
<L2>:
  return _13;

}


snmp_scalar_array_get_next_instance (const u32_t * root_oid, u8_t root_oid_len, struct snmp_node_instance * instance)
{
  u16_t i;
  u32_t oid_dist;
  u16_t i;
  u16_t i;
  const struct snmp_scalar_array_node_def * result;
  const struct snmp_scalar_array_node_def * array_node_def;
  const struct snmp_scalar_array_node * array_node;
  snmp_err_t D.6883;
  unsigned char _1;
  short unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  short unsigned int i.0_5;
  short unsigned int _6;
  unsigned char _7;
  unsigned char _8;
  long unsigned int _9;
  long unsigned int _10;
  short unsigned int i.1_11;
  short unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  short unsigned int i.2_20;
  short unsigned int _21;
  long unsigned int _22;
  <unnamed type> _23;
  unsigned char _24;
  snmp_err_t _39;
  snmp_err_t _73;
  snmp_err_t _74;

  <bb 2> :
  array_node_43 = instance_42(D)->node;
  array_node_def_44 = array_node_43->array_nodes;
  result_45 = 0B;
  _1 = instance_42(D)->instance_oid.len;
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 3> :
  _2 = array_node_43->array_node_count;
  if (_2 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 4> :
  i_46 = 0;
  result_47 = array_node_def_44;
  array_node_def_48 = array_node_def_44 + 12;
  i_49 = 1;
  goto <bb 8>; [INV]

  <bb 5> :
  _3 = array_node_def_25->oid;
  _4 = result_29->oid;
  if (_3 < _4)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  result_50 = array_node_def_25;

  <bb 7> :
  # result_28 = PHI <result_29(5), result_50(6)>
  array_node_def_51 = array_node_def_25 + 12;
  i.0_5 = i_34;
  i_52 = i.0_5 + 1;

  <bb 8> :
  # array_node_def_25 = PHI <array_node_def_48(4), array_node_def_51(7)>
  # result_29 = PHI <result_47(4), result_28(7)>
  # i_34 = PHI <i_49(4), i_52(7)>
  _6 = array_node_43->array_node_count;
  if (i_34 < _6)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  goto <bb 24>; [INV]

  <bb 10> :
  _7 = instance_42(D)->instance_oid.len;
  if (_7 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 11> :
  _8 = instance_42(D)->instance_oid.len;
  if (_8 == 1)
    goto <bb 12>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 12> :
  i_53 = 0;
  goto <bb 16>; [INV]

  <bb 13> :
  _9 = array_node_def_26->oid;
  _10 = instance_42(D)->instance_oid.id[0];
  if (_9 == _10)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  result_56 = array_node_def_26;
  goto <bb 17>; [INV]

  <bb 15> :
  array_node_def_54 = array_node_def_26 + 12;
  i.1_11 = i_35;
  i_55 = i.1_11 + 1;

  <bb 16> :
  # array_node_def_26 = PHI <array_node_def_44(12), array_node_def_54(15)>
  # i_35 = PHI <i_53(12), i_55(15)>
  _12 = array_node_43->array_node_count;
  if (i_35 < _12)
    goto <bb 13>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 17> :
  # result_30 = PHI <result_45(11), result_56(14), result_45(16)>
  if (result_30 == 0B)
    goto <bb 18>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 18> :
  oid_dist_57 = 4294967295;
  i_58 = 0;
  array_node_def_59 = array_node_43->array_nodes;
  goto <bb 23>; [INV]

  <bb 19> :
  _13 = array_node_def_27->oid;
  _14 = instance_42(D)->instance_oid.id[0];
  if (_13 > _14)
    goto <bb 20>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 20> :
  _15 = array_node_def_27->oid;
  _16 = instance_42(D)->instance_oid.id[0];
  _17 = _15 - _16;
  if (oid_dist_37 > _17)
    goto <bb 21>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 21> :
  result_60 = array_node_def_27;
  _18 = array_node_def_27->oid;
  _19 = instance_42(D)->instance_oid.id[0];
  oid_dist_61 = _18 - _19;

  <bb 22> :
  # result_31 = PHI <result_32(19), result_32(20), result_60(21)>
  # oid_dist_36 = PHI <oid_dist_37(19), oid_dist_37(20), oid_dist_61(21)>
  array_node_def_62 = array_node_def_27 + 12;
  i.2_20 = i_38;
  i_63 = i.2_20 + 1;

  <bb 23> :
  # array_node_def_27 = PHI <array_node_def_59(18), array_node_def_62(22)>
  # result_32 = PHI <result_30(18), result_31(22)>
  # oid_dist_37 = PHI <oid_dist_57(18), oid_dist_36(22)>
  # i_38 = PHI <i_58(18), i_63(22)>
  _21 = array_node_43->array_node_count;
  if (i_38 < _21)
    goto <bb 19>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 24> :
  # result_33 = PHI <result_29(9), result_45(10), result_30(17), result_32(23)>
  if (result_33 == 0B)
    goto <bb 25>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 25> :
  _74 = 241;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 27>; [INV]

  <bb 26> :
  instance_42(D)->instance_oid.len = 2;
  _22 = result_33->oid;
  instance_42(D)->instance_oid.id[0] = _22;
  instance_42(D)->instance_oid.id[1] = 0;
  _23 = result_33->access;
  instance_42(D)->access = _23;
  _24 = result_33->asn1_type;
  instance_42(D)->asn1_type = _24;
  instance_42(D)->get_value = snmp_scalar_array_get_value;
  instance_42(D)->set_test = snmp_scalar_array_set_test;
  instance_42(D)->set_value = snmp_scalar_array_set_value;
  instance_42(D)->reference.const_ptr = result_33;
  _73 = 0;

  <bb 27> :
  # _39 = PHI <_74(25), _73(26)>
<L29>:
  return _39;

}


snmp_scalar_array_get_instance (const u32_t * root_oid, u8_t root_oid_len, struct snmp_node_instance * instance)
{
  u32_t i;
  const struct snmp_scalar_array_node_def * array_node_def;
  const struct snmp_scalar_array_node * array_node;
  snmp_err_t D.6861;
  unsigned char _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  short unsigned int _5;
  long unsigned int _6;
  short unsigned int _7;
  long unsigned int _8;
  <unnamed type> _9;
  unsigned char _10;
  snmp_err_t _13;
  snmp_err_t _28;
  snmp_err_t _29;

  <bb 2> :
  _1 = instance_16(D)->instance_oid.len;
  if (_1 == 2)
    goto <bb 3>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 3> :
  _2 = instance_16(D)->instance_oid.id[1];
  if (_2 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 4> :
  array_node_17 = instance_16(D)->node;
  array_node_def_18 = array_node_17->array_nodes;
  i_19 = 0;
  goto <bb 8>; [INV]

  <bb 5> :
  _3 = array_node_def_11->oid;
  _4 = instance_16(D)->instance_oid.id[0];
  if (_3 == _4)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  goto <bb 9>; [INV]

  <bb 7> :
  array_node_def_20 = array_node_def_11 + 12;
  i_21 = i_12 + 1;

  <bb 8> :
  # array_node_def_11 = PHI <array_node_def_18(4), array_node_def_20(7)>
  # i_12 = PHI <i_19(4), i_21(7)>
  _5 = array_node_17->array_node_count;
  _6 = (long unsigned int) _5;
  if (i_12 < _6)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  _7 = array_node_17->array_node_count;
  _8 = (long unsigned int) _7;
  if (i_12 < _8)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  _9 = array_node_def_11->access;
  instance_16(D)->access = _9;
  _10 = array_node_def_11->asn1_type;
  instance_16(D)->asn1_type = _10;
  instance_16(D)->get_value = snmp_scalar_array_get_value;
  instance_16(D)->set_test = snmp_scalar_array_set_test;
  instance_16(D)->set_value = snmp_scalar_array_set_value;
  instance_16(D)->reference.const_ptr = array_node_def_11;
  _28 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 12>; [INV]

  <bb 11> :
  _29 = 241;

  <bb 12> :
  # _13 = PHI <_28(10), _29(11)>
<L11>:
  return _13;

}


snmp_scalar_get_next_instance (const u32_t * root_oid, u8_t root_oid_len, struct snmp_node_instance * instance)
{
  snmp_err_t D.6851;
  unsigned char _1;
  snmp_err_t _2;
  snmp_err_t _6;
  snmp_err_t _12;

  <bb 2> :
  _1 = instance_5(D)->instance_oid.len;
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  instance_5(D)->instance_oid.len = 1;
  instance_5(D)->instance_oid.id[0] = 0;
  _12 = snmp_scalar_get_instance (root_oid_9(D), root_oid_len_10(D), instance_5(D));
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 5>; [INV]

  <bb 4> :
  _6 = 241;

  <bb 5> :
  # _2 = PHI <_12(3), _6(4)>
<L2>:
  return _2;

}


snmp_scalar_get_instance (const u32_t * root_oid, u8_t root_oid_len, struct snmp_node_instance * instance)
{
  const struct snmp_scalar_node * scalar_node;
  snmp_err_t D.6847;
  unsigned char _1;
  long unsigned int _2;
  <unnamed type> _3;
  unsigned char _4;
  s16_t (*<T675>) (struct snmp_node_instance *, void *) _5;
  snmp_err_t (*<T67a>) (struct snmp_node_instance *, u16_t, void *) _6;
  snmp_err_t (*<T67a>) (struct snmp_node_instance *, u16_t, void *) _7;
  snmp_err_t _8;
  snmp_err_t _18;
  snmp_err_t _19;

  <bb 2> :
  scalar_node_12 = instance_11(D)->node;
  _1 = instance_11(D)->instance_oid.len;
  if (_1 != 1)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  _2 = instance_11(D)->instance_oid.id[0];
  if (_2 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _19 = 241;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 6>; [INV]

  <bb 5> :
  _3 = scalar_node_12->access;
  instance_11(D)->access = _3;
  _4 = scalar_node_12->asn1_type;
  instance_11(D)->asn1_type = _4;
  _5 = scalar_node_12->get_value;
  instance_11(D)->get_value = _5;
  _6 = scalar_node_12->set_test;
  instance_11(D)->set_test = _6;
  _7 = scalar_node_12->set_value;
  instance_11(D)->set_value = _7;
  _18 = 0;

  <bb 6> :
  # _8 = PHI <_19(4), _18(5)>
<L3>:
  return _8;

}


