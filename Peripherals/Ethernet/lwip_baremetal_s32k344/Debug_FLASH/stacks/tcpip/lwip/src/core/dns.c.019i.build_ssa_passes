dns_gethostbyname_addrtype (const char * hostname, struct ip_addr_t * addr, void (*dns_found_callback) (const char *, const struct ip_addr_t *, void *) found, void * callback_arg, u8_t dns_addrtype)
{
  u8_t fallback;
  size_t hostnamelen;
  int iftmp.32;
  _Bool iftmp.31;
  err_t D.7934;

  <bb 2> :
  if (addr == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  if (hostname == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  _1 = *hostname;
  if (_1 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  D.7934 = -16;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 37>; [INV]

  <bb 6> :
  hostnamelen = strlen (hostname);
  if (hostnamelen > 255)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  D.7934 = -16;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 37>; [INV]

  <bb 8> :
  _2 = ipaddr_aton (hostname, addr);
  if (_2 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 9> :
  if (addr != 0B)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  _3 = addr->type;
  if (_3 == 6)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  if (dns_addrtype != 0)
    goto <bb 15>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  if (addr == 0B)
    goto <bb 14>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  _4 = addr->type;
  if (_4 == 0)
    goto <bb 14>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 14> :
  if (dns_addrtype != 1)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  D.7934 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 37>; [INV]

  <bb 16> :
  _5 = dns_lookup (hostname, addr, dns_addrtype);
  if (_5 == 0)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  D.7934 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 37>; [INV]

  <bb 18> :
  if (dns_addrtype == 2)
    goto <bb 20>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 19> :
  if (dns_addrtype == 3)
    goto <bb 20>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 20> :
  if (dns_addrtype == 2)
    goto <bb 21>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 21> :
  fallback = 1;
  goto <bb 23>; [INV]

  <bb 22> :
  fallback = 0;

  <bb 23> :
  _6 = dns_lookup (hostname, addr, fallback);
  if (_6 == 0)
    goto <bb 24>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 24> :
  D.7934 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 37>; [INV]

  <bb 25> :
  _7 = dns_servers[0].type;
  if (_7 == 6)
    goto <bb 26>; [INV]
  else
    goto <bb 33>; [INV]

  <bb 26> :
  _8 = dns_servers[0].u_addr.ip6.addr[0];
  if (_8 == 0)
    goto <bb 27>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 27> :
  _9 = dns_servers[0].u_addr.ip6.addr[1];
  if (_9 == 0)
    goto <bb 28>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 28> :
  _10 = dns_servers[0].u_addr.ip6.addr[2];
  if (_10 == 0)
    goto <bb 29>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 29> :
  _11 = dns_servers[0].u_addr.ip6.addr[3];
  if (_11 == 0)
    goto <bb 30>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 30> :
  iftmp.32 = 1;
  goto <bb 32>; [INV]

  <bb 31> :
  iftmp.32 = 0;

  <bb 32> :
  iftmp.31 = (_Bool) iftmp.32;
  goto <bb 34>; [INV]

  <bb 33> :
  _12 = dns_servers[0].u_addr.ip4.addr;
  iftmp.31 = _12 == 0;

  <bb 34> :
  if (iftmp.31 != 0)
    goto <bb 35>; [INV]
  else
    goto <bb 36>; [INV]

  <bb 35> :
  D.7934 = -6;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 37>; [INV]

  <bb 36> :
  D.7934 = dns_enqueue (hostname, hostnamelen, found, callback_arg, dns_addrtype);

  <bb 37> :
<L36>:
  return D.7934;

}


dns_gethostbyname (const char * hostname, struct ip_addr_t * addr, void (*dns_found_callback) (const char *, const struct ip_addr_t *, void *) found, void * callback_arg)
{
  err_t D.7928;

  <bb 2> :
  D.7928 = dns_gethostbyname_addrtype (hostname, addr, found, callback_arg, 2);

  <bb 3> :
<L0>:
  return D.7928;

}


dns_enqueue (const char * name, size_t hostnamelen, void (*dns_found_callback) (const char *, const struct ip_addr_t *, void *) found, void * callback_arg, u8_t dns_addrtype)
{
  u8_t age;
  u8_t r;
  struct dns_req_entry * req;
  size_t namelen;
  struct dns_table_entry * entry;
  u8_t lseqi;
  u8_t lseq;
  u8_t i;
  err_t D.7909;

  <bb 2> :
  entry = 0B;
  i = 0;
  goto <bb 13>; [INV]

  <bb 3> :
  _1 = (int) i;
  _2 = dns_table[_1].state;
  if (_2 == 2)
    goto <bb 4>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 4> :
  _3 = (int) i;
  _4 = &dns_table[_3].name;
  _5 = lwip_strnicmp (name, _4, 256);
  if (_5 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 5> :
  _6 = (int) i;
  _7 = dns_table[_6].reqaddrtype;
  if (dns_addrtype != _7)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  // predicted unlikely by continue predictor.
  goto <bb 12>; [INV]

  <bb 7> :
  r = 0;
  goto <bb 11>; [INV]

  <bb 8> :
  _8 = (int) r;
  _9 = dns_requests[_8].found;
  if (_9 == 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  _10 = (int) r;
  dns_requests[_10].found = found;
  _11 = (int) r;
  dns_requests[_11].arg = callback_arg;
  _12 = (int) r;
  dns_requests[_12].dns_table_idx = i;
  _13 = (int) r;
  dns_requests[_13].reqaddrtype = dns_addrtype;
  D.7909 = -5;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 37>; [INV]

  <bb 10> :
  r.24_14 = r;
  r = r.24_14 + 1;

  <bb 11> :
  if (r <= 3)
    goto <bb 8>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  i.25_15 = i;
  i = i.25_15 + 1;

  <bb 13> :
  if (i <= 3)
    goto <bb 3>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 14> :
  lseq = 0;
  lseqi = 4;
  i = 0;
  goto <bb 21>; [INV]

  <bb 15> :
  _16 = (int) i;
  entry = &dns_table[_16];
  _17 = entry->state;
  if (_17 == 0)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  goto <bb 22>; [INV]

  <bb 17> :
  _18 = entry->state;
  if (_18 == 3)
    goto <bb 18>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 18> :
  dns_seqno.26_19 = dns_seqno;
  _20 = entry->seqno;
  age = dns_seqno.26_19 - _20;
  if (age > lseq)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  lseq = age;
  lseqi = i;

  <bb 20> :
  i = i + 1;

  <bb 21> :
  if (i <= 3)
    goto <bb 15>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 22> :
  if (i == 4)
    goto <bb 23>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 23> :
  if (lseqi > 3)
    goto <bb 25>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 24> :
  _21 = (int) lseqi;
  _22 = dns_table[_21].state;
  if (_22 != 3)
    goto <bb 25>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 25> :
  D.7909 = -1;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 37>; [INV]

  <bb 26> :
  i = lseqi;
  _23 = (int) i;
  entry = &dns_table[_23];

  <bb 27> :
  req = 0B;
  r = 0;
  goto <bb 31>; [INV]

  <bb 28> :
  _24 = (int) r;
  _25 = dns_requests[_24].found;
  if (_25 == 0B)
    goto <bb 29>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 29> :
  _26 = (int) r;
  req = &dns_requests[_26];
  goto <bb 32>; [INV]

  <bb 30> :
  r.27_27 = r;
  r = r.27_27 + 1;

  <bb 31> :
  if (r <= 3)
    goto <bb 28>; [INV]
  else
    goto <bb 32>; [INV]

  <bb 32> :
  if (req == 0B)
    goto <bb 33>; [INV]
  else
    goto <bb 34>; [INV]

  <bb 33> :
  D.7909 = -1;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 37>; [INV]

  <bb 34> :
  req->dns_table_idx = i;
  entry->state = 1;
  dns_seqno.28_28 = dns_seqno;
  entry->seqno = dns_seqno.28_28;
  entry->reqaddrtype = dns_addrtype;
  req->reqaddrtype = dns_addrtype;
  req->found = found;
  req->arg = callback_arg;
  namelen = MIN_EXPR <hostnamelen, 255>;
  _29 = &entry->name;
  memcpy (_29, name, namelen);
  entry->name[namelen] = 0;
  _30 = dns_alloc_pcb ();
  entry->pcb_idx = _30;
  _31 = entry->pcb_idx;
  if (_31 > 3)
    goto <bb 35>; [INV]
  else
    goto <bb 36>; [INV]

  <bb 35> :
  entry->state = 0;
  req->found = 0B;
  D.7909 = -1;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 37>; [INV]

  <bb 36> :
  dns_seqno.29_32 = dns_seqno;
  dns_seqno.30_33 = dns_seqno.29_32;
  _34 = dns_seqno.30_33 + 1;
  dns_seqno = _34;
  dns_check_entry (i);
  D.7909 = -5;

  <bb 37> :
<L38>:
  return D.7909;

}


dns_recv (void * arg, struct udp_pcb * pcb, struct pbuf * p, const struct ip_addr_t * addr, u16_t port)
{
  struct ip6_addr_p_t ip6addr;
  struct ip4_addr_t ip4addr;
  struct dns_table_entry * entry;
  u16_t nanswers;
  u16_t nquestions;
  struct dns_query qry;
  struct dns_answer ans;
  struct dns_hdr hdr;
  u16_t res_idx;
  u16_t txid;
  u8_t i;
  int iftmp.22;
  _Bool iftmp.21;
  _Bool iftmp.20;

  <bb 2> :
  _1 = p->tot_len;
  if (_1 <= 15)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  // predicted unlikely by goto predictor.
  goto <bb 80>; [INV]

  <bb 4> :
  _2 = pbuf_copy_partial (p, &hdr, 12, 0);
  if (_2 == 12)
    goto <bb 5>; [INV]
  else
    goto <bb 80>; [INV]

  <bb 5> :
  _3 = hdr.id;
  txid = lwip_htons (_3);
  i = 0;
  goto <bb 79>; [INV]

  <bb 6> :
  _4 = (int) i;
  entry = &dns_table[_4];
  _5 = entry->state;
  if (_5 == 2)
    goto <bb 7>; [INV]
  else
    goto <bb 78>; [INV]

  <bb 7> :
  _6 = entry->txid;
  if (txid == _6)
    goto <bb 8>; [INV]
  else
    goto <bb 78>; [INV]

  <bb 8> :
  _7 = hdr.numquestions;
  nquestions = lwip_htons (_7);
  _8 = hdr.numanswers;
  nanswers = lwip_htons (_8);
  _9 = hdr.flags1;
  _10 = (signed char) _9;
  if (_10 >= 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  // predicted unlikely by goto predictor.
  goto <bb 80>; [INV]

  <bb 10> :
  if (nquestions != 1)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  // predicted unlikely by goto predictor.
  goto <bb 80>; [INV]

  <bb 12> :
  _11 = addr->type;
  _12 = entry->server_idx;
  _13 = (int) _12;
  _14 = dns_servers[_13].type;
  if (_11 == _14)
    goto <bb 13>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 13> :
  _15 = addr->type;
  if (_15 == 6)
    goto <bb 14>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 14> :
  _16 = addr->u_addr.ip6.addr[0];
  _17 = entry->server_idx;
  _18 = (int) _17;
  _19 = dns_servers[_18].u_addr.ip6.addr[0];
  if (_16 != _19)
    goto <bb 19>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  _20 = addr->u_addr.ip6.addr[1];
  _21 = entry->server_idx;
  _22 = (int) _21;
  _23 = dns_servers[_22].u_addr.ip6.addr[1];
  if (_20 != _23)
    goto <bb 19>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 16> :
  _24 = addr->u_addr.ip6.addr[2];
  _25 = entry->server_idx;
  _26 = (int) _25;
  _27 = dns_servers[_26].u_addr.ip6.addr[2];
  if (_24 != _27)
    goto <bb 19>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 17> :
  _28 = addr->u_addr.ip6.addr[3];
  _29 = entry->server_idx;
  _30 = (int) _29;
  _31 = dns_servers[_30].u_addr.ip6.addr[3];
  if (_28 != _31)
    goto <bb 19>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 18> :
  _32 = addr->u_addr.ip6.zone;
  _33 = entry->server_idx;
  _34 = (int) _33;
  _35 = dns_servers[_34].u_addr.ip6.zone;
  if (_32 != _35)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  iftmp.22 = 1;
  goto <bb 21>; [INV]

  <bb 20> :
  iftmp.22 = 0;

  <bb 21> :
  iftmp.21 = (_Bool) iftmp.22;
  goto <bb 23>; [INV]

  <bb 22> :
  _36 = addr->u_addr.ip4.addr;
  _37 = entry->server_idx;
  _38 = (int) _37;
  _39 = dns_servers[_38].u_addr.ip4.addr;
  iftmp.21 = _36 != _39;

  <bb 23> :
  iftmp.20 = iftmp.21;
  goto <bb 25>; [INV]

  <bb 24> :
  iftmp.20 = 1;

  <bb 25> :
  if (iftmp.20 != 0)
    goto <bb 26>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 26> :
  // predicted unlikely by goto predictor.
  goto <bb 80>; [INV]

  <bb 27> :
  _40 = &entry->name;
  res_idx = dns_compare_name (_40, p, 12);
  if (res_idx == 65535)
    goto <bb 28>; [INV]
  else
    goto <bb 29>; [INV]

  <bb 28> :
  // predicted unlikely by goto predictor.
  goto <bb 80>; [INV]

  <bb 29> :
  _41 = pbuf_copy_partial (p, &qry, 4, res_idx);
  if (_41 != 4)
    goto <bb 30>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 30> :
  // predicted unlikely by goto predictor.
  goto <bb 80>; [INV]

  <bb 31> :
  _42 = qry.cls;
  if (_42 != 256)
    goto <bb 38>; [INV]
  else
    goto <bb 32>; [INV]

  <bb 32> :
  _43 = entry->reqaddrtype;
  if (_43 == 3)
    goto <bb 34>; [INV]
  else
    goto <bb 33>; [INV]

  <bb 33> :
  _44 = entry->reqaddrtype;
  if (_44 == 1)
    goto <bb 34>; [INV]
  else
    goto <bb 35>; [INV]

  <bb 34> :
  _45 = qry.type;
  if (_45 != 7168)
    goto <bb 38>; [INV]
  else
    goto <bb 35>; [INV]

  <bb 35> :
  _46 = entry->reqaddrtype;
  if (_46 != 3)
    goto <bb 36>; [INV]
  else
    goto <bb 39>; [INV]

  <bb 36> :
  _47 = entry->reqaddrtype;
  if (_47 != 1)
    goto <bb 37>; [INV]
  else
    goto <bb 39>; [INV]

  <bb 37> :
  _48 = qry.type;
  if (_48 != 256)
    goto <bb 38>; [INV]
  else
    goto <bb 39>; [INV]

  <bb 38> :
  // predicted unlikely by goto predictor.
  goto <bb 80>; [INV]

  <bb 39> :
  if (res_idx > 65531)
    goto <bb 40>; [INV]
  else
    goto <bb 41>; [INV]

  <bb 40> :
  // predicted unlikely by goto predictor.
  goto <bb 80>; [INV]

  <bb 41> :
  res_idx = res_idx + 4;
  _49 = hdr.flags2;
  _50 = (int) _49;
  _51 = _50 & 15;
  if (_51 != 0)
    goto <bb 42>; [INV]
  else
    goto <bb 44>; [INV]

  <bb 42> :
  _52 = dns_backupserver_available (entry);
  if (_52 != 0)
    goto <bb 43>; [INV]
  else
    goto <bb 77>; [INV]

  <bb 43> :
  entry->retries = 3;
  entry->tmr = 1;
  dns_check_entry (i);
  // predicted unlikely by goto predictor.
  goto <bb 80>; [INV]

  <bb 44> :
  goto <bb 69>; [INV]

  <bb 45> :
  res_idx = dns_skip_name (p, res_idx);
  if (res_idx == 65535)
    goto <bb 46>; [INV]
  else
    goto <bb 47>; [INV]

  <bb 46> :
  // predicted unlikely by goto predictor.
  goto <bb 80>; [INV]

  <bb 47> :
  _53 = pbuf_copy_partial (p, &ans, 10, res_idx);
  if (_53 != 10)
    goto <bb 48>; [INV]
  else
    goto <bb 49>; [INV]

  <bb 48> :
  // predicted unlikely by goto predictor.
  goto <bb 80>; [INV]

  <bb 49> :
  if (res_idx > 65525)
    goto <bb 50>; [INV]
  else
    goto <bb 51>; [INV]

  <bb 50> :
  // predicted unlikely by goto predictor.
  goto <bb 80>; [INV]

  <bb 51> :
  res_idx = res_idx + 10;
  _54 = ans.cls;
  if (_54 == 256)
    goto <bb 52>; [INV]
  else
    goto <bb 66>; [INV]

  <bb 52> :
  _55 = ans.type;
  if (_55 == 256)
    goto <bb 53>; [INV]
  else
    goto <bb 59>; [INV]

  <bb 53> :
  _56 = ans.len;
  if (_56 == 1024)
    goto <bb 54>; [INV]
  else
    goto <bb 59>; [INV]

  <bb 54> :
  _57 = entry->reqaddrtype;
  if (_57 != 3)
    goto <bb 55>; [INV]
  else
    goto <bb 59>; [INV]

  <bb 55> :
  _58 = entry->reqaddrtype;
  if (_58 != 1)
    goto <bb 56>; [INV]
  else
    goto <bb 59>; [INV]

  <bb 56> :
  _59 = pbuf_copy_partial (p, &ip4addr, 4, res_idx);
  if (_59 != 4)
    goto <bb 57>; [INV]
  else
    goto <bb 58>; [INV]

  <bb 57> :
  // predicted unlikely by goto predictor.
  ip4addr = {CLOBBER};
  goto <bb 80>; [INV]

  <bb 58> :
  _60 = (int) i;
  _61 = ip4addr.addr;
  dns_table[_60].ipaddr.u_addr.ip4.addr = _61;
  _62 = (int) i;
  dns_table[_62].ipaddr.type = 0;
  _63 = (int) i;
  dns_table[_63].ipaddr.u_addr.ip6.addr[3] = 0;
  _64 = (int) i;
  _65 = dns_table[_63].ipaddr.u_addr.ip6.addr[3];
  dns_table[_64].ipaddr.u_addr.ip6.addr[2] = _65;
  _66 = (int) i;
  _67 = dns_table[_64].ipaddr.u_addr.ip6.addr[2];
  dns_table[_66].ipaddr.u_addr.ip6.addr[1] = _67;
  _68 = (int) i;
  dns_table[_68].ipaddr.u_addr.ip6.zone = 0;
  pbuf_free (p);
  _69 = ans.ttl;
  _70 = lwip_htonl (_69);
  dns_correct_response (i, _70);
  // predicted unlikely by early return (on trees) predictor.
  ip4addr = {CLOBBER};
  goto <bb 81>; [INV]

  <bb 59> :
  _71 = ans.type;
  if (_71 == 7168)
    goto <bb 60>; [INV]
  else
    goto <bb 66>; [INV]

  <bb 60> :
  _72 = ans.len;
  if (_72 == 4096)
    goto <bb 61>; [INV]
  else
    goto <bb 66>; [INV]

  <bb 61> :
  _73 = entry->reqaddrtype;
  if (_73 == 3)
    goto <bb 63>; [INV]
  else
    goto <bb 62>; [INV]

  <bb 62> :
  _74 = entry->reqaddrtype;
  if (_74 == 1)
    goto <bb 63>; [INV]
  else
    goto <bb 66>; [INV]

  <bb 63> :
  _75 = pbuf_copy_partial (p, &ip6addr, 16, res_idx);
  if (_75 != 16)
    goto <bb 64>; [INV]
  else
    goto <bb 65>; [INV]

  <bb 64> :
  // predicted unlikely by goto predictor.
  ip6addr = {CLOBBER};
  goto <bb 80>; [INV]

  <bb 65> :
  _76 = (int) i;
  _77 = ip6addr.addr[0];
  dns_table[_76].ipaddr.u_addr.ip6.addr[0] = _77;
  _78 = (int) i;
  _79 = ip6addr.addr[1];
  dns_table[_78].ipaddr.u_addr.ip6.addr[1] = _79;
  _80 = (int) i;
  _81 = ip6addr.addr[2];
  dns_table[_80].ipaddr.u_addr.ip6.addr[2] = _81;
  _82 = (int) i;
  _83 = ip6addr.addr[3];
  dns_table[_82].ipaddr.u_addr.ip6.addr[3] = _83;
  _84 = (int) i;
  dns_table[_84].ipaddr.u_addr.ip6.zone = 0;
  _85 = (int) i;
  dns_table[_85].ipaddr.type = 6;
  pbuf_free (p);
  _86 = ans.ttl;
  _87 = lwip_htonl (_86);
  dns_correct_response (i, _87);
  // predicted unlikely by early return (on trees) predictor.
  ip6addr = {CLOBBER};
  goto <bb 81>; [INV]

  <bb 66> :
  _88 = (int) res_idx;
  _89 = ans.len;
  _90 = lwip_htons (_89);
  _91 = (int) _90;
  _92 = _88 + _91;
  if (_92 > 65535)
    goto <bb 67>; [INV]
  else
    goto <bb 68>; [INV]

  <bb 67> :
  // predicted unlikely by goto predictor.
  goto <bb 80>; [INV]

  <bb 68> :
  _93 = ans.len;
  _94 = lwip_htons (_93);
  res_idx = res_idx + _94;
  nanswers = nanswers + 65535;

  <bb 69> :
  if (nanswers != 0)
    goto <bb 70>; [INV]
  else
    goto <bb 71>; [INV]

  <bb 70> :
  _95 = p->tot_len;
  if (res_idx < _95)
    goto <bb 45>; [INV]
  else
    goto <bb 71>; [INV]

  <bb 71> :
  _96 = entry->reqaddrtype;
  if (_96 == 2)
    goto <bb 73>; [INV]
  else
    goto <bb 72>; [INV]

  <bb 72> :
  _97 = entry->reqaddrtype;
  if (_97 == 3)
    goto <bb 73>; [INV]
  else
    goto <bb 77>; [INV]

  <bb 73> :
  _98 = entry->reqaddrtype;
  if (_98 == 2)
    goto <bb 74>; [INV]
  else
    goto <bb 75>; [INV]

  <bb 74> :
  _99 = (int) i;
  dns_table[_99].reqaddrtype = 1;
  goto <bb 76>; [INV]

  <bb 75> :
  _100 = (int) i;
  dns_table[_100].reqaddrtype = 0;

  <bb 76> :
  pbuf_free (p);
  _101 = (int) i;
  dns_table[_101].state = 1;
  dns_check_entry (i);
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 81>; [INV]

  <bb 77> :
  pbuf_free (p);
  dns_call_found (i, 0B);
  _102 = (int) i;
  dns_table[_102].state = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 81>; [INV]

  <bb 78> :
  i.23_103 = i;
  i = i.23_103 + 1;

  <bb 79> :
  if (i <= 3)
    goto <bb 6>; [INV]
  else
    goto <bb 80>; [INV]

  <bb 80> :
ignore_packet:
  pbuf_free (p);

  <bb 81> :
  hdr = {CLOBBER};
  ans = {CLOBBER};
  qry = {CLOBBER};

  <bb 82> :
<L94>:
  return;

}


dns_correct_response (u8_t idx, u32_t ttl)
{
  struct dns_table_entry * entry;

  <bb 2> :
  _1 = (int) idx;
  entry = &dns_table[_1];
  entry->state = 3;
  _2 = entry->ipaddr.type;

  <bb 3> :
  entry->ttl = ttl;
  _3 = entry->ttl;
  if (_3 > 604800)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  entry->ttl = 604800;

  <bb 5> :
  _4 = &entry->ipaddr;
  dns_call_found (idx, _4);
  _5 = entry->ttl;
  if (_5 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  _6 = entry->state;
  if (_6 == 3)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  entry->state = 0;

  <bb 8> :
  return;

}


dns_check_entries ()
{
  u8_t i;

  <bb 2> :
  i = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  dns_check_entry (i);
  i = i + 1;

  <bb 4> :
  if (i <= 3)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  return;

}


dns_check_entry (u8_t i)
{
  struct dns_table_entry * entry;
  err_t err;

  <bb 2> :
  _1 = (int) i;
  entry = &dns_table[_1];
  if (i > 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  __asm__ __volatile__("BKPT #0
	");
  goto <bb 3>; [INV]

  <bb 4> :
  _2 = entry->state;
  _3 = (int) _2;
  switch (_3) <default: <L22> [INV], case 0: <L21> [INV], case 1: <L3> [INV], case 2: <L6> [INV], case 3: <L17> [INV]>

  <bb 5> :
<L3>:
  _4 = dns_create_txid ();
  entry->txid = _4;
  entry->state = 2;
  entry->server_idx = 0;
  entry->tmr = 1;
  entry->retries = 0;
  err = dns_send (i);

  <bb 6> :
  goto <bb 22>; [INV]

  <bb 7> :
<L6>:
  _5 = entry->tmr;
  _6 = _5 + 255;
  entry->tmr = _6;
  _7 = entry->tmr;
  if (_7 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 8> :
  _8 = entry->retries;
  _9 = _8 + 1;
  entry->retries = _9;
  _10 = entry->retries;
  if (_10 == 4)
    goto <bb 9>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 9> :
  _11 = dns_backupserver_available (entry);
  if (_11 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  _12 = entry->server_idx;
  _13 = _12;
  _14 = _13 + 1;
  entry->server_idx = _14;
  entry->tmr = 1;
  entry->retries = 0;
  goto <bb 13>; [INV]

  <bb 11> :
  dns_call_found (i, 0B);
  entry->state = 0;
  goto <bb 22>; [INV]

  <bb 12> :
  _15 = entry->retries;
  entry->tmr = _15;

  <bb 13> :
  err = dns_send (i);

  <bb 14> :
  goto <bb 22>; [INV]

  <bb 15> :
<L17>:
  _16 = entry->ttl;
  if (_16 == 0)
    goto <bb 17>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 16> :
  _17 = entry->ttl;
  _18 = _17 + 4294967295;
  entry->ttl = _18;
  _19 = entry->ttl;
  if (_19 == 0)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  entry->state = 0;

  <bb 18> :
  goto <bb 22>; [INV]

  <bb 19> :
<L21>:
  goto <bb 22>; [INV]

  <bb 20> :
<L22>:

  <bb 21> :
  __asm__ __volatile__("BKPT #0
	");
  goto <bb 21>; [INV]

  <bb 22> :
  return;

}


dns_backupserver_available (struct dns_table_entry * pentry)
{
  u8_t ret;
  u8_t D.7780;
  int iftmp.19;
  _Bool iftmp.18;

  <bb 2> :
  ret = 0;
  if (pentry != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 3> :
  _1 = pentry->server_idx;
  if (_1 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 4> :
  _2 = pentry->server_idx;
  _3 = (int) _2;
  _4 = _3 + 1;
  _5 = dns_servers[_4].type;
  if (_5 == 6)
    goto <bb 5>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 5> :
  _6 = pentry->server_idx;
  _7 = (int) _6;
  _8 = _7 + 1;
  _9 = dns_servers[_8].u_addr.ip6.addr[0];
  if (_9 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  _10 = pentry->server_idx;
  _11 = (int) _10;
  _12 = _11 + 1;
  _13 = dns_servers[_12].u_addr.ip6.addr[1];
  if (_13 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _14 = pentry->server_idx;
  _15 = (int) _14;
  _16 = _15 + 1;
  _17 = dns_servers[_16].u_addr.ip6.addr[2];
  if (_17 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  _18 = pentry->server_idx;
  _19 = (int) _18;
  _20 = _19 + 1;
  _21 = dns_servers[_20].u_addr.ip6.addr[3];
  if (_21 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  iftmp.19 = 1;
  goto <bb 11>; [INV]

  <bb 10> :
  iftmp.19 = 0;

  <bb 11> :
  iftmp.18 = (_Bool) iftmp.19;
  goto <bb 13>; [INV]

  <bb 12> :
  _22 = pentry->server_idx;
  _23 = (int) _22;
  _24 = _23 + 1;
  _25 = dns_servers[_24].u_addr.ip4.addr;
  iftmp.18 = _25 != 0;

  <bb 13> :
  if (iftmp.18 != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  ret = 1;

  <bb 15> :
  D.7780 = ret;

  <bb 16> :
<L15>:
  return D.7780;

}


dns_create_txid ()
{
  u8_t i;
  u16_t txid;
  u16_t D.7761;

  <bb 2> :
again:
  _1 = rand ();
  txid = (u16_t) _1;
  i = 0;
  goto <bb 7>; [INV]

  <bb 3> :
  _2 = (int) i;
  _3 = dns_table[_2].state;
  if (_3 == 2)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _4 = (int) i;
  _5 = dns_table[_4].txid;
  if (txid == _5)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  // predicted unlikely by goto predictor.
  goto <bb 2>; [INV]

  <bb 6> :
  i.17_6 = i;
  i = i.17_6 + 1;

  <bb 7> :
  if (i <= 3)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  D.7761 = txid;

  <bb 9> :
<L8>:
  return D.7761;

}


dns_call_found (u8_t idx, struct ip_addr_t * addr)
{
  u8_t i;

  <bb 2> :
  if (addr != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 3> :
  _1 = addr->type;
  if (_1 == 6)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  _2 = (int) idx;
  _3 = dns_table[_2].reqaddrtype;
  if (_3 != 3)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _4 = (int) idx;
  _5 = dns_table[_4].reqaddrtype;
  if (_5 != 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  __asm__ __volatile__("BKPT #0
	");
  goto <bb 6>; [INV]

  <bb 7> :
  _6 = (int) idx;
  dns_table[_6].reqaddrtype = 1;
  goto <bb 12>; [INV]

  <bb 8> :
  _7 = (int) idx;
  _8 = dns_table[_7].reqaddrtype;
  if (_8 == 3)
    goto <bb 10>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  _9 = (int) idx;
  _10 = dns_table[_9].reqaddrtype;
  if (_10 == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  __asm__ __volatile__("BKPT #0
	");
  goto <bb 10>; [INV]

  <bb 11> :
  _11 = (int) idx;
  dns_table[_11].reqaddrtype = 0;

  <bb 12> :
  i = 0;
  goto <bb 17>; [INV]

  <bb 13> :
  _12 = (int) i;
  _13 = dns_requests[_12].found;
  if (_13 != 0B)
    goto <bb 14>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 14> :
  _14 = (int) i;
  _15 = dns_requests[_14].dns_table_idx;
  if (idx == _15)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  _16 = (int) i;
  _17 = dns_requests[_16].found;
  _18 = (int) idx;
  _19 = &dns_table[_18].name;
  _20 = (int) i;
  _21 = dns_requests[_20].arg;
  _17 (_19, addr, _21);
  _22 = (int) i;
  dns_requests[_22].found = 0B;

  <bb 16> :
  i.15_23 = i;
  i = i.15_23 + 1;

  <bb 17> :
  if (i <= 3)
    goto <bb 13>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 18> :
  i = 0;
  goto <bb 25>; [INV]

  <bb 19> :
  if (i == idx)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  // predicted unlikely by continue predictor.
  goto <bb 24>; [INV]

  <bb 21> :
  _24 = (int) i;
  _25 = dns_table[_24].state;
  if (_25 == 2)
    goto <bb 22>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 22> :
  _26 = (int) i;
  _27 = dns_table[_26].pcb_idx;
  _28 = (int) idx;
  _29 = dns_table[_28].pcb_idx;
  if (_27 == _29)
    goto <bb 23>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 23> :
  _30 = (int) idx;
  dns_table[_30].pcb_idx = 4;
  goto <bb 26>; [INV]

  <bb 24> :
  i.16_31 = i;
  i = i.16_31 + 1;

  <bb 25> :
  if (i <= 3)
    goto <bb 19>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 26> :
  _32 = (int) idx;
  _33 = dns_table[_32].pcb_idx;
  if (_33 <= 3)
    goto <bb 27>; [INV]
  else
    goto <bb 28>; [INV]

  <bb 27> :
  _34 = (int) idx;
  _35 = dns_table[_34].pcb_idx;
  _36 = (int) _35;
  _37 = dns_pcbs[_36];
  udp_remove (_37);
  _38 = (int) idx;
  _39 = dns_table[_38].pcb_idx;
  _40 = (int) _39;
  dns_pcbs[_40] = 0B;
  _41 = (int) idx;
  dns_table[_41].pcb_idx = 4;

  <bb 28> :
  return;

}


dns_alloc_pcb ()
{
  u8_t idx;
  u8_t i;
  u8_t D.7727;

  <bb 2> :
  i = 0;
  goto <bb 6>; [INV]

  <bb 3> :
  _1 = (int) i;
  _2 = dns_pcbs[_1];
  if (_2 == 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  goto <bb 7>; [INV]

  <bb 5> :
  i.11_3 = i;
  i = i.11_3 + 1;

  <bb 6> :
  if (i <= 3)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  if (i <= 3)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 8> :
  _4 = (int) i;
  _5 = dns_alloc_random_port ();
  dns_pcbs[_4] = _5;
  _6 = (int) i;
  _7 = dns_pcbs[_6];
  if (_7 != 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  dns_last_pcb_idx = i;
  D.7727 = i;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 18>; [INV]

  <bb 10> :
  i = 0;
  dns_last_pcb_idx.12_8 = dns_last_pcb_idx;
  idx = dns_last_pcb_idx.12_8 + 1;
  goto <bb 16>; [INV]

  <bb 11> :
  if (idx > 3)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  idx = 0;

  <bb 13> :
  _9 = (int) idx;
  _10 = dns_pcbs[_9];
  if (_10 != 0B)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  dns_last_pcb_idx = idx;
  D.7727 = idx;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 18>; [INV]

  <bb 15> :
  i.13_11 = i;
  i = i.13_11 + 1;
  idx.14_12 = idx;
  idx = idx.14_12 + 1;

  <bb 16> :
  if (i <= 3)
    goto <bb 11>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 17> :
  D.7727 = 4;

  <bb 18> :
<L16>:
  return D.7727;

}


dns_alloc_random_port ()
{
  u16_t port;
  struct udp_pcb * pcb;
  err_t err;
  struct udp_pcb * D.7714;

  <bb 2> :
  pcb = udp_new_ip_type (46);
  if (pcb == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  D.7714 = 0B;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 11>; [INV]

  <bb 4> :
  _1 = rand ();
  port = (u16_t) _1;
  if (port > 1023)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  err = udp_bind (pcb, &ip_addr_any_type, port);
  goto <bb 7>; [INV]

  <bb 6> :
  err = -8;

  <bb 7> :
  if (err == -8)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  if (err != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  udp_remove (pcb);
  D.7714 = 0B;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 11>; [INV]

  <bb 10> :
  udp_recv (pcb, dns_recv, 0B);
  D.7714 = pcb;

  <bb 11> :
<L9>:
  return D.7714;

}


dns_send (u8_t idx)
{
  u16_t dst_port;
  const struct ip_addr_t * dst;
  struct dns_table_entry * entry;
  u8_t pcb_idx;
  u8_t n;
  const char * hostname_part;
  const char * hostname;
  u16_t copy_len;
  u16_t query_idx;
  struct pbuf * p;
  struct dns_query qry;
  struct dns_hdr hdr;
  err_t err;
  err_t D.7699;
  int iftmp.9;
  _Bool iftmp.8;

  <bb 2> :
  _1 = (int) idx;
  entry = &dns_table[_1];
  _2 = entry->server_idx;
  if (_2 > 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  __asm__ __volatile__("BKPT #0
	");
  goto <bb 3>; [INV]

  <bb 4> :
  _3 = entry->server_idx;
  _4 = (int) _3;
  _5 = dns_servers[_4].type;
  if (_5 == 6)
    goto <bb 5>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 5> :
  _6 = entry->server_idx;
  _7 = (int) _6;
  _8 = dns_servers[_7].u_addr.ip6.addr[0];
  if (_8 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 6> :
  _9 = entry->server_idx;
  _10 = (int) _9;
  _11 = dns_servers[_10].u_addr.ip6.addr[1];
  if (_11 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 7> :
  _12 = entry->server_idx;
  _13 = (int) _12;
  _14 = dns_servers[_13].u_addr.ip6.addr[2];
  if (_14 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 8> :
  _15 = entry->server_idx;
  _16 = (int) _15;
  _17 = dns_servers[_16].u_addr.ip6.addr[3];
  if (_17 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  iftmp.9 = 1;
  goto <bb 11>; [INV]

  <bb 10> :
  iftmp.9 = 0;

  <bb 11> :
  iftmp.8 = (_Bool) iftmp.9;
  goto <bb 13>; [INV]

  <bb 12> :
  _18 = entry->server_idx;
  _19 = (int) _18;
  _20 = dns_servers[_19].u_addr.ip4.addr;
  iftmp.8 = _20 == 0;

  <bb 13> :
  if (iftmp.8 != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  dns_call_found (idx, 0B);
  entry->state = 0;
  D.7699 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 32>; [INV]

  <bb 15> :
  _21 = &entry->name;
  _22 = strlen (_21);
  _23 = (short unsigned int) _22;
  _24 = _23 + 18;
  p = pbuf_alloc (74, _24, 640);
  if (p != 0B)
    goto <bb 16>; [INV]
  else
    goto <bb 29>; [INV]

  <bb 16> :
  memset (&hdr, 0, 12);
  _25 = entry->txid;
  _26 = lwip_htons (_25);
  hdr.id = _26;
  hdr.flags1 = 1;
  hdr.numquestions = 256;
  pbuf_take (p, &hdr, 12);
  hostname = &entry->name;
  hostname = hostname + 4294967295;
  query_idx = 12;

  <bb 17> :
  hostname = hostname + 1;
  hostname_part = hostname;
  n = 0;
  goto <bb 19>; [INV]

  <bb 18> :
  n = n + 1;
  hostname = hostname + 1;

  <bb 19> :
  _27 = *hostname;
  if (_27 != 46)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  _28 = *hostname;
  if (_28 != 0)
    goto <bb 18>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 21> :
  _29 = hostname - hostname_part;
  copy_len = (u16_t) _29;
  _30 = (int) query_idx;
  _31 = (int) n;
  _32 = _30 + _31;
  if (_32 > 65534)
    goto <bb 22>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 22> :
  // predicted unlikely by goto predictor.
  goto <bb 31>; [INV]

  <bb 23> :
  pbuf_put_at (p, query_idx, n);
  _33 = query_idx + 1;
  pbuf_take_at (p, hostname_part, copy_len, _33);
  _34 = (short unsigned int) n;
  _35 = query_idx + _34;
  query_idx = _35 + 1;
  _36 = *hostname;
  if (_36 != 0)
    goto <bb 17>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 24> :
  pbuf_put_at (p, query_idx, 0);
  query_idx.10_37 = query_idx;
  query_idx = query_idx.10_37 + 1;
  _38 = entry->reqaddrtype;
  if (_38 == 3)
    goto <bb 26>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 25> :
  _39 = entry->reqaddrtype;
  if (_39 == 1)
    goto <bb 26>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 26> :
  qry.type = 7168;
  goto <bb 28>; [INV]

  <bb 27> :
  qry.type = 256;

  <bb 28> :
  qry.cls = 256;
  pbuf_take_at (p, &qry, 4, query_idx);
  pcb_idx = entry->pcb_idx;
  dst_port = 53;
  _40 = entry->server_idx;
  _41 = (int) _40;
  dst = &dns_servers[_41];
  _42 = (int) pcb_idx;
  _43 = dns_pcbs[_42];
  err = udp_sendto (_43, p, dst, dst_port);
  pbuf_free (p);
  goto <bb 30>; [INV]

  <bb 29> :
  err = -1;

  <bb 30> :
  D.7699 = err;
  goto <bb 32>; [INV]

  <bb 31> :
overflow_return:
  pbuf_free (p);
  D.7699 = -6;

  <bb 32> :
  hdr = {CLOBBER};
  qry = {CLOBBER};

  <bb 33> :
<L31>:
  return D.7699;

}


dns_skip_name (struct pbuf * p, u16_t query_idx)
{
  u16_t offset;
  int n;
  u16_t D.7674;

  <bb 2> :
  offset = query_idx;

  <bb 3> :
  offset.7_1 = offset;
  offset = offset.7_1 + 1;
  n = pbuf_try_get_at (p, offset.7_1);
  if (n < 0)
    goto <bb 5>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  if (offset == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  D.7674 = 65535;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 16>; [INV]

  <bb 6> :
  _2 = n & 192;
  if (_2 == 192)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  goto <bb 13>; [INV]

  <bb 8> :
  _3 = (int) offset;
  _4 = n + _3;
  _5 = p->tot_len;
  _6 = (int) _5;
  if (_4 >= _6)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  D.7674 = 65535;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 16>; [INV]

  <bb 10> :
  _7 = (short unsigned int) n;
  offset = offset + _7;
  n = pbuf_try_get_at (p, offset);
  if (n < 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  D.7674 = 65535;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 16>; [INV]

  <bb 12> :
  if (n != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  if (offset == 65535)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  D.7674 = 65535;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 16>; [INV]

  <bb 15> :
  D.7674 = offset + 1;

  <bb 16> :
<L13>:
  return D.7674;

}


dns_compare_name (const char * query, struct pbuf * p, u16_t start_offset)
{
  unsigned char __x;
  unsigned char __x;
  int c;
  u16_t response_offset;
  int n;
  int iftmp.5;
  int D.7423;
  int iftmp.4;
  int D.7421;
  u16_t D.7649;

  <bb 2> :
  response_offset = start_offset;

  <bb 3> :
  n = pbuf_try_get_at (p, response_offset);
  if (n < 0)
    goto <bb 5>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  if (response_offset == 65535)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  D.7649 = 65535;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 29>; [INV]

  <bb 6> :
  response_offset.3_1 = response_offset;
  response_offset = response_offset.3_1 + 1;
  _2 = n & 192;
  if (_2 == 192)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  D.7649 = 65535;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 29>; [INV]

  <bb 8> :
  goto <bb 22>; [INV]

  <bb 9> :
  c = pbuf_try_get_at (p, response_offset);
  if (c < 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  D.7649 = 65535;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 29>; [INV]

  <bb 11> :
  __x = *query;
  _3 = (sizetype) __x;
  _4 = _3 + 1;
  _5 = &_ctype_ + _4;
  _6 = *_5;
  _7 = (int) _6;
  _8 = _7 & 3;
  if (_8 == 1)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  _9 = (int) __x;
  iftmp.4 = _9 + 32;
  goto <bb 14>; [INV]

  <bb 13> :
  iftmp.4 = (int) __x;

  <bb 14> :
  D.7421 = iftmp.4;
  __x = (unsigned char) c;
  _10 = (sizetype) __x;
  _11 = _10 + 1;
  _12 = &_ctype_ + _11;
  _13 = *_12;
  _14 = (int) _13;
  _15 = _14 & 3;
  if (_15 == 1)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  _16 = (int) __x;
  iftmp.5 = _16 + 32;
  goto <bb 17>; [INV]

  <bb 16> :
  iftmp.5 = (int) __x;

  <bb 17> :
  D.7423 = iftmp.5;
  if (D.7421 != D.7423)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  D.7649 = 65535;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 29>; [INV]

  <bb 19> :
  if (response_offset == 65535)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  D.7649 = 65535;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 29>; [INV]

  <bb 21> :
  response_offset.6_17 = response_offset;
  response_offset = response_offset.6_17 + 1;
  query = query + 1;
  n = n + -1;

  <bb 22> :
  if (n > 0)
    goto <bb 9>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 23> :
  query = query + 1;
  n = pbuf_try_get_at (p, response_offset);
  if (n < 0)
    goto <bb 24>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 24> :
  D.7649 = 65535;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 29>; [INV]

  <bb 25> :
  if (n != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 26> :
  if (response_offset == 65535)
    goto <bb 27>; [INV]
  else
    goto <bb 28>; [INV]

  <bb 27> :
  D.7649 = 65535;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 29>; [INV]

  <bb 28> :
  D.7649 = response_offset + 1;

  <bb 29> :
<L26>:
  return D.7649;

}


dns_lookup (const char * name, struct ip_addr_t * addr, u8_t dns_addrtype)
{
  u8_t i;
  err_t D.7644;
  int iftmp.2;
  int iftmp.1;
  _Bool iftmp.0;

  <bb 2> :
  i = 0;
  goto <bb 24>; [INV]

  <bb 3> :
  _1 = (int) i;
  _2 = dns_table[_1].state;
  if (_2 == 3)
    goto <bb 4>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 4> :
  _3 = (int) i;
  _4 = &dns_table[_3].name;
  _5 = lwip_strnicmp (name, _4, 256);
  if (_5 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 5> :
  _6 = (int) i;
  _7 = dns_table[_6].ipaddr.type;
  if (_7 == 6)
    goto <bb 6>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 6> :
  if (dns_addrtype == 3)
    goto <bb 8>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  if (dns_addrtype == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  iftmp.1 = 1;
  goto <bb 10>; [INV]

  <bb 9> :
  iftmp.1 = 0;

  <bb 10> :
  iftmp.0 = (_Bool) iftmp.1;
  goto <bb 16>; [INV]

  <bb 11> :
  if (dns_addrtype != 3)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 12> :
  if (dns_addrtype != 1)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  iftmp.2 = 1;
  goto <bb 15>; [INV]

  <bb 14> :
  iftmp.2 = 0;

  <bb 15> :
  iftmp.0 = (_Bool) iftmp.2;

  <bb 16> :
  if (iftmp.0 != 0)
    goto <bb 17>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 17> :
  _8 = (int) i;
  _9 = dns_table[_8].ipaddr.type;

  <bb 18> :
  if (addr != 0B)
    goto <bb 19>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 19> :
  _10 = (int) i;
  _11 = dns_table[_10].ipaddr.type;
  addr->type = _11;
  _12 = (int) i;
  _13 = dns_table[_12].ipaddr.type;
  if (_13 == 6)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  _14 = (int) i;
  _15 = dns_table[_14].ipaddr.u_addr.ip6.addr[0];
  addr->u_addr.ip6.addr[0] = _15;
  _16 = (int) i;
  _17 = dns_table[_16].ipaddr.u_addr.ip6.addr[1];
  addr->u_addr.ip6.addr[1] = _17;
  _18 = (int) i;
  _19 = dns_table[_18].ipaddr.u_addr.ip6.addr[2];
  addr->u_addr.ip6.addr[2] = _19;
  _20 = (int) i;
  _21 = dns_table[_20].ipaddr.u_addr.ip6.addr[3];
  addr->u_addr.ip6.addr[3] = _21;
  _22 = (int) i;
  _23 = dns_table[_22].ipaddr.u_addr.ip6.zone;
  addr->u_addr.ip6.zone = _23;
  goto <bb 22>; [INV]

  <bb 21> :
  _24 = (int) i;
  _25 = dns_table[_24].ipaddr.u_addr.ip4.addr;
  addr->u_addr.ip4.addr = _25;
  addr->u_addr.ip6.addr[3] = 0;
  _26 = addr->u_addr.ip6.addr[3];
  addr->u_addr.ip6.addr[2] = _26;
  _27 = addr->u_addr.ip6.addr[2];
  addr->u_addr.ip6.addr[1] = _27;
  addr->u_addr.ip6.zone = 0;

  <bb 22> :
  D.7644 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 26>; [INV]

  <bb 23> :
  i = i + 1;

  <bb 24> :
  if (i <= 3)
    goto <bb 3>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 25> :
  D.7644 = -16;

  <bb 26> :
<L28>:
  return D.7644;

}


dns_tmr ()
{
  <bb 2> :
  dns_check_entries ();
  return;

}


dns_getserver (u8_t numdns)
{
  const struct ip_addr_t * D.7614;

  <bb 2> :
  if (numdns <= 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 = (int) numdns;
  D.7614 = &dns_servers[_1];
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 5>; [INV]

  <bb 4> :
  D.7614 = &ip_addr_any;
  // predicted unlikely by early return (on trees) predictor.

  <bb 5> :
<L2>:
  return D.7614;

}


dns_setserver (u8_t numdns, const struct ip_addr_t * dnsserver)
{
  <bb 2> :
  if (numdns <= 1)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  if (dnsserver != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _1 = (int) numdns;
  dns_servers[_1] = *dnsserver;
  goto <bb 6>; [INV]

  <bb 5> :
  _2 = (int) numdns;
  dns_servers[_2] = ip_addr_any;

  <bb 6> :
  return;

}


dns_init ()
{
  <bb 2> :

  <bb 3> :
  return;

}


