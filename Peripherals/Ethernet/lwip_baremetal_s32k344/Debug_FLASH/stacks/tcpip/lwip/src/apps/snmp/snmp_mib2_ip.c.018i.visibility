
Marking local functions:


Marking externally visible functions:


Marking externally visible variables: snmp_mib2_at_root/47 snmp_mib2_ip_root/43


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

snmp_table_simple_get_next_instance/64 (snmp_table_simple_get_next_instance) @06dc1c40
  Type: function
  Visibility: external public
  Address is taken.
  References: 
  Referring: ip_AddrTable/37 (addr) ip_RouteTable/39 (addr) ip_NetToMediaTable/41 (addr) at_Table/45 (addr) 
  Availability: not_available
  Function flags:
  Called by: 
  Calls: 
snmp_table_simple_get_instance/63 (snmp_table_simple_get_instance) @06dc1b60
  Type: function
  Visibility: external public
  Address is taken.
  References: 
  Referring: ip_AddrTable/37 (addr) ip_RouteTable/39 (addr) ip_NetToMediaTable/41 (addr) at_Table/45 (addr) 
  Availability: not_available
  Function flags:
  Called by: 
  Calls: 
snmp_scalar_get_next_instance/62 (snmp_scalar_get_next_instance) @06dc18c0
  Type: function
  Visibility: external public
  Address is taken.
  References: 
  Referring: ip_Forwarding/16 (addr) ip_DefaultTTL/17 (addr) ip_InReceives/18 (addr) ip_InHdrErrors/19 (addr) ip_InAddrErrors/20 (addr) ip_ForwDatagrams/21 (addr) ip_InUnknownProtos/22 (addr) ip_InDiscards/23 (addr) ip_InDelivers/24 (addr) ip_OutRequests/25 (addr) ip_OutDiscards/26 (addr) ip_OutNoRoutes/27 (addr) ip_ReasmTimeout/28 (addr) ip_ReasmReqds/29 (addr) ip_ReasmOKs/30 (addr) ip_ReasmFails/31 (addr) ip_FragOKs/32 (addr) ip_FragFails/33 (addr) ip_FragCreates/34 (addr) ip_RoutingDiscards/35 (addr) 
  Availability: not_available
  Function flags:
  Called by: 
  Calls: 
snmp_scalar_get_instance/61 (snmp_scalar_get_instance) @06dc17e0
  Type: function
  Visibility: external public
  Address is taken.
  References: 
  Referring: ip_Forwarding/16 (addr) ip_DefaultTTL/17 (addr) ip_InReceives/18 (addr) ip_InHdrErrors/19 (addr) ip_InAddrErrors/20 (addr) ip_ForwDatagrams/21 (addr) ip_InUnknownProtos/22 (addr) ip_InDiscards/23 (addr) ip_InDelivers/24 (addr) ip_OutRequests/25 (addr) ip_OutDiscards/26 (addr) ip_OutNoRoutes/27 (addr) ip_ReasmTimeout/28 (addr) ip_ReasmReqds/29 (addr) ip_ReasmOKs/30 (addr) ip_ReasmFails/31 (addr) ip_FragOKs/32 (addr) ip_FragFails/33 (addr) ip_FragCreates/34 (addr) ip_RoutingDiscards/35 (addr) 
  Availability: not_available
  Function flags:
  Called by: 
  Calls: 
etharp_get_entry/60 (etharp_get_entry) @06dc1540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: ip_NetToMediaTable_get_next_cell_instance_and_value/15 ip_NetToMediaTable_get_cell_value/14 ip_NetToMediaTable_get_cell_value_core/13 
  Calls: 
netif_default/59 (netif_default) @06dd7e10
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: ip_RouteTable_get_cell_value/10 (read) ip_RouteTable_get_cell_value/10 (read) ip_RouteTable_get_next_cell_instance_and_value/11 (read) ip_RouteTable_get_next_cell_instance_and_value/11 (read) 
  Availability: not_available
  Varpool flags:
snmp_zero_dot_zero/58 (snmp_zero_dot_zero) @06dd77e0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: ip_RouteTable_get_cell_value_core/9 (read) ip_RouteTable_get_cell_value_core/9 (read) 
  Availability: not_available
  Varpool flags: read-only
ip_addr_any/57 (ip_addr_any) @06dd7750
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: ip_RouteTable_get_cell_value_core/9 (read) ip_RouteTable_get_cell_value_core/9 (read) ip_RouteTable_get_next_cell_instance_and_value/11 (addr) 
  Availability: not_available
  Varpool flags: read-only
snmp_oid_assign/56 (snmp_oid_assign) @06d91540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: ip_NetToMediaTable_get_next_cell_instance_and_value/15 ip_RouteTable_get_next_cell_instance_and_value/11 ip_AddrTable_get_next_cell_instance_and_value/7 
  Calls: 
snmp_next_oid_check/55 (snmp_next_oid_check) @06d91ee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: ip_NetToMediaTable_get_next_cell_instance_and_value/15 ip_RouteTable_get_next_cell_instance_and_value/11 ip_RouteTable_get_next_cell_instance_and_value/11 ip_AddrTable_get_next_cell_instance_and_value/7 
  Calls: 
snmp_ip4_to_oid/54 (snmp_ip4_to_oid) @06d91e00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: ip_NetToMediaTable_get_next_cell_instance_and_value/15 ip_RouteTable_get_next_cell_instance_and_value/11 ip_RouteTable_get_next_cell_instance_and_value/11 ip_AddrTable_get_next_cell_instance_and_value/7 
  Calls: 
snmp_next_oid_init/53 (snmp_next_oid_init) @06d91d20
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: ip_NetToMediaTable_get_next_cell_instance_and_value/15 ip_RouteTable_get_next_cell_instance_and_value/11 ip_AddrTable_get_next_cell_instance_and_value/7 
  Calls: 
netif_list/52 (netif_list) @06dbb8b8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: ip_AddrTable_get_cell_value/6 (read) ip_AddrTable_get_next_cell_instance_and_value/7 (read) ip_RouteTable_get_cell_value/10 (read) ip_RouteTable_get_next_cell_instance_and_value/11 (read) 
  Availability: not_available
  Varpool flags:
snmp_oid_to_ip4/51 (snmp_oid_to_ip4) @06d91b60
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: ip_NetToMediaTable_get_cell_value/14 ip_RouteTable_get_next_cell_instance_and_value/11 ip_RouteTable_get_cell_value/10 ip_AddrTable_get_cell_value/6 
  Calls: 
snmp_oid_in_range/50 (snmp_oid_in_range) @06d91a80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: ip_NetToMediaTable_get_cell_value/14 ip_RouteTable_get_cell_value/10 ip_AddrTable_get_cell_value/6 
  Calls: 
netif_to_num/49 (netif_to_num) @06d918c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: ip_NetToMediaTable_get_next_cell_instance_and_value/15 ip_NetToMediaTable_get_cell_value/14 ip_NetToMediaTable_get_cell_value_core/13 ip_RouteTable_get_cell_value_core/9 ip_AddrTable_get_cell_value_core/5 
  Calls: 
lwip_stats/48 (lwip_stats) @06d8ccf0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: ip_get_value/1 (read) ip_get_value/1 (read) ip_get_value/1 (read) ip_get_value/1 (read) ip_get_value/1 (read) ip_get_value/1 (read) ip_get_value/1 (read) ip_get_value/1 (read) ip_get_value/1 (read) ip_get_value/1 (read) ip_get_value/1 (read) ip_get_value/1 (read) ip_get_value/1 (read) ip_get_value/1 (read) ip_get_value/1 (read) ip_get_value/1 (read) 
  Availability: not_available
  Varpool flags:
snmp_mib2_at_root/47 (snmp_mib2_at_root) @06d8c2d0
  Type: variable definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: at_nodes/46 (addr) 
  Referring: 
  Availability: available
  Varpool flags: initialized read-only const-value-known
at_nodes/46 (at_nodes) @06d8c240
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: at_Table/45 (addr) 
  Referring: snmp_mib2_at_root/47 (addr) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
at_Table/45 (at_Table) @06d8c1b0
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: snmp_table_simple_get_instance/63 (addr) snmp_table_simple_get_next_instance/64 (addr) at_Table_columns/44 (addr) ip_NetToMediaTable_get_cell_value/14 (addr) ip_NetToMediaTable_get_next_cell_instance_and_value/15 (addr) 
  Referring: at_nodes/46 (addr) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
at_Table_columns/44 (at_Table_columns) @06d8c0d8
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: at_Table/45 (addr) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
snmp_mib2_ip_root/43 (snmp_mib2_ip_root) @06d8c048
  Type: variable definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: ip_nodes/42 (addr) 
  Referring: 
  Availability: available
  Varpool flags: initialized read-only const-value-known
ip_nodes/42 (ip_nodes) @06d6bca8
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: ip_Forwarding/16 (addr) ip_DefaultTTL/17 (addr) ip_InReceives/18 (addr) ip_InHdrErrors/19 (addr) ip_InAddrErrors/20 (addr) ip_ForwDatagrams/21 (addr) ip_InUnknownProtos/22 (addr) ip_InDiscards/23 (addr) ip_InDelivers/24 (addr) ip_OutRequests/25 (addr) ip_OutDiscards/26 (addr) ip_OutNoRoutes/27 (addr) ip_ReasmTimeout/28 (addr) ip_ReasmReqds/29 (addr) ip_ReasmOKs/30 (addr) ip_ReasmFails/31 (addr) ip_FragOKs/32 (addr) ip_FragFails/33 (addr) ip_FragCreates/34 (addr) ip_AddrTable/37 (addr) ip_RouteTable/39 (addr) ip_NetToMediaTable/41 (addr) ip_RoutingDiscards/35 (addr) 
  Referring: snmp_mib2_ip_root/43 (addr) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
ip_NetToMediaTable/41 (ip_NetToMediaTable) @06d6bf30
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: snmp_table_simple_get_instance/63 (addr) snmp_table_simple_get_next_instance/64 (addr) ip_NetToMediaTable_columns/40 (addr) ip_NetToMediaTable_get_cell_value/14 (addr) ip_NetToMediaTable_get_next_cell_instance_and_value/15 (addr) 
  Referring: ip_nodes/42 (addr) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
ip_NetToMediaTable_columns/40 (ip_NetToMediaTable_columns) @06d6be58
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: ip_NetToMediaTable/41 (addr) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
ip_RouteTable/39 (ip_RouteTable) @06d6bdc8
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: snmp_table_simple_get_instance/63 (addr) snmp_table_simple_get_next_instance/64 (addr) ip_RouteTable_columns/38 (addr) ip_RouteTable_get_cell_value/10 (addr) ip_RouteTable_get_next_cell_instance_and_value/11 (addr) 
  Referring: ip_nodes/42 (addr) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
ip_RouteTable_columns/38 (ip_RouteTable_columns) @06d6bcf0
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: ip_RouteTable/39 (addr) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
ip_AddrTable/37 (ip_AddrTable) @06d6bc18
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: snmp_table_simple_get_instance/63 (addr) snmp_table_simple_get_next_instance/64 (addr) ip_AddrTable_columns/36 (addr) ip_AddrTable_get_cell_value/6 (addr) ip_AddrTable_get_next_cell_instance_and_value/7 (addr) 
  Referring: ip_nodes/42 (addr) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
ip_AddrTable_columns/36 (ip_AddrTable_columns) @06d6bb40
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: ip_AddrTable/37 (addr) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
ip_RoutingDiscards/35 (ip_RoutingDiscards) @06d6ba68
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: snmp_scalar_get_instance/61 (addr) snmp_scalar_get_next_instance/62 (addr) ip_get_value/1 (addr) 
  Referring: ip_nodes/42 (addr) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
ip_FragCreates/34 (ip_FragCreates) @06d6b990
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: snmp_scalar_get_instance/61 (addr) snmp_scalar_get_next_instance/62 (addr) ip_get_value/1 (addr) 
  Referring: ip_nodes/42 (addr) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
ip_FragFails/33 (ip_FragFails) @06d6b8b8
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: snmp_scalar_get_instance/61 (addr) snmp_scalar_get_next_instance/62 (addr) ip_get_value/1 (addr) 
  Referring: ip_nodes/42 (addr) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
ip_FragOKs/32 (ip_FragOKs) @06d6b7e0
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: snmp_scalar_get_instance/61 (addr) snmp_scalar_get_next_instance/62 (addr) ip_get_value/1 (addr) 
  Referring: ip_nodes/42 (addr) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
ip_ReasmFails/31 (ip_ReasmFails) @06d6b708
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: snmp_scalar_get_instance/61 (addr) snmp_scalar_get_next_instance/62 (addr) ip_get_value/1 (addr) 
  Referring: ip_nodes/42 (addr) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
ip_ReasmOKs/30 (ip_ReasmOKs) @06d6b630
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: snmp_scalar_get_instance/61 (addr) snmp_scalar_get_next_instance/62 (addr) ip_get_value/1 (addr) 
  Referring: ip_nodes/42 (addr) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
ip_ReasmReqds/29 (ip_ReasmReqds) @06d6b558
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: snmp_scalar_get_instance/61 (addr) snmp_scalar_get_next_instance/62 (addr) ip_get_value/1 (addr) 
  Referring: ip_nodes/42 (addr) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
ip_ReasmTimeout/28 (ip_ReasmTimeout) @06d6b480
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: snmp_scalar_get_instance/61 (addr) snmp_scalar_get_next_instance/62 (addr) ip_get_value/1 (addr) 
  Referring: ip_nodes/42 (addr) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
ip_OutNoRoutes/27 (ip_OutNoRoutes) @06d6b3a8
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: snmp_scalar_get_instance/61 (addr) snmp_scalar_get_next_instance/62 (addr) ip_get_value/1 (addr) 
  Referring: ip_nodes/42 (addr) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
ip_OutDiscards/26 (ip_OutDiscards) @06d6b2d0
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: snmp_scalar_get_instance/61 (addr) snmp_scalar_get_next_instance/62 (addr) ip_get_value/1 (addr) 
  Referring: ip_nodes/42 (addr) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
ip_OutRequests/25 (ip_OutRequests) @06d6b1f8
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: snmp_scalar_get_instance/61 (addr) snmp_scalar_get_next_instance/62 (addr) ip_get_value/1 (addr) 
  Referring: ip_nodes/42 (addr) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
ip_InDelivers/24 (ip_InDelivers) @06d6b120
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: snmp_scalar_get_instance/61 (addr) snmp_scalar_get_next_instance/62 (addr) ip_get_value/1 (addr) 
  Referring: ip_nodes/42 (addr) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
ip_InDiscards/23 (ip_InDiscards) @06d6b048
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: snmp_scalar_get_instance/61 (addr) snmp_scalar_get_next_instance/62 (addr) ip_get_value/1 (addr) 
  Referring: ip_nodes/42 (addr) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
ip_InUnknownProtos/22 (ip_InUnknownProtos) @06d30f30
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: snmp_scalar_get_instance/61 (addr) snmp_scalar_get_next_instance/62 (addr) ip_get_value/1 (addr) 
  Referring: ip_nodes/42 (addr) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
ip_ForwDatagrams/21 (ip_ForwDatagrams) @06d30e58
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: snmp_scalar_get_instance/61 (addr) snmp_scalar_get_next_instance/62 (addr) ip_get_value/1 (addr) 
  Referring: ip_nodes/42 (addr) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
ip_InAddrErrors/20 (ip_InAddrErrors) @06d30d80
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: snmp_scalar_get_instance/61 (addr) snmp_scalar_get_next_instance/62 (addr) ip_get_value/1 (addr) 
  Referring: ip_nodes/42 (addr) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
ip_InHdrErrors/19 (ip_InHdrErrors) @06d30ca8
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: snmp_scalar_get_instance/61 (addr) snmp_scalar_get_next_instance/62 (addr) ip_get_value/1 (addr) 
  Referring: ip_nodes/42 (addr) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
ip_InReceives/18 (ip_InReceives) @06d30bd0
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: snmp_scalar_get_instance/61 (addr) snmp_scalar_get_next_instance/62 (addr) ip_get_value/1 (addr) 
  Referring: ip_nodes/42 (addr) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
ip_DefaultTTL/17 (ip_DefaultTTL) @06d30af8
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: snmp_scalar_get_instance/61 (addr) snmp_scalar_get_next_instance/62 (addr) ip_get_value/1 (addr) ip_set_test/2 (addr) ip_set_value/3 (addr) 
  Referring: ip_nodes/42 (addr) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
ip_Forwarding/16 (ip_Forwarding) @06d30a20
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: snmp_scalar_get_instance/61 (addr) snmp_scalar_get_next_instance/62 (addr) ip_get_value/1 (addr) ip_set_test/2 (addr) ip_set_value/3 (addr) 
  Referring: ip_nodes/42 (addr) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
ip_NetToMediaTable_get_next_cell_instance_and_value/15 (ip_NetToMediaTable_get_next_cell_instance_and_value) @06d64540
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: 
  Referring: ip_NetToMediaTable/41 (addr) at_Table/45 (addr) 
  Availability: available
  Function flags: body
  Called by: 
  Calls: ip_NetToMediaTable_get_cell_value_core/13 snmp_oid_assign/56 snmp_next_oid_check/55 snmp_ip4_to_oid/54 netif_to_num/49 etharp_get_entry/60 snmp_next_oid_init/53 
ip_NetToMediaTable_get_cell_value/14 (ip_NetToMediaTable_get_cell_value) @06d5be00
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: ip_NetToMediaTable_oid_ranges/12 (addr) 
  Referring: ip_NetToMediaTable/41 (addr) at_Table/45 (addr) 
  Availability: available
  Function flags: body
  Called by: 
  Calls: ip_NetToMediaTable_get_cell_value_core/13 netif_to_num/49 etharp_get_entry/60 snmp_oid_to_ip4/51 snmp_oid_in_range/50 
ip_NetToMediaTable_get_cell_value_core/13 (ip_NetToMediaTable_get_cell_value_core) @06d5b9a0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: ip_NetToMediaTable_get_next_cell_instance_and_value/15 ip_NetToMediaTable_get_cell_value/14 
  Calls: netif_to_num/49 etharp_get_entry/60 
ip_NetToMediaTable_oid_ranges/12 (ip_NetToMediaTable_oid_ranges) @06d305a0
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: ip_NetToMediaTable_get_cell_value/14 (addr) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
ip_RouteTable_get_next_cell_instance_and_value/11 (ip_RouteTable_get_next_cell_instance_and_value) @06d5b380
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: netif_default/59 (read) ip_addr_any/57 (addr) netif_default/59 (read) netif_list/52 (read) 
  Referring: ip_RouteTable/39 (addr) 
  Availability: available
  Function flags: body
  Called by: 
  Calls: ip_RouteTable_get_cell_value_core/9 snmp_oid_assign/56 snmp_oid_to_ip4/51 snmp_next_oid_check/55 snmp_ip4_to_oid/54 snmp_next_oid_check/55 snmp_ip4_to_oid/54 snmp_next_oid_init/53 
ip_RouteTable_get_cell_value/10 (ip_RouteTable_get_cell_value) @06d578c0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: ip_RouteTable_oid_ranges/8 (addr) netif_default/59 (read) netif_default/59 (read) netif_list/52 (read) 
  Referring: ip_RouteTable/39 (addr) 
  Availability: available
  Function flags: body
  Called by: 
  Calls: ip_RouteTable_get_cell_value_core/9 ip_RouteTable_get_cell_value_core/9 snmp_oid_to_ip4/51 snmp_oid_in_range/50 
ip_RouteTable_get_cell_value_core/9 (ip_RouteTable_get_cell_value_core) @06d570e0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: ip_addr_any/57 (read) ip_addr_any/57 (read) snmp_zero_dot_zero/58 (read) snmp_zero_dot_zero/58 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: ip_RouteTable_get_next_cell_instance_and_value/11 ip_RouteTable_get_cell_value/10 ip_RouteTable_get_cell_value/10 
  Calls: netif_to_num/49 
ip_RouteTable_oid_ranges/8 (ip_RouteTable_oid_ranges) @06d300d8
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: ip_RouteTable_get_cell_value/10 (addr) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
ip_AddrTable_get_next_cell_instance_and_value/7 (ip_AddrTable_get_next_cell_instance_and_value) @06d2f460
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: netif_list/52 (read) 
  Referring: ip_AddrTable/37 (addr) 
  Availability: available
  Function flags: body
  Called by: 
  Calls: ip_AddrTable_get_cell_value_core/5 snmp_oid_assign/56 snmp_next_oid_check/55 snmp_ip4_to_oid/54 snmp_next_oid_init/53 
ip_AddrTable_get_cell_value/6 (ip_AddrTable_get_cell_value) @06d29c40
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: ip_AddrTable_oid_ranges/4 (addr) netif_list/52 (read) 
  Referring: ip_AddrTable/37 (addr) 
  Availability: available
  Function flags: body
  Called by: 
  Calls: ip_AddrTable_get_cell_value_core/5 snmp_oid_to_ip4/51 snmp_oid_in_range/50 
ip_AddrTable_get_cell_value_core/5 (ip_AddrTable_get_cell_value_core) @06d29700
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: ip_AddrTable_get_next_cell_instance_and_value/7 ip_AddrTable_get_cell_value/6 
  Calls: netif_to_num/49 
ip_AddrTable_oid_ranges/4 (ip_AddrTable_oid_ranges) @06d19d80
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: ip_AddrTable_get_cell_value/6 (addr) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
ip_set_value/3 (ip_set_value) @06d1ec40
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: 
  Referring: ip_Forwarding/16 (addr) ip_DefaultTTL/17 (addr) 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
ip_set_test/2 (ip_set_test) @06d1e9a0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: 
  Referring: ip_Forwarding/16 (addr) ip_DefaultTTL/17 (addr) 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
ip_get_value/1 (ip_get_value) @06d1e700
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: lwip_stats/48 (read) lwip_stats/48 (read) lwip_stats/48 (read) lwip_stats/48 (read) lwip_stats/48 (read) lwip_stats/48 (read) lwip_stats/48 (read) lwip_stats/48 (read) lwip_stats/48 (read) lwip_stats/48 (read) lwip_stats/48 (read) lwip_stats/48 (read) lwip_stats/48 (read) lwip_stats/48 (read) lwip_stats/48 (read) lwip_stats/48 (read) 
  Referring: ip_Forwarding/16 (addr) ip_DefaultTTL/17 (addr) ip_InReceives/18 (addr) ip_InHdrErrors/19 (addr) ip_InAddrErrors/20 (addr) ip_ForwDatagrams/21 (addr) ip_InUnknownProtos/22 (addr) ip_InDiscards/23 (addr) ip_InDelivers/24 (addr) ip_OutRequests/25 (addr) ip_OutDiscards/26 (addr) ip_OutNoRoutes/27 (addr) ip_ReasmTimeout/28 (addr) ip_ReasmReqds/29 (addr) ip_ReasmOKs/30 (addr) ip_ReasmFails/31 (addr) ip_FragOKs/32 (addr) ip_FragFails/33 (addr) ip_FragCreates/34 (addr) ip_RoutingDiscards/35 (addr) 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
ip_NetToMediaTable_get_next_cell_instance_and_value (const u32_t * column, struct snmp_obj_id * row_oid, union snmp_variant_value * value, u32_t * value_len)
{
  u32_t test_oid[5];
  struct eth_addr * ethaddr;
  struct netif * netif;
  struct ip4_addr_t * ip;
  u32_t result_temp[5];
  struct snmp_next_oid_state state;
  size_t i;
  snmp_err_t D.7980;

  <bb 2> :
  _1 = &row_oid->id;
  _2 = row_oid->len;
  snmp_next_oid_init (&state, _1, _2, &result_temp, 5);
  i = 0;
  goto <bb 6>; [INV]

  <bb 3> :
  _3 = etharp_get_entry (i, &ip, &netif, &ethaddr);
  if (_3 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  netif.9_4 = netif;
  _5 = netif_to_num (netif.9_4);
  _6 = (long unsigned int) _5;
  test_oid[0] = _6;
  ip.10_7 = ip;
  snmp_ip4_to_oid (ip.10_7, &test_oid[1]);
  i.11_8 = (void *) i;
  snmp_next_oid_check (&state, &test_oid, 5, i.11_8);
  test_oid = {CLOBBER};

  <bb 5> :
  ip = {CLOBBER};
  netif = {CLOBBER};
  ethaddr = {CLOBBER};
  i = i + 1;

  <bb 6> :
  if (i <= 9)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _9 = state.status;
  if (_9 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  _10 = state.next_oid;
  _11 = state.next_oid_len;
  snmp_oid_assign (row_oid, _10, _11);
  _12 = state.reference;
  _13 = (unsigned int) _12;
  D.7980 = ip_NetToMediaTable_get_cell_value_core (_13, column, value, value_len);
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 10>; [INV]

  <bb 9> :
  D.7980 = 241;

  <bb 10> :
  state = {CLOBBER};
  result_temp = {CLOBBER};

  <bb 11> :
<L8>:
  return D.7980;

}


ip_NetToMediaTable_get_cell_value (const u32_t * column, const u32_t * row_oid, u8_t row_oid_len, union snmp_variant_value * value, u32_t * value_len)
{
  struct eth_addr * ethaddr;
  struct netif * netif;
  struct ip4_addr_t * ip;
  size_t i;
  u8_t netif_index;
  struct ip4_addr_t ip_in;
  snmp_err_t D.7965;

  <bb 2> :
  _1 = snmp_oid_in_range (row_oid, row_oid_len, &ip_NetToMediaTable_oid_ranges, 5);
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  D.7965 = 241;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 12>; [INV]

  <bb 4> :
  _2 = *row_oid;
  netif_index = (u8_t) _2;
  _3 = row_oid + 4;
  snmp_oid_to_ip4 (_3, &ip_in);
  i = 0;
  goto <bb 10>; [INV]

  <bb 5> :
  _4 = etharp_get_entry (i, &ip, &netif, &ethaddr);
  if (_4 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 6> :
  netif.7_5 = netif;
  _6 = netif_to_num (netif.7_5);
  if (netif_index == _6)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  _7 = ip_in.addr;
  ip.8_8 = ip;
  _9 = ip.8_8->addr;
  if (_7 == _9)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  D.7965 = ip_NetToMediaTable_get_cell_value_core (i, column, value, value_len);
  // predicted unlikely by early return (on trees) predictor.
  ip = {CLOBBER};
  netif = {CLOBBER};
  ethaddr = {CLOBBER};
  goto <bb 12>; [INV]

  <bb 9> :
  ip = {CLOBBER};
  netif = {CLOBBER};
  ethaddr = {CLOBBER};
  i = i + 1;

  <bb 10> :
  if (i <= 9)
    goto <bb 5>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  D.7965 = 241;

  <bb 12> :
  ip_in = {CLOBBER};

  <bb 13> :
<L14>:
  return D.7965;

}


ip_NetToMediaTable_get_cell_value_core (size_t arp_table_index, const u32_t * column, union snmp_variant_value * value, u32_t * value_len)
{
  struct eth_addr * ethaddr;
  struct netif * netif;
  struct ip4_addr_t * ip;
  snmp_err_t D.7960;

  <bb 2> :
  etharp_get_entry (arp_table_index, &ip, &netif, &ethaddr);
  _1 = *column;
  switch (_1) <default: <L4> [INV], case 1: <L0> [INV], case 2: <L1> [INV], case 3: <L2> [INV], case 4: <L3> [INV]>

  <bb 3> :
<L0>:
  netif.4_2 = netif;
  _3 = netif_to_num (netif.4_2);
  _4 = (long unsigned int) _3;
  value->u32 = _4;
  goto <bb 8>; [INV]

  <bb 4> :
<L1>:
  ethaddr.5_5 = ethaddr;
  value->ptr = ethaddr.5_5;
  *value_len = 6;
  goto <bb 8>; [INV]

  <bb 5> :
<L2>:
  ip.6_6 = ip;
  _7 = ip.6_6->addr;
  value->u32 = _7;
  goto <bb 8>; [INV]

  <bb 6> :
<L3>:
  value->u32 = 3;
  goto <bb 8>; [INV]

  <bb 7> :
<L4>:
  D.7960 = 241;
  goto <bb 9>; [INV]

  <bb 8> :
  D.7960 = 0;

  <bb 9> :
  ip = {CLOBBER};
  netif = {CLOBBER};
  ethaddr = {CLOBBER};

  <bb 10> :
<L7>:
  return D.7960;

}


ip_RouteTable_get_next_cell_instance_and_value (const u32_t * column, struct snmp_obj_id * row_oid, union snmp_variant_value * value, u32_t * value_len)
{
  struct ip4_addr_t dst;
  struct ip4_addr_t dst;
  u32_t test_oid[4];
  u32_t result_temp[4];
  struct snmp_next_oid_state state;
  struct netif * netif;
  snmp_err_t D.7956;

  <bb 2> :
  _1 = &row_oid->id;
  _2 = row_oid->len;
  snmp_next_oid_init (&state, _1, _2, &result_temp, 4);
  netif_default.2_3 = netif_default;
  if (netif_default.2_3 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  snmp_ip4_to_oid (&ip_addr_any.u_addr.ip4, &test_oid[0]);
  netif_default.3_4 = netif_default;
  snmp_next_oid_check (&state, &test_oid, 4, netif_default.3_4);

  <bb 4> :
  netif = netif_list;
  goto <bb 8>; [INV]

  <bb 5> :
  _5 = &netif->ip_addr.u_addr.ip4;
  _6 = MEM[(const struct ip4_addr_t *)_5].addr;
  _7 = &netif->netmask.u_addr.ip4;
  _8 = MEM[(const struct ip4_addr_t *)_7].addr;
  _9 = _6 & _8;
  dst.addr = _9;
  _10 = dst.addr;
  if (_10 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  snmp_ip4_to_oid (&dst, &test_oid[0]);
  snmp_next_oid_check (&state, &test_oid, 4, netif);

  <bb 7> :
  dst = {CLOBBER};
  netif = netif->next;

  <bb 8> :
  if (netif != 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  _11 = state.status;
  if (_11 == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  snmp_oid_to_ip4 (&result_temp[0], &dst);
  _12 = state.next_oid;
  _13 = state.next_oid_len;
  snmp_oid_assign (row_oid, _12, _13);
  _14 = state.reference;
  _15 = dst.addr;
  _16 = _15 == 0;
  _17 = (unsigned char) _16;
  D.7956 = ip_RouteTable_get_cell_value_core (_14, _17, column, value, value_len);
  // predicted unlikely by early return (on trees) predictor.
  dst = {CLOBBER};
  goto <bb 12>; [INV]

  <bb 11> :
  D.7956 = 241;
  // predicted unlikely by early return (on trees) predictor.

  <bb 12> :
  state = {CLOBBER};
  result_temp = {CLOBBER};
  test_oid = {CLOBBER};

  <bb 13> :
<L11>:
  return D.7956;

}


ip_RouteTable_get_cell_value (const u32_t * column, const u32_t * row_oid, u8_t row_oid_len, union snmp_variant_value * value, u32_t * value_len)
{
  struct ip4_addr_t dst;
  struct netif * netif;
  struct ip4_addr_t test_ip;
  snmp_err_t D.7939;

  <bb 2> :
  _1 = snmp_oid_in_range (row_oid, row_oid_len, &ip_RouteTable_oid_ranges, 4);
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  D.7939 = 241;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 13>; [INV]

  <bb 4> :
  snmp_oid_to_ip4 (row_oid, &test_ip);
  _2 = test_ip.addr;
  if (_2 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  netif_default.0_3 = netif_default;
  if (netif_default.0_3 != 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  netif_default.1_4 = netif_default;
  D.7939 = ip_RouteTable_get_cell_value_core (netif_default.1_4, 1, column, value, value_len);
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 13>; [INV]

  <bb 7> :
  netif = netif_list;
  goto <bb 11>; [INV]

  <bb 8> :
  _5 = &netif->ip_addr.u_addr.ip4;
  _6 = MEM[(const struct ip4_addr_t *)_5].addr;
  _7 = &netif->netmask.u_addr.ip4;
  _8 = MEM[(const struct ip4_addr_t *)_7].addr;
  _9 = _6 & _8;
  dst.addr = _9;
  _10 = dst.addr;
  _11 = test_ip.addr;
  if (_10 == _11)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  D.7939 = ip_RouteTable_get_cell_value_core (netif, 0, column, value, value_len);
  // predicted unlikely by early return (on trees) predictor.
  dst = {CLOBBER};
  goto <bb 13>; [INV]

  <bb 10> :
  dst = {CLOBBER};
  netif = netif->next;

  <bb 11> :
  if (netif != 0B)
    goto <bb 8>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  D.7939 = 241;

  <bb 13> :
  test_ip = {CLOBBER};

  <bb 14> :
<L14>:
  return D.7939;

}


ip_RouteTable_get_cell_value_core (struct netif * netif, u8_t default_route, const u32_t * column, union snmp_variant_value * value, u32_t * value_len)
{
  struct ip4_addr_t tmp;
  snmp_err_t D.7935;

  <bb 2> :
  _1 = *column;
  switch (_1) <default: <L28> [INV], case 1: <L0> [INV], case 2: <L4> [INV], case 3: <L5> [INV], case 4 ... 6: <L9> [INV], case 7: <L12> [INV], case 8: <L16> [INV], case 9: <L20> [INV], case 10: <L21> [INV], case 11: <L22> [INV], case 12: <L26> [INV], case 13: <L27> [INV]>

  <bb 3> :
<L0>:
  if (default_route != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _2 = ip_addr_any.u_addr.ip4.addr;
  value->u32 = _2;
  goto <bb 6>; [INV]

  <bb 5> :
  _3 = &netif->ip_addr.u_addr.ip4;
  _4 = MEM[(const struct ip4_addr_t *)_3].addr;
  _5 = &netif->netmask.u_addr.ip4;
  _6 = MEM[(const struct ip4_addr_t *)_5].addr;
  _7 = _4 & _6;
  tmp.addr = _7;
  _8 = tmp.addr;
  value->u32 = _8;
  tmp = {CLOBBER};

  <bb 6> :
  goto <bb 30>; [INV]

  <bb 7> :
<L4>:
  _9 = netif_to_num (netif);
  _10 = (long unsigned int) _9;
  value->u32 = _10;
  goto <bb 30>; [INV]

  <bb 8> :
<L5>:
  if (default_route != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  value->s32 = 1;
  goto <bb 11>; [INV]

  <bb 10> :
  value->s32 = 0;

  <bb 11> :
  goto <bb 30>; [INV]

  <bb 12> :
<L9>:
  value->s32 = -1;
  goto <bb 30>; [INV]

  <bb 13> :
<L12>:
  if (default_route != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  _11 = &netif->gw.u_addr.ip4;
  _12 = MEM[(const struct ip4_addr_t *)_11].addr;
  value->u32 = _12;
  goto <bb 16>; [INV]

  <bb 15> :
  _13 = &netif->ip_addr.u_addr.ip4;
  _14 = MEM[(const struct ip4_addr_t *)_13].addr;
  value->u32 = _14;

  <bb 16> :
  goto <bb 30>; [INV]

  <bb 17> :
<L16>:
  if (default_route != 0)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  value->u32 = 4;
  goto <bb 20>; [INV]

  <bb 19> :
  value->u32 = 3;

  <bb 20> :
  goto <bb 30>; [INV]

  <bb 21> :
<L20>:
  value->u32 = 2;
  goto <bb 30>; [INV]

  <bb 22> :
<L21>:
  value->u32 = 0;
  goto <bb 30>; [INV]

  <bb 23> :
<L22>:
  if (default_route != 0)
    goto <bb 24>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 24> :
  _15 = ip_addr_any.u_addr.ip4.addr;
  value->u32 = _15;
  goto <bb 26>; [INV]

  <bb 25> :
  _16 = &netif->netmask.u_addr.ip4;
  _17 = MEM[(const struct ip4_addr_t *)_16].addr;
  value->u32 = _17;

  <bb 26> :
  goto <bb 30>; [INV]

  <bb 27> :
<L26>:
  value->s32 = -1;
  goto <bb 30>; [INV]

  <bb 28> :
<L27>:
  _18 = snmp_zero_dot_zero.id;
  value->const_ptr = _18;
  _19 = snmp_zero_dot_zero.len;
  _20 = (unsigned int) _19;
  _21 = _20 * 4;
  *value_len = _21;
  goto <bb 30>; [INV]

  <bb 29> :
<L28>:
  D.7935 = 241;
  goto <bb 31>; [INV]

  <bb 30> :
  D.7935 = 0;

  <bb 31> :
<L30>:
  return D.7935;

}


ip_AddrTable_get_next_cell_instance_and_value (const u32_t * column, struct snmp_obj_id * row_oid, union snmp_variant_value * value, u32_t * value_len)
{
  u32_t test_oid[4];
  u32_t result_temp[4];
  struct snmp_next_oid_state state;
  struct netif * netif;
  snmp_err_t D.7917;

  <bb 2> :
  _1 = &row_oid->id;
  _2 = row_oid->len;
  snmp_next_oid_init (&state, _1, _2, &result_temp, 4);
  netif = netif_list;
  goto <bb 4>; [INV]

  <bb 3> :
  _3 = &netif->ip_addr.u_addr.ip4;
  snmp_ip4_to_oid (_3, &test_oid[0]);
  snmp_next_oid_check (&state, &test_oid, 4, netif);
  test_oid = {CLOBBER};
  netif = netif->next;

  <bb 4> :
  if (netif != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  _4 = state.status;
  if (_4 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _5 = state.next_oid;
  _6 = state.next_oid_len;
  snmp_oid_assign (row_oid, _5, _6);
  _7 = state.reference;
  D.7917 = ip_AddrTable_get_cell_value_core (_7, column, value, value_len);
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 8>; [INV]

  <bb 7> :
  D.7917 = 241;

  <bb 8> :
  state = {CLOBBER};
  result_temp = {CLOBBER};

  <bb 9> :
<L6>:
  return D.7917;

}


ip_AddrTable_get_cell_value (const u32_t * column, const u32_t * row_oid, u8_t row_oid_len, union snmp_variant_value * value, u32_t * value_len)
{
  struct netif * netif;
  struct ip4_addr_t ip;
  snmp_err_t D.7910;

  <bb 2> :
  _1 = snmp_oid_in_range (row_oid, row_oid_len, &ip_AddrTable_oid_ranges, 4);
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  D.7910 = 241;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 10>; [INV]

  <bb 4> :
  snmp_oid_to_ip4 (row_oid, &ip);
  netif = netif_list;
  goto <bb 8>; [INV]

  <bb 5> :
  _2 = ip.addr;
  _3 = &netif->ip_addr.u_addr.ip4;
  _4 = MEM[(const struct ip4_addr_t *)_3].addr;
  if (_2 == _4)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  D.7910 = ip_AddrTable_get_cell_value_core (netif, column, value, value_len);
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 10>; [INV]

  <bb 7> :
  netif = netif->next;

  <bb 8> :
  if (netif != 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  D.7910 = 241;

  <bb 10> :
  ip = {CLOBBER};

  <bb 11> :
<L8>:
  return D.7910;

}


ip_AddrTable_get_cell_value_core (struct netif * netif, const u32_t * column, union snmp_variant_value * value, u32_t * value_len)
{
  snmp_err_t D.7906;

  <bb 2> :
  _1 = *column;
  switch (_1) <default: <L5> [INV], case 1: <L0> [INV], case 2: <L1> [INV], case 3: <L2> [INV], case 4: <L3> [INV], case 5: <L4> [INV]>

  <bb 3> :
<L0>:
  _2 = &netif->ip_addr.u_addr.ip4;
  _3 = MEM[(const struct ip4_addr_t *)_2].addr;
  value->u32 = _3;
  goto <bb 9>; [INV]

  <bb 4> :
<L1>:
  _4 = netif_to_num (netif);
  _5 = (long unsigned int) _4;
  value->u32 = _5;
  goto <bb 9>; [INV]

  <bb 5> :
<L2>:
  _6 = &netif->netmask.u_addr.ip4;
  _7 = MEM[(const struct ip4_addr_t *)_6].addr;
  value->u32 = _7;
  goto <bb 9>; [INV]

  <bb 6> :
<L3>:
  value->u32 = 1;
  goto <bb 9>; [INV]

  <bb 7> :
<L4>:
  value->u32 = 7530;
  goto <bb 9>; [INV]

  <bb 8> :
<L5>:
  D.7906 = 241;
  goto <bb 10>; [INV]

  <bb 9> :
  D.7906 = 0;

  <bb 10> :
<L7>:
  return D.7906;

}


ip_set_value (struct snmp_node_instance * instance, u16_t len, void * value)
{
  snmp_err_t D.7904;

  <bb 2> :
  D.7904 = 0;

  <bb 3> :
<L0>:
  return D.7904;

}


ip_set_test (struct snmp_node_instance * instance, u16_t len, void * value)
{
  s32_t * sint_ptr;
  snmp_err_t ret;
  snmp_err_t D.7902;

  <bb 2> :
  ret = 10;
  sint_ptr = value;
  _1 = instance->node;
  _2 = _1->oid;
  switch (_2) <default: <L6> [INV], case 1: <L0> [INV], case 2: <L3> [INV]>

  <bb 3> :
<L0>:
  _3 = *sint_ptr;
  if (_3 == 2)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  ret = 0;

  <bb 5> :
  goto <bb 10>; [INV]

  <bb 6> :
<L3>:
  _4 = *sint_ptr;
  if (_4 == 255)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  ret = 0;

  <bb 8> :
  goto <bb 10>; [INV]

  <bb 9> :
<L6>:

  <bb 10> :
  D.7902 = ret;

  <bb 11> :
<L8>:
  return D.7902;

}


ip_get_value (struct snmp_node_instance * instance, void * value)
{
  u32_t * uint_ptr;
  s32_t * sint_ptr;
  s16_t D.7896;

  <bb 2> :
  sint_ptr = value;
  uint_ptr = value;
  _1 = instance->node;
  _2 = _1->oid;
  switch (_2) <default: <L20> [INV], case 1: <L0> [INV], case 2: <L1> [INV], case 3: <L2> [INV], case 4: <L3> [INV], case 5: <L4> [INV], case 6: <L5> [INV], case 7: <L6> [INV], case 8: <L7> [INV], case 9: <L8> [INV], case 10: <L9> [INV], case 11: <L10> [INV], case 12: <L11> [INV], case 13: <L12> [INV], case 14: <L13> [INV], case 15: <L14> [INV], case 16: <L15> [INV], case 17: <L16> [INV], case 18: <L17> [INV], case 19: <L18> [INV], case 23: <L19> [INV]>

  <bb 3> :
<L0>:
  *sint_ptr = 2;
  D.7896 = 4;
  goto <bb 25>; [INV]

  <bb 4> :
<L1>:
  *sint_ptr = 255;
  D.7896 = 4;
  goto <bb 25>; [INV]

  <bb 5> :
<L2>:
  _3 = lwip_stats.mib2.ipinreceives;
  *uint_ptr = _3;
  D.7896 = 4;
  goto <bb 25>; [INV]

  <bb 6> :
<L3>:
  _4 = lwip_stats.mib2.ipinhdrerrors;
  *uint_ptr = _4;
  D.7896 = 4;
  goto <bb 25>; [INV]

  <bb 7> :
<L4>:
  _5 = lwip_stats.mib2.ipinaddrerrors;
  *uint_ptr = _5;
  D.7896 = 4;
  goto <bb 25>; [INV]

  <bb 8> :
<L5>:
  _6 = lwip_stats.mib2.ipforwdatagrams;
  *uint_ptr = _6;
  D.7896 = 4;
  goto <bb 25>; [INV]

  <bb 9> :
<L6>:
  _7 = lwip_stats.mib2.ipinunknownprotos;
  *uint_ptr = _7;
  D.7896 = 4;
  goto <bb 25>; [INV]

  <bb 10> :
<L7>:
  _8 = lwip_stats.mib2.ipindiscards;
  *uint_ptr = _8;
  D.7896 = 4;
  goto <bb 25>; [INV]

  <bb 11> :
<L8>:
  _9 = lwip_stats.mib2.ipindelivers;
  *uint_ptr = _9;
  D.7896 = 4;
  goto <bb 25>; [INV]

  <bb 12> :
<L9>:
  _10 = lwip_stats.mib2.ipoutrequests;
  *uint_ptr = _10;
  D.7896 = 4;
  goto <bb 25>; [INV]

  <bb 13> :
<L10>:
  _11 = lwip_stats.mib2.ipoutdiscards;
  *uint_ptr = _11;
  D.7896 = 4;
  goto <bb 25>; [INV]

  <bb 14> :
<L11>:
  _12 = lwip_stats.mib2.ipoutnoroutes;
  *uint_ptr = _12;
  D.7896 = 4;
  goto <bb 25>; [INV]

  <bb 15> :
<L12>:
  *sint_ptr = 15;
  D.7896 = 4;
  goto <bb 25>; [INV]

  <bb 16> :
<L13>:
  _13 = lwip_stats.mib2.ipreasmreqds;
  *uint_ptr = _13;
  D.7896 = 4;
  goto <bb 25>; [INV]

  <bb 17> :
<L14>:
  _14 = lwip_stats.mib2.ipreasmoks;
  *uint_ptr = _14;
  D.7896 = 4;
  goto <bb 25>; [INV]

  <bb 18> :
<L15>:
  _15 = lwip_stats.mib2.ipreasmfails;
  *uint_ptr = _15;
  D.7896 = 4;
  goto <bb 25>; [INV]

  <bb 19> :
<L16>:
  _16 = lwip_stats.mib2.ipfragoks;
  *uint_ptr = _16;
  D.7896 = 4;
  goto <bb 25>; [INV]

  <bb 20> :
<L17>:
  _17 = lwip_stats.mib2.ipfragfails;
  *uint_ptr = _17;
  D.7896 = 4;
  goto <bb 25>; [INV]

  <bb 21> :
<L18>:
  _18 = lwip_stats.mib2.ipfragcreates;
  *uint_ptr = _18;
  D.7896 = 4;
  goto <bb 25>; [INV]

  <bb 22> :
<L19>:
  *uint_ptr = 0;
  D.7896 = 4;
  goto <bb 25>; [INV]

  <bb 23> :
<L20>:

  <bb 24> :
  D.7896 = 0;

  <bb 25> :
<L22>:
  return D.7896;

}


