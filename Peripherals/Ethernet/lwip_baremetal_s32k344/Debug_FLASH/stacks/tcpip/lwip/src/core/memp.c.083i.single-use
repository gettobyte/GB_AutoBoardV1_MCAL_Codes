memp_free (memp_t type, void * mem)
{
  const struct memp_desc * _1;

  <bb 2> :
  if (type_3(D) > 14)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 7>; [INV]

  <bb 4> :
  if (mem_4(D) == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 7>; [INV]

  <bb 6> :
  _1 = memp_pools[type_3(D)];
  do_memp_free_pool (_1, mem_4(D));

  <bb 7> :
<L4>:
  return;

}


memp_free_pool (const struct memp_desc * desc, void * mem)
{
  <bb 2> :
  if (desc_3(D) == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  __asm__ __volatile__("BKPT #0
	");
  goto <bb 3>; [INV]

  <bb 4> :
  if (desc_3(D) == 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  if (mem_5(D) == 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 8>; [INV]

  <bb 7> :
  do_memp_free_pool (desc_3(D), mem_5(D));

  <bb 8> :
<L6>:
  return;

}


do_memp_free_pool (const struct memp_desc * desc, void * mem)
{
  struct memp * memp;
  unsigned int mem.2_1;
  unsigned int _2;
  struct stats_mem * _3;
  short unsigned int _4;
  short unsigned int _5;
  short unsigned int _6;
  struct memp * * _7;
  struct memp * _8;
  struct memp * * _9;

  <bb 2> :
  mem.2_1 = (unsigned int) mem_11(D);
  _2 = mem.2_1 & 7;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  __asm__ __volatile__("BKPT #0
	");
  goto <bb 3>; [INV]

  <bb 4> :
  memp_13 = mem_11(D);
  _3 = desc_14(D)->stats;
  _4 = _3->used;
  _5 = _4;
  _6 = _5 + 65535;
  _3->used = _6;
  _7 = desc_14(D)->tab;
  _8 = *_7;
  memp_13->next = _8;
  _9 = desc_14(D)->tab;
  *_9 = memp_13;
  return;

}


memp_malloc (memp_t type)
{
  void * memp;
  void * D.8175;
  const struct memp_desc * _1;
  void * _2;
  void * _8;
  void * _9;

  <bb 2> :
  if (type_4(D) > 14)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _9 = 0B;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 5>; [INV]

  <bb 4> :
  _1 = memp_pools[type_4(D)];
  memp_7 = do_memp_malloc_pool (_1);
  _8 = memp_7;

  <bb 5> :
  # _2 = PHI <_9(3), _8(4)>
<L2>:
  return _2;

}


memp_malloc_pool (const struct memp_desc * desc)
{
  void * D.8171;
  void * _1;
  void * _7;
  void * _8;

  <bb 2> :
  if (desc_4(D) == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  __asm__ __volatile__("BKPT #0
	");
  goto <bb 3>; [INV]

  <bb 4> :
  if (desc_4(D) == 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _8 = 0B;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 7>; [INV]

  <bb 6> :
  _7 = do_memp_malloc_pool (desc_4(D));

  <bb 7> :
  # _1 = PHI <_8(5), _7(6)>
<L5>:
  return _1;

}


do_memp_malloc_pool (const struct memp_desc * desc)
{
  struct memp * memp;
  void * D.8165;
  struct memp * * _1;
  struct memp * * _2;
  struct memp * _3;
  unsigned int memp.1_4;
  unsigned int _5;
  struct stats_mem * _6;
  short unsigned int _7;
  short unsigned int _8;
  short unsigned int _9;
  struct stats_mem * _10;
  short unsigned int _11;
  struct stats_mem * _12;
  short unsigned int _13;
  struct stats_mem * _14;
  struct stats_mem * _15;
  short unsigned int _16;
  struct stats_mem * _17;
  short unsigned int _18;
  short unsigned int _19;
  short unsigned int _20;
  void * _21;
  void * _29;
  void * _33;

  <bb 2> :
  _1 = desc_26(D)->tab;
  memp_27 = *_1;
  if (memp_27 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  _2 = desc_26(D)->tab;
  _3 = memp_27->next;
  *_2 = _3;
  memp.1_4 = (unsigned int) memp_27;
  _5 = memp.1_4 & 7;
  if (_5 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  __asm__ __volatile__("BKPT #0
	");
  goto <bb 4>; [INV]

  <bb 5> :
  _6 = desc_26(D)->stats;
  _7 = _6->used;
  _8 = _7;
  _9 = _8 + 1;
  _6->used = _9;
  _10 = desc_26(D)->stats;
  _11 = _10->used;
  _12 = desc_26(D)->stats;
  _13 = _12->max;
  if (_11 > _13)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _14 = desc_26(D)->stats;
  _15 = desc_26(D)->stats;
  _16 = _14->used;
  _15->max = _16;

  <bb 7> :
  _33 = memp_27;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 9>; [INV]

  <bb 8> :
  _17 = desc_26(D)->stats;
  _18 = _17->err;
  _19 = _18;
  _20 = _19 + 1;
  _17->err = _20;
  _29 = 0B;

  <bb 9> :
  # _21 = PHI <_33(7), _29(8)>
<L7>:
  return _21;

}


memp_init ()
{
  u16_t i;
  int _1;
  const struct memp_desc * _2;
  int _3;
  const struct memp_desc * _4;
  int _5;
  struct stats_mem * _6;
  short unsigned int i.0_7;

  <bb 2> :
  i_10 = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  _1 = (int) i_8;
  _2 = memp_pools[_1];
  memp_init_pool (_2);
  _3 = (int) i_8;
  _4 = memp_pools[_3];
  _5 = (int) i_8;
  _6 = _4->stats;
  lwip_stats.memp[_5] = _6;
  i.0_7 = i_8;
  i_14 = i.0_7 + 1;

  <bb 4> :
  # i_8 = PHI <i_10(2), i_14(3)>
  if (i_8 <= 14)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  return;

}


memp_init_pool (const struct memp_desc * desc)
{
  struct memp * memp;
  int i;
  struct memp * * _1;
  u8_t * _2;
  unsigned int _3;
  unsigned int _4;
  unsigned int _5;
  struct memp * * _6;
  struct memp * _7;
  struct memp * * _8;
  short unsigned int _9;
  sizetype _10;
  short unsigned int _11;
  int _12;
  struct stats_mem * _13;
  short unsigned int _14;

  <bb 2> :
  _1 = desc_19(D)->tab;
  *_1 = 0B;
  _2 = desc_19(D)->base;
  _3 = (unsigned int) _2;
  _4 = _3 + 7;
  _5 = _4 & 4294967288;
  memp_21 = (struct memp *) _5;
  i_22 = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  _6 = desc_19(D)->tab;
  _7 = *_6;
  memp_16->next = _7;
  _8 = desc_19(D)->tab;
  *_8 = memp_16;
  _9 = desc_19(D)->size;
  _10 = (sizetype) _9;
  memp_26 = memp_16 + _10;
  i_27 = i_15 + 1;

  <bb 4> :
  # i_15 = PHI <i_22(2), i_27(3)>
  # memp_16 = PHI <memp_21(2), memp_26(3)>
  _11 = desc_19(D)->num;
  _12 = (int) _11;
  if (i_15 < _12)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  _13 = desc_19(D)->stats;
  _14 = desc_19(D)->num;
  _13->avail = _14;
  return;

}


