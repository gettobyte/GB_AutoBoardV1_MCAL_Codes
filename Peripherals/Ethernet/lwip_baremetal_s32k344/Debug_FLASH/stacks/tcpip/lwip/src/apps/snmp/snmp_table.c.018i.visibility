
Marking local functions:


Marking externally visible functions: snmp_table_extract_value_from_refconstptr/7 snmp_table_extract_value_from_u32ref/6 snmp_table_extract_value_from_s32ref/5 snmp_table_simple_get_next_instance/4 snmp_table_simple_get_instance/3 snmp_table_get_next_instance/2 snmp_table_get_instance/1


Marking externally visible variables:


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

memcpy/10 (memcpy) @06ce92a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: snmp_table_extract_value_from_refconstptr/7 
  Calls: 
snmp_oid_append/9 (snmp_oid_append) @06c94b60
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: snmp_table_simple_get_next_instance/4 snmp_table_get_next_instance/2 
  Calls: 
snmp_oid_assign/8 (snmp_oid_assign) @06c94a80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: snmp_table_simple_get_next_instance/4 snmp_table_get_next_instance/2 
  Calls: 
snmp_table_extract_value_from_refconstptr/7 (snmp_table_extract_value_from_refconstptr) @06c94380
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  Address is taken.
  References: 
  Referring: snmp_table_simple_get_instance/3 (addr) snmp_table_simple_get_next_instance/4 (addr) 
  Availability: available
  Function flags: body
  Called by: 
  Calls: memcpy/10 
snmp_table_extract_value_from_u32ref/6 (snmp_table_extract_value_from_u32ref) @06c94000
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  Address is taken.
  References: 
  Referring: snmp_table_simple_get_instance/3 (addr) snmp_table_simple_get_next_instance/4 (addr) 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
snmp_table_extract_value_from_s32ref/5 (snmp_table_extract_value_from_s32ref) @06c7e7e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  Address is taken.
  References: 
  Referring: snmp_table_simple_get_instance/3 (addr) snmp_table_simple_get_next_instance/4 (addr) 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
snmp_table_simple_get_next_instance/4 (snmp_table_simple_get_next_instance) @06c7e2a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: snmp_table_extract_value_from_u32ref/6 (addr) snmp_table_extract_value_from_s32ref/5 (addr) snmp_table_extract_value_from_refconstptr/7 (addr) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: snmp_oid_append/9 snmp_oid_assign/8 
   Indirect call Num speculative call targets: 0
snmp_table_simple_get_instance/3 (snmp_table_simple_get_instance) @06c7e700
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: snmp_table_extract_value_from_u32ref/6 (addr) snmp_table_extract_value_from_s32ref/5 (addr) snmp_table_extract_value_from_refconstptr/7 (addr) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call Num speculative call targets: 0
snmp_table_get_next_instance/2 (snmp_table_get_next_instance) @06c7e460
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: snmp_oid_append/9 snmp_oid_assign/8 
   Indirect call Num speculative call targets: 0
snmp_table_get_instance/1 (snmp_table_get_instance) @06c7e0e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call Num speculative call targets: 0
snmp_table_extract_value_from_refconstptr (struct snmp_node_instance * instance, void * value)
{
  s16_t D.7036;

  <bb 2> :
  _1 = instance->reference.const_ptr;
  _2 = instance->reference_len;
  memcpy (value, _1, _2);
  _3 = instance->reference_len;
  D.7036 = (s16_t) _3;

  <bb 3> :
<L0>:
  return D.7036;

}


snmp_table_extract_value_from_u32ref (struct snmp_node_instance * instance, void * value)
{
  u32_t * dst;
  s16_t D.7034;

  <bb 2> :
  dst = value;
  _1 = instance->reference.u32;
  *dst = _1;
  D.7034 = 4;

  <bb 3> :
<L0>:
  return D.7034;

}


snmp_table_extract_value_from_s32ref (struct snmp_node_instance * instance, void * value)
{
  s32_t * dst;
  s16_t D.7032;

  <bb 2> :
  dst = value;
  _1 = instance->reference.s32;
  *dst = _1;
  D.7032 = 4;

  <bb 3> :
<L0>:
  return D.7032;

}


snmp_table_simple_get_next_instance (const u32_t * root_oid, u8_t root_oid_len, struct snmp_node_instance * instance)
{
  const struct snmp_table_simple_col_def * next_col_def;
  u32_t i;
  snmp_err_t result;
  u32_t column;
  struct snmp_obj_id row_oid;
  const struct snmp_table_simple_col_def * col_def;
  const struct snmp_table_simple_node * table_node;
  snmp_err_t D.7013;

  <bb 2> :
  table_node = instance->node;
  column = 0;
  _1 = instance->instance_oid.len;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _2 = instance->instance_oid.id[0];
  if (_2 > 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  D.7013 = 241;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 30>; [INV]

  <bb 5> :
  _3 = instance->instance_oid.len;
  if (_3 > 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  column = instance->instance_oid.id[1];

  <bb 7> :
  _4 = instance->instance_oid.len;
  if (_4 > 2)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  _5 = &instance->instance_oid.id[2];
  _6 = instance->instance_oid.len;
  _7 = _6 + 254;
  snmp_oid_assign (&row_oid, _5, _7);
  goto <bb 10>; [INV]

  <bb 9> :
  row_oid.len = 0;

  <bb 10> :
  next_col_def = 0B;
  col_def = table_node->columns;
  i = 0;
  goto <bb 18>; [INV]

  <bb 11> :
  _8 = col_def->index;
  if (column == _8)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  next_col_def = col_def;
  goto <bb 19>; [INV]

  <bb 13> :
  _9 = col_def->index;
  if (column < _9)
    goto <bb 14>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 14> :
  if (next_col_def == 0B)
    goto <bb 16>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  _10 = col_def->index;
  _11 = next_col_def->index;
  if (_10 < _11)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  next_col_def = col_def;

  <bb 17> :
  col_def = col_def + 12;
  i = i + 1;

  <bb 18> :
  _12 = table_node->column_count;
  _13 = (long unsigned int) _12;
  if (i < _13)
    goto <bb 11>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 19> :
  if (next_col_def == 0B)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  D.7013 = 241;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 30>; [INV]

  <bb 21> :
  _14 = table_node->get_next_cell_instance_and_value;
  _15 = &next_col_def->index;
  _16 = &instance->reference;
  _17 = &instance->reference_len;
  result = _14 (_15, &row_oid, _16, _17);
  if (result == 0)
    goto <bb 22>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 22> :
  col_def = next_col_def;
  goto <bb 24>; [INV]

  <bb 23> :
  row_oid.len = 0;
  _18 = next_col_def->index;
  column = _18 + 1;
  goto <bb 10>; [INV]

  <bb 24> :
  _19 = col_def->asn1_type;
  instance->asn1_type = _19;
  instance->access = 1;
  instance->set_test = 0B;
  instance->set_value = 0B;
  _20 = col_def->data_type;
  switch (_20) <default: <L29> [INV], case 0: <L25> [INV], case 1: <L26> [INV], case 2 ... 3: <L27> [INV]>

  <bb 25> :
<L25>:
  instance->get_value = snmp_table_extract_value_from_u32ref;
  goto <bb 29>; [INV]

  <bb 26> :
<L26>:
  instance->get_value = snmp_table_extract_value_from_s32ref;
  goto <bb 29>; [INV]

  <bb 27> :
<L27>:
  instance->get_value = snmp_table_extract_value_from_refconstptr;
  goto <bb 29>; [INV]

  <bb 28> :
<L29>:
  D.7013 = 5;
  goto <bb 30>; [INV]

  <bb 29> :
  instance->instance_oid.len = 2;
  instance->instance_oid.id[0] = 1;
  _21 = col_def->index;
  instance->instance_oid.id[1] = _21;
  _22 = &instance->instance_oid;
  _23 = row_oid.len;
  snmp_oid_append (_22, &row_oid.id, _23);
  D.7013 = 0;

  <bb 30> :
  row_oid = {CLOBBER};

  <bb 31> :
<L32>:
  return D.7013;

}


snmp_table_simple_get_instance (const u32_t * root_oid, u8_t root_oid_len, struct snmp_node_instance * instance)
{
  u32_t i;
  const struct snmp_table_simple_col_def * col_def;
  const struct snmp_table_simple_node * table_node;
  snmp_err_t ret;
  snmp_err_t D.7006;

  <bb 2> :
  ret = 241;
  table_node = instance->node;
  _1 = instance->instance_oid.len;
  if (_1 > 2)
    goto <bb 3>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 3> :
  _2 = instance->instance_oid.id[0];
  if (_2 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 4> :
  _3 = table_node->get_cell_value;
  _4 = &instance->instance_oid.id[1];
  _5 = &instance->instance_oid.id[2];
  _6 = instance->instance_oid.len;
  _7 = _6 + 254;
  _8 = &instance->reference;
  _9 = &instance->reference_len;
  ret = _3 (_4, _5, _7, _8, _9);
  if (ret == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 5> :
  col_def = table_node->columns;
  _10 = table_node->column_count;
  i = (u32_t) _10;
  goto <bb 9>; [INV]

  <bb 6> :
  _11 = col_def->index;
  _12 = instance->instance_oid.id[1];
  if (_11 == _12)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  goto <bb 10>; [INV]

  <bb 8> :
  col_def = col_def + 12;
  i = i + 4294967295;

  <bb 9> :
  if (i != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  if (i != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 11> :
  _13 = col_def->asn1_type;
  instance->asn1_type = _13;
  instance->access = 1;
  instance->set_test = 0B;
  instance->set_value = 0B;
  _14 = col_def->data_type;
  switch (_14) <default: <L13> [INV], case 0: <L9> [INV], case 1: <L10> [INV], case 2 ... 3: <L11> [INV]>

  <bb 12> :
<L9>:
  instance->get_value = snmp_table_extract_value_from_u32ref;
  goto <bb 16>; [INV]

  <bb 13> :
<L10>:
  instance->get_value = snmp_table_extract_value_from_s32ref;
  goto <bb 16>; [INV]

  <bb 14> :
<L11>:
  instance->get_value = snmp_table_extract_value_from_refconstptr;
  goto <bb 16>; [INV]

  <bb 15> :
<L13>:
  D.7006 = 5;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 19>; [INV]

  <bb 16> :
  ret = 0;
  goto <bb 18>; [INV]

  <bb 17> :
  ret = 241;

  <bb 18> :
  D.7006 = ret;

  <bb 19> :
<L20>:
  return D.7006;

}


snmp_table_get_next_instance (const u32_t * root_oid, u8_t root_oid_len, struct snmp_node_instance * instance)
{
  const struct snmp_table_col_def * next_col_def;
  u16_t i;
  snmp_err_t result;
  u32_t column;
  struct snmp_obj_id row_oid;
  const struct snmp_table_col_def * col_def;
  const struct snmp_table_node * table_node;
  snmp_err_t D.6977;

  <bb 2> :
  table_node = instance->node;
  column = 0;
  _1 = instance->instance_oid.len;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _2 = instance->instance_oid.id[0];
  if (_2 > 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  D.6977 = 241;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 26>; [INV]

  <bb 5> :
  _3 = instance->instance_oid.len;
  if (_3 > 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  column = instance->instance_oid.id[1];

  <bb 7> :
  _4 = instance->instance_oid.len;
  if (_4 > 2)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  _5 = &instance->instance_oid.id[2];
  _6 = instance->instance_oid.len;
  _7 = _6 + 254;
  snmp_oid_assign (&row_oid, _5, _7);
  goto <bb 10>; [INV]

  <bb 9> :
  row_oid.len = 0;

  <bb 10> :
  _8 = table_node->get_value;
  instance->get_value = _8;
  _9 = table_node->set_test;
  instance->set_test = _9;
  _10 = table_node->set_value;
  instance->set_value = _10;

  <bb 11> :
  next_col_def = 0B;
  col_def = table_node->columns;
  i = 0;
  goto <bb 19>; [INV]

  <bb 12> :
  _11 = col_def->index;
  if (column == _11)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  next_col_def = col_def;
  goto <bb 20>; [INV]

  <bb 14> :
  _12 = col_def->index;
  if (column < _12)
    goto <bb 15>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 15> :
  if (next_col_def == 0B)
    goto <bb 17>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 16> :
  _13 = col_def->index;
  _14 = next_col_def->index;
  if (_13 < _14)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  next_col_def = col_def;

  <bb 18> :
  col_def = col_def + 12;
  i.1_15 = i;
  i = i.1_15 + 1;

  <bb 19> :
  _16 = table_node->column_count;
  if (i < _16)
    goto <bb 12>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 20> :
  if (next_col_def == 0B)
    goto <bb 21>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 21> :
  D.6977 = 241;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 26>; [INV]

  <bb 22> :
  _17 = next_col_def->asn1_type;
  instance->asn1_type = _17;
  _18 = next_col_def->access;
  instance->access = _18;
  _19 = table_node->get_next_cell_instance;
  _20 = &next_col_def->index;
  result = _19 (_20, &row_oid, instance);
  if (result == 0)
    goto <bb 23>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 23> :
  col_def = next_col_def;
  goto <bb 25>; [INV]

  <bb 24> :
  row_oid.len = 0;
  _21 = next_col_def->index;
  column = _21 + 1;
  goto <bb 11>; [INV]

  <bb 25> :
  instance->instance_oid.len = 2;
  instance->instance_oid.id[0] = 1;
  _22 = col_def->index;
  instance->instance_oid.id[1] = _22;
  _23 = &instance->instance_oid;
  _24 = row_oid.len;
  snmp_oid_append (_23, &row_oid.id, _24);
  D.6977 = 0;

  <bb 26> :
  row_oid = {CLOBBER};

  <bb 27> :
<L26>:
  return D.6977;

}


snmp_table_get_instance (const u32_t * root_oid, u8_t root_oid_len, struct snmp_node_instance * instance)
{
  u16_t i;
  const struct snmp_table_col_def * col_def;
  const struct snmp_table_node * table_node;
  snmp_err_t ret;
  snmp_err_t D.6971;

  <bb 2> :
  ret = 241;
  table_node = instance->node;
  _1 = instance->instance_oid.len;
  if (_1 > 2)
    goto <bb 3>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 3> :
  _2 = instance->instance_oid.id[0];
  if (_2 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 4> :
  col_def = table_node->columns;
  i = table_node->column_count;
  goto <bb 8>; [INV]

  <bb 5> :
  _3 = col_def->index;
  _4 = instance->instance_oid.id[1];
  if (_3 == _4)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  goto <bb 9>; [INV]

  <bb 7> :
  col_def = col_def + 12;
  i.0_5 = i;
  i = i.0_5 + 65535;

  <bb 8> :
  if (i != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  if (i != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  _6 = col_def->asn1_type;
  instance->asn1_type = _6;
  _7 = col_def->access;
  instance->access = _7;
  _8 = table_node->get_value;
  instance->get_value = _8;
  _9 = table_node->set_test;
  instance->set_test = _9;
  _10 = table_node->set_value;
  instance->set_value = _10;
  _11 = table_node->get_cell_instance;
  _12 = &instance->instance_oid.id[1];
  _13 = &instance->instance_oid.id[2];
  _14 = instance->instance_oid.len;
  _15 = _14 + 254;
  ret = _11 (_12, _13, _15, instance);

  <bb 11> :
  D.6971 = ret;

  <bb 12> :
<L11>:
  return D.6971;

}


