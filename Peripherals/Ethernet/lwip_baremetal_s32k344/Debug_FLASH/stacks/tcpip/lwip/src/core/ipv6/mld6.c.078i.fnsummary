Symbol table:

ip6_output_if/28 (ip6_output_if) @06cf4a80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: mld6_send/13 
  Calls: 
ip6_options_add_hbh_ra/27 (ip6_options_add_hbh_ra) @06cf49a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: mld6_send/13 
  Calls: 
ip6_chksum_pseudo/26 (ip6_chksum_pseudo) @06cf48c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: mld6_send/13 
  Calls: 
ip6_addr_any/25 (ip6_addr_any) @06d03240
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: mld6_send/13 (addr) 
  Availability: not_available
  Varpool flags: read-only
pbuf_remove_header/24 (pbuf_remove_header) @06cf4700
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: mld6_send/13 
  Calls: 
pbuf_alloc/23 (pbuf_alloc) @06cf4620
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: mld6_send/13 
  Calls: 
rand/22 (rand) @06cf4460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: mld6_delayed_report/12 
  Calls: 
netif_get_ip6_addr_match/21 (netif_get_ip6_addr_match) @06c88c40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: mld6_leavegroup/9 mld6_joingroup/7 
  Calls: 
netif_list/20 (netif_list) @06ceb168
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: mld6_joingroup/7 (read) mld6_leavegroup/9 (read) mld6_tmr/11 (read) 
  Availability: not_available
  Varpool flags:
lwip_htons/19 (lwip_htons) @06c88a80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: mld6_input/6 mld6_input/6 
  Calls: 
ip_data/18 (ip_data) @06ce2ab0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: mld6_input/6 (read) mld6_input/6 (read) mld6_input/6 (read) mld6_input/6 (read) mld6_input/6 (addr) mld6_input/6 (addr) 
  Availability: not_available
  Varpool flags:
pbuf_free/17 (pbuf_free) @06c888c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: mld6_send/13 mld6_send/13 mld6_input/6 mld6_input/6 
  Calls: 
lwip_stats/16 (lwip_stats) @06ce2a20
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: mld6_input/6 (read) mld6_input/6 (write) mld6_leavegroup_netif/10 (read) mld6_leavegroup_netif/10 (write) mld6_input/6 (read) mld6_input/6 (write) mld6_send/13 (read) mld6_send/13 (write) mld6_joingroup_netif/8 (read) mld6_joingroup_netif/8 (write) mld6_input/6 (read) mld6_input/6 (write) mld6_input/6 (read) mld6_input/6 (write) mld6_input/6 (read) mld6_input/6 (write) mld6_input/6 (read) mld6_input/6 (write) mld6_input/6 (read) mld6_input/6 (write) mld6_input/6 (read) mld6_input/6 (write) mld6_send/13 (read) mld6_send/13 (write) mld6_send/13 (read) mld6_send/13 (write) mld6_tmr/11 (read) mld6_tmr/11 (write) 
  Availability: not_available
  Varpool flags:
memp_malloc/15 (memp_malloc) @06c88460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: mld6_new_group/4 
  Calls: 
memp_free/14 (memp_free) @06c880e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: mld6_leavegroup_netif/10 mld6_stop/1 
  Calls: 
mld6_send/13 (mld6_send) @06c77ee0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: lwip_stats/16 (read) lwip_stats/16 (write) lwip_stats/16 (read) lwip_stats/16 (write) ip6_addr_any/25 (addr) lwip_stats/16 (read) lwip_stats/16 (write) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: mld6_tmr/11 mld6_leavegroup_netif/10 mld6_joingroup_netif/8 
  Calls: pbuf_free/17 ip6_output_if/28 ip6_options_add_hbh_ra/27 ip6_chksum_pseudo/26 pbuf_free/17 pbuf_remove_header/24 pbuf_alloc/23 
mld6_delayed_report/12 (mld6_delayed_report) @06c778c0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: mld6_joingroup_netif/8 mld6_input/6 mld6_input/6 mld6_report_groups/2 
  Calls: rand/22 
mld6_tmr/11 (mld6_tmr) @06c77620
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: netif_list/20 (read) lwip_stats/16 (read) lwip_stats/16 (write) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: mld6_send/13 
mld6_leavegroup_netif/10 (mld6_leavegroup_netif) @06c77380
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: lwip_stats/16 (read) lwip_stats/16 (write) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: mld6_leavegroup/9 
  Calls: memp_free/14 mld6_send/13 mld6_remove_group/5 mld6_lookfor_group/3 
   Indirect call Num speculative call targets: 0
mld6_leavegroup/9 (mld6_leavegroup) @06c5c8c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: netif_list/20 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: mld6_leavegroup_netif/10 netif_get_ip6_addr_match/21 
mld6_joingroup_netif/8 (mld6_joingroup_netif) @06c5ce00
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: lwip_stats/16 (read) lwip_stats/16 (write) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: mld6_joingroup/7 
  Calls: mld6_delayed_report/12 mld6_send/13 mld6_new_group/4 mld6_lookfor_group/3 
   Indirect call Num speculative call targets: 0
mld6_joingroup/7 (mld6_joingroup) @06c5c7e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: netif_list/20 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: mld6_joingroup_netif/8 netif_get_ip6_addr_match/21 
mld6_input/6 (mld6_input) @06c5c460
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: lwip_stats/16 (read) lwip_stats/16 (write) lwip_stats/16 (read) lwip_stats/16 (write) lwip_stats/16 (read) lwip_stats/16 (write) ip_data/18 (read) ip_data/18 (read) ip_data/18 (read) ip_data/18 (read) lwip_stats/16 (read) lwip_stats/16 (write) lwip_stats/16 (read) lwip_stats/16 (write) ip_data/18 (addr) lwip_stats/16 (read) lwip_stats/16 (write) ip_data/18 (addr) lwip_stats/16 (read) lwip_stats/16 (write) lwip_stats/16 (read) lwip_stats/16 (write) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: pbuf_free/17 mld6_lookfor_group/3 mld6_delayed_report/12 lwip_htons/19 mld6_lookfor_group/3 mld6_delayed_report/12 lwip_htons/19 pbuf_free/17 
mld6_remove_group/5 (mld6_remove_group) @06c4fe00
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: mld6_leavegroup_netif/10 
  Calls: 
mld6_new_group/4 (mld6_new_group) @06c4f540
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: mld6_joingroup_netif/8 
  Calls: memp_malloc/15 
mld6_lookfor_group/3 (mld6_lookfor_group) @06c4fd20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: mld6_leavegroup_netif/10 mld6_joingroup_netif/8 mld6_input/6 mld6_input/6 
  Calls: 
mld6_report_groups/2 (mld6_report_groups) @06c4fa80
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: mld6_delayed_report/12 
mld6_stop/1 (mld6_stop) @06c4f7e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: memp_free/14 
   Indirect call Num speculative call targets: 0
mld6_send (struct netif * netif, struct mld_group * group, u8_t type)
{
  const struct ip6_addr_t * src_addr;
  struct pbuf * p;
  struct mld_header * mld_hdr;
  const struct ip6_addr_t * iftmp.17;
  short unsigned int _1;
  short unsigned int _2;
  unsigned char _3;
  short unsigned int _4;
  short unsigned int _5;
  unsigned char _6;
  int _7;
  int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  short unsigned int _13;
  struct ip6_addr_t * _14;
  short unsigned int _15;
  short unsigned int _16;
  short unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  struct ip6_addr_t * _22;
  const struct ip6_addr_t * iftmp.17_24;
  const struct ip6_addr_t * iftmp.17_51;
  const struct ip6_addr_t * iftmp.17_52;

  <bb 2> :
  p_29 = pbuf_alloc (54, 32, 640);
  if (p_29 == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 = lwip_stats.mld6.memerr;
  _2 = _1 + 1;
  lwip_stats.mld6.memerr = _2;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 19>; [INV]

  <bb 4> :
  _3 = pbuf_remove_header (p_29, 8);
  if (_3 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  pbuf_free (p_29);
  _4 = lwip_stats.mld6.lenerr;
  _5 = _4 + 1;
  lwip_stats.mld6.lenerr = _5;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 19>; [INV]

  <bb 6> :
  _6 = netif_31(D)->ip6_addr_state[0];
  _7 = (int) _6;
  _8 = _7 & 16;
  if (_8 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  src_addr_33 = &ip6_addr_any.u_addr.ip6;
  goto <bb 9>; [INV]

  <bb 8> :
  src_addr_32 = &netif_31(D)->ip6_addr[0].u_addr.ip6;

  <bb 9> :
  # src_addr_23 = PHI <src_addr_33(7), src_addr_32(8)>
  mld_hdr_34 = p_29->payload;
  mld_hdr_34->type = type_35(D);
  mld_hdr_34->code = 0;
  mld_hdr_34->chksum = 0;
  mld_hdr_34->max_resp_delay = 0;
  mld_hdr_34->reserved = 0;
  _9 = group_41(D)->group_address.addr[0];
  mld_hdr_34->multicast_address.addr[0] = _9;
  _10 = group_41(D)->group_address.addr[1];
  mld_hdr_34->multicast_address.addr[1] = _10;
  _11 = group_41(D)->group_address.addr[2];
  mld_hdr_34->multicast_address.addr[2] = _11;
  _12 = group_41(D)->group_address.addr[3];
  mld_hdr_34->multicast_address.addr[3] = _12;
  _13 = p_29->len;
  _14 = &group_41(D)->group_address;
  _15 = ip6_chksum_pseudo (p_29, 58, _13, src_addr_23, _14);
  mld_hdr_34->chksum = _15;
  ip6_options_add_hbh_ra (p_29, 58, 0);
  if (type_35(D) == 131)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  group_41(D)->last_reporter_flag = 1;

  <bb 11> :
  _16 = lwip_stats.mld6.xmit;
  _17 = _16 + 1;
  lwip_stats.mld6.xmit = _17;
  if (src_addr_23 != 0B)
    goto <bb 12>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 12> :
  _18 = src_addr_23->addr[0];
  if (_18 != 0)
    goto <bb 16>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  _19 = src_addr_23->addr[1];
  if (_19 != 0)
    goto <bb 16>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 14> :
  _20 = src_addr_23->addr[2];
  if (_20 != 0)
    goto <bb 16>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  _21 = src_addr_23->addr[3];
  if (_21 != 0)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  iftmp.17_51 = src_addr_23;
  goto <bb 18>; [INV]

  <bb 17> :
  iftmp.17_52 = 0B;

  <bb 18> :
  # iftmp.17_24 = PHI <iftmp.17_51(16), iftmp.17_52(17)>
  _22 = &group_41(D)->group_address;
  ip6_output_if (p_29, iftmp.17_24, _22, 1, 0, 0, netif_31(D));
  pbuf_free (p_29);

  <bb 19> :
<L16>:
  return;

}


mld6_delayed_report (struct mld_group * group, u16_t maxresp_in)
{
  u16_t maxresp;
  int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  unsigned char _5;
  unsigned char _6;
  short unsigned int _7;
  short unsigned int _8;

  <bb 2> :
  maxresp_13 = maxresp_in_12(D) / 100;
  if (maxresp_13 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  maxresp_14 = 1;

  <bb 4> :
  # maxresp_9 = PHI <maxresp_13(2), maxresp_14(3)>
  _1 = rand ();
  _2 = (long unsigned int) _1;
  _3 = (long unsigned int) maxresp_9;
  _4 = _2 % _3;
  maxresp_17 = (u16_t) _4;
  if (maxresp_17 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  maxresp_18 = 1;

  <bb 6> :
  # maxresp_10 = PHI <maxresp_17(4), maxresp_18(5)>
  _5 = group_19(D)->group_state;
  if (_5 == 2)
    goto <bb 10>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _6 = group_19(D)->group_state;
  if (_6 == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 8> :
  _7 = group_19(D)->timer;
  if (_7 == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  _8 = group_19(D)->timer;
  if (maxresp_10 < _8)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  group_19(D)->timer = maxresp_10;
  group_19(D)->group_state = 1;

  <bb 11> :
  return;

}


mld6_tmr ()
{
  struct mld_group * group;
  struct netif * netif;
  short unsigned int _1;
  short unsigned int _2;
  short unsigned int _3;
  short unsigned int _4;
  short unsigned int _5;
  unsigned char _6;
  short unsigned int _7;
  short unsigned int _8;

  <bb 2> :
  netif_15 = netif_list;
  goto <bb 11>; [INV]

  <bb 3> :
  group_16 = netif_9->client_data[1];
  goto <bb 9>; [INV]

  <bb 4> :
  _1 = group_10->timer;
  if (_1 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  _2 = group_10->timer;
  _3 = _2;
  _4 = _3 + 65535;
  group_10->timer = _4;
  _5 = group_10->timer;
  if (_5 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  _6 = group_10->group_state;
  if (_6 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _7 = lwip_stats.mld6.tx_report;
  _8 = _7 + 1;
  lwip_stats.mld6.tx_report = _8;
  mld6_send (netif_9, group_10, 131);
  group_10->group_state = 2;

  <bb 8> :
  group_22 = group_10->next;

  <bb 9> :
  # group_10 = PHI <group_16(3), group_22(8)>
  if (group_10 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  netif_17 = netif_9->next;

  <bb 11> :
  # netif_9 = PHI <netif_15(2), netif_17(10)>
  if (netif_9 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  return;

}


mld6_leavegroup_netif (struct netif * netif, const struct ip6_addr_t * groupaddr)
{
  struct ip6_addr_t ip6addr;
  struct mld_group * group;
  err_t D.7678;
  u8_t iftmp.16;
  u8_t iftmp.15;
  const long unsigned int iftmp.14;
  const long unsigned int iftmp.13;
  const long unsigned int iftmp.12;
  const long unsigned int iftmp.11;
  unsigned char _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  unsigned char _14;
  unsigned char _15;
  unsigned char _16;
  short unsigned int _17;
  short unsigned int _18;
  err_t (*<T6ef>) (struct netif *, const struct ip6_addr_t *, netif_mac_filter_action) _19;
  err_t (*<T6ef>) (struct netif *, const struct ip6_addr_t *, netif_mac_filter_action) _20;
  unsigned char _21;
  unsigned char _22;
  unsigned char _23;
  const long unsigned int iftmp.11_25;
  const long unsigned int iftmp.12_26;
  const long unsigned int iftmp.13_27;
  const long unsigned int iftmp.14_28;
  u8_t iftmp.15_29;
  u8_t iftmp.16_30;
  err_t _31;
  const long unsigned int iftmp.11_39;
  const long unsigned int iftmp.11_40;
  const long unsigned int iftmp.12_42;
  const long unsigned int iftmp.12_43;
  const long unsigned int iftmp.13_45;
  const long unsigned int iftmp.13_46;
  const long unsigned int iftmp.14_48;
  const long unsigned int iftmp.14_49;
  u8_t iftmp.15_51;
  u8_t iftmp.15_52;
  u8_t iftmp.16_54;
  u8_t iftmp.16_56;
  err_t _61;
  err_t _68;

  <bb 2> :
  _1 = groupaddr_38(D)->zone;
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 3> :
  _2 = groupaddr_38(D)->addr[0];
  _3 = _2 & 49407;
  if (_3 == 33022)
    goto <bb 6>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  _4 = groupaddr_38(D)->addr[0];
  _5 = _4 & 36863;
  if (_5 == 511)
    goto <bb 6>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  _6 = groupaddr_38(D)->addr[0];
  _7 = _6 & 36863;
  if (_7 == 767)
    goto <bb 6>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 6> :
  if (groupaddr_38(D) != 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  iftmp.11_40 = groupaddr_38(D)->addr[0];
  goto <bb 9>; [INV]

  <bb 8> :
  iftmp.11_39 = 0;

  <bb 9> :
  # iftmp.11_25 = PHI <iftmp.11_40(7), iftmp.11_39(8)>
  ip6addr.addr[0] = iftmp.11_25;
  if (groupaddr_38(D) != 0B)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  iftmp.12_43 = groupaddr_38(D)->addr[1];
  goto <bb 12>; [INV]

  <bb 11> :
  iftmp.12_42 = 0;

  <bb 12> :
  # iftmp.12_26 = PHI <iftmp.12_43(10), iftmp.12_42(11)>
  ip6addr.addr[1] = iftmp.12_26;
  if (groupaddr_38(D) != 0B)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  iftmp.13_46 = groupaddr_38(D)->addr[2];
  goto <bb 15>; [INV]

  <bb 14> :
  iftmp.13_45 = 0;

  <bb 15> :
  # iftmp.13_27 = PHI <iftmp.13_46(13), iftmp.13_45(14)>
  ip6addr.addr[2] = iftmp.13_27;
  if (groupaddr_38(D) != 0B)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  iftmp.14_49 = groupaddr_38(D)->addr[3];
  goto <bb 18>; [INV]

  <bb 17> :
  iftmp.14_48 = 0;

  <bb 18> :
  # iftmp.14_28 = PHI <iftmp.14_49(16), iftmp.14_48(17)>
  ip6addr.addr[3] = iftmp.14_28;
  if (groupaddr_38(D) != 0B)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  iftmp.15_52 = groupaddr_38(D)->zone;
  goto <bb 21>; [INV]

  <bb 20> :
  iftmp.15_51 = 0;

  <bb 21> :
  # iftmp.15_29 = PHI <iftmp.15_52(19), iftmp.15_51(20)>
  ip6addr.zone = iftmp.15_29;
  _8 = ip6addr.addr[0];
  _9 = _8 & 49407;
  if (_9 == 33022)
    goto <bb 24>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 22> :
  _10 = ip6addr.addr[0];
  _11 = _10 & 36863;
  if (_11 == 511)
    goto <bb 24>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 23> :
  _12 = ip6addr.addr[0];
  _13 = _12 & 36863;
  if (_13 == 767)
    goto <bb 24>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 24> :
  _14 = netif_55(D)->num;
  iftmp.16_56 = _14 + 1;
  goto <bb 26>; [INV]

  <bb 25> :
  iftmp.16_54 = 0;

  <bb 26> :
  # iftmp.16_30 = PHI <iftmp.16_56(24), iftmp.16_54(25)>
  ip6addr.zone = iftmp.16_30;
  groupaddr_58 = &ip6addr;

  <bb 27> :
  # groupaddr_24 = PHI <groupaddr_38(D)(2), groupaddr_38(D)(5), groupaddr_58(26)>
  group_60 = mld6_lookfor_group (netif_55(D), groupaddr_24);
  if (group_60 != 0B)
    goto <bb 28>; [INV]
  else
    goto <bb 36>; [INV]

  <bb 28> :
  _15 = group_60->use;
  if (_15 <= 1)
    goto <bb 29>; [INV]
  else
    goto <bb 34>; [INV]

  <bb 29> :
  mld6_remove_group (netif_55(D), group_60);
  _16 = group_60->last_reporter_flag;
  if (_16 != 0)
    goto <bb 30>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 30> :
  _17 = lwip_stats.mld6.tx_leave;
  _18 = _17 + 1;
  lwip_stats.mld6.tx_leave = _18;
  mld6_send (netif_55(D), group_60, 132);

  <bb 31> :
  _19 = netif_55(D)->mld_mac_filter;
  if (_19 != 0B)
    goto <bb 32>; [INV]
  else
    goto <bb 33>; [INV]

  <bb 32> :
  _20 = netif_55(D)->mld_mac_filter;
  _20 (netif_55(D), groupaddr_24, 0);

  <bb 33> :
  memp_free (12, group_60);
  goto <bb 35>; [INV]

  <bb 34> :
  _21 = group_60->use;
  _22 = _21;
  _23 = _22 + 255;
  group_60->use = _23;

  <bb 35> :
  _68 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 37>; [INV]

  <bb 36> :
  _61 = -6;

  <bb 37> :
  # _31 = PHI <_68(35), _61(36)>
  ip6addr ={v} {CLOBBER};

  <bb 38> :
<L36>:
  return _31;

}


mld6_leavegroup (const struct ip6_addr_t * srcaddr, const struct ip6_addr_t * groupaddr)
{
  err_t res;
  struct netif * netif;
  err_t err;
  err_t D.7635;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  signed char _5;
  err_t _15;

  <bb 2> :
  err_12 = -6;
  netif_14 = netif_list;
  goto <bb 12>; [INV]

  <bb 3> :
  if (srcaddr_16(D) == 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  _1 = srcaddr_16(D)->addr[0];
  if (_1 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  _2 = srcaddr_16(D)->addr[1];
  if (_2 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  _3 = srcaddr_16(D)->addr[2];
  if (_3 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _4 = srcaddr_16(D)->addr[3];
  if (_4 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  _5 = netif_get_ip6_addr_match (netif_8, srcaddr_16(D));
  if (_5 >= 0)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  res_20 = mld6_leavegroup_netif (netif_8, groupaddr_18(D));
  if (err_7 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  err_21 = res_20;

  <bb 11> :
  # err_6 = PHI <err_7(8), err_7(9), err_21(10)>
  netif_22 = netif_8->next;

  <bb 12> :
  # err_7 = PHI <err_12(2), err_6(11)>
  # netif_8 = PHI <netif_14(2), netif_22(11)>
  if (netif_8 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  _15 = err_7;

  <bb 14> :
<L12>:
  return _15;

}


mld6_joingroup_netif (struct netif * netif, const struct ip6_addr_t * groupaddr)
{
  struct ip6_addr_t ip6addr;
  struct mld_group * group;
  err_t D.7621;
  u8_t iftmp.10;
  u8_t iftmp.9;
  const long unsigned int iftmp.8;
  const long unsigned int iftmp.7;
  const long unsigned int iftmp.6;
  const long unsigned int iftmp.5;
  unsigned char _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  unsigned char _14;
  err_t (*<T6ef>) (struct netif *, const struct ip6_addr_t *, netif_mac_filter_action) _15;
  err_t (*<T6ef>) (struct netif *, const struct ip6_addr_t *, netif_mac_filter_action) _16;
  short unsigned int _17;
  short unsigned int _18;
  unsigned char _19;
  unsigned char _20;
  unsigned char _21;
  const long unsigned int iftmp.5_24;
  const long unsigned int iftmp.6_25;
  const long unsigned int iftmp.7_26;
  const long unsigned int iftmp.8_27;
  u8_t iftmp.9_28;
  u8_t iftmp.10_29;
  err_t _30;
  const long unsigned int iftmp.5_37;
  const long unsigned int iftmp.5_38;
  const long unsigned int iftmp.6_40;
  const long unsigned int iftmp.6_41;
  const long unsigned int iftmp.7_43;
  const long unsigned int iftmp.7_44;
  const long unsigned int iftmp.8_46;
  const long unsigned int iftmp.8_47;
  u8_t iftmp.9_49;
  u8_t iftmp.9_50;
  u8_t iftmp.10_52;
  u8_t iftmp.10_54;
  err_t _65;
  err_t _67;

  <bb 2> :
  _1 = groupaddr_36(D)->zone;
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 3> :
  _2 = groupaddr_36(D)->addr[0];
  _3 = _2 & 49407;
  if (_3 == 33022)
    goto <bb 6>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  _4 = groupaddr_36(D)->addr[0];
  _5 = _4 & 36863;
  if (_5 == 511)
    goto <bb 6>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  _6 = groupaddr_36(D)->addr[0];
  _7 = _6 & 36863;
  if (_7 == 767)
    goto <bb 6>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 6> :
  if (groupaddr_36(D) != 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  iftmp.5_38 = groupaddr_36(D)->addr[0];
  goto <bb 9>; [INV]

  <bb 8> :
  iftmp.5_37 = 0;

  <bb 9> :
  # iftmp.5_24 = PHI <iftmp.5_38(7), iftmp.5_37(8)>
  ip6addr.addr[0] = iftmp.5_24;
  if (groupaddr_36(D) != 0B)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  iftmp.6_41 = groupaddr_36(D)->addr[1];
  goto <bb 12>; [INV]

  <bb 11> :
  iftmp.6_40 = 0;

  <bb 12> :
  # iftmp.6_25 = PHI <iftmp.6_41(10), iftmp.6_40(11)>
  ip6addr.addr[1] = iftmp.6_25;
  if (groupaddr_36(D) != 0B)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  iftmp.7_44 = groupaddr_36(D)->addr[2];
  goto <bb 15>; [INV]

  <bb 14> :
  iftmp.7_43 = 0;

  <bb 15> :
  # iftmp.7_26 = PHI <iftmp.7_44(13), iftmp.7_43(14)>
  ip6addr.addr[2] = iftmp.7_26;
  if (groupaddr_36(D) != 0B)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  iftmp.8_47 = groupaddr_36(D)->addr[3];
  goto <bb 18>; [INV]

  <bb 17> :
  iftmp.8_46 = 0;

  <bb 18> :
  # iftmp.8_27 = PHI <iftmp.8_47(16), iftmp.8_46(17)>
  ip6addr.addr[3] = iftmp.8_27;
  if (groupaddr_36(D) != 0B)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  iftmp.9_50 = groupaddr_36(D)->zone;
  goto <bb 21>; [INV]

  <bb 20> :
  iftmp.9_49 = 0;

  <bb 21> :
  # iftmp.9_28 = PHI <iftmp.9_50(19), iftmp.9_49(20)>
  ip6addr.zone = iftmp.9_28;
  _8 = ip6addr.addr[0];
  _9 = _8 & 49407;
  if (_9 == 33022)
    goto <bb 24>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 22> :
  _10 = ip6addr.addr[0];
  _11 = _10 & 36863;
  if (_11 == 511)
    goto <bb 24>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 23> :
  _12 = ip6addr.addr[0];
  _13 = _12 & 36863;
  if (_13 == 767)
    goto <bb 24>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 24> :
  _14 = netif_53(D)->num;
  iftmp.10_54 = _14 + 1;
  goto <bb 26>; [INV]

  <bb 25> :
  iftmp.10_52 = 0;

  <bb 26> :
  # iftmp.10_29 = PHI <iftmp.10_54(24), iftmp.10_52(25)>
  ip6addr.zone = iftmp.10_29;
  groupaddr_56 = &ip6addr;

  <bb 27> :
  # groupaddr_22 = PHI <groupaddr_36(D)(2), groupaddr_36(D)(5), groupaddr_56(26)>
  group_58 = mld6_lookfor_group (netif_53(D), groupaddr_22);
  if (group_58 == 0B)
    goto <bb 28>; [INV]
  else
    goto <bb 33>; [INV]

  <bb 28> :
  group_60 = mld6_new_group (netif_53(D), groupaddr_22);
  if (group_60 == 0B)
    goto <bb 29>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 29> :
  _65 = -1;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 34>; [INV]

  <bb 30> :
  _15 = netif_53(D)->mld_mac_filter;
  if (_15 != 0B)
    goto <bb 31>; [INV]
  else
    goto <bb 32>; [INV]

  <bb 31> :
  _16 = netif_53(D)->mld_mac_filter;
  _16 (netif_53(D), groupaddr_22, 1);

  <bb 32> :
  _17 = lwip_stats.mld6.tx_report;
  _18 = _17 + 1;
  lwip_stats.mld6.tx_report = _18;
  mld6_send (netif_53(D), group_60, 131);
  mld6_delayed_report (group_60, 500);

  <bb 33> :
  # group_23 = PHI <group_58(27), group_60(32)>
  _19 = group_23->use;
  _20 = _19;
  _21 = _20 + 1;
  group_23->use = _21;
  _67 = 0;

  <bb 34> :
  # _30 = PHI <_65(29), _67(33)>
  ip6addr ={v} {CLOBBER};

  <bb 35> :
<L33>:
  return _30;

}


mld6_joingroup (const struct ip6_addr_t * srcaddr, const struct ip6_addr_t * groupaddr)
{
  struct netif * netif;
  err_t err;
  err_t D.7583;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  signed char _5;
  err_t _9;
  err_t _17;
  err_t _23;

  <bb 2> :
  err_14 = -6;
  netif_16 = netif_list;
  goto <bb 12>; [INV]

  <bb 3> :
  if (srcaddr_18(D) == 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  _1 = srcaddr_18(D)->addr[0];
  if (_1 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  _2 = srcaddr_18(D)->addr[1];
  if (_2 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  _3 = srcaddr_18(D)->addr[2];
  if (_3 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _4 = srcaddr_18(D)->addr[3];
  if (_4 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  _5 = netif_get_ip6_addr_match (netif_8, srcaddr_18(D));
  if (_5 >= 0)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  err_22 = mld6_joingroup_netif (netif_8, groupaddr_20(D));
  if (err_22 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  _23 = err_22;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 14>; [INV]

  <bb 11> :
  # err_6 = PHI <err_7(8), err_22(9)>
  netif_24 = netif_8->next;

  <bb 12> :
  # err_7 = PHI <err_14(2), err_6(11)>
  # netif_8 = PHI <netif_16(2), netif_24(11)>
  if (netif_8 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  _17 = err_7;

  <bb 14> :
  # _9 = PHI <_23(10), _17(13)>
<L12>:
  return _9;

}


mld6_input (struct pbuf * p, struct netif * inp)
{
  struct mld_group * group;
  struct mld_header * mld_hdr;
  short unsigned int _1;
  short unsigned int _2;
  short unsigned int _3;
  short unsigned int _4;
  short unsigned int _5;
  short unsigned int _6;
  short unsigned int _7;
  unsigned char _8;
  int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  struct ip6_addr_p_t * _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  short unsigned int _19;
  short unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;
  long unsigned int _23;
  long unsigned int _24;
  long unsigned int _25;
  long unsigned int _26;
  short unsigned int _27;
  short unsigned int _28;
  short unsigned int _29;
  short unsigned int _30;
  short unsigned int _31;
  short unsigned int _32;
  short unsigned int _33;
  short unsigned int _34;
  unsigned char _35;
  short unsigned int _36;
  short unsigned int _37;
  short unsigned int _38;
  short unsigned int _39;

  <bb 2> :
  _1 = lwip_stats.mld6.recv;
  _2 = _1 + 1;
  lwip_stats.mld6.recv = _2;
  _3 = p_49(D)->len;
  if (_3 <= 23)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  pbuf_free (p_49(D));
  _4 = lwip_stats.mld6.lenerr;
  _5 = _4 + 1;
  lwip_stats.mld6.lenerr = _5;
  _6 = lwip_stats.mld6.drop;
  _7 = _6 + 1;
  lwip_stats.mld6.drop = _7;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 34>; [INV]

  <bb 4> :
  mld_hdr_50 = p_49(D)->payload;
  _8 = mld_hdr_50->type;
  _9 = (int) _8;
  switch (_9) <default: <L32> [INV], case 130: <L2> [INV], case 131: <L26> [INV], case 132: <L31> [INV]>

  <bb 5> :
<L2>:
  _10 = ip_data.current_iphdr_dest.u_addr.ip6.addr[0];
  if (_10 == 767)
    goto <bb 6>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 6> :
  _11 = ip_data.current_iphdr_dest.u_addr.ip6.addr[1];
  if (_11 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 7> :
  _12 = ip_data.current_iphdr_dest.u_addr.ip6.addr[2];
  if (_12 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 8> :
  _13 = ip_data.current_iphdr_dest.u_addr.ip6.addr[3];
  if (_13 == 16777216)
    goto <bb 9>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 9> :
  _14 = &mld_hdr_50->multicast_address;
  if (_14 == 0B)
    goto <bb 14>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  _15 = mld_hdr_50->multicast_address.addr[0];
  if (_15 == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 11> :
  _16 = mld_hdr_50->multicast_address.addr[1];
  if (_16 == 0)
    goto <bb 12>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 12> :
  _17 = mld_hdr_50->multicast_address.addr[2];
  if (_17 == 0)
    goto <bb 13>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 13> :
  _18 = mld_hdr_50->multicast_address.addr[3];
  if (_18 == 0)
    goto <bb 14>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 14> :
  _19 = lwip_stats.mld6.rx_general;
  _20 = _19 + 1;
  lwip_stats.mld6.rx_general = _20;
  group_59 = inp_52(D)->client_data[1];
  goto <bb 22>; [INV]

  <bb 15> :
  _21 = group_40->group_address.addr[0];
  _22 = _21 & 36863;
  if (_22 != 511)
    goto <bb 16>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 16> :
  _23 = group_40->group_address.addr[0];
  if (_23 != 767)
    goto <bb 20>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 17> :
  _24 = group_40->group_address.addr[1];
  if (_24 != 0)
    goto <bb 20>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 18> :
  _25 = group_40->group_address.addr[2];
  if (_25 != 0)
    goto <bb 20>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 19> :
  _26 = group_40->group_address.addr[3];
  if (_26 != 16777216)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  _27 = mld_hdr_50->max_resp_delay;
  _28 = lwip_htons (_27);
  mld6_delayed_report (group_40, _28);

  <bb 21> :
  group_62 = group_40->next;

  <bb 22> :
  # group_40 = PHI <group_59(14), group_62(21)>
  if (group_40 != 0B)
    goto <bb 15>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 23> :
  goto <bb 26>; [INV]

  <bb 24> :
  _29 = lwip_stats.mld6.rx_group;
  _30 = _29 + 1;
  lwip_stats.mld6.rx_group = _30;
  group_65 = mld6_lookfor_group (inp_52(D), &ip_data.current_iphdr_dest.u_addr.ip6);
  if (group_65 != 0B)
    goto <bb 25>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 25> :
  _31 = mld_hdr_50->max_resp_delay;
  _32 = lwip_htons (_31);
  mld6_delayed_report (group_65, _32);

  <bb 26> :
  goto <bb 33>; [INV]

  <bb 27> :
<L26>:
  _33 = lwip_stats.mld6.rx_report;
  _34 = _33 + 1;
  lwip_stats.mld6.rx_report = _34;
  group_54 = mld6_lookfor_group (inp_52(D), &ip_data.current_iphdr_dest.u_addr.ip6);
  if (group_54 != 0B)
    goto <bb 28>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 28> :
  _35 = group_54->group_state;
  if (_35 == 1)
    goto <bb 29>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 29> :
  group_54->timer = 0;
  group_54->group_state = 2;
  group_54->last_reporter_flag = 0;

  <bb 30> :
  goto <bb 33>; [INV]

  <bb 31> :
<L31>:
  goto <bb 33>; [INV]

  <bb 32> :
<L32>:
  _36 = lwip_stats.mld6.proterr;
  _37 = _36 + 1;
  lwip_stats.mld6.proterr = _37;
  _38 = lwip_stats.mld6.drop;
  _39 = _38 + 1;
  lwip_stats.mld6.drop = _39;

  <bb 33> :
  pbuf_free (p_49(D));

  <bb 34> :
<L34>:
  return;

}


mld6_remove_group (struct netif * netif, struct mld_group * group)
{
  struct mld_group * tmpGroup;
  err_t err;
  err_t D.7545;
  void * _1;
  struct mld_group * _2;
  struct mld_group * _3;
  struct mld_group * _4;
  err_t _18;

  <bb 2> :
  err_9 = 0;
  _1 = netif_11(D)->client_data[1];
  if (group_12(D) == _1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _2 = group_12(D)->next;
  netif_11(D)->client_data[1] = _2;
  goto <bb 11>; [INV]

  <bb 4> :
  tmpGroup_13 = netif_11(D)->client_data[1];
  goto <bb 8>; [INV]

  <bb 5> :
  _3 = tmpGroup_6->next;
  if (group_12(D) == _3)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _4 = group_12(D)->next;
  tmpGroup_6->next = _4;
  goto <bb 9>; [INV]

  <bb 7> :
  tmpGroup_14 = tmpGroup_6->next;

  <bb 8> :
  # tmpGroup_6 = PHI <tmpGroup_13(4), tmpGroup_14(7)>
  if (tmpGroup_6 != 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  if (tmpGroup_6 == 0B)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  err_16 = -16;

  <bb 11> :
  # err_5 = PHI <err_9(3), err_9(9), err_16(10)>
  _18 = err_5;

  <bb 12> :
<L10>:
  return _18;

}


mld6_new_group (struct netif * ifp, const struct ip6_addr_t * addr)
{
  struct mld_group * group;
  struct mld_group * D.7536;
  u8_t iftmp.4;
  const long unsigned int iftmp.3;
  const long unsigned int iftmp.2;
  const long unsigned int iftmp.1;
  const long unsigned int iftmp.0;
  void * _1;
  const long unsigned int iftmp.0_2;
  const long unsigned int iftmp.1_3;
  const long unsigned int iftmp.2_4;
  const long unsigned int iftmp.3_5;
  u8_t iftmp.4_6;
  const long unsigned int iftmp.0_12;
  const long unsigned int iftmp.0_13;
  const long unsigned int iftmp.1_15;
  const long unsigned int iftmp.1_16;
  const long unsigned int iftmp.2_18;
  const long unsigned int iftmp.2_19;
  const long unsigned int iftmp.3_21;
  const long unsigned int iftmp.3_22;
  u8_t iftmp.4_24;
  u8_t iftmp.4_25;
  struct mld_group * _34;

  <bb 2> :
  group_10 = memp_malloc (12);
  if (group_10 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 3> :
  if (addr_11(D) != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  iftmp.0_13 = addr_11(D)->addr[0];
  goto <bb 6>; [INV]

  <bb 5> :
  iftmp.0_12 = 0;

  <bb 6> :
  # iftmp.0_2 = PHI <iftmp.0_13(4), iftmp.0_12(5)>
  group_10->group_address.addr[0] = iftmp.0_2;
  if (addr_11(D) != 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  iftmp.1_16 = addr_11(D)->addr[1];
  goto <bb 9>; [INV]

  <bb 8> :
  iftmp.1_15 = 0;

  <bb 9> :
  # iftmp.1_3 = PHI <iftmp.1_16(7), iftmp.1_15(8)>
  group_10->group_address.addr[1] = iftmp.1_3;
  if (addr_11(D) != 0B)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  iftmp.2_19 = addr_11(D)->addr[2];
  goto <bb 12>; [INV]

  <bb 11> :
  iftmp.2_18 = 0;

  <bb 12> :
  # iftmp.2_4 = PHI <iftmp.2_19(10), iftmp.2_18(11)>
  group_10->group_address.addr[2] = iftmp.2_4;
  if (addr_11(D) != 0B)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  iftmp.3_22 = addr_11(D)->addr[3];
  goto <bb 15>; [INV]

  <bb 14> :
  iftmp.3_21 = 0;

  <bb 15> :
  # iftmp.3_5 = PHI <iftmp.3_22(13), iftmp.3_21(14)>
  group_10->group_address.addr[3] = iftmp.3_5;
  if (addr_11(D) != 0B)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  iftmp.4_25 = addr_11(D)->zone;
  goto <bb 18>; [INV]

  <bb 17> :
  iftmp.4_24 = 0;

  <bb 18> :
  # iftmp.4_6 = PHI <iftmp.4_25(16), iftmp.4_24(17)>
  group_10->group_address.zone = iftmp.4_6;
  group_10->timer = 0;
  group_10->group_state = 2;
  group_10->last_reporter_flag = 0;
  group_10->use = 0;
  _1 = ifp_31(D)->client_data[1];
  group_10->next = _1;
  ifp_31(D)->client_data[1] = group_10;

  <bb 19> :
  _34 = group_10;

  <bb 20> :
<L17>:
  return _34;

}


mld6_lookfor_group (struct netif * ifp, const struct ip6_addr_t * addr)
{
  struct mld_group * group;
  struct mld_group * D.7512;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  unsigned char _9;
  unsigned char _10;
  struct mld_group * _12;
  struct mld_group * _16;
  struct mld_group * _18;

  <bb 2> :
  group_15 = ifp_14(D)->client_data[1];
  goto <bb 10>; [INV]

  <bb 3> :
  _1 = group_11->group_address.addr[0];
  _2 = addr_17(D)->addr[0];
  if (_1 == _2)
    goto <bb 4>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 4> :
  _3 = group_11->group_address.addr[1];
  _4 = addr_17(D)->addr[1];
  if (_3 == _4)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 5> :
  _5 = group_11->group_address.addr[2];
  _6 = addr_17(D)->addr[2];
  if (_5 == _6)
    goto <bb 6>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 6> :
  _7 = group_11->group_address.addr[3];
  _8 = addr_17(D)->addr[3];
  if (_7 == _8)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  _9 = group_11->group_address.zone;
  _10 = addr_17(D)->zone;
  if (_9 == _10)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  _18 = group_11;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 12>; [INV]

  <bb 9> :
  group_19 = group_11->next;

  <bb 10> :
  # group_11 = PHI <group_15(2), group_19(9)>
  if (group_11 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  _16 = 0B;

  <bb 12> :
  # _12 = PHI <_18(8), _16(11)>
<L13>:
  return _12;

}


mld6_report_groups (struct netif * netif)
{
  struct mld_group * group;

  <bb 2> :
  group_5 = netif_4(D)->client_data[1];
  goto <bb 4>; [INV]

  <bb 3> :
  mld6_delayed_report (group_1, 500);
  group_7 = group_1->next;

  <bb 4> :
  # group_1 = PHI <group_5(2), group_7(3)>
  if (group_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  return;

}


mld6_stop (struct netif * netif)
{
  struct mld_group * next;
  struct mld_group * group;
  err_t D.7500;
  err_t (*<T6ef>) (struct netif *, const struct ip6_addr_t *, netif_mac_filter_action) _1;
  err_t (*<T6ef>) (struct netif *, const struct ip6_addr_t *, netif_mac_filter_action) _2;
  struct ip6_addr_t * _3;
  err_t _11;

  <bb 2> :
  group_9 = netif_8(D)->client_data[1];
  netif_8(D)->client_data[1] = 0B;
  goto <bb 6>; [INV]

  <bb 3> :
  next_12 = group_4->next;
  _1 = netif_8(D)->mld_mac_filter;
  if (_1 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _2 = netif_8(D)->mld_mac_filter;
  _3 = &group_4->group_address;
  _2 (netif_8(D), _3, 0);

  <bb 5> :
  memp_free (12, group_4);
  group_15 = next_12;

  <bb 6> :
  # group_4 = PHI <group_9(2), group_15(5)>
  if (group_4 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _11 = 0;

  <bb 8> :
<L5>:
  return _11;

}


