IPA summary for snmp_encode_truthvalue/42 is missing.
IPA summary for snmp_encode_bits/41 is missing.
IPA summary for snmp_decode_truthvalue/40 is missing.
IPA summary for snmp_decode_bits/39 is missing.
IPA summary for snmp_set_test_ok/38 is missing.
IPA summary for snmp_oid_in_range/37 is missing.
IPA summary for snmp_next_oid_check/36 is missing.
IPA summary for snmp_next_oid_precheck/35 is missing.
IPA summary for snmp_next_oid_init/34 is missing.
IPA summary for snmp_mib_tree_resolve_next/33 is missing.
IPA summary for snmp_mib_tree_resolve_exact/32 is missing.
IPA summary for snmp_get_next_node_instance_from_oid/31 is missing.
IPA summary for snmp_get_node_instance_from_oid/30 is missing.
IPA summary for snmp_get_mib_between/29 is missing.
IPA summary for snmp_get_next_mib/28 is missing.
IPA summary for snmp_get_mib_from_oid/27 is missing.
IPA summary for netif_to_num/26 is missing.
IPA summary for snmp_oid_equal/25 is missing.
IPA summary for snmp_oid_compare/24 is missing.
IPA summary for snmp_oid_append/23 is missing.
IPA summary for snmp_oid_combine/22 is missing.
IPA summary for snmp_oid_prefix/21 is missing.
IPA summary for snmp_oid_assign/20 is missing.
IPA summary for snmp_oid_to_ip_port/19 is missing.
IPA summary for snmp_oid_to_ip/18 is missing.
IPA summary for snmp_ip_to_oid/17 is missing.
IPA summary for snmp_ip_port_to_oid/16 is missing.
IPA summary for snmp_ip6_to_oid/15 is missing.
IPA summary for snmp_oid_to_ip6/14 is missing.
IPA summary for snmp_ip4_to_oid/13 is missing.
IPA summary for snmp_oid_to_ip4/12 is missing.
IPA summary for snmp_get_device_enterprise_oid/11 is missing.
IPA summary for snmp_set_device_enterprise_oid/10 is missing.
IPA summary for snmp_set_mibs/9 is missing.

Flattening functions:
Overall time estimate: 0.000000 weighted by profile: 0.000000

Deciding on inlining of small functions.  Starting with size 0.
node context cache: 0 hits, 0 misses, 0 initializations

Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:

Deciding on functions to be inlined into all callers and removing useless speculations:
Overall time estimate: 0.000000 weighted by profile: 0.000000

Why inlining failed?
function not considered for inlining              :       34 calls, 34.000000 freq, 0 count
function body not available                       :        5 calls, 5.000000 freq, 0 count
IPA summary for snmp_encode_truthvalue/42 is missing.
IPA summary for snmp_encode_bits/41 is missing.
IPA summary for snmp_decode_truthvalue/40 is missing.
IPA summary for snmp_decode_bits/39 is missing.
IPA summary for snmp_set_test_ok/38 is missing.
IPA summary for snmp_oid_in_range/37 is missing.
IPA summary for snmp_next_oid_check/36 is missing.
IPA summary for snmp_next_oid_precheck/35 is missing.
IPA summary for snmp_next_oid_init/34 is missing.
IPA summary for snmp_mib_tree_resolve_next/33 is missing.
IPA summary for snmp_mib_tree_resolve_exact/32 is missing.
IPA summary for snmp_get_next_node_instance_from_oid/31 is missing.
IPA summary for snmp_get_node_instance_from_oid/30 is missing.
IPA summary for snmp_get_mib_between/29 is missing.
IPA summary for snmp_get_next_mib/28 is missing.
IPA summary for snmp_get_mib_from_oid/27 is missing.
IPA summary for netif_to_num/26 is missing.
IPA summary for snmp_oid_equal/25 is missing.
IPA summary for snmp_oid_compare/24 is missing.
IPA summary for snmp_oid_append/23 is missing.
IPA summary for snmp_oid_combine/22 is missing.
IPA summary for snmp_oid_prefix/21 is missing.
IPA summary for snmp_oid_assign/20 is missing.
IPA summary for snmp_oid_to_ip_port/19 is missing.
IPA summary for snmp_oid_to_ip/18 is missing.
IPA summary for snmp_ip_to_oid/17 is missing.
IPA summary for snmp_ip_port_to_oid/16 is missing.
IPA summary for snmp_ip6_to_oid/15 is missing.
IPA summary for snmp_oid_to_ip6/14 is missing.
IPA summary for snmp_ip4_to_oid/13 is missing.
IPA summary for snmp_oid_to_ip4/12 is missing.
IPA summary for snmp_get_device_enterprise_oid/11 is missing.
IPA summary for snmp_set_device_enterprise_oid/10 is missing.
IPA summary for snmp_set_mibs/9 is missing.
Symbol table:

memcpy/46 (memcpy) @06e2a000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: snmp_next_oid_check/36 snmp_oid_append/23 snmp_oid_prefix/21 snmp_oid_assign/20 
  Calls: 
memset/45 (memset) @06deb8c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: snmp_oid_to_ip/18 
  Calls: 
ip_addr_any/44 (ip_addr_any) @06dc8d80
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: snmp_oid_to_ip4/12 (read) 
  Availability: not_available
  Varpool flags: read-only
mib2/43 (mib2) @06dc8510
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: default_mibs/6 (addr) 
  Availability: not_available
  Varpool flags: read-only
snmp_encode_truthvalue/42 (snmp_encode_truthvalue) @06deb2a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
snmp_encode_bits/41 (snmp_encode_bits) @06deb000
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
snmp_decode_truthvalue/40 (snmp_decode_truthvalue) @06dc1b60
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
snmp_decode_bits/39 (snmp_decode_bits) @06dc1540
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
snmp_set_test_ok/38 (snmp_set_test_ok) @06dc1000
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
snmp_oid_in_range/37 (snmp_oid_in_range) @06dc1d20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
snmp_next_oid_check/36 (snmp_next_oid_check) @06dc1a80
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: memcpy/46 snmp_oid_compare/24 snmp_oid_compare/24 
snmp_next_oid_precheck/35 (snmp_next_oid_precheck) @06dc1700
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: snmp_oid_compare/24 snmp_oid_compare/24 
snmp_next_oid_init/34 (snmp_next_oid_init) @06dc1460
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
snmp_mib_tree_resolve_next/33 (snmp_mib_tree_resolve_next) @06dc11c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: snmp_get_next_node_instance_from_oid/31 snmp_get_next_node_instance_from_oid/31 
  Calls: snmp_oid_assign/20 
snmp_mib_tree_resolve_exact/32 (snmp_mib_tree_resolve_exact) @06daee00
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: snmp_get_next_node_instance_from_oid/31 snmp_get_node_instance_from_oid/30 
  Calls: 
snmp_get_next_node_instance_from_oid/31 (snmp_get_next_node_instance_from_oid) @06dae0e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: snmp_get_mib_from_oid/27 snmp_oid_compare/24 snmp_get_next_mib/28 snmp_get_mib_between/29 snmp_oid_assign/20 snmp_mib_tree_resolve_next/33 snmp_oid_append/23 snmp_mib_tree_resolve_next/33 snmp_oid_assign/20 snmp_oid_assign/20 snmp_mib_tree_resolve_exact/32 snmp_get_next_mib/28 snmp_get_mib_from_oid/27 
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
snmp_get_node_instance_from_oid/30 (snmp_get_node_instance_from_oid) @06daed20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: snmp_oid_assign/20 snmp_mib_tree_resolve_exact/32 snmp_get_mib_from_oid/27 
   Indirect call Num speculative call targets: 0
snmp_get_mib_between/29 (snmp_get_mib_between) @06daea80
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: snmp_get_next_node_instance_from_oid/31 
  Calls: snmp_oid_compare/24 snmp_get_next_mib/28 
snmp_get_next_mib/28 (snmp_get_next_mib) @06dae7e0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: snmp_mibs/8 (read) snmp_mibs/8 (read) snmp_mibs/8 (read) snmp_mibs/8 (read) snmp_mibs/8 (read) snmp_mibs/8 (read) snmp_num_mibs/7 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: snmp_get_next_node_instance_from_oid/31 snmp_get_next_node_instance_from_oid/31 snmp_get_mib_between/29 
  Calls: snmp_oid_compare/24 snmp_oid_compare/24 
snmp_get_mib_from_oid/27 (snmp_get_mib_from_oid) @06dae540
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: snmp_mibs/8 (read) snmp_mibs/8 (read) snmp_mibs/8 (read) snmp_mibs/8 (read) snmp_mibs/8 (read) snmp_mibs/8 (read) snmp_mibs/8 (read) snmp_mibs/8 (read) snmp_num_mibs/7 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: snmp_get_next_node_instance_from_oid/31 snmp_get_next_node_instance_from_oid/31 snmp_get_node_instance_from_oid/30 
  Calls: 
netif_to_num/26 (netif_to_num) @06dae2a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
snmp_oid_equal/25 (snmp_oid_equal) @06dae000
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: snmp_oid_compare/24 
snmp_oid_compare/24 (snmp_oid_compare) @06da3b60
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: snmp_next_oid_check/36 snmp_next_oid_check/36 snmp_next_oid_precheck/35 snmp_next_oid_precheck/35 snmp_get_next_node_instance_from_oid/31 snmp_get_mib_between/29 snmp_get_next_mib/28 snmp_get_next_mib/28 snmp_oid_equal/25 
  Calls: 
snmp_oid_append/23 (snmp_oid_append) @06da3460
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: snmp_get_next_node_instance_from_oid/31 snmp_oid_combine/22 
  Calls: memcpy/46 
snmp_oid_combine/22 (snmp_oid_combine) @06da3d20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: snmp_oid_append/23 snmp_oid_assign/20 
snmp_oid_prefix/21 (snmp_oid_prefix) @06da3a80
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: memcpy/46 
snmp_oid_assign/20 (snmp_oid_assign) @06da3700
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: snmp_get_next_node_instance_from_oid/31 snmp_get_next_node_instance_from_oid/31 snmp_get_next_node_instance_from_oid/31 snmp_mib_tree_resolve_next/33 snmp_get_node_instance_from_oid/30 snmp_oid_combine/22 
  Calls: memcpy/46 
snmp_oid_to_ip_port/19 (snmp_oid_to_ip_port) @06da3380
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: snmp_oid_to_ip/18 
snmp_oid_to_ip/18 (snmp_oid_to_ip) @06da30e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: snmp_oid_to_ip_port/19 
  Calls: snmp_oid_to_ip6/14 snmp_oid_to_ip4/12 memset/45 
snmp_ip_to_oid/17 (snmp_ip_to_oid) @06d95620
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: snmp_ip_port_to_oid/16 
  Calls: snmp_ip4_to_oid/13 snmp_ip6_to_oid/15 
snmp_ip_port_to_oid/16 (snmp_ip_port_to_oid) @06d95d20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: snmp_ip_to_oid/17 
snmp_ip6_to_oid/15 (snmp_ip6_to_oid) @06d95a80
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: snmp_ip_to_oid/17 
  Calls: 
snmp_oid_to_ip6/14 (snmp_oid_to_ip6) @06d957e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: snmp_oid_to_ip/18 
  Calls: 
snmp_ip4_to_oid/13 (snmp_ip4_to_oid) @06d95540
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: snmp_ip_to_oid/17 
  Calls: 
snmp_oid_to_ip4/12 (snmp_oid_to_ip4) @06d8de00
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: ip_addr_any/44 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: snmp_oid_to_ip/18 
  Calls: 
snmp_get_device_enterprise_oid/11 (snmp_get_device_enterprise_oid) @06d8d8c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: snmp_device_enterprise_oid/3 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
snmp_set_device_enterprise_oid/10 (snmp_set_device_enterprise_oid) @06d8dd20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: snmp_device_enterprise_oid/3 (write) snmp_device_enterprise_oid_default/2 (addr) snmp_device_enterprise_oid/3 (write) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
snmp_set_mibs/9 (snmp_set_mibs) @06d8da80
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: snmp_mibs/8 (write) snmp_num_mibs/7 (write) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
snmp_mibs/8 (snmp_mibs) @06d64d80
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: default_mibs/6 (addr) 
  Referring: snmp_set_mibs/9 (write) snmp_get_mib_from_oid/27 (read) snmp_get_mib_from_oid/27 (read) snmp_get_mib_from_oid/27 (read) snmp_get_mib_from_oid/27 (read) snmp_get_mib_from_oid/27 (read) snmp_get_mib_from_oid/27 (read) snmp_get_mib_from_oid/27 (read) snmp_get_mib_from_oid/27 (read) snmp_get_next_mib/28 (read) snmp_get_next_mib/28 (read) snmp_get_next_mib/28 (read) snmp_get_next_mib/28 (read) snmp_get_next_mib/28 (read) snmp_get_next_mib/28 (read) 
  Availability: available
  Varpool flags: initialized
snmp_num_mibs/7 (snmp_num_mibs) @06d64cf0
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: snmp_set_mibs/9 (write) snmp_get_mib_from_oid/27 (read) snmp_get_next_mib/28 (read) 
  Availability: available
  Varpool flags: initialized
default_mibs/6 (default_mibs) @06d64ca8
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: mib2/43 (addr) 
  Referring: snmp_mibs/8 (addr) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
snmp_zero_dot_zero/5 (snmp_zero_dot_zero) @06d64678
  Type: variable definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: snmp_zero_dot_zero_values/4 (addr) 
  Referring: 
  Availability: available
  Varpool flags: initialized read-only const-value-known
snmp_zero_dot_zero_values/4 (snmp_zero_dot_zero_values) @06d64630
  Type: variable definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: snmp_zero_dot_zero/5 (addr) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
snmp_device_enterprise_oid/3 (snmp_device_enterprise_oid) @06d645a0
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: snmp_device_enterprise_oid_default/2 (addr) 
  Referring: snmp_set_device_enterprise_oid/10 (write) snmp_set_device_enterprise_oid/10 (write) snmp_get_device_enterprise_oid/11 (read) 
  Availability: available
  Varpool flags: initialized
snmp_device_enterprise_oid_default/2 (snmp_device_enterprise_oid_default) @06d64510
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: snmp_device_enterprise_oid/3 (addr) snmp_set_device_enterprise_oid/10 (addr) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
snmp_stats/1 (snmp_stats) @06d64438
  Type: variable definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Varpool flags:

;; Function snmp_set_mibs (snmp_set_mibs, funcdef_no=1, decl_uid=6729, cgraph_uid=2, symbol_order=9)

snmp_set_mibs (const struct snmp_mib * * mibs, u8_t num_mibs)
{
  <bb 2> :
  if (mibs_3(D) == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  __asm__ __volatile__("BKPT #0
	");
  goto <bb 3>; [INV]

  <bb 4> :
  if (num_mibs_5(D) == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  __asm__ __volatile__("BKPT #0
	");
  goto <bb 5>; [INV]

  <bb 6> :
  snmp_mibs = mibs_3(D);
  snmp_num_mibs = num_mibs_5(D);
  return;

}



;; Function snmp_set_device_enterprise_oid (snmp_set_device_enterprise_oid, funcdef_no=2, decl_uid=6731, cgraph_uid=3, symbol_order=10)

snmp_set_device_enterprise_oid (const struct snmp_obj_id * device_enterprise_oid)
{
  <bb 2> :
  if (device_enterprise_oid_2(D) == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  snmp_device_enterprise_oid = &snmp_device_enterprise_oid_default;
  goto <bb 5>; [INV]

  <bb 4> :
  snmp_device_enterprise_oid = device_enterprise_oid_2(D);

  <bb 5> :
  return;

}



;; Function snmp_get_device_enterprise_oid (snmp_get_device_enterprise_oid, funcdef_no=3, decl_uid=6733, cgraph_uid=4, symbol_order=11)

snmp_get_device_enterprise_oid ()
{
  const struct snmp_obj_id * D.7825;
  const struct snmp_obj_id * _2;

  <bb 2> :
  _2 = snmp_device_enterprise_oid;

  <bb 3> :
<L0>:
  return _2;

}



;; Function snmp_oid_to_ip4 (snmp_oid_to_ip4, funcdef_no=4, decl_uid=6642, cgraph_uid=5, symbol_order=12)

snmp_oid_to_ip4 (const u32_t * oid, struct ip4_addr_t * ip)
{
  u8_t D.7832;
  long unsigned int _1;
  const u32_t * _2;
  long unsigned int _3;
  const u32_t * _4;
  long unsigned int _5;
  const u32_t * _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  const u32_t * _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  const u32_t * _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  const u32_t * _21;
  long unsigned int _22;
  long unsigned int _23;
  long unsigned int _24;
  long unsigned int _25;
  long unsigned int _26;
  long unsigned int _27;
  const u32_t * _28;
  long unsigned int _29;
  long unsigned int _30;
  long unsigned int _31;
  long unsigned int _32;
  const u32_t * _33;
  long unsigned int _34;
  long unsigned int _35;
  long unsigned int _36;
  long unsigned int _37;
  const u32_t * _38;
  long unsigned int _39;
  long unsigned int _40;
  long unsigned int _41;
  long unsigned int _42;
  long unsigned int _43;
  long unsigned int _44;
  long unsigned int _45;
  long unsigned int _46;
  const u32_t * _47;
  long unsigned int _48;
  long unsigned int _49;
  long unsigned int _50;
  long unsigned int _51;
  const u32_t * _52;
  long unsigned int _53;
  long unsigned int _54;
  long unsigned int _55;
  long unsigned int _56;
  const u32_t * _57;
  long unsigned int _58;
  long unsigned int _59;
  long unsigned int _60;
  long unsigned int _61;
  long unsigned int _62;
  long unsigned int _63;
  long unsigned int _64;
  long unsigned int _65;
  const u32_t * _66;
  long unsigned int _67;
  long unsigned int _68;
  long unsigned int _69;
  long unsigned int _70;
  const u32_t * _71;
  long unsigned int _72;
  long unsigned int _73;
  long unsigned int _74;
  long unsigned int _75;
  const u32_t * _76;
  long unsigned int _77;
  long unsigned int _78;
  long unsigned int _79;
  long unsigned int _80;
  long unsigned int _81;
  u8_t _82;
  u8_t _88;
  u8_t _90;

  <bb 2> :
  _1 = *oid_85(D);
  if (_1 > 255)
    goto <bb 6>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  _2 = oid_85(D) + 4;
  _3 = *_2;
  if (_3 > 255)
    goto <bb 6>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  _4 = oid_85(D) + 8;
  _5 = *_4;
  if (_5 > 255)
    goto <bb 6>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  _6 = oid_85(D) + 12;
  _7 = *_6;
  if (_7 > 255)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _8 = ip_addr_any.u_addr.ip4.addr;
  ip_86(D)->addr = _8;
  _90 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 8>; [INV]

  <bb 7> :
  _9 = *oid_85(D);
  _10 = _9 << 24;
  _11 = oid_85(D) + 4;
  _12 = *_11;
  _13 = _12 << 16;
  _14 = _13 & 16711680;
  _15 = _10 | _14;
  _16 = oid_85(D) + 8;
  _17 = *_16;
  _18 = _17 << 8;
  _19 = _18 & 65535;
  _20 = _15 | _19;
  _21 = oid_85(D) + 12;
  _22 = *_21;
  _23 = _22 & 255;
  _24 = _20 | _23;
  _25 = _24 << 24;
  _26 = *oid_85(D);
  _27 = _26 << 24;
  _28 = oid_85(D) + 4;
  _29 = *_28;
  _30 = _29 << 16;
  _31 = _30 & 16711680;
  _32 = _27 | _31;
  _33 = oid_85(D) + 8;
  _34 = *_33;
  _35 = _34 << 8;
  _36 = _35 & 65535;
  _37 = _32 | _36;
  _38 = oid_85(D) + 12;
  _39 = *_38;
  _40 = _39 & 255;
  _41 = _37 | _40;
  _42 = _41 << 8;
  _43 = _42 & 16711680;
  _44 = _25 | _43;
  _45 = *oid_85(D);
  _46 = _45 << 24;
  _47 = oid_85(D) + 4;
  _48 = *_47;
  _49 = _48 << 16;
  _50 = _49 & 16711680;
  _51 = _46 | _50;
  _52 = oid_85(D) + 8;
  _53 = *_52;
  _54 = _53 << 8;
  _55 = _54 & 65535;
  _56 = _51 | _55;
  _57 = oid_85(D) + 12;
  _58 = *_57;
  _59 = _58 & 255;
  _60 = _56 | _59;
  _61 = _60 >> 8;
  _62 = _61 & 65280;
  _63 = _44 | _62;
  _64 = *oid_85(D);
  _65 = _64 << 24;
  _66 = oid_85(D) + 4;
  _67 = *_66;
  _68 = _67 << 16;
  _69 = _68 & 16711680;
  _70 = _65 | _69;
  _71 = oid_85(D) + 8;
  _72 = *_71;
  _73 = _72 << 8;
  _74 = _73 & 65535;
  _75 = _70 | _74;
  _76 = oid_85(D) + 12;
  _77 = *_76;
  _78 = _77 & 255;
  _79 = _75 | _78;
  _80 = _79 >> 24;
  _81 = _63 | _80;
  ip_86(D)->addr = _81;
  _88 = 1;

  <bb 8> :
  # _82 = PHI <_90(6), _88(7)>
<L5>:
  return _82;

}



;; Function snmp_ip4_to_oid (snmp_ip4_to_oid, funcdef_no=5, decl_uid=6645, cgraph_uid=6, symbol_order=13)

snmp_ip4_to_oid (const struct ip4_addr_t * ip, u32_t * oid)
{
  const u32_t * _1;
  unsigned char _2;
  long unsigned int _3;
  const u32_t * _4;
  const u8_t * _5;
  unsigned char _6;
  u32_t * _7;
  long unsigned int _8;
  const u32_t * _9;
  const u8_t * _10;
  unsigned char _11;
  u32_t * _12;
  long unsigned int _13;
  const u32_t * _14;
  const u8_t * _15;
  unsigned char _16;
  u32_t * _17;
  long unsigned int _18;

  <bb 2> :
  _1 = &ip_19(D)->addr;
  _2 = MEM[(const u8_t *)_1];
  _3 = (long unsigned int) _2;
  *oid_21(D) = _3;
  _4 = &ip_19(D)->addr;
  _5 = _4 + 1;
  _6 = *_5;
  _7 = oid_21(D) + 4;
  _8 = (long unsigned int) _6;
  *_7 = _8;
  _9 = &ip_19(D)->addr;
  _10 = _9 + 2;
  _11 = *_10;
  _12 = oid_21(D) + 8;
  _13 = (long unsigned int) _11;
  *_12 = _13;
  _14 = &ip_19(D)->addr;
  _15 = _14 + 3;
  _16 = *_15;
  _17 = oid_21(D) + 12;
  _18 = (long unsigned int) _16;
  *_17 = _18;
  return;

}



;; Function snmp_oid_to_ip6 (snmp_oid_to_ip6, funcdef_no=6, decl_uid=6648, cgraph_uid=7, symbol_order=14)

snmp_oid_to_ip6 (const u32_t * oid, struct ip6_addr_t * ip)
{
  u8_t D.7851;
  long unsigned int _1;
  const u32_t * _2;
  long unsigned int _3;
  const u32_t * _4;
  long unsigned int _5;
  const u32_t * _6;
  long unsigned int _7;
  const u32_t * _8;
  long unsigned int _9;
  const u32_t * _10;
  long unsigned int _11;
  const u32_t * _12;
  long unsigned int _13;
  const u32_t * _14;
  long unsigned int _15;
  const u32_t * _16;
  long unsigned int _17;
  const u32_t * _18;
  long unsigned int _19;
  const u32_t * _20;
  long unsigned int _21;
  const u32_t * _22;
  long unsigned int _23;
  const u32_t * _24;
  long unsigned int _25;
  const u32_t * _26;
  long unsigned int _27;
  const u32_t * _28;
  long unsigned int _29;
  const u32_t * _30;
  long unsigned int _31;
  long unsigned int _32;
  long unsigned int _33;
  const u32_t * _34;
  long unsigned int _35;
  long unsigned int _36;
  long unsigned int _37;
  const u32_t * _38;
  long unsigned int _39;
  long unsigned int _40;
  long unsigned int _41;
  const u32_t * _42;
  long unsigned int _43;
  long unsigned int _44;
  const u32_t * _45;
  long unsigned int _46;
  long unsigned int _47;
  const u32_t * _48;
  long unsigned int _49;
  long unsigned int _50;
  long unsigned int _51;
  const u32_t * _52;
  long unsigned int _53;
  long unsigned int _54;
  long unsigned int _55;
  const u32_t * _56;
  long unsigned int _57;
  long unsigned int _58;
  const u32_t * _59;
  long unsigned int _60;
  long unsigned int _61;
  const u32_t * _62;
  long unsigned int _63;
  long unsigned int _64;
  long unsigned int _65;
  const u32_t * _66;
  long unsigned int _67;
  long unsigned int _68;
  long unsigned int _69;
  const u32_t * _70;
  long unsigned int _71;
  long unsigned int _72;
  const u32_t * _73;
  long unsigned int _74;
  long unsigned int _75;
  const u32_t * _76;
  long unsigned int _77;
  long unsigned int _78;
  long unsigned int _79;
  const u32_t * _80;
  long unsigned int _81;
  long unsigned int _82;
  long unsigned int _83;
  const u32_t * _84;
  long unsigned int _85;
  long unsigned int _86;
  u8_t _87;
  u8_t _96;
  u8_t _102;

  <bb 2> :
  _1 = *oid_90(D);
  if (_1 > 255)
    goto <bb 18>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  _2 = oid_90(D) + 4;
  _3 = *_2;
  if (_3 > 255)
    goto <bb 18>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  _4 = oid_90(D) + 8;
  _5 = *_4;
  if (_5 > 255)
    goto <bb 18>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  _6 = oid_90(D) + 12;
  _7 = *_6;
  if (_7 > 255)
    goto <bb 18>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  _8 = oid_90(D) + 16;
  _9 = *_8;
  if (_9 > 255)
    goto <bb 18>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _10 = oid_90(D) + 20;
  _11 = *_10;
  if (_11 > 255)
    goto <bb 18>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  _12 = oid_90(D) + 24;
  _13 = *_12;
  if (_13 > 255)
    goto <bb 18>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  _14 = oid_90(D) + 28;
  _15 = *_14;
  if (_15 > 255)
    goto <bb 18>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  _16 = oid_90(D) + 32;
  _17 = *_16;
  if (_17 > 255)
    goto <bb 18>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  _18 = oid_90(D) + 36;
  _19 = *_18;
  if (_19 > 255)
    goto <bb 18>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  _20 = oid_90(D) + 40;
  _21 = *_20;
  if (_21 > 255)
    goto <bb 18>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  _22 = oid_90(D) + 44;
  _23 = *_22;
  if (_23 > 255)
    goto <bb 18>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 14> :
  _24 = oid_90(D) + 48;
  _25 = *_24;
  if (_25 > 255)
    goto <bb 18>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  _26 = oid_90(D) + 52;
  _27 = *_26;
  if (_27 > 255)
    goto <bb 18>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 16> :
  _28 = oid_90(D) + 56;
  _29 = *_28;
  if (_29 > 255)
    goto <bb 18>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 17> :
  _30 = oid_90(D) + 60;
  _31 = *_30;
  if (_31 > 255)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  ip_91(D)->addr[0] = 0;
  ip_91(D)->addr[1] = 0;
  ip_91(D)->addr[2] = 0;
  ip_91(D)->addr[3] = 0;
  ip_91(D)->zone = 0;
  _102 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 20>; [INV]

  <bb 19> :
  _32 = *oid_90(D);
  _33 = _32 << 24;
  _34 = oid_90(D) + 4;
  _35 = *_34;
  _36 = _35 << 16;
  _37 = _33 | _36;
  _38 = oid_90(D) + 8;
  _39 = *_38;
  _40 = _39 << 8;
  _41 = _37 | _40;
  _42 = oid_90(D) + 12;
  _43 = *_42;
  _44 = _41 | _43;
  ip_91(D)->addr[0] = _44;
  _45 = oid_90(D) + 16;
  _46 = *_45;
  _47 = _46 << 24;
  _48 = oid_90(D) + 20;
  _49 = *_48;
  _50 = _49 << 16;
  _51 = _47 | _50;
  _52 = oid_90(D) + 24;
  _53 = *_52;
  _54 = _53 << 8;
  _55 = _51 | _54;
  _56 = oid_90(D) + 28;
  _57 = *_56;
  _58 = _55 | _57;
  ip_91(D)->addr[1] = _58;
  _59 = oid_90(D) + 32;
  _60 = *_59;
  _61 = _60 << 24;
  _62 = oid_90(D) + 36;
  _63 = *_62;
  _64 = _63 << 16;
  _65 = _61 | _64;
  _66 = oid_90(D) + 40;
  _67 = *_66;
  _68 = _67 << 8;
  _69 = _65 | _68;
  _70 = oid_90(D) + 44;
  _71 = *_70;
  _72 = _69 | _71;
  ip_91(D)->addr[2] = _72;
  _73 = oid_90(D) + 48;
  _74 = *_73;
  _75 = _74 << 24;
  _76 = oid_90(D) + 52;
  _77 = *_76;
  _78 = _77 << 16;
  _79 = _75 | _78;
  _80 = oid_90(D) + 56;
  _81 = *_80;
  _82 = _81 << 8;
  _83 = _79 | _82;
  _84 = oid_90(D) + 60;
  _85 = *_84;
  _86 = _83 | _85;
  ip_91(D)->addr[3] = _86;
  _96 = 1;

  <bb 20> :
  # _87 = PHI <_102(18), _96(19)>
<L17>:
  return _87;

}



;; Function snmp_ip6_to_oid (snmp_ip6_to_oid, funcdef_no=7, decl_uid=6651, cgraph_uid=8, symbol_order=15)

snmp_ip6_to_oid (const struct ip6_addr_t * ip, u32_t * oid)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  u32_t * _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  u32_t * _9;
  long unsigned int _10;
  long unsigned int _11;
  u32_t * _12;
  long unsigned int _13;
  long unsigned int _14;
  u32_t * _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  u32_t * _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;
  u32_t * _23;
  long unsigned int _24;
  long unsigned int _25;
  u32_t * _26;
  long unsigned int _27;
  long unsigned int _28;
  u32_t * _29;
  long unsigned int _30;
  long unsigned int _31;
  long unsigned int _32;
  u32_t * _33;
  long unsigned int _34;
  long unsigned int _35;
  long unsigned int _36;
  u32_t * _37;
  long unsigned int _38;
  long unsigned int _39;
  u32_t * _40;
  long unsigned int _41;
  long unsigned int _42;
  u32_t * _43;
  long unsigned int _44;
  long unsigned int _45;
  long unsigned int _46;
  u32_t * _47;
  long unsigned int _48;
  long unsigned int _49;
  long unsigned int _50;
  u32_t * _51;
  long unsigned int _52;
  long unsigned int _53;
  u32_t * _54;
  long unsigned int _55;

  <bb 2> :
  _1 = ip_57(D)->addr[0];
  _2 = _1 >> 24;
  *oid_58(D) = _2;
  _3 = ip_57(D)->addr[0];
  _4 = _3 >> 16;
  _5 = oid_58(D) + 4;
  _6 = _4 & 255;
  *_5 = _6;
  _7 = ip_57(D)->addr[0];
  _8 = _7 >> 8;
  _9 = oid_58(D) + 8;
  _10 = _8 & 255;
  *_9 = _10;
  _11 = ip_57(D)->addr[0];
  _12 = oid_58(D) + 12;
  _13 = _11 & 255;
  *_12 = _13;
  _14 = ip_57(D)->addr[1];
  _15 = oid_58(D) + 16;
  _16 = _14 >> 24;
  *_15 = _16;
  _17 = ip_57(D)->addr[1];
  _18 = _17 >> 16;
  _19 = oid_58(D) + 20;
  _20 = _18 & 255;
  *_19 = _20;
  _21 = ip_57(D)->addr[1];
  _22 = _21 >> 8;
  _23 = oid_58(D) + 24;
  _24 = _22 & 255;
  *_23 = _24;
  _25 = ip_57(D)->addr[1];
  _26 = oid_58(D) + 28;
  _27 = _25 & 255;
  *_26 = _27;
  _28 = ip_57(D)->addr[2];
  _29 = oid_58(D) + 32;
  _30 = _28 >> 24;
  *_29 = _30;
  _31 = ip_57(D)->addr[2];
  _32 = _31 >> 16;
  _33 = oid_58(D) + 36;
  _34 = _32 & 255;
  *_33 = _34;
  _35 = ip_57(D)->addr[2];
  _36 = _35 >> 8;
  _37 = oid_58(D) + 40;
  _38 = _36 & 255;
  *_37 = _38;
  _39 = ip_57(D)->addr[2];
  _40 = oid_58(D) + 44;
  _41 = _39 & 255;
  *_40 = _41;
  _42 = ip_57(D)->addr[3];
  _43 = oid_58(D) + 48;
  _44 = _42 >> 24;
  *_43 = _44;
  _45 = ip_57(D)->addr[3];
  _46 = _45 >> 16;
  _47 = oid_58(D) + 52;
  _48 = _46 & 255;
  *_47 = _48;
  _49 = ip_57(D)->addr[3];
  _50 = _49 >> 8;
  _51 = oid_58(D) + 56;
  _52 = _50 & 255;
  *_51 = _52;
  _53 = ip_57(D)->addr[3];
  _54 = oid_58(D) + 60;
  _55 = _53 & 255;
  *_54 = _55;
  return;

}



;; Function snmp_ip_port_to_oid (snmp_ip_port_to_oid, funcdef_no=8, decl_uid=6658, cgraph_uid=9, symbol_order=16)

snmp_ip_port_to_oid (const struct ip_addr_t * ip, u16_t port, u32_t * oid)
{
  u8_t idx;
  u8_t D.7853;
  unsigned int _1;
  unsigned int _2;
  u32_t * _3;
  long unsigned int _4;
  unsigned char idx.0_5;
  u8_t _14;

  <bb 2> :
  idx_10 = snmp_ip_to_oid (ip_7(D), oid_8(D));
  _1 = (unsigned int) idx_10;
  _2 = _1 * 4;
  _3 = oid_8(D) + _2;
  _4 = (long unsigned int) port_11(D);
  *_3 = _4;
  idx.0_5 = idx_10;
  idx_13 = idx.0_5 + 1;
  _14 = idx_13;

  <bb 3> :
<L0>:
  return _14;

}



;; Function snmp_ip_to_oid (snmp_ip_to_oid, funcdef_no=9, decl_uid=6654, cgraph_uid=10, symbol_order=17)

snmp_ip_to_oid (const struct ip_addr_t * ip, u32_t * oid)
{
  u8_t D.7857;
  unsigned char _1;
  u32_t * _2;
  unsigned char _3;
  u32_t * _4;
  const struct ip6_addr_t * _5;
  u32_t * _6;
  u32_t * _7;
  const struct ip4_addr_t * _8;
  u32_t * _9;
  u8_t _10;
  u8_t _18;
  u8_t _22;
  u8_t _25;

  <bb 2> :
  _1 = ip_13(D)->type;
  if (_1 == 46)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  *oid_14(D) = 0;
  _2 = oid_14(D) + 4;
  *_2 = 0;
  _25 = 2;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 8>; [INV]

  <bb 4> :
  if (ip_13(D) != 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _3 = ip_13(D)->type;
  if (_3 == 6)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  *oid_14(D) = 2;
  _4 = oid_14(D) + 4;
  *_4 = 16;
  _5 = &ip_13(D)->u_addr.ip6;
  _6 = oid_14(D) + 8;
  snmp_ip6_to_oid (_5, _6);
  _18 = 18;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 8>; [INV]

  <bb 7> :
  *oid_14(D) = 1;
  _7 = oid_14(D) + 4;
  *_7 = 4;
  _8 = &ip_13(D)->u_addr.ip4;
  _9 = oid_14(D) + 8;
  snmp_ip4_to_oid (_8, _9);
  _22 = 6;
  // predicted unlikely by early return (on trees) predictor.

  <bb 8> :
  # _10 = PHI <_25(3), _18(6), _22(7)>
<L5>:
  return _10;

}



;; Function snmp_oid_to_ip (snmp_oid_to_ip, funcdef_no=10, decl_uid=6662, cgraph_uid=11, symbol_order=18)

snmp_oid_to_ip (const u32_t * oid, u8_t oid_len, struct ip_addr_t * ip)
{
  u8_t D.7864;
  long unsigned int _1;
  const u32_t * _2;
  long unsigned int _3;
  long unsigned int _4;
  const u32_t * _5;
  long unsigned int _6;
  const u32_t * _7;
  struct ip4_addr_t * _8;
  unsigned char _9;
  long unsigned int _10;
  const u32_t * _11;
  long unsigned int _12;
  const u32_t * _13;
  struct ip6_addr_t * _14;
  unsigned char _15;
  u8_t _16;
  u8_t _24;
  u8_t _28;
  u8_t _29;
  u8_t _30;
  u8_t _31;
  u8_t _34;
  u8_t _35;
  u8_t _36;
  u8_t _37;
  u8_t _40;
  u8_t _41;
  u8_t _42;
  u8_t _43;

  <bb 2> :
  if (oid_len_21(D) == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _43 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 33>; [INV]

  <bb 4> :
  _1 = *oid_23(D);
  if (_1 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 5> :
  if (oid_len_21(D) <= 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _42 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 33>; [INV]

  <bb 7> :
  _2 = oid_23(D) + 4;
  _3 = *_2;
  if (_3 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  _41 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 33>; [INV]

  <bb 9> :
  memset (ip_25(D), 0, 24);
  if (ip_25(D) != 0B)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  ip_25(D)->type = 46;

  <bb 11> :
  _40 = 2;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 33>; [INV]

  <bb 12> :
  _4 = *oid_23(D);
  if (_4 == 1)
    goto <bb 13>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 13> :
  if (oid_len_21(D) <= 5)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  _37 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 33>; [INV]

  <bb 15> :
  _5 = oid_23(D) + 4;
  _6 = *_5;
  if (_6 != 4)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  _36 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 33>; [INV]

  <bb 17> :
  if (ip_25(D) != 0B)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  ip_25(D)->type = 0;

  <bb 19> :
  _7 = oid_23(D) + 8;
  _8 = &ip_25(D)->u_addr.ip4;
  _9 = snmp_oid_to_ip4 (_7, _8);
  if (_9 == 0)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  _35 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 33>; [INV]

  <bb 21> :
  _34 = 6;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 33>; [INV]

  <bb 22> :
  _10 = *oid_23(D);
  if (_10 == 2)
    goto <bb 23>; [INV]
  else
    goto <bb 32>; [INV]

  <bb 23> :
  if (oid_len_21(D) <= 17)
    goto <bb 24>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 24> :
  _31 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 33>; [INV]

  <bb 25> :
  _11 = oid_23(D) + 4;
  _12 = *_11;
  if (_12 != 16)
    goto <bb 26>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 26> :
  _30 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 33>; [INV]

  <bb 27> :
  if (ip_25(D) != 0B)
    goto <bb 28>; [INV]
  else
    goto <bb 29>; [INV]

  <bb 28> :
  ip_25(D)->type = 6;

  <bb 29> :
  _13 = oid_23(D) + 8;
  _14 = &ip_25(D)->u_addr.ip6;
  _15 = snmp_oid_to_ip6 (_13, _14);
  if (_15 == 0)
    goto <bb 30>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 30> :
  _29 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 33>; [INV]

  <bb 31> :
  _28 = 18;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 33>; [INV]

  <bb 32> :
  _24 = 0;
  // predicted unlikely by early return (on trees) predictor.

  <bb 33> :
  # _16 = PHI <_43(3), _42(6), _41(8), _40(11), _37(14), _36(16), _35(20), _34(21), _31(24), _30(26), _29(30), _28(31), _24(32)>
<L30>:
  return _16;

}



;; Function snmp_oid_to_ip_port (snmp_oid_to_ip_port, funcdef_no=11, decl_uid=6667, cgraph_uid=12, symbol_order=19)

snmp_oid_to_ip_port (const u32_t * oid, u8_t oid_len, struct ip_addr_t * ip, u16_t * port)
{
  u8_t idx;
  u8_t D.7896;
  unsigned int _1;
  unsigned int _2;
  const u32_t * _3;
  long unsigned int _4;
  unsigned int _5;
  unsigned int _6;
  const u32_t * _7;
  long unsigned int _8;
  short unsigned int _9;
  unsigned char idx.1_10;
  u8_t _11;
  u8_t _22;
  u8_t _23;
  u8_t _24;
  u8_t _25;

  <bb 2> :
  idx_18 = snmp_oid_to_ip (oid_14(D), oid_len_15(D), ip_16(D));
  if (idx_18 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _25 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 9>; [INV]

  <bb 4> :
  if (idx_18 >= oid_len_15(D))
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _24 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 9>; [INV]

  <bb 6> :
  _1 = (unsigned int) idx_18;
  _2 = _1 * 4;
  _3 = oid_14(D) + _2;
  _4 = *_3;
  if (_4 > 65535)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _23 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 9>; [INV]

  <bb 8> :
  _5 = (unsigned int) idx_18;
  _6 = _5 * 4;
  _7 = oid_14(D) + _6;
  _8 = *_7;
  _9 = (short unsigned int) _8;
  *port_19(D) = _9;
  idx.1_10 = idx_18;
  idx_21 = idx.1_10 + 1;
  _22 = idx_21;

  <bb 9> :
  # _11 = PHI <_25(3), _24(5), _23(7), _22(8)>
<L6>:
  return _11;

}



;; Function snmp_oid_assign (snmp_oid_assign, funcdef_no=12, decl_uid=6615, cgraph_uid=13, symbol_order=20)

snmp_oid_assign (struct snmp_obj_id * target, const u32_t * oid, u8_t oid_len)
{
  u32_t[50] * _1;
  unsigned int _2;
  unsigned int _3;

  <bb 2> :
  if (oid_len_6(D) > 50)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  __asm__ __volatile__("BKPT #0
	");
  goto <bb 3>; [INV]

  <bb 4> :
  target_8(D)->len = oid_len_6(D);
  if (oid_len_6(D) != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _1 = &target_8(D)->id;
  _2 = (unsigned int) oid_len_6(D);
  _3 = _2 * 4;
  memcpy (_1, oid_10(D), _3);

  <bb 6> :
  return;

}



;; Function snmp_oid_prefix (snmp_oid_prefix, funcdef_no=13, decl_uid=6625, cgraph_uid=14, symbol_order=21)

snmp_oid_prefix (struct snmp_obj_id * target, const u32_t * oid, u8_t oid_len)
{
  int i;
  unsigned char _1;
  int _2;
  int _3;
  int _4;
  unsigned char _5;
  int _6;
  int _7;
  int _8;
  long unsigned int _9;
  u32_t[50] * _10;
  unsigned int _11;
  unsigned int _12;

  <bb 2> :
  _1 = target_18(D)->len;
  _2 = (int) _1;
  _3 = (int) oid_len_19(D);
  _4 = _2 + _3;
  if (_4 > 50)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  __asm__ __volatile__("BKPT #0
	");
  goto <bb 3>; [INV]

  <bb 4> :
  if (oid_len_19(D) != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 5> :
  _5 = target_18(D)->len;
  _6 = (int) _5;
  i_20 = _6 + -1;
  goto <bb 7>; [INV]

  <bb 6> :
  _7 = (int) oid_len_19(D);
  _8 = i_13 + _7;
  _9 = target_18(D)->id[i_13];
  target_18(D)->id[_8] = _9;
  i_24 = i_13 + -1;

  <bb 7> :
  # i_13 = PHI <i_20(5), i_24(6)>
  if (i_13 >= 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  _10 = &target_18(D)->id;
  _11 = (unsigned int) oid_len_19(D);
  _12 = _11 * 4;
  memcpy (_10, oid_21(D), _12);

  <bb 9> :
  return;

}



;; Function snmp_oid_combine (snmp_oid_combine, funcdef_no=14, decl_uid=6621, cgraph_uid=15, symbol_order=22)

snmp_oid_combine (struct snmp_obj_id * target, const u32_t * oid1, u8_t oid1_len, const u32_t * oid2, u8_t oid2_len)
{
  <bb 2> :
  snmp_oid_assign (target_2(D), oid1_3(D), oid1_len_4(D));
  snmp_oid_append (target_2(D), oid2_6(D), oid2_len_7(D));
  return;

}



;; Function snmp_oid_append (snmp_oid_append, funcdef_no=15, decl_uid=6629, cgraph_uid=16, symbol_order=23)

snmp_oid_append (struct snmp_obj_id * target, const u32_t * oid, u8_t oid_len)
{
  unsigned char _1;
  int _2;
  int _3;
  int _4;
  unsigned char _5;
  int _6;
  u32_t * _7;
  unsigned int _8;
  unsigned int _9;
  unsigned char _10;
  unsigned char _11;

  <bb 2> :
  _1 = target_15(D)->len;
  _2 = (int) _1;
  _3 = (int) oid_len_16(D);
  _4 = _2 + _3;
  if (_4 > 50)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  __asm__ __volatile__("BKPT #0
	");
  goto <bb 3>; [INV]

  <bb 4> :
  if (oid_len_16(D) != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _5 = target_15(D)->len;
  _6 = (int) _5;
  _7 = &target_15(D)->id[_6];
  _8 = (unsigned int) oid_len_16(D);
  _9 = _8 * 4;
  memcpy (_7, oid_17(D), _9);
  _10 = target_15(D)->len;
  _11 = oid_len_16(D) + _10;
  target_15(D)->len = _11;

  <bb 6> :
  return;

}



;; Function snmp_oid_compare (snmp_oid_compare, funcdef_no=16, decl_uid=6639, cgraph_uid=17, symbol_order=24)

snmp_oid_compare (const u32_t * oid1, u8_t oid1_len, const u32_t * oid2, u8_t oid2_len)
{
  u8_t level;
  s8_t D.7924;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  unsigned char level.2_5;
  s8_t _9;
  s8_t _23;
  s8_t _24;
  s8_t _25;
  s8_t _26;
  s8_t _27;

  <bb 2> :
  level_12 = 0;
  if (oid1_13(D) == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  if (oid1_len_14(D) != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  __asm__ __volatile__("BKPT #0
	");
  goto <bb 4>; [INV]

  <bb 5> :
  if (oid2_17(D) == 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  if (oid2_len_18(D) != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  __asm__ __volatile__("BKPT #0
	");
  goto <bb 7>; [INV]

  <bb 8> :
  goto <bb 14>; [INV]

  <bb 9> :
  _1 = *oid1_6;
  _2 = *oid2_7;
  if (_1 < _2)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  _24 = -1;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 21>; [INV]

  <bb 11> :
  _3 = *oid1_6;
  _4 = *oid2_7;
  if (_3 > _4)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  _23 = 1;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 21>; [INV]

  <bb 13> :
  level.2_5 = level_8;
  level_20 = level.2_5 + 1;
  oid1_21 = oid1_6 + 4;
  oid2_22 = oid2_7 + 4;

  <bb 14> :
  # oid1_6 = PHI <oid1_13(D)(8), oid1_21(13)>
  # oid2_7 = PHI <oid2_17(D)(8), oid2_22(13)>
  # level_8 = PHI <level_12(8), level_20(13)>
  if (level_8 < oid1_len_14(D))
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  if (level_8 < oid2_len_18(D))
    goto <bb 9>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 16> :
  if (oid1_len_14(D) < oid2_len_18(D))
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  _27 = -1;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 21>; [INV]

  <bb 18> :
  if (oid1_len_14(D) > oid2_len_18(D))
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  _26 = 1;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 21>; [INV]

  <bb 20> :
  _25 = 0;

  <bb 21> :
  # _9 = PHI <_24(10), _23(12), _27(17), _26(19), _25(20)>
<L22>:
  return _9;

}



;; Function snmp_oid_equal (snmp_oid_equal, funcdef_no=17, decl_uid=6634, cgraph_uid=18, symbol_order=25)

snmp_oid_equal (const u32_t * oid1, u8_t oid1_len, const u32_t * oid2, u8_t oid2_len)
{
  u8_t D.7933;
  signed char _1;
  _Bool _2;
  u8_t _9;

  <bb 2> :
  _1 = snmp_oid_compare (oid1_4(D), oid1_len_5(D), oid2_6(D), oid2_len_7(D));
  _2 = _1 == 0;
  _9 = (u8_t) _2;

  <bb 3> :
<L0>:
  return _9;

}



;; Function netif_to_num (netif_to_num, funcdef_no=18, decl_uid=6669, cgraph_uid=19, symbol_order=26)

netif_to_num (const struct netif * netif)
{
  u8_t D.7935;
  unsigned char _1;
  u8_t _4;

  <bb 2> :
  _1 = netif_3(D)->num;
  _4 = _1 + 1;

  <bb 3> :
<L0>:
  return _4;

}



;; Function snmp_get_mib_from_oid (snmp_get_mib_from_oid, funcdef_no=19, decl_uid=7629, cgraph_uid=20, symbol_order=27)

snmp_get_mib_from_oid (const u32_t * oid, u8_t oid_len)
{
  const struct snmp_mib * matched_mib;
  u8_t max_match_len;
  u8_t l;
  u8_t i;
  const u32_t * searched_oid;
  const u32_t * list_oid;
  const struct snmp_mib * D.7941;
  const struct snmp_mib * const * snmp_mibs.3_1;
  unsigned int _2;
  unsigned int _3;
  const struct snmp_mib * const * _4;
  const struct snmp_mib * _5;
  const struct snmp_mib * const * snmp_mibs.4_6;
  unsigned int _7;
  unsigned int _8;
  const struct snmp_mib * const * _9;
  const struct snmp_mib * _10;
  const u32_t * _11;
  const struct snmp_mib * const * snmp_mibs.5_12;
  unsigned int _13;
  unsigned int _14;
  const struct snmp_mib * const * _15;
  const struct snmp_mib * _16;
  unsigned char _17;
  const struct snmp_mib * const * snmp_mibs.6_18;
  unsigned int _19;
  unsigned int _20;
  const struct snmp_mib * const * _21;
  const struct snmp_mib * _22;
  const struct snmp_mib * const * snmp_mibs.7_23;
  unsigned int _24;
  unsigned int _25;
  const struct snmp_mib * const * _26;
  const struct snmp_mib * _27;
  long unsigned int _28;
  long unsigned int _29;
  unsigned char l.8_30;
  const struct snmp_mib * const * snmp_mibs.9_31;
  unsigned int _32;
  unsigned int _33;
  const struct snmp_mib * const * _34;
  const struct snmp_mib * _35;
  unsigned char _36;
  const struct snmp_mib * const * snmp_mibs.10_37;
  unsigned int _38;
  unsigned int _39;
  const struct snmp_mib * const * _40;
  const struct snmp_mib * _41;
  const struct snmp_mib * const * snmp_mibs.11_42;
  unsigned int _43;
  unsigned int _44;
  const struct snmp_mib * const * _45;
  unsigned char i.12_46;
  unsigned char snmp_num_mibs.13_47;
  const struct snmp_mib * _56;
  const struct snmp_mib * _66;
  const struct snmp_mib * _78;

  <bb 2> :
  max_match_len_60 = 0;
  matched_mib_61 = 0B;
  if (oid_62(D) == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  __asm__ __volatile__("BKPT #0
	");
  goto <bb 3>; [INV]

  <bb 4> :
  if (oid_len_64(D) == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _78 = 0B;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 23>; [INV]

  <bb 6> :
  i_65 = 0;
  goto <bb 21>; [INV]

  <bb 7> :
  snmp_mibs.3_1 = snmp_mibs;
  _2 = (unsigned int) i_50;
  _3 = _2 * 4;
  _4 = snmp_mibs.3_1 + _3;
  _5 = *_4;
  if (_5 == 0B)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  __asm__ __volatile__("BKPT #0
	");
  goto <bb 8>; [INV]

  <bb 9> :
  snmp_mibs.4_6 = snmp_mibs;
  _7 = (unsigned int) i_50;
  _8 = _7 * 4;
  _9 = snmp_mibs.4_6 + _8;
  _10 = *_9;
  _11 = _10->base_oid;
  if (_11 == 0B)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  __asm__ __volatile__("BKPT #0
	");
  goto <bb 10>; [INV]

  <bb 11> :
  snmp_mibs.5_12 = snmp_mibs;
  _13 = (unsigned int) i_50;
  _14 = _13 * 4;
  _15 = snmp_mibs.5_12 + _14;
  _16 = *_15;
  _17 = _16->base_oid_len;
  if (oid_len_64(D) >= _17)
    goto <bb 12>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 12> :
  snmp_mibs.6_18 = snmp_mibs;
  _19 = (unsigned int) i_50;
  _20 = _19 * 4;
  _21 = snmp_mibs.6_18 + _20;
  _22 = *_21;
  l_67 = _22->base_oid_len;
  snmp_mibs.7_23 = snmp_mibs;
  _24 = (unsigned int) i_50;
  _25 = _24 * 4;
  _26 = snmp_mibs.7_23 + _25;
  _27 = *_26;
  list_oid_68 = _27->base_oid;
  searched_oid_69 = oid_62(D);
  goto <bb 16>; [INV]

  <bb 13> :
  _28 = *list_oid_48;
  _29 = *searched_oid_49;
  if (_28 != _29)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  goto <bb 17>; [INV]

  <bb 15> :
  l.8_30 = l_51;
  l_70 = l.8_30 + 255;
  list_oid_71 = list_oid_48 + 4;
  searched_oid_72 = searched_oid_49 + 4;

  <bb 16> :
  # list_oid_48 = PHI <list_oid_68(12), list_oid_71(15)>
  # searched_oid_49 = PHI <searched_oid_69(12), searched_oid_72(15)>
  # l_51 = PHI <l_67(12), l_70(15)>
  if (l_51 != 0)
    goto <bb 13>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 17> :
  if (l_51 == 0)
    goto <bb 18>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 18> :
  snmp_mibs.9_31 = snmp_mibs;
  _32 = (unsigned int) i_50;
  _33 = _32 * 4;
  _34 = snmp_mibs.9_31 + _33;
  _35 = *_34;
  _36 = _35->base_oid_len;
  if (max_match_len_53 < _36)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  snmp_mibs.10_37 = snmp_mibs;
  _38 = (unsigned int) i_50;
  _39 = _38 * 4;
  _40 = snmp_mibs.10_37 + _39;
  _41 = *_40;
  max_match_len_73 = _41->base_oid_len;
  snmp_mibs.11_42 = snmp_mibs;
  _43 = (unsigned int) i_50;
  _44 = _43 * 4;
  _45 = snmp_mibs.11_42 + _44;
  matched_mib_74 = *_45;

  <bb 20> :
  # max_match_len_52 = PHI <max_match_len_53(11), max_match_len_53(17), max_match_len_53(18), max_match_len_73(19)>
  # matched_mib_54 = PHI <matched_mib_55(11), matched_mib_55(17), matched_mib_55(18), matched_mib_74(19)>
  i.12_46 = i_50;
  i_75 = i.12_46 + 1;

  <bb 21> :
  # i_50 = PHI <i_65(6), i_75(20)>
  # max_match_len_53 = PHI <max_match_len_60(6), max_match_len_52(20)>
  # matched_mib_55 = PHI <matched_mib_61(6), matched_mib_54(20)>
  snmp_num_mibs.13_47 = snmp_num_mibs;
  if (i_50 < snmp_num_mibs.13_47)
    goto <bb 7>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 22> :
  _66 = matched_mib_55;

  <bb 23> :
  # _56 = PHI <_78(5), _66(22)>
<L25>:
  return _56;

}



;; Function snmp_get_next_mib (snmp_get_next_mib, funcdef_no=20, decl_uid=7648, cgraph_uid=21, symbol_order=28)

snmp_get_next_mib (const u32_t * oid, u8_t oid_len)
{
  const struct snmp_mib * next_mib;
  u8_t i;
  const struct snmp_mib * D.7959;
  const struct snmp_mib * const * snmp_mibs.14_1;
  unsigned int _2;
  unsigned int _3;
  const struct snmp_mib * const * _4;
  const struct snmp_mib * _5;
  const u32_t * _6;
  const struct snmp_mib * const * snmp_mibs.15_7;
  unsigned int _8;
  unsigned int _9;
  const struct snmp_mib * const * _10;
  const struct snmp_mib * _11;
  const u32_t * _12;
  const struct snmp_mib * const * snmp_mibs.16_13;
  unsigned int _14;
  unsigned int _15;
  const struct snmp_mib * const * _16;
  const struct snmp_mib * _17;
  unsigned char _18;
  signed char _19;
  const struct snmp_mib * const * snmp_mibs.17_20;
  unsigned int _21;
  unsigned int _22;
  const struct snmp_mib * const * _23;
  const struct snmp_mib * _24;
  const u32_t * _25;
  const struct snmp_mib * const * snmp_mibs.18_26;
  unsigned int _27;
  unsigned int _28;
  const struct snmp_mib * const * _29;
  const struct snmp_mib * _30;
  unsigned char _31;
  const u32_t * _32;
  unsigned char _33;
  signed char _34;
  const struct snmp_mib * const * snmp_mibs.19_35;
  unsigned int _36;
  unsigned int _37;
  const struct snmp_mib * const * _38;
  unsigned char i.20_39;
  unsigned char snmp_num_mibs.21_40;
  const struct snmp_mib * _44;
  const struct snmp_mib * _55;
  const struct snmp_mib * _60;

  <bb 2> :
  next_mib_50 = 0B;
  if (oid_51(D) == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  __asm__ __volatile__("BKPT #0
	");
  goto <bb 3>; [INV]

  <bb 4> :
  if (oid_len_53(D) == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _60 = 0B;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 15>; [INV]

  <bb 6> :
  i_54 = 0;
  goto <bb 13>; [INV]

  <bb 7> :
  snmp_mibs.14_1 = snmp_mibs;
  _2 = (unsigned int) i_41;
  _3 = _2 * 4;
  _4 = snmp_mibs.14_1 + _3;
  _5 = *_4;
  _6 = _5->base_oid;
  if (_6 != 0B)
    goto <bb 8>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 8> :
  snmp_mibs.15_7 = snmp_mibs;
  _8 = (unsigned int) i_41;
  _9 = _8 * 4;
  _10 = snmp_mibs.15_7 + _9;
  _11 = *_10;
  _12 = _11->base_oid;
  snmp_mibs.16_13 = snmp_mibs;
  _14 = (unsigned int) i_41;
  _15 = _14 * 4;
  _16 = snmp_mibs.16_13 + _15;
  _17 = *_16;
  _18 = _17->base_oid_len;
  _19 = snmp_oid_compare (_12, _18, oid_51(D), oid_len_53(D));
  if (_19 > 0)
    goto <bb 9>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 9> :
  if (next_mib_43 == 0B)
    goto <bb 11>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  snmp_mibs.17_20 = snmp_mibs;
  _21 = (unsigned int) i_41;
  _22 = _21 * 4;
  _23 = snmp_mibs.17_20 + _22;
  _24 = *_23;
  _25 = _24->base_oid;
  snmp_mibs.18_26 = snmp_mibs;
  _27 = (unsigned int) i_41;
  _28 = _27 * 4;
  _29 = snmp_mibs.18_26 + _28;
  _30 = *_29;
  _31 = _30->base_oid_len;
  _32 = next_mib_43->base_oid;
  _33 = next_mib_43->base_oid_len;
  _34 = snmp_oid_compare (_25, _31, _32, _33);
  if (_34 < 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  snmp_mibs.19_35 = snmp_mibs;
  _36 = (unsigned int) i_41;
  _37 = _36 * 4;
  _38 = snmp_mibs.19_35 + _37;
  next_mib_58 = *_38;

  <bb 12> :
  # next_mib_42 = PHI <next_mib_43(7), next_mib_43(8), next_mib_43(10), next_mib_58(11)>
  i.20_39 = i_41;
  i_59 = i.20_39 + 1;

  <bb 13> :
  # i_41 = PHI <i_54(6), i_59(12)>
  # next_mib_43 = PHI <next_mib_50(6), next_mib_42(12)>
  snmp_num_mibs.21_40 = snmp_num_mibs;
  if (i_41 < snmp_num_mibs.21_40)
    goto <bb 7>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 14> :
  _55 = next_mib_43;

  <bb 15> :
  # _44 = PHI <_60(5), _55(14)>
<L15>:
  return _44;

}



;; Function snmp_get_mib_between (snmp_get_mib_between, funcdef_no=21, decl_uid=7660, cgraph_uid=22, symbol_order=29)

snmp_get_mib_between (const u32_t * oid1, u8_t oid1_len, const u32_t * oid2, u8_t oid2_len)
{
  const struct snmp_mib * next_mib;
  const struct snmp_mib * D.7976;
  const u32_t * _1;
  unsigned char _2;
  signed char _3;
  const struct snmp_mib * _4;
  const struct snmp_mib * _17;
  const struct snmp_mib * _18;

  <bb 2> :
  next_mib_13 = snmp_get_next_mib (oid1_10(D), oid1_len_11(D));
  if (oid2_14(D) == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  __asm__ __volatile__("BKPT #0
	");
  goto <bb 3>; [INV]

  <bb 4> :
  if (oid2_len_15(D) == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  __asm__ __volatile__("BKPT #0
	");
  goto <bb 5>; [INV]

  <bb 6> :
  if (next_mib_13 != 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  _1 = next_mib_13->base_oid;
  _2 = next_mib_13->base_oid_len;
  _3 = snmp_oid_compare (_1, _2, oid2_14(D), oid2_len_15(D));
  if (_3 < 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  _17 = next_mib_13;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 10>; [INV]

  <bb 9> :
  _18 = 0B;

  <bb 10> :
  # _4 = PHI <_17(8), _18(9)>
<L10>:
  return _4;

}



;; Function snmp_get_node_instance_from_oid (snmp_get_node_instance_from_oid, funcdef_no=22, decl_uid=7048, cgraph_uid=23, symbol_order=30)

snmp_get_node_instance_from_oid (const u32_t * oid, u8_t oid_len, struct snmp_node_instance * node_instance)
{
  const struct snmp_leaf_node * leaf_node;
  u8_t oid_instance_len;
  const struct snmp_node * mn;
  const struct snmp_mib * mib;
  u8_t result;
  u8_t D.7984;
  unsigned char _1;
  struct snmp_obj_id * _2;
  int _3;
  unsigned char oid_instance_len.22_4;
  int _5;
  int _6;
  unsigned int _7;
  unsigned int _8;
  const u32_t * _9;
  unsigned char oid_instance_len.23_10;
  snmp_err_t (*<T689>) (const u32_t *, u8_t, struct snmp_node_instance *) _11;
  unsigned char oid_instance_len.24_12;
  unsigned char _13;
  <unnamed type> _14;
  u8_t _35;

  <bb 2> :
  result_19 = 240;
  mn_20 = 0B;
  mib_25 = snmp_get_mib_from_oid (oid_22(D), oid_len_23(D));
  if (mib_25 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  mn_27 = snmp_mib_tree_resolve_exact (mib_25, oid_22(D), oid_len_23(D), &oid_instance_len);
  if (mn_27 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _1 = mn_27->node_type;
  if (_1 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  leaf_node_28 = mn_27;
  node_instance_29(D)->node = mn_27;
  _2 = &node_instance_29(D)->instance_oid;
  _3 = (int) oid_len_23(D);
  oid_instance_len.22_4 = oid_instance_len;
  _5 = (int) oid_instance_len.22_4;
  _6 = _3 - _5;
  _7 = (unsigned int) _6;
  _8 = _7 * 4;
  _9 = oid_22(D) + _8;
  oid_instance_len.23_10 = oid_instance_len;
  snmp_oid_assign (_2, _9, oid_instance_len.23_10);
  _11 = leaf_node_28->get_instance;
  oid_instance_len.24_12 = oid_instance_len;
  _13 = oid_len_23(D) - oid_instance_len.24_12;
  _14 = _11 (oid_22(D), _13, node_instance_29(D));
  result_33 = (u8_t) _14;

  <bb 6> :
  # result_15 = PHI <result_19(3), result_19(4), result_33(5)>
  oid_instance_len ={v} {CLOBBER};

  <bb 7> :
  # result_16 = PHI <result_19(2), result_15(6)>
  _35 = result_16;

  <bb 8> :
<L6>:
  return _35;

}



;; Function snmp_get_next_node_instance_from_oid (snmp_get_next_node_instance_from_oid, funcdef_no=23, decl_uid=7055, cgraph_uid=24, symbol_order=31)

snmp_get_next_node_instance_from_oid (const u32_t * oid, u8_t oid_len, u8_t (*snmp_validate_node_instance_method) (struct snmp_node_instance *, void *) validate_node_instance_method, void * validate_node_instance_arg, struct snmp_obj_id * node_oid, struct snmp_node_instance * node_instance)
{
  const struct snmp_mib * next_mib;
  const struct snmp_mib * intermediate_mib;
  u8_t result;
  u8_t oid_instance_len;
  u8_t start_oid_len;
  const u32_t * start_oid;
  const struct snmp_node * mn;
  const struct snmp_mib * mib;
  u8_t D.8027;
  unsigned char oid_instance_len.25_1;
  unsigned char _2;
  struct snmp_obj_id * _3;
  int _4;
  unsigned char oid_instance_len.26_5;
  int _6;
  int _7;
  unsigned int _8;
  unsigned int _9;
  const u32_t * _10;
  unsigned char oid_instance_len.27_11;
  snmp_err_t (*<T689>) (const u32_t *, u8_t, struct snmp_node_instance *) _12;
  u32_t[50] * _13;
  unsigned char _14;
  <unnamed type> _15;
  unsigned char _16;
  u32_t[50] * _17;
  unsigned char _18;
  void (*<T67f>) (struct snmp_node_instance *) _19;
  void (*<T67f>) (struct snmp_node_instance *) _20;
  void (*<T67f>) (struct snmp_node_instance *) _21;
  void (*<T67f>) (struct snmp_node_instance *) _22;
  u32_t[50] * _23;
  unsigned char _24;
  struct snmp_obj_id * _25;
  u32_t[50] * _26;
  unsigned char _27;
  u32_t[50] * _28;
  unsigned char _29;
  void (*<T67f>) (struct snmp_node_instance *) _30;
  void (*<T67f>) (struct snmp_node_instance *) _31;
  unsigned char _32;
  unsigned char _33;
  const u32_t * _34;
  unsigned char _35;
  const u32_t * _36;
  unsigned char _37;
  signed char _38;
  unsigned char _39;
  const u32_t * _40;
  unsigned char _41;
  unsigned char _42;
  u8_t _56;
  u8_t _131;
  u8_t _132;

  <bb 2> :
  mn_67 = 0B;
  start_oid_68 = 0B;
  start_oid_len_69 = 0;
  mib_74 = snmp_get_mib_from_oid (oid_71(D), oid_len_72(D));
  if (mib_74 == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  mib_78 = snmp_get_next_mib (oid_71(D), oid_len_72(D));
  if (mib_78 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  start_oid_79 = mib_78->base_oid;
  start_oid_len_80 = mib_78->base_oid_len;
  goto <bb 6>; [INV]

  <bb 5> :
  start_oid_75 = oid_71(D);
  start_oid_len_76 = oid_len_72(D);

  <bb 6> :
  # mib_43 = PHI <mib_78(4), mib_74(5), mib_78(3)>
  # start_oid_50 = PHI <start_oid_79(4), start_oid_75(5), start_oid_68(3)>
  # start_oid_len_53 = PHI <start_oid_len_80(4), start_oid_len_76(5), start_oid_len_69(3)>
  goto <bb 36>; [INV]

  <bb 7> :
  mn_82 = snmp_mib_tree_resolve_exact (mib_45, start_oid_52, start_oid_len_55, &oid_instance_len);
  if (mn_82 != 0B)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  oid_instance_len.25_1 = oid_instance_len;
  _2 = start_oid_len_55 - oid_instance_len.25_1;
  snmp_oid_assign (node_oid_83(D), start_oid_52, _2);
  _3 = &node_instance_86(D)->instance_oid;
  _4 = (int) start_oid_len_55;
  oid_instance_len.26_5 = oid_instance_len;
  _6 = (int) oid_instance_len.26_5;
  _7 = _4 - _6;
  _8 = (unsigned int) _7;
  _9 = _8 * 4;
  _10 = start_oid_52 + _9;
  oid_instance_len.27_11 = oid_instance_len;
  snmp_oid_assign (_3, _10, oid_instance_len.27_11);
  goto <bb 10>; [INV]

  <bb 9> :
  mn_85 = snmp_mib_tree_resolve_next (mib_45, start_oid_52, start_oid_len_55, node_oid_83(D));
  node_instance_86(D)->instance_oid.len = 0;

  <bb 10> :
  # mn_46 = PHI <mn_82(8), mn_85(9)>
  node_instance_86(D)->node = mn_46;
  goto <bb 21>; [INV]

  <bb 11> :
  node_instance_86(D)->asn1_type = 0;
  node_instance_86(D)->access = 0;
  node_instance_86(D)->get_value = 0B;
  node_instance_86(D)->set_test = 0B;
  node_instance_86(D)->set_value = 0B;
  node_instance_86(D)->release_instance = 0B;
  node_instance_86(D)->reference.ptr = 0B;
  node_instance_86(D)->reference_len = 0;
  _12 = MEM[(const struct snmp_leaf_node *)mn_47].get_next_instance;
  _13 = &node_oid_83(D)->id;
  _14 = node_oid_83(D)->len;
  _15 = _12 (_13, _14, node_instance_86(D));
  result_100 = (u8_t) _15;
  if (result_100 == 0)
    goto <bb 12>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 12> :
  if (validate_node_instance_method_107(D) == 0B)
    goto <bb 14>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  _16 = validate_node_instance_method_107(D) (node_instance_86(D), validate_node_instance_arg_108(D));
  if (_16 == 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  _17 = &node_instance_86(D)->instance_oid.id;
  _18 = node_instance_86(D)->instance_oid.len;
  snmp_oid_append (node_oid_83(D), _17, _18);
  goto <bb 22>; [INV]

  <bb 15> :
  _19 = node_instance_86(D)->release_instance;
  if (_19 != 0B)
    goto <bb 16>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 16> :
  _20 = node_instance_86(D)->release_instance;
  _20 (node_instance_86(D));
  goto <bb 21>; [INV]

  <bb 17> :
  _21 = node_instance_86(D)->release_instance;
  if (_21 != 0B)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  _22 = node_instance_86(D)->release_instance;
  _22 (node_instance_86(D));

  <bb 19> :
  _23 = &node_oid_83(D)->id;
  _24 = node_oid_83(D)->len;
  _25 = &node_instance_86(D)->instance_oid;
  mn_103 = snmp_mib_tree_resolve_next (mib_45, _23, _24, _25);
  if (mn_103 != 0B)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  _26 = &node_instance_86(D)->instance_oid.id;
  _27 = node_instance_86(D)->instance_oid.len;
  snmp_oid_assign (node_oid_83(D), _26, _27);
  node_instance_86(D)->instance_oid.len = 0;
  node_instance_86(D)->node = mn_103;

  <bb 21> :
  # mn_47 = PHI <mn_46(10), mn_47(16), mn_103(19), mn_103(20), mn_47(15)>
  if (mn_47 != 0B)
    goto <bb 11>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 22> :
  if (mn_47 != 0B)
    goto <bb 23>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 23> :
  _28 = &node_oid_83(D)->id;
  _29 = node_oid_83(D)->len;
  intermediate_mib_124 = snmp_get_mib_between (start_oid_52, start_oid_len_55, _28, _29);
  if (intermediate_mib_124 != 0B)
    goto <bb 24>; [INV]
  else
    goto <bb 35>; [INV]

  <bb 24> :
  _30 = node_instance_86(D)->release_instance;
  if (_30 != 0B)
    goto <bb 25>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 25> :
  _31 = node_instance_86(D)->release_instance;
  _31 (node_instance_86(D));

  <bb 26> :
  mn_126 = 0B;
  mib_127 = intermediate_mib_124;
  start_oid_128 = mib_127->base_oid;
  start_oid_len_129 = mib_127->base_oid_len;
  goto <bb 35>; [INV]

  <bb 27> :
  next_mib_113 = snmp_get_next_mib (start_oid_52, start_oid_len_55);
  if (next_mib_113 != 0B)
    goto <bb 28>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 28> :
  _32 = next_mib_113->base_oid_len;
  _33 = mib_45->base_oid_len;
  if (_32 > _33)
    goto <bb 29>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 29> :
  _34 = next_mib_113->base_oid;
  _35 = mib_45->base_oid_len;
  _36 = mib_45->base_oid;
  _37 = mib_45->base_oid_len;
  _38 = snmp_oid_compare (_34, _35, _36, _37);
  if (_38 == 0)
    goto <bb 30>; [INV]
  else
    goto <bb 31>; [INV]

  <bb 30> :
  mib_115 = next_mib_113;
  start_oid_116 = mib_115->base_oid;
  start_oid_len_117 = mib_115->base_oid_len;
  goto <bb 35>; [INV]

  <bb 31> :
  _39 = mib_45->base_oid_len;
  if (_39 > 1)
    goto <bb 32>; [INV]
  else
    goto <bb 35>; [INV]

  <bb 32> :
  _40 = mib_45->base_oid;
  _41 = mib_45->base_oid_len;
  _42 = _41 + 255;
  mib_119 = snmp_get_mib_from_oid (_40, _42);
  if (mib_119 == 0B)
    goto <bb 33>; [INV]
  else
    goto <bb 35>; [INV]

  <bb 33> :
  mib_120 = next_mib_113;
  if (mib_120 != 0B)
    goto <bb 34>; [INV]
  else
    goto <bb 35>; [INV]

  <bb 34> :
  start_oid_121 = mib_120->base_oid;
  start_oid_len_122 = mib_120->base_oid_len;

  <bb 35> :
  # mib_44 = PHI <mib_127(26), mib_115(30), mib_45(31), mib_119(32), mib_120(33), mib_120(34), mib_45(23)>
  # mn_48 = PHI <mn_126(26), mn_47(30), mn_47(31), mn_47(32), mn_47(33), mn_47(34), mn_47(23)>
  # start_oid_51 = PHI <start_oid_128(26), start_oid_116(30), start_oid_52(31), start_oid_52(32), start_oid_52(33), start_oid_121(34), start_oid_52(23)>
  # start_oid_len_54 = PHI <start_oid_len_129(26), start_oid_len_117(30), start_oid_len_55(31), start_oid_len_55(32), start_oid_len_55(33), start_oid_len_122(34), start_oid_len_55(23)>
  oid_instance_len ={v} {CLOBBER};

  <bb 36> :
  # mib_45 = PHI <mib_43(6), mib_44(35)>
  # mn_49 = PHI <mn_67(6), mn_48(35)>
  # start_oid_52 = PHI <start_oid_50(6), start_oid_51(35)>
  # start_oid_len_55 = PHI <start_oid_len_53(6), start_oid_len_54(35)>
  if (mib_45 != 0B)
    goto <bb 37>; [INV]
  else
    goto <bb 38>; [INV]

  <bb 37> :
  if (mn_49 == 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 38>; [INV]

  <bb 38> :
  if (mib_45 == 0B)
    goto <bb 39>; [INV]
  else
    goto <bb 40>; [INV]

  <bb 39> :
  _132 = 242;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 41>; [INV]

  <bb 40> :
  _131 = 0;

  <bb 41> :
  # _56 = PHI <_132(39), _131(40)>
<L47>:
  return _56;

}



;; Function snmp_mib_tree_resolve_exact (snmp_mib_tree_resolve_exact, funcdef_no=24, decl_uid=7036, cgraph_uid=25, symbol_order=32)

snmp_mib_tree_resolve_exact (const struct snmp_mib * mib, const u32_t * oid, u8_t oid_len, u8_t * oid_instance_len)
{
  u32_t i;
  u32_t subnode_oid;
  u8_t oid_offset;
  const struct snmp_node * const * node;
  const struct snmp_node * D.8032;
  unsigned int _1;
  unsigned int _2;
  const u32_t * _3;
  const struct snmp_tree_node * _4;
  short unsigned int _5;
  const struct snmp_tree_node * _6;
  const struct snmp_node * _7;
  long unsigned int _8;
  unsigned char oid_offset.28_9;
  const struct snmp_node * _10;
  unsigned char _11;
  const struct snmp_node * _12;
  unsigned char _13;
  unsigned char _14;
  const struct snmp_node * _19;
  const struct snmp_node * _33;
  const struct snmp_node * _34;
  const struct snmp_node * _37;

  <bb 2> :
  node_22 = &mib_21(D)->root_node;
  oid_offset_24 = mib_21(D)->base_oid_len;
  goto <bb 10>; [INV]

  <bb 3> :
  _1 = (unsigned int) oid_offset_17;
  _2 = _1 * 4;
  _3 = oid_26(D) + _2;
  subnode_oid_27 = *_3;
  _4 = MEM[(const struct snmp_tree_node * const *)node_16];
  _5 = _4->subnode_count;
  i_28 = (u32_t) _5;
  _6 = MEM[(const struct snmp_tree_node * const *)node_16];
  node_29 = _6->subnodes;
  goto <bb 5>; [INV]

  <bb 4> :
  node_30 = node_15 + 4;
  i_31 = i_18 + 4294967295;

  <bb 5> :
  # node_15 = PHI <node_29(3), node_30(4)>
  # i_18 = PHI <i_28(3), i_31(4)>
  if (i_18 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _7 = *node_15;
  _8 = _7->oid;
  if (subnode_oid_27 != _8)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  if (i_18 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  _33 = 0B;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 15>; [INV]

  <bb 9> :
  oid_offset.28_9 = oid_offset_17;
  oid_offset_32 = oid_offset.28_9 + 1;

  <bb 10> :
  # node_16 = PHI <node_22(2), node_15(9)>
  # oid_offset_17 = PHI <oid_offset_24(2), oid_offset_32(9)>
  if (oid_offset_17 < oid_len_25(D))
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  _10 = *node_16;
  _11 = _10->node_type;
  if (_11 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  _12 = *node_16;
  _13 = _12->node_type;
  if (_13 != 0)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  _14 = oid_len_25(D) - oid_offset_17;
  *oid_instance_len_35(D) = _14;
  _37 = *node_16;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 15>; [INV]

  <bb 14> :
  _34 = 0B;

  <bb 15> :
  # _19 = PHI <_33(8), _37(13), _34(14)>
<L12>:
  return _19;

}



;; Function snmp_mib_tree_resolve_next (snmp_mib_tree_resolve_next, funcdef_no=25, decl_uid=7041, cgraph_uid=26, symbol_order=33)

snmp_mib_tree_resolve_next (const struct snmp_mib * mib, const u32_t * oid, u8_t oid_len, struct snmp_obj_id * oidret)
{
  s32_t i;
  const struct snmp_node * subnode;
  u32_t i;
  u32_t subnode_oid;
  s32_t nsi;
  const struct snmp_tree_node * node_stack[50];
  const struct snmp_node * const * node;
  u8_t oid_offset;
  const struct snmp_node * D.8039;
  const struct snmp_node * _1;
  unsigned char _2;
  const struct snmp_node * _3;
  const struct snmp_tree_node * _4;
  short unsigned int _5;
  const struct snmp_tree_node * _6;
  unsigned int _7;
  unsigned int _8;
  const u32_t * _9;
  const struct snmp_node * _10;
  long unsigned int _11;
  const struct snmp_node * _12;
  unsigned char _13;
  const struct snmp_node * _14;
  unsigned char oid_offset.29_15;
  unsigned int _16;
  unsigned int _17;
  const u32_t * _18;
  long unsigned int _19;
  const struct snmp_tree_node * _20;
  short unsigned int _21;
  const struct snmp_tree_node * _22;
  const struct snmp_node * _23;
  long unsigned int _24;
  const struct snmp_node * _25;
  long unsigned int _26;
  const struct snmp_node * _27;
  long unsigned int _28;
  long unsigned int _29;
  const struct snmp_tree_node * _30;
  long unsigned int _31;
  unsigned char _32;
  const u32_t * _33;
  unsigned char _34;
  const struct snmp_tree_node * _35;
  unsigned char _36;
  int _37;
  long unsigned int _38;
  unsigned char _39;
  unsigned char _40;
  unsigned char _41;
  unsigned char _42;
  int _43;
  long unsigned int _44;
  unsigned char _45;
  unsigned char _46;
  unsigned char _47;
  const struct snmp_node * _61;
  const struct snmp_node * _83;
  const struct snmp_node * _96;
  const struct snmp_node * _105;

  <bb 2> :
  oid_offset_68 = mib_67(D)->base_oid_len;
  nsi_69 = 0;
  _1 = mib_67(D)->root_node;
  _2 = _1->node_type;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _105 = 0B;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 36>; [INV]

  <bb 4> :
  _3 = mib_67(D)->root_node;
  node_stack[nsi_69] = _3;
  goto <bb 12>; [INV]

  <bb 5> :
  _4 = node_stack[nsi_51];
  _5 = _4->subnode_count;
  i_72 = (u32_t) _5;
  _6 = node_stack[nsi_51];
  node_73 = _6->subnodes;
  _7 = (unsigned int) oid_offset_48;
  _8 = _7 * 4;
  _9 = oid_74(D) + _8;
  subnode_oid_75 = *_9;
  goto <bb 7>; [INV]

  <bb 6> :
  node_76 = node_49 + 4;
  i_77 = i_55 + 4294967295;

  <bb 7> :
  # node_49 = PHI <node_73(5), node_76(6)>
  # i_55 = PHI <i_72(5), i_77(6)>
  if (i_55 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  _10 = *node_49;
  _11 = _10->oid;
  if (subnode_oid_75 != _11)
    goto <bb 6>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  if (i_55 == 0)
    goto <bb 13>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  _12 = *node_49;
  _13 = _12->node_type;
  if (_13 != 0)
    goto <bb 13>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  nsi_78 = nsi_51 + 1;
  _14 = *node_49;
  node_stack[nsi_78] = _14;
  oid_offset.29_15 = oid_offset_48;
  oid_offset_80 = oid_offset.29_15 + 1;

  <bb 12> :
  # oid_offset_48 = PHI <oid_offset_68(4), oid_offset_80(11)>
  # nsi_51 = PHI <nsi_69(4), nsi_78(11)>
  if (oid_offset_48 < oid_len_71(D))
    goto <bb 5>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  if (oid_offset_48 >= oid_len_71(D))
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  subnode_oid_82 = 0;
  goto <bb 16>; [INV]

  <bb 15> :
  _16 = (unsigned int) oid_offset_48;
  _17 = _16 * 4;
  _18 = oid_74(D) + _17;
  _19 = *_18;
  subnode_oid_81 = _19 + 1;

  <bb 16> :
  # subnode_oid_53 = PHI <subnode_oid_82(14), subnode_oid_81(15)>
  goto <bb 34>; [INV]

  <bb 17> :
  subnode_84 = 0B;
  _20 = node_stack[nsi_52];
  _21 = _20->subnode_count;
  i_85 = (s32_t) _21;
  _22 = node_stack[nsi_52];
  node_86 = _22->subnodes;
  goto <bb 25>; [INV]

  <bb 18> :
  _23 = *node_50;
  _24 = _23->oid;
  if (subnode_oid_54 == _24)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  subnode_90 = *node_50;
  goto <bb 26>; [INV]

  <bb 20> :
  _25 = *node_50;
  _26 = _25->oid;
  if (subnode_oid_54 < _26)
    goto <bb 21>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 21> :
  if (subnode_57 == 0B)
    goto <bb 23>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 22> :
  _27 = *node_50;
  _28 = _27->oid;
  _29 = subnode_57->oid;
  if (_28 < _29)
    goto <bb 23>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 23> :
  subnode_87 = *node_50;

  <bb 24> :
  # subnode_56 = PHI <subnode_57(20), subnode_57(22), subnode_87(23)>
  node_88 = node_50 + 4;
  i_89 = i_59 + -1;

  <bb 25> :
  # node_50 = PHI <node_86(17), node_88(24)>
  # subnode_57 = PHI <subnode_84(17), subnode_56(24)>
  # i_59 = PHI <i_85(17), i_89(24)>
  if (i_59 > 0)
    goto <bb 18>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 26> :
  # subnode_58 = PHI <subnode_90(19), subnode_57(25)>
  if (subnode_58 == 0B)
    goto <bb 27>; [INV]
  else
    goto <bb 28>; [INV]

  <bb 27> :
  _30 = node_stack[nsi_52];
  _31 = _30->node.oid;
  subnode_oid_103 = _31 + 1;
  nsi_104 = nsi_52 + -1;
  goto <bb 34>; [INV]

  <bb 28> :
  _32 = subnode_58->node_type;
  if (_32 == 0)
    goto <bb 29>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 29> :
  nsi_100 = nsi_52 + 1;
  node_stack[nsi_100] = subnode_58;
  subnode_oid_102 = 0;
  goto <bb 34>; [INV]

  <bb 30> :
  _33 = mib_67(D)->base_oid;
  _34 = mib_67(D)->base_oid_len;
  snmp_oid_assign (oidret_91(D), _33, _34);
  i_93 = 1;
  goto <bb 32>; [INV]

  <bb 31> :
  _35 = node_stack[i_60];
  _36 = oidret_91(D)->len;
  _37 = (int) _36;
  _38 = _35->node.oid;
  oidret_91(D)->id[_37] = _38;
  _39 = oidret_91(D)->len;
  _40 = _39;
  _41 = _40 + 1;
  oidret_91(D)->len = _41;
  i_99 = i_60 + 1;

  <bb 32> :
  # i_60 = PHI <i_93(30), i_99(31)>
  if (i_60 <= nsi_52)
    goto <bb 31>; [INV]
  else
    goto <bb 33>; [INV]

  <bb 33> :
  _42 = oidret_91(D)->len;
  _43 = (int) _42;
  _44 = subnode_58->oid;
  oidret_91(D)->id[_43] = _44;
  _45 = oidret_91(D)->len;
  _46 = _45;
  _47 = _46 + 1;
  oidret_91(D)->len = _47;
  _96 = subnode_58;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 36>; [INV]

  <bb 34> :
  # nsi_52 = PHI <nsi_51(16), nsi_104(27), nsi_100(29)>
  # subnode_oid_54 = PHI <subnode_oid_53(16), subnode_oid_103(27), subnode_oid_102(29)>
  if (nsi_52 >= 0)
    goto <bb 17>; [INV]
  else
    goto <bb 35>; [INV]

  <bb 35> :
  _83 = 0B;

  <bb 36> :
  # _61 = PHI <_105(3), _96(33), _83(35)>
  node_stack ={v} {CLOBBER};

  <bb 37> :
<L37>:
  return _61;

}



;; Function snmp_next_oid_init (snmp_next_oid_init, funcdef_no=26, decl_uid=6602, cgraph_uid=27, symbol_order=34)

snmp_next_oid_init (struct snmp_next_oid_state * state, const u32_t * start_oid, u8_t start_oid_len, u32_t * next_oid_buf, u8_t next_oid_max_len)
{
  <bb 2> :
  state_2(D)->start_oid = start_oid_3(D);
  state_2(D)->start_oid_len = start_oid_len_5(D);
  state_2(D)->next_oid = next_oid_buf_7(D);
  state_2(D)->next_oid_len = 0;
  state_2(D)->next_oid_max_len = next_oid_max_len_10(D);
  state_2(D)->status = 1;
  return;

}



;; Function snmp_next_oid_precheck (snmp_next_oid_precheck, funcdef_no=27, decl_uid=6606, cgraph_uid=28, symbol_order=35)

snmp_next_oid_precheck (struct snmp_next_oid_state * state, const u32_t * oid, u8_t oid_len)
{
  u8_t start_oid_len;
  u8_t D.8068;
  <unnamed type> _1;
  unsigned char _2;
  const u32_t * _3;
  signed char _4;
  <unnamed type> _5;
  u32_t * _6;
  unsigned char _7;
  signed char _8;
  u8_t _9;
  u8_t _20;
  u8_t _21;

  <bb 2> :
  _1 = state_14(D)->status;
  if (_1 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  _2 = state_14(D)->start_oid_len;
  start_oid_len_16 = MIN_EXPR <oid_len_15(D), _2>;
  _3 = state_14(D)->start_oid;
  _4 = snmp_oid_compare (oid_17(D), oid_len_15(D), _3, start_oid_len_16);
  if (_4 >= 0)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  _5 = state_14(D)->status;
  if (_5 == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  _6 = state_14(D)->next_oid;
  _7 = state_14(D)->next_oid_len;
  _8 = snmp_oid_compare (oid_17(D), oid_len_15(D), _6, _7);
  if (_8 < 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _20 = 1;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 8>; [INV]

  <bb 7> :
  _21 = 0;

  <bb 8> :
  # _9 = PHI <_20(6), _21(7)>
<L7>:
  return _9;

}



;; Function snmp_next_oid_check (snmp_next_oid_check, funcdef_no=28, decl_uid=6611, cgraph_uid=29, symbol_order=36)

snmp_next_oid_check (struct snmp_next_oid_state * state, const u32_t * oid, u8_t oid_len, void * reference)
{
  u8_t D.8079;
  <unnamed type> _1;
  const u32_t * _2;
  unsigned char _3;
  signed char _4;
  <unnamed type> _5;
  u32_t * _6;
  unsigned char _7;
  signed char _8;
  unsigned char _9;
  u32_t * _10;
  unsigned int _11;
  unsigned int _12;
  u8_t _13;
  u8_t _29;
  u8_t _30;

  <bb 2> :
  _1 = state_18(D)->status;
  if (_1 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  _2 = state_18(D)->start_oid;
  _3 = state_18(D)->start_oid_len;
  _4 = snmp_oid_compare (oid_19(D), oid_len_20(D), _2, _3);
  if (_4 > 0)
    goto <bb 4>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 4> :
  _5 = state_18(D)->status;
  if (_5 == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  _6 = state_18(D)->next_oid;
  _7 = state_18(D)->next_oid_len;
  _8 = snmp_oid_compare (oid_19(D), oid_len_20(D), _6, _7);
  if (_8 < 0)
    goto <bb 6>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 6> :
  _9 = state_18(D)->next_oid_max_len;
  if (oid_len_20(D) <= _9)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _10 = state_18(D)->next_oid;
  _11 = (unsigned int) oid_len_20(D);
  _12 = _11 * 4;
  memcpy (_10, oid_19(D), _12);
  state_18(D)->next_oid_len = oid_len_20(D);
  state_18(D)->status = 0;
  state_18(D)->reference = reference_27(D);
  _29 = 1;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 10>; [INV]

  <bb 8> :
  state_18(D)->status = 2;

  <bb 9> :
  _30 = 0;

  <bb 10> :
  # _13 = PHI <_29(7), _30(9)>
<L9>:
  return _13;

}



;; Function snmp_oid_in_range (snmp_oid_in_range, funcdef_no=29, decl_uid=6583, cgraph_uid=30, symbol_order=37)

snmp_oid_in_range (const u32_t * oid_in, u8_t oid_len, const struct snmp_oid_range * oid_ranges, u8_t oid_ranges_len)
{
  u8_t i;
  u8_t D.8083;
  unsigned int _1;
  unsigned int _2;
  const u32_t * _3;
  long unsigned int _4;
  unsigned int _5;
  unsigned int _6;
  const struct snmp_oid_range * _7;
  long unsigned int _8;
  unsigned int _9;
  unsigned int _10;
  const u32_t * _11;
  long unsigned int _12;
  unsigned int _13;
  unsigned int _14;
  const struct snmp_oid_range * _15;
  long unsigned int _16;
  unsigned char i.30_17;
  u8_t _19;
  u8_t _23;
  u8_t _28;
  u8_t _29;

  <bb 2> :
  if (oid_len_20(D) != oid_ranges_len_21(D))
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _29 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 11>; [INV]

  <bb 4> :
  i_22 = 0;
  goto <bb 9>; [INV]

  <bb 5> :
  _1 = (unsigned int) i_18;
  _2 = _1 * 4;
  _3 = oid_in_24(D) + _2;
  _4 = *_3;
  _5 = (unsigned int) i_18;
  _6 = _5 * 8;
  _7 = oid_ranges_26(D) + _6;
  _8 = _7->min;
  if (_4 < _8)
    goto <bb 7>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  _9 = (unsigned int) i_18;
  _10 = _9 * 4;
  _11 = oid_in_24(D) + _10;
  _12 = *_11;
  _13 = (unsigned int) i_18;
  _14 = _13 * 8;
  _15 = oid_ranges_26(D) + _14;
  _16 = _15->max;
  if (_12 > _16)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _28 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 11>; [INV]

  <bb 8> :
  i.30_17 = i_18;
  i_27 = i.30_17 + 1;

  <bb 9> :
  # i_18 = PHI <i_22(4), i_27(8)>
  if (i_18 < oid_ranges_len_21(D))
    goto <bb 5>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  _23 = 1;

  <bb 11> :
  # _19 = PHI <_29(3), _28(7), _23(10)>
<L8>:
  return _19;

}



;; Function snmp_set_test_ok (snmp_set_test_ok, funcdef_no=30, decl_uid=6673, cgraph_uid=31, symbol_order=38)

snmp_set_test_ok (struct snmp_node_instance * instance, u16_t value_len, void * value)
{
  snmp_err_t D.8088;
  snmp_err_t _1;

  <bb 2> :
  _1 = 0;

  <bb 3> :
<L0>:
  return _1;

}



;; Function snmp_decode_bits (snmp_decode_bits, funcdef_no=31, decl_uid=6677, cgraph_uid=32, symbol_order=39)

snmp_decode_bits (const u8_t * buf, u32_t buf_len, u32_t * bit_value)
{
  u8_t bits_processed;
  u8_t b;
  err_t D.8094;
  unsigned char _1;
  signed char b.31_2;
  long unsigned int _3;
  int _4;
  int _5;
  long unsigned int _6;
  long unsigned int _7;
  unsigned char bits_processed.32_8;
  int _9;
  int _10;
  err_t _17;
  err_t _28;
  err_t _34;

  <bb 2> :
  bits_processed_22 = 0;
  *bit_value_24(D) = 0;
  goto <bb 12>; [INV]

  <bb 3> :
  _1 = *buf_11;
  if (_1 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 4> :
  if (bits_processed_16 > 31)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _34 = -6;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 14>; [INV]

  <bb 6> :
  b_30 = *buf_11;

  <bb 7> :
  # b_13 = PHI <b_30(6), b_33(9)>
  # bits_processed_14 = PHI <bits_processed_16(6), bits_processed_32(9)>
  b.31_2 = (signed char) b_13;
  if (b.31_2 < 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  _3 = *bit_value_24(D);
  _4 = (int) bits_processed_14;
  _5 = 1 << _4;
  _6 = (long unsigned int) _5;
  _7 = _3 | _6;
  *bit_value_24(D) = _7;

  <bb 9> :
  bits_processed.32_8 = bits_processed_14;
  bits_processed_32 = bits_processed.32_8 + 1;
  b_33 = b_13 << 1;
  _9 = (int) bits_processed_32;
  _10 = _9 & 7;
  if (_10 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  bits_processed_29 = bits_processed_16 + 8;

  <bb 11> :
  # bits_processed_15 = PHI <bits_processed_32(9), bits_processed_29(10)>
  buf_len_35 = buf_len_12 + 4294967295;
  buf_36 = buf_11 + 1;

  <bb 12> :
  # buf_11 = PHI <buf_26(D)(2), buf_36(11)>
  # buf_len_12 = PHI <buf_len_27(D)(2), buf_len_35(11)>
  # bits_processed_16 = PHI <bits_processed_22(2), bits_processed_15(11)>
  if (buf_len_12 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  _28 = 0;

  <bb 14> :
  # _17 = PHI <_34(5), _28(13)>
<L12>:
  return _17;

}



;; Function snmp_decode_truthvalue (snmp_decode_truthvalue, funcdef_no=32, decl_uid=6680, cgraph_uid=33, symbol_order=40)

snmp_decode_truthvalue (const s32_t * asn1_value, u8_t * bool_value)
{
  err_t D.8102;
  long int _1;
  long int _2;
  err_t _3;
  err_t _9;
  err_t _12;
  err_t _13;

  <bb 2> :
  if (asn1_value_6(D) == 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  if (bool_value_7(D) == 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _13 = -16;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 11>; [INV]

  <bb 5> :
  _1 = *asn1_value_6(D);
  if (_1 == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  *bool_value_7(D) = 1;
  goto <bb 10>; [INV]

  <bb 7> :
  _2 = *asn1_value_6(D);
  if (_2 == 2)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  *bool_value_7(D) = 0;
  goto <bb 10>; [INV]

  <bb 9> :
  _9 = -6;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 11>; [INV]

  <bb 10> :
  _12 = 0;

  <bb 11> :
  # _3 = PHI <_13(4), _9(9), _12(10)>
<L9>:
  return _3;

}



;; Function snmp_encode_bits (snmp_encode_bits, funcdef_no=33, decl_uid=6685, cgraph_uid=34, symbol_order=41)

snmp_encode_bits (u8_t * buf, u32_t buf_len, u32_t bit_value, u8_t bit_count)
{
  s8_t i;
  u8_t min_bytes;
  u8_t len;
  u8_t D.8118;
  int _1;
  int _2;
  int _3;
  long unsigned int _4;
  unsigned char _5;
  unsigned char _6;
  unsigned char _7;
  unsigned char _8;
  signed char i.33_9;
  unsigned char i.34_10;
  unsigned char _11;
  unsigned char len.35_12;
  sizetype _13;
  long unsigned int _14;
  unsigned char len.36_15;
  u8_t _54;

  <bb 2> :
  len_32 = 0;
  _1 = (int) bit_count_33(D);
  _2 = _1 + 7;
  _3 = _2 >> 3;
  min_bytes_34 = (u8_t) _3;
  goto <bb 11>; [INV]

  <bb 3> :
  i_39 = 7;
  *buf_16 = 0;
  goto <bb 9>; [INV]

  <bb 4> :
  _4 = bit_value_20 & 1;
  if (_4 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _5 = *buf_16;
  _6 = _5 | 1;
  *buf_16 = _6;

  <bb 6> :
  if (i_25 > 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _7 = *buf_16;
  _8 = _7 << 1;
  *buf_16 = _8;

  <bb 8> :
  bit_value_46 = bit_value_20 >> 1;
  i.33_9 = i_25;
  i.34_10 = (unsigned char) i.33_9;
  _11 = i.34_10 + 255;
  i_47 = (s8_t) _11;

  <bb 9> :
  # bit_value_20 = PHI <bit_value_21(3), bit_value_46(8)>
  # i_25 = PHI <i_39(3), i_47(8)>
  if (i_25 >= 0)
    goto <bb 4>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  buf_41 = buf_16 + 1;
  buf_len_42 = buf_len_18 + 4294967295;
  len.35_12 = len_22;
  len_43 = len.35_12 + 1;

  <bb 11> :
  # buf_16 = PHI <buf_35(D)(2), buf_41(10)>
  # buf_len_18 = PHI <buf_len_36(D)(2), buf_len_42(10)>
  # bit_value_21 = PHI <bit_value_37(D)(2), bit_value_20(10)>
  # len_22 = PHI <len_32(2), len_43(10)>
  if (buf_len_18 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  if (bit_value_21 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  if (len_22 < min_bytes_34)
    goto <bb 14>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 14> :
  _13 = (sizetype) len_22;
  buf_48 = buf_16 + _13;
  _14 = (long unsigned int) len_22;
  buf_len_49 = buf_len_18 - _14;
  goto <bb 16>; [INV]

  <bb 15> :
  *buf_17 = 0;
  buf_51 = buf_17 + 1;
  buf_len_52 = buf_len_19 + 4294967295;
  len.36_15 = len_23;
  len_53 = len.36_15 + 1;

  <bb 16> :
  # buf_17 = PHI <buf_48(14), buf_51(15)>
  # buf_len_19 = PHI <buf_len_49(14), buf_len_52(15)>
  # len_23 = PHI <len_22(14), len_53(15)>
  if (len_23 < min_bytes_34)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  if (buf_len_19 != 0)
    goto <bb 15>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 18> :
  # len_24 = PHI <len_22(13), len_23(16), len_23(17)>
  _54 = len_24;

  <bb 19> :
<L17>:
  return _54;

}



;; Function snmp_encode_truthvalue (snmp_encode_truthvalue, funcdef_no=34, decl_uid=6688, cgraph_uid=35, symbol_order=42)

snmp_encode_truthvalue (s32_t * asn1_value, u32_t bool_value)
{
  u8_t D.8122;
  u8_t _1;
  u8_t _9;
  u8_t _10;

  <bb 2> :
  if (asn1_value_4(D) == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _10 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 8>; [INV]

  <bb 4> :
  if (bool_value_5(D) != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  *asn1_value_4(D) = 1;
  goto <bb 7>; [INV]

  <bb 6> :
  *asn1_value_4(D) = 2;

  <bb 7> :
  _9 = 4;

  <bb 8> :
  # _1 = PHI <_10(3), _9(7)>
<L5>:
  return _1;

}


