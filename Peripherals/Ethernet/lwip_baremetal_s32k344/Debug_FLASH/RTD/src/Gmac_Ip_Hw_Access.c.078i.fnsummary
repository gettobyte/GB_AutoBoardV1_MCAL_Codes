Symbol table:

OsIf_GetElapsed/38 (OsIf_GetElapsed) @06fc5460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: GMAC_TimeoutExpired/10 
  Calls: 
OsIf_MicrosToTicks/37 (OsIf_MicrosToTicks) @06fc52a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: GMAC_StartTimeOut/9 
  Calls: 
OsIf_GetCounter/36 (OsIf_GetCounter) @06fc51c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: GMAC_StartTimeOut/9 
  Calls: 
Gmac_apxState/35 (Gmac_apxState) @07170288
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: GMAC_MACIRQHandler/8 (read) GMAC_CommonIRQHandler/12 (read) GMAC_CommonIRQHandler/12 (read) GMAC_CommonIRQHandler/12 (read) GMAC_RxIRQHandler/14 (read) GMAC_RxIRQHandler/14 (read) GMAC_RxIRQHandler/14 (read) GMAC_IrqFSMHandler/5 (read) GMAC_IrqFSMHandler/5 (read) GMAC_IrqFSMHandler/5 (read) GMAC_IrqFSMDPPHandler/6 (read) GMAC_IrqFSMDPPHandler/6 (read) GMAC_IrqECCHandler/7 (read) GMAC_MACIRQHandler/8 (read) GMAC_IrqFSMHandler/5 (read) GMAC_IrqFSMDPPHandler/6 (read) GMAC_IrqECCHandler/7 (read) GMAC_IrqECCHandler/7 (read) GMAC_CommonIRQHandler/12 (read) GMAC_CommonIRQHandler/12 (read) GMAC_CommonIRQHandler/12 (read) GMAC_TxIRQHandler/15 (read) GMAC_TxIRQHandler/15 (read) GMAC_TxIRQHandler/15 (read) 
  Availability: not_available
  Varpool flags:
GMAC_SetVlanTagDataRxMatch/34 (GMAC_SetVlanTagDataRxMatch) @07168d20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
GMAC_SetVlanTagInvMatch/33 (GMAC_SetVlanTagInvMatch) @07168a80
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
GMAC_ReadVlanTagRxFilter/32 (GMAC_ReadVlanTagRxFilter) @071687e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: GMAC_TimeoutExpired/10 GMAC_StartTimeOut/9 
GMAC_SetRxQueuesDmaChMap/31 (GMAC_SetRxQueuesDmaChMap) @07168540
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
GMAC_SetRxQueueOperationMode/30 (GMAC_SetRxQueueOperationMode) @07150e00
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
GMAC_EnableRxQueue/29 (GMAC_EnableRxQueue) @071507e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
GMAC_SetTxThreshold/28 (GMAC_SetTxThreshold) @071502a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
GMAC_SetTxStoreAndForward/27 (GMAC_SetTxStoreAndForward) @07150d20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
GMAC_SetTxQueueOperationMode/26 (GMAC_SetTxQueueOperationMode) @07150a80
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
GMAC_SetTxQueueCreditBasedShaper/25 (GMAC_SetTxQueueCreditBasedShaper) @07150700
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
GMAC_SetTxQueueQuantumWeight/24 (GMAC_SetTxQueueQuantumWeight) @07150460
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
GMAC_SetSchedAlg/23 (GMAC_SetSchedAlg) @071501c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
GMAC_SetSpeed/22 (GMAC_SetSpeed) @07148d20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
GMAC_SetPowerState/21 (GMAC_SetPowerState) @071487e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
GMAC_GetPowerState/20 (GMAC_GetPowerState) @071482a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
GMAC_RemoveVlanFromHashTable/19 (GMAC_RemoveVlanFromHashTable) @07148ee0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: REV_BITS_32/4 
GMAC_AddVlanToHashTable/18 (GMAC_AddVlanToHashTable) @07148c40
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: REV_BITS_32/4 
GMAC_RemoveFromHashTable/17 (GMAC_RemoveFromHashTable) @071489a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: REV_BITS_32/4 REV_BITS_32/4 
GMAC_AddToHashTable/16 (GMAC_AddToHashTable) @07148700
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: REV_BITS_32/4 REV_BITS_32/4 
GMAC_TxIRQHandler/15 (GMAC_TxIRQHandler) @07148460
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Gmac_apxChBases/2 (read) Gmac_apxState/35 (read) Gmac_apxState/35 (read) Gmac_apxState/35 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call Num speculative call targets: 0
GMAC_RxIRQHandler/14 (GMAC_RxIRQHandler) @071481c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Gmac_apxChBases/2 (read) Gmac_apxState/35 (read) Gmac_apxState/35 (read) Gmac_apxState/35 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call Num speculative call targets: 0
GMAC_SafetyIRQHandler/13 (GMAC_SafetyIRQHandler) @07138ee0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: GMAC_IrqFSMDPPHandler/6 GMAC_IrqECCHandler/7 
GMAC_CommonIRQHandler/12 (GMAC_CommonIRQHandler) @07138620
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Gmac_apxChBases/2 (read) Gmac_apxState/35 (read) Gmac_apxState/35 (read) Gmac_apxState/35 (read) Gmac_apxState/35 (read) Gmac_apxState/35 (read) Gmac_apxState/35 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: GMAC_MACIRQHandler/8 
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
GMAC_WriteManagementFrame/11 (GMAC_WriteManagementFrame) @07138e00
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: GMAC_TimeoutExpired/10 GMAC_StartTimeOut/9 
GMAC_TimeoutExpired/10 (GMAC_TimeoutExpired) @071387e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: GMAC_ReadVlanTagRxFilter/32 GMAC_WriteManagementFrame/11 
  Calls: OsIf_GetElapsed/38 
GMAC_StartTimeOut/9 (GMAC_StartTimeOut) @07138540
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: GMAC_ReadVlanTagRxFilter/32 GMAC_WriteManagementFrame/11 
  Calls: OsIf_MicrosToTicks/37 OsIf_GetCounter/36 
GMAC_MACIRQHandler/8 (GMAC_MACIRQHandler) @071382a0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Gmac_apxState/35 (read) Gmac_apxState/35 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: GMAC_CommonIRQHandler/12 
  Calls: 
   Indirect call Num speculative call targets: 0
GMAC_IrqECCHandler/7 (GMAC_IrqECCHandler) @07138000
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Gmac_apxState/35 (read) Gmac_apxState/35 (read) Gmac_apxState/35 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: GMAC_SafetyIRQHandler/13 
  Calls: 
   Indirect call Num speculative call targets: 0
GMAC_IrqFSMDPPHandler/6 (GMAC_IrqFSMDPPHandler) @07006b60
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Gmac_apxState/35 (read) Gmac_apxState/35 (read) Gmac_apxState/35 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: GMAC_SafetyIRQHandler/13 
  Calls: GMAC_IrqFSMHandler/5 
   Indirect call Num speculative call targets: 0
GMAC_IrqFSMHandler/5 (GMAC_IrqFSMHandler) @07006d20
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Gmac_apxState/35 (read) Gmac_apxState/35 (read) Gmac_apxState/35 (read) Gmac_apxState/35 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: GMAC_IrqFSMDPPHandler/6 
  Calls: 
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
REV_BITS_32/4 (REV_BITS_32) @07006380
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: GMAC_RemoveVlanFromHashTable/19 GMAC_AddVlanToHashTable/18 GMAC_RemoveFromHashTable/17 GMAC_RemoveFromHashTable/17 GMAC_AddToHashTable/16 GMAC_AddToHashTable/16 
  Calls: 
Gmac_apxQueueBases/3 (Gmac_apxQueueBases) @07005120
  Type: variable definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Varpool flags: initialized read-only const-value-known
Gmac_apxChBases/2 (Gmac_apxChBases) @070050d8
  Type: variable definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: GMAC_CommonIRQHandler/12 (read) GMAC_RxIRQHandler/14 (read) GMAC_TxIRQHandler/15 (read) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
Gmac_apxBases/1 (Gmac_apxBases) @07005090
  Type: variable definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Varpool flags: initialized read-only const-value-known
GMAC_SetVlanTagDataRxMatch (struct GMAC_Type * Base, boolean EnInnerVlanMatch, boolean EnSvlanMatch, boolean DisVlanTypeMatch, boolean En12bitMatch)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;

  <bb 2> :
  if (EnInnerVlanMatch_23(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 ={v} Base_25(D)->MAC_VLAN_TAG.MAC_VLAN_TAG_DATA;
  _2 = _1 | 1048576;
  Base_25(D)->MAC_VLAN_TAG.MAC_VLAN_TAG_DATA ={v} _2;
  goto <bb 5>; [INV]

  <bb 4> :
  _3 ={v} Base_25(D)->MAC_VLAN_TAG.MAC_VLAN_TAG_DATA;
  _4 = _3 & 4293918719;
  Base_25(D)->MAC_VLAN_TAG.MAC_VLAN_TAG_DATA ={v} _4;

  <bb 5> :
  if (EnSvlanMatch_28(D) != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _5 ={v} Base_25(D)->MAC_VLAN_TAG.MAC_VLAN_TAG_DATA;
  _6 = _5 | 524288;
  Base_25(D)->MAC_VLAN_TAG.MAC_VLAN_TAG_DATA ={v} _6;
  goto <bb 8>; [INV]

  <bb 7> :
  _7 ={v} Base_25(D)->MAC_VLAN_TAG.MAC_VLAN_TAG_DATA;
  _8 = _7 & 4294443007;
  Base_25(D)->MAC_VLAN_TAG.MAC_VLAN_TAG_DATA ={v} _8;

  <bb 8> :
  if (DisVlanTypeMatch_31(D) != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  _9 ={v} Base_25(D)->MAC_VLAN_TAG.MAC_VLAN_TAG_DATA;
  _10 = _9 | 262144;
  Base_25(D)->MAC_VLAN_TAG.MAC_VLAN_TAG_DATA ={v} _10;
  goto <bb 11>; [INV]

  <bb 10> :
  _11 ={v} Base_25(D)->MAC_VLAN_TAG.MAC_VLAN_TAG_DATA;
  _12 = _11 & 4294705151;
  Base_25(D)->MAC_VLAN_TAG.MAC_VLAN_TAG_DATA ={v} _12;

  <bb 11> :
  if (En12bitMatch_34(D) != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  _13 ={v} Base_25(D)->MAC_VLAN_TAG.MAC_VLAN_TAG_DATA;
  _14 = _13 | 131072;
  Base_25(D)->MAC_VLAN_TAG.MAC_VLAN_TAG_DATA ={v} _14;
  goto <bb 14>; [INV]

  <bb 13> :
  _15 ={v} Base_25(D)->MAC_VLAN_TAG.MAC_VLAN_TAG_DATA;
  _16 = _15 & 4294836223;
  Base_25(D)->MAC_VLAN_TAG.MAC_VLAN_TAG_DATA ={v} _16;

  <bb 14> :
  _17 ={v} Base_25(D)->MAC_VLAN_TAG.MAC_VLAN_TAG_DATA;
  _18 = _17 | 65536;
  Base_25(D)->MAC_VLAN_TAG.MAC_VLAN_TAG_DATA ={v} _18;
  return;

}


GMAC_SetVlanTagInvMatch (struct GMAC_Type * Base, boolean Enable)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;

  <bb 2> :
  if (Enable_6(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 ={v} Base_8(D)->MAC_VLAN.MAC_VLAN_TAG_CTRL;
  _2 = _1 | 131072;
  Base_8(D)->MAC_VLAN.MAC_VLAN_TAG_CTRL ={v} _2;
  goto <bb 5>; [INV]

  <bb 4> :
  _3 ={v} Base_8(D)->MAC_VLAN.MAC_VLAN_TAG_CTRL;
  _4 = _3 & 4294836223;
  Base_8(D)->MAC_VLAN.MAC_VLAN_TAG_CTRL ={v} _4;

  <bb 5> :
  return;

}


GMAC_ReadVlanTagRxFilter (struct GMAC_Type * Base, uint8 FilterIdx, uint16 * VlanTag)
{
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;
  Gmac_Ip_StatusType Status;
  Gmac_Ip_StatusType D.7253;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int TimeoutTicks.16_12;
  _Bool _13;
  _Bool _14;
  long unsigned int _15;
  short unsigned int _16;
  Gmac_Ip_StatusType _33;

  <bb 2> :
  Status_21 = 3;
  _1 ={v} Base_23(D)->MAC_VLAN.MAC_VLAN_TAG_CTRL;
  _2 = _1 & 4294967283;
  Base_23(D)->MAC_VLAN.MAC_VLAN_TAG_CTRL ={v} _2;
  _3 ={v} Base_23(D)->MAC_VLAN.MAC_VLAN_TAG_CTRL;
  _4 = (long unsigned int) FilterIdx_25(D);
  _5 = _4 << 2;
  _6 = _3 | _5;
  _7 = _6 | 2;
  Base_23(D)->MAC_VLAN.MAC_VLAN_TAG_CTRL ={v} _7;
  _8 ={v} Base_23(D)->MAC_VLAN.MAC_VLAN_TAG_CTRL;
  _9 = _8 | 1;
  Base_23(D)->MAC_VLAN.MAC_VLAN_TAG_CTRL ={v} _9;
  GMAC_StartTimeOut (&StartTime, &ElapsedTime, &TimeoutTicks, 1000);

  <bb 3> :
  _10 ={v} Base_23(D)->MAC_VLAN.MAC_VLAN_TAG_CTRL;
  _11 = _10 & 1;
  if (_11 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Status_30 = 0;
  goto <bb 6>; [INV]

  <bb 5> :
  TimeoutTicks.16_12 = TimeoutTicks;
  _13 = GMAC_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.16_12);
  _14 = ~_13;
  if (_14 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # Status_17 = PHI <Status_30(4), Status_21(5)>
  if (Status_17 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _15 ={v} Base_23(D)->MAC_VLAN_TAG.MAC_VLAN_TAG_DATA;
  _16 = (short unsigned int) _15;
  *VlanTag_31(D) = _16;

  <bb 8> :
  _33 = Status_17;
  StartTime ={v} {CLOBBER};
  ElapsedTime ={v} {CLOBBER};
  TimeoutTicks ={v} {CLOBBER};

  <bb 9> :
<L7>:
  return _33;

}


GMAC_SetRxQueuesDmaChMap (struct GMAC_Type * Base, uint8 QueuesNum)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;

  <bb 2> :
  if (QueuesNum_6(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 ={v} Base_8(D)->MTL_RXQ_DMA_MAP0;
  Base_8(D)->MTL_RXQ_DMA_MAP0 ={v} _1;

  <bb 4> :
  if (QueuesNum_6(D) > 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _2 ={v} Base_8(D)->MTL_RXQ_DMA_MAP0;
  _3 = _2 | 256;
  Base_8(D)->MTL_RXQ_DMA_MAP0 ={v} _3;

  <bb 6> :
  return;

}


GMAC_SetRxQueueOperationMode (struct Gmac_Ip_QueueType * QueueBase, uint32 QueueSize)
{
  uint32 BlockNum;
  long unsigned int iftmp.15;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int iftmp.15_3;
  long unsigned int iftmp.15_6;
  long unsigned int iftmp.15_7;

  <bb 2> :
  BlockNum_5 = QueueSize_4(D) / 256;
  if (BlockNum_5 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.15_7 = BlockNum_5 + 4294967295;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.15_6 = 0;

  <bb 5> :
  # iftmp.15_3 = PHI <iftmp.15_7(3), iftmp.15_6(4)>
  BlockNum_8 = iftmp.15_3;
  _1 = BlockNum_8 << 20;
  _2 = _1 & 32505856;
  QueueBase_10(D)->MTL_RXQ_OPERATION_MODE ={v} _2;
  return;

}


GMAC_EnableRxQueue (struct GMAC_Type * Base, uint8 PriorityMask, uint8 QueueNum)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;

  <bb 2> :
  _1 ={v} Base_13(D)->MAC_RXQ_CTRL2;
  _2 = (long unsigned int) PriorityMask_14(D);
  _3 = (long unsigned int) QueueNum_15(D);
  _4 = _3 * 8;
  _5 = _2 << _4;
  _6 = _1 | _5;
  Base_13(D)->MAC_RXQ_CTRL2 ={v} _6;
  _7 ={v} Base_13(D)->MAC_RXQ_CTRL0;
  _8 = (long unsigned int) QueueNum_15(D);
  _9 = _8 * 2;
  _10 = 2 << _9;
  _11 = _7 | _10;
  Base_13(D)->MAC_RXQ_CTRL0 ={v} _11;
  return;

}


GMAC_SetTxThreshold (struct Gmac_Ip_QueueType * QueueBase, Gmac_Ip_TxThresholdType ThresholdValue)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;

  <bb 2> :
  _1 ={v} QueueBase_8(D)->MTL_TXQ_OPERATION_MODE;
  _2 = _1 & 4294967181;
  QueueBase_8(D)->MTL_TXQ_OPERATION_MODE ={v} _2;
  _3 ={v} QueueBase_8(D)->MTL_TXQ_OPERATION_MODE;
  _4 = ThresholdValue_10(D) << 4;
  _5 = _4 & 112;
  _6 = _3 | _5;
  QueueBase_8(D)->MTL_TXQ_OPERATION_MODE ={v} _6;
  return;

}


GMAC_SetTxStoreAndForward (struct Gmac_Ip_QueueType * QueueBase)
{
  long unsigned int _1;
  long unsigned int _2;

  <bb 2> :
  _1 ={v} QueueBase_4(D)->MTL_TXQ_OPERATION_MODE;
  _2 = _1 | 2;
  QueueBase_4(D)->MTL_TXQ_OPERATION_MODE ={v} _2;
  return;

}


GMAC_SetTxQueueOperationMode (struct Gmac_Ip_QueueType * QueueBase, Gmac_Ip_OperationModeType QueueMode, uint32 QueueSize)
{
  uint32 BlockNum;
  long unsigned int iftmp.14;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int iftmp.14_7;
  long unsigned int iftmp.14_10;
  long unsigned int iftmp.14_11;

  <bb 2> :
  BlockNum_9 = QueueSize_8(D) / 256;
  if (BlockNum_9 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.14_11 = BlockNum_9 + 4294967295;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.14_10 = 0;

  <bb 5> :
  # iftmp.14_7 = PHI <iftmp.14_11(3), iftmp.14_10(4)>
  BlockNum_12 = iftmp.14_7;
  _1 = QueueMode_13(D) << 2;
  _2 = _1 & 12;
  _3 = BlockNum_12 << 16;
  _4 = _3 & 2031616;
  _5 = _2 | _4;
  _6 = _5 | 2;
  QueueBase_15(D)->MTL_TXQ_OPERATION_MODE ={v} _6;
  return;

}


GMAC_SetTxQueueCreditBasedShaper (struct Gmac_Ip_QueueType * QueueBase, uint32 SendSlopeCredit, uint32 HighCredit, sint32 LowCredit)
{
  long unsigned int LowCredit.13_1;

  <bb 2> :
  QueueBase_3(D)->MTL_TXQ_SENDSLOPECREDIT ={v} SendSlopeCredit_4(D);
  QueueBase_3(D)->MTL_TXQ_HICREDIT ={v} HighCredit_6(D);
  LowCredit.13_1 = (long unsigned int) LowCredit_8(D);
  QueueBase_3(D)->MTL_TXQ_LOCREDIT ={v} LowCredit.13_1;
  return;

}


GMAC_SetTxQueueQuantumWeight (struct Gmac_Ip_QueueType * QueueBase, uint32 Weight)
{
  <bb 2> :
  QueueBase_2(D)->MTL_TXQ_QUANTUM_WEIGHT ={v} Weight_3(D);
  return;

}


GMAC_SetSchedAlg (struct GMAC_Type * Base, Gmac_Ip_TxSchedAlgoType SchedAlgo)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;

  <bb 2> :
  if (SchedAlgo_6(D) == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 ={v} Base_8(D)->MTL_OPERATION_MODE;
  _2 = _1 & 4294967199;
  Base_8(D)->MTL_OPERATION_MODE ={v} _2;
  goto <bb 6>; [INV]

  <bb 4> :
  if (SchedAlgo_6(D) == 3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _3 ={v} Base_8(D)->MTL_OPERATION_MODE;
  _4 = _3 | 96;
  Base_8(D)->MTL_OPERATION_MODE ={v} _4;

  <bb 6> :
  return;

}


GMAC_SetSpeed (struct GMAC_Type * Base, Gmac_Ip_SpeedType Speed)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;

  <bb 2> :
  if (Speed_10(D) == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 ={v} Base_12(D)->MAC_CONFIGURATION;
  _2 = _1 & 4294918143;
  Base_12(D)->MAC_CONFIGURATION ={v} _2;
  goto <bb 8>; [INV]

  <bb 4> :
  if (Speed_10(D) == 3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _3 ={v} Base_12(D)->MAC_CONFIGURATION;
  _4 = _3 | 49152;
  Base_12(D)->MAC_CONFIGURATION ={v} _4;
  goto <bb 8>; [INV]

  <bb 6> :
  if (Speed_10(D) == 2)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _5 ={v} Base_12(D)->MAC_CONFIGURATION;
  _6 = _5 | 32768;
  Base_12(D)->MAC_CONFIGURATION ={v} _6;
  _7 ={v} Base_12(D)->MAC_CONFIGURATION;
  _8 = _7 & 4294950911;
  Base_12(D)->MAC_CONFIGURATION ={v} _8;

  <bb 8> :
  return;

}


GMAC_SetPowerState (struct GMAC_Type * Base, Gmac_Ip_PowerStateType PowerState)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;

  <bb 2> :
  switch (PowerState_8(D)) <default: <L3> [INV], case 0: <L0> [INV], case 1: <L1> [INV], case 3: <L2> [INV]>

  <bb 3> :
<L0>:
  _1 ={v} Base_10(D)->MAC_CONFIGURATION;
  _2 = _1 & 4294967292;
  Base_10(D)->MAC_CONFIGURATION ={v} _2;
  goto <bb 7>; [INV]

  <bb 4> :
<L1>:
  _3 ={v} Base_10(D)->MAC_CONFIGURATION;
  _4 = _3 | 3;
  Base_10(D)->MAC_CONFIGURATION ={v} _4;
  goto <bb 7>; [INV]

  <bb 5> :
<L2>:
  _5 ={v} Base_10(D)->DMA_MODE;
  _6 = _5 | 1;
  Base_10(D)->DMA_MODE ={v} _6;
  goto <bb 7>; [INV]

  <bb 6> :
<L3>:

  <bb 7> :
  return;

}


GMAC_GetPowerState (const struct GMAC_Type * Base)
{
  Gmac_Ip_PowerStateType PowerState;
  Gmac_Ip_PowerStateType D.7220;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  Gmac_Ip_PowerStateType _14;

  <bb 2> :
  PowerState_8 = 3;
  _1 ={v} Base_10(D)->DMA_MODE;
  _2 = _1 & 1;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  PowerState_13 = 3;
  goto <bb 8>; [INV]

  <bb 4> :
  _3 ={v} Base_10(D)->MAC_CONFIGURATION;
  _4 = _3 & 3;
  if (_4 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  PowerState_12 = 1;
  goto <bb 8>; [INV]

  <bb 6> :
  _5 ={v} Base_10(D)->MAC_CONFIGURATION;
  _6 = _5 & 3;
  if (_6 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  PowerState_11 = 0;

  <bb 8> :
  # PowerState_7 = PHI <PowerState_13(3), PowerState_12(5), PowerState_8(6), PowerState_11(7)>
  _14 = PowerState_7;

  <bb 9> :
<L9>:
  return _14;

}


GMAC_RemoveVlanFromHashTable (struct GMAC_Type * Base, uint32 Crc)
{
  uint32 Index;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;

  <bb 2> :
  _1 = REV_BITS_32 (Crc_11(D));
  _2 = _1 >> 28;
  Index_13 = _2 & 15;
  _3 ={v} Base_14(D)->MAC_VLAN_TAG.MAC_VLAN_TAG_DATA;
  _4 = _3 & 131072;
  if (_4 != 131072)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Index_15 = Index_13 + 4294967295;

  <bb 4> :
  # Index_9 = PHI <Index_13(2), Index_15(3)>
  _5 ={v} Base_14(D)->MAC_VLAN_HASH_TABLE;
  _6 = 1 << Index_9;
  _7 = ~_6;
  _8 = _5 & _7;
  Base_14(D)->MAC_VLAN_HASH_TABLE ={v} _8;
  return;

}


GMAC_AddVlanToHashTable (struct GMAC_Type * Base, uint32 Crc)
{
  uint32 Index;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;

  <bb 2> :
  _1 = REV_BITS_32 (Crc_10(D));
  _2 = _1 >> 28;
  Index_12 = _2 & 15;
  _3 ={v} Base_13(D)->MAC_VLAN_TAG.MAC_VLAN_TAG_DATA;
  _4 = _3 & 131072;
  if (_4 != 131072)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Index_14 = Index_12 + 4294967295;

  <bb 4> :
  # Index_8 = PHI <Index_12(2), Index_14(3)>
  _5 ={v} Base_13(D)->MAC_VLAN_HASH_TABLE;
  _6 = 1 << Index_8;
  _7 = _5 | _6;
  Base_13(D)->MAC_VLAN_HASH_TABLE ={v} _7;
  return;

}


GMAC_RemoveFromHashTable (const struct GMAC_Type * Base, uint32 Crc)
{
  volatile uint32[2] * Hash_table;
  volatile uint32 HashBaseAddr;
  uint32 Hash_bit;
  uint32 Index;
  const uint32_t * _1;
  long unsigned int _2;
  long unsigned int HashBaseAddr.12_3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;

  <bb 2> :
  _1 = &Base_14(D)->MAC_HASH_TABLE_REG0;
  _2 = (long unsigned int) _1;
  HashBaseAddr ={v} _2;
  HashBaseAddr.12_3 ={v} HashBaseAddr;
  Hash_table_17 = (volatile uint32[2] *) HashBaseAddr.12_3;
  _4 = REV_BITS_32 (Crc_18(D));
  _5 = _4 >> 31;
  Index_20 = _5 & 1;
  _6 = REV_BITS_32 (Crc_18(D));
  _7 = _6 >> 26;
  _8 = _7 & 31;
  Hash_bit_22 = 1 << _8;
  _9 = Index_20 & 1;
  _10 ={v} (*Hash_table_17)[_9];
  _11 = ~Hash_bit_22;
  _12 = Index_20 & 1;
  _13 = _10 & _11;
  (*Hash_table_17)[_12] ={v} _13;
  return;

}


GMAC_AddToHashTable (const struct GMAC_Type * Base, uint32 Crc)
{
  volatile uint32[2] * Hash_table;
  volatile uint32 HashBaseAddr;
  uint32 Hash_bit;
  uint32 Index;
  const uint32_t * _1;
  long unsigned int _2;
  long unsigned int HashBaseAddr.11_3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;

  <bb 2> :
  _1 = &Base_13(D)->MAC_HASH_TABLE_REG0;
  _2 = (long unsigned int) _1;
  HashBaseAddr ={v} _2;
  HashBaseAddr.11_3 ={v} HashBaseAddr;
  Hash_table_16 = (volatile uint32[2] *) HashBaseAddr.11_3;
  _4 = REV_BITS_32 (Crc_17(D));
  _5 = _4 >> 31;
  Index_19 = _5 & 1;
  _6 = REV_BITS_32 (Crc_17(D));
  _7 = _6 >> 26;
  _8 = _7 & 31;
  Hash_bit_21 = 1 << _8;
  _9 = Index_19 & 1;
  _10 ={v} (*Hash_table_16)[_9];
  _11 = Index_19 & 1;
  _12 = Hash_bit_21 | _10;
  (*Hash_table_16)[_11] ={v} _12;
  return;

}


GMAC_TxIRQHandler (uint8 Instance, uint8 Channel)
{
  uint32 IrqEnFlags;
  uint32 StatusFlags;
  struct Gmac_Ip_ChannelType * ChBase;
  int _1;
  int _2;
  int _3;
  struct Gmac_Ip_StateType * _4;
  long unsigned int _5;
  long unsigned int _6;
  int _7;
  struct Gmac_Ip_StateType * _8;
  int _9;
  void (*<T57f>) (const uint8, const uint8) _10;
  int _11;
  struct Gmac_Ip_StateType * _12;
  int _13;
  void (*<T57f>) (const uint8, const uint8) _14;

  <bb 2> :
  _1 = (int) Instance_16(D);
  _2 = (int) Channel_17(D);
  ChBase_19 = Gmac_apxChBases[_1][_2];
  StatusFlags_20 ={v} ChBase_19->DMA_STATUS;
  IrqEnFlags_21 ={v} ChBase_19->DMA_INTERRUPT_ENABLE;
  _3 = (int) Instance_16(D);
  _4 = Gmac_apxState[_3];
  if (_4 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  _5 = IrqEnFlags_21 & 1;
  if (_5 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  _6 = StatusFlags_20 & 1;
  if (_6 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  ChBase_19->DMA_STATUS ={v} 1;
  _7 = (int) Instance_16(D);
  _8 = Gmac_apxState[_7];
  _9 = (int) Channel_17(D);
  _10 = _8->TxChCallback[_9];
  if (_10 != 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  _11 = (int) Instance_16(D);
  _12 = Gmac_apxState[_11];
  _13 = (int) Channel_17(D);
  _14 = _12->TxChCallback[_13];
  _14 (Instance_16(D), Channel_17(D));
  goto <bb 8>; [INV]

  <bb 7> :
  ChBase_19->DMA_STATUS ={v} 1;

  <bb 8> :
  return;

}


GMAC_RxIRQHandler (uint8 Instance, uint8 Channel)
{
  uint32 IrqEnFlags;
  uint32 StatusFlags;
  struct Gmac_Ip_ChannelType * ChBase;
  int _1;
  int _2;
  int _3;
  struct Gmac_Ip_StateType * _4;
  long unsigned int _5;
  long unsigned int _6;
  int _7;
  struct Gmac_Ip_StateType * _8;
  int _9;
  void (*<T57f>) (const uint8, const uint8) _10;
  int _11;
  struct Gmac_Ip_StateType * _12;
  int _13;
  void (*<T57f>) (const uint8, const uint8) _14;

  <bb 2> :
  _1 = (int) Instance_16(D);
  _2 = (int) Channel_17(D);
  ChBase_19 = Gmac_apxChBases[_1][_2];
  StatusFlags_20 ={v} ChBase_19->DMA_STATUS;
  IrqEnFlags_21 ={v} ChBase_19->DMA_INTERRUPT_ENABLE;
  _3 = (int) Instance_16(D);
  _4 = Gmac_apxState[_3];
  if (_4 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  _5 = IrqEnFlags_21 & 64;
  if (_5 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  _6 = StatusFlags_20 & 64;
  if (_6 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  ChBase_19->DMA_STATUS ={v} 64;
  _7 = (int) Instance_16(D);
  _8 = Gmac_apxState[_7];
  _9 = (int) Channel_17(D);
  _10 = _8->RxChCallback[_9];
  if (_10 != 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  _11 = (int) Instance_16(D);
  _12 = Gmac_apxState[_11];
  _13 = (int) Channel_17(D);
  _14 = _12->RxChCallback[_13];
  _14 (Instance_16(D), Channel_17(D));
  goto <bb 8>; [INV]

  <bb 7> :
  ChBase_19->DMA_STATUS ={v} 64;

  <bb 8> :
  return;

}


GMAC_SafetyIRQHandler (uint8 Instance)
{
  uint32 ErrorStatusFlags;
  uint32 SafetyStatusFlags;
  struct GMAC_Type * Base;
  int _1;
  long unsigned int _2;
  long unsigned int _3;
  signed int SafetyStatusFlags.10_4;
  long unsigned int _5;

  <bb 2> :
  _1 = (int) Instance_7(D);
  Base_8 = 1078460416B;
  SafetyStatusFlags_10 ={v} Base_8->DMA_SAFETY_INTERRUPT_STATUS;
  _2 = SafetyStatusFlags_10 & 536870912;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  ErrorStatusFlags_13 ={v} Base_8->MTL_ECC_INTERRUPT_STATUS;
  Base_8->MTL_ECC_INTERRUPT_STATUS ={v} ErrorStatusFlags_13;
  _3 ={v} Base_8->MTL_ECC_CONTROL;
  GMAC_IrqECCHandler (Instance_7(D), ErrorStatusFlags_13, _3);
  goto <bb 6>; [INV]

  <bb 4> :
  SafetyStatusFlags.10_4 = (signed int) SafetyStatusFlags_10;
  if (SafetyStatusFlags.10_4 < 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  ErrorStatusFlags_11 ={v} Base_8->MAC_DPP_FSM_INTERRUPT_STATUS;
  _5 ={v} Base_8->MTL_DPP_CONTROL;
  GMAC_IrqFSMDPPHandler (Instance_7(D), ErrorStatusFlags_11, _5);

  <bb 6> :
  return;

}


GMAC_CommonIRQHandler (uint8 Instance)
{
  struct Gmac_Ip_ChannelType * ChBase;
  uint8 TxInterruptStatus[2];
  uint8 RxInterruptStatus[2];
  uint32 Flags;
  uint16 i;
  const struct GMAC_Type * Base;
  long unsigned int vol.6;
  int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  int _6;
  int _7;
  long unsigned int _8;
  int _9;
  long unsigned int _10;
  int _11;
  short unsigned int i.7_12;
  int _13;
  unsigned char _14;
  int _15;
  struct Gmac_Ip_StateType * _16;
  int _17;
  void (*<T57f>) (const uint8, const uint8) _18;
  int _19;
  struct Gmac_Ip_StateType * _20;
  int _21;
  void (*<T57f>) (const uint8, const uint8) _22;
  unsigned char _23;
  short unsigned int i.8_24;
  int _25;
  struct Gmac_Ip_StateType * _26;
  short unsigned int _27;
  int _28;
  unsigned char _29;
  int _30;
  struct Gmac_Ip_StateType * _31;
  int _32;
  void (*<T57f>) (const uint8, const uint8) _33;
  int _34;
  struct Gmac_Ip_StateType * _35;
  int _36;
  void (*<T57f>) (const uint8, const uint8) _37;
  unsigned char _38;
  short unsigned int i.9_39;
  int _40;
  struct Gmac_Ip_StateType * _41;
  short unsigned int _42;
  long unsigned int vol.6_71;

  <bb 2> :
  _1 = (int) Instance_53(D);
  Base_54 = 1078460416B;
  RxInterruptStatus = "\x00";
  TxInterruptStatus = "\x00";
  GMAC_MACIRQHandler (Instance_53(D));
  i_59 = 0;
  goto <bb 9>; [INV]

  <bb 3> :
  _2 ={v} Base_54->DMA_INTERRUPT_STATUS;
  _3 = (long unsigned int) i_43;
  _4 = _2 >> _3;
  _5 = _4 & 1;
  if (_5 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  _6 = (int) Instance_53(D);
  _7 = (int) i_43;
  ChBase_68 = Gmac_apxChBases[_6][_7];
  Flags_69 ={v} ChBase_68->DMA_STATUS;
  ChBase_68->DMA_STATUS ={v} Flags_69;
  vol.6_71 ={v} ChBase_68->DMA_STATUS;
  _8 = Flags_69 & 3673024;
  if (_8 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _9 = (int) i_43;
  RxInterruptStatus[_9] = 1;

  <bb 6> :
  _10 = Flags_69 & 459783;
  if (_10 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _11 = (int) i_43;
  TxInterruptStatus[_11] = 1;

  <bb 8> :
  i.7_12 = i_43;
  i_74 = i.7_12 + 1;

  <bb 9> :
  # i_43 = PHI <i_59(2), i_74(8)>
  if (i_43 <= 1)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  i_60 = 0;
  goto <bb 15>; [INV]

  <bb 11> :
  _13 = (int) i_44;
  _14 = RxInterruptStatus[_13];
  if (_14 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 12> :
  _15 = (int) Instance_53(D);
  _16 = Gmac_apxState[_15];
  _17 = (int) i_44;
  _18 = _16->RxChCallback[_17];
  if (_18 != 0B)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  _19 = (int) Instance_53(D);
  _20 = Gmac_apxState[_19];
  _21 = (int) i_44;
  _22 = _20->RxChCallback[_21];
  _23 = (unsigned char) i_44;
  _22 (Instance_53(D), _23);

  <bb 14> :
  i.8_24 = i_44;
  i_67 = i.8_24 + 1;

  <bb 15> :
  # i_44 = PHI <i_60(10), i_67(14)>
  _25 = (int) Instance_53(D);
  _26 = Gmac_apxState[_25];
  _27 = _26->RxRingCount;
  if (i_44 < _27)
    goto <bb 11>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 16> :
  i_61 = 0;
  goto <bb 21>; [INV]

  <bb 17> :
  _28 = (int) i_45;
  _29 = TxInterruptStatus[_28];
  if (_29 != 0)
    goto <bb 18>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 18> :
  _30 = (int) Instance_53(D);
  _31 = Gmac_apxState[_30];
  _32 = (int) i_45;
  _33 = _31->TxChCallback[_32];
  if (_33 != 0B)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  _34 = (int) Instance_53(D);
  _35 = Gmac_apxState[_34];
  _36 = (int) i_45;
  _37 = _35->TxChCallback[_36];
  _38 = (unsigned char) i_45;
  _37 (Instance_53(D), _38);

  <bb 20> :
  i.9_39 = i_45;
  i_65 = i.9_39 + 1;

  <bb 21> :
  # i_45 = PHI <i_61(16), i_65(20)>
  _40 = (int) Instance_53(D);
  _41 = Gmac_apxState[_40];
  _42 = _41->TxRingCount;
  if (i_45 < _42)
    goto <bb 17>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 22> :
  RxInterruptStatus ={v} {CLOBBER};
  TxInterruptStatus ={v} {CLOBBER};
  return;

}


GMAC_WriteManagementFrame (struct GMAC_Type * Base, const struct Gmac_Ip_ManagementInfo * ManageInfo, uint32 TimeoutUs)
{
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;
  Gmac_Ip_StatusType Status;
  Gmac_Ip_StatusType D.7163;
  long unsigned int iftmp.4;
  long unsigned int iftmp.3;
  long unsigned int iftmp.2;
  long unsigned int _1;
  long unsigned int _2;
  _Bool _3;
  short unsigned int _4;
  long unsigned int _5;
  short unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  _Bool _10;
  <unnamed type> _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  unsigned char _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  _Bool _20;
  short unsigned int _21;
  long unsigned int _22;
  long unsigned int _23;
  short unsigned int _24;
  long unsigned int _25;
  long unsigned int _26;
  long unsigned int _27;
  long unsigned int _28;
  long unsigned int _29;
  long unsigned int _30;
  long unsigned int _31;
  long unsigned int TimeoutTicks.5_32;
  _Bool _33;
  _Bool _34;
  long unsigned int iftmp.2_36;
  long unsigned int iftmp.3_37;
  long unsigned int iftmp.4_38;
  long unsigned int iftmp.2_46;
  long unsigned int iftmp.2_47;
  long unsigned int iftmp.3_49;
  long unsigned int iftmp.3_50;
  long unsigned int iftmp.4_51;
  long unsigned int iftmp.4_52;
  Gmac_Ip_StatusType _58;

  <bb 2> :
  Status_41 = 3;
  _1 ={v} Base_43(D)->MAC_MDIO_ADDRESS;
  _2 = _1 & 4227923953;
  Base_43(D)->MAC_MDIO_ADDRESS ={v} _2;
  _3 = ManageInfo_45(D)->SupportedClause45;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _4 = ManageInfo_45(D)->PhysReg;
  _5 = (long unsigned int) _4;
  iftmp.2_47 = _5 << 16;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.2_46 = 0;

  <bb 5> :
  # iftmp.2_36 = PHI <iftmp.2_47(3), iftmp.2_46(4)>
  _6 = ManageInfo_45(D)->FrameData;
  _7 = (long unsigned int) _6;
  _8 = iftmp.2_36 | _7;
  Base_43(D)->MAC_MDIO_DATA ={v} _8;
  _9 ={v} Base_43(D)->MAC_MDIO_ADDRESS;
  _10 = ManageInfo_45(D)->SupportedClause45;
  if (_10 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  iftmp.3_50 = 2;
  goto <bb 8>; [INV]

  <bb 7> :
  iftmp.3_49 = 0;

  <bb 8> :
  # iftmp.3_37 = PHI <iftmp.3_50(6), iftmp.3_49(7)>
  _11 = ManageInfo_45(D)->OpFrameType;
  _12 = _11 << 3;
  _13 = _12 & 8;
  _14 = iftmp.3_37 | _13;
  _15 = ManageInfo_45(D)->PhysAddr;
  _16 = (long unsigned int) _15;
  _17 = _16 << 21;
  _18 = _17 & 65011712;
  _19 = _14 | _18;
  _20 = ManageInfo_45(D)->SupportedClause45;
  if (_20 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  _21 = ManageInfo_45(D)->MmdAddr;
  _22 = (long unsigned int) _21;
  _23 = _22 << 16;
  iftmp.4_52 = _23 & 2031616;
  goto <bb 11>; [INV]

  <bb 10> :
  _24 = ManageInfo_45(D)->PhysReg;
  _25 = (long unsigned int) _24;
  _26 = _25 << 16;
  iftmp.4_51 = _26 & 2031616;

  <bb 11> :
  # iftmp.4_38 = PHI <iftmp.4_52(9), iftmp.4_51(10)>
  _27 = iftmp.4_38 | _19;
  _28 = _9 | _27;
  _29 = _28 | 5;
  Base_43(D)->MAC_MDIO_ADDRESS ={v} _29;
  GMAC_StartTimeOut (&StartTime, &ElapsedTime, &TimeoutTicks, TimeoutUs_54(D));

  <bb 12> :
  _30 ={v} Base_43(D)->MAC_MDIO_ADDRESS;
  _31 = _30 & 1;
  if (_31 == 0)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  Status_57 = 0;
  goto <bb 15>; [INV]

  <bb 14> :
  TimeoutTicks.5_32 = TimeoutTicks;
  _33 = GMAC_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.5_32);
  _34 = ~_33;
  if (_34 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  # Status_35 = PHI <Status_57(13), Status_41(14)>
  _58 = Status_35;
  StartTime ={v} {CLOBBER};
  ElapsedTime ={v} {CLOBBER};
  TimeoutTicks ={v} {CLOBBER};

  <bb 16> :
<L14>:
  return _58;

}


GMAC_TimeoutExpired (uint32 * StartTimeInOut, uint32 * ElapsedTimeInOut, uint32 TimeoutTicks)
{
  boolean RetVal;
  boolean D.7147;
  long unsigned int D.7144;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _9;
  boolean _14;

  <bb 2> :
  RetVal_5 = 0;
  _9 = OsIf_GetElapsed (StartTimeInOut_7(D), 0);
  _1 = *ElapsedTimeInOut_10(D);
  _2 = _9 + _1;
  *ElapsedTimeInOut_10(D) = _2;
  _3 = *ElapsedTimeInOut_10(D);
  if (TimeoutTicks_12(D) <= _3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  RetVal_13 = 1;

  <bb 4> :
  # RetVal_4 = PHI <RetVal_5(2), RetVal_13(3)>
  _14 = RetVal_4;

  <bb 5> :
<L2>:
  return _14;

}


GMAC_StartTimeOut (uint32 * StartTimeOut, uint32 * ElapsedTimeOut, uint32 * TimeoutTicksOut, uint32 TimeoutUs)
{
  long unsigned int _1;
  long unsigned int _2;

  <bb 2> :
  _1 = OsIf_GetCounter (0);
  *StartTimeOut_5(D) = _1;
  *ElapsedTimeOut_7(D) = 0;
  _2 = OsIf_MicrosToTicks (TimeoutUs_9(D), 0);
  *TimeoutTicksOut_11(D) = _2;
  return;

}


GMAC_MACIRQHandler (uint8 Instance)
{
  uint32 Flags;
  const struct GMAC_Type * Base;
  long unsigned int vol.1;
  long unsigned int vol.0;
  int _1;
  long unsigned int _2;
  long unsigned int _3;
  int _4;
  struct Gmac_Ip_StateType * _5;
  void (*<T57a>) (const uint8) _6;
  int _7;
  struct Gmac_Ip_StateType * _8;
  void (*<T57a>) (const uint8) _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int vol.0_20;
  long unsigned int vol.1_21;

  <bb 2> :
  _1 = (int) Instance_15(D);
  Base_16 = 1078460416B;
  _2 ={v} Base_16->DMA_INTERRUPT_STATUS;
  _3 = _2 & 131072;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 3> :
  Flags_18 ={v} Base_16->MAC_INTERRUPT_STATUS;
  _4 = (int) Instance_15(D);
  _5 = Gmac_apxState[_4];
  _6 = _5->Callback;
  if (_6 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _7 = (int) Instance_15(D);
  _8 = Gmac_apxState[_7];
  _9 = _8->Callback;
  _9 (Instance_15(D));

  <bb 5> :
  _10 = Flags_18 & 131072;
  if (_10 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  vol.0_20 ={v} Base_16->MAC_FPE_CTRL_STS;

  <bb 7> :
  _11 = Flags_18 & 16384;
  if (_11 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  _12 = Flags_18 & 8192;
  if (_12 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  vol.1_21 ={v} Base_16->MAC_RX_TX_STATUS;

  <bb 10> :
  return;

}


GMAC_IrqECCHandler (const uint8 Instance, uint32 ErrorStatusFlags, uint32 ErrorEnFlags)
{
  int _1;
  struct Gmac_Ip_StateType * _2;
  long unsigned int _3;
  long unsigned int _4;
  int _5;
  struct Gmac_Ip_StateType * _6;
  void (*<T575>) (const uint8, const Gmac_Ip_SafetyErrorType) _7;
  int _8;
  struct Gmac_Ip_StateType * _9;
  void (*<T575>) (const uint8, const Gmac_Ip_SafetyErrorType) _10;

  <bb 2> :
  _1 = (int) Instance_12(D);
  _2 = Gmac_apxState[_1];
  if (_2 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  _3 = ErrorStatusFlags_14(D) & 1638;
  if (_3 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  _4 = ErrorEnFlags_15(D) & 7;
  if (_4 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _5 = (int) Instance_12(D);
  _6 = Gmac_apxState[_5];
  _7 = _6->SafetyCallback;
  if (_7 != 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _8 = (int) Instance_12(D);
  _9 = Gmac_apxState[_8];
  _10 = _9->SafetyCallback;
  _10 (Instance_12(D), 2);

  <bb 7> :
  return;

}


GMAC_IrqFSMDPPHandler (const uint8 Instance, uint32 ErrorStatusFlags, uint32 ErrorEnFlags)
{
  const struct GMAC_Type * Base;
  int _1;
  int _2;
  struct Gmac_Ip_StateType * _3;
  int _4;
  struct Gmac_Ip_StateType * _5;
  void (*<T575>) (const uint8, const Gmac_Ip_SafetyErrorType) _6;
  long unsigned int _7;
  long unsigned int _8;
  int _9;
  struct Gmac_Ip_StateType * _10;
  void (*<T575>) (const uint8, const Gmac_Ip_SafetyErrorType) _11;
  long unsigned int _12;

  <bb 2> :
  _1 = (int) Instance_14(D);
  Base_15 = 1078460416B;
  _2 = (int) Instance_14(D);
  _3 = Gmac_apxState[_2];
  if (_3 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  _4 = (int) Instance_14(D);
  _5 = Gmac_apxState[_4];
  _6 = _5->SafetyCallback;
  if (_6 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  _7 = ErrorStatusFlags_17(D) & 60;
  if (_7 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _8 = ErrorEnFlags_18(D) & 1;
  if (_8 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _9 = (int) Instance_14(D);
  _10 = Gmac_apxState[_9];
  _11 = _10->SafetyCallback;
  _11 (Instance_14(D), 16);
  goto <bb 8>; [INV]

  <bb 7> :
  _12 ={v} Base_15->MAC_FSM_CONTROL;
  GMAC_IrqFSMHandler (Instance_14(D), ErrorStatusFlags_17(D), _12);

  <bb 8> :
  return;

}


GMAC_IrqFSMHandler (const uint8 Instance, uint32 ErrorStatusFlags, uint32 ErrorEnFlags)
{
  long unsigned int _1;
  long unsigned int _2;
  int _3;
  struct Gmac_Ip_StateType * _4;
  void (*<T575>) (const uint8, const Gmac_Ip_SafetyErrorType) _5;
  long unsigned int _6;
  long unsigned int _7;
  int _8;
  struct Gmac_Ip_StateType * _9;
  void (*<T575>) (const uint8, const Gmac_Ip_SafetyErrorType) _10;
  long unsigned int _11;
  long unsigned int _12;
  int _13;
  struct Gmac_Ip_StateType * _14;
  void (*<T575>) (const uint8, const Gmac_Ip_SafetyErrorType) _15;
  int _16;
  struct Gmac_Ip_StateType * _17;
  void (*<T575>) (const uint8, const Gmac_Ip_SafetyErrorType) _18;

  <bb 2> :
  _1 = ErrorStatusFlags_20(D) & 16777216;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _2 = ErrorEnFlags_21(D) & 2;
  if (_2 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _3 = (int) Instance_22(D);
  _4 = Gmac_apxState[_3];
  _5 = _4->SafetyCallback;
  _5 (Instance_22(D), 4);
  goto <bb 13>; [INV]

  <bb 5> :
  _6 = ErrorStatusFlags_20(D) & 6912;
  if (_6 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  _7 = ErrorEnFlags_21(D) & 1;
  if (_7 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _8 = (int) Instance_22(D);
  _9 = Gmac_apxState[_8];
  _10 = _9->SafetyCallback;
  _10 (Instance_22(D), 8);
  goto <bb 13>; [INV]

  <bb 8> :
  _11 = ErrorStatusFlags_20(D) & 32;
  if (_11 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  _12 = ErrorEnFlags_21(D) & 1;
  if (_12 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  _13 = (int) Instance_22(D);
  _14 = Gmac_apxState[_13];
  _15 = _14->SafetyCallback;
  _15 (Instance_22(D), 32);
  goto <bb 13>; [INV]

  <bb 11> :
  if (ErrorStatusFlags_20(D) == 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  _16 = (int) Instance_22(D);
  _17 = Gmac_apxState[_16];
  _18 = _17->SafetyCallback;
  _18 (Instance_22(D), 1);

  <bb 13> :
  return;

}


REV_BITS_32 (uint32 value)
{
  uint32 v;
  uint32 D.7205;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  uint32 _23;

  <bb 2> :
  v_18 = value_17(D);
  _1 = v_18 >> 1;
  _2 = _1 & 1431655765;
  _3 = v_18 << 1;
  _4 = _3 & 2863311530;
  v_19 = _2 | _4;
  _5 = v_19 >> 2;
  _6 = _5 & 858993459;
  _7 = v_19 << 2;
  _8 = _7 & 3435973836;
  v_20 = _6 | _8;
  _9 = v_20 >> 4;
  _10 = _9 & 252645135;
  _11 = v_20 << 4;
  _12 = _11 & 4042322160;
  v_21 = _10 | _12;
  _13 = v_21 >> 8;
  _14 = _13 & 16711935;
  _15 = v_21 << 8;
  _16 = _15 & 4278255360;
  v_22 = _14 | _16;
  _23 = v_22 r>> 16;

  <bb 3> :
<L0>:
  return _23;

}


