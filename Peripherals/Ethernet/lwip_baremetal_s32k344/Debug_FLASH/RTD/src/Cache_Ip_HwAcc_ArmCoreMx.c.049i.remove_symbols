
Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

hwAcc_ArmCoreMx_DataCacheDisable/11 (hwAcc_ArmCoreMx_DataCacheDisable) @06b01460
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
hwAcc_ArmCoreMx_InstructionCacheDisable/10 (hwAcc_ArmCoreMx_InstructionCacheDisable) @06b011c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
hwAcc_ArmCoreMx_DataCacheEnable/9 (hwAcc_ArmCoreMx_DataCacheEnable) @06a9eee0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
hwAcc_ArmCoreMx_InstructionCacheEnable/8 (hwAcc_ArmCoreMx_InstructionCacheEnable) @06a9e9a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
hwAcc_ArmCoreMx_DataCacheCleanByAddr/7 (hwAcc_ArmCoreMx_DataCacheCleanByAddr) @06a9e380
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
hwAcc_ArmCoreMx_InstructionCacheCleanByAddr/6 (hwAcc_ArmCoreMx_InstructionCacheCleanByAddr) @06a9ee00
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: hwAcc_ArmCoreMx_InstructionCacheInvalidateByAddr/4 
hwAcc_ArmCoreMx_DataCacheInvalidateByAddr/5 (hwAcc_ArmCoreMx_DataCacheInvalidateByAddr) @06a9eb60
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
hwAcc_ArmCoreMx_InstructionCacheInvalidateByAddr/4 (hwAcc_ArmCoreMx_InstructionCacheInvalidateByAddr) @06a9e8c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: hwAcc_ArmCoreMx_InstructionCacheCleanByAddr/6 
  Calls: 
hwAcc_ArmCoreMx_DataCacheClean/3 (hwAcc_ArmCoreMx_DataCacheClean) @06a9e540
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
hwAcc_ArmCoreMx_InstructionCacheClean/2 (hwAcc_ArmCoreMx_InstructionCacheClean) @06a9e2a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: hwAcc_ArmCoreMx_InstructionCacheInvalidate/0 
hwAcc_ArmCoreMx_DataCacheInvalidate/1 (hwAcc_ArmCoreMx_DataCacheInvalidate) @06a9e000
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
hwAcc_ArmCoreMx_InstructionCacheInvalidate/0 (hwAcc_ArmCoreMx_InstructionCacheInvalidate) @06a64ee0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: hwAcc_ArmCoreMx_InstructionCacheClean/2 
  Calls: 
hwAcc_ArmCoreMx_DataCacheDisable ()
{
  struct S32_SCB_Type * _1;
  long unsigned int _2;
  struct S32_SCB_Type * _3;
  long unsigned int _4;

  <bb 2> :
  _1 = 3758153728B;
  _2 ={v} _1->CCR;
  _3 = 3758153728B;
  _4 = _2 & 4294901759;
  _3->CCR ={v} _4;
  __asm__ __volatile__(" DSB");
  __asm__ __volatile__(" ISB");
  return;

}


hwAcc_ArmCoreMx_InstructionCacheDisable ()
{
  struct S32_SCB_Type * _1;
  long unsigned int _2;
  struct S32_SCB_Type * _3;
  long unsigned int _4;

  <bb 2> :
  __asm__ __volatile__(" DSB");
  __asm__ __volatile__(" ISB");
  _1 = 3758153728B;
  _2 ={v} _1->CCR;
  _3 = 3758153728B;
  _4 = _2 & 4294836223;
  _3->CCR ={v} _4;
  __asm__ __volatile__(" DSB");
  __asm__ __volatile__(" ISB");
  return;

}


hwAcc_ArmCoreMx_DataCacheEnable ()
{
  struct S32_SCB_Type * _1;
  long unsigned int _2;
  struct S32_SCB_Type * _3;
  long unsigned int _4;

  <bb 2> :
  _1 = 3758153728B;
  _2 ={v} _1->CCR;
  _3 = 3758153728B;
  _4 = _2 | 65536;
  _3->CCR ={v} _4;
  __asm__ __volatile__(" DSB");
  __asm__ __volatile__(" ISB");
  return;

}


hwAcc_ArmCoreMx_InstructionCacheEnable ()
{
  struct S32_SCB_Type * _1;
  long unsigned int _2;
  struct S32_SCB_Type * _3;
  long unsigned int _4;

  <bb 2> :
  _1 = 3758153728B;
  _2 ={v} _1->CCR;
  _3 = 3758153728B;
  _4 = _2 | 131072;
  _3->CCR ={v} _4;
  __asm__ __volatile__(" DSB");
  __asm__ __volatile__(" ISB");
  return;

}


hwAcc_ArmCoreMx_DataCacheCleanByAddr (const boolean enInvalidate, const uint32 addr, const uint32 length)
{
  volatile uint32 * pDataCacheCleanByAddr;
  uint32 endAddr;
  uint32 tmpAddr;
  uint32 cacheLineSize;
  struct S32_SCB_Type * _1;
  long unsigned int _2;
  struct S32_SCB_Type * _3;
  long unsigned int _4;
  struct S32_SCB_Type * _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;

  <bb 2> :
  _1 = 3758153728B;
  _2 ={v} _1->CSSELR;
  _3 = 3758153728B;
  _4 = _2 & 4294967294;
  _3->CSSELR ={v} _4;
  _5 = 3758153728B;
  _6 ={v} _5->CCSIDR;
  _7 = _6 & 7;
  _8 = _7 + 1;
  cacheLineSize_14 = _8 * 16;
  tmpAddr_16 = addr_15(D);
  endAddr_18 = tmpAddr_16 + length_17(D);
  if (enInvalidate_19(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  pDataCacheCleanByAddr_21 = 3758157680B;
  goto <bb 5>; [INV]

  <bb 4> :
  pDataCacheCleanByAddr_20 = 3758157672B;

  <bb 5> :
  # pDataCacheCleanByAddr_10 = PHI <pDataCacheCleanByAddr_21(3), pDataCacheCleanByAddr_20(4)>
  goto <bb 7>; [INV]

  <bb 6> :
  *pDataCacheCleanByAddr_10 ={v} tmpAddr_9;
  __asm__ __volatile__(" DSB");
  __asm__ __volatile__(" ISB");
  tmpAddr_27 = tmpAddr_9 + cacheLineSize_14;

  <bb 7> :
  # tmpAddr_9 = PHI <tmpAddr_16(5), tmpAddr_27(6)>
  if (tmpAddr_9 < endAddr_18)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  __asm__ __volatile__(" DSB");
  __asm__ __volatile__(" ISB");
  return;

}


hwAcc_ArmCoreMx_InstructionCacheCleanByAddr (const boolean enInvalidate, const uint32 addr, const uint32 length)
{
  <bb 2> :
  if (enInvalidate_2(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  hwAcc_ArmCoreMx_InstructionCacheInvalidateByAddr (addr_4(D), length_5(D));

  <bb 4> :
  return;

}


hwAcc_ArmCoreMx_DataCacheInvalidateByAddr (const uint32 addr, const uint32 length)
{
  uint32 endAddr;
  uint32 tmpAddr;
  uint32 cacheLineSize;
  struct S32_SCB_Type * _1;
  long unsigned int _2;
  struct S32_SCB_Type * _3;
  long unsigned int _4;
  struct S32_SCB_Type * _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  struct S32_SCB_Type * _9;

  <bb 2> :
  _1 = 3758153728B;
  _2 ={v} _1->CSSELR;
  _3 = 3758153728B;
  _4 = _2 & 4294967294;
  _3->CSSELR ={v} _4;
  _5 = 3758153728B;
  _6 ={v} _5->CCSIDR;
  _7 = _6 & 7;
  _8 = _7 + 1;
  cacheLineSize_14 = _8 * 16;
  tmpAddr_16 = addr_15(D);
  endAddr_18 = tmpAddr_16 + length_17(D);
  goto <bb 4>; [INV]

  <bb 3> :
  _9 = 3758153728B;
  _9->DCIMVAC ={v} tmpAddr_10;
  __asm__ __volatile__(" DSB");
  __asm__ __volatile__(" ISB");
  tmpAddr_24 = tmpAddr_10 + cacheLineSize_14;

  <bb 4> :
  # tmpAddr_10 = PHI <tmpAddr_16(2), tmpAddr_24(3)>
  if (tmpAddr_10 < endAddr_18)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  __asm__ __volatile__(" DSB");
  __asm__ __volatile__(" ISB");
  return;

}


hwAcc_ArmCoreMx_InstructionCacheInvalidateByAddr (const uint32 addr, const uint32 length)
{
  uint32 endAddr;
  uint32 tmpAddr;
  uint32 cacheLineSize;
  struct S32_SCB_Type * _1;
  long unsigned int _2;
  struct S32_SCB_Type * _3;
  long unsigned int _4;
  struct S32_SCB_Type * _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  struct S32_SCB_Type * _9;

  <bb 2> :
  _1 = 3758153728B;
  _2 ={v} _1->CSSELR;
  _3 = 3758153728B;
  _4 = _2 | 1;
  _3->CSSELR ={v} _4;
  _5 = 3758153728B;
  _6 ={v} _5->CCSIDR;
  _7 = _6 & 7;
  _8 = _7 + 1;
  cacheLineSize_14 = _8 * 16;
  tmpAddr_16 = addr_15(D);
  endAddr_18 = tmpAddr_16 + length_17(D);
  goto <bb 4>; [INV]

  <bb 3> :
  _9 = 3758153728B;
  _9->ICIMVAU ={v} tmpAddr_10;
  __asm__ __volatile__(" DSB");
  __asm__ __volatile__(" ISB");
  tmpAddr_24 = tmpAddr_10 + cacheLineSize_14;

  <bb 4> :
  # tmpAddr_10 = PHI <tmpAddr_16(2), tmpAddr_24(3)>
  if (tmpAddr_10 < endAddr_18)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  __asm__ __volatile__(" DSB");
  __asm__ __volatile__(" ISB");
  return;

}


hwAcc_ArmCoreMx_DataCacheClean (const boolean enInvalidate)
{
  volatile uint32 * pDataCacheClean;
  uint32 clean;
  uint32 wayIdx;
  uint32 setIdx;
  uint32 cacheWaySize;
  uint32 cacheSetSize;
  struct S32_SCB_Type * _1;
  long unsigned int _2;
  struct S32_SCB_Type * _3;
  long unsigned int _4;
  struct S32_SCB_Type * _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  struct S32_SCB_Type * _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;

  <bb 2> :
  _1 = 3758153728B;
  _2 ={v} _1->CSSELR;
  _3 = 3758153728B;
  _4 = _2 & 4294967294;
  _3->CSSELR ={v} _4;
  _5 = 3758153728B;
  _6 ={v} _5->CCSIDR;
  _7 = _6 >> 13;
  _8 = _7 & 32767;
  cacheSetSize_22 = _8 + 1;
  _9 = 3758153728B;
  _10 ={v} _9->CCSIDR;
  _11 = _10 >> 3;
  _12 = _11 & 1023;
  cacheWaySize_23 = _12 + 1;
  if (enInvalidate_24(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  pDataCacheClean_26 = 3758157684B;
  goto <bb 5>; [INV]

  <bb 4> :
  pDataCacheClean_25 = 3758157676B;

  <bb 5> :
  # pDataCacheClean_17 = PHI <pDataCacheClean_26(3), pDataCacheClean_25(4)>
  setIdx_27 = 0;
  goto <bb 10>; [INV]

  <bb 6> :
  wayIdx_30 = 0;
  goto <bb 8>; [INV]

  <bb 7> :
  _13 = setIdx_15 << 5;
  clean_32 = _13 & 16352;
  _14 = wayIdx_16 << 30;
  clean_33 = clean_32 | _14;
  *pDataCacheClean_17 ={v} clean_33;
  __asm__ __volatile__(" DSB");
  __asm__ __volatile__(" ISB");
  wayIdx_37 = wayIdx_16 + 1;

  <bb 8> :
  # wayIdx_16 = PHI <wayIdx_30(6), wayIdx_37(7)>
  if (wayIdx_16 < cacheWaySize_23)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  setIdx_31 = setIdx_15 + 1;

  <bb 10> :
  # setIdx_15 = PHI <setIdx_27(5), setIdx_31(9)>
  if (setIdx_15 < cacheSetSize_22)
    goto <bb 6>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  __asm__ __volatile__(" DSB");
  __asm__ __volatile__(" ISB");
  return;

}


hwAcc_ArmCoreMx_InstructionCacheClean (const boolean enInvalidate)
{
  <bb 2> :
  if (enInvalidate_2(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  hwAcc_ArmCoreMx_InstructionCacheInvalidate ();

  <bb 4> :
  return;

}


hwAcc_ArmCoreMx_DataCacheInvalidate ()
{
  uint32 invalidate;
  uint32 wayIdx;
  uint32 setIdx;
  uint32 cacheWaySize;
  uint32 cacheSetSize;
  struct S32_SCB_Type * _1;
  long unsigned int _2;
  struct S32_SCB_Type * _3;
  long unsigned int _4;
  struct S32_SCB_Type * _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  struct S32_SCB_Type * _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  struct S32_SCB_Type * _15;

  <bb 2> :
  _1 = 3758153728B;
  _2 ={v} _1->CSSELR;
  _3 = 3758153728B;
  _4 = _2 & 4294967294;
  _3->CSSELR ={v} _4;
  _5 = 3758153728B;
  _6 ={v} _5->CCSIDR;
  _7 = _6 >> 13;
  _8 = _7 & 32767;
  cacheSetSize_22 = _8 + 1;
  _9 = 3758153728B;
  _10 ={v} _9->CCSIDR;
  _11 = _10 >> 3;
  _12 = _11 & 1023;
  cacheWaySize_23 = _12 + 1;
  setIdx_24 = 0;
  goto <bb 7>; [INV]

  <bb 3> :
  wayIdx_27 = 0;
  goto <bb 5>; [INV]

  <bb 4> :
  _13 = setIdx_16 << 5;
  invalidate_29 = _13 & 16352;
  _14 = wayIdx_17 << 30;
  invalidate_30 = invalidate_29 | _14;
  _15 = 3758153728B;
  _15->DCISW ={v} invalidate_30;
  __asm__ __volatile__(" DSB");
  __asm__ __volatile__(" ISB");
  wayIdx_34 = wayIdx_17 + 1;

  <bb 5> :
  # wayIdx_17 = PHI <wayIdx_27(3), wayIdx_34(4)>
  if (wayIdx_17 < cacheWaySize_23)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  setIdx_28 = setIdx_16 + 1;

  <bb 7> :
  # setIdx_16 = PHI <setIdx_24(2), setIdx_28(6)>
  if (setIdx_16 < cacheSetSize_22)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  __asm__ __volatile__(" DSB");
  __asm__ __volatile__(" ISB");
  return;

}


hwAcc_ArmCoreMx_InstructionCacheInvalidate ()
{
  struct S32_SCB_Type * _1;
  long unsigned int _2;
  struct S32_SCB_Type * _3;
  long unsigned int _4;
  struct S32_SCB_Type * _5;

  <bb 2> :
  _1 = 3758153728B;
  _2 ={v} _1->CSSELR;
  _3 = 3758153728B;
  _4 = _2 | 1;
  _3->CSSELR ={v} _4;
  _5 = 3758153728B;
  _5->ICIALLU ={v} 0;
  __asm__ __volatile__(" DSB");
  __asm__ __volatile__(" ISB");
  return;

}


