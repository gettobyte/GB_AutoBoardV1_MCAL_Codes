hwAcc_ArmCoreMx_DataCacheDisable ()
{
  <bb 2> :
  _1 = 3758153728B;
  _2 = _1->CCR;
  _3 = 3758153728B;
  _4 = _2 & 4294901759;
  _3->CCR = _4;
  __asm__ __volatile__(" DSB");
  __asm__ __volatile__(" ISB");
  return;

}


hwAcc_ArmCoreMx_InstructionCacheDisable ()
{
  <bb 2> :
  __asm__ __volatile__(" DSB");
  __asm__ __volatile__(" ISB");
  _1 = 3758153728B;
  _2 = _1->CCR;
  _3 = 3758153728B;
  _4 = _2 & 4294836223;
  _3->CCR = _4;
  __asm__ __volatile__(" DSB");
  __asm__ __volatile__(" ISB");
  return;

}


hwAcc_ArmCoreMx_DataCacheEnable ()
{
  <bb 2> :
  _1 = 3758153728B;
  _2 = _1->CCR;
  _3 = 3758153728B;
  _4 = _2 | 65536;
  _3->CCR = _4;
  __asm__ __volatile__(" DSB");
  __asm__ __volatile__(" ISB");
  return;

}


hwAcc_ArmCoreMx_InstructionCacheEnable ()
{
  <bb 2> :
  _1 = 3758153728B;
  _2 = _1->CCR;
  _3 = 3758153728B;
  _4 = _2 | 131072;
  _3->CCR = _4;
  __asm__ __volatile__(" DSB");
  __asm__ __volatile__(" ISB");
  return;

}


hwAcc_ArmCoreMx_DataCacheCleanByAddr (const boolean enInvalidate, const uint32 addr, const uint32 length)
{
  volatile uint32 * pDataCacheCleanByAddr;
  uint32 endAddr;
  uint32 tmpAddr;
  uint32 cacheLineSize;

  <bb 2> :
  _1 = 3758153728B;
  _2 = _1->CSSELR;
  _3 = 3758153728B;
  _4 = _2 & 4294967294;
  _3->CSSELR = _4;
  _5 = 3758153728B;
  _6 = _5->CCSIDR;
  _7 = _6 & 7;
  _8 = _7 + 1;
  cacheLineSize = _8 * 16;
  tmpAddr = addr;
  endAddr = tmpAddr + length;
  if (enInvalidate != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  pDataCacheCleanByAddr = 3758157680B;
  goto <bb 5>; [INV]

  <bb 4> :
  pDataCacheCleanByAddr = 3758157672B;

  <bb 5> :
  goto <bb 7>; [INV]

  <bb 6> :
  *pDataCacheCleanByAddr = tmpAddr;
  __asm__ __volatile__(" DSB");
  __asm__ __volatile__(" ISB");
  tmpAddr = tmpAddr + cacheLineSize;

  <bb 7> :
  if (tmpAddr < endAddr)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  __asm__ __volatile__(" DSB");
  __asm__ __volatile__(" ISB");
  return;

}


hwAcc_ArmCoreMx_InstructionCacheCleanByAddr (const boolean enInvalidate, const uint32 addr, const uint32 length)
{
  <bb 2> :
  if (enInvalidate != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  hwAcc_ArmCoreMx_InstructionCacheInvalidateByAddr (addr, length);

  <bb 4> :
  return;

}


hwAcc_ArmCoreMx_DataCacheInvalidateByAddr (const uint32 addr, const uint32 length)
{
  uint32 endAddr;
  uint32 tmpAddr;
  uint32 cacheLineSize;

  <bb 2> :
  _1 = 3758153728B;
  _2 = _1->CSSELR;
  _3 = 3758153728B;
  _4 = _2 & 4294967294;
  _3->CSSELR = _4;
  _5 = 3758153728B;
  _6 = _5->CCSIDR;
  _7 = _6 & 7;
  _8 = _7 + 1;
  cacheLineSize = _8 * 16;
  tmpAddr = addr;
  endAddr = tmpAddr + length;
  goto <bb 4>; [INV]

  <bb 3> :
  _9 = 3758153728B;
  _9->DCIMVAC = tmpAddr;
  __asm__ __volatile__(" DSB");
  __asm__ __volatile__(" ISB");
  tmpAddr = tmpAddr + cacheLineSize;

  <bb 4> :
  if (tmpAddr < endAddr)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  __asm__ __volatile__(" DSB");
  __asm__ __volatile__(" ISB");
  return;

}


hwAcc_ArmCoreMx_InstructionCacheInvalidateByAddr (const uint32 addr, const uint32 length)
{
  uint32 endAddr;
  uint32 tmpAddr;
  uint32 cacheLineSize;

  <bb 2> :
  _1 = 3758153728B;
  _2 = _1->CSSELR;
  _3 = 3758153728B;
  _4 = _2 | 1;
  _3->CSSELR = _4;
  _5 = 3758153728B;
  _6 = _5->CCSIDR;
  _7 = _6 & 7;
  _8 = _7 + 1;
  cacheLineSize = _8 * 16;
  tmpAddr = addr;
  endAddr = tmpAddr + length;
  goto <bb 4>; [INV]

  <bb 3> :
  _9 = 3758153728B;
  _9->ICIMVAU = tmpAddr;
  __asm__ __volatile__(" DSB");
  __asm__ __volatile__(" ISB");
  tmpAddr = tmpAddr + cacheLineSize;

  <bb 4> :
  if (tmpAddr < endAddr)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  __asm__ __volatile__(" DSB");
  __asm__ __volatile__(" ISB");
  return;

}


hwAcc_ArmCoreMx_DataCacheClean (const boolean enInvalidate)
{
  volatile uint32 * pDataCacheClean;
  uint32 clean;
  uint32 wayIdx;
  uint32 setIdx;
  uint32 cacheWaySize;
  uint32 cacheSetSize;

  <bb 2> :
  _1 = 3758153728B;
  _2 = _1->CSSELR;
  _3 = 3758153728B;
  _4 = _2 & 4294967294;
  _3->CSSELR = _4;
  _5 = 3758153728B;
  _6 = _5->CCSIDR;
  _7 = _6 >> 13;
  _8 = _7 & 32767;
  cacheSetSize = _8 + 1;
  _9 = 3758153728B;
  _10 = _9->CCSIDR;
  _11 = _10 >> 3;
  _12 = _11 & 1023;
  cacheWaySize = _12 + 1;
  if (enInvalidate != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  pDataCacheClean = 3758157684B;
  goto <bb 5>; [INV]

  <bb 4> :
  pDataCacheClean = 3758157676B;

  <bb 5> :
  setIdx = 0;
  goto <bb 10>; [INV]

  <bb 6> :
  wayIdx = 0;
  goto <bb 8>; [INV]

  <bb 7> :
  _13 = setIdx << 5;
  clean = _13 & 16352;
  _14 = wayIdx << 30;
  clean = clean | _14;
  *pDataCacheClean = clean;
  __asm__ __volatile__(" DSB");
  __asm__ __volatile__(" ISB");
  wayIdx = wayIdx + 1;

  <bb 8> :
  if (wayIdx < cacheWaySize)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  setIdx = setIdx + 1;

  <bb 10> :
  if (setIdx < cacheSetSize)
    goto <bb 6>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  __asm__ __volatile__(" DSB");
  __asm__ __volatile__(" ISB");
  return;

}


hwAcc_ArmCoreMx_InstructionCacheClean (const boolean enInvalidate)
{
  <bb 2> :
  if (enInvalidate != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  hwAcc_ArmCoreMx_InstructionCacheInvalidate ();

  <bb 4> :
  return;

}


hwAcc_ArmCoreMx_DataCacheInvalidate ()
{
  uint32 invalidate;
  uint32 wayIdx;
  uint32 setIdx;
  uint32 cacheWaySize;
  uint32 cacheSetSize;

  <bb 2> :
  _1 = 3758153728B;
  _2 = _1->CSSELR;
  _3 = 3758153728B;
  _4 = _2 & 4294967294;
  _3->CSSELR = _4;
  _5 = 3758153728B;
  _6 = _5->CCSIDR;
  _7 = _6 >> 13;
  _8 = _7 & 32767;
  cacheSetSize = _8 + 1;
  _9 = 3758153728B;
  _10 = _9->CCSIDR;
  _11 = _10 >> 3;
  _12 = _11 & 1023;
  cacheWaySize = _12 + 1;
  setIdx = 0;
  goto <bb 7>; [INV]

  <bb 3> :
  wayIdx = 0;
  goto <bb 5>; [INV]

  <bb 4> :
  _13 = setIdx << 5;
  invalidate = _13 & 16352;
  _14 = wayIdx << 30;
  invalidate = invalidate | _14;
  _15 = 3758153728B;
  _15->DCISW = invalidate;
  __asm__ __volatile__(" DSB");
  __asm__ __volatile__(" ISB");
  wayIdx = wayIdx + 1;

  <bb 5> :
  if (wayIdx < cacheWaySize)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  setIdx = setIdx + 1;

  <bb 7> :
  if (setIdx < cacheSetSize)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  __asm__ __volatile__(" DSB");
  __asm__ __volatile__(" ISB");
  return;

}


hwAcc_ArmCoreMx_InstructionCacheInvalidate ()
{
  <bb 2> :
  _1 = 3758153728B;
  _2 = _1->CSSELR;
  _3 = 3758153728B;
  _4 = _2 | 1;
  _3->CSSELR = _4;
  _5 = 3758153728B;
  _5->ICIALLU = 0;
  __asm__ __volatile__(" DSB");
  __asm__ __volatile__(" ISB");
  return;

}


