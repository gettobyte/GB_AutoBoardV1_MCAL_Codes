IPA summary for Clock_Ip_TimeoutExpired/25 is missing.
IPA summary for Clock_Ip_StartTimeout/24 is missing.
IPA summary for Clock_Ip_ReportClockErrors/23 is missing.
IPA summary for Clock_Ip_EnableSircInStandby/22 is missing.
IPA summary for Clock_Ip_DisableSircInStandby/21 is missing.
IPA summary for Clock_Ip_EnableFircInStandby/20 is missing.
IPA summary for Clock_Ip_DisableFircInStandby/19 is missing.
IPA summary for Clock_Ip_SetWaitStates/18 is missing.
IPA summary for Clock_Ip_GetClockFrequency/17 is missing.
IPA summary for Clock_Ip_EnableModuleClock/16 is missing.
IPA summary for Clock_Ip_DisableModuleClock/15 is missing.
IPA summary for Clock_Ip_InstallNotificationsCallback/14 is missing.
IPA summary for Clock_Ip_DisableClockMonitor/13 is missing.
IPA summary for Clock_Ip_DistributePll/12 is missing.
IPA summary for Clock_Ip_GetPllStatus/11 is missing.
IPA summary for Clock_Ip_InitClock/10 is missing.
IPA summary for Clock_Ip_Init/9 is missing.
IPA summary for Clock_Ip_ResetClockConfiguration/8 is missing.
IPA summary for Clock_Ip_CallEmptyCallbacks/7 is missing.
IPA summary for Clock_Ip_UpdateDriverContext/6 is missing.
IPA summary for Clock_Ip_NotificatonsEmptyCallback/5 is missing.

Flattening functions:
Overall time estimate: 0.000000 weighted by profile: 0.000000

Deciding on inlining of small functions.  Starting with size 0.
node context cache: 0 hits, 0 misses, 0 initializations

Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:

Deciding on functions to be inlined into all callers and removing useless speculations:
Overall time estimate: 0.000000 weighted by profile: 0.000000

Why inlining failed?
function not considered for inlining              :        7 calls, 7.000000 freq, 0 count
function body not available                       :       19 calls, 19.000000 freq, 0 count
IPA summary for Clock_Ip_TimeoutExpired/25 is missing.
IPA summary for Clock_Ip_StartTimeout/24 is missing.
IPA summary for Clock_Ip_ReportClockErrors/23 is missing.
IPA summary for Clock_Ip_EnableSircInStandby/22 is missing.
IPA summary for Clock_Ip_DisableSircInStandby/21 is missing.
IPA summary for Clock_Ip_EnableFircInStandby/20 is missing.
IPA summary for Clock_Ip_DisableFircInStandby/19 is missing.
IPA summary for Clock_Ip_SetWaitStates/18 is missing.
IPA summary for Clock_Ip_GetClockFrequency/17 is missing.
IPA summary for Clock_Ip_EnableModuleClock/16 is missing.
IPA summary for Clock_Ip_DisableModuleClock/15 is missing.
IPA summary for Clock_Ip_InstallNotificationsCallback/14 is missing.
IPA summary for Clock_Ip_DisableClockMonitor/13 is missing.
IPA summary for Clock_Ip_DistributePll/12 is missing.
IPA summary for Clock_Ip_GetPllStatus/11 is missing.
IPA summary for Clock_Ip_InitClock/10 is missing.
IPA summary for Clock_Ip_Init/9 is missing.
IPA summary for Clock_Ip_ResetClockConfiguration/8 is missing.
IPA summary for Clock_Ip_CallEmptyCallbacks/7 is missing.
IPA summary for Clock_Ip_UpdateDriverContext/6 is missing.
IPA summary for Clock_Ip_NotificatonsEmptyCallback/5 is missing.
Symbol table:

OsIf_GetElapsed/61 (OsIf_GetElapsed) @0702dd20
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Clock_Ip_TimeoutExpired/25 
  Calls: 
OsIf_MicrosToTicks/60 (OsIf_MicrosToTicks) @0702db60
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Clock_Ip_StartTimeout/24 
  Calls: 
OsIf_GetCounter/59 (OsIf_GetCounter) @0702da80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Clock_Ip_StartTimeout/24 
  Calls: 
EnableSircInStandbyMode/58 (EnableSircInStandbyMode) @0702d7e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Clock_Ip_EnableSircInStandby/22 
  Calls: 
DisableSircInStandbyMode/57 (DisableSircInStandbyMode) @0702d620
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Clock_Ip_DisableSircInStandby/21 
  Calls: 
EnableFircInStandbyMode/56 (EnableFircInStandbyMode) @0702d460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Clock_Ip_EnableFircInStandby/20 
  Calls: 
DisableFircInStandbyMode/55 (DisableFircInStandbyMode) @0702d2a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Clock_Ip_DisableFircInStandby/19 
  Calls: 
Clock_Ip_SetFlashWaitStates/54 (Clock_Ip_SetFlashWaitStates) @0702d0e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Clock_Ip_SetWaitStates/18 
  Calls: 
Clock_Ip_SetRamWaitStates/53 (Clock_Ip_SetRamWaitStates) @0702d000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Clock_Ip_SetWaitStates/18 
  Calls: 
Clock_Ip_GetFreq/52 (Clock_Ip_GetFreq) @06f25c40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Clock_Ip_GetClockFrequency/17 
  Calls: 
Clock_Ip_aeHwDfsName/51 (Clock_Ip_aeHwDfsName) @07026048
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_GetPllStatus/11 (read) Clock_Ip_GetPllStatus/11 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_aeHwPllName/50 (Clock_Ip_aeHwPllName) @0701ef78
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_GetPllStatus/11 (read) Clock_Ip_GetPllStatus/11 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_au8GateCallbackIndex/49 (Clock_Ip_au8GateCallbackIndex) @0701e990
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_DisableModuleClock/15 (read) Clock_Ip_DistributePll/12 (read) Clock_Ip_EnableModuleClock/16 (read) Clock_Ip_InitClock/10 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_aeSourceTypeClockName/48 (Clock_Ip_aeSourceTypeClockName) @0701e900
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_DistributePll/12 (read) Clock_Ip_InitClock/10 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_au8DividerCallbackIndex/47 (Clock_Ip_au8DividerCallbackIndex) @0701e678
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_InitClock/10 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_au8DividerTriggerCallbackIndex/46 (Clock_Ip_au8DividerTriggerCallbackIndex) @0701e5e8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_InitClock/10 (read) Clock_Ip_InitClock/10 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_au8PcfsCallbackIndex/45 (Clock_Ip_au8PcfsCallbackIndex) @0701e558
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_InitClock/10 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_au8IrcoscCallbackIndex/44 (Clock_Ip_au8IrcoscCallbackIndex) @0701e438
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_InitClock/10 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_au8CmuCallbackIndex/43 (Clock_Ip_au8CmuCallbackIndex) @0701e360
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_DistributePll/12 (read) Clock_Ip_DisableClockMonitor/13 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_InitClock/10 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_au8XoscCallbackIndex/42 (Clock_Ip_au8XoscCallbackIndex) @06f29e10
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_ResetClockConfiguration/8 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_InitClock/10 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_au8PllCallbackIndex/41 (Clock_Ip_au8PllCallbackIndex) @06f29d80
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_GetPllStatus/11 (read) Clock_Ip_ResetClockConfiguration/8 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_InitClock/10 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_au8FractionalDividerCallbackIndex/40 (Clock_Ip_au8FractionalDividerCallbackIndex) @06f29cf0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_GetPllStatus/11 (read) Clock_Ip_ResetClockConfiguration/8 (read) Clock_Ip_InitClock/10 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_au8SelectorCallbackIndex/39 (Clock_Ip_au8SelectorCallbackIndex) @06f29c60
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_DistributePll/12 (read) Clock_Ip_ResetClockConfiguration/8 (read) Clock_Ip_InitClock/10 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_au8ClockFeatures/38 (Clock_Ip_au8ClockFeatures) @06f29c18
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_ResetClockConfiguration/8 (read) Clock_Ip_GetPllStatus/11 (read) Clock_Ip_DistributePll/12 (read) Clock_Ip_DisableClockMonitor/13 (read) Clock_Ip_EnableModuleClock/16 (read) Clock_Ip_DistributePll/12 (read) Clock_Ip_ResetClockConfiguration/8 (read) Clock_Ip_ResetClockConfiguration/8 (read) Clock_Ip_ResetClockConfiguration/8 (read) Clock_Ip_GetPllStatus/11 (read) Clock_Ip_DisableModuleClock/15 (read) Clock_Ip_DistributePll/12 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_InitClock/10 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_axPcfsCallbacks/37 (Clock_Ip_axPcfsCallbacks) @06f29750
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_CallEmptyCallbacks/7 (read) Clock_Ip_InitClock/10 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_axSelectorCallbacks/36 (Clock_Ip_axSelectorCallbacks) @06f296c0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_CallEmptyCallbacks/7 (read) Clock_Ip_DistributePll/12 (read) Clock_Ip_ResetClockConfiguration/8 (read) Clock_Ip_InitClock/10 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_axPllCallbacks/35 (Clock_Ip_axPllCallbacks) @06f295e8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_ResetClockConfiguration/8 (read) Clock_Ip_CallEmptyCallbacks/7 (read) Clock_Ip_GetPllStatus/11 (read) Clock_Ip_CallEmptyCallbacks/7 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_InitClock/10 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_axIntOscCallbacks/34 (Clock_Ip_axIntOscCallbacks) @06f29558
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_CallEmptyCallbacks/7 (read) Clock_Ip_InitClock/10 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_axGateCallbacks/33 (Clock_Ip_axGateCallbacks) @06f29480
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_CallEmptyCallbacks/7 (read) Clock_Ip_DistributePll/12 (read) Clock_Ip_DisableModuleClock/15 (read) Clock_Ip_EnableModuleClock/16 (read) Clock_Ip_CallEmptyCallbacks/7 (read) Clock_Ip_InitClock/10 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_axFracDivCallbacks/32 (Clock_Ip_axFracDivCallbacks) @06f293a8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_ResetClockConfiguration/8 (read) Clock_Ip_CallEmptyCallbacks/7 (read) Clock_Ip_GetPllStatus/11 (read) Clock_Ip_CallEmptyCallbacks/7 (read) Clock_Ip_InitClock/10 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_axExtOscCallbacks/31 (Clock_Ip_axExtOscCallbacks) @06f29318
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_CallEmptyCallbacks/7 (read) Clock_Ip_ResetClockConfiguration/8 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_InitClock/10 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_axDividerTriggerCallbacks/30 (Clock_Ip_axDividerTriggerCallbacks) @06f29288
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_CallEmptyCallbacks/7 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_InitClock/10 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_axDividerCallbacks/29 (Clock_Ip_axDividerCallbacks) @06f291f8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_CallEmptyCallbacks/7 (read) Clock_Ip_InitClock/10 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_axCmuCallbacks/28 (Clock_Ip_axCmuCallbacks) @06f29120
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_DisableClockMonitor/13 (read) Clock_Ip_CallEmptyCallbacks/7 (read) Clock_Ip_DistributePll/12 (read) Clock_Ip_CallEmptyCallbacks/7 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_InitClock/10 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_SetExternalSignalFrequency/27 (Clock_Ip_SetExternalSignalFrequency) @06f25460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Clock_Ip_UpdateDriverContext/6 
  Calls: 
Clock_Ip_Command/26 (Clock_Ip_Command) @06f25380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Clock_Ip_EnableSircInStandby/22 Clock_Ip_DisableSircInStandby/21 Clock_Ip_EnableFircInStandby/20 Clock_Ip_DisableFircInStandby/19 Clock_Ip_InitClock/10 Clock_Ip_InitClock/10 Clock_Ip_DistributePll/12 Clock_Ip_UpdateDriverContext/6 
  Calls: 
Clock_Ip_TimeoutExpired/25 (Clock_Ip_TimeoutExpired) @06f1eb60
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: OsIf_GetElapsed/61 
Clock_Ip_StartTimeout/24 (Clock_Ip_StartTimeout) @06f1e620
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: OsIf_MicrosToTicks/60 OsIf_GetCounter/59 
Clock_Ip_ReportClockErrors/23 (Clock_Ip_ReportClockErrors) @06f1e0e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Clock_Ip_pfkNotificationsCallback/4 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call Num speculative call targets: 0
Clock_Ip_EnableSircInStandby/22 (Clock_Ip_EnableSircInStandby) @06f1ed20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Clock_Ip_pxConfig/2 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: EnableSircInStandbyMode/58 Clock_Ip_Command/26 
Clock_Ip_DisableSircInStandby/21 (Clock_Ip_DisableSircInStandby) @06f1ea80
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Clock_Ip_pxConfig/2 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: DisableSircInStandbyMode/57 Clock_Ip_Command/26 
Clock_Ip_EnableFircInStandby/20 (Clock_Ip_EnableFircInStandby) @06f1e7e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Clock_Ip_pxConfig/2 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: EnableFircInStandbyMode/56 Clock_Ip_Command/26 
Clock_Ip_DisableFircInStandby/19 (Clock_Ip_DisableFircInStandby) @06f1e540
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Clock_Ip_pxConfig/2 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: DisableFircInStandbyMode/55 Clock_Ip_Command/26 
Clock_Ip_SetWaitStates/18 (Clock_Ip_SetWaitStates) @06f1e2a0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Clock_Ip_pfkNotificationsCallback/4 (read) Clock_Ip_pfkNotificationsCallback/4 (read) Clock_Ip_pfkNotificationsCallback/4 (read) Clock_Ip_pfkNotificationsCallback/4 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Clock_Ip_InitClock/10 
  Calls: Clock_Ip_SetFlashWaitStates/54 Clock_Ip_SetRamWaitStates/53 
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
Clock_Ip_GetClockFrequency/17 (Clock_Ip_GetClockFrequency) @06f1e000
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Clock_Ip_GetFreq/52 
Clock_Ip_EnableModuleClock/16 (Clock_Ip_EnableModuleClock) @06feab60
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Clock_Ip_au8ClockFeatures/38 (read) Clock_Ip_au8GateCallbackIndex/49 (read) Clock_Ip_axGateCallbacks/33 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call Num speculative call targets: 0
Clock_Ip_DisableModuleClock/15 (Clock_Ip_DisableModuleClock) @06fea620
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Clock_Ip_au8ClockFeatures/38 (read) Clock_Ip_au8GateCallbackIndex/49 (read) Clock_Ip_axGateCallbacks/33 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call Num speculative call targets: 0
Clock_Ip_InstallNotificationsCallback/14 (Clock_Ip_InstallNotificationsCallback) @06fea0e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Clock_Ip_pfkNotificationsCallback/4 (write) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
Clock_Ip_DisableClockMonitor/13 (Clock_Ip_DisableClockMonitor) @06fead20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Clock_Ip_au8ClockFeatures/38 (read) Clock_Ip_au8CmuCallbackIndex/43 (read) Clock_Ip_axCmuCallbacks/28 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call Num speculative call targets: 0
Clock_Ip_DistributePll/12 (Clock_Ip_DistributePll) @06feaa80
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Clock_Ip_pxConfig/2 (read) Clock_Ip_pxConfig/2 (read) Clock_Ip_aeSourceTypeClockName/48 (read) Clock_Ip_pxConfig/2 (read) Clock_Ip_au8ClockFeatures/38 (read) Clock_Ip_au8SelectorCallbackIndex/39 (read) Clock_Ip_axSelectorCallbacks/36 (read) Clock_Ip_pxConfig/2 (read) Clock_Ip_pxConfig/2 (read) DriverContext/1 (read) Clock_Ip_pxConfig/2 (read) Clock_Ip_au8ClockFeatures/38 (read) Clock_Ip_au8GateCallbackIndex/49 (read) Clock_Ip_axGateCallbacks/33 (read) Clock_Ip_pxConfig/2 (read) Clock_Ip_pxConfig/2 (read) Clock_Ip_pxConfig/2 (read) Clock_Ip_au8ClockFeatures/38 (read) Clock_Ip_au8CmuCallbackIndex/43 (read) Clock_Ip_axCmuCallbacks/28 (read) Clock_Ip_pxConfig/2 (read) Clock_Ip_pxConfig/2 (read) Clock_Ip_pxConfig/2 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Clock_Ip_Init/9 
  Calls: Clock_Ip_Command/26 
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
Clock_Ip_GetPllStatus/11 (Clock_Ip_GetPllStatus) @06fea7e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Clock_Ip_aeHwPllName/50 (read) Clock_Ip_au8ClockFeatures/38 (read) Clock_Ip_au8PllCallbackIndex/41 (read) Clock_Ip_axPllCallbacks/35 (read) Clock_Ip_aeHwPllName/50 (read) DriverContext/1 (read) Clock_Ip_aeHwDfsName/51 (read) Clock_Ip_au8ClockFeatures/38 (read) Clock_Ip_au8FractionalDividerCallbackIndex/40 (read) Clock_Ip_axFracDivCallbacks/32 (read) Clock_Ip_aeHwDfsName/51 (read) DriverContext/1 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Clock_Ip_Init/9 
  Calls: 
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
Clock_Ip_InitClock/10 (Clock_Ip_InitClock) @06fea540
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Clock_Ip_pxConfig/2 (write) Clock_Ip_pxConfig/2 (read) Clock_Ip_au8ClockFeatures/38 (read) Clock_Ip_au8CmuCallbackIndex/43 (read) Clock_Ip_axCmuCallbacks/28 (read) Clock_Ip_au8ClockFeatures/38 (read) Clock_Ip_au8IrcoscCallbackIndex/44 (read) Clock_Ip_axIntOscCallbacks/34 (read) Clock_Ip_au8ClockFeatures/38 (read) Clock_Ip_au8XoscCallbackIndex/42 (read) Clock_Ip_axExtOscCallbacks/31 (read) Clock_Ip_au8ClockFeatures/38 (read) Clock_Ip_au8PcfsCallbackIndex/45 (read) Clock_Ip_axPcfsCallbacks/37 (read) Clock_Ip_au8ClockFeatures/38 (read) Clock_Ip_au8DividerTriggerCallbackIndex/46 (read) Clock_Ip_axDividerTriggerCallbacks/30 (read) Clock_Ip_au8ClockFeatures/38 (read) Clock_Ip_au8DividerCallbackIndex/47 (read) Clock_Ip_axDividerCallbacks/29 (read) Clock_Ip_au8ClockFeatures/38 (read) Clock_Ip_au8DividerTriggerCallbackIndex/46 (read) Clock_Ip_axDividerTriggerCallbacks/30 (read) Clock_Ip_au8ClockFeatures/38 (read) Clock_Ip_au8PllCallbackIndex/41 (read) Clock_Ip_axPllCallbacks/35 (read) Clock_Ip_au8ClockFeatures/38 (read) Clock_Ip_au8CmuCallbackIndex/43 (read) Clock_Ip_axCmuCallbacks/28 (read) Clock_Ip_au8ClockFeatures/38 (read) Clock_Ip_au8XoscCallbackIndex/42 (read) Clock_Ip_axExtOscCallbacks/31 (read) Clock_Ip_au8ClockFeatures/38 (read) Clock_Ip_au8PllCallbackIndex/41 (read) Clock_Ip_axPllCallbacks/35 (read) Clock_Ip_au8ClockFeatures/38 (read) Clock_Ip_au8FractionalDividerCallbackIndex/40 (read) Clock_Ip_axFracDivCallbacks/32 (read) DriverContext/1 (write) DriverContext/1 (write) DriverContext/1 (write) DriverContext/1 (write) Clock_Ip_aeSourceTypeClockName/48 (read) Clock_Ip_au8ClockFeatures/38 (read) Clock_Ip_au8SelectorCallbackIndex/39 (read) Clock_Ip_axSelectorCallbacks/36 (read) DriverContext/1 (write) DriverContext/1 (read) Clock_Ip_au8ClockFeatures/38 (read) Clock_Ip_au8GateCallbackIndex/49 (read) Clock_Ip_axGateCallbacks/33 (read) Clock_Ip_au8ClockFeatures/38 (read) Clock_Ip_au8CmuCallbackIndex/43 (read) Clock_Ip_axCmuCallbacks/28 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Clock_Ip_Init/9 
  Calls: Clock_Ip_Command/26 Clock_Ip_SetWaitStates/18 Clock_Ip_UpdateDriverContext/6 Clock_Ip_ResetClockConfiguration/8 Clock_Ip_Command/26 
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
Clock_Ip_Init/9 (Clock_Ip_Init) @06fea2a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: DriverContext/1 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Clock_Ip_DistributePll/12 Clock_Ip_GetPllStatus/11 Clock_Ip_InitClock/10 
Clock_Ip_ResetClockConfiguration/8 (Clock_Ip_ResetClockConfiguration) @06fea000
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Clock_Ip_au8ClockFeatures/38 (read) Clock_Ip_au8SelectorCallbackIndex/39 (read) Clock_Ip_axSelectorCallbacks/36 (read) Clock_Ip_au8ClockFeatures/38 (read) Clock_Ip_au8FractionalDividerCallbackIndex/40 (read) Clock_Ip_axFracDivCallbacks/32 (read) Clock_Ip_au8ClockFeatures/38 (read) Clock_Ip_au8PllCallbackIndex/41 (read) Clock_Ip_axPllCallbacks/35 (read) Clock_Ip_au8ClockFeatures/38 (read) Clock_Ip_au8XoscCallbackIndex/42 (read) Clock_Ip_axExtOscCallbacks/31 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Clock_Ip_InitClock/10 
  Calls: 
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
Clock_Ip_CallEmptyCallbacks/7 (Clock_Ip_CallEmptyCallbacks) @06d27c40
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: FunctionWasCalled/0 (read) FunctionWasCalled/0 (write) Clock_Ip_axCmuCallbacks/28 (read) Clock_Ip_axCmuCallbacks/28 (read) Clock_Ip_axDividerCallbacks/29 (read) Clock_Ip_axDividerTriggerCallbacks/30 (read) Clock_Ip_axExtOscCallbacks/31 (read) Clock_Ip_axFracDivCallbacks/32 (read) Clock_Ip_axFracDivCallbacks/32 (read) Clock_Ip_axGateCallbacks/33 (read) Clock_Ip_axGateCallbacks/33 (read) Clock_Ip_axIntOscCallbacks/34 (read) Clock_Ip_axPllCallbacks/35 (read) Clock_Ip_axPllCallbacks/35 (read) Clock_Ip_axSelectorCallbacks/36 (read) Clock_Ip_axPcfsCallbacks/37 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Clock_Ip_UpdateDriverContext/6 
  Calls: 
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
Clock_Ip_UpdateDriverContext/6 (Clock_Ip_UpdateDriverContext) @06d27e00
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Clock_Ip_pxConfig/2 (read) Clock_Ip_FreqIds/3 (write) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Clock_Ip_InitClock/10 
  Calls: Clock_Ip_CallEmptyCallbacks/7 Clock_Ip_SetExternalSignalFrequency/27 Clock_Ip_Command/26 
Clock_Ip_NotificatonsEmptyCallback/5 (Clock_Ip_NotificatonsEmptyCallback) @06d27b60
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: 
  Referring: Clock_Ip_pfkNotificationsCallback/4 (addr) 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
Clock_Ip_pfkNotificationsCallback/4 (Clock_Ip_pfkNotificationsCallback) @06d26e58
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Clock_Ip_NotificatonsEmptyCallback/5 (addr) 
  Referring: Clock_Ip_InstallNotificationsCallback/14 (write) Clock_Ip_SetWaitStates/18 (read) Clock_Ip_SetWaitStates/18 (read) Clock_Ip_SetWaitStates/18 (read) Clock_Ip_SetWaitStates/18 (read) Clock_Ip_ReportClockErrors/23 (read) 
  Availability: available
  Varpool flags: initialized
Clock_Ip_FreqIds/3 (Clock_Ip_FreqIds) @06d26900
  Type: variable definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: Clock_Ip_UpdateDriverContext/6 (write) 
  Availability: available
  Varpool flags:
Clock_Ip_pxConfig/2 (Clock_Ip_pxConfig) @06d268b8
  Type: variable definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: Clock_Ip_EnableFircInStandby/20 (read) Clock_Ip_DistributePll/12 (read) Clock_Ip_UpdateDriverContext/6 (read) Clock_Ip_DistributePll/12 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_DisableFircInStandby/19 (read) Clock_Ip_DisableSircInStandby/21 (read) Clock_Ip_DistributePll/12 (read) Clock_Ip_DistributePll/12 (read) Clock_Ip_DistributePll/12 (read) Clock_Ip_DistributePll/12 (read) Clock_Ip_DistributePll/12 (read) Clock_Ip_DistributePll/12 (read) Clock_Ip_DistributePll/12 (read) Clock_Ip_DistributePll/12 (read) Clock_Ip_DistributePll/12 (read) Clock_Ip_DistributePll/12 (read) Clock_Ip_InitClock/10 (write) Clock_Ip_EnableSircInStandby/22 (read) 
  Availability: available
  Varpool flags:
DriverContext/1 (DriverContext) @06d26870
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Clock_Ip_DistributePll/12 (read) Clock_Ip_InitClock/10 (read) Clock_Ip_GetPllStatus/11 (read) Clock_Ip_GetPllStatus/11 (read) Clock_Ip_InitClock/10 (write) Clock_Ip_InitClock/10 (write) Clock_Ip_InitClock/10 (write) Clock_Ip_InitClock/10 (write) Clock_Ip_InitClock/10 (write) Clock_Ip_Init/9 (read) 
  Availability: available
  Varpool flags:
FunctionWasCalled/0 (FunctionWasCalled) @06d267e0
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Clock_Ip_CallEmptyCallbacks/7 (read) Clock_Ip_CallEmptyCallbacks/7 (write) 
  Availability: available
  Varpool flags:

;; Function Clock_Ip_NotificatonsEmptyCallback (Clock_Ip_NotificatonsEmptyCallback, funcdef_no=0, decl_uid=6606, cgraph_uid=1, symbol_order=5)

Clock_Ip_NotificatonsEmptyCallback (Clock_Ip_NotificationType Notification, Clock_Ip_NameType ClockName)
{
  <bb 2> :
  return;

}



;; Function Clock_Ip_UpdateDriverContext (Clock_Ip_UpdateDriverContext, funcdef_no=1, decl_uid=6610, cgraph_uid=2, symbol_order=6)

Clock_Ip_UpdateDriverContext (const struct Clock_Ip_ClockConfigType * Config)
{
  uint8 Index;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.0_1;
  const struct Clock_Ip_ExtClkConfigType[<unknown>] * _2;
  int _3;
  <unnamed type> _4;
  const struct Clock_Ip_ExtClkConfigType[<unknown>] * _5;
  int _6;
  long unsigned int _7;
  unsigned char Index.1_8;
  unsigned char _9;
  const struct Clock_Ip_ConfiguredFrequencyType[<unknown>] * _10;
  int _11;
  <unnamed type> _12;
  unsigned char Index.2_13;
  unsigned char _14;

  <bb 2> :
  Clock_Ip_pxConfig.0_1 = Clock_Ip_pxConfig;
  Clock_Ip_Command (Clock_Ip_pxConfig.0_1, 2);
  Index_21 = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  _2 = Config_22(D)->ExtClks;
  _3 = (int) Index_15;
  _4 = (*_2)[_3].Name;
  _5 = Config_22(D)->ExtClks;
  _6 = (int) Index_15;
  _7 = (*_5)[_6].Value;
  Clock_Ip_SetExternalSignalFrequency (_4, _7);
  Index.1_8 = Index_15;
  Index_28 = Index.1_8 + 1;

  <bb 4> :
  # Index_15 = PHI <Index_21(2), Index_28(3)>
  _9 = Config_22(D)->ExtClksCount;
  if (Index_15 < _9)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  Clock_Ip_CallEmptyCallbacks ();
  Index_24 = 1;
  goto <bb 7>; [INV]

  <bb 6> :
  _10 = Config_22(D)->ConfiguredFrequencies;
  _11 = (int) Index_16;
  _12 = (*_10)[_11].Name;
  Clock_Ip_FreqIds[_12] = Index_16;
  Index.2_13 = Index_16;
  Index_26 = Index.2_13 + 1;

  <bb 7> :
  # Index_16 = PHI <Index_24(5), Index_26(6)>
  _14 = Config_22(D)->ConfigureFrequenciesCount;
  if (Index_16 < _14)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  return;

}



;; Function Clock_Ip_CallEmptyCallbacks (Clock_Ip_CallEmptyCallbacks, funcdef_no=2, decl_uid=6612, cgraph_uid=3, symbol_order=7)

Clock_Ip_CallEmptyCallbacks ()
{
  _Bool FunctionWasCalled.3_1;
  _Bool _2;
  void (*<T704>) (const struct Clock_Ip_CmuConfigType *, uint32) _3;
  void (*<T6a3>) (Clock_Ip_NameType) _4;
  void (*<T6b9>) (const struct Clock_Ip_DividerConfigType *) _5;
  void (*<T6c2>) (const struct Clock_Ip_DividerTriggerConfigType *) _6;
  void (*<T6ad>) (const struct Clock_Ip_XoscConfigType *) _7;
  void (*<T6cc>) (const struct Clock_Ip_FracDivConfigType *) _8;
  Clock_Ip_DfsStatusType (*<T6d2>) (Clock_Ip_NameType) _9;
  void (*<T6f6>) (const struct Clock_Ip_GateConfigType *) _10;
  void (*<T6fb>) (Clock_Ip_NameType, boolean) _11;
  void (*<T6a0>) (const struct Clock_Ip_IrcoscConfigType *) _12;
  void (*<T6db>) (const struct Clock_Ip_PllConfigType *) _13;
  Clock_Ip_PllStatusReturnType (*<T6e1>) (Clock_Ip_NameType) _14;
  void (*<T6ec>) (const struct Clock_Ip_SelectorConfigType *) _15;
  void (*<T714>) (const struct Clock_Ip_PcfsConfigType *, uint32) _16;

  <bb 2> :
  FunctionWasCalled.3_1 = FunctionWasCalled;
  _2 = ~FunctionWasCalled.3_1;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  FunctionWasCalled = 1;
  _3 = Clock_Ip_axCmuCallbacks[0].Set;
  _3 (0B, 0);
  _4 = Clock_Ip_axCmuCallbacks[0].Disable;
  _4 (140);
  _5 = Clock_Ip_axDividerCallbacks[0].Set;
  _5 (0B);
  _6 = Clock_Ip_axDividerTriggerCallbacks[0].Configure;
  _6 (0B);
  _7 = Clock_Ip_axExtOscCallbacks[0].Reset;
  _7 (0B);
  _8 = Clock_Ip_axFracDivCallbacks[0].Set;
  _8 (0B);
  _9 = Clock_Ip_axFracDivCallbacks[0].Complete;
  _9 (0);
  _10 = Clock_Ip_axGateCallbacks[0].Set;
  _10 (0B);
  _11 = Clock_Ip_axGateCallbacks[0].Update;
  _11 (140, 0);
  _12 = Clock_Ip_axIntOscCallbacks[0].Set;
  _12 (0B);
  _13 = Clock_Ip_axPllCallbacks[0].Set;
  _13 (0B);
  _14 = Clock_Ip_axPllCallbacks[0].Complete;
  _14 (0);
  _15 = Clock_Ip_axSelectorCallbacks[0].Set;
  _15 (0B);
  _16 = Clock_Ip_axPcfsCallbacks[0].Set;
  _16 (0B, 0);

  <bb 4> :
  return;

}



;; Function Clock_Ip_ResetClockConfiguration (Clock_Ip_ResetClockConfiguration, funcdef_no=3, decl_uid=6608, cgraph_uid=4, symbol_order=8)

Clock_Ip_ResetClockConfiguration (const struct Clock_Ip_ClockConfigType * Config)
{
  uint32 Index;
  uint32 CallbackIndex;
  unsigned char _1;
  const struct Clock_Ip_SelectorConfigType[<unknown>] * _2;
  long unsigned int _3;
  <unnamed type> _4;
  unsigned char _5;
  int _6;
  unsigned char _7;
  void (*<T6ec>) (const struct Clock_Ip_SelectorConfigType *) _8;
  const struct Clock_Ip_SelectorConfigType[<unknown>] * _9;
  long unsigned int _10;
  const struct Clock_Ip_SelectorConfigType * _11;
  unsigned char _12;
  const struct Clock_Ip_FracDivConfigType[<unknown>] * _13;
  long unsigned int _14;
  <unnamed type> _15;
  unsigned char _16;
  int _17;
  unsigned char _18;
  void (*<T6cc>) (const struct Clock_Ip_FracDivConfigType *) _19;
  const struct Clock_Ip_FracDivConfigType[<unknown>] * _20;
  long unsigned int _21;
  const struct Clock_Ip_FracDivConfigType * _22;
  unsigned char _23;
  const struct Clock_Ip_PllConfigType[<unknown>] * _24;
  long unsigned int _25;
  <unnamed type> _26;
  unsigned char _27;
  int _28;
  unsigned char _29;
  void (*<T6db>) (const struct Clock_Ip_PllConfigType *) _30;
  const struct Clock_Ip_PllConfigType[<unknown>] * _31;
  long unsigned int _32;
  const struct Clock_Ip_PllConfigType * _33;
  unsigned char _34;
  const struct Clock_Ip_XoscConfigType[<unknown>] * _35;
  long unsigned int _36;
  <unnamed type> _37;
  unsigned char _38;
  int _39;
  unsigned char _40;
  void (*<T6ad>) (const struct Clock_Ip_XoscConfigType *) _41;
  const struct Clock_Ip_XoscConfigType[<unknown>] * _42;
  long unsigned int _43;
  const struct Clock_Ip_XoscConfigType * _44;

  <bb 2> :
  _1 = Config_54(D)->SelectorsCount;
  Index_55 = (uint32) _1;
  goto <bb 4>; [INV]

  <bb 3> :
  _2 = Config_54(D)->Selectors;
  _3 = Index_45 + 4294967295;
  _4 = (*_2)[_3].Name;
  _5 = Clock_Ip_au8ClockFeatures[_4][1];
  _6 = (int) _5;
  _7 = Clock_Ip_au8SelectorCallbackIndex[_6];
  CallbackIndex_68 = (uint32) _7;
  _8 = Clock_Ip_axSelectorCallbacks[CallbackIndex_68].Reset;
  _9 = Config_54(D)->Selectors;
  _10 = Index_45 + 4294967295;
  _11 = &(*_9)[_10];
  _8 (_11);
  Index_70 = Index_45 + 4294967295;

  <bb 4> :
  # Index_45 = PHI <Index_55(2), Index_70(3)>
  if (Index_45 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  _12 = Config_54(D)->FracDivsCount;
  Index_56 = (uint32) _12;
  goto <bb 7>; [INV]

  <bb 6> :
  _13 = Config_54(D)->FracDivs;
  _14 = Index_46 + 4294967295;
  _15 = (*_13)[_14].Name;
  _16 = Clock_Ip_au8ClockFeatures[_15][1];
  _17 = (int) _16;
  _18 = Clock_Ip_au8FractionalDividerCallbackIndex[_17];
  CallbackIndex_65 = (uint32) _18;
  _19 = Clock_Ip_axFracDivCallbacks[CallbackIndex_65].Reset;
  _20 = Config_54(D)->FracDivs;
  _21 = Index_46 + 4294967295;
  _22 = &(*_20)[_21];
  _19 (_22);
  Index_67 = Index_46 + 4294967295;

  <bb 7> :
  # Index_46 = PHI <Index_56(5), Index_67(6)>
  if (Index_46 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  _23 = Config_54(D)->PllsCount;
  Index_57 = (uint32) _23;
  goto <bb 10>; [INV]

  <bb 9> :
  _24 = Config_54(D)->Plls;
  _25 = Index_47 + 4294967295;
  _26 = (*_24)[_25].Name;
  _27 = Clock_Ip_au8ClockFeatures[_26][1];
  _28 = (int) _27;
  _29 = Clock_Ip_au8PllCallbackIndex[_28];
  CallbackIndex_62 = (uint32) _29;
  _30 = Clock_Ip_axPllCallbacks[CallbackIndex_62].Reset;
  _31 = Config_54(D)->Plls;
  _32 = Index_47 + 4294967295;
  _33 = &(*_31)[_32];
  _30 (_33);
  Index_64 = Index_47 + 4294967295;

  <bb 10> :
  # Index_47 = PHI <Index_57(8), Index_64(9)>
  if (Index_47 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  _34 = Config_54(D)->XoscsCount;
  Index_58 = (uint32) _34;
  goto <bb 13>; [INV]

  <bb 12> :
  _35 = Config_54(D)->Xoscs;
  _36 = Index_48 + 4294967295;
  _37 = (*_35)[_36].Name;
  _38 = Clock_Ip_au8ClockFeatures[_37][1];
  _39 = (int) _38;
  _40 = Clock_Ip_au8XoscCallbackIndex[_39];
  CallbackIndex_59 = (uint32) _40;
  _41 = Clock_Ip_axExtOscCallbacks[CallbackIndex_59].Reset;
  _42 = Config_54(D)->Xoscs;
  _43 = Index_48 + 4294967295;
  _44 = &(*_42)[_43];
  _41 (_44);
  Index_61 = Index_48 + 4294967295;

  <bb 13> :
  # Index_48 = PHI <Index_58(11), Index_61(12)>
  if (Index_48 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 14> :
  return;

}



;; Function Clock_Ip_Init (Clock_Ip_Init, funcdef_no=4, decl_uid=6279, cgraph_uid=5, symbol_order=9)

Clock_Ip_Init (const struct Clock_Ip_ClockConfigType * Config)
{
  Clock_Ip_PllStatusType PllStatus;
  Clock_Ip_StatusType ClockStatus;
  Clock_Ip_StatusType D.6793;
  _Bool _1;
  Clock_Ip_StatusType _13;

  <bb 2> :
  ClockStatus_4 = 1;
  Clock_Ip_InitClock (Config_6(D));
  _1 = DriverContext.ClockTreeIsConsumingPll;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  PllStatus_10 = Clock_Ip_GetPllStatus ();
  if (PllStatus_10 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  Clock_Ip_DistributePll ();
  ClockStatus_12 = 0;
  goto <bb 6>; [INV]

  <bb 5> :
  ClockStatus_8 = 0;

  <bb 6> :
  # ClockStatus_2 = PHI <ClockStatus_12(4), ClockStatus_8(5), ClockStatus_4(3)>
  _13 = ClockStatus_2;

  <bb 7> :
<L5>:
  return _13;

}



;; Function Clock_Ip_InitClock (Clock_Ip_InitClock, funcdef_no=5, decl_uid=6281, cgraph_uid=6, symbol_order=10)

Clock_Ip_InitClock (const struct Clock_Ip_ClockConfigType * Config)
{
  uint32 Index;
  uint32 CallbackIndex;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.4_1;
  const struct Clock_Ip_CmuConfigType[<unknown>] * _2;
  <unnamed type> _3;
  unsigned char _4;
  int _5;
  unsigned char _6;
  void (*<T709>) (const struct Clock_Ip_CmuConfigType *) _7;
  const struct Clock_Ip_CmuConfigType[<unknown>] * _8;
  const struct Clock_Ip_CmuConfigType * _9;
  unsigned char _10;
  long unsigned int _11;
  const struct Clock_Ip_IrcoscConfigType[<unknown>] * _12;
  <unnamed type> _13;
  unsigned char _14;
  int _15;
  unsigned char _16;
  void (*<T6a0>) (const struct Clock_Ip_IrcoscConfigType *) _17;
  const struct Clock_Ip_IrcoscConfigType[<unknown>] * _18;
  const struct Clock_Ip_IrcoscConfigType * _19;
  unsigned char _20;
  long unsigned int _21;
  const struct Clock_Ip_XoscConfigType[<unknown>] * _22;
  <unnamed type> _23;
  unsigned char _24;
  int _25;
  unsigned char _26;
  void (*<T6ad>) (const struct Clock_Ip_XoscConfigType *) _27;
  const struct Clock_Ip_XoscConfigType[<unknown>] * _28;
  const struct Clock_Ip_XoscConfigType * _29;
  unsigned char _30;
  long unsigned int _31;
  const struct Clock_Ip_PcfsConfigType[<unknown>] * _32;
  <unnamed type> _33;
  unsigned char _34;
  int _35;
  unsigned char _36;
  void (*<T714>) (const struct Clock_Ip_PcfsConfigType *, uint32) _37;
  const struct Clock_Ip_PcfsConfigType[<unknown>] * _38;
  const struct Clock_Ip_PcfsConfigType * _39;
  unsigned char _40;
  long unsigned int _41;
  const struct Clock_Ip_DividerTriggerConfigType[<unknown>] * _42;
  <unnamed type> _43;
  unsigned char _44;
  int _45;
  unsigned char _46;
  void (*<T6c2>) (const struct Clock_Ip_DividerTriggerConfigType *) _47;
  const struct Clock_Ip_DividerTriggerConfigType[<unknown>] * _48;
  const struct Clock_Ip_DividerTriggerConfigType * _49;
  unsigned char _50;
  long unsigned int _51;
  const struct Clock_Ip_DividerConfigType[<unknown>] * _52;
  <unnamed type> _53;
  unsigned char _54;
  int _55;
  unsigned char _56;
  void (*<T6b9>) (const struct Clock_Ip_DividerConfigType *) _57;
  const struct Clock_Ip_DividerConfigType[<unknown>] * _58;
  const struct Clock_Ip_DividerConfigType * _59;
  unsigned char _60;
  long unsigned int _61;
  const struct Clock_Ip_DividerTriggerConfigType[<unknown>] * _62;
  <unnamed type> _63;
  unsigned char _64;
  int _65;
  unsigned char _66;
  void (*<T6c2>) (const struct Clock_Ip_DividerTriggerConfigType *) _67;
  const struct Clock_Ip_DividerTriggerConfigType[<unknown>] * _68;
  const struct Clock_Ip_DividerTriggerConfigType * _69;
  unsigned char _70;
  long unsigned int _71;
  const struct Clock_Ip_PllConfigType[<unknown>] * _72;
  <unnamed type> _73;
  unsigned char _74;
  int _75;
  unsigned char _76;
  void (*<T6db>) (const struct Clock_Ip_PllConfigType *) _77;
  const struct Clock_Ip_PllConfigType[<unknown>] * _78;
  const struct Clock_Ip_PllConfigType * _79;
  unsigned char _80;
  long unsigned int _81;
  const struct Clock_Ip_CmuConfigType[<unknown>] * _82;
  <unnamed type> _83;
  unsigned char _84;
  int _85;
  unsigned char _86;
  void (*<T704>) (const struct Clock_Ip_CmuConfigType *, uint32) _87;
  const struct Clock_Ip_CmuConfigType[<unknown>] * _88;
  const struct Clock_Ip_CmuConfigType * _89;
  unsigned char _90;
  long unsigned int _91;
  const struct Clock_Ip_XoscConfigType[<unknown>] * _92;
  <unnamed type> _93;
  unsigned char _94;
  int _95;
  unsigned char _96;
  void (*<T6ad>) (const struct Clock_Ip_XoscConfigType *) _97;
  const struct Clock_Ip_XoscConfigType[<unknown>] * _98;
  const struct Clock_Ip_XoscConfigType * _99;
  unsigned char _100;
  long unsigned int _101;
  const struct Clock_Ip_PllConfigType[<unknown>] * _102;
  <unnamed type> _103;
  unsigned char _104;
  int _105;
  unsigned char _106;
  void (*<T6db>) (const struct Clock_Ip_PllConfigType *) _107;
  const struct Clock_Ip_PllConfigType[<unknown>] * _108;
  const struct Clock_Ip_PllConfigType * _109;
  unsigned char _110;
  long unsigned int _111;
  const struct Clock_Ip_FracDivConfigType[<unknown>] * _112;
  <unnamed type> _113;
  unsigned char _114;
  int _115;
  unsigned char _116;
  void (*<T6cc>) (const struct Clock_Ip_FracDivConfigType *) _117;
  const struct Clock_Ip_FracDivConfigType[<unknown>] * _118;
  const struct Clock_Ip_FracDivConfigType * _119;
  unsigned char _120;
  long unsigned int _121;
  const struct Clock_Ip_SelectorConfigType[<unknown>] * _122;
  <unnamed type> _123;
  <unnamed type> _124;
  const struct Clock_Ip_SelectorConfigType[<unknown>] * _125;
  <unnamed type> _126;
  unsigned char _127;
  int _128;
  unsigned char _129;
  void (*<T6ec>) (const struct Clock_Ip_SelectorConfigType *) _130;
  const struct Clock_Ip_SelectorConfigType[<unknown>] * _131;
  const struct Clock_Ip_SelectorConfigType * _132;
  unsigned char _133;
  long unsigned int _134;
  _Bool _135;
  _Bool _136;
  const struct Clock_Ip_GateConfigType[<unknown>] * _137;
  <unnamed type> _138;
  unsigned char _139;
  int _140;
  unsigned char _141;
  void (*<T6f6>) (const struct Clock_Ip_GateConfigType *) _142;
  const struct Clock_Ip_GateConfigType[<unknown>] * _143;
  const struct Clock_Ip_GateConfigType * _144;
  unsigned char _145;
  long unsigned int _146;
  const struct Clock_Ip_CmuConfigType[<unknown>] * _147;
  <unnamed type> _148;
  unsigned char _149;
  int _150;
  unsigned char _151;
  void (*<T709>) (const struct Clock_Ip_CmuConfigType *) _152;
  const struct Clock_Ip_CmuConfigType[<unknown>] * _153;
  const struct Clock_Ip_CmuConfigType * _154;
  unsigned char _155;
  long unsigned int _156;

  <bb 2> :
  Clock_Ip_pxConfig = Config_191(D);
  Clock_Ip_Command (Config_191(D), 1);
  Clock_Ip_pxConfig.4_1 = Clock_Ip_pxConfig;
  if (Clock_Ip_pxConfig.4_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  Index_194 = 0;
  goto <bb 5>; [INV]

  <bb 4> :
  _2 = Config_191(D)->Cmus;
  _3 = (*_2)[Index_157].Name;
  _4 = Clock_Ip_au8ClockFeatures[_3][1];
  _5 = (int) _4;
  _6 = Clock_Ip_au8CmuCallbackIndex[_5];
  CallbackIndex_195 = (uint32) _6;
  _7 = Clock_Ip_axCmuCallbacks[CallbackIndex_195].Reset;
  _8 = Config_191(D)->Cmus;
  _9 = &(*_8)[Index_157];
  _7 (_9);
  Index_197 = Index_157 + 1;

  <bb 5> :
  # Index_157 = PHI <Index_194(3), Index_197(4)>
  _10 = Config_191(D)->CmusCount;
  _11 = (long unsigned int) _10;
  if (Index_157 < _11)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  Clock_Ip_ResetClockConfiguration (Config_191(D));
  Index_199 = 0;
  goto <bb 8>; [INV]

  <bb 7> :
  _12 = Config_191(D)->Ircoscs;
  _13 = (*_12)[Index_158].Name;
  _14 = Clock_Ip_au8ClockFeatures[_13][1];
  _15 = (int) _14;
  _16 = Clock_Ip_au8IrcoscCallbackIndex[_15];
  CallbackIndex_260 = (uint32) _16;
  _17 = Clock_Ip_axIntOscCallbacks[CallbackIndex_260].Set;
  _18 = Config_191(D)->Ircoscs;
  _19 = &(*_18)[Index_158];
  _17 (_19);
  Index_262 = Index_158 + 1;

  <bb 8> :
  # Index_158 = PHI <Index_199(6), Index_262(7)>
  _20 = Config_191(D)->IrcoscsCount;
  _21 = (long unsigned int) _20;
  if (Index_158 < _21)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  Index_200 = 0;
  goto <bb 11>; [INV]

  <bb 10> :
  _22 = Config_191(D)->Xoscs;
  _23 = (*_22)[Index_159].Name;
  _24 = Clock_Ip_au8ClockFeatures[_23][1];
  _25 = (int) _24;
  _26 = Clock_Ip_au8XoscCallbackIndex[_25];
  CallbackIndex_257 = (uint32) _26;
  _27 = Clock_Ip_axExtOscCallbacks[CallbackIndex_257].Set;
  _28 = Config_191(D)->Xoscs;
  _29 = &(*_28)[Index_159];
  _27 (_29);
  Index_259 = Index_159 + 1;

  <bb 11> :
  # Index_159 = PHI <Index_200(9), Index_259(10)>
  _30 = Config_191(D)->XoscsCount;
  _31 = (long unsigned int) _30;
  if (Index_159 < _31)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  Clock_Ip_UpdateDriverContext (Config_191(D));
  Index_202 = 0;
  goto <bb 14>; [INV]

  <bb 13> :
  _32 = Config_191(D)->Pcfs;
  _33 = (*_32)[Index_160].Name;
  _34 = Clock_Ip_au8ClockFeatures[_33][1];
  _35 = (int) _34;
  _36 = Clock_Ip_au8PcfsCallbackIndex[_35];
  CallbackIndex_254 = (uint32) _36;
  _37 = Clock_Ip_axPcfsCallbacks[CallbackIndex_254].Set;
  _38 = Config_191(D)->Pcfs;
  _39 = &(*_38)[Index_160];
  _37 (_39, Index_160);
  Index_256 = Index_160 + 1;

  <bb 14> :
  # Index_160 = PHI <Index_202(12), Index_256(13)>
  _40 = Config_191(D)->PcfsCount;
  _41 = (long unsigned int) _40;
  if (Index_160 < _41)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  Index_203 = 0;
  goto <bb 17>; [INV]

  <bb 16> :
  _42 = Config_191(D)->DividerTriggers;
  _43 = (*_42)[Index_161].Name;
  _44 = Clock_Ip_au8ClockFeatures[_43][1];
  _45 = (int) _44;
  _46 = Clock_Ip_au8DividerTriggerCallbackIndex[_45];
  CallbackIndex_251 = (uint32) _46;
  _47 = Clock_Ip_axDividerTriggerCallbacks[CallbackIndex_251].Configure;
  _48 = Config_191(D)->DividerTriggers;
  _49 = &(*_48)[Index_161];
  _47 (_49);
  Index_253 = Index_161 + 1;

  <bb 17> :
  # Index_161 = PHI <Index_203(15), Index_253(16)>
  _50 = Config_191(D)->DividerTriggersCount;
  _51 = (long unsigned int) _50;
  if (Index_161 < _51)
    goto <bb 16>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 18> :
  Index_204 = 0;
  goto <bb 20>; [INV]

  <bb 19> :
  _52 = Config_191(D)->Dividers;
  _53 = (*_52)[Index_162].Name;
  _54 = Clock_Ip_au8ClockFeatures[_53][1];
  _55 = (int) _54;
  _56 = Clock_Ip_au8DividerCallbackIndex[_55];
  CallbackIndex_248 = (uint32) _56;
  _57 = Clock_Ip_axDividerCallbacks[CallbackIndex_248].Set;
  _58 = Config_191(D)->Dividers;
  _59 = &(*_58)[Index_162];
  _57 (_59);
  Index_250 = Index_162 + 1;

  <bb 20> :
  # Index_162 = PHI <Index_204(18), Index_250(19)>
  _60 = Config_191(D)->DividersCount;
  _61 = (long unsigned int) _60;
  if (Index_162 < _61)
    goto <bb 19>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 21> :
  Index_205 = 0;
  goto <bb 23>; [INV]

  <bb 22> :
  _62 = Config_191(D)->DividerTriggers;
  _63 = (*_62)[Index_163].Name;
  _64 = Clock_Ip_au8ClockFeatures[_63][1];
  _65 = (int) _64;
  _66 = Clock_Ip_au8DividerTriggerCallbackIndex[_65];
  CallbackIndex_245 = (uint32) _66;
  _67 = Clock_Ip_axDividerTriggerCallbacks[CallbackIndex_245].TriggerUpdate;
  _68 = Config_191(D)->DividerTriggers;
  _69 = &(*_68)[Index_163];
  _67 (_69);
  Index_247 = Index_163 + 1;

  <bb 23> :
  # Index_163 = PHI <Index_205(21), Index_247(22)>
  _70 = Config_191(D)->DividerTriggersCount;
  _71 = (long unsigned int) _70;
  if (Index_163 < _71)
    goto <bb 22>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 24> :
  Index_206 = 0;
  goto <bb 26>; [INV]

  <bb 25> :
  _72 = Config_191(D)->Plls;
  _73 = (*_72)[Index_164].Name;
  _74 = Clock_Ip_au8ClockFeatures[_73][1];
  _75 = (int) _74;
  _76 = Clock_Ip_au8PllCallbackIndex[_75];
  CallbackIndex_242 = (uint32) _76;
  _77 = Clock_Ip_axPllCallbacks[CallbackIndex_242].Set;
  _78 = Config_191(D)->Plls;
  _79 = &(*_78)[Index_164];
  _77 (_79);
  Index_244 = Index_164 + 1;

  <bb 26> :
  # Index_164 = PHI <Index_206(24), Index_244(25)>
  _80 = Config_191(D)->PllsCount;
  _81 = (long unsigned int) _80;
  if (Index_164 < _81)
    goto <bb 25>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 27> :
  Index_207 = 0;
  goto <bb 29>; [INV]

  <bb 28> :
  _82 = Config_191(D)->Cmus;
  _83 = (*_82)[Index_165].Name;
  _84 = Clock_Ip_au8ClockFeatures[_83][1];
  _85 = (int) _84;
  _86 = Clock_Ip_au8CmuCallbackIndex[_85];
  CallbackIndex_239 = (uint32) _86;
  _87 = Clock_Ip_axCmuCallbacks[CallbackIndex_239].Set;
  _88 = Config_191(D)->Cmus;
  _89 = &(*_88)[Index_165];
  _87 (_89, Index_165);
  Index_241 = Index_165 + 1;

  <bb 29> :
  # Index_165 = PHI <Index_207(27), Index_241(28)>
  _90 = Config_191(D)->CmusCount;
  _91 = (long unsigned int) _90;
  if (Index_165 < _91)
    goto <bb 28>; [INV]
  else
    goto <bb 30>; [INV]

  <bb 30> :
  Index_208 = 0;
  goto <bb 32>; [INV]

  <bb 31> :
  _92 = Config_191(D)->Xoscs;
  _93 = (*_92)[Index_166].Name;
  _94 = Clock_Ip_au8ClockFeatures[_93][1];
  _95 = (int) _94;
  _96 = Clock_Ip_au8XoscCallbackIndex[_95];
  CallbackIndex_236 = (uint32) _96;
  _97 = Clock_Ip_axExtOscCallbacks[CallbackIndex_236].Complete;
  _98 = Config_191(D)->Xoscs;
  _99 = &(*_98)[Index_166];
  _97 (_99);
  Index_238 = Index_166 + 1;

  <bb 32> :
  # Index_166 = PHI <Index_208(30), Index_238(31)>
  _100 = Config_191(D)->XoscsCount;
  _101 = (long unsigned int) _100;
  if (Index_166 < _101)
    goto <bb 31>; [INV]
  else
    goto <bb 33>; [INV]

  <bb 33> :
  Index_209 = 0;
  goto <bb 35>; [INV]

  <bb 34> :
  _102 = Config_191(D)->Plls;
  _103 = (*_102)[Index_167].Name;
  _104 = Clock_Ip_au8ClockFeatures[_103][1];
  _105 = (int) _104;
  _106 = Clock_Ip_au8PllCallbackIndex[_105];
  CallbackIndex_233 = (uint32) _106;
  _107 = Clock_Ip_axPllCallbacks[CallbackIndex_233].Enable;
  _108 = Config_191(D)->Plls;
  _109 = &(*_108)[Index_167];
  _107 (_109);
  Index_235 = Index_167 + 1;

  <bb 35> :
  # Index_167 = PHI <Index_209(33), Index_235(34)>
  _110 = Config_191(D)->PllsCount;
  _111 = (long unsigned int) _110;
  if (Index_167 < _111)
    goto <bb 34>; [INV]
  else
    goto <bb 36>; [INV]

  <bb 36> :
  Index_210 = 0;
  goto <bb 38>; [INV]

  <bb 37> :
  _112 = Config_191(D)->FracDivs;
  _113 = (*_112)[Index_168].Name;
  _114 = Clock_Ip_au8ClockFeatures[_113][1];
  _115 = (int) _114;
  _116 = Clock_Ip_au8FractionalDividerCallbackIndex[_115];
  CallbackIndex_230 = (uint32) _116;
  _117 = Clock_Ip_axFracDivCallbacks[CallbackIndex_230].Set;
  _118 = Config_191(D)->FracDivs;
  _119 = &(*_118)[Index_168];
  _117 (_119);
  Index_232 = Index_168 + 1;

  <bb 38> :
  # Index_168 = PHI <Index_210(36), Index_232(37)>
  _120 = Config_191(D)->FracDivsCount;
  _121 = (long unsigned int) _120;
  if (Index_168 < _121)
    goto <bb 37>; [INV]
  else
    goto <bb 39>; [INV]

  <bb 39> :
  DriverContext.ClockTreeIsConsumingPll = 0;
  DriverContext.WaitStatesAreSupported = 0;
  DriverContext.HwPllsNo = 1;
  DriverContext.HwDfsNo = 0;
  Clock_Ip_SetWaitStates ();
  Index_216 = 0;
  goto <bb 44>; [INV]

  <bb 40> :
  _122 = Config_191(D)->Selectors;
  _123 = (*_122)[Index_169].Value;
  _124 = Clock_Ip_aeSourceTypeClockName[_123];
  if (_124 != 3)
    goto <bb 41>; [INV]
  else
    goto <bb 42>; [INV]

  <bb 41> :
  _125 = Config_191(D)->Selectors;
  _126 = (*_125)[Index_169].Name;
  _127 = Clock_Ip_au8ClockFeatures[_126][1];
  _128 = (int) _127;
  _129 = Clock_Ip_au8SelectorCallbackIndex[_128];
  CallbackIndex_227 = (uint32) _129;
  _130 = Clock_Ip_axSelectorCallbacks[CallbackIndex_227].Set;
  _131 = Config_191(D)->Selectors;
  _132 = &(*_131)[Index_169];
  _130 (_132);
  goto <bb 43>; [INV]

  <bb 42> :
  DriverContext.ClockTreeIsConsumingPll = 1;

  <bb 43> :
  Index_229 = Index_169 + 1;

  <bb 44> :
  # Index_169 = PHI <Index_216(39), Index_229(43)>
  _133 = Config_191(D)->SelectorsCount;
  _134 = (long unsigned int) _133;
  if (Index_169 < _134)
    goto <bb 40>; [INV]
  else
    goto <bb 45>; [INV]

  <bb 45> :
  _135 = DriverContext.ClockTreeIsConsumingPll;
  _136 = ~_135;
  if (_136 != 0)
    goto <bb 46>; [INV]
  else
    goto <bb 53>; [INV]

  <bb 46> :
  Index_217 = 0;
  goto <bb 48>; [INV]

  <bb 47> :
  _137 = Config_191(D)->Gates;
  _138 = (*_137)[Index_170].Name;
  _139 = Clock_Ip_au8ClockFeatures[_138][1];
  _140 = (int) _139;
  _141 = Clock_Ip_au8GateCallbackIndex[_140];
  CallbackIndex_223 = (uint32) _141;
  _142 = Clock_Ip_axGateCallbacks[CallbackIndex_223].Set;
  _143 = Config_191(D)->Gates;
  _144 = &(*_143)[Index_170];
  _142 (_144);
  Index_225 = Index_170 + 1;

  <bb 48> :
  # Index_170 = PHI <Index_217(46), Index_225(47)>
  _145 = Config_191(D)->GatesCount;
  _146 = (long unsigned int) _145;
  if (Index_170 < _146)
    goto <bb 47>; [INV]
  else
    goto <bb 49>; [INV]

  <bb 49> :
  Index_218 = 0;
  goto <bb 51>; [INV]

  <bb 50> :
  _147 = Config_191(D)->Cmus;
  _148 = (*_147)[Index_171].Name;
  _149 = Clock_Ip_au8ClockFeatures[_148][1];
  _150 = (int) _149;
  _151 = Clock_Ip_au8CmuCallbackIndex[_150];
  CallbackIndex_220 = (uint32) _151;
  _152 = Clock_Ip_axCmuCallbacks[CallbackIndex_220].Enable;
  _153 = Config_191(D)->Cmus;
  _154 = &(*_153)[Index_171];
  _152 (_154);
  Index_222 = Index_171 + 1;

  <bb 51> :
  # Index_171 = PHI <Index_218(49), Index_222(50)>
  _155 = Config_191(D)->CmusCount;
  _156 = (long unsigned int) _155;
  if (Index_171 < _156)
    goto <bb 50>; [INV]
  else
    goto <bb 52>; [INV]

  <bb 52> :
  Clock_Ip_Command (Config_191(D), 4);

  <bb 53> :
  return;

}



;; Function Clock_Ip_GetPllStatus (Clock_Ip_GetPllStatus, funcdef_no=6, decl_uid=6283, cgraph_uid=7, symbol_order=11)

Clock_Ip_GetPllStatus ()
{
  uint32 CallbackIndex;
  uint32 Index;
  Clock_Ip_DfsStatusType DfsStatus;
  Clock_Ip_PllStatusReturnType PllStatus;
  Clock_Ip_PllStatusType RetValue;
  Clock_Ip_PllStatusType D.6811;
  <unnamed type> _1;
  unsigned char _2;
  int _3;
  unsigned char _4;
  Clock_Ip_PllStatusReturnType (*<T6e1>) (Clock_Ip_NameType) _5;
  <unnamed type> _6;
  unsigned char _7;
  long unsigned int _8;
  <unnamed type> _9;
  unsigned char _10;
  int _11;
  unsigned char _12;
  Clock_Ip_DfsStatusType (*<T6d2>) (Clock_Ip_NameType) _13;
  <unnamed type> _14;
  unsigned char _15;
  long unsigned int _16;
  Clock_Ip_PllStatusType _42;

  <bb 2> :
  RetValue_27 = 2;
  Index_28 = 0;
  goto <bb 8>; [INV]

  <bb 3> :
  _1 = Clock_Ip_aeHwPllName[Index_21];
  _2 = Clock_Ip_au8ClockFeatures[_1][1];
  _3 = (int) _2;
  _4 = Clock_Ip_au8PllCallbackIndex[_3];
  CallbackIndex_30 = (uint32) _4;
  _5 = Clock_Ip_axPllCallbacks[CallbackIndex_30].Complete;
  _6 = Clock_Ip_aeHwPllName[Index_21];
  PllStatus_32 = _5 (_6);
  if (PllStatus_32 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  RetValue_35 = 1;
  goto <bb 9>; [INV]

  <bb 5> :
  if (PllStatus_32 == 2)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  RetValue_33 = 0;

  <bb 7> :
  # RetValue_17 = PHI <RetValue_18(5), RetValue_33(6)>
  Index_34 = Index_21 + 1;

  <bb 8> :
  # RetValue_18 = PHI <RetValue_27(2), RetValue_17(7)>
  # Index_21 = PHI <Index_28(2), Index_34(7)>
  _7 = DriverContext.HwPllsNo;
  _8 = (long unsigned int) _7;
  if (Index_21 < _8)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  # RetValue_19 = PHI <RetValue_35(4), RetValue_18(8)>
  if (RetValue_19 == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 10> :
  Index_36 = 0;
  goto <bb 14>; [INV]

  <bb 11> :
  _9 = Clock_Ip_aeHwDfsName[Index_22];
  _10 = Clock_Ip_au8ClockFeatures[_9][1];
  _11 = (int) _10;
  _12 = Clock_Ip_au8FractionalDividerCallbackIndex[_11];
  CallbackIndex_37 = (uint32) _12;
  _13 = Clock_Ip_axFracDivCallbacks[CallbackIndex_37].Complete;
  _14 = Clock_Ip_aeHwDfsName[Index_22];
  DfsStatus_39 = _13 (_14);
  if (DfsStatus_39 == 1)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  RetValue_41 = 1;
  goto <bb 15>; [INV]

  <bb 13> :
  Index_40 = Index_22 + 1;

  <bb 14> :
  # Index_22 = PHI <Index_36(10), Index_40(13)>
  _15 = DriverContext.HwDfsNo;
  _16 = (long unsigned int) _15;
  if (Index_22 < _16)
    goto <bb 11>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  # RetValue_20 = PHI <RetValue_19(9), RetValue_41(12), RetValue_19(14)>
  _42 = RetValue_20;

  <bb 16> :
<L14>:
  return _42;

}



;; Function Clock_Ip_DistributePll (Clock_Ip_DistributePll, funcdef_no=7, decl_uid=6285, cgraph_uid=8, symbol_order=12)

Clock_Ip_DistributePll ()
{
  uint32 CallbackIndex;
  uint32 Index;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.5_1;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.6_2;
  const struct Clock_Ip_SelectorConfigType[<unknown>] * _3;
  <unnamed type> _4;
  <unnamed type> _5;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.7_6;
  const struct Clock_Ip_SelectorConfigType[<unknown>] * _7;
  <unnamed type> _8;
  unsigned char _9;
  int _10;
  unsigned char _11;
  void (*<T6ec>) (const struct Clock_Ip_SelectorConfigType *) _12;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.8_13;
  const struct Clock_Ip_SelectorConfigType[<unknown>] * _14;
  const struct Clock_Ip_SelectorConfigType * _15;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.9_16;
  unsigned char _17;
  long unsigned int _18;
  _Bool _19;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.10_20;
  const struct Clock_Ip_GateConfigType[<unknown>] * _21;
  <unnamed type> _22;
  unsigned char _23;
  int _24;
  unsigned char _25;
  void (*<T6f6>) (const struct Clock_Ip_GateConfigType *) _26;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.11_27;
  const struct Clock_Ip_GateConfigType[<unknown>] * _28;
  const struct Clock_Ip_GateConfigType * _29;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.12_30;
  unsigned char _31;
  long unsigned int _32;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.13_33;
  const struct Clock_Ip_CmuConfigType[<unknown>] * _34;
  <unnamed type> _35;
  unsigned char _36;
  int _37;
  unsigned char _38;
  void (*<T709>) (const struct Clock_Ip_CmuConfigType *) _39;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.14_40;
  const struct Clock_Ip_CmuConfigType[<unknown>] * _41;
  const struct Clock_Ip_CmuConfigType * _42;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.15_43;
  unsigned char _44;
  long unsigned int _45;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.16_46;

  <bb 2> :
  Clock_Ip_pxConfig.5_1 = Clock_Ip_pxConfig;
  if (Clock_Ip_pxConfig.5_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 3> :
  Index_56 = 0;
  goto <bb 7>; [INV]

  <bb 4> :
  Clock_Ip_pxConfig.6_2 = Clock_Ip_pxConfig;
  _3 = Clock_Ip_pxConfig.6_2->Selectors;
  _4 = (*_3)[Index_47].Value;
  _5 = Clock_Ip_aeSourceTypeClockName[_4];
  if (_5 == 3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Clock_Ip_pxConfig.7_6 = Clock_Ip_pxConfig;
  _7 = Clock_Ip_pxConfig.7_6->Selectors;
  _8 = (*_7)[Index_47].Name;
  _9 = Clock_Ip_au8ClockFeatures[_8][1];
  _10 = (int) _9;
  _11 = Clock_Ip_au8SelectorCallbackIndex[_10];
  CallbackIndex_66 = (uint32) _11;
  _12 = Clock_Ip_axSelectorCallbacks[CallbackIndex_66].Set;
  Clock_Ip_pxConfig.8_13 = Clock_Ip_pxConfig;
  _14 = Clock_Ip_pxConfig.8_13->Selectors;
  _15 = &(*_14)[Index_47];
  _12 (_15);

  <bb 6> :
  Index_68 = Index_47 + 1;

  <bb 7> :
  # Index_47 = PHI <Index_56(3), Index_68(6)>
  Clock_Ip_pxConfig.9_16 = Clock_Ip_pxConfig;
  _17 = Clock_Ip_pxConfig.9_16->SelectorsCount;
  _18 = (long unsigned int) _17;
  if (Index_47 < _18)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  _19 = DriverContext.ClockTreeIsConsumingPll;
  if (_19 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 9> :
  Index_57 = 0;
  goto <bb 11>; [INV]

  <bb 10> :
  Clock_Ip_pxConfig.10_20 = Clock_Ip_pxConfig;
  _21 = Clock_Ip_pxConfig.10_20->Gates;
  _22 = (*_21)[Index_48].Name;
  _23 = Clock_Ip_au8ClockFeatures[_22][1];
  _24 = (int) _23;
  _25 = Clock_Ip_au8GateCallbackIndex[_24];
  CallbackIndex_63 = (uint32) _25;
  _26 = Clock_Ip_axGateCallbacks[CallbackIndex_63].Set;
  Clock_Ip_pxConfig.11_27 = Clock_Ip_pxConfig;
  _28 = Clock_Ip_pxConfig.11_27->Gates;
  _29 = &(*_28)[Index_48];
  _26 (_29);
  Index_65 = Index_48 + 1;

  <bb 11> :
  # Index_48 = PHI <Index_57(9), Index_65(10)>
  Clock_Ip_pxConfig.12_30 = Clock_Ip_pxConfig;
  _31 = Clock_Ip_pxConfig.12_30->GatesCount;
  _32 = (long unsigned int) _31;
  if (Index_48 < _32)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  Index_58 = 0;
  goto <bb 14>; [INV]

  <bb 13> :
  Clock_Ip_pxConfig.13_33 = Clock_Ip_pxConfig;
  _34 = Clock_Ip_pxConfig.13_33->Cmus;
  _35 = (*_34)[Index_49].Name;
  _36 = Clock_Ip_au8ClockFeatures[_35][1];
  _37 = (int) _36;
  _38 = Clock_Ip_au8CmuCallbackIndex[_37];
  CallbackIndex_60 = (uint32) _38;
  _39 = Clock_Ip_axCmuCallbacks[CallbackIndex_60].Enable;
  Clock_Ip_pxConfig.14_40 = Clock_Ip_pxConfig;
  _41 = Clock_Ip_pxConfig.14_40->Cmus;
  _42 = &(*_41)[Index_49];
  _39 (_42);
  Index_62 = Index_49 + 1;

  <bb 14> :
  # Index_49 = PHI <Index_58(12), Index_62(13)>
  Clock_Ip_pxConfig.15_43 = Clock_Ip_pxConfig;
  _44 = Clock_Ip_pxConfig.15_43->CmusCount;
  _45 = (long unsigned int) _44;
  if (Index_49 < _45)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  Clock_Ip_pxConfig.16_46 = Clock_Ip_pxConfig;
  Clock_Ip_Command (Clock_Ip_pxConfig.16_46, 4);

  <bb 16> :
  return;

}



;; Function Clock_Ip_DisableClockMonitor (Clock_Ip_DisableClockMonitor, funcdef_no=8, decl_uid=6289, cgraph_uid=9, symbol_order=13)

Clock_Ip_DisableClockMonitor (Clock_Ip_NameType ClockName)
{
  uint32 CallbackIndex;
  unsigned char _1;
  int _2;
  unsigned char _3;
  void (*<T6a3>) (Clock_Ip_NameType) _4;

  <bb 2> :
  _1 = Clock_Ip_au8ClockFeatures[ClockName_6(D)][1];
  _2 = (int) _1;
  _3 = Clock_Ip_au8CmuCallbackIndex[_2];
  CallbackIndex_7 = (uint32) _3;
  _4 = Clock_Ip_axCmuCallbacks[CallbackIndex_7].Disable;
  _4 (ClockName_6(D));
  return;

}



;; Function Clock_Ip_InstallNotificationsCallback (Clock_Ip_InstallNotificationsCallback, funcdef_no=9, decl_uid=6287, cgraph_uid=10, symbol_order=14)

Clock_Ip_InstallNotificationsCallback (void (*Clock_Ip_NotificationsCallbackType) (Clock_Ip_NotificationType, Clock_Ip_NameType) Callback)
{
  <bb 2> :
  Clock_Ip_pfkNotificationsCallback = Callback_2(D);
  return;

}



;; Function Clock_Ip_DisableModuleClock (Clock_Ip_DisableModuleClock, funcdef_no=10, decl_uid=6291, cgraph_uid=11, symbol_order=15)

Clock_Ip_DisableModuleClock (Clock_Ip_NameType ClockName)
{
  uint32 CallbackIndex;
  unsigned char _1;
  int _2;
  unsigned char _3;
  void (*<T6fb>) (Clock_Ip_NameType, boolean) _4;

  <bb 2> :
  _1 = Clock_Ip_au8ClockFeatures[ClockName_6(D)][1];
  _2 = (int) _1;
  _3 = Clock_Ip_au8GateCallbackIndex[_2];
  CallbackIndex_7 = (uint32) _3;
  _4 = Clock_Ip_axGateCallbacks[CallbackIndex_7].Update;
  _4 (ClockName_6(D), 1);
  return;

}



;; Function Clock_Ip_EnableModuleClock (Clock_Ip_EnableModuleClock, funcdef_no=11, decl_uid=6293, cgraph_uid=12, symbol_order=16)

Clock_Ip_EnableModuleClock (Clock_Ip_NameType ClockName)
{
  uint32 CallbackIndex;
  unsigned char _1;
  int _2;
  unsigned char _3;
  void (*<T6fb>) (Clock_Ip_NameType, boolean) _4;

  <bb 2> :
  _1 = Clock_Ip_au8ClockFeatures[ClockName_6(D)][1];
  _2 = (int) _1;
  _3 = Clock_Ip_au8GateCallbackIndex[_2];
  CallbackIndex_7 = (uint32) _3;
  _4 = Clock_Ip_axGateCallbacks[CallbackIndex_7].Update;
  _4 (ClockName_6(D), 0);
  return;

}



;; Function Clock_Ip_GetClockFrequency (Clock_Ip_GetClockFrequency, funcdef_no=12, decl_uid=6295, cgraph_uid=13, symbol_order=17)

Clock_Ip_GetClockFrequency (Clock_Ip_NameType ClockName)
{
  uint32 D.6819;
  uint32 _4;

  <bb 2> :
  _4 = Clock_Ip_GetFreq (ClockName_2(D));

  <bb 3> :
<L0>:
  return _4;

}



;; Function Clock_Ip_SetWaitStates (Clock_Ip_SetWaitStates, funcdef_no=13, decl_uid=6614, cgraph_uid=14, symbol_order=18)

Clock_Ip_SetWaitStates ()
{
  void (*<T551>) (Clock_Ip_NotificationType, Clock_Ip_NameType) Clock_Ip_pfkNotificationsCallback.17_1;
  void (*<T551>) (Clock_Ip_NotificationType, Clock_Ip_NameType) Clock_Ip_pfkNotificationsCallback.18_2;
  void (*<T551>) (Clock_Ip_NotificationType, Clock_Ip_NameType) Clock_Ip_pfkNotificationsCallback.19_3;
  void (*<T551>) (Clock_Ip_NotificationType, Clock_Ip_NameType) Clock_Ip_pfkNotificationsCallback.20_4;

  <bb 2> :
  Clock_Ip_pfkNotificationsCallback.17_1 = Clock_Ip_pfkNotificationsCallback;
  Clock_Ip_pfkNotificationsCallback.17_1 (4, 140);
  Clock_Ip_SetRamWaitStates ();
  Clock_Ip_pfkNotificationsCallback.18_2 = Clock_Ip_pfkNotificationsCallback;
  Clock_Ip_pfkNotificationsCallback.18_2 (5, 140);
  Clock_Ip_pfkNotificationsCallback.19_3 = Clock_Ip_pfkNotificationsCallback;
  Clock_Ip_pfkNotificationsCallback.19_3 (6, 140);
  Clock_Ip_SetFlashWaitStates ();
  Clock_Ip_pfkNotificationsCallback.20_4 = Clock_Ip_pfkNotificationsCallback;
  Clock_Ip_pfkNotificationsCallback.20_4 (7, 140);
  return;

}



;; Function Clock_Ip_DisableFircInStandby (Clock_Ip_DisableFircInStandby, funcdef_no=14, decl_uid=6297, cgraph_uid=15, symbol_order=19)

Clock_Ip_DisableFircInStandby ()
{
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.21_1;

  <bb 2> :
  Clock_Ip_pxConfig.21_1 = Clock_Ip_pxConfig;
  Clock_Ip_Command (Clock_Ip_pxConfig.21_1, 2);
  DisableFircInStandbyMode ();
  return;

}



;; Function Clock_Ip_EnableFircInStandby (Clock_Ip_EnableFircInStandby, funcdef_no=15, decl_uid=6299, cgraph_uid=16, symbol_order=20)

Clock_Ip_EnableFircInStandby ()
{
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.22_1;

  <bb 2> :
  Clock_Ip_pxConfig.22_1 = Clock_Ip_pxConfig;
  Clock_Ip_Command (Clock_Ip_pxConfig.22_1, 2);
  EnableFircInStandbyMode ();
  return;

}



;; Function Clock_Ip_DisableSircInStandby (Clock_Ip_DisableSircInStandby, funcdef_no=16, decl_uid=6301, cgraph_uid=17, symbol_order=21)

Clock_Ip_DisableSircInStandby ()
{
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.23_1;

  <bb 2> :
  Clock_Ip_pxConfig.23_1 = Clock_Ip_pxConfig;
  Clock_Ip_Command (Clock_Ip_pxConfig.23_1, 2);
  DisableSircInStandbyMode ();
  return;

}



;; Function Clock_Ip_EnableSircInStandby (Clock_Ip_EnableSircInStandby, funcdef_no=17, decl_uid=6303, cgraph_uid=18, symbol_order=22)

Clock_Ip_EnableSircInStandby ()
{
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.24_1;

  <bb 2> :
  Clock_Ip_pxConfig.24_1 = Clock_Ip_pxConfig;
  Clock_Ip_Command (Clock_Ip_pxConfig.24_1, 2);
  EnableSircInStandbyMode ();
  return;

}



;; Function Clock_Ip_ReportClockErrors (Clock_Ip_ReportClockErrors, funcdef_no=18, decl_uid=6549, cgraph_uid=19, symbol_order=23)

Clock_Ip_ReportClockErrors (Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
  void (*<T551>) (Clock_Ip_NotificationType, Clock_Ip_NameType) Clock_Ip_pfkNotificationsCallback.25_1;

  <bb 2> :
  Clock_Ip_pfkNotificationsCallback.25_1 = Clock_Ip_pfkNotificationsCallback;
  Clock_Ip_pfkNotificationsCallback.25_1 (Error_3(D), ClockName_4(D));
  return;

}



;; Function Clock_Ip_StartTimeout (Clock_Ip_StartTimeout, funcdef_no=19, decl_uid=6573, cgraph_uid=20, symbol_order=24)

Clock_Ip_StartTimeout (uint32 * StartTimeOut, uint32 * ElapsedTimeOut, uint32 * TimeoutTicksOut, uint32 TimeoutUs)
{
  long unsigned int _1;
  long unsigned int _2;

  <bb 2> :
  _1 = OsIf_GetCounter (0);
  *StartTimeOut_5(D) = _1;
  *ElapsedTimeOut_7(D) = 0;
  _2 = OsIf_MicrosToTicks (TimeoutUs_9(D), 0);
  *TimeoutTicksOut_11(D) = _2;
  return;

}



;; Function Clock_Ip_TimeoutExpired (Clock_Ip_TimeoutExpired, funcdef_no=20, decl_uid=6577, cgraph_uid=21, symbol_order=25)

Clock_Ip_TimeoutExpired (uint32 * StartTimeInOut, uint32 * ElapsedTimeInOut, uint32 TimeoutTicks)
{
  boolean RetVal;
  boolean D.6824;
  long unsigned int D.6821;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _9;
  boolean _14;

  <bb 2> :
  RetVal_5 = 0;
  _9 = OsIf_GetElapsed (StartTimeInOut_7(D), 0);
  _1 = *ElapsedTimeInOut_10(D);
  _2 = _9 + _1;
  *ElapsedTimeInOut_10(D) = _2;
  _3 = *ElapsedTimeInOut_10(D);
  if (TimeoutTicks_12(D) <= _3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  RetVal_13 = 1;

  <bb 4> :
  # RetVal_4 = PHI <RetVal_5(2), RetVal_13(3)>
  _14 = RetVal_4;

  <bb 5> :
<L2>:
  return _14;

}


