Gmac_Ip_SetTxThreshold (uint8 Instance, uint8 Ring, Gmac_Ip_TxThresholdType ThresholdValue)
{
  <bb 2> :
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = (short unsigned int) Ring;
  _3 = (int) Instance;
  _4 = Gmac_apxState[_3];
  _5 = _4->TxRingCount;
  _6 = _2 < _5;
  DevAssert (_6);
  _7 = (int) Instance;
  _8 = (int) Ring;
  _9 = Gmac_apxQueueBases[_7][_8];
  GMAC_SetTxThreshold (_9, ThresholdValue);
  return;

}


Gmac_Ip_EnableTxStoreAndForward (uint8 Instance, uint8 Ring)
{
  <bb 2> :
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = (short unsigned int) Ring;
  _3 = (int) Instance;
  _4 = Gmac_apxState[_3];
  _5 = _4->TxRingCount;
  _6 = _2 < _5;
  DevAssert (_6);
  _7 = (int) Instance;
  _8 = (int) Ring;
  _9 = Gmac_apxQueueBases[_7][_8];
  GMAC_SetTxStoreAndForward (_9);
  return;

}


Gmac_Ip_SetTxRingWeight (uint8 Instance, uint8 Ring, uint32 Weight)
{
  int iftmp.52;

  <bb 2> :
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = (short unsigned int) Ring;
  _3 = (int) Instance;
  _4 = Gmac_apxState[_3];
  _5 = _4->TxRingCount;
  _6 = _2 < _5;
  DevAssert (_6);
  if (Weight != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  if (Weight <= 100)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  iftmp.52 = 1;
  goto <bb 6>; [INV]

  <bb 5> :
  iftmp.52 = 0;

  <bb 6> :
  _7 = (_Bool) iftmp.52;
  DevAssert (_7);
  _8 = (int) Instance;
  _9 = Gmac_apxState[_8];
  _10 = _9->TxRingCount;
  if (_10 > 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _11 = (int) Instance;
  _12 = (int) Ring;
  _13 = Gmac_apxQueueBases[_11][_12];
  GMAC_SetTxQueueQuantumWeight (_13, Weight);

  <bb 8> :
  return;

}


Gmac_Ip_SetTxSchedAlgo (uint8 Instance, Gmac_Ip_TxSchedAlgoType SchedAlgo)
{
  struct GMAC_Type * Base;

  <bb 2> :
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = (int) Instance;
  Base = Gmac_apxBases[_2];
  GMAC_SetSchedAlg (Base, SchedAlgo);
  return;

}


Gmac_Ip_GetSysTime (uint8 Instance, struct Gmac_Ip_TimestampType * Timestamp)
{
  const struct GMAC_Type * Base;

  <bb 2> :
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = Timestamp != 0B;
  DevAssert (_2);
  _3 = (int) Instance;
  Base = Gmac_apxBases[_3];
  _4 = Base->MAC_SYSTEM_TIME_HIGHER_WORD_SECONDS;
  _5 = (short unsigned int) _4;
  Timestamp->secondsHi = _5;
  _6 = Base->MAC_SYSTEM_TIME_SECONDS;
  Timestamp->seconds = _6;
  _7 = Base->MAC_SYSTEM_TIME_NANOSECONDS;
  Timestamp->nanoseconds = _7;
  return;

}


Gmac_Ip_SetRateRatioCorr (uint8 Instance, float64 RateRatio)
{
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;
  Gmac_Ip_StatusType Status;
  struct GMAC_Type * Base;
  Gmac_Ip_StatusType D.8007;

  <bb 2> :
  Status = 3;
  _1 = (int) Instance;
  Base = Gmac_apxBases[_1];
  _2 = 4.294967296e+9 / RateRatio;
  _3 = (long unsigned int) _2;
  Base->MAC_TIMESTAMP_ADDEND = _3;
  _4 = Base->MAC_TIMESTAMP_CONTROL;
  _5 = _4 | 32;
  Base->MAC_TIMESTAMP_CONTROL = _5;
  GMAC_StartTimeOut (&StartTime, &ElapsedTime, &TimeoutTicks, 1000);

  <bb 3> :
  _6 = Base->MAC_TIMESTAMP_CONTROL;
  _7 = _6 & 32;
  if (_7 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Status = 0;
  goto <bb 6>; [INV]

  <bb 5> :
  TimeoutTicks.51_8 = TimeoutTicks;
  _9 = GMAC_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.51_8);
  _10 = ~_9;
  if (_10 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  _11 = Base->MAC_TIMESTAMP_CONTROL;
  _12 = _11 | 2;
  Base->MAC_TIMESTAMP_CONTROL = _12;
  D.8007 = Status;
  StartTime = {CLOBBER};
  ElapsedTime = {CLOBBER};
  TimeoutTicks = {CLOBBER};

  <bb 7> :
<L5>:
  return D.8007;

}


Gmac_Ip_SetSysTimeCorr (uint8 Instance, Gmac_Ip_SysTimeCorrOffsetType Offset, uint32 SecondsUpdate, uint32 NanoSecondsUpdate)
{
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;
  Gmac_Ip_StatusType Status;
  uint32 Nanoseconds;
  uint32 seconds;
  struct GMAC_Type * Base;
  Gmac_Ip_StatusType D.8002;

  <bb 2> :
  Status = 3;
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = (int) Instance;
  Base = Gmac_apxBases[_2];
  if (Offset != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  seconds = -SecondsUpdate;
  Nanoseconds = 1000000000 - NanoSecondsUpdate;
  goto <bb 5>; [INV]

  <bb 4> :
  seconds = SecondsUpdate;
  Nanoseconds = NanoSecondsUpdate;

  <bb 5> :
  _3 = Offset << 31;
  _4 = Nanoseconds & 2147483647;
  _5 = _3 | _4;
  Base->MAC_SYSTEM_TIME_NANOSECONDS_UPDATE = _5;
  Base->MAC_SYSTEM_TIME_SECONDS_UPDATE = seconds;
  _6 = Base->MAC_TIMESTAMP_CONTROL;
  _7 = _6 | 8;
  Base->MAC_TIMESTAMP_CONTROL = _7;
  GMAC_StartTimeOut (&StartTime, &ElapsedTime, &TimeoutTicks, 1000);

  <bb 6> :
  _8 = Base->MAC_TIMESTAMP_CONTROL;
  _9 = _8 & 8;
  if (_9 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Status = 0;
  goto <bb 9>; [INV]

  <bb 8> :
  TimeoutTicks.50_10 = TimeoutTicks;
  _11 = GMAC_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.50_10);
  _12 = ~_11;
  if (_12 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  D.8002 = Status;
  StartTime = {CLOBBER};
  ElapsedTime = {CLOBBER};
  TimeoutTicks = {CLOBBER};

  <bb 10> :
<L8>:
  return D.8002;

}


Gmac_Ip_InitSysTime (const uint8 Instance, const struct Gmac_Ip_SysTimeConfigType * SysTimeConfig)
{
  Gmac_Ip_StatusType Status;
  struct GMAC_Type * Base;
  uint32 TimestampADDENDValue;
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;
  Gmac_Ip_StatusType D.7994;

  <bb 2> :
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = SysTimeConfig != 0B;
  DevAssert (_2);
  _3 = SysTimeConfig->InitialTimestamp;
  _4 = _3 != 0B;
  DevAssert (_4);
  _5 = (int) Instance;
  Base = Gmac_apxBases[_5];
  Status = 3;
  _6 = SysTimeConfig->SubSecondInc;
  _7 = (long unsigned int) _6;
  _8 = _7 << 16;
  _9 = _8 & 16711680;
  _10 = SysTimeConfig->SubNanoSecondsInc;
  _11 = (long unsigned int) _10;
  _12 = _11 << 8;
  _13 = _12 & 65535;
  _14 = _9 | _13;
  Base->MAC_SUB_SECOND_INCREMENT = _14;
  _15 = SysTimeConfig->MultiplyRatioCompensation;
  _16 = 4.294967296e+9 / _15;
  TimestampADDENDValue = (uint32) _16;
  _17 = Base->MAC_TIMESTAMP_ADDEND;
  _18 = TimestampADDENDValue | _17;
  Base->MAC_TIMESTAMP_ADDEND = _18;
  _19 = Base->MAC_TIMESTAMP_CONTROL;
  _20 = _19 | 32;
  Base->MAC_TIMESTAMP_CONTROL = _20;
  GMAC_StartTimeOut (&StartTime, &ElapsedTime, &TimeoutTicks, 1000);

  <bb 3> :
  _21 = Base->MAC_TIMESTAMP_CONTROL;
  _22 = _21 & 32;
  if (_22 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Status = 0;
  goto <bb 6>; [INV]

  <bb 5> :
  TimeoutTicks.49_23 = TimeoutTicks;
  _24 = GMAC_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.49_23);
  _25 = ~_24;
  if (_25 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  Base->MAC_TIMESTAMP_CONTROL = 769;
  _26 = Base->MAC_TIMESTAMP_CONTROL;
  _27 = _26 | 2;
  Base->MAC_TIMESTAMP_CONTROL = _27;
  _28 = SysTimeConfig->InitialTimestamp;
  _29 = _28->secondsHi;
  _30 = (long unsigned int) _29;
  Base->MAC_SYSTEM_TIME_HIGHER_WORD_SECONDS = _30;
  _31 = SysTimeConfig->InitialTimestamp;
  _32 = _31->seconds;
  Base->MAC_SYSTEM_TIME_SECONDS_UPDATE = _32;
  _33 = SysTimeConfig->InitialTimestamp;
  _34 = _33->nanoseconds;
  _35 = _34 & 2147483647;
  Base->MAC_SYSTEM_TIME_NANOSECONDS_UPDATE = _35;
  _36 = Base->MAC_TIMESTAMP_CONTROL;
  _37 = _36 | 4;
  Base->MAC_TIMESTAMP_CONTROL = _37;
  D.7994 = Status;
  StartTime = {CLOBBER};
  ElapsedTime = {CLOBBER};
  TimeoutTicks = {CLOBBER};

  <bb 7> :
<L5>:
  return D.7994;

}


Gmac_Ip_RemoveVlanTagFromHashTable (uint8 Instance, uint16 VlanTag)
{
  const uint8 * Tag;
  uint32 Tag32;
  uint32 Crc;
  struct GMAC_Type * Base;

  <bb 2> :
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = (int) Instance;
  Base = Gmac_apxBases[_2];
  _3 = (long unsigned int) VlanTag;
  Tag32 = _3;
  Tag = &Tag32;
  Crc = Gmac_Ip_ComputeCRC32 (Tag, 2);
  GMAC_RemoveVlanFromHashTable (Base, Crc);
  Tag32 = {CLOBBER};
  return;

}


Gmac_Ip_AddVlanTagToHashTable (uint8 Instance, uint16 VlanTag)
{
  const uint8 * tag;
  uint32 tag32;
  uint32 crc;
  struct GMAC_Type * Base;

  <bb 2> :
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = (int) Instance;
  Base = Gmac_apxBases[_2];
  _3 = (long unsigned int) VlanTag;
  tag32 = _3;
  tag = &tag32;
  crc = Gmac_Ip_ComputeCRC32 (tag, 2);
  GMAC_AddVlanToHashTable (Base, crc);
  tag32 = {CLOBBER};
  return;

}


Gmac_Ip_ClearVlanTagRxFilter (uint8 Instance, uint8 FilterIdx)
{
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;
  Gmac_Ip_StatusType Status;
  struct GMAC_Type * Base;
  Gmac_Ip_StatusType D.7989;

  <bb 2> :
  Status = 3;
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = FilterIdx <= 3;
  DevAssert (_2);
  _3 = (int) Instance;
  Base = Gmac_apxBases[_3];
  _4 = Base->MAC_VLAN_TAG.MAC_VLAN_TAG_DATA;
  _5 = _4 & 4294836224;
  Base->MAC_VLAN_TAG.MAC_VLAN_TAG_DATA = _5;
  _6 = Base->MAC_VLAN.MAC_VLAN_TAG_CTRL;
  _7 = _6 & 4294967283;
  Base->MAC_VLAN.MAC_VLAN_TAG_CTRL = _7;
  _8 = Base->MAC_VLAN.MAC_VLAN_TAG_CTRL;
  _9 = (long unsigned int) FilterIdx;
  _10 = _9 << 2;
  _11 = _8 | _10;
  Base->MAC_VLAN.MAC_VLAN_TAG_CTRL = _11;
  _12 = Base->MAC_VLAN.MAC_VLAN_TAG_CTRL;
  _13 = _12 & 4294967293;
  Base->MAC_VLAN.MAC_VLAN_TAG_CTRL = _13;
  _14 = Base->MAC_VLAN.MAC_VLAN_TAG_CTRL;
  _15 = _14 | 1;
  Base->MAC_VLAN.MAC_VLAN_TAG_CTRL = _15;
  GMAC_StartTimeOut (&StartTime, &ElapsedTime, &TimeoutTicks, 1000);

  <bb 3> :
  _16 = Base->MAC_VLAN.MAC_VLAN_TAG_CTRL;
  _17 = _16 & 1;
  if (_17 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Status = 0;
  goto <bb 6>; [INV]

  <bb 5> :
  TimeoutTicks.48_18 = TimeoutTicks;
  _19 = GMAC_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.48_18);
  _20 = ~_19;
  if (_20 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  D.7989 = Status;
  StartTime = {CLOBBER};
  ElapsedTime = {CLOBBER};
  TimeoutTicks = {CLOBBER};

  <bb 7> :
<L5>:
  return D.7989;

}


Gmac_Ip_ReadVlanTagRxFilter (uint8 Instance, uint8 FilterIdx, uint16 * VlanTag)
{
  struct GMAC_Type * Base;
  Gmac_Ip_StatusType D.7985;

  <bb 2> :
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = FilterIdx <= 3;
  DevAssert (_2);
  _3 = (int) Instance;
  Base = Gmac_apxBases[_3];
  D.7985 = GMAC_ReadVlanTagRxFilter (Base, FilterIdx, VlanTag);

  <bb 3> :
<L0>:
  return D.7985;

}


Gmac_Ip_AddVlanTagToRxFilter (uint8 Instance, uint8 FilterIdx, uint16 VlanTag)
{
  uint16 Tag;
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;
  Gmac_Ip_StatusType Status;
  struct GMAC_Type * Base;
  Gmac_Ip_StatusType D.7982;

  <bb 2> :
  Status = 3;
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = FilterIdx <= 3;
  DevAssert (_2);
  _3 = (int) Instance;
  Base = Gmac_apxBases[_3];
  _4 = Base->MAC_VLAN_TAG.MAC_VLAN_TAG_DATA;
  _5 = _4 & 4294901760;
  Base->MAC_VLAN_TAG.MAC_VLAN_TAG_DATA = _5;
  _6 = Base->MAC_VLAN.MAC_VLAN_TAG_CTRL;
  _7 = _6 & 4294967283;
  Base->MAC_VLAN.MAC_VLAN_TAG_CTRL = _7;
  _8 = Base->MAC_VLAN_TAG.MAC_VLAN_TAG_DATA;
  _9 = (long unsigned int) VlanTag;
  _10 = _8 | _9;
  _11 = _10 | 65536;
  Base->MAC_VLAN_TAG.MAC_VLAN_TAG_DATA = _11;
  _12 = Base->MAC_VLAN.MAC_VLAN_TAG_CTRL;
  _13 = (long unsigned int) FilterIdx;
  _14 = _13 << 2;
  _15 = _12 | _14;
  Base->MAC_VLAN.MAC_VLAN_TAG_CTRL = _15;
  _16 = Base->MAC_VLAN.MAC_VLAN_TAG_CTRL;
  _17 = _16 & 4294967293;
  Base->MAC_VLAN.MAC_VLAN_TAG_CTRL = _17;
  _18 = Base->MAC_VLAN.MAC_VLAN_TAG_CTRL;
  _19 = _18 | 1;
  Base->MAC_VLAN.MAC_VLAN_TAG_CTRL = _19;
  GMAC_StartTimeOut (&StartTime, &ElapsedTime, &TimeoutTicks, 1000);

  <bb 3> :
  _20 = Base->MAC_VLAN.MAC_VLAN_TAG_CTRL;
  _21 = _20 & 1;
  if (_21 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Status = 0;
  goto <bb 6>; [INV]

  <bb 5> :
  TimeoutTicks.47_22 = TimeoutTicks;
  _23 = GMAC_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.47_22);
  _24 = ~_23;
  if (_24 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  GMAC_ReadVlanTagRxFilter (Base, FilterIdx, &Tag);
  D.7982 = Status;
  StartTime = {CLOBBER};
  ElapsedTime = {CLOBBER};
  TimeoutTicks = {CLOBBER};
  Tag = {CLOBBER};

  <bb 7> :
<L5>:
  return D.7982;

}


Gmac_Ip_SetVlanTagRxFilter (uint8 Instance, boolean Enable, const struct Gmac_Ip_VlanRxFilterType * RxFilter)
{
  struct GMAC_Type * Base;

  <bb 2> :
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = (int) Instance;
  Base = Gmac_apxBases[_2];
  if (Enable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _3 = RxFilter != 0B;
  DevAssert (_3);
  _4 = Base->MAC_PACKET_FILTER;
  _5 = _4 | 65536;
  Base->MAC_PACKET_FILTER = _5;
  _6 = Base->MAC_VLAN.MAC_VLAN_TAG_CTRL;
  _7 = _6 | 33554432;
  Base->MAC_VLAN.MAC_VLAN_TAG_CTRL = _7;
  _8 = RxFilter->EnInverseMatch;
  GMAC_SetVlanTagInvMatch (Base, _8);
  _9 = Base->MAC_VLAN.MAC_VLAN_TAG_CTRL;
  _10 = _9 | 33554432;
  Base->MAC_VLAN.MAC_VLAN_TAG_CTRL = _10;
  _11 = RxFilter->EnInnerVlanMatch;
  _12 = RxFilter->EnSvlanMatch;
  _13 = RxFilter->DisVlanTypeMatch;
  _14 = RxFilter->En12bitMatch;
  GMAC_SetVlanTagDataRxMatch (Base, _11, _12, _13, _14);
  goto <bb 5>; [INV]

  <bb 4> :
  _15 = Base->MAC_PACKET_FILTER;
  _16 = _15 & 4294901759;
  Base->MAC_PACKET_FILTER = _16;
  _17 = Base->MAC_VLAN.MAC_VLAN_TAG_CTRL;
  _18 = _17 & 4261412863;
  Base->MAC_VLAN.MAC_VLAN_TAG_CTRL = _18;

  <bb 5> :
  return;

}


Gmac_Ip_SetTxInnerVlanTag (uint8 Instance, Gmac_Ip_VlanType VlanType, uint16 VlanTag)
{
  struct GMAC_Type * Base;

  <bb 2> :
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = (int) Instance;
  Base = Gmac_apxBases[_2];
  _3 = Base->MAC_INNER_VLAN_INCL;
  _4 = _3 & 4294377472;
  Base->MAC_INNER_VLAN_INCL = _4;
  _5 = Base->MAC_INNER_VLAN_INCL;
  _6 = VlanType << 19;
  _7 = (long unsigned int) VlanTag;
  _8 = _6 | _7;
  _9 = _5 | _8;
  Base->MAC_INNER_VLAN_INCL = _9;
  return;

}


Gmac_Ip_SetTxOuterVlanTagForReplacement (uint8 Instance, Gmac_Ip_VlanType VlanType, uint16 VlanTag)
{
  Gmac_Ip_StatusType Status;
  struct GMAC_Type * Base;
  Gmac_Ip_StatusType D.7975;

  <bb 2> :
  Status = 0;
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = (int) Instance;
  Base = Gmac_apxBases[_2];
  _3 = Base->MAC_VLAN_INCL.MAC_VLAN_INCL;
  _4 = _3 >> 16;
  _5 = _4 & 3;
  if (_5 == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _6 = Base->MAC_VLAN_INCL.MAC_VLAN_INCL;
  _7 = _6 & 4294377472;
  Base->MAC_VLAN_INCL.MAC_VLAN_INCL = _7;
  _8 = Base->MAC_VLAN_INCL.MAC_VLAN_INCL;
  _9 = VlanType << 19;
  _10 = (long unsigned int) VlanTag;
  _11 = _9 | _10;
  _12 = _8 | _11;
  Base->MAC_VLAN_INCL.MAC_VLAN_INCL = _12;
  goto <bb 5>; [INV]

  <bb 4> :
  Status = 4;

  <bb 5> :
  D.7975 = Status;

  <bb 6> :
<L3>:
  return D.7975;

}


Gmac_Ip_SetTxOuterVlanTagForInsertion (uint8 Instance, uint8 Ring, Gmac_Ip_VlanType VlanType, uint16 VlanTag)
{
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;
  Gmac_Ip_StatusType Status;
  struct GMAC_Type * Base;
  Gmac_Ip_StatusType D.7969;

  <bb 2> :
  Status = 3;
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = (short unsigned int) Ring;
  _3 = (int) Instance;
  _4 = Gmac_apxState[_3];
  _5 = _4->TxRingCount;
  _6 = _2 < _5;
  DevAssert (_6);
  _7 = (int) Instance;
  Base = Gmac_apxBases[_7];
  _8 = Base->MAC_VLAN_INCL.MAC_VLAN_INCL;
  _9 = _8 >> 16;
  _10 = _9 & 3;
  if (_10 == 2)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 3> :
  _11 = Base->MAC_VLAN_INCL.MAC_VLAN_INCL;
  _12 = (signed int) _11;
  if (_12 < 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Status = 2;
  goto <bb 9>; [INV]

  <bb 5> :
  _13 = Base->MAC_VLAN_INCL.MAC_VLAN_INCL;
  _14 = _13 & 4278190079;
  Base->MAC_VLAN_INCL.MAC_VLAN_INCL = _14;
  _15 = Base->MAC_VLAN_INCL.MAC_VLAN_INCL;
  _16 = (long unsigned int) Ring;
  _17 = _16 << 24;
  _18 = _15 | _17;
  Base->MAC_VLAN_INCL.MAC_VLAN_INCL = _18;
  _19 = Base->MAC_VLAN_INCL.MAC_VLAN_INCL;
  _20 = _19 | 1073741824;
  Base->MAC_VLAN_INCL.MAC_VLAN_INCL = _20;
  _21 = Base->MAC_VLAN_INCL.MAC_VLAN_INCL;
  _22 = _21 & 4294377472;
  Base->MAC_VLAN_INCL.MAC_VLAN_INCL = _22;
  _23 = Base->MAC_VLAN_INCL.MAC_VLAN_INCL;
  _24 = VlanType << 19;
  _25 = (long unsigned int) VlanTag;
  _26 = _24 | _25;
  _27 = _23 | _26;
  Base->MAC_VLAN_INCL.MAC_VLAN_INCL = _27;
  _28 = Base->MAC_VLAN_INCL.MAC_VLAN_INCL;
  _29 = _28 & 3221225471;
  Base->MAC_VLAN_INCL.MAC_VLAN_INCL = _29;
  GMAC_StartTimeOut (&StartTime, &ElapsedTime, &TimeoutTicks, 1000);

  <bb 6> :
  _30 = Base->MAC_VLAN_INCL.MAC_VLAN_INCL;
  _31 = (signed int) _30;
  if (_31 >= 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Status = 0;
  goto <bb 9>; [INV]

  <bb 8> :
  TimeoutTicks.46_32 = TimeoutTicks;
  _33 = GMAC_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.46_32);
  _34 = ~_33;
  if (_34 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  goto <bb 11>; [INV]

  <bb 10> :
  Status = 4;

  <bb 11> :
  D.7969 = Status;
  StartTime = {CLOBBER};
  ElapsedTime = {CLOBBER};
  TimeoutTicks = {CLOBBER};

  <bb 12> :
<L11>:
  return D.7969;

}


Gmac_Ip_EnableVlan (uint8 Instance, const struct Gmac_Ip_VlanConfigType * VlanConfig)
{
  struct GMAC_Type * Base;
  long unsigned int iftmp.45;
  long unsigned int iftmp.44;

  <bb 2> :
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = VlanConfig != 0B;
  DevAssert (_2);
  _3 = (int) Instance;
  Base = Gmac_apxBases[_3];
  _4 = VlanConfig->EnDoubleVlan;
  if (_4 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.44 = 67108864;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.44 = 0;

  <bb 5> :
  _5 = VlanConfig->EnSvlan;
  if (_5 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  iftmp.45 = 262144;
  goto <bb 8>; [INV]

  <bb 7> :
  iftmp.45 = 0;

  <bb 8> :
  _6 = iftmp.44 | iftmp.45;
  _7 = VlanConfig->InnerVlanStrip;
  _8 = _7 << 28;
  _9 = _8 & 805306368;
  _10 = _6 | _9;
  _11 = VlanConfig->OuterVlanStrip;
  _12 = _11 << 21;
  _13 = _12 & 6291456;
  _14 = _10 | _13;
  _15 = _14 | 2164260864;
  Base->MAC_VLAN.MAC_VLAN_TAG_CTRL = _15;
  _16 = VlanConfig->OuterVlanIns;
  _17 = _16 << 16;
  _18 = _17 | 262144;
  Base->MAC_VLAN_INCL.MAC_VLAN_INCL = _18;
  _19 = VlanConfig->OuterVlanIns;
  if (_19 == 2)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  _20 = Base->MAC_VLAN_INCL.MAC_VLAN_INCL;
  _21 = _20 | 2097152;
  Base->MAC_VLAN_INCL.MAC_VLAN_INCL = _21;

  <bb 10> :
  _22 = VlanConfig->InnerVlanIns;
  _23 = _22 << 16;
  _24 = _23 | 262144;
  Base->MAC_INNER_VLAN_INCL = _24;
  return;

}


Gmac_Ip_SetAddrPerfectFilter (uint8 Instance, const uint8 * MacAddr, const uint8 Mask, const Gmac_Ip_MacAddrFilterType AddrType, boolean Enable)
{
  struct GMAC_Type * Base;
  uint32 Address;

  <bb 2> :
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = (int) Instance;
  Base = Gmac_apxBases[_2];
  if (Enable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  _3 = MacAddr != 0B;
  DevAssert (_3);
  if (AddrType != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  _4 = Base->MAC_PACKET_FILTER;
  _5 = _4 | 512;
  Base->MAC_PACKET_FILTER = _5;
  if (AddrType == 2)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _6 = Base->MAC_PACKET_FILTER;
  _7 = _6 | 256;
  Base->MAC_PACKET_FILTER = _7;

  <bb 6> :
  Base->MAC_ADDRESS1_HIGH = 1073741824;
  goto <bb 8>; [INV]

  <bb 7> :
  Base->MAC_ADDRESS1_HIGH = 0;

  <bb 8> :
  _8 = Base->MAC_ADDRESS1_HIGH;
  _9 = (long unsigned int) Mask;
  _10 = _9 << 24;
  _11 = _10 & 1056964608;
  _12 = _8 | _11;
  Base->MAC_ADDRESS1_HIGH = _12;
  _13 = Base->MAC_ADDRESS1_HIGH;
  _14 = MacAddr + 5;
  _15 = *_14;
  _16 = (long unsigned int) _15;
  _17 = _16 << 8;
  _18 = MacAddr + 4;
  _19 = *_18;
  _20 = (long unsigned int) _19;
  _21 = _17 | _20;
  _22 = _13 | _21;
  _23 = _22 | 2147483648;
  Base->MAC_ADDRESS1_HIGH = _23;
  _24 = MacAddr + 3;
  _25 = *_24;
  _26 = (long unsigned int) _25;
  _27 = _26 << 24;
  _28 = MacAddr + 2;
  _29 = *_28;
  _30 = (long unsigned int) _29;
  _31 = _30 << 16;
  _32 = _27 | _31;
  _33 = MacAddr + 1;
  _34 = *_33;
  _35 = (long unsigned int) _34;
  _36 = _35 << 8;
  _37 = _32 | _36;
  _38 = *MacAddr;
  _39 = (long unsigned int) _38;
  Address = _37 | _39;
  Base->MAC_ADDRESS1_LOW = Address;
  goto <bb 10>; [INV]

  <bb 9> :
  Base->MAC_ADDRESS1_HIGH = 65535;
  Base->MAC_ADDRESS1_LOW = 4294967295;
  _40 = Base->MAC_PACKET_FILTER;
  _41 = _40 & 4294966783;
  Base->MAC_PACKET_FILTER = _41;
  _42 = Base->MAC_PACKET_FILTER;
  _43 = _42 & 4294967039;
  Base->MAC_PACKET_FILTER = _43;

  <bb 10> :
  return;

}


Gmac_Ip_RemoveDstAddrFromHashFilter (uint8 Instance, const uint8 * MacAddr)
{
  uint32 Crc;
  const struct GMAC_Type * Base;

  <bb 2> :
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = MacAddr != 0B;
  DevAssert (_2);
  _3 = (int) Instance;
  Base = Gmac_apxBases[_3];
  Crc = Gmac_Ip_ComputeCRC32 (MacAddr, 6);
  GMAC_RemoveFromHashTable (Base, Crc);
  return;

}


Gmac_Ip_AddDstAddrToHashFilter (uint8 Instance, const uint8 * MacAddr)
{
  uint32 Crc;
  const struct GMAC_Type * Base;

  <bb 2> :
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = MacAddr != 0B;
  DevAssert (_2);
  _3 = (int) Instance;
  Base = Gmac_apxBases[_3];
  Crc = Gmac_Ip_ComputeCRC32 (MacAddr, 6);
  GMAC_AddToHashTable (Base, Crc);
  return;

}


Gmac_Ip_SetHashOrPerfectFilter (uint8 Instance, boolean Enable)
{
  struct GMAC_Type * Base;

  <bb 2> :
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = (int) Instance;
  Base = Gmac_apxBases[_2];
  if (Enable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _3 = Base->MAC_PACKET_FILTER;
  _4 = _3 & 2147483647;
  Base->MAC_PACKET_FILTER = _4;
  _5 = Base->MAC_PACKET_FILTER;
  _6 = _5 & 4294967294;
  Base->MAC_PACKET_FILTER = _6;
  _7 = Base->MAC_PACKET_FILTER;
  _8 = _7 | 1024;
  Base->MAC_PACKET_FILTER = _8;
  goto <bb 5>; [INV]

  <bb 4> :
  _9 = Base->MAC_PACKET_FILTER;
  _10 = _9 & 4294966271;
  Base->MAC_PACKET_FILTER = _10;

  <bb 5> :
  return;

}


Gmac_Ip_SetMulticastHashFilter (uint8 Instance, boolean Enable)
{
  struct GMAC_Type * Base;

  <bb 2> :
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = (int) Instance;
  Base = Gmac_apxBases[_2];
  if (Enable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _3 = Base->MAC_PACKET_FILTER;
  _4 = _3 & 2147483647;
  Base->MAC_PACKET_FILTER = _4;
  _5 = Base->MAC_PACKET_FILTER;
  _6 = _5 & 4294967294;
  Base->MAC_PACKET_FILTER = _6;
  _7 = Base->MAC_PACKET_FILTER;
  _8 = _7 | 4;
  Base->MAC_PACKET_FILTER = _8;
  goto <bb 5>; [INV]

  <bb 4> :
  _9 = Base->MAC_PACKET_FILTER;
  _10 = _9 & 4294967291;
  Base->MAC_PACKET_FILTER = _10;

  <bb 5> :
  return;

}


Gmac_Ip_SetUnicastHashFilter (uint8 Instance, boolean Enable)
{
  struct GMAC_Type * Base;

  <bb 2> :
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = (int) Instance;
  Base = Gmac_apxBases[_2];
  if (Enable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _3 = Base->MAC_PACKET_FILTER;
  _4 = _3 & 2147483647;
  Base->MAC_PACKET_FILTER = _4;
  _5 = Base->MAC_PACKET_FILTER;
  _6 = _5 & 4294967294;
  Base->MAC_PACKET_FILTER = _6;
  _7 = Base->MAC_PACKET_FILTER;
  _8 = _7 | 2;
  Base->MAC_PACKET_FILTER = _8;
  goto <bb 5>; [INV]

  <bb 4> :
  _9 = Base->MAC_PACKET_FILTER;
  _10 = _9 & 4294967293;
  Base->MAC_PACKET_FILTER = _10;

  <bb 5> :
  return;

}


Gmac_Ip_SetMulticastForwardAll (uint8 Instance, boolean Enable)
{
  struct GMAC_Type * Base;

  <bb 2> :
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = (int) Instance;
  Base = Gmac_apxBases[_2];
  if (Enable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _3 = Base->MAC_PACKET_FILTER;
  _4 = _3 | 16;
  Base->MAC_PACKET_FILTER = _4;
  goto <bb 5>; [INV]

  <bb 4> :
  _5 = Base->MAC_PACKET_FILTER;
  _6 = _5 & 2147483647;
  Base->MAC_PACKET_FILTER = _6;
  _7 = Base->MAC_PACKET_FILTER;
  _8 = _7 & 4294967294;
  Base->MAC_PACKET_FILTER = _8;
  _9 = Base->MAC_PACKET_FILTER;
  _10 = _9 & 4294967279;
  Base->MAC_PACKET_FILTER = _10;
  _11 = Base->MAC_PACKET_FILTER;
  _12 = _11 & 4294967291;
  Base->MAC_PACKET_FILTER = _12;

  <bb 5> :
  return;

}


Gmac_Ip_SetBroadcastForwardAll (uint8 Instance, boolean Enable)
{
  struct GMAC_Type * Base;

  <bb 2> :
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = (int) Instance;
  Base = Gmac_apxBases[_2];
  if (Enable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _3 = Base->MAC_PACKET_FILTER;
  _4 = _3 & 4294967263;
  Base->MAC_PACKET_FILTER = _4;
  goto <bb 5>; [INV]

  <bb 4> :
  _5 = Base->MAC_PACKET_FILTER;
  _6 = _5 & 2147483647;
  Base->MAC_PACKET_FILTER = _6;
  _7 = Base->MAC_PACKET_FILTER;
  _8 = _7 & 4294967294;
  Base->MAC_PACKET_FILTER = _8;
  _9 = Base->MAC_PACKET_FILTER;
  _10 = _9 | 32;
  Base->MAC_PACKET_FILTER = _10;

  <bb 5> :
  return;

}


Gmac_Ip_GetChInterruptFlags (uint8 Instance, uint8 Channel)
{
  const struct Gmac_Ip_ChannelType * Base;
  uint32 D.7926;

  <bb 2> :
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = (int) Instance;
  _3 = (int) Channel;
  Base = Gmac_apxChBases[_2][_3];
  D.7926 = Base->DMA_STATUS;

  <bb 3> :
<L0>:
  return D.7926;

}


Gmac_Ip_GetInterruptFlags (uint8 Instance)
{
  const struct GMAC_Type * Base;
  uint32 D.7924;

  <bb 2> :
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = (int) Instance;
  Base = Gmac_apxBases[_2];
  D.7924 = Base->MAC_INTERRUPT_STATUS;

  <bb 3> :
<L0>:
  return D.7924;

}


Gmac_Ip_GetMacAddr (uint8 Instance, uint8 * MacAddr)
{
  uint32 Address;
  const struct GMAC_Type * Base;

  <bb 2> :
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = MacAddr != 0B;
  DevAssert (_2);
  _3 = (int) Instance;
  Base = Gmac_apxBases[_3];
  Address = Base->MAC_ADDRESS0_LOW;
  _4 = (unsigned char) Address;
  *MacAddr = _4;
  _5 = Address >> 8;
  _6 = MacAddr + 1;
  _7 = (unsigned char) _5;
  *_6 = _7;
  _8 = Address >> 16;
  _9 = MacAddr + 2;
  _10 = (unsigned char) _8;
  *_9 = _10;
  _11 = Address >> 24;
  _12 = MacAddr + 3;
  _13 = (unsigned char) _11;
  *_12 = _13;
  _14 = Base->MAC_ADDRESS0_HIGH;
  Address = _14 & 65535;
  _15 = MacAddr + 4;
  _16 = (unsigned char) Address;
  *_15 = _16;
  _17 = Address >> 8;
  _18 = MacAddr + 5;
  _19 = (unsigned char) _17;
  *_18 = _19;
  return;

}


Gmac_Ip_SetMacAddr (uint8 Instance, const uint8 * MacAddr)
{
  struct GMAC_Type * Base;
  uint32 Address;

  <bb 2> :
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = MacAddr != 0B;
  DevAssert (_2);
  _3 = (int) Instance;
  Base = Gmac_apxBases[_3];
  _4 = MacAddr + 5;
  _5 = *_4;
  _6 = (long unsigned int) _5;
  _7 = _6 << 8;
  _8 = MacAddr + 4;
  _9 = *_8;
  _10 = (long unsigned int) _9;
  _11 = _7 | _10;
  _12 = _11 | 2147483648;
  Base->MAC_ADDRESS0_HIGH = _12;
  _13 = MacAddr + 3;
  _14 = *_13;
  _15 = (long unsigned int) _14;
  _16 = _15 << 24;
  _17 = MacAddr + 2;
  _18 = *_17;
  _19 = (long unsigned int) _18;
  _20 = _19 << 16;
  _21 = _16 | _20;
  _22 = MacAddr + 1;
  _23 = *_22;
  _24 = (long unsigned int) _23;
  _25 = _24 << 8;
  _26 = _21 | _25;
  _27 = *MacAddr;
  _28 = (long unsigned int) _27;
  Address = _26 | _28;
  Base->MAC_ADDRESS0_LOW = Address;
  return;

}


Gmac_Ip_MDIOWriteMMD (uint8 Instance, uint8 PhyAddr, uint8 Mmd, uint16 PhyReg, uint16 Data, uint32 TimeoutMs)
{
  struct Gmac_Ip_ManagementInfo ManageInfo;
  Gmac_Ip_StatusType Status;
  struct GMAC_Type * Base;
  Gmac_Ip_StatusType D.7921;

  <bb 2> :
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = (int) Instance;
  Base = Gmac_apxBases[_2];
  ManageInfo.PhysAddr = PhyAddr;
  ManageInfo.PhysReg = PhyReg;
  _3 = (short unsigned int) Mmd;
  ManageInfo.MmdAddr = _3;
  ManageInfo.OpFrameType = 0;
  ManageInfo.FrameData = Data;
  ManageInfo.SupportedClause45 = 1;
  _4 = TimeoutMs * 1000;
  Status = GMAC_WriteManagementFrame (Base, &ManageInfo, _4);
  D.7921 = Status;
  ManageInfo = {CLOBBER};

  <bb 3> :
<L1>:
  return D.7921;

}


Gmac_Ip_MDIOReadMMD (uint8 Instance, uint8 PhyAddr, uint8 Mmd, uint16 PhyReg, uint16 * Data, uint32 TimeoutMs)
{
  struct Gmac_Ip_ManagementInfo ManageInfo;
  Gmac_Ip_StatusType Status;
  struct GMAC_Type * Base;
  Gmac_Ip_StatusType D.7918;

  <bb 2> :
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = Data != 0B;
  DevAssert (_2);
  _3 = (int) Instance;
  Base = Gmac_apxBases[_3];
  ManageInfo.PhysAddr = PhyAddr;
  ManageInfo.PhysReg = PhyReg;
  _4 = (short unsigned int) Mmd;
  ManageInfo.MmdAddr = _4;
  ManageInfo.OpFrameType = 1;
  ManageInfo.FrameData = 0;
  ManageInfo.SupportedClause45 = 1;
  _5 = TimeoutMs * 1000;
  Status = GMAC_WriteManagementFrame (Base, &ManageInfo, _5);
  if (Status == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _6 = GMAC_ReadManagementFrameData (Base);
  *Data = _6;

  <bb 4> :
  D.7918 = Status;
  ManageInfo = {CLOBBER};

  <bb 5> :
<L3>:
  return D.7918;

}


Gmac_Ip_MDIOWrite (uint8 Instance, uint8 PhyAddr, uint8 PhyReg, uint16 Data, uint32 TimeoutMs)
{
  struct Gmac_Ip_ManagementInfo ManageInfo;
  Gmac_Ip_StatusType Status;
  struct GMAC_Type * Base;
  Gmac_Ip_StatusType D.7913;

  <bb 2> :
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = (int) Instance;
  Base = Gmac_apxBases[_2];
  ManageInfo.PhysAddr = PhyAddr;
  _3 = (short unsigned int) PhyReg;
  ManageInfo.PhysReg = _3;
  ManageInfo.MmdAddr = 0;
  ManageInfo.OpFrameType = 0;
  ManageInfo.FrameData = Data;
  ManageInfo.SupportedClause45 = 0;
  _4 = TimeoutMs * 1000;
  Status = GMAC_WriteManagementFrame (Base, &ManageInfo, _4);
  D.7913 = Status;
  ManageInfo = {CLOBBER};

  <bb 3> :
<L1>:
  return D.7913;

}


Gmac_Ip_MDIORead (uint8 Instance, uint8 PhyAddr, uint8 PhyReg, uint16 * Data, uint32 TimeoutMs)
{
  struct Gmac_Ip_ManagementInfo ManageInfo;
  Gmac_Ip_StatusType Status;
  struct GMAC_Type * Base;
  Gmac_Ip_StatusType D.7908;

  <bb 2> :
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = Data != 0B;
  DevAssert (_2);
  _3 = (int) Instance;
  Base = Gmac_apxBases[_3];
  ManageInfo.PhysAddr = PhyAddr;
  _4 = (short unsigned int) PhyReg;
  ManageInfo.PhysReg = _4;
  ManageInfo.MmdAddr = 0;
  ManageInfo.OpFrameType = 1;
  ManageInfo.FrameData = 0;
  ManageInfo.SupportedClause45 = 0;
  _5 = TimeoutMs * 1000;
  Status = GMAC_WriteManagementFrame (Base, &ManageInfo, _5);
  if (Status == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _6 = GMAC_ReadManagementFrameData (Base);
  *Data = _6;

  <bb 4> :
  D.7908 = Status;
  ManageInfo = {CLOBBER};

  <bb 5> :
<L3>:
  return D.7908;

}


Gmac_Ip_EnableMDIO (uint8 Instance, boolean MiiPreambleDisabled, uint32 ModuleClk)
{
  uint8 i;
  uint8 Csr;
  struct GMAC_Type * Base;
  static const uint8 CsrValues[9] = "\x02\x02\x03\x00\x01\x04\x05\x06\x07";
  static const uint32 Freq[9] = {20000000, 35000000, 60000000, 100000000, 150000000, 250000000, 300000000, 500000000, 800000000};
  long unsigned int iftmp.43;

  <bb 2> :
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = (int) Instance;
  Base = Gmac_apxBases[_2];
  _3 = ModuleClk != 0;
  DevAssert (_3);
  Csr = 0;
  i = 0;
  goto <bb 6>; [INV]

  <bb 3> :
  _4 = (int) i;
  _5 = Freq[_4];
  if (ModuleClk <= _5)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _6 = (int) i;
  Csr = CsrValues[_6];
  goto <bb 7>; [INV]

  <bb 5> :
  i.42_7 = i;
  i = i.42_7 + 1;

  <bb 6> :
  if (i <= 8)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  if (MiiPreambleDisabled != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  iftmp.43 = 134217728;
  goto <bb 10>; [INV]

  <bb 9> :
  iftmp.43 = 0;

  <bb 10> :
  _8 = (long unsigned int) Csr;
  _9 = _8 << 8;
  _10 = _9 & 3840;
  _11 = iftmp.43 | _10;
  Base->MAC_MDIO_ADDRESS = _11;
  return;

}


Gmac_Ip_GetCounter (uint8 Instance, Gmac_Ip_CounterType Counter)
{
  volatile uint32[53] * Count_Reg;
  volatile uint32 CounterAddr;
  const struct GMAC_Type * Base;
  uint32 D.7898;

  <bb 2> :
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = (int) Instance;
  Base = Gmac_apxBases[_2];
  _3 = &Base->TX_OCTET_COUNT_GOOD_BAD;
  _4 = (long unsigned int) _3;
  CounterAddr = _4;
  CounterAddr.41_5 = CounterAddr;
  Count_Reg = (volatile uint32[53] *) CounterAddr.41_5;
  D.7898 = (*Count_Reg)[Counter];

  <bb 3> :
<L0>:
  return D.7898;

}


Gmac_Ip_GetTransmitStatus (uint8 Instance, uint8 Ring, const struct Gmac_Ip_BufferType * Buff, struct Gmac_Ip_TxInfoType * Info)
{
  uint32 RingLength;
  uint32 i;
  Gmac_Ip_StatusType Status;
  const struct Gmac_Ip_BufferDescriptorType * StartBd;
  struct Gmac_Ip_BufferDescriptorType * Bd;
  struct Gmac_Ip_BufferDescriptorType * ListBd;
  const struct Gmac_Ip_ChannelType * ChBase;
  const struct GMAC_Type * Base;
  Gmac_Ip_StatusType D.7896;

  <bb 2> :
  Status = 2563;
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = (int) Instance;
  _3 = Gmac_apxState[_2];
  _4 = _3 != 0B;
  DevAssert (_4);
  _5 = (short unsigned int) Ring;
  _6 = (int) Instance;
  _7 = Gmac_apxState[_6];
  _8 = _7->TxRingCount;
  _9 = _5 < _8;
  DevAssert (_9);
  _10 = Buff != 0B;
  DevAssert (_10);
  _11 = (int) Instance;
  Base = Gmac_apxBases[_11];
  _12 = (int) Instance;
  _13 = (int) Ring;
  ChBase = Gmac_apxChBases[_12][_13];
  _14 = ChBase->DMA_TXDESC_LIST_ADDRESS;
  ListBd = (struct Gmac_Ip_BufferDescriptorType *) _14;
  Bd = ListBd;
  RingLength = ChBase->DMA_TXDESC_RING_LENGTH;
  i = 0;
  goto <bb 19>; [INV]

  <bb 3> :
  _15 = Bd->Info0;
  _16 = Buff->Data;
  _17 = (long unsigned int) _16;
  if (_15 == _17)
    goto <bb 4>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 4> :
  StartBd = Bd;
  goto <bb 9>; [INV]

  <bb 5> :
  _18 = Bd->Info0;
  Bd->Des0 = _18;
  Bd->Info0 = 0;
  _19 = Bd->Info1;
  _20 = _19 & 4026531839;
  Bd->Info1 = _20;
  Bd = Bd + 32;
  _21 = RingLength + 1;
  _22 = _21 * 32;
  _23 = ListBd + _22;
  _24 = (long unsigned int) _23;
  Bd.40_25 = (long unsigned int) Bd;
  if (_24 <= Bd.40_25)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  Bd = ListBd;

  <bb 7> :
  if (Bd == StartBd)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  goto <bb 11>; [INV]

  <bb 9> :
  _26 = Bd->Des3;
  _27 = _26 & 268435456;
  if (_27 == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  _28 = Bd->Des3;
  _29 = (signed int) _28;
  if (_29 >= 0)
    goto <bb 5>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  _30 = Bd->Des3;
  _31 = _30 & 268435456;
  if (_31 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 12> :
  _32 = Bd->Des3;
  _33 = (signed int) _32;
  if (_33 >= 0)
    goto <bb 13>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 13> :
  Status = 0;
  if (Info != 0B)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  _34 = Bd->Des3;
  _35 = _34 & 32525;
  Info->ErrMask = _35;
  _36 = &Info->Timestamp;
  Gmac_Ip_GetTimestamp (Base, Bd, _36);

  <bb 15> :
  _37 = Bd->Info0;
  Bd->Des0 = _37;
  Bd->Info0 = 0;
  _38 = Bd->Info1;
  _39 = _38 & 4026531839;
  Bd->Info1 = _39;
  goto <bb 17>; [INV]

  <bb 16> :
  Status = 2;

  <bb 17> :
  goto <bb 20>; [INV]

  <bb 18> :
  Bd = Bd + 32;
  i = i + 1;

  <bb 19> :
  if (i <= RingLength)
    goto <bb 3>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 20> :
  D.7896 = Status;

  <bb 21> :
<L19>:
  return D.7896;

}


Gmac_Ip_IsFrameAvailable (uint8 Instance, uint8 Ring)
{
  boolean IsFrameAvailable;
  const struct Gmac_Ip_BufferDescriptorType * Bd;
  boolean D.7881;

  <bb 2> :
  IsFrameAvailable = 0;
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = (int) Instance;
  _3 = Gmac_apxState[_2];
  _4 = _3 != 0B;
  DevAssert (_4);
  _5 = (short unsigned int) Ring;
  _6 = (int) Instance;
  _7 = Gmac_apxState[_6];
  _8 = _7->RxRingCount;
  _9 = _5 < _8;
  DevAssert (_9);
  _10 = (int) Instance;
  _11 = Gmac_apxState[_10];
  _12 = (int) Ring;
  Bd = _11->RxCurrentDesc[_12];
  _13 = Bd->Des3;
  _14 = (signed int) _13;
  if (_14 >= 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  _15 = Bd->Info1;
  _16 = _15 & 16777216;
  if (_16 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _17 = Bd->Info0;
  if (_17 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  IsFrameAvailable = 1;

  <bb 6> :
  D.7881 = IsFrameAvailable;

  <bb 7> :
<L6>:
  return D.7881;

}


Gmac_Ip_ProvideRxBuff (uint8 Instance, uint8 Ring, const struct Gmac_Ip_BufferType * Buff)
{
  uint32 RingLength;
  uint32 TailPtr;
  struct Gmac_Ip_BufferDescriptorType * ListBd;
  struct Gmac_Ip_BufferDescriptorType * CtxtBd;
  struct Gmac_Ip_BufferDescriptorType * Bd;
  struct Gmac_Ip_ChannelType * Base;
  struct Gmac_Ip_BufferDescriptorType * iftmp.39;

  <bb 2> :
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = (int) Instance;
  _3 = Gmac_apxState[_2];
  _4 = _3 != 0B;
  DevAssert (_4);
  _5 = (short unsigned int) Ring;
  _6 = (int) Instance;
  _7 = Gmac_apxState[_6];
  _8 = _7->RxRingCount;
  _9 = _5 < _8;
  DevAssert (_9);
  _10 = Buff != 0B;
  DevAssert (_10);
  _11 = Buff->Data;
  _12 = _11 != 0B;
  DevAssert (_12);
  _13 = (int) Instance;
  _14 = (int) Ring;
  Base = Gmac_apxChBases[_13][_14];
  _15 = (int) Instance;
  _16 = Gmac_apxState[_15];
  _17 = (int) Ring;
  Bd = _16->RxAllocDesc[_17];
  _18 = Base->DMA_RXDESC_LIST_ADDRESS;
  ListBd = (struct Gmac_Ip_BufferDescriptorType *) _18;
  TailPtr = Base->DMA_RXDESC_TAIL_POINTER;
  _19 = Base->DMA_RXDESC_RING_LENGTH;
  RingLength = _19 + 1;
  _20 = Bd->Des3;
  _21 = (signed int) _20;
  _22 = _21 >= 0;
  DevAssert (_22);
  _23 = Bd->Des1;
  _24 = _23 & 16384;
  if (_24 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  _25 = Bd->Des3;
  _26 = _25 & 268435456;
  if (_26 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 4> :
  _27 = Bd + 32;
  _28 = (long unsigned int) _27;
  _29 = RingLength * 32;
  _30 = ListBd + _29;
  _31 = (long unsigned int) _30;
  if (_28 < _31)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  iftmp.39 = Bd + 32;
  goto <bb 7>; [INV]

  <bb 6> :
  iftmp.39 = ListBd;

  <bb 7> :
  CtxtBd = iftmp.39;
  _32 = Gmac_Ip_RestoreRxCtxtDescr (CtxtBd);
  if (_32 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  _33 = (int) Instance;
  _34 = Gmac_apxState[_33];
  _35 = (int) Ring;
  _34->RxAllocDesc[_35] = CtxtBd;

  <bb 9> :
  _36 = Buff->Data;
  _37 = (long unsigned int) _36;
  Bd->Des0 = _37;
  Bd->Des1 = 0;
  Bd->Des2 = 0;
  _38 = Buff->Data;
  _39 = (long unsigned int) _38;
  Bd->Info0 = _39;
  _40 = Bd->Info1;
  _41 = _40 & 4278190079;
  Bd->Info1 = _41;
  __asm__ __volatile__(" DSB");
  Bd->Des3 = 3238002688;
  _42 = (int) Instance;
  _43 = Gmac_apxState[_42];
  _44 = (int) Ring;
  _45 = _43->RxAllocDesc[_44];
  _46 = _45 + 32;
  _43->RxAllocDesc[_44] = _46;
  _47 = (int) Instance;
  _48 = Gmac_apxState[_47];
  _49 = (int) Ring;
  _50 = _48->RxAllocDesc[_49];
  _51 = (long unsigned int) _50;
  _52 = RingLength * 32;
  _53 = ListBd + _52;
  _54 = (long unsigned int) _53;
  if (_51 >= _54)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  _55 = (int) Instance;
  _56 = Gmac_apxState[_55];
  _57 = (int) Ring;
  _56->RxAllocDesc[_57] = ListBd;

  <bb 11> :
  __asm__ __volatile__(" DSB");
  Base->DMA_RXDESC_TAIL_POINTER = TailPtr;
  return;

}


Gmac_Ip_SetRxExternalBuffer (uint8 Instance, uint8 Ring, const struct Gmac_Ip_BufferType * Buff)
{
  uint32 RingLength;
  struct Gmac_Ip_BufferDescriptorType * ListBd;
  struct Gmac_Ip_BufferDescriptorType * Bd;
  struct Gmac_Ip_ChannelType * Base;

  <bb 2> :
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = (int) Instance;
  _3 = Gmac_apxState[_2];
  _4 = _3 != 0B;
  DevAssert (_4);
  _5 = (short unsigned int) Ring;
  _6 = (int) Instance;
  _7 = Gmac_apxState[_6];
  _8 = _7->RxRingCount;
  _9 = _5 < _8;
  DevAssert (_9);
  _10 = Buff != 0B;
  DevAssert (_10);
  _11 = Buff->Data;
  _12 = _11 != 0B;
  DevAssert (_12);
  _13 = (int) Instance;
  _14 = (int) Ring;
  Base = Gmac_apxChBases[_13][_14];
  _15 = (int) Instance;
  _16 = Gmac_apxState[_15];
  _17 = (int) Ring;
  Bd = _16->RxAllocDesc[_17];
  _18 = Base->DMA_RXDESC_LIST_ADDRESS;
  ListBd = (struct Gmac_Ip_BufferDescriptorType *) _18;
  _19 = Base->DMA_RXDESC_RING_LENGTH;
  RingLength = _19 + 1;
  _20 = Buff->Data;
  _21 = (long unsigned int) _20;
  Bd->Des0 = _21;
  Bd->Des1 = 0;
  Bd->Des2 = 0;
  _22 = Buff->Data;
  _23 = (long unsigned int) _22;
  Bd->Info0 = _23;
  _24 = (int) Instance;
  _25 = Gmac_aRxExternalBuffLength[_24];
  _26 = (long unsigned int) _25;
  _27 = _26 & 16383;
  Bd->Info1 = _27;
  Bd->Des3 = 3238002688;
  _28 = (int) Instance;
  _29 = Gmac_apxState[_28];
  _30 = (int) Ring;
  _31 = _29->RxAllocDesc[_30];
  _32 = _31 + 32;
  _29->RxAllocDesc[_30] = _32;
  _33 = (int) Instance;
  _34 = Gmac_apxState[_33];
  _35 = (int) Ring;
  _36 = _34->RxAllocDesc[_35];
  _37 = (long unsigned int) _36;
  _38 = RingLength * 32;
  _39 = ListBd + _38;
  _40 = (long unsigned int) _39;
  if (_37 >= _40)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _41 = (int) Instance;
  _42 = Gmac_apxState[_41];
  _43 = (int) Ring;
  _42->RxAllocDesc[_43] = ListBd;

  <bb 4> :
  return;

}


Gmac_Ip_ReadFrame (uint8 Instance, uint8 Ring, struct Gmac_Ip_BufferType * Buff, struct Gmac_Ip_RxInfoType * Info)
{
  Gmac_Ip_StatusType Status;
  struct Gmac_Ip_BufferDescriptorType * ListBd;
  struct Gmac_Ip_BufferDescriptorType * Bd;
  const struct Gmac_Ip_ChannelType * ChBase;
  Gmac_Ip_StatusType D.7859;

  <bb 2> :
  Status = 0;
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = (int) Instance;
  _3 = Gmac_apxState[_2];
  _4 = _3 != 0B;
  DevAssert (_4);
  _5 = (short unsigned int) Ring;
  _6 = (int) Instance;
  _7 = Gmac_apxState[_6];
  _8 = _7->RxRingCount;
  _9 = _5 < _8;
  DevAssert (_9);
  _10 = Buff != 0B;
  DevAssert (_10);
  _11 = (int) Instance;
  _12 = (int) Ring;
  ChBase = Gmac_apxChBases[_11][_12];
  _13 = (int) Instance;
  _14 = Gmac_apxState[_13];
  _15 = (int) Ring;
  Bd = _14->RxCurrentDesc[_15];
  _16 = ChBase->DMA_RXDESC_LIST_ADDRESS;
  ListBd = (struct Gmac_Ip_BufferDescriptorType *) _16;
  _17 = Bd->Des3;
  _18 = (signed int) _17;
  if (_18 < 0)
    goto <bb 5>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  _19 = Bd->Info1;
  _20 = _19 & 16777216;
  if (_20 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  _21 = Bd->Info0;
  if (_21 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Status = 2561;
  goto <bb 17>; [INV]

  <bb 6> :
  _22 = Bd->Info0;
  _23 = (uint8 *) _22;
  Buff->Data = _23;
  _24 = Bd->Des3;
  _25 = (short unsigned int) _24;
  _26 = _25 & 32767;
  Buff->Length = _26;
  _27 = Buff->Length;
  _28 = (int) _27;
  _29 = Bd->Info1;
  _30 = (short unsigned int) _29;
  _31 = (int) _30;
  _32 = _31 & 16383;
  if (_28 > _32)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _33 = Bd->Info1;
  _34 = (short unsigned int) _33;
  _35 = _34 & 16383;
  Buff->Length = _35;

  <bb 8> :
  Bd->Info0 = 0;
  _36 = Bd->Info1;
  _37 = _36 | 16777216;
  Bd->Info1 = _37;
  if (Info != 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 9> :
  _38 = Bd->Des3;
  _39 = _38 & 33030144;
  Info->ErrMask = _39;
  _40 = Buff->Length;
  Info->PktLen = _40;
  _41 = Bd->Des3;
  _42 = _41 & 67108864;
  if (_42 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  _43 = Bd->Des1;
  _44 = _43 & 8;
  _45 = _44 != 0;
  Info->IpHeaderErr = _45;
  _46 = Bd->Des1;
  _47 = _46 & 128;
  _48 = _47 != 0;
  Info->IpPayloadErr = _48;
  _49 = Bd->Des1;
  _50 = _49 & 16;
  _51 = _50 != 0;
  Info->Ipv4 = _51;
  _52 = Bd->Des1;
  _53 = _52 & 32;
  _54 = _53 != 0;
  Info->Ipv6 = _54;
  _55 = Bd->Des1;
  _56 = _55 & 7;
  _57 = Gmac_Ip_GetPayloadType (_56);
  Info->PayloadType = _57;

  <bb 11> :
  _58 = Bd->Des3;
  _59 = _58 & 33554432;
  if (_59 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  _60 = Bd->Des0;
  _61 = (short unsigned int) _60;
  Info->OuterVlanTag = _61;
  _62 = Bd->Des0;
  _63 = _62 >> 16;
  _64 = (short unsigned int) _63;
  Info->InnerVlanTag = _64;
  goto <bb 14>; [INV]

  <bb 13> :
  Info->OuterVlanTag = 0;
  Info->InnerVlanTag = 0;

  <bb 14> :
  Gmac_Ip_ReadTimeStampInfo (Instance, Ring, Info);

  <bb 15> :
  _65 = (int) Instance;
  _66 = Gmac_apxState[_65];
  _67 = (int) Ring;
  _68 = _66->RxCurrentDesc[_67];
  _69 = _68 + 32;
  _66->RxCurrentDesc[_67] = _69;
  _70 = (int) Instance;
  _71 = Gmac_apxState[_70];
  _72 = (int) Ring;
  _73 = _71->RxCurrentDesc[_72];
  _74 = (long unsigned int) _73;
  _75 = ChBase->DMA_RXDESC_RING_LENGTH;
  _76 = _75 + 1;
  _77 = _76 * 32;
  _78 = ListBd + _77;
  _79 = (long unsigned int) _78;
  if (_74 >= _79)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  _80 = (int) Instance;
  _81 = Gmac_apxState[_80];
  _82 = (int) Ring;
  _81->RxCurrentDesc[_82] = ListBd;

  <bb 17> :
  D.7859 = Status;

  <bb 18> :
<L16>:
  return D.7859;

}


Gmac_Ip_SendMultiBufferFrame (uint8 Instance, uint8 Ring, const struct Gmac_Ip_BufferType * Buffers, const struct Gmac_Ip_TxOptionsType * Options, uint32 NumBuffers)
{
  boolean DeAllocate;
  uint32 RingLength;
  uint32 i;
  Gmac_Ip_StatusType Status;
  struct Gmac_Ip_BufferDescriptorType * LastBd;
  struct Gmac_Ip_BufferDescriptorType * FirstBd;
  struct Gmac_Ip_BufferDescriptorType * ListBd;
  struct Gmac_Ip_BufferDescriptorType * Bd;
  struct Gmac_Ip_ChannelType * Base;
  Gmac_Ip_StatusType D.7841;
  struct Gmac_Ip_BufferDescriptorType * iftmp.36;
  long unsigned int iftmp.34;
  struct Gmac_Ip_BufferDescriptorType * iftmp.32;
  long unsigned int iftmp.31;

  <bb 2> :
  Status = 0;
  i = 0;
  RingLength = 0;
  DeAllocate = 0;
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = (int) Instance;
  _3 = Gmac_apxState[_2];
  _4 = _3 != 0B;
  DevAssert (_4);
  _5 = (short unsigned int) Ring;
  _6 = (int) Instance;
  _7 = Gmac_apxState[_6];
  _8 = _7->TxRingCount;
  _9 = _5 < _8;
  DevAssert (_9);
  _10 = Buffers != 0B;
  DevAssert (_10);
  _11 = Options != 0B;
  DevAssert (_11);
  _12 = NumBuffers != 0;
  DevAssert (_12);
  _13 = (int) Instance;
  _14 = (int) Ring;
  Base = Gmac_apxChBases[_13][_14];
  _15 = Base->DMA_TXDESC_TAIL_POINTER;
  Bd = (struct Gmac_Ip_BufferDescriptorType *) _15;
  _16 = Base->DMA_TXDESC_LIST_ADDRESS;
  ListBd = (struct Gmac_Ip_BufferDescriptorType *) _16;
  RingLength = Base->DMA_TXDESC_RING_LENGTH;
  _17 = NumBuffers <= RingLength;
  DevAssert (_17);
  FirstBd = Bd;
  LastBd = Bd;
  goto <bb 12>; [INV]

  <bb 3> :
  _18 = i * 8;
  _19 = Buffers + _18;
  _20 = _19->Data;
  _21 = _20 != 0B;
  DevAssert (_21);
  _22 = i * 8;
  _23 = Buffers + _22;
  _24 = _23->Length;
  _25 = _24 != 0;
  DevAssert (_25);
  _26 = Bd->Des3;
  _27 = (signed int) _26;
  if (_27 < 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Status = 2562;
  goto <bb 13>; [INV]

  <bb 5> :
  _28 = i * 8;
  _29 = Buffers + _28;
  _30 = _29->Data;
  _31 = (long unsigned int) _30;
  Bd->Des0 = _31;
  _32 = i * 8;
  _33 = Buffers + _32;
  _34 = _33->Length;
  _35 = (long unsigned int) _34;
  Bd->Des2 = _35;
  _36 = i * 8;
  _37 = Buffers + _36;
  _38 = _37->Data;
  _39 = (long unsigned int) _38;
  Bd->Info0 = _39;
  _40 = i * 8;
  _41 = Buffers + _40;
  _42 = _41->Length;
  _43 = (long unsigned int) _42;
  if (Bd == FirstBd)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  iftmp.31 = 0;
  goto <bb 8>; [INV]

  <bb 7> :
  iftmp.31 = 2147483648;

  <bb 8> :
  _44 = iftmp.31 | _43;
  Bd->Des3 = _44;
  LastBd = Bd;
  Bd = Bd + 32;
  _45 = RingLength + 1;
  _46 = _45 * 32;
  _47 = ListBd + _46;
  _48 = (long unsigned int) _47;
  Bd.33_49 = (long unsigned int) Bd;
  if (_48 <= Bd.33_49)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  iftmp.32 = ListBd;
  goto <bb 11>; [INV]

  <bb 10> :
  iftmp.32 = Bd;

  <bb 11> :
  Bd = iftmp.32;
  i = i + 1;

  <bb 12> :
  if (i < NumBuffers)
    goto <bb 3>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  if (i == NumBuffers)
    goto <bb 14>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 14> :
  _50 = LastBd->Des2;
  _51 = Options->NoInt;
  if (_51 != 0)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  iftmp.34 = 1073741824;
  goto <bb 17>; [INV]

  <bb 16> :
  iftmp.34 = 3221225472;

  <bb 17> :
  _52 = iftmp.34 | _50;
  LastBd->Des2 = _52;
  _53 = LastBd->Des3;
  _54 = _53 | 268435456;
  LastBd->Des3 = _54;
  _55 = FirstBd->Des3;
  _56 = Options->CrcPadIns;
  _57 = _56 << 26;
  _58 = _57 & 201326592;
  _59 = Options->ChecksumIns;
  _60 = _59 << 16;
  _61 = _60 & 196608;
  _62 = _58 | _61;
  _63 = _55 | _62;
  _64 = _63 | 2684354560;
  FirstBd->Des3 = _64;
  __asm__ __volatile__(" DSB");
  Bd.35_65 = (long unsigned int) Bd;
  Base->DMA_TXDESC_TAIL_POINTER = Bd.35_65;
  goto <bb 19>; [INV]

  <bb 18> :
  DeAllocate = 1;

  <bb 19> :
  if (DeAllocate != 0)
    goto <bb 20>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 20> :
  goto <bb 25>; [INV]

  <bb 21> :
  Bd = Bd + 4294967264;
  Bd.37_66 = (long unsigned int) Bd;
  ListBd.38_67 = (long unsigned int) ListBd;
  if (Bd.37_66 < ListBd.38_67)
    goto <bb 22>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 22> :
  _68 = RingLength * 32;
  iftmp.36 = ListBd + _68;
  goto <bb 24>; [INV]

  <bb 23> :
  iftmp.36 = Bd;

  <bb 24> :
  Bd = iftmp.36;
  _69 = Bd->Des3;
  _70 = _69 & 2147483647;
  Bd->Des3 = _70;

  <bb 25> :
  if (Bd != FirstBd)
    goto <bb 21>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 26> :
  D.7841 = Status;

  <bb 27> :
<L25>:
  return D.7841;

}


Gmac_Ip_SendFrame (uint8 Instance, uint8 Ring, const struct Gmac_Ip_BufferType * Buff, const struct Gmac_Ip_TxOptionsType * Options)
{
  Gmac_Ip_StatusType Status;
  struct Gmac_Ip_BufferDescriptorType * ListBd;
  struct Gmac_Ip_BufferDescriptorType * Bd;
  struct Gmac_Ip_ChannelType * Base;
  Gmac_Ip_StatusType D.7816;
  struct Gmac_Ip_BufferDescriptorType * iftmp.28;

  <bb 2> :
  Status = 0;
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = (int) Instance;
  _3 = Gmac_apxState[_2];
  _4 = _3 != 0B;
  DevAssert (_4);
  _5 = (short unsigned int) Ring;
  _6 = (int) Instance;
  _7 = Gmac_apxState[_6];
  _8 = _7->TxRingCount;
  _9 = _5 < _8;
  DevAssert (_9);
  _10 = Buff != 0B;
  DevAssert (_10);
  _11 = Buff->Data;
  _12 = _11 != 0B;
  DevAssert (_12);
  _13 = Buff->Length;
  _14 = _13 != 0;
  DevAssert (_14);
  _15 = (int) Instance;
  _16 = (int) Ring;
  Base = Gmac_apxChBases[_15][_16];
  _17 = Base->DMA_TXDESC_TAIL_POINTER;
  Bd = (struct Gmac_Ip_BufferDescriptorType *) _17;
  _18 = Base->DMA_TXDESC_LIST_ADDRESS;
  ListBd = (struct Gmac_Ip_BufferDescriptorType *) _18;
  _19 = Bd->Des3;
  _20 = (signed int) _19;
  if (_20 < 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Status = 2562;
  goto <bb 12>; [INV]

  <bb 4> :
  _21 = Buff->Data;
  _22 = (long unsigned int) _21;
  Bd->Des0 = _22;
  _23 = Buff->Length;
  _24 = (long unsigned int) _23;
  _25 = _24 | 3221225472;
  Bd->Des2 = _25;
  _26 = Buff->Data;
  _27 = (long unsigned int) _26;
  Bd->Info0 = _27;
  __asm__ __volatile__(" DSB");
  _28 = Buff->Length;
  _29 = (long unsigned int) _28;
  _30 = _29 | 805306368;
  Bd->Des3 = _30;
  if (Options != 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  _31 = Options->NoInt;
  if (_31 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _32 = Bd->Des2;
  _33 = _32 & 2147483647;
  Bd->Des2 = _33;

  <bb 7> :
  _34 = Bd->Des3;
  _35 = Options->CrcPadIns;
  _36 = _35 << 26;
  _37 = _36 & 201326592;
  _38 = Options->ChecksumIns;
  _39 = _38 << 16;
  _40 = _39 & 196608;
  _41 = _37 | _40;
  _42 = _34 | _41;
  Bd->Des3 = _42;

  <bb 8> :
  _43 = Bd->Des3;
  _44 = _43 | 2147483648;
  Bd->Des3 = _44;
  Bd = Bd + 32;
  __asm__ __volatile__(" DSB");
  _45 = Base->DMA_TXDESC_RING_LENGTH;
  _46 = _45 + 1;
  _47 = _46 * 32;
  _48 = ListBd + _47;
  _49 = (long unsigned int) _48;
  Bd.29_50 = (long unsigned int) Bd;
  if (_49 <= Bd.29_50)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  iftmp.28 = ListBd;
  goto <bb 11>; [INV]

  <bb 10> :
  iftmp.28 = Bd;

  <bb 11> :
  iftmp.30_51 = (long unsigned int) iftmp.28;
  Base->DMA_TXDESC_TAIL_POINTER = iftmp.30_51;

  <bb 12> :
  D.7816 = Status;

  <bb 13> :
<L10>:
  return D.7816;

}


Gmac_Ip_GetTxMultiBuff (uint8 Instance, uint8 ring, uint16 NumBuffers, const uint16 * BufferLength, uint16 * buffId)
{
  uint16 FreeBuffers;
  Gmac_Ip_StatusType Status;
  struct Gmac_Ip_BufferDescriptorType * ListBd;
  const struct Gmac_Ip_ChannelType * ChBase;
  struct Gmac_Ip_BufferDescriptorType * Bd;
  Gmac_Ip_StatusType D.7803;

  <bb 2> :
  Status = 0;
  FreeBuffers = 0;
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = (int) Instance;
  _3 = Gmac_apxState[_2];
  _4 = _3 != 0B;
  DevAssert (_4);
  _5 = buffId != 0B;
  DevAssert (_5);
  _6 = (short unsigned int) ring;
  _7 = (int) Instance;
  _8 = Gmac_apxState[_7];
  _9 = _8->TxRingCount;
  _10 = _6 < _9;
  DevAssert (_10);
  _11 = (int) Instance;
  _12 = (int) ring;
  ChBase = Gmac_apxChBases[_11][_12];
  _13 = (int) Instance;
  _14 = Gmac_apxState[_13];
  _15 = (int) ring;
  Bd = _14->TxCurrentDesc[_15];
  _16 = ChBase->DMA_TXDESC_LIST_ADDRESS;
  ListBd = (struct Gmac_Ip_BufferDescriptorType *) _16;
  goto <bb 10>; [INV]

  <bb 3> :
  _17 = Bd->Des3;
  _18 = (signed int) _17;
  if (_18 < 0)
    goto <bb 5>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  _19 = Bd->Info1;
  _20 = _19 & 268435456;
  if (_20 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Status = 2564;
  goto <bb 10>; [INV]

  <bb 6> :
  _21 = (unsigned int) FreeBuffers;
  _22 = _21 * 2;
  _23 = BufferLength + _22;
  _24 = *_23;
  _25 = (long unsigned int) _24;
  _26 = Bd->Info1;
  _27 = _26 & 16383;
  if (_25 > _27)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Status = 2565;
  goto <bb 10>; [INV]

  <bb 8> :
  FreeBuffers.26_28 = FreeBuffers;
  FreeBuffers = FreeBuffers.26_28 + 1;
  Bd = Bd + 32;
  _29 = ChBase->DMA_TXDESC_RING_LENGTH;
  _30 = _29 + 1;
  _31 = _30 * 32;
  _32 = ListBd + _31;
  _33 = (long unsigned int) _32;
  Bd.27_34 = (long unsigned int) Bd;
  if (_33 <= Bd.27_34)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  Bd = ListBd;

  <bb 10> :
  if (FreeBuffers < NumBuffers)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  if (Status == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  if (FreeBuffers == NumBuffers)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  _35 = (int) Instance;
  _36 = Gmac_apxState[_35];
  _37 = (int) ring;
  _38 = _36->TxCurrentDesc[_37];
  _39 = _38 - ListBd;
  _40 = _39 /[ex] 32;
  _41 = (short unsigned int) _40;
  *buffId = _41;

  <bb 14> :
  D.7803 = Status;

  <bb 15> :
<L15>:
  return D.7803;

}


Gmac_Ip_GetTxBuff (uint8 Instance, uint8 Ring, struct Gmac_Ip_BufferType * Buff, uint16 * BuffId)
{
  Gmac_Ip_StatusType Status;
  struct Gmac_Ip_BufferDescriptorType * ListBd;
  const struct Gmac_Ip_ChannelType * ChBase;
  struct Gmac_Ip_BufferDescriptorType * Bd;
  Gmac_Ip_StatusType D.7789;

  <bb 2> :
  Status = 0;
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = (int) Instance;
  _3 = Gmac_apxState[_2];
  _4 = _3 != 0B;
  DevAssert (_4);
  _5 = (short unsigned int) Ring;
  _6 = (int) Instance;
  _7 = Gmac_apxState[_6];
  _8 = _7->TxRingCount;
  _9 = _5 < _8;
  DevAssert (_9);
  _10 = Buff != 0B;
  DevAssert (_10);
  _11 = (int) Instance;
  _12 = (int) Ring;
  ChBase = Gmac_apxChBases[_11][_12];
  _13 = (int) Instance;
  _14 = Gmac_apxState[_13];
  _15 = (int) Ring;
  Bd = _14->TxCurrentDesc[_15];
  _16 = ChBase->DMA_TXDESC_LIST_ADDRESS;
  ListBd = (struct Gmac_Ip_BufferDescriptorType *) _16;
  _17 = Bd->Des3;
  _18 = (signed int) _17;
  if (_18 < 0)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  _19 = Bd->Info1;
  _20 = _19 & 268435456;
  if (_20 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Status = 2564;
  goto <bb 12>; [INV]

  <bb 5> :
  _21 = Buff->Length;
  _22 = (long unsigned int) _21;
  _23 = Bd->Info1;
  _24 = _23 & 16383;
  if (_22 > _24)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  Status = 2565;
  _25 = Bd->Info1;
  _26 = (short unsigned int) _25;
  _27 = _26 & 16383;
  Buff->Length = _27;
  goto <bb 12>; [INV]

  <bb 7> :
  _28 = (int) Instance;
  _29 = 1;
  _30 = ~_29;
  if (_30 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 8> :
  _31 = Bd->Des0;
  _32 = (uint8 *) _31;
  Buff->Data = _32;
  _33 = Bd->Info1;
  _34 = (short unsigned int) _33;
  _35 = _34 & 16383;
  Buff->Length = _35;
  _36 = Bd->Info1;
  _37 = _36 | 268435456;
  Bd->Info1 = _37;
  if (BuffId != 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  _38 = Bd - ListBd;
  _39 = _38 /[ex] 32;
  _40 = (short unsigned int) _39;
  *BuffId = _40;

  <bb 10> :
  _41 = (int) Instance;
  _42 = Gmac_apxState[_41];
  _43 = (int) Ring;
  _44 = _42->TxCurrentDesc[_43];
  _45 = _44 + 32;
  _42->TxCurrentDesc[_43] = _45;
  _46 = (int) Instance;
  _47 = Gmac_apxState[_46];
  _48 = (int) Ring;
  _49 = _47->TxCurrentDesc[_48];
  _50 = (long unsigned int) _49;
  _51 = ChBase->DMA_TXDESC_RING_LENGTH;
  _52 = _51 + 1;
  _53 = _52 * 32;
  _54 = ListBd + _53;
  _55 = (long unsigned int) _54;
  if (_50 >= _55)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  _56 = (int) Instance;
  _57 = Gmac_apxState[_56];
  _58 = (int) Ring;
  _57->TxCurrentDesc[_58] = ListBd;

  <bb 12> :
  D.7789 = Status;

  <bb 13> :
<L13>:
  return D.7789;

}


Gmac_Ip_SetSpeed (uint8 Instance, Gmac_Ip_SpeedType Speed)
{
  struct GMAC_Type * Base;

  <bb 2> :
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = (int) Instance;
  Base = Gmac_apxBases[_2];
  GMAC_SetSpeed (Base, Speed);
  return;

}


Gmac_Ip_DisableController (uint8 Instance)
{
  uint32 i;
  Gmac_Ip_StatusType Status;
  Gmac_Ip_StatusType D.7774;

  <bb 2> :
  i = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  _1 = (int) Instance;
  _2 = Gmac_apxChBases[_1][i];
  _3 = _2->DMA_TX_CONTROL;
  _4 = (int) Instance;
  _5 = Gmac_apxChBases[_4][i];
  _6 = _3 & 4294967294;
  _5->DMA_TX_CONTROL = _6;
  _7 = (int) Instance;
  _8 = Gmac_apxQueueBases[_7][i];
  _9 = _8->MTL_TXQ_OPERATION_MODE;
  _10 = (int) Instance;
  _11 = Gmac_apxQueueBases[_10][i];
  _12 = _9 | 1;
  _11->MTL_TXQ_OPERATION_MODE = _12;
  i = i + 1;

  <bb 4> :
  _13 = (int) Instance;
  _14 = Gmac_apxState[_13];
  _15 = _14->TxRingCount;
  _16 = (long unsigned int) _15;
  if (i < _16)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  _17 = (int) Instance;
  _18 = Gmac_apxState[_17];
  _19 = _18->TxRingCount;
  Status = Gmac_Ip_CheckMTLEmpty (Instance, _19, 1);
  if (Status == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 6> :
  _20 = (int) Instance;
  _21 = Gmac_apxBases[_20];
  _22 = _21->MAC_CONFIGURATION;
  _23 = (int) Instance;
  _24 = Gmac_apxBases[_23];
  _25 = _22 & 4294967292;
  _24->MAC_CONFIGURATION = _25;
  i = 0;
  goto <bb 8>; [INV]

  <bb 7> :
  _26 = (int) Instance;
  _27 = Gmac_apxChBases[_26][i];
  _28 = _27->DMA_RX_CONTROL;
  _29 = (int) Instance;
  _30 = Gmac_apxChBases[_29][i];
  _31 = _28 & 4294967294;
  _30->DMA_RX_CONTROL = _31;
  _32 = (int) Instance;
  _33 = Gmac_apxChBases[_32][i];
  _34 = _33->DMA_RX_CONTROL;
  _35 = (int) Instance;
  _36 = Gmac_apxChBases[_35][i];
  _37 = _34 | 2147483648;
  _36->DMA_RX_CONTROL = _37;
  i = i + 1;

  <bb 8> :
  _38 = (int) Instance;
  _39 = Gmac_apxState[_38];
  _40 = _39->RxRingCount;
  _41 = (long unsigned int) _40;
  if (i < _41)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  _42 = (int) Instance;
  _43 = Gmac_apxState[_42];
  _44 = _43->RxRingCount;
  Status = Gmac_Ip_CheckMTLEmpty (Instance, _44, 0);
  if (Status == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  Gmac_Ip_RestoreTxDescr (Instance);
  Gmac_Ip_RestoreRxDescr (Instance);

  <bb 11> :
  D.7774 = Status;

  <bb 12> :
<L10>:
  return D.7774;

}


Gmac_Ip_EnableController (uint8 Instance)
{
  uint32 i;

  <bb 2> :
  i = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  _1 = (int) Instance;
  _2 = Gmac_apxChBases[_1][i];
  _3 = _2->DMA_TX_CONTROL;
  _4 = (int) Instance;
  _5 = Gmac_apxChBases[_4][i];
  _6 = _3 | 1;
  _5->DMA_TX_CONTROL = _6;
  i = i + 1;

  <bb 4> :
  _7 = (int) Instance;
  _8 = Gmac_apxState[_7];
  _9 = _8->TxRingCount;
  _10 = (long unsigned int) _9;
  if (i < _10)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  i = 0;
  goto <bb 7>; [INV]

  <bb 6> :
  _11 = (int) Instance;
  _12 = Gmac_apxChBases[_11][i];
  _13 = _12->DMA_RX_CONTROL;
  _14 = (int) Instance;
  _15 = Gmac_apxChBases[_14][i];
  _16 = _13 | 1;
  _15->DMA_RX_CONTROL = _16;
  i = i + 1;

  <bb 7> :
  _17 = (int) Instance;
  _18 = Gmac_apxState[_17];
  _19 = _18->RxRingCount;
  _20 = (long unsigned int) _19;
  if (i < _20)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  _21 = (int) Instance;
  _22 = Gmac_apxBases[_21];
  _23 = _22->MAC_CONFIGURATION;
  _24 = (int) Instance;
  _25 = Gmac_apxBases[_24];
  _26 = _23 | 3;
  _25->MAC_CONFIGURATION = _26;
  return;

}


Gmac_Ip_SetPowerState (uint8 Instance, Gmac_Ip_PowerStateType PowerState)
{
  struct GMAC_Type * Base;

  <bb 2> :
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = (int) Instance;
  Base = Gmac_apxBases[_2];
  GMAC_SetPowerState (Base, PowerState);
  return;

}


Gmac_Ip_GetPowerState (uint8 Instance)
{
  const struct GMAC_Type * Base;
  Gmac_Ip_PowerStateType D.7768;

  <bb 2> :
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = (int) Instance;
  Base = Gmac_apxBases[_2];
  D.7768 = GMAC_GetPowerState (Base);

  <bb 3> :
<L0>:
  return D.7768;

}


Gmac_Ip_Deinit (uint8 Instance)
{
  struct GMAC_Type * Base;

  <bb 2> :
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = (int) Instance;
  Base = Gmac_apxBases[_2];
  _3 = Base->DMA_MODE;
  _4 = _3 | 1;
  Base->DMA_MODE = _4;

  <bb 3> :
  _5 = (int) Instance;
  Gmac_apxState[_5] = 0B;
  return;

}


Gmac_Ip_EnableTimeGateScheduling (uint8 Instance, const boolean Enable)
{
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;
  boolean TimeoutOccurred;
  boolean SwitchToSWList;
  Gmac_Ip_StatusType Status;
  Gmac_Ip_StatusType D.7763;

  <bb 2> :
  Status = 0;
  SwitchToSWList = 0;
  TimeoutOccurred = 0;
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = (int) Instance;
  _3 = Gmac_apxBases[_2];
  _4 = _3->MTL_EST_CONTROL;
  _5 = _4 & 1;
  if (_5 != 1)
    goto <bb 3>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 3> :
  if (Enable != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 4> :
  Status = Gmac_Ip_ConfigTimeGateScheduling (Instance);
  _6 = (int) Instance;
  _7 = Gmac_apxBases[_6];
  _8 = _7->MTL_EST_CONTROL;
  _9 = (int) Instance;
  _10 = Gmac_apxBases[_9];
  _11 = _8 | 4099;
  _10->MTL_EST_CONTROL = _11;
  GMAC_StartTimeOut (&StartTime, &ElapsedTime, &TimeoutTicks, 1000);

  <bb 5> :
  _12 = (int) Instance;
  _13 = Gmac_apxBases[_12];
  _14 = _13->MTL_EST_CONTROL;
  _15 = _14 & 2;
  SwitchToSWList = _15 == 0;
  TimeoutTicks.25_16 = TimeoutTicks;
  TimeoutOccurred = GMAC_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.25_16);
  _17 = ~SwitchToSWList;
  if (_17 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _18 = ~TimeoutOccurred;
  if (_18 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _19 = ~TimeoutOccurred;
  if (_19 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  if (Status != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  _20 = (int) Instance;
  _21 = Gmac_apxBases[_20];
  _22 = _21->MTL_EST_STATUS;
  _23 = _22 & 2;
  if (_23 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 10> :
  Status = 1;
  goto <bb 13>; [INV]

  <bb 11> :
  _24 = ~Enable;
  if (_24 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  _25 = (int) Instance;
  _26 = Gmac_apxBases[_25];
  _27 = _26->MTL_EST_CONTROL;
  _28 = (int) Instance;
  _29 = Gmac_apxBases[_28];
  _30 = _27 & 4294967294;
  _29->MTL_EST_CONTROL = _30;

  <bb 13> :
  D.7763 = Status;
  StartTime = {CLOBBER};
  ElapsedTime = {CLOBBER};
  TimeoutTicks = {CLOBBER};

  <bb 14> :
<L15>:
  return D.7763;

}


Gmac_Ip_Init (uint8 Instance, const struct Gmac_CtrlConfigType * Config)
{
  uint32 i;
  Gmac_Ip_StatusType Status;
  struct GMAC_Type * Base;
  Gmac_Ip_StatusType D.7749;
  int iftmp.24;
  int iftmp.23;
  int iftmp.22;
  int iftmp.21;

  <bb 2> :
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = Config != 0B;
  DevAssert (_2);
  _3 = Config->Gmac_pCtrlState;
  _4 = _3 != 0B;
  DevAssert (_4);
  _5 = Config->Gmac_pCtrlConfig;
  _6 = _5 != 0B;
  DevAssert (_6);
  _7 = Config->Gmac_paCtrlRxRingConfig;
  _8 = _7 != 0B;
  DevAssert (_8);
  _9 = Config->Gmac_paCtrlTxRingConfig;
  _10 = _9 != 0B;
  DevAssert (_10);
  _11 = Config->Gmac_pau8CtrlPhysAddr;
  _12 = _11 != 0B;
  DevAssert (_12);
  _13 = Config->Gmac_pCtrlConfig;
  _14 = _13->RxRingCount;
  if (_14 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _15 = Config->Gmac_pCtrlConfig;
  _16 = _15->RxRingCount;
  if (_16 <= 2)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  iftmp.21 = 1;
  goto <bb 6>; [INV]

  <bb 5> :
  iftmp.21 = 0;

  <bb 6> :
  _17 = (_Bool) iftmp.21;
  DevAssert (_17);
  _18 = Config->Gmac_pCtrlConfig;
  _19 = _18->TxRingCount;
  if (_19 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  _20 = Config->Gmac_pCtrlConfig;
  _21 = _20->TxRingCount;
  if (_21 <= 2)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  iftmp.22 = 1;
  goto <bb 10>; [INV]

  <bb 9> :
  iftmp.22 = 0;

  <bb 10> :
  _22 = (_Bool) iftmp.22;
  DevAssert (_22);
  i = 0;
  goto <bb 16>; [INV]

  <bb 11> :
  _23 = Config->Gmac_paCtrlRxRingConfig;
  _24 = i * 24;
  _25 = _23 + _24;
  _26 = _25->RingDesc;
  _27 = _26 != 0B;
  DevAssert (_27);
  _28 = Config->Gmac_paCtrlRxRingConfig;
  _29 = i * 24;
  _30 = _28 + _29;
  _31 = _30->RingSize;
  _32 = _31 > 1;
  DevAssert (_32);
  _33 = Config->Gmac_paCtrlRxRingConfig;
  _34 = i * 24;
  _35 = _33 + _34;
  _36 = _35->RingDesc;
  _37 = (long unsigned int) _36;
  _38 = _37 & 3;
  _39 = _38 == 0;
  DevAssert (_39);
  _40 = Config->Gmac_paCtrlRxRingConfig;
  _41 = i * 24;
  _42 = _40 + _41;
  _43 = _42->Buffer;
  if (_43 == 0B)
    goto <bb 13>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  _44 = Config->Gmac_paCtrlRxRingConfig;
  _45 = i * 24;
  _46 = _44 + _45;
  _47 = _46->Buffer;
  _48 = (long unsigned int) _47;
  _49 = _48 & 63;
  if (_49 == 0)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  iftmp.23 = 1;
  goto <bb 15>; [INV]

  <bb 14> :
  iftmp.23 = 0;

  <bb 15> :
  _50 = (_Bool) iftmp.23;
  DevAssert (_50);
  _51 = Config->Gmac_paCtrlRxRingConfig;
  _52 = i * 24;
  _53 = _51 + _52;
  _54 = _53->BufferLen;
  _55 = (long unsigned int) _54;
  _56 = _55 & 3;
  _57 = _56 == 0;
  DevAssert (_57);
  _58 = Config->Gmac_paCtrlRxRingConfig;
  _59 = i * 24;
  _60 = _58 + _59;
  _61 = _60->RingSize;
  _62 = (long unsigned int) _61;
  _63 = Config->Gmac_paCtrlRxRingConfig;
  _64 = i * 24;
  _65 = _63 + _64;
  _66 = _65->BufferLen;
  _67 = (long unsigned int) _66;
  _68 = _62 * _67;
  _69 = _68 & 255;
  _70 = _69 == 0;
  DevAssert (_70);
  i = i + 1;

  <bb 16> :
  _71 = Config->Gmac_pCtrlConfig;
  _72 = _71->RxRingCount;
  _73 = (long unsigned int) _72;
  if (i < _73)
    goto <bb 11>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 17> :
  i = 0;
  goto <bb 23>; [INV]

  <bb 18> :
  _74 = Config->Gmac_paCtrlTxRingConfig;
  _75 = i * 48;
  _76 = _74 + _75;
  _77 = _76->RingDesc;
  _78 = _77 != 0B;
  DevAssert (_78);
  _79 = Config->Gmac_paCtrlTxRingConfig;
  _80 = i * 48;
  _81 = _79 + _80;
  _82 = _81->RingSize;
  _83 = _82 > 1;
  DevAssert (_83);
  _84 = Config->Gmac_paCtrlTxRingConfig;
  _85 = i * 48;
  _86 = _84 + _85;
  _87 = _86->RingDesc;
  _88 = (long unsigned int) _87;
  _89 = _88 & 3;
  _90 = _89 == 0;
  DevAssert (_90);
  _91 = Config->Gmac_paCtrlTxRingConfig;
  _92 = i * 48;
  _93 = _91 + _92;
  _94 = _93->Buffer;
  if (_94 == 0B)
    goto <bb 20>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 19> :
  _95 = Config->Gmac_paCtrlTxRingConfig;
  _96 = i * 48;
  _97 = _95 + _96;
  _98 = _97->Buffer;
  _99 = (long unsigned int) _98;
  _100 = _99 & 63;
  if (_100 == 0)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  iftmp.24 = 1;
  goto <bb 22>; [INV]

  <bb 21> :
  iftmp.24 = 0;

  <bb 22> :
  _101 = (_Bool) iftmp.24;
  DevAssert (_101);
  _102 = Config->Gmac_paCtrlTxRingConfig;
  _103 = i * 48;
  _104 = _102 + _103;
  _105 = _104->BufferLen;
  _106 = (long unsigned int) _105;
  _107 = _106 & 3;
  _108 = _107 == 0;
  DevAssert (_108);
  _109 = Config->Gmac_paCtrlTxRingConfig;
  _110 = i * 48;
  _111 = _109 + _110;
  _112 = _111->RingSize;
  _113 = (long unsigned int) _112;
  _114 = Config->Gmac_paCtrlTxRingConfig;
  _115 = i * 48;
  _116 = _114 + _115;
  _117 = _116->BufferLen;
  _118 = (long unsigned int) _117;
  _119 = _113 * _118;
  _120 = _119 & 255;
  _121 = _120 == 0;
  DevAssert (_121);
  i = i + 1;

  <bb 23> :
  _122 = Config->Gmac_pCtrlConfig;
  _123 = _122->TxRingCount;
  _124 = (long unsigned int) _123;
  if (i < _124)
    goto <bb 18>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 24> :
  _125 = (int) Instance;
  Base = Gmac_apxBases[_125];

  <bb 25> :
  Status = Gmac_Ip_InitDMA (Instance, Config);
  if (Status == 0)
    goto <bb 26>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 26> :
  _126 = Config->Gmac_pCtrlConfig;
  Gmac_Ip_InitSafetyEvents (Base, _126);
  Gmac_Ip_InitMTL (Instance, Config);
  _127 = Config->Gmac_pau8CtrlPhysAddr;
  Gmac_Ip_SetMacAddr (Instance, _127);
  Gmac_Ip_InitMAC (Base, Config);
  Gmac_Ip_InitStateStructure (Instance, Config);
  Gmac_Ip_TxTimeAwareShaperInit (Instance, Config);

  <bb 27> :
  D.7749 = Status;

  <bb 28> :
<L26>:
  return D.7749;

}


Gmac_Ip_TxTimeAwareShaperInit (uint8 Instance, const struct Gmac_CtrlConfigType * Config)
{
  uint16 GateListNum;

  <bb 2> :
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = Config != 0B;
  DevAssert (_2);
  _3 = Config->Gmac_pCtrlTxTimeAwareShaper;
  _4 = _3 != 0B;
  DevAssert (_4);
  _5 = Config->Gmac_pCtrlTxTimeAwareShaper;
  _6 = (int) Instance;
  _7 = _5->ReleaseAdvanceTime;
  Gmac_Ip_TxTimeAwareShaperData[_6].ReleaseAdvanceTime = _7;
  _8 = Config->Gmac_pCtrlTxTimeAwareShaper;
  _9 = (int) Instance;
  _10 = _8->PreemptionClassic;
  Gmac_Ip_TxTimeAwareShaperData[_9].PreemptionClassic = _10;
  _11 = Config->Gmac_pCtrlTxTimeAwareShaper;
  _12 = (int) Instance;
  _13 = _11->HoldAdvanceTime;
  Gmac_Ip_TxTimeAwareShaperData[_12].HoldAdvanceTime = _13;
  _14 = Config->Gmac_pCtrlTxTimeAwareShaper;
  _15 = (int) Instance;
  _16 = _14->GateControlDepth;
  Gmac_Ip_TxTimeAwareShaperData[_15].GateControlDepth = _16;
  GateListNum = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  _17 = Config->Gmac_pCtrlTxTimeAwareShaper;
  _18 = _17->GateControlList;
  _19 = (unsigned int) GateListNum;
  _20 = _19 * 8;
  _21 = _18 + _20;
  _22 = (int) Instance;
  _23 = Gmac_Ip_TxTimeAwareShaperData[_22].GateControlList;
  _24 = (unsigned int) GateListNum;
  _25 = _24 * 8;
  _26 = _23 + _25;
  _27 = _21->GateControl;
  _26->GateControl = _27;
  _28 = Config->Gmac_pCtrlTxTimeAwareShaper;
  _29 = _28->GateControlList;
  _30 = (unsigned int) GateListNum;
  _31 = _30 * 8;
  _32 = _29 + _31;
  _33 = (int) Instance;
  _34 = Gmac_Ip_TxTimeAwareShaperData[_33].GateControlList;
  _35 = (unsigned int) GateListNum;
  _36 = _35 * 8;
  _37 = _34 + _36;
  _38 = _32->TimeInterval;
  _37->TimeInterval = _38;
  GateListNum.20_39 = GateListNum;
  GateListNum = GateListNum.20_39 + 1;

  <bb 4> :
  _40 = (int) Instance;
  _41 = Gmac_Ip_TxTimeAwareShaperData[_40].GateControlDepth;
  if (GateListNum < _41)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  _42 = Config->Gmac_pCtrlTxTimeAwareShaper;
  _43 = (int) Instance;
  _44 = _42->BaseTimeSecond;
  Gmac_Ip_TxTimeAwareShaperData[_43].BaseTimeSecond = _44;
  _45 = Config->Gmac_pCtrlTxTimeAwareShaper;
  _46 = (int) Instance;
  _47 = _45->BaseTimeNanoSecond;
  Gmac_Ip_TxTimeAwareShaperData[_46].BaseTimeNanoSecond = _47;
  _48 = Config->Gmac_pCtrlTxTimeAwareShaper;
  _49 = (int) Instance;
  _50 = _48->CycleTimeSecond;
  Gmac_Ip_TxTimeAwareShaperData[_49].CycleTimeSecond = _50;
  _51 = Config->Gmac_pCtrlTxTimeAwareShaper;
  _52 = (int) Instance;
  _53 = _51->CycleTimeNanoSecond;
  Gmac_Ip_TxTimeAwareShaperData[_52].CycleTimeNanoSecond = _53;
  _54 = Config->Gmac_pCtrlTxTimeAwareShaper;
  _55 = (int) Instance;
  _56 = _54->ExtendedTime;
  Gmac_Ip_TxTimeAwareShaperData[_55].ExtendedTime = _56;
  return;

}


Gmac_Ip_GetPayloadType (uint32 PayloadTypeVal)
{
  Gmac_Ip_PayloadType PayloadType;
  Gmac_Ip_PayloadType D.7723;

  <bb 2> :
  if (PayloadTypeVal == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  PayloadType = 1;
  goto <bb 9>; [INV]

  <bb 4> :
  if (PayloadTypeVal == 2)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  PayloadType = 2;
  goto <bb 9>; [INV]

  <bb 6> :
  if (PayloadTypeVal == 3)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  PayloadType = 3;
  goto <bb 9>; [INV]

  <bb 8> :
  PayloadType = 0;

  <bb 9> :
  D.7723 = PayloadType;

  <bb 10> :
<L9>:
  return D.7723;

}


Gmac_Ip_CheckMTLEmpty (uint8 Instance, uint16 NumQueues, boolean IsTransmit)
{
  uint16 i;
  boolean QueueEmpty;
  boolean TimeoutOccurred;
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;
  Gmac_Ip_StatusType iftmp.19;
  Gmac_Ip_StatusType D.7707;

  <bb 2> :
  TimeoutOccurred = 0;
  i = 0;
  goto <bb 10>; [INV]

  <bb 3> :
  GMAC_StartTimeOut (&StartTime, &ElapsedTime, &TimeoutTicks, 1000);

  <bb 4> :
  if (IsTransmit != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _1 = (int) Instance;
  _2 = (int) i;
  _3 = Gmac_apxQueueBases[_1][_2];
  _4 = _3->MTL_TXQ_DEBUG;
  _5 = _4 & 16;
  QueueEmpty = _5 == 0;
  goto <bb 7>; [INV]

  <bb 6> :
  _6 = (int) Instance;
  _7 = (int) i;
  _8 = Gmac_apxQueueBases[_6][_7];
  _9 = _8->MTL_RXQ_DEBUG;
  _10 = _9 & 48;
  QueueEmpty = _10 == 0;

  <bb 7> :
  TimeoutTicks.17_11 = TimeoutTicks;
  TimeoutOccurred = GMAC_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.17_11);
  _12 = ~QueueEmpty;
  if (_12 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  _13 = ~TimeoutOccurred;
  if (_13 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  i.18_14 = i;
  i = i.18_14 + 1;

  <bb 10> :
  if (i < NumQueues)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  _15 = ~TimeoutOccurred;
  if (_15 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  if (TimeoutOccurred != 0)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  iftmp.19 = 3;
  goto <bb 15>; [INV]

  <bb 14> :
  iftmp.19 = 0;

  <bb 15> :
  D.7707 = iftmp.19;
  StartTime = {CLOBBER};
  ElapsedTime = {CLOBBER};
  TimeoutTicks = {CLOBBER};

  <bb 16> :
<L14>:
  return D.7707;

}


Gmac_Ip_RestoreRxDescr (uint8 Instance)
{
  uint32 j;
  uint32 i;
  struct Gmac_Ip_BufferDescriptorType * ListBd;
  uint32 iftmp.16;

  <bb 2> :
  i = 0;
  goto <bb 10>; [INV]

  <bb 3> :
  _1 = (int) Instance;
  _2 = Gmac_apxChBases[_1][i];
  _3 = _2->DMA_RXDESC_LIST_ADDRESS;
  ListBd = (struct Gmac_Ip_BufferDescriptorType *) _3;
  j = 0;
  goto <bb 8>; [INV]

  <bb 4> :
  _4 = j * 32;
  _5 = ListBd + _4;
  _6 = j * 32;
  _7 = ListBd + _6;
  _8 = _5->Info0;
  _7->Des0 = _8;
  _9 = j * 32;
  _10 = ListBd + _9;
  _11 = _10->Info1;
  _12 = j * 32;
  _13 = ListBd + _12;
  _14 = _11 & 4278190079;
  _13->Info1 = _14;
  _15 = j * 32;
  _16 = ListBd + _15;
  _17 = _16->Info0;
  if (_17 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  iftmp.16 = 3238002688;
  goto <bb 7>; [INV]

  <bb 6> :
  iftmp.16 = 1090519040;

  <bb 7> :
  _18 = j * 32;
  _19 = ListBd + _18;
  _19->Des3 = iftmp.16;
  j = j + 1;

  <bb 8> :
  _20 = (int) Instance;
  _21 = Gmac_apxChBases[_20][i];
  _22 = _21->DMA_RXDESC_RING_LENGTH;
  if (j <= _22)
    goto <bb 4>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  i = i + 1;

  <bb 10> :
  _23 = (int) Instance;
  _24 = Gmac_apxState[_23];
  _25 = _24->RxRingCount;
  _26 = (long unsigned int) _25;
  if (i < _26)
    goto <bb 3>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  return;

}


Gmac_Ip_RestoreTxDescr (uint8 Instance)
{
  uint32 j;
  uint32 i;
  struct Gmac_Ip_BufferDescriptorType * ListBd;

  <bb 2> :
  i = 0;
  goto <bb 9>; [INV]

  <bb 3> :
  _1 = (int) Instance;
  _2 = Gmac_apxChBases[_1][i];
  _3 = _2->DMA_TXDESC_LIST_ADDRESS;
  ListBd = (struct Gmac_Ip_BufferDescriptorType *) _3;
  j = 0;
  goto <bb 7>; [INV]

  <bb 4> :
  _4 = j * 32;
  _5 = ListBd + _4;
  _6 = _5->Info0;
  if (_6 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _7 = j * 32;
  _8 = ListBd + _7;
  _9 = j * 32;
  _10 = ListBd + _9;
  _11 = _8->Info0;
  _10->Des0 = _11;
  _12 = j * 32;
  _13 = ListBd + _12;
  _13->Info0 = 0;

  <bb 6> :
  _14 = j * 32;
  _15 = ListBd + _14;
  _16 = _15->Des3;
  _17 = j * 32;
  _18 = ListBd + _17;
  _19 = _16 & 2147483647;
  _18->Des3 = _19;
  _20 = j * 32;
  _21 = ListBd + _20;
  _22 = _21->Info1;
  _23 = j * 32;
  _24 = ListBd + _23;
  _25 = _22 & 4026531839;
  _24->Info1 = _25;
  j = j + 1;

  <bb 7> :
  _26 = (int) Instance;
  _27 = Gmac_apxChBases[_26][i];
  _28 = _27->DMA_TXDESC_RING_LENGTH;
  if (j <= _28)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  i = i + 1;

  <bb 9> :
  _29 = (int) Instance;
  _30 = Gmac_apxState[_29];
  _31 = _30->TxRingCount;
  _32 = (long unsigned int) _31;
  if (i < _32)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  return;

}


Gmac_Ip_RestoreRxCtxtDescr (struct Gmac_Ip_BufferDescriptorType * Bd)
{
  boolean restored;
  boolean D.7694;

  <bb 2> :
  restored = 0;
  _1 = Bd->Des3;
  _2 = (signed int) _1;
  _3 = _2 >= 0;
  DevAssert (_3);
  _4 = Bd->Des3;
  _5 = _4 & 1073741824;
  _6 = _5 != 0;
  DevAssert (_6);
  _7 = Bd->Info0;
  if (_7 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _8 = Bd->Info0;
  Bd->Des0 = _8;
  Bd->Des1 = 0;
  Bd->Des2 = 0;
  _9 = Bd->Info1;
  _10 = _9 & 4278190079;
  Bd->Info1 = _10;
  Bd->Des3 = 3238002688;
  restored = 1;

  <bb 4> :
  D.7694 = restored;

  <bb 5> :
<L2>:
  return D.7694;

}


Gmac_Ip_GetTimestamp (const struct GMAC_Type * Base, const struct Gmac_Ip_BufferDescriptorType * Bd, struct Gmac_Ip_TimestampType * Timestamp)
{
  uint32 BdSec;
  uint32 CurrTimeSec;
  uint16 CurrTimeSecHi;

  <bb 2> :
  _1 = Bd->Des3;
  _2 = _1 & 131072;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  CurrTimeSec = Base->MAC_SYSTEM_TIME_SECONDS;
  _3 = Base->MAC_SYSTEM_TIME_HIGHER_WORD_SECONDS;
  CurrTimeSecHi = (uint16) _3;
  BdSec = Bd->Des1;
  if (BdSec <= CurrTimeSec)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Timestamp->secondsHi = CurrTimeSecHi;
  goto <bb 6>; [INV]

  <bb 5> :
  _4 = CurrTimeSecHi + 65535;
  Timestamp->secondsHi = _4;

  <bb 6> :
  Timestamp->seconds = BdSec;
  _5 = Bd->Des0;
  Timestamp->nanoseconds = _5;
  goto <bb 8>; [INV]

  <bb 7> :
  Timestamp->secondsHi = 0;
  Timestamp->seconds = 0;
  Timestamp->nanoseconds = 0;

  <bb 8> :
  return;

}


Gmac_Ip_InitRxBD (uint8 Instance, const struct Gmac_Ip_ConfigType * Config, const struct Gmac_Ip_RxRingConfigType * RxRingConfig)
{
  uint16 j;
  uint8 i;
  long unsigned int iftmp.14;
  long unsigned int iftmp.13;

  <bb 2> :
  i = 0;
  goto <bb 21>; [INV]

  <bb 3> :
  j = 0;
  goto <bb 8>; [INV]

  <bb 4> :
  _1 = (unsigned int) i;
  _2 = _1 * 24;
  _3 = RxRingConfig + _2;
  _4 = _3->Buffer;
  if (_4 != 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _5 = (unsigned int) i;
  _6 = _5 * 24;
  _7 = RxRingConfig + _6;
  _8 = _7->Buffer;
  _9 = (unsigned int) i;
  _10 = _9 * 24;
  _11 = RxRingConfig + _10;
  _12 = _11->BufferLen;
  _13 = (int) _12;
  _14 = (int) j;
  _15 = _13 * _14;
  _16 = (sizetype) _15;
  _17 = _8 + _16;
  _18 = (unsigned int) i;
  _19 = _18 * 24;
  _20 = RxRingConfig + _19;
  _21 = _20->RingDesc;
  _22 = (unsigned int) j;
  _23 = _22 * 32;
  _24 = _21 + _23;
  _25 = (long unsigned int) _17;
  _24->Des0 = _25;
  _26 = (unsigned int) i;
  _27 = _26 * 24;
  _28 = RxRingConfig + _27;
  _29 = _28->RingDesc;
  _30 = (unsigned int) j;
  _31 = _30 * 32;
  _32 = _29 + _31;
  _32->Des1 = 0;
  _33 = (unsigned int) i;
  _34 = _33 * 24;
  _35 = RxRingConfig + _34;
  _36 = _35->RingDesc;
  _37 = (unsigned int) j;
  _38 = _37 * 32;
  _39 = _36 + _38;
  _39->Des2 = 0;
  _40 = (unsigned int) i;
  _41 = _40 * 24;
  _42 = RxRingConfig + _41;
  _43 = _42->RingDesc;
  _44 = (unsigned int) j;
  _45 = _44 * 32;
  _46 = _43 + _45;
  _47 = (unsigned int) i;
  _48 = _47 * 24;
  _49 = RxRingConfig + _48;
  _50 = _49->RingDesc;
  _51 = (unsigned int) j;
  _52 = _51 * 32;
  _53 = _50 + _52;
  _54 = _46->Des0;
  _53->Info0 = _54;
  _55 = (unsigned int) i;
  _56 = _55 * 24;
  _57 = RxRingConfig + _56;
  _58 = _57->BufferLen;
  _59 = (long unsigned int) _58;
  _60 = (unsigned int) i;
  _61 = _60 * 24;
  _62 = RxRingConfig + _61;
  _63 = _62->RingDesc;
  _64 = (unsigned int) j;
  _65 = _64 * 32;
  _66 = _63 + _65;
  _67 = _59 & 16383;
  _66->Info1 = _67;
  _68 = (unsigned int) i;
  _69 = _68 * 24;
  _70 = RxRingConfig + _69;
  _71 = _70->RingDesc;
  _72 = (unsigned int) j;
  _73 = _72 * 32;
  _74 = _71 + _73;
  _74->Des3 = 3238002688;
  goto <bb 7>; [INV]

  <bb 6> :
  _75 = (unsigned int) i;
  _76 = _75 * 24;
  _77 = RxRingConfig + _76;
  _78 = _77->RingDesc;
  _79 = (unsigned int) j;
  _80 = _79 * 32;
  _81 = _78 + _80;
  _81->Des0 = 0;
  _82 = (unsigned int) i;
  _83 = _82 * 24;
  _84 = RxRingConfig + _83;
  _85 = _84->RingDesc;
  _86 = (unsigned int) j;
  _87 = _86 * 32;
  _88 = _85 + _87;
  _88->Des1 = 0;
  _89 = (unsigned int) i;
  _90 = _89 * 24;
  _91 = RxRingConfig + _90;
  _92 = _91->RingDesc;
  _93 = (unsigned int) j;
  _94 = _93 * 32;
  _95 = _92 + _94;
  _95->Des2 = 0;
  _96 = (unsigned int) i;
  _97 = _96 * 24;
  _98 = RxRingConfig + _97;
  _99 = _98->RingDesc;
  _100 = (unsigned int) j;
  _101 = _100 * 32;
  _102 = _99 + _101;
  _102->Info0 = 0;
  _103 = (unsigned int) i;
  _104 = _103 * 24;
  _105 = RxRingConfig + _104;
  _106 = _105->BufferLen;
  _107 = (long unsigned int) _106;
  _108 = (unsigned int) i;
  _109 = _108 * 24;
  _110 = RxRingConfig + _109;
  _111 = _110->RingDesc;
  _112 = (unsigned int) j;
  _113 = _112 * 32;
  _114 = _111 + _113;
  _115 = _107 & 16383;
  _114->Info1 = _115;
  _116 = (unsigned int) i;
  _117 = _116 * 24;
  _118 = RxRingConfig + _117;
  _119 = _118->RingDesc;
  _120 = (unsigned int) j;
  _121 = _120 * 32;
  _122 = _119 + _121;
  _122->Des3 = 1090519040;

  <bb 7> :
  j.12_123 = j;
  j = j.12_123 + 1;

  <bb 8> :
  _124 = (unsigned int) i;
  _125 = _124 * 24;
  _126 = RxRingConfig + _125;
  _127 = _126->RingSize;
  if (j < _127)
    goto <bb 4>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  _128 = (unsigned int) i;
  _129 = _128 * 24;
  _130 = RxRingConfig + _129;
  _131 = _130->RingDesc;
  _132 = (unsigned int) i;
  _133 = _132 * 24;
  _134 = RxRingConfig + _133;
  _135 = _134->RingSize;
  _136 = (unsigned int) _135;
  _137 = _136 * 32;
  _138 = _131 + _137;
  _139 = (int) Instance;
  _140 = (int) i;
  _141 = Gmac_apxChBases[_139][_140];
  _142 = (long unsigned int) _138;
  _141->DMA_RXDESC_TAIL_POINTER = _142;
  _143 = (unsigned int) i;
  _144 = _143 * 24;
  _145 = RxRingConfig + _144;
  _146 = _145->RingDesc;
  _147 = (int) Instance;
  _148 = (int) i;
  _149 = Gmac_apxChBases[_147][_148];
  _150 = (long unsigned int) _146;
  _149->DMA_RXDESC_LIST_ADDRESS = _150;
  _151 = (unsigned int) i;
  _152 = _151 * 24;
  _153 = RxRingConfig + _152;
  _154 = _153->RingSize;
  _155 = (long unsigned int) _154;
  _156 = (int) Instance;
  _157 = (int) i;
  _158 = Gmac_apxChBases[_156][_157];
  _159 = _155 + 4294967295;
  _158->DMA_RXDESC_RING_LENGTH = _159;
  _160 = (unsigned int) i;
  _161 = _160 * 24;
  _162 = RxRingConfig + _161;
  _163 = _162->DmaBurstLength;
  if (_163 > 32)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  _164 = (int) Instance;
  _165 = (int) i;
  _166 = Gmac_apxChBases[_164][_165];
  _166->DMA_CONTROL = 1114112;
  _167 = (unsigned int) i;
  _168 = _167 * 24;
  _169 = RxRingConfig + _168;
  _170 = _169->DmaBurstLength;
  _171 = _170 / 8;
  _172 = (long unsigned int) _171;
  _173 = _172 << 16;
  _174 = _173 & 4128768;
  _175 = (unsigned int) i;
  _176 = _175 * 24;
  _177 = RxRingConfig + _176;
  _178 = _177->BufferLen;
  _179 = _178 >> 2;
  _180 = (long unsigned int) _179;
  _181 = _180 << 3;
  _182 = _181 & 32760;
  _183 = (int) Instance;
  _184 = (int) i;
  _185 = Gmac_apxChBases[_183][_184];
  _186 = _174 | _182;
  _185->DMA_RX_CONTROL = _186;
  goto <bb 12>; [INV]

  <bb 11> :
  _187 = (int) Instance;
  _188 = (int) i;
  _189 = Gmac_apxChBases[_187][_188];
  _189->DMA_CONTROL = 1048576;
  _190 = (unsigned int) i;
  _191 = _190 * 24;
  _192 = RxRingConfig + _191;
  _193 = _192->DmaBurstLength;
  _194 = (long unsigned int) _193;
  _195 = _194 << 16;
  _196 = _195 & 4128768;
  _197 = (unsigned int) i;
  _198 = _197 * 24;
  _199 = RxRingConfig + _198;
  _200 = _199->BufferLen;
  _201 = _200 >> 2;
  _202 = (long unsigned int) _201;
  _203 = _202 << 3;
  _204 = _203 & 32760;
  _205 = (int) Instance;
  _206 = (int) i;
  _207 = Gmac_apxChBases[_205][_206];
  _208 = _196 | _204;
  _207->DMA_RX_CONTROL = _208;

  <bb 12> :
  _209 = (int) Instance;
  _210 = (int) i;
  _211 = Gmac_apxChBases[_209][_210];
  _212 = _211->DMA_INTERRUPT_ENABLE;
  _213 = (unsigned int) i;
  _214 = _213 * 24;
  _215 = RxRingConfig + _214;
  _216 = _215->Interrupts;
  _217 = (unsigned int) i;
  _218 = _217 * 24;
  _219 = RxRingConfig + _218;
  _220 = _219->Interrupts;
  _221 = _220 & 2117;
  if (_221 != 0)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  iftmp.13 = 32768;
  goto <bb 15>; [INV]

  <bb 14> :
  iftmp.13 = 0;

  <bb 15> :
  _222 = iftmp.13 | _216;
  _223 = (unsigned int) i;
  _224 = _223 * 24;
  _225 = RxRingConfig + _224;
  _226 = _225->Interrupts;
  _227 = _226 & 13698;
  if (_227 != 0)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  iftmp.14 = 16384;
  goto <bb 18>; [INV]

  <bb 17> :
  iftmp.14 = 0;

  <bb 18> :
  _228 = iftmp.14 | _222;
  _229 = (int) Instance;
  _230 = (int) i;
  _231 = Gmac_apxChBases[_229][_230];
  _232 = _212 | _228;
  _231->DMA_INTERRUPT_ENABLE = _232;
  _233 = Config->EnableCtrl;
  if (_233 != 0)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  _234 = (int) Instance;
  _235 = (int) i;
  _236 = Gmac_apxChBases[_234][_235];
  _237 = _236->DMA_RX_CONTROL;
  _238 = (int) Instance;
  _239 = (int) i;
  _240 = Gmac_apxChBases[_238][_239];
  _241 = _237 | 1;
  _240->DMA_RX_CONTROL = _241;

  <bb 20> :
  i.15_242 = i;
  i = i.15_242 + 1;

  <bb 21> :
  _243 = Config->RxRingCount;
  if (i < _243)
    goto <bb 3>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 22> :
  return;

}


Gmac_Ip_InitTxBD (uint8 Instance, const struct Gmac_Ip_ConfigType * Config, const struct Gmac_Ip_TxRingConfigType * TxRingConfig)
{
  uint16 j;
  uint8 i;
  long unsigned int iftmp.10;
  long unsigned int iftmp.9;
  long unsigned int iftmp.7;

  <bb 2> :
  i = 0;
  goto <bb 21>; [INV]

  <bb 3> :
  j = 0;
  goto <bb 8>; [INV]

  <bb 4> :
  _1 = (unsigned int) i;
  _2 = _1 * 48;
  _3 = TxRingConfig + _2;
  _4 = _3->Buffer;
  if (_4 != 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _5 = (unsigned int) i;
  _6 = _5 * 48;
  _7 = TxRingConfig + _6;
  _8 = _7->Buffer;
  _9 = (unsigned int) i;
  _10 = _9 * 48;
  _11 = TxRingConfig + _10;
  _12 = _11->BufferLen;
  _13 = (int) _12;
  _14 = (int) j;
  _15 = _13 * _14;
  _16 = (sizetype) _15;
  _17 = _8 + _16;
  iftmp.7 = (long unsigned int) _17;
  goto <bb 7>; [INV]

  <bb 6> :
  iftmp.7 = 0;

  <bb 7> :
  _18 = (unsigned int) i;
  _19 = _18 * 48;
  _20 = TxRingConfig + _19;
  _21 = _20->RingDesc;
  _22 = (unsigned int) j;
  _23 = _22 * 32;
  _24 = _21 + _23;
  _24->Des0 = iftmp.7;
  _25 = (unsigned int) i;
  _26 = _25 * 48;
  _27 = TxRingConfig + _26;
  _28 = _27->RingDesc;
  _29 = (unsigned int) j;
  _30 = _29 * 32;
  _31 = _28 + _30;
  _31->Des1 = 0;
  _32 = (unsigned int) i;
  _33 = _32 * 48;
  _34 = TxRingConfig + _33;
  _35 = _34->RingDesc;
  _36 = (unsigned int) j;
  _37 = _36 * 32;
  _38 = _35 + _37;
  _38->Des2 = 0;
  _39 = (unsigned int) i;
  _40 = _39 * 48;
  _41 = TxRingConfig + _40;
  _42 = _41->RingDesc;
  _43 = (unsigned int) j;
  _44 = _43 * 32;
  _45 = _42 + _44;
  _45->Des3 = 0;
  _46 = (unsigned int) i;
  _47 = _46 * 48;
  _48 = TxRingConfig + _47;
  _49 = _48->RingDesc;
  _50 = (unsigned int) j;
  _51 = _50 * 32;
  _52 = _49 + _51;
  _52->Info0 = 0;
  _53 = (unsigned int) i;
  _54 = _53 * 48;
  _55 = TxRingConfig + _54;
  _56 = _55->BufferLen;
  _57 = (long unsigned int) _56;
  _58 = (unsigned int) i;
  _59 = _58 * 48;
  _60 = TxRingConfig + _59;
  _61 = _60->RingDesc;
  _62 = (unsigned int) j;
  _63 = _62 * 32;
  _64 = _61 + _63;
  _65 = _57 & 16383;
  _64->Info1 = _65;
  j.8_66 = j;
  j = j.8_66 + 1;

  <bb 8> :
  _67 = (unsigned int) i;
  _68 = _67 * 48;
  _69 = TxRingConfig + _68;
  _70 = _69->RingSize;
  if (j < _70)
    goto <bb 4>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  _71 = (unsigned int) i;
  _72 = _71 * 48;
  _73 = TxRingConfig + _72;
  _74 = _73->RingDesc;
  _75 = (int) Instance;
  _76 = (int) i;
  _77 = Gmac_apxChBases[_75][_76];
  _78 = (long unsigned int) _74;
  _77->DMA_TXDESC_TAIL_POINTER = _78;
  _79 = (unsigned int) i;
  _80 = _79 * 48;
  _81 = TxRingConfig + _80;
  _82 = _81->RingDesc;
  _83 = (int) Instance;
  _84 = (int) i;
  _85 = Gmac_apxChBases[_83][_84];
  _86 = (long unsigned int) _82;
  _85->DMA_TXDESC_LIST_ADDRESS = _86;
  _87 = (unsigned int) i;
  _88 = _87 * 48;
  _89 = TxRingConfig + _88;
  _90 = _89->RingSize;
  _91 = (long unsigned int) _90;
  _92 = (int) Instance;
  _93 = (int) i;
  _94 = Gmac_apxChBases[_92][_93];
  _95 = _91 + 4294967295;
  _94->DMA_TXDESC_RING_LENGTH = _95;
  _96 = (unsigned int) i;
  _97 = _96 * 48;
  _98 = TxRingConfig + _97;
  _99 = _98->DmaBurstLength;
  if (_99 > 32)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  _100 = (int) Instance;
  _101 = (int) i;
  _102 = Gmac_apxChBases[_100][_101];
  _102->DMA_CONTROL = 1114112;
  _103 = (unsigned int) i;
  _104 = _103 * 48;
  _105 = TxRingConfig + _104;
  _106 = _105->DmaBurstLength;
  _107 = _106 / 8;
  _108 = (long unsigned int) _107;
  _109 = _108 << 16;
  _110 = _109 & 4128768;
  _111 = (int) Instance;
  _112 = (int) i;
  _113 = Gmac_apxChBases[_111][_112];
  _114 = _110 | 16;
  _113->DMA_TX_CONTROL = _114;
  goto <bb 12>; [INV]

  <bb 11> :
  _115 = (int) Instance;
  _116 = (int) i;
  _117 = Gmac_apxChBases[_115][_116];
  _117->DMA_CONTROL = 1048576;
  _118 = (unsigned int) i;
  _119 = _118 * 48;
  _120 = TxRingConfig + _119;
  _121 = _120->DmaBurstLength;
  _122 = (long unsigned int) _121;
  _123 = _122 << 16;
  _124 = _123 & 4128768;
  _125 = (int) Instance;
  _126 = (int) i;
  _127 = Gmac_apxChBases[_125][_126];
  _128 = _124 | 16;
  _127->DMA_TX_CONTROL = _128;

  <bb 12> :
  _129 = (unsigned int) i;
  _130 = _129 * 48;
  _131 = TxRingConfig + _130;
  _132 = _131->Interrupts;
  _133 = (unsigned int) i;
  _134 = _133 * 48;
  _135 = TxRingConfig + _134;
  _136 = _135->Interrupts;
  _137 = _136 & 2117;
  if (_137 != 0)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  iftmp.9 = 32768;
  goto <bb 15>; [INV]

  <bb 14> :
  iftmp.9 = 0;

  <bb 15> :
  _138 = iftmp.9 | _132;
  _139 = (unsigned int) i;
  _140 = _139 * 48;
  _141 = TxRingConfig + _140;
  _142 = _141->Interrupts;
  _143 = _142 & 13698;
  if (_143 != 0)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  iftmp.10 = 16384;
  goto <bb 18>; [INV]

  <bb 17> :
  iftmp.10 = 0;

  <bb 18> :
  _144 = (int) Instance;
  _145 = (int) i;
  _146 = Gmac_apxChBases[_144][_145];
  _147 = iftmp.10 | _138;
  _146->DMA_INTERRUPT_ENABLE = _147;
  _148 = Config->EnableCtrl;
  if (_148 != 0)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  _149 = (int) Instance;
  _150 = (int) i;
  _151 = Gmac_apxChBases[_149][_150];
  _152 = _151->DMA_TX_CONTROL;
  _153 = (int) Instance;
  _154 = (int) i;
  _155 = Gmac_apxChBases[_153][_154];
  _156 = _152 | 1;
  _155->DMA_TX_CONTROL = _156;

  <bb 20> :
  i.11_157 = i;
  i = i.11_157 + 1;

  <bb 21> :
  _158 = Config->TxRingCount;
  if (i < _158)
    goto <bb 3>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 22> :
  return;

}


Gmac_Ip_InitStateStructure (uint8 Instance, const struct Gmac_CtrlConfigType * Config)
{
  uint8 i;

  <bb 2> :
  _1 = Config->Gmac_pCtrlConfig;
  _2 = Config->Gmac_pCtrlState;
  _3 = _1->SafetyCallback;
  _2->SafetyCallback = _3;
  _4 = Config->Gmac_pCtrlConfig;
  _5 = Config->Gmac_pCtrlState;
  _6 = _4->Callback;
  _5->Callback = _6;
  _7 = Config->Gmac_pCtrlConfig;
  _8 = _7->RxRingCount;
  _9 = Config->Gmac_pCtrlState;
  _10 = (short unsigned int) _8;
  _9->RxRingCount = _10;
  _11 = Config->Gmac_pCtrlConfig;
  _12 = _11->TxRingCount;
  _13 = Config->Gmac_pCtrlState;
  _14 = (short unsigned int) _12;
  _13->TxRingCount = _14;
  i = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  _15 = Config->Gmac_paCtrlRxRingConfig;
  _16 = (unsigned int) i;
  _17 = _16 * 24;
  _18 = _15 + _17;
  _19 = Config->Gmac_pCtrlState;
  _20 = (int) i;
  _21 = _18->Callback;
  _19->RxChCallback[_20] = _21;
  _22 = Config->Gmac_paCtrlRxRingConfig;
  _23 = (unsigned int) i;
  _24 = _23 * 24;
  _25 = _22 + _24;
  _26 = Config->Gmac_pCtrlState;
  _27 = (int) i;
  _28 = _25->RingDesc;
  _26->RxCurrentDesc[_27] = _28;
  _29 = Config->Gmac_paCtrlRxRingConfig;
  _30 = (unsigned int) i;
  _31 = _30 * 24;
  _32 = _29 + _31;
  _33 = Config->Gmac_pCtrlState;
  _34 = (int) i;
  _35 = _32->RingDesc;
  _33->RxAllocDesc[_34] = _35;
  i.5_36 = i;
  i = i.5_36 + 1;

  <bb 4> :
  _37 = Config->Gmac_pCtrlConfig;
  _38 = _37->RxRingCount;
  if (i < _38)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  i = 0;
  goto <bb 7>; [INV]

  <bb 6> :
  _39 = Config->Gmac_paCtrlTxRingConfig;
  _40 = (unsigned int) i;
  _41 = _40 * 48;
  _42 = _39 + _41;
  _43 = Config->Gmac_pCtrlState;
  _44 = (int) i;
  _45 = _42->Callback;
  _43->TxChCallback[_44] = _45;
  _46 = Config->Gmac_paCtrlTxRingConfig;
  _47 = (unsigned int) i;
  _48 = _47 * 48;
  _49 = _46 + _48;
  _50 = Config->Gmac_pCtrlState;
  _51 = (int) i;
  _52 = _49->RingDesc;
  _50->TxCurrentDesc[_51] = _52;
  i.6_53 = i;
  i = i.6_53 + 1;

  <bb 7> :
  _54 = Config->Gmac_pCtrlConfig;
  _55 = _54->TxRingCount;
  if (i < _55)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  _56 = (int) Instance;
  _57 = Config->Gmac_pCtrlState;
  Gmac_apxState[_56] = _57;
  return;

}


Gmac_Ip_InitMAC (struct GMAC_Type * Base, const struct Gmac_CtrlConfigType * Config)
{
  <bb 2> :
  Base->MAC_Q0_TX_FLOW_CTRL = 0;
  _1 = Config->Gmac_pCtrlConfig;
  _2 = _1->Interrupts;
  Base->MAC_INTERRUPT_ENABLE = _2;
  _3 = Config->Gmac_pCtrlConfig;
  _4 = _3->MacConfig;
  Base->MAC_CONFIGURATION = _4;
  _5 = Config->Gmac_pCtrlConfig;
  _6 = _5->ExtendedMacConfig;
  Base->MAC_EXT_CONFIGURATION = _6;
  _7 = Base->MAC_CONFIGURATION;
  _8 = Config->Gmac_pCtrlConfig;
  _9 = _8->Speed;
  _10 = _9 << 14;
  _11 = _7 | _10;
  Base->MAC_CONFIGURATION = _11;
  _12 = Base->MAC_CONFIGURATION;
  _13 = Config->Gmac_pCtrlConfig;
  _14 = _13->Duplex;
  _15 = _14 << 13;
  _16 = _15 & 8192;
  _17 = _12 | _16;
  Base->MAC_CONFIGURATION = _17;
  _18 = Config->Gmac_pCtrlConfig;
  _19 = _18->EnableCtrl;
  if (_19 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _20 = Base->MAC_CONFIGURATION;
  _21 = _20 | 3;
  Base->MAC_CONFIGURATION = _21;

  <bb 4> :
  _22 = Config->Gmac_pCtrlConfig;
  _23 = _22->MacPktFilterConfig;
  Base->MAC_PACKET_FILTER = _23;
  Base->MMC_TX_INTERRUPT_MASK = 67108863;
  Base->MMC_RX_INTERRUPT_MASK = 67108863;
  return;

}


Gmac_Ip_InitMTL (uint8 Instance, const struct Gmac_CtrlConfigType * Config)
{
  uint8 i;
  uint32 FifoSize;

  <bb 2> :
  _1 = Config->Gmac_pCtrlConfig;
  _2 = _1->TxSchedAlgo;
  _3 = _2 << 5;
  _4 = (int) Instance;
  _5 = Gmac_apxBases[_4];
  _6 = _3 & 96;
  _5->MTL_OPERATION_MODE = _6;
  i = 0;
  goto <bb 10>; [INV]

  <bb 3> :
  _7 = Config->Gmac_paCtrlTxRingConfig;
  _8 = (unsigned int) i;
  _9 = _8 * 48;
  _10 = _7 + _9;
  _11 = _10->RingSize;
  _12 = (long unsigned int) _11;
  _13 = Config->Gmac_paCtrlTxRingConfig;
  _14 = (unsigned int) i;
  _15 = _14 * 48;
  _16 = _13 + _15;
  _17 = _16->BufferLen;
  _18 = (long unsigned int) _17;
  FifoSize = _12 * _18;
  _19 = Config->Gmac_paCtrlTxRingConfig;
  _20 = (unsigned int) i;
  _21 = _20 * 48;
  _22 = _19 + _21;
  _23 = _22->QueueOpMode;
  if (_23 == 2)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _24 = Config->Gmac_pCtrlConfig;
  _25 = _24->TxRingCount;
  if (_25 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _26 = (int) Instance;
  _27 = (int) i;
  _28 = Gmac_apxQueueBases[_26][_27];
  _29 = Config->Gmac_paCtrlTxRingConfig;
  _30 = (unsigned int) i;
  _31 = _30 * 48;
  _32 = _29 + _31;
  _33 = _32->Weight;
  GMAC_SetTxQueueQuantumWeight (_28, _33);
  goto <bb 9>; [INV]

  <bb 6> :
  _34 = Config->Gmac_paCtrlTxRingConfig;
  _35 = (unsigned int) i;
  _36 = _35 * 48;
  _37 = _34 + _36;
  _38 = _37->QueueOpMode;
  if (_38 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  if (i != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  _39 = (int) Instance;
  _40 = (int) i;
  _41 = Gmac_apxQueueBases[_39][_40];
  _42 = Config->Gmac_paCtrlTxRingConfig;
  _43 = (unsigned int) i;
  _44 = _43 * 48;
  _45 = _42 + _44;
  _46 = _45->IdleSlopeCredit;
  GMAC_SetTxQueueQuantumWeight (_41, _46);
  _47 = (int) Instance;
  _48 = (int) i;
  _49 = Gmac_apxQueueBases[_47][_48];
  _50 = Config->Gmac_paCtrlTxRingConfig;
  _51 = (unsigned int) i;
  _52 = _51 * 48;
  _53 = _50 + _52;
  _54 = _53->SendSlopeCredit;
  _55 = Config->Gmac_paCtrlTxRingConfig;
  _56 = (unsigned int) i;
  _57 = _56 * 48;
  _58 = _55 + _57;
  _59 = _58->HiCredit;
  _60 = Config->Gmac_paCtrlTxRingConfig;
  _61 = (unsigned int) i;
  _62 = _61 * 48;
  _63 = _60 + _62;
  _64 = _63->LoCredit;
  GMAC_SetTxQueueCreditBasedShaper (_49, _54, _59, _64);

  <bb 9> :
  _65 = (int) Instance;
  _66 = (int) i;
  _67 = Gmac_apxQueueBases[_65][_66];
  _68 = Config->Gmac_paCtrlTxRingConfig;
  _69 = (unsigned int) i;
  _70 = _69 * 48;
  _71 = _68 + _70;
  _72 = _71->QueueOpMode;
  GMAC_SetTxQueueOperationMode (_67, _72, FifoSize);
  i = i + 1;

  <bb 10> :
  _73 = Config->Gmac_pCtrlConfig;
  _74 = _73->TxRingCount;
  if (i < _74)
    goto <bb 3>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  _75 = (int) Instance;
  _76 = Gmac_apxBases[_75];
  _77 = _76->MTL_OPERATION_MODE;
  _78 = (int) Instance;
  _79 = Gmac_apxBases[_78];
  _80 = _77 & 4294967291;
  _79->MTL_OPERATION_MODE = _80;
  _81 = (int) Instance;
  _82 = Gmac_apxBases[_81];
  _83 = Config->Gmac_pCtrlConfig;
  _84 = _83->RxRingCount;
  GMAC_SetRxQueuesDmaChMap (_82, _84);
  i = 0;
  goto <bb 13>; [INV]

  <bb 12> :
  _85 = Config->Gmac_paCtrlRxRingConfig;
  _86 = (unsigned int) i;
  _87 = _86 * 24;
  _88 = _85 + _87;
  _89 = _88->RingSize;
  _90 = (long unsigned int) _89;
  _91 = Config->Gmac_paCtrlRxRingConfig;
  _92 = (unsigned int) i;
  _93 = _92 * 24;
  _94 = _91 + _93;
  _95 = _94->BufferLen;
  _96 = (long unsigned int) _95;
  FifoSize = _90 * _96;
  _97 = (int) Instance;
  _98 = (int) i;
  _99 = Gmac_apxQueueBases[_97][_98];
  GMAC_SetRxQueueOperationMode (_99, FifoSize);
  _100 = (int) Instance;
  _101 = Gmac_apxBases[_100];
  _102 = Config->Gmac_paCtrlRxRingConfig;
  _103 = (unsigned int) i;
  _104 = _103 * 24;
  _105 = _102 + _104;
  _106 = _105->PriorityMask;
  GMAC_EnableRxQueue (_101, _106, i);
  i = i + 1;

  <bb 13> :
  _107 = Config->Gmac_pCtrlConfig;
  _108 = _107->RxRingCount;
  if (i < _108)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 14> :
  return;

}


Gmac_Ip_ConfigTimeGateScheduling (uint8 Instance)
{
  uint64 TempTimeNanoSecond;
  uint64 TempTimeSecond;
  uint64 TempTimeHigher;
  uint64 CurrentTime;
  uint64 NewBaseTime;
  uint64 BaseTime;
  uint64 CycleTime;
  uint64 CycleFactor;
  uint32 WriteData;
  uint16 GateListNum;
  uint8 ErrorCnt;
  Gmac_Ip_StatusType Status;
  Gmac_Ip_StatusType D.7640;
  Gmac_Ip_StatusType iftmp.4;
  unsigned char D.7635;
  unsigned char D.7634;
  unsigned char D.7633;
  unsigned char D.7632;
  unsigned char D.7631;
  unsigned char D.7630;
  unsigned char D.7626;

  <bb 2> :
  ErrorCnt = 0;
  CurrentTime = 0;
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = (int) Instance;
  _3 = Gmac_Ip_TxTimeAwareShaperData[_2].ReleaseAdvanceTime;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _4 = (int) Instance;
  _5 = Gmac_apxBases[_4];
  _6 = _5->MAC_FPE_CTRL_STS;
  _7 = (int) Instance;
  _8 = Gmac_apxBases[_7];
  _9 = _6 | 1;
  _8->MAC_FPE_CTRL_STS = _9;
  _10 = (int) Instance;
  _11 = Gmac_Ip_TxTimeAwareShaperData[_10].PreemptionClassic;
  _12 = (long unsigned int) _11;
  _13 = _12 << 8;
  _14 = (int) Instance;
  _15 = Gmac_apxBases[_14];
  _16 = _13 & 768;
  _15->MTL_FPE_CTRL_STS = _16;
  _17 = (int) Instance;
  _18 = Gmac_Ip_TxTimeAwareShaperData[_17].HoldAdvanceTime;
  _19 = (long unsigned int) _18;
  _20 = (int) Instance;
  _21 = Gmac_Ip_TxTimeAwareShaperData[_20].ReleaseAdvanceTime;
  _22 = (long unsigned int) _21;
  _23 = _22 << 16;
  _24 = (int) Instance;
  _25 = Gmac_apxBases[_24];
  _26 = _19 | _23;
  _25->MTL_FPE_ADVANCE = _26;

  <bb 4> :
  GateListNum = 0;
  goto <bb 6>; [INV]

  <bb 5> :
  _27 = (int) Instance;
  _28 = Gmac_Ip_TxTimeAwareShaperData[_27].GateControlList;
  _29 = (unsigned int) GateListNum;
  _30 = _29 * 8;
  _31 = _28 + _30;
  _32 = _31->GateControl;
  _33 = (long unsigned int) _32;
  _34 = _33 << 24;
  _35 = (int) Instance;
  _36 = Gmac_Ip_TxTimeAwareShaperData[_35].GateControlList;
  _37 = (unsigned int) GateListNum;
  _38 = _37 * 8;
  _39 = _36 + _38;
  _40 = _39->TimeInterval;
  WriteData = _34 | _40;
  D.7626 = Gmac_Ip_WriteGateControlList (Instance, GateListNum, WriteData, 1);
  ErrorCnt = D.7626 + ErrorCnt;
  GateListNum.3_41 = GateListNum;
  GateListNum = GateListNum.3_41 + 1;

  <bb 6> :
  _42 = (int) Instance;
  _43 = Gmac_Ip_TxTimeAwareShaperData[_42].GateControlDepth;
  if (GateListNum < _43)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _44 = (int) Instance;
  _45 = Gmac_apxBases[_44];
  _46 = _45->MAC_SYSTEM_TIME_HIGHER_WORD_SECONDS;
  _47 = (long long unsigned int) _46;
  TempTimeHigher = _47 * 1000000000;
  _48 = (int) Instance;
  _49 = Gmac_apxBases[_48];
  _50 = _49->MAC_SYSTEM_TIME_SECONDS;
  _51 = (long long unsigned int) _50;
  TempTimeSecond = _51 * 1000000000;
  _52 = (int) Instance;
  _53 = Gmac_apxBases[_52];
  _54 = _53->MAC_SYSTEM_TIME_NANOSECONDS;
  TempTimeNanoSecond = (uint64) _54;
  _55 = (int) Instance;
  _56 = Gmac_Ip_TxTimeAwareShaperData[_55].BaseTimeSecond;
  _57 = (long long unsigned int) _56;
  _58 = _57 * 1000000000;
  _59 = (int) Instance;
  _60 = Gmac_Ip_TxTimeAwareShaperData[_59].BaseTimeNanoSecond;
  _61 = (long long unsigned int) _60;
  BaseTime = _58 + _61;
  _62 = TempTimeHigher + TempTimeSecond;
  CurrentTime = TempTimeNanoSecond + _62;
  _63 = (int) Instance;
  _64 = Gmac_Ip_TxTimeAwareShaperData[_63].CycleTimeSecond;
  _65 = (long long unsigned int) _64;
  _66 = _65 * 1000000000;
  _67 = (int) Instance;
  _68 = Gmac_Ip_TxTimeAwareShaperData[_67].CycleTimeNanoSecond;
  _69 = (long long unsigned int) _68;
  CycleTime = _66 + _69;
  if (BaseTime >= CurrentTime)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  NewBaseTime = BaseTime;
  goto <bb 10>; [INV]

  <bb 9> :
  _70 = CurrentTime - BaseTime;
  CycleFactor = _70 / CycleTime;
  _71 = CycleFactor + 1;
  _72 = CycleTime * _71;
  NewBaseTime = BaseTime + _72;

  <bb 10> :
  _73 = (long unsigned int) NewBaseTime;
  _74 = _73 / 1000000000;
  D.7630 = Gmac_Ip_WriteGateControlList (Instance, 1, _74, 0);
  ErrorCnt = D.7630 + ErrorCnt;
  _75 = (long unsigned int) NewBaseTime;
  _76 = _75 % 1000000000;
  D.7631 = Gmac_Ip_WriteGateControlList (Instance, 0, _76, 0);
  ErrorCnt = D.7631 + ErrorCnt;
  _77 = (int) Instance;
  _78 = Gmac_Ip_TxTimeAwareShaperData[_77].CycleTimeSecond;
  D.7632 = Gmac_Ip_WriteGateControlList (Instance, 3, _78, 0);
  ErrorCnt = D.7632 + ErrorCnt;
  _79 = (int) Instance;
  _80 = Gmac_Ip_TxTimeAwareShaperData[_79].CycleTimeNanoSecond;
  D.7633 = Gmac_Ip_WriteGateControlList (Instance, 2, _80, 0);
  ErrorCnt = D.7633 + ErrorCnt;
  _81 = (int) Instance;
  _82 = Gmac_Ip_TxTimeAwareShaperData[_81].ExtendedTime;
  D.7634 = Gmac_Ip_WriteGateControlList (Instance, 4, _82, 0);
  ErrorCnt = D.7634 + ErrorCnt;
  _83 = (int) Instance;
  _84 = Gmac_Ip_TxTimeAwareShaperData[_83].GateControlDepth;
  _85 = (long unsigned int) _84;
  D.7635 = Gmac_Ip_WriteGateControlList (Instance, 5, _85, 0);
  ErrorCnt = D.7635 + ErrorCnt;
  _86 = (int) Instance;
  _87 = Gmac_apxBases[_86];
  _88 = _87->MTL_EST_CONTROL;
  _89 = (int) Instance;
  _90 = Gmac_apxBases[_89];
  _91 = _88 | 16;
  _90->MTL_EST_CONTROL = _91;
  if (ErrorCnt != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  iftmp.4 = 3;
  goto <bb 13>; [INV]

  <bb 12> :
  iftmp.4 = 0;

  <bb 13> :
  Status = iftmp.4;
  D.7640 = Status;

  <bb 14> :
<L11>:
  return D.7640;

}


Gmac_Ip_WriteGateControlList (uint8 Instance, uint16 AddrGateList, uint32 Data, boolean IsGCLA)
{
  uint8 u8ErrorNum;
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;
  Gmac_Ip_StatusType Status;
  uint8 D.7618;

  <bb 2> :
  Status = 3;
  u8ErrorNum = 0;
  _1 = Instance == 0;
  DevAssert (_1);
  _2 = (int) Instance;
  _3 = Gmac_apxBases[_2];
  _3->MTL_EST_GCL_DATA = Data;
  _4 = (long unsigned int) AddrGateList;
  _5 = _4 << 8;
  _6 = (int) Instance;
  _7 = Gmac_apxBases[_6];
  _8 = _5 & 65535;
  _7->MTL_EST_GCL_CONTROL = _8;
  _9 = ~IsGCLA;
  if (_9 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _10 = (int) Instance;
  _11 = Gmac_apxBases[_10];
  _12 = _11->MTL_EST_GCL_CONTROL;
  _13 = (int) Instance;
  _14 = Gmac_apxBases[_13];
  _15 = _12 | 4;
  _14->MTL_EST_GCL_CONTROL = _15;
  goto <bb 5>; [INV]

  <bb 4> :
  _16 = (int) Instance;
  _17 = Gmac_apxBases[_16];
  _18 = _17->MTL_EST_GCL_CONTROL;
  _19 = (int) Instance;
  _20 = Gmac_apxBases[_19];
  _21 = _18 & 4294967291;
  _20->MTL_EST_GCL_CONTROL = _21;

  <bb 5> :
  _22 = (int) Instance;
  _23 = Gmac_apxBases[_22];
  _24 = (int) Instance;
  _25 = Gmac_apxBases[_24];
  _26 = _23->MTL_EST_GCL_CONTROL;
  _25->MTL_EST_GCL_CONTROL = _26;
  _27 = (int) Instance;
  _28 = Gmac_apxBases[_27];
  _29 = _28->MTL_EST_GCL_CONTROL;
  _30 = (int) Instance;
  _31 = Gmac_apxBases[_30];
  _32 = _29 | 1;
  _31->MTL_EST_GCL_CONTROL = _32;
  GMAC_StartTimeOut (&StartTime, &ElapsedTime, &TimeoutTicks, 1000);

  <bb 6> :
  _33 = (int) Instance;
  _34 = Gmac_apxBases[_33];
  _35 = _34->MTL_EST_GCL_CONTROL;
  _36 = _35 & 1;
  if (_36 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Status = 0;
  goto <bb 9>; [INV]

  <bb 8> :
  TimeoutTicks.1_37 = TimeoutTicks;
  _38 = GMAC_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.1_37);
  _39 = ~_38;
  if (_39 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  _40 = Status == 3;
  u8ErrorNum = (uint8) _40;
  D.7618 = u8ErrorNum;
  StartTime = {CLOBBER};
  ElapsedTime = {CLOBBER};
  TimeoutTicks = {CLOBBER};

  <bb 10> :
<L8>:
  return D.7618;

}


Gmac_Ip_InitSafetyEvents (struct GMAC_Type * Base, const struct Gmac_Ip_ConfigType * Config)
{
  <bb 2> :
  Base->MTL_ECC_INTERRUPT_ENABLE = 0;
  _1 = Config->SafetyInterrupts;
  _2 = _1 & 2;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _3 = Base->MTL_ECC_CONTROL;
  _4 = _3 | 7;
  Base->MTL_ECC_CONTROL = _4;
  goto <bb 5>; [INV]

  <bb 4> :
  _5 = Base->MTL_ECC_CONTROL;
  _6 = _5 & 4294967288;
  Base->MTL_ECC_CONTROL = _6;

  <bb 5> :
  _7 = Config->SafetyInterrupts;
  _8 = _7 & 16;
  if (_8 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _9 = Base->MTL_DPP_CONTROL;
  _10 = _9 | 3;
  Base->MTL_DPP_CONTROL = _10;
  goto <bb 8>; [INV]

  <bb 7> :
  _11 = Base->MTL_DPP_CONTROL;
  _12 = _11 & 4294967292;
  Base->MTL_DPP_CONTROL = _12;

  <bb 8> :
  _13 = Config->SafetyInterrupts;
  _14 = _13 & 4;
  if (_14 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  _15 = Base->MAC_FSM_CONTROL;
  _16 = _15 | 2;
  Base->MAC_FSM_CONTROL = _16;
  goto <bb 11>; [INV]

  <bb 10> :
  _17 = Base->MAC_FSM_CONTROL;
  _18 = _17 & 4294967293;
  Base->MAC_FSM_CONTROL = _18;

  <bb 11> :
  _19 = Config->SafetyInterrupts;
  _20 = _19 & 8;
  if (_20 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  _21 = Base->MAC_FSM_ACT_TIMER;
  _22 = _21 & 4279238655;
  Base->MAC_FSM_ACT_TIMER = _22;
  _23 = Base->MAC_FSM_ACT_TIMER;
  _24 = _23 | 131152;
  Base->MAC_FSM_ACT_TIMER = _24;
  _25 = Base->MAC_FSM_CONTROL;
  _26 = _25 | 1;
  Base->MAC_FSM_CONTROL = _26;
  goto <bb 14>; [INV]

  <bb 13> :
  _27 = Base->MAC_FSM_CONTROL;
  _28 = _27 & 4294967294;
  Base->MAC_FSM_CONTROL = _28;

  <bb 14> :
  return;

}


Gmac_Ip_InitDMA (uint8 Instance, const struct Gmac_CtrlConfigType * Config)
{
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;
  Gmac_Ip_StatusType Status;
  struct GMAC_Type * Base;
  Gmac_Ip_StatusType D.7598;

  <bb 2> :
  Status = 3;
  _1 = (int) Instance;
  Base = Gmac_apxBases[_1];
  _2 = Base->DMA_MODE;
  _3 = _2 | 1;
  Base->DMA_MODE = _3;
  GMAC_StartTimeOut (&StartTime, &ElapsedTime, &TimeoutTicks, 1000);

  <bb 3> :
  _4 = Base->DMA_MODE;
  _5 = _4 & 1;
  if (_5 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Status = 0;
  goto <bb 6>; [INV]

  <bb 5> :
  TimeoutTicks.0_6 = TimeoutTicks;
  _7 = GMAC_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.0_6);
  _8 = ~_7;
  if (_8 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  if (Status == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Base->DMA_MODE = 65536;
  Base->DMA_SYSBUS_MODE = 4096;
  _9 = Config->Gmac_pCtrlConfig;
  _10 = Config->Gmac_paCtrlTxRingConfig;
  Gmac_Ip_InitTxBD (Instance, _9, _10);
  _11 = Config->Gmac_pCtrlConfig;
  _12 = Config->Gmac_paCtrlRxRingConfig;
  Gmac_Ip_InitRxBD (Instance, _11, _12);

  <bb 8> :
  D.7598 = Status;
  StartTime = {CLOBBER};
  ElapsedTime = {CLOBBER};
  TimeoutTicks = {CLOBBER};

  <bb 9> :
<L7>:
  return D.7598;

}


Gmac_Ip_ReadTimeStampInfo (uint8 Instance, uint8 Ring, struct Gmac_Ip_RxInfoType * Info)
{
  uint32 BdSec;
  uint32 CurrTimeSec;
  uint16 CurrTimeSecHi;
  struct Gmac_Ip_BufferDescriptorType * ListBd;
  const struct Gmac_Ip_BufferDescriptorType * Bd;
  const struct Gmac_Ip_ChannelType * ChBase;
  const struct GMAC_Type * Base;

  <bb 2> :
  _1 = (int) Instance;
  Base = Gmac_apxBases[_1];
  _2 = (int) Instance;
  _3 = (int) Ring;
  ChBase = Gmac_apxChBases[_2][_3];
  _4 = ChBase->DMA_RXDESC_LIST_ADDRESS;
  ListBd = (struct Gmac_Ip_BufferDescriptorType *) _4;
  _5 = (int) Instance;
  _6 = Gmac_apxState[_5];
  _7 = (int) Ring;
  Bd = _6->RxCurrentDesc[_7];
  _8 = Bd->Des1;
  _9 = _8 & 16384;
  if (_9 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 3> :
  _10 = Bd->Des3;
  _11 = _10 & 268435456;
  if (_11 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 4> :
  Bd = Bd + 32;
  _12 = (int) Instance;
  _13 = Gmac_apxState[_12];
  _14 = (int) Ring;
  _15 = _13->RxCurrentDesc[_14];
  _16 = _15 + 32;
  _13->RxCurrentDesc[_14] = _16;
  _17 = (int) Instance;
  _18 = Gmac_apxState[_17];
  _19 = (int) Ring;
  _20 = _18->RxCurrentDesc[_19];
  _21 = (long unsigned int) _20;
  _22 = ChBase->DMA_RXDESC_RING_LENGTH;
  _23 = _22 + 1;
  _24 = _23 * 32;
  _25 = ListBd + _24;
  _26 = (long unsigned int) _25;
  if (_21 >= _26)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _27 = (int) Instance;
  _28 = Gmac_apxState[_27];
  _29 = (int) Ring;
  _28->RxCurrentDesc[_29] = ListBd;
  Bd = ListBd;

  <bb 6> :
  CurrTimeSec = Base->MAC_SYSTEM_TIME_SECONDS;
  _30 = Base->MAC_SYSTEM_TIME_HIGHER_WORD_SECONDS;
  CurrTimeSecHi = (uint16) _30;
  BdSec = Bd->Des1;
  if (BdSec <= CurrTimeSec)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Info->Timestamp.secondsHi = CurrTimeSecHi;
  goto <bb 9>; [INV]

  <bb 8> :
  _31 = CurrTimeSecHi + 65535;
  Info->Timestamp.secondsHi = _31;

  <bb 9> :
  Info->Timestamp.seconds = BdSec;
  _32 = Bd->Des0;
  Info->Timestamp.nanoseconds = _32;
  goto <bb 11>; [INV]

  <bb 10> :
  Info->Timestamp.secondsHi = 0;
  Info->Timestamp.seconds = 0;
  Info->Timestamp.nanoseconds = 0;

  <bb 11> :
  return;

}


Gmac_Ip_ComputeCRC32 (const uint8 * Mac, uint8 Size)
{
  uint32 j;
  uint32 i;
  uint32 Crc;
  uint32 D.7583;

  <bb 2> :
  Crc = 4294967295;
  i = 0;
  goto <bb 10>; [INV]

  <bb 3> :
  _1 = Mac + i;
  _2 = *_1;
  _3 = (long unsigned int) _2;
  Crc = Crc ^ _3;
  j = 0;
  goto <bb 8>; [INV]

  <bb 4> :
  _4 = Crc & 1;
  if (_4 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _5 = Crc >> 1;
  Crc = _5 ^ 3988292384;
  goto <bb 7>; [INV]

  <bb 6> :
  Crc = Crc >> 1;

  <bb 7> :
  j = j + 1;

  <bb 8> :
  if (j <= 7)
    goto <bb 4>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  i = i + 1;

  <bb 10> :
  _6 = (long unsigned int) Size;
  if (i < _6)
    goto <bb 3>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  D.7583 = ~Crc;

  <bb 12> :
<L9>:
  return D.7583;

}


DevAssert (volatile boolean x)
{
  <bb 2> :
  x.2_1 = x;
  if (x.2_1 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  __asm__ __volatile__("BKPT #0");
  goto <bb 3>; [INV]

  <bb 4> :
  return;

}


GMAC_ReadManagementFrameData (const struct GMAC_Type * Base)
{
  uint16 D.7911;

  <bb 2> :
  _1 = Base->MAC_MDIO_DATA;
  D.7911 = (uint16) _1;

  <bb 3> :
<L0>:
  return D.7911;

}


