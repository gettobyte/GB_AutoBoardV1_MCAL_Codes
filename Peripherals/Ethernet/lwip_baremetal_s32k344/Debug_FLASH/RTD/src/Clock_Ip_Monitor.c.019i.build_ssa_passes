Clock_Ip_CMU_ClockFailInt ()
{
  uint32 IndexCmu;
  uint32 CmuIsrValue;
  uint32 CmuIerValue;

  <bb 2> :
  CmuIsrValue = 0;
  IndexCmu = 0;
  goto <bb 8>; [INV]

  <bb 3> :
  _1 = Clock_Ip_apxCmu[IndexCmu];
  _2 = _1->SR;
  CmuIsrValue = _2 & 3;
  Clock_Ip_pxConfig.3_3 = Clock_Ip_pxConfig;
  if (Clock_Ip_pxConfig.3_3 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _4 = Clock_Ip_apxCmu[IndexCmu];
  _5 = _4->IER;
  CmuIerValue = _5 & 3;
  CmuIsrValue = CmuIsrValue & CmuIerValue;
  if (CmuIsrValue != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _6 = Clock_Ip_apxCmu[IndexCmu];
  _6->SR = CmuIsrValue;
  _7 = Clock_Ip_aeCmuNames[IndexCmu];
  Clock_Ip_ReportClockErrors (0, _7);
  goto <bb 7>; [INV]

  <bb 6> :
  _8 = Clock_Ip_apxCmu[IndexCmu];
  _8->SR = CmuIsrValue;

  <bb 7> :
  IndexCmu = IndexCmu + 1;

  <bb 8> :
  if (IndexCmu <= 6)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  return;

}


Clock_Ip_CMU_GetInterruptStatus (uint8 IndexCmu)
{
  uint32 CmuIsrValue;
  uint32 D.6697;

  <bb 2> :
  _1 = (int) IndexCmu;
  _2 = Clock_Ip_apxCmu[_1];
  _3 = _2->SR;
  CmuIsrValue = _3 & 3;
  D.6697 = CmuIsrValue;

  <bb 3> :
<L0>:
  return D.6697;

}


Clock_Ip_EnableCmuFcFceRefCntLfrefHfref (const struct Clock_Ip_CmuConfigType * Config)
{
  struct Clock_Ip_ClockMonitorType * CmuFc;
  const struct Clock_Ip_CmuInfoType * CmuInformation;

  <bb 2> :
  if (Config != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  _1 = Config->Name;
  _2 = Clock_Ip_au8ClockFeatures[_1][8];
  _3 = (int) _2;
  CmuInformation = &Clock_Ip_axCmuInfo[_3];
  CmuFc = CmuInformation->CmuInstance;
  _4 = Config->Enable;
  if (_4 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _5 = CmuFc->GCR;
  _6 = _5 | 1;
  CmuFc->GCR = _6;
  goto <bb 6>; [INV]

  <bb 5> :
  _7 = CmuFc->GCR;
  _8 = _7 & 4294967294;
  CmuFc->GCR = _8;

  <bb 6> :
  return;

}


Clock_Ip_SetCmuFcFceRefCntLfrefHfref (const struct Clock_Ip_CmuConfigType * Config, uint32 Index)
{
  uint32 ModuloValue;
  uint32 DividerResult;
  uint32 DivideBy;
  uint32 Cmp2;
  uint32 Cmp1;
  uint32 LfRef;
  uint32 HfRef;
  uint32 RefCount;
  uint32 BusClk;
  uint32 MonitoredClk;
  uint32 ReferenceClk;
  struct Clock_Ip_ClockMonitorType * CmuFc;
  const struct Clock_Ip_CmuInfoType * CmuInformation;

  <bb 2> :
  ReferenceClk = 0;
  MonitoredClk = 0;
  BusClk = 0;
  RefCount = 0;
  HfRef = 0;
  LfRef = 0;
  if (Config != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 3> :
  _1 = Config->Enable;
  if (_1 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 4> :
  _2 = Config->Name;
  _3 = Clock_Ip_au8ClockFeatures[_2][8];
  _4 = (int) _3;
  CmuInformation = &Clock_Ip_axCmuInfo[_4];
  CmuFc = CmuInformation->CmuInstance;
  _5 = HashCmu[Index];
  _6 = Config->Enable;
  _7 = (long unsigned int) _6;
  _8 = Config->Interrupt;
  _9 = _7 ^ _8;
  _10 = Config->MonitoredClockFrequency;
  _11 = _9 ^ _10;
  _12 = Config->Name;
  _13 = _11 ^ _12;
  if (_5 != _13)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 5> :
  _14 = Config->Enable;
  _15 = (long unsigned int) _14;
  _16 = Config->Interrupt;
  _17 = _15 ^ _16;
  _18 = Config->MonitoredClockFrequency;
  _19 = _17 ^ _18;
  _20 = Config->Name;
  _21 = _19 ^ _20;
  HashCmu[Index] = _21;
  Clock_Ip_pxConfig.1_22 = Clock_Ip_pxConfig;
  _23 = Clock_Ip_pxConfig.1_22->ConfiguredFrequencies;
  _24 = CmuInformation->Reference;
  _25 = Clock_Ip_FreqIds[_24];
  _26 = (int) _25;
  _27 = (*_23)[_26].ConfiguredFrequencyValue;
  ReferenceClk = _27 / 1000;
  Clock_Ip_pxConfig.2_28 = Clock_Ip_pxConfig;
  _29 = Clock_Ip_pxConfig.2_28->ConfiguredFrequencies;
  _30 = CmuInformation->Bus;
  _31 = Clock_Ip_FreqIds[_30];
  _32 = (int) _31;
  _33 = (*_29)[_32].ConfiguredFrequencyValue;
  BusClk = _33 / 1000;
  _34 = Config->MonitoredClockFrequency;
  MonitoredClk = _34 / 1000;
  if (ReferenceClk != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 6> :
  if (BusClk != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  if (MonitoredClk != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  _35 = ReferenceClk * 3;
  _36 = _35 / BusClk;
  Cmp1 = _36 + 1;
  _37 = ReferenceClk * 5;
  _38 = _37 / MonitoredClk;
  Cmp2 = _38 + 9;
  RefCount = MAX_EXPR <Cmp2, Cmp1>;
  RefCount = MAX_EXPR <RefCount, 80>;
  HfRef = MonitoredClk * 1011;
  DivideBy = ReferenceClk * 967;
  DividerResult = HfRef / DivideBy;
  _39 = DivideBy * DividerResult;
  ModuloValue = HfRef - _39;
  _40 = DividerResult * RefCount;
  _41 = ModuloValue * RefCount;
  _42 = _41 / DivideBy;
  HfRef = _40 + _42;
  HfRef = HfRef + 4;
  HfRef = MIN_EXPR <HfRef, 16777212>;
  LfRef = MonitoredClk * 989;
  DivideBy = ReferenceClk * 1033;
  DividerResult = LfRef / DivideBy;
  _43 = DivideBy * DividerResult;
  ModuloValue = LfRef - _43;
  _44 = DividerResult * RefCount;
  _45 = ModuloValue * RefCount;
  _46 = _45 / DivideBy;
  LfRef = _44 + _46;
  LfRef = LfRef + 4294967293;
  LfRef = MAX_EXPR <LfRef, 3>;
  CmuFc->RCCR = RefCount;
  CmuFc->HTCR = HfRef;
  CmuFc->LTCR = LfRef;

  <bb 9> :
  _47 = Config->Interrupt;
  CmuFc->IER = _47;

  <bb 10> :
  return;

}


Clock_Ip_ResetCmuFcFceRefCntLfrefHfref (const struct Clock_Ip_CmuConfigType * Config)
{
  <bb 2> :
  if (Config != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 = Config->Name;
  Clock_Ip_DisableCmuFcFceRefCntLfrefHfref (_1);

  <bb 4> :
  return;

}


Clock_Ip_DisableCmuFcFceRefCntLfrefHfref (Clock_Ip_NameType Name)
{
  uint32 FrequencyCheckStatus;
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;
  boolean TimeoutOccurred;
  struct Clock_Ip_ClockMonitorType * const CmuFc;
  const struct Clock_Ip_CmuInfoType * CmuInformation;

  <bb 2> :
  _1 = Clock_Ip_au8ClockFeatures[Name][8];
  _2 = (int) _1;
  CmuInformation = &Clock_Ip_axCmuInfo[_2];
  CmuFc = CmuInformation->CmuInstance;
  TimeoutOccurred = 0;
  SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01 ();
  _3 = CmuFc->GCR;
  _4 = _3 & 1;
  if (_4 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  Clock_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 4> :
  _5 = CmuFc->SR;
  FrequencyCheckStatus = _5 & 16;
  TimeoutTicks.0_6 = TimeoutTicks;
  TimeoutOccurred = Clock_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.0_6);
  if (FrequencyCheckStatus == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _7 = ~TimeoutOccurred;
  if (_7 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  if (TimeoutOccurred != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Clock_Ip_ReportClockErrors (1, Name);

  <bb 8> :
  _8 = CmuFc->GCR;
  _9 = _8 & 4294967294;
  CmuFc->GCR = _9;

  <bb 9> :
  _10 = CmuFc->IER;
  _11 = _10 & 4294967280;
  CmuFc->IER = _11;
  _12 = CmuFc->SR;
  _13 = _12 | 3;
  CmuFc->SR = _13;
  SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01 ();
  StartTime = {CLOBBER};
  ElapsedTime = {CLOBBER};
  TimeoutTicks = {CLOBBER};
  return;

}


Clock_Ip_ClockMonitorEmpty_Disable (Clock_Ip_NameType Name)
{
  <bb 2> :
  return;

}


Clock_Ip_ClockMonitorEmpty_Set (const struct Clock_Ip_CmuConfigType * Config, uint32 Index)
{
  <bb 2> :
  return;

}


Clock_Ip_ClockMonitorEmpty (const struct Clock_Ip_CmuConfigType * Config)
{
  <bb 2> :
  return;

}


