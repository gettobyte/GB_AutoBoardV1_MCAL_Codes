Symbol table:

Clock_Ip_apxPll/11 (Clock_Ip_apxPll) @06cc3b88
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_SetPllPll0divDeDivOutput/2 (read) Clock_Ip_SetPllPll0divDeDivOutput/2 (read) Clock_Ip_SetPllPlldvOdiv2Output/3 (read) Clock_Ip_SetPllPlldvOdiv2Output/3 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_ReportClockErrors/10 (Clock_Ip_ReportClockErrors) @06cc58c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Clock_Ip_SetCgmXDeDivStatWithoutPhase/1 
  Calls: 
Clock_Ip_TimeoutExpired/9 (Clock_Ip_TimeoutExpired) @06cc57e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Clock_Ip_SetCgmXDeDivStatWithoutPhase/1 
  Calls: 
Clock_Ip_StartTimeout/8 (Clock_Ip_StartTimeout) @06cc5700
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Clock_Ip_SetCgmXDeDivStatWithoutPhase/1 
  Calls: 
Clock_Ip_apxCgm/7 (Clock_Ip_apxCgm) @06cc3870
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_SetCgmXDeDivStatWithoutPhase/1 (read) Clock_Ip_SetCgmXDeDivStatWithoutPhase/1 (read) Clock_Ip_SetCgmXDeDivStatWithoutPhase/1 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_axFeatureExtensions/6 (Clock_Ip_axFeatureExtensions) @06cc3828
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_SetCgmXDeDivStatWithoutPhase/1 (read) Clock_Ip_SetCgmXDeDivStatWithoutPhase/1 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_au8ClockFeatures/5 (Clock_Ip_au8ClockFeatures) @06cc37e0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_SetPllPll0divDeDivOutput/2 (read) Clock_Ip_SetPllPll0divDeDivOutput/2 (read) Clock_Ip_SetPllPlldvOdiv2Output/3 (read) Clock_Ip_SetCgmXDeDivStatWithoutPhase/1 (read) Clock_Ip_SetCgmXDeDivStatWithoutPhase/1 (read) Clock_Ip_SetCgmXDeDivStatWithoutPhase/1 (read) Clock_Ip_SetCgmXDeDivStatWithoutPhase/1 (read) Clock_Ip_SetCgmXDeDivStatWithoutPhase/1 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_axDividerCallbacks/4 (Clock_Ip_axDividerCallbacks) @06cc30d8
  Type: variable definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Clock_Ip_Callback_DividerEmpty/0 (addr) Clock_Ip_SetCgmXDeDivStatWithoutPhase/1 (addr) Clock_Ip_SetPllPll0divDeDivOutput/2 (addr) Clock_Ip_SetPllPlldvOdiv2Output/3 (addr) 
  Referring: 
  Availability: available
  Varpool flags: initialized read-only const-value-known
Clock_Ip_SetPllPlldvOdiv2Output/3 (Clock_Ip_SetPllPlldvOdiv2Output) @06cc5000
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_au8ClockFeatures/5 (read) Clock_Ip_apxPll/11 (read) Clock_Ip_apxPll/11 (read) 
  Referring: Clock_Ip_axDividerCallbacks/4 (addr) 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
Clock_Ip_SetPllPll0divDeDivOutput/2 (Clock_Ip_SetPllPll0divDeDivOutput) @06cbb7e0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_au8ClockFeatures/5 (read) Clock_Ip_au8ClockFeatures/5 (read) Clock_Ip_apxPll/11 (read) Clock_Ip_apxPll/11 (read) 
  Referring: Clock_Ip_axDividerCallbacks/4 (addr) 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
Clock_Ip_SetCgmXDeDivStatWithoutPhase/1 (Clock_Ip_SetCgmXDeDivStatWithoutPhase) @06cbbc40
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_au8ClockFeatures/5 (read) Clock_Ip_au8ClockFeatures/5 (read) Clock_Ip_au8ClockFeatures/5 (read) Clock_Ip_au8ClockFeatures/5 (read) Clock_Ip_axFeatureExtensions/6 (read) Clock_Ip_au8ClockFeatures/5 (read) Clock_Ip_axFeatureExtensions/6 (read) Clock_Ip_apxCgm/7 (read) Clock_Ip_apxCgm/7 (read) Clock_Ip_apxCgm/7 (read) 
  Referring: Clock_Ip_axDividerCallbacks/4 (addr) 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Clock_Ip_ReportClockErrors/10 Clock_Ip_TimeoutExpired/9 Clock_Ip_StartTimeout/8 
Clock_Ip_Callback_DividerEmpty/0 (Clock_Ip_Callback_DividerEmpty) @06cbb9a0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: 
  Referring: Clock_Ip_axDividerCallbacks/4 (addr) 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
Clock_Ip_SetPllPlldvOdiv2Output (const struct Clock_Ip_DividerConfigType * Config)
{
  uint32 DividerValue;
  uint32 RegValue;
  uint32 Instance;
  const long unsigned int iftmp.1;
  <unnamed type> _1;
  unsigned char _2;
  long unsigned int _3;
  struct PLL_Type * _4;
  long unsigned int _5;
  long unsigned int _6;
  struct PLL_Type * _7;
  const long unsigned int iftmp.1_8;
  const long unsigned int iftmp.1_13;
  const long unsigned int iftmp.1_14;

  <bb 2> :
  if (Config_10(D) != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  _1 = Config_10(D)->Name;
  _2 = Clock_Ip_au8ClockFeatures[_1][0];
  Instance_12 = (uint32) _2;
  _3 = Config_10(D)->Value;
  if (_3 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  iftmp.1_14 = Config_10(D)->Value;
  goto <bb 6>; [INV]

  <bb 5> :
  iftmp.1_13 = 1;

  <bb 6> :
  # iftmp.1_8 = PHI <iftmp.1_14(4), iftmp.1_13(5)>
  DividerValue_15 = iftmp.1_8;
  _4 = Clock_Ip_apxPll[Instance_12].PllInstance;
  RegValue_16 ={v} _4->PLLDV;
  RegValue_17 = RegValue_16 & 2181038079;
  _5 = DividerValue_15 << 25;
  _6 = _5 & 2113929216;
  RegValue_18 = RegValue_17 | _6;
  _7 = Clock_Ip_apxPll[Instance_12].PllInstance;
  _7->PLLDV ={v} RegValue_18;

  <bb 7> :
  return;

}


Clock_Ip_SetPllPll0divDeDivOutput (const struct Clock_Ip_DividerConfigType * Config)
{
  uint32 RegValue;
  uint32 DividerIndex;
  uint32 Instance;
  <unnamed type> _1;
  unsigned char _2;
  <unnamed type> _3;
  unsigned char _4;
  long unsigned int _5;
  struct PLL_Type * _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  struct PLL_Type * _11;

  <bb 2> :
  if (Config_13(D) != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _1 = Config_13(D)->Name;
  _2 = Clock_Ip_au8ClockFeatures[_1][0];
  Instance_15 = (uint32) _2;
  _3 = Config_13(D)->Name;
  _4 = Clock_Ip_au8ClockFeatures[_3][5];
  DividerIndex_16 = (uint32) _4;
  _5 = Config_13(D)->Value;
  if (_5 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _6 = Clock_Ip_apxPll[Instance_15].PllInstance;
  RegValue_17 ={v} _6->PLLODIV[DividerIndex_16];
  RegValue_18 = RegValue_17 | 2147483648;
  RegValue_19 = RegValue_18 & 4293984255;
  _7 = Config_13(D)->Value;
  _8 = _7 + 4294967295;
  _9 = _8 << 16;
  _10 = _9 & 983040;
  RegValue_20 = RegValue_19 | _10;
  _11 = Clock_Ip_apxPll[Instance_15].PllInstance;
  _11->PLLODIV[DividerIndex_16] ={v} RegValue_20;

  <bb 5> :
  return;

}


Clock_Ip_SetCgmXDeDivStatWithoutPhase (const struct Clock_Ip_DividerConfigType * Config)
{
  uint32 DividerStatus;
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;
  boolean TimeoutOccurred;
  uint32 RegValue;
  uint32 DividerShift;
  uint32 DividerMask;
  uint32 DividerIndex;
  uint32 SelectorIndex;
  uint32 Instance;
  <unnamed type> _1;
  unsigned char _2;
  <unnamed type> _3;
  unsigned char _4;
  <unnamed type> _5;
  unsigned char _6;
  <unnamed type> _7;
  unsigned char _8;
  int _9;
  <unnamed type> _10;
  unsigned char _11;
  int _12;
  volatile struct Clock_Ip_CgmMuxType * _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  volatile struct Clock_Ip_CgmMuxType * _20;
  volatile struct Clock_Ip_CgmMuxType * _21;
  long unsigned int _22;
  long unsigned int TimeoutTicks.0_23;
  _Bool _24;
  <unnamed type> _25;

  <bb 2> :
  TimeoutOccurred_29 = 0;
  if (Config_30(D) != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 3> :
  _1 = Config_30(D)->Name;
  _2 = Clock_Ip_au8ClockFeatures[_1][0];
  Instance_32 = (uint32) _2;
  _3 = Config_30(D)->Name;
  _4 = Clock_Ip_au8ClockFeatures[_3][4];
  SelectorIndex_33 = (uint32) _4;
  _5 = Config_30(D)->Name;
  _6 = Clock_Ip_au8ClockFeatures[_5][5];
  DividerIndex_34 = (uint32) _6;
  _7 = Config_30(D)->Name;
  _8 = Clock_Ip_au8ClockFeatures[_7][2];
  _9 = (int) _8;
  DividerMask_35 = Clock_Ip_axFeatureExtensions[_9].DividerValueMask;
  _10 = Config_30(D)->Name;
  _11 = Clock_Ip_au8ClockFeatures[_10][2];
  _12 = (int) _11;
  DividerShift_36 = Clock_Ip_axFeatureExtensions[_12].DividerValueShift;
  _13 = Clock_Ip_apxCgm[Instance_32][SelectorIndex_33];
  RegValue_37 ={v} _13->Divider[DividerIndex_34];
  _14 = Config_30(D)->Value;
  if (_14 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _15 = ~DividerMask_35;
  RegValue_39 = RegValue_37 & _15;
  _16 = Config_30(D)->Value;
  _17 = _16 + 4294967295;
  _18 = _17 << DividerShift_36;
  _19 = DividerMask_35 & _18;
  RegValue_40 = RegValue_39 | _19;
  RegValue_41 = RegValue_40 | 2147483648;
  goto <bb 6>; [INV]

  <bb 5> :
  RegValue_38 = RegValue_37 & 2147483647;

  <bb 6> :
  # RegValue_26 = PHI <RegValue_41(4), RegValue_38(5)>
  _20 = Clock_Ip_apxCgm[Instance_32][SelectorIndex_33];
  _20->Divider[DividerIndex_34] ={v} RegValue_26;
  Clock_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 7> :
  _21 = Clock_Ip_apxCgm[Instance_32][SelectorIndex_33];
  _22 ={v} _21->MUX_DIV_UPD_STAT;
  DividerStatus_44 = _22 & 1;
  TimeoutTicks.0_23 = TimeoutTicks;
  TimeoutOccurred_46 = Clock_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.0_23);
  if (DividerStatus_44 == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  _24 = ~TimeoutOccurred_46;
  if (_24 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  if (TimeoutOccurred_46 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  _25 = Config_30(D)->Name;
  Clock_Ip_ReportClockErrors (1, _25);

  <bb 11> :
  StartTime ={v} {CLOBBER};
  ElapsedTime ={v} {CLOBBER};
  TimeoutTicks ={v} {CLOBBER};
  return;

}


Clock_Ip_Callback_DividerEmpty (const struct Clock_Ip_DividerConfigType * Config)
{
  <bb 2> :
  return;

}


