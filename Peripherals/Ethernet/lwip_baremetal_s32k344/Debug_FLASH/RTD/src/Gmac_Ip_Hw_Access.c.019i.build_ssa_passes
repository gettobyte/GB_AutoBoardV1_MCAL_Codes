GMAC_SetVlanTagDataRxMatch (struct GMAC_Type * Base, boolean EnInnerVlanMatch, boolean EnSvlanMatch, boolean DisVlanTypeMatch, boolean En12bitMatch)
{
  <bb 2> :
  if (EnInnerVlanMatch != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 = Base->MAC_VLAN_TAG.MAC_VLAN_TAG_DATA;
  _2 = _1 | 1048576;
  Base->MAC_VLAN_TAG.MAC_VLAN_TAG_DATA = _2;
  goto <bb 5>; [INV]

  <bb 4> :
  _3 = Base->MAC_VLAN_TAG.MAC_VLAN_TAG_DATA;
  _4 = _3 & 4293918719;
  Base->MAC_VLAN_TAG.MAC_VLAN_TAG_DATA = _4;

  <bb 5> :
  if (EnSvlanMatch != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _5 = Base->MAC_VLAN_TAG.MAC_VLAN_TAG_DATA;
  _6 = _5 | 524288;
  Base->MAC_VLAN_TAG.MAC_VLAN_TAG_DATA = _6;
  goto <bb 8>; [INV]

  <bb 7> :
  _7 = Base->MAC_VLAN_TAG.MAC_VLAN_TAG_DATA;
  _8 = _7 & 4294443007;
  Base->MAC_VLAN_TAG.MAC_VLAN_TAG_DATA = _8;

  <bb 8> :
  if (DisVlanTypeMatch != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  _9 = Base->MAC_VLAN_TAG.MAC_VLAN_TAG_DATA;
  _10 = _9 | 262144;
  Base->MAC_VLAN_TAG.MAC_VLAN_TAG_DATA = _10;
  goto <bb 11>; [INV]

  <bb 10> :
  _11 = Base->MAC_VLAN_TAG.MAC_VLAN_TAG_DATA;
  _12 = _11 & 4294705151;
  Base->MAC_VLAN_TAG.MAC_VLAN_TAG_DATA = _12;

  <bb 11> :
  if (En12bitMatch != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  _13 = Base->MAC_VLAN_TAG.MAC_VLAN_TAG_DATA;
  _14 = _13 | 131072;
  Base->MAC_VLAN_TAG.MAC_VLAN_TAG_DATA = _14;
  goto <bb 14>; [INV]

  <bb 13> :
  _15 = Base->MAC_VLAN_TAG.MAC_VLAN_TAG_DATA;
  _16 = _15 & 4294836223;
  Base->MAC_VLAN_TAG.MAC_VLAN_TAG_DATA = _16;

  <bb 14> :
  _17 = Base->MAC_VLAN_TAG.MAC_VLAN_TAG_DATA;
  _18 = _17 | 65536;
  Base->MAC_VLAN_TAG.MAC_VLAN_TAG_DATA = _18;
  return;

}


GMAC_SetVlanTagInvMatch (struct GMAC_Type * Base, boolean Enable)
{
  <bb 2> :
  if (Enable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 = Base->MAC_VLAN.MAC_VLAN_TAG_CTRL;
  _2 = _1 | 131072;
  Base->MAC_VLAN.MAC_VLAN_TAG_CTRL = _2;
  goto <bb 5>; [INV]

  <bb 4> :
  _3 = Base->MAC_VLAN.MAC_VLAN_TAG_CTRL;
  _4 = _3 & 4294836223;
  Base->MAC_VLAN.MAC_VLAN_TAG_CTRL = _4;

  <bb 5> :
  return;

}


GMAC_ReadVlanTagRxFilter (struct GMAC_Type * Base, uint8 FilterIdx, uint16 * VlanTag)
{
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;
  Gmac_Ip_StatusType Status;
  Gmac_Ip_StatusType D.7253;

  <bb 2> :
  Status = 3;
  _1 = Base->MAC_VLAN.MAC_VLAN_TAG_CTRL;
  _2 = _1 & 4294967283;
  Base->MAC_VLAN.MAC_VLAN_TAG_CTRL = _2;
  _3 = Base->MAC_VLAN.MAC_VLAN_TAG_CTRL;
  _4 = (long unsigned int) FilterIdx;
  _5 = _4 << 2;
  _6 = _3 | _5;
  _7 = _6 | 2;
  Base->MAC_VLAN.MAC_VLAN_TAG_CTRL = _7;
  _8 = Base->MAC_VLAN.MAC_VLAN_TAG_CTRL;
  _9 = _8 | 1;
  Base->MAC_VLAN.MAC_VLAN_TAG_CTRL = _9;
  GMAC_StartTimeOut (&StartTime, &ElapsedTime, &TimeoutTicks, 1000);

  <bb 3> :
  _10 = Base->MAC_VLAN.MAC_VLAN_TAG_CTRL;
  _11 = _10 & 1;
  if (_11 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Status = 0;
  goto <bb 6>; [INV]

  <bb 5> :
  TimeoutTicks.16_12 = TimeoutTicks;
  _13 = GMAC_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.16_12);
  _14 = ~_13;
  if (_14 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  if (Status == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _15 = Base->MAC_VLAN_TAG.MAC_VLAN_TAG_DATA;
  _16 = (short unsigned int) _15;
  *VlanTag = _16;

  <bb 8> :
  D.7253 = Status;
  StartTime = {CLOBBER};
  ElapsedTime = {CLOBBER};
  TimeoutTicks = {CLOBBER};

  <bb 9> :
<L7>:
  return D.7253;

}


GMAC_SetRxQueuesDmaChMap (struct GMAC_Type * Base, uint8 QueuesNum)
{
  <bb 2> :
  if (QueuesNum != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 = Base->MTL_RXQ_DMA_MAP0;
  Base->MTL_RXQ_DMA_MAP0 = _1;

  <bb 4> :
  if (QueuesNum > 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _2 = Base->MTL_RXQ_DMA_MAP0;
  _3 = _2 | 256;
  Base->MTL_RXQ_DMA_MAP0 = _3;

  <bb 6> :
  return;

}


GMAC_SetRxQueueOperationMode (struct Gmac_Ip_QueueType * QueueBase, uint32 QueueSize)
{
  uint32 BlockNum;
  long unsigned int iftmp.15;

  <bb 2> :
  BlockNum = QueueSize / 256;
  if (BlockNum != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.15 = BlockNum + 4294967295;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.15 = 0;

  <bb 5> :
  BlockNum = iftmp.15;
  _1 = BlockNum << 20;
  _2 = _1 & 32505856;
  QueueBase->MTL_RXQ_OPERATION_MODE = _2;
  return;

}


GMAC_EnableRxQueue (struct GMAC_Type * Base, uint8 PriorityMask, uint8 QueueNum)
{
  <bb 2> :
  _1 = Base->MAC_RXQ_CTRL2;
  _2 = (long unsigned int) PriorityMask;
  _3 = (long unsigned int) QueueNum;
  _4 = _3 * 8;
  _5 = _2 << _4;
  _6 = _1 | _5;
  Base->MAC_RXQ_CTRL2 = _6;
  _7 = Base->MAC_RXQ_CTRL0;
  _8 = (long unsigned int) QueueNum;
  _9 = _8 * 2;
  _10 = 2 << _9;
  _11 = _7 | _10;
  Base->MAC_RXQ_CTRL0 = _11;
  return;

}


GMAC_SetTxThreshold (struct Gmac_Ip_QueueType * QueueBase, Gmac_Ip_TxThresholdType ThresholdValue)
{
  <bb 2> :
  _1 = QueueBase->MTL_TXQ_OPERATION_MODE;
  _2 = _1 & 4294967181;
  QueueBase->MTL_TXQ_OPERATION_MODE = _2;
  _3 = QueueBase->MTL_TXQ_OPERATION_MODE;
  _4 = ThresholdValue << 4;
  _5 = _4 & 112;
  _6 = _3 | _5;
  QueueBase->MTL_TXQ_OPERATION_MODE = _6;
  return;

}


GMAC_SetTxStoreAndForward (struct Gmac_Ip_QueueType * QueueBase)
{
  <bb 2> :
  _1 = QueueBase->MTL_TXQ_OPERATION_MODE;
  _2 = _1 | 2;
  QueueBase->MTL_TXQ_OPERATION_MODE = _2;
  return;

}


GMAC_SetTxQueueOperationMode (struct Gmac_Ip_QueueType * QueueBase, Gmac_Ip_OperationModeType QueueMode, uint32 QueueSize)
{
  uint32 BlockNum;
  long unsigned int iftmp.14;

  <bb 2> :
  BlockNum = QueueSize / 256;
  if (BlockNum != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.14 = BlockNum + 4294967295;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.14 = 0;

  <bb 5> :
  BlockNum = iftmp.14;
  _1 = QueueMode << 2;
  _2 = _1 & 12;
  _3 = BlockNum << 16;
  _4 = _3 & 2031616;
  _5 = _2 | _4;
  _6 = _5 | 2;
  QueueBase->MTL_TXQ_OPERATION_MODE = _6;
  return;

}


GMAC_SetTxQueueCreditBasedShaper (struct Gmac_Ip_QueueType * QueueBase, uint32 SendSlopeCredit, uint32 HighCredit, sint32 LowCredit)
{
  <bb 2> :
  QueueBase->MTL_TXQ_SENDSLOPECREDIT = SendSlopeCredit;
  QueueBase->MTL_TXQ_HICREDIT = HighCredit;
  LowCredit.13_1 = (long unsigned int) LowCredit;
  QueueBase->MTL_TXQ_LOCREDIT = LowCredit.13_1;
  return;

}


GMAC_SetTxQueueQuantumWeight (struct Gmac_Ip_QueueType * QueueBase, uint32 Weight)
{
  <bb 2> :
  QueueBase->MTL_TXQ_QUANTUM_WEIGHT = Weight;
  return;

}


GMAC_SetSchedAlg (struct GMAC_Type * Base, Gmac_Ip_TxSchedAlgoType SchedAlgo)
{
  <bb 2> :
  if (SchedAlgo == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 = Base->MTL_OPERATION_MODE;
  _2 = _1 & 4294967199;
  Base->MTL_OPERATION_MODE = _2;
  goto <bb 6>; [INV]

  <bb 4> :
  if (SchedAlgo == 3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _3 = Base->MTL_OPERATION_MODE;
  _4 = _3 | 96;
  Base->MTL_OPERATION_MODE = _4;

  <bb 6> :
  return;

}


GMAC_SetSpeed (struct GMAC_Type * Base, Gmac_Ip_SpeedType Speed)
{
  <bb 2> :
  if (Speed == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 = Base->MAC_CONFIGURATION;
  _2 = _1 & 4294918143;
  Base->MAC_CONFIGURATION = _2;
  goto <bb 8>; [INV]

  <bb 4> :
  if (Speed == 3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _3 = Base->MAC_CONFIGURATION;
  _4 = _3 | 49152;
  Base->MAC_CONFIGURATION = _4;
  goto <bb 8>; [INV]

  <bb 6> :
  if (Speed == 2)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _5 = Base->MAC_CONFIGURATION;
  _6 = _5 | 32768;
  Base->MAC_CONFIGURATION = _6;
  _7 = Base->MAC_CONFIGURATION;
  _8 = _7 & 4294950911;
  Base->MAC_CONFIGURATION = _8;

  <bb 8> :
  return;

}


GMAC_SetPowerState (struct GMAC_Type * Base, Gmac_Ip_PowerStateType PowerState)
{
  <bb 2> :
  switch (PowerState) <default: <L3> [INV], case 0: <L0> [INV], case 1: <L1> [INV], case 3: <L2> [INV]>

  <bb 3> :
<L0>:
  _1 = Base->MAC_CONFIGURATION;
  _2 = _1 & 4294967292;
  Base->MAC_CONFIGURATION = _2;
  goto <bb 7>; [INV]

  <bb 4> :
<L1>:
  _3 = Base->MAC_CONFIGURATION;
  _4 = _3 | 3;
  Base->MAC_CONFIGURATION = _4;
  goto <bb 7>; [INV]

  <bb 5> :
<L2>:
  _5 = Base->DMA_MODE;
  _6 = _5 | 1;
  Base->DMA_MODE = _6;
  goto <bb 7>; [INV]

  <bb 6> :
<L3>:

  <bb 7> :
  return;

}


GMAC_GetPowerState (const struct GMAC_Type * Base)
{
  Gmac_Ip_PowerStateType PowerState;
  Gmac_Ip_PowerStateType D.7220;

  <bb 2> :
  PowerState = 3;
  _1 = Base->DMA_MODE;
  _2 = _1 & 1;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  PowerState = 3;
  goto <bb 8>; [INV]

  <bb 4> :
  _3 = Base->MAC_CONFIGURATION;
  _4 = _3 & 3;
  if (_4 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  PowerState = 1;
  goto <bb 8>; [INV]

  <bb 6> :
  _5 = Base->MAC_CONFIGURATION;
  _6 = _5 & 3;
  if (_6 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  PowerState = 0;

  <bb 8> :
  D.7220 = PowerState;

  <bb 9> :
<L9>:
  return D.7220;

}


GMAC_RemoveVlanFromHashTable (struct GMAC_Type * Base, uint32 Crc)
{
  uint32 Index;

  <bb 2> :
  _1 = REV_BITS_32 (Crc);
  _2 = _1 >> 28;
  Index = _2 & 15;
  _3 = Base->MAC_VLAN_TAG.MAC_VLAN_TAG_DATA;
  _4 = _3 & 131072;
  if (_4 != 131072)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Index = Index + 4294967295;

  <bb 4> :
  _5 = Base->MAC_VLAN_HASH_TABLE;
  _6 = 1 << Index;
  _7 = ~_6;
  _8 = _5 & _7;
  Base->MAC_VLAN_HASH_TABLE = _8;
  return;

}


GMAC_AddVlanToHashTable (struct GMAC_Type * Base, uint32 Crc)
{
  uint32 Index;

  <bb 2> :
  _1 = REV_BITS_32 (Crc);
  _2 = _1 >> 28;
  Index = _2 & 15;
  _3 = Base->MAC_VLAN_TAG.MAC_VLAN_TAG_DATA;
  _4 = _3 & 131072;
  if (_4 != 131072)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Index = Index + 4294967295;

  <bb 4> :
  _5 = Base->MAC_VLAN_HASH_TABLE;
  _6 = 1 << Index;
  _7 = _5 | _6;
  Base->MAC_VLAN_HASH_TABLE = _7;
  return;

}


GMAC_RemoveFromHashTable (const struct GMAC_Type * Base, uint32 Crc)
{
  volatile uint32[2] * Hash_table;
  volatile uint32 HashBaseAddr;
  uint32 Hash_bit;
  uint32 Index;

  <bb 2> :
  _1 = &Base->MAC_HASH_TABLE_REG0;
  _2 = (long unsigned int) _1;
  HashBaseAddr = _2;
  HashBaseAddr.12_3 = HashBaseAddr;
  Hash_table = (volatile uint32[2] *) HashBaseAddr.12_3;
  _4 = REV_BITS_32 (Crc);
  _5 = _4 >> 31;
  Index = _5 & 1;
  _6 = REV_BITS_32 (Crc);
  _7 = _6 >> 26;
  _8 = _7 & 31;
  Hash_bit = 1 << _8;
  _9 = Index & 1;
  _10 = (*Hash_table)[_9];
  _11 = ~Hash_bit;
  _12 = Index & 1;
  _13 = _10 & _11;
  (*Hash_table)[_12] = _13;
  return;

}


GMAC_AddToHashTable (const struct GMAC_Type * Base, uint32 Crc)
{
  volatile uint32[2] * Hash_table;
  volatile uint32 HashBaseAddr;
  uint32 Hash_bit;
  uint32 Index;

  <bb 2> :
  _1 = &Base->MAC_HASH_TABLE_REG0;
  _2 = (long unsigned int) _1;
  HashBaseAddr = _2;
  HashBaseAddr.11_3 = HashBaseAddr;
  Hash_table = (volatile uint32[2] *) HashBaseAddr.11_3;
  _4 = REV_BITS_32 (Crc);
  _5 = _4 >> 31;
  Index = _5 & 1;
  _6 = REV_BITS_32 (Crc);
  _7 = _6 >> 26;
  _8 = _7 & 31;
  Hash_bit = 1 << _8;
  _9 = Index & 1;
  _10 = (*Hash_table)[_9];
  _11 = Index & 1;
  _12 = Hash_bit | _10;
  (*Hash_table)[_11] = _12;
  return;

}


GMAC_TxIRQHandler (uint8 Instance, uint8 Channel)
{
  uint32 IrqEnFlags;
  uint32 StatusFlags;
  struct Gmac_Ip_ChannelType * ChBase;

  <bb 2> :
  _1 = (int) Instance;
  _2 = (int) Channel;
  ChBase = Gmac_apxChBases[_1][_2];
  StatusFlags = ChBase->DMA_STATUS;
  IrqEnFlags = ChBase->DMA_INTERRUPT_ENABLE;
  _3 = (int) Instance;
  _4 = Gmac_apxState[_3];
  if (_4 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  _5 = IrqEnFlags & 1;
  if (_5 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  _6 = StatusFlags & 1;
  if (_6 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  ChBase->DMA_STATUS = 1;
  _7 = (int) Instance;
  _8 = Gmac_apxState[_7];
  _9 = (int) Channel;
  _10 = _8->TxChCallback[_9];
  if (_10 != 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  _11 = (int) Instance;
  _12 = Gmac_apxState[_11];
  _13 = (int) Channel;
  _14 = _12->TxChCallback[_13];
  _14 (Instance, Channel);
  goto <bb 8>; [INV]

  <bb 7> :
  ChBase->DMA_STATUS = 1;

  <bb 8> :
  return;

}


GMAC_RxIRQHandler (uint8 Instance, uint8 Channel)
{
  uint32 IrqEnFlags;
  uint32 StatusFlags;
  struct Gmac_Ip_ChannelType * ChBase;

  <bb 2> :
  _1 = (int) Instance;
  _2 = (int) Channel;
  ChBase = Gmac_apxChBases[_1][_2];
  StatusFlags = ChBase->DMA_STATUS;
  IrqEnFlags = ChBase->DMA_INTERRUPT_ENABLE;
  _3 = (int) Instance;
  _4 = Gmac_apxState[_3];
  if (_4 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  _5 = IrqEnFlags & 64;
  if (_5 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  _6 = StatusFlags & 64;
  if (_6 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  ChBase->DMA_STATUS = 64;
  _7 = (int) Instance;
  _8 = Gmac_apxState[_7];
  _9 = (int) Channel;
  _10 = _8->RxChCallback[_9];
  if (_10 != 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  _11 = (int) Instance;
  _12 = Gmac_apxState[_11];
  _13 = (int) Channel;
  _14 = _12->RxChCallback[_13];
  _14 (Instance, Channel);
  goto <bb 8>; [INV]

  <bb 7> :
  ChBase->DMA_STATUS = 64;

  <bb 8> :
  return;

}


GMAC_SafetyIRQHandler (uint8 Instance)
{
  uint32 ErrorStatusFlags;
  uint32 SafetyStatusFlags;
  struct GMAC_Type * Base;

  <bb 2> :
  _1 = (int) Instance;
  Base = 1078460416B;
  SafetyStatusFlags = Base->DMA_SAFETY_INTERRUPT_STATUS;
  _2 = SafetyStatusFlags & 536870912;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  ErrorStatusFlags = Base->MTL_ECC_INTERRUPT_STATUS;
  Base->MTL_ECC_INTERRUPT_STATUS = ErrorStatusFlags;
  _3 = Base->MTL_ECC_CONTROL;
  GMAC_IrqECCHandler (Instance, ErrorStatusFlags, _3);
  goto <bb 6>; [INV]

  <bb 4> :
  SafetyStatusFlags.10_4 = (signed int) SafetyStatusFlags;
  if (SafetyStatusFlags.10_4 < 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  ErrorStatusFlags = Base->MAC_DPP_FSM_INTERRUPT_STATUS;
  _5 = Base->MTL_DPP_CONTROL;
  GMAC_IrqFSMDPPHandler (Instance, ErrorStatusFlags, _5);

  <bb 6> :
  return;

}


GMAC_CommonIRQHandler (uint8 Instance)
{
  struct Gmac_Ip_ChannelType * ChBase;
  uint8 TxInterruptStatus[2];
  uint8 RxInterruptStatus[2];
  uint32 Flags;
  uint16 i;
  const struct GMAC_Type * Base;
  long unsigned int vol.6;

  <bb 2> :
  _1 = (int) Instance;
  Base = 1078460416B;
  RxInterruptStatus = "\x00";
  TxInterruptStatus = "\x00";
  GMAC_MACIRQHandler (Instance);
  i = 0;
  goto <bb 9>; [INV]

  <bb 3> :
  _2 = Base->DMA_INTERRUPT_STATUS;
  _3 = (long unsigned int) i;
  _4 = _2 >> _3;
  _5 = _4 & 1;
  if (_5 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  _6 = (int) Instance;
  _7 = (int) i;
  ChBase = Gmac_apxChBases[_6][_7];
  Flags = ChBase->DMA_STATUS;
  ChBase->DMA_STATUS = Flags;
  vol.6 = ChBase->DMA_STATUS;
  _8 = Flags & 3673024;
  if (_8 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _9 = (int) i;
  RxInterruptStatus[_9] = 1;

  <bb 6> :
  _10 = Flags & 459783;
  if (_10 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _11 = (int) i;
  TxInterruptStatus[_11] = 1;

  <bb 8> :
  i.7_12 = i;
  i = i.7_12 + 1;

  <bb 9> :
  if (i <= 1)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  i = 0;
  goto <bb 15>; [INV]

  <bb 11> :
  _13 = (int) i;
  _14 = RxInterruptStatus[_13];
  if (_14 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 12> :
  _15 = (int) Instance;
  _16 = Gmac_apxState[_15];
  _17 = (int) i;
  _18 = _16->RxChCallback[_17];
  if (_18 != 0B)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  _19 = (int) Instance;
  _20 = Gmac_apxState[_19];
  _21 = (int) i;
  _22 = _20->RxChCallback[_21];
  _23 = (unsigned char) i;
  _22 (Instance, _23);

  <bb 14> :
  i.8_24 = i;
  i = i.8_24 + 1;

  <bb 15> :
  _25 = (int) Instance;
  _26 = Gmac_apxState[_25];
  _27 = _26->RxRingCount;
  if (i < _27)
    goto <bb 11>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 16> :
  i = 0;
  goto <bb 21>; [INV]

  <bb 17> :
  _28 = (int) i;
  _29 = TxInterruptStatus[_28];
  if (_29 != 0)
    goto <bb 18>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 18> :
  _30 = (int) Instance;
  _31 = Gmac_apxState[_30];
  _32 = (int) i;
  _33 = _31->TxChCallback[_32];
  if (_33 != 0B)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  _34 = (int) Instance;
  _35 = Gmac_apxState[_34];
  _36 = (int) i;
  _37 = _35->TxChCallback[_36];
  _38 = (unsigned char) i;
  _37 (Instance, _38);

  <bb 20> :
  i.9_39 = i;
  i = i.9_39 + 1;

  <bb 21> :
  _40 = (int) Instance;
  _41 = Gmac_apxState[_40];
  _42 = _41->TxRingCount;
  if (i < _42)
    goto <bb 17>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 22> :
  RxInterruptStatus = {CLOBBER};
  TxInterruptStatus = {CLOBBER};
  return;

}


GMAC_WriteManagementFrame (struct GMAC_Type * Base, const struct Gmac_Ip_ManagementInfo * ManageInfo, uint32 TimeoutUs)
{
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;
  Gmac_Ip_StatusType Status;
  Gmac_Ip_StatusType D.7163;
  long unsigned int iftmp.4;
  long unsigned int iftmp.3;
  long unsigned int iftmp.2;

  <bb 2> :
  Status = 3;
  _1 = Base->MAC_MDIO_ADDRESS;
  _2 = _1 & 4227923953;
  Base->MAC_MDIO_ADDRESS = _2;
  _3 = ManageInfo->SupportedClause45;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _4 = ManageInfo->PhysReg;
  _5 = (long unsigned int) _4;
  iftmp.2 = _5 << 16;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.2 = 0;

  <bb 5> :
  _6 = ManageInfo->FrameData;
  _7 = (long unsigned int) _6;
  _8 = iftmp.2 | _7;
  Base->MAC_MDIO_DATA = _8;
  _9 = Base->MAC_MDIO_ADDRESS;
  _10 = ManageInfo->SupportedClause45;
  if (_10 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  iftmp.3 = 2;
  goto <bb 8>; [INV]

  <bb 7> :
  iftmp.3 = 0;

  <bb 8> :
  _11 = ManageInfo->OpFrameType;
  _12 = _11 << 3;
  _13 = _12 & 8;
  _14 = iftmp.3 | _13;
  _15 = ManageInfo->PhysAddr;
  _16 = (long unsigned int) _15;
  _17 = _16 << 21;
  _18 = _17 & 65011712;
  _19 = _14 | _18;
  _20 = ManageInfo->SupportedClause45;
  if (_20 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  _21 = ManageInfo->MmdAddr;
  _22 = (long unsigned int) _21;
  _23 = _22 << 16;
  iftmp.4 = _23 & 2031616;
  goto <bb 11>; [INV]

  <bb 10> :
  _24 = ManageInfo->PhysReg;
  _25 = (long unsigned int) _24;
  _26 = _25 << 16;
  iftmp.4 = _26 & 2031616;

  <bb 11> :
  _27 = iftmp.4 | _19;
  _28 = _9 | _27;
  _29 = _28 | 5;
  Base->MAC_MDIO_ADDRESS = _29;
  GMAC_StartTimeOut (&StartTime, &ElapsedTime, &TimeoutTicks, TimeoutUs);

  <bb 12> :
  _30 = Base->MAC_MDIO_ADDRESS;
  _31 = _30 & 1;
  if (_31 == 0)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  Status = 0;
  goto <bb 15>; [INV]

  <bb 14> :
  TimeoutTicks.5_32 = TimeoutTicks;
  _33 = GMAC_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.5_32);
  _34 = ~_33;
  if (_34 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  D.7163 = Status;
  StartTime = {CLOBBER};
  ElapsedTime = {CLOBBER};
  TimeoutTicks = {CLOBBER};

  <bb 16> :
<L14>:
  return D.7163;

}


GMAC_TimeoutExpired (uint32 * StartTimeInOut, uint32 * ElapsedTimeInOut, uint32 TimeoutTicks)
{
  boolean RetVal;
  boolean D.7147;
  long unsigned int D.7144;

  <bb 2> :
  RetVal = 0;
  D.7144 = OsIf_GetElapsed (StartTimeInOut, 0);
  _1 = *ElapsedTimeInOut;
  _2 = D.7144 + _1;
  *ElapsedTimeInOut = _2;
  _3 = *ElapsedTimeInOut;
  if (TimeoutTicks <= _3)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  RetVal = 1;

  <bb 4> :
  D.7147 = RetVal;

  <bb 5> :
<L2>:
  return D.7147;

}


GMAC_StartTimeOut (uint32 * StartTimeOut, uint32 * ElapsedTimeOut, uint32 * TimeoutTicksOut, uint32 TimeoutUs)
{
  <bb 2> :
  _1 = OsIf_GetCounter (0);
  *StartTimeOut = _1;
  *ElapsedTimeOut = 0;
  _2 = OsIf_MicrosToTicks (TimeoutUs, 0);
  *TimeoutTicksOut = _2;
  return;

}


GMAC_MACIRQHandler (uint8 Instance)
{
  uint32 Flags;
  const struct GMAC_Type * Base;
  long unsigned int vol.1;
  long unsigned int vol.0;

  <bb 2> :
  _1 = (int) Instance;
  Base = 1078460416B;
  _2 = Base->DMA_INTERRUPT_STATUS;
  _3 = _2 & 131072;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 3> :
  Flags = Base->MAC_INTERRUPT_STATUS;
  _4 = (int) Instance;
  _5 = Gmac_apxState[_4];
  _6 = _5->Callback;
  if (_6 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _7 = (int) Instance;
  _8 = Gmac_apxState[_7];
  _9 = _8->Callback;
  _9 (Instance);

  <bb 5> :
  _10 = Flags & 131072;
  if (_10 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  vol.0 = Base->MAC_FPE_CTRL_STS;

  <bb 7> :
  _11 = Flags & 16384;
  if (_11 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  _12 = Flags & 8192;
  if (_12 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  vol.1 = Base->MAC_RX_TX_STATUS;

  <bb 10> :
  return;

}


GMAC_IrqECCHandler (const uint8 Instance, uint32 ErrorStatusFlags, uint32 ErrorEnFlags)
{
  <bb 2> :
  _1 = (int) Instance;
  _2 = Gmac_apxState[_1];
  if (_2 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  _3 = ErrorStatusFlags & 1638;
  if (_3 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  _4 = ErrorEnFlags & 7;
  if (_4 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _5 = (int) Instance;
  _6 = Gmac_apxState[_5];
  _7 = _6->SafetyCallback;
  if (_7 != 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _8 = (int) Instance;
  _9 = Gmac_apxState[_8];
  _10 = _9->SafetyCallback;
  _10 (Instance, 2);

  <bb 7> :
  return;

}


GMAC_IrqFSMDPPHandler (const uint8 Instance, uint32 ErrorStatusFlags, uint32 ErrorEnFlags)
{
  const struct GMAC_Type * Base;

  <bb 2> :
  _1 = (int) Instance;
  Base = 1078460416B;
  _2 = (int) Instance;
  _3 = Gmac_apxState[_2];
  if (_3 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  _4 = (int) Instance;
  _5 = Gmac_apxState[_4];
  _6 = _5->SafetyCallback;
  if (_6 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  _7 = ErrorStatusFlags & 60;
  if (_7 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _8 = ErrorEnFlags & 1;
  if (_8 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _9 = (int) Instance;
  _10 = Gmac_apxState[_9];
  _11 = _10->SafetyCallback;
  _11 (Instance, 16);
  goto <bb 8>; [INV]

  <bb 7> :
  _12 = Base->MAC_FSM_CONTROL;
  GMAC_IrqFSMHandler (Instance, ErrorStatusFlags, _12);

  <bb 8> :
  return;

}


GMAC_IrqFSMHandler (const uint8 Instance, uint32 ErrorStatusFlags, uint32 ErrorEnFlags)
{
  <bb 2> :
  _1 = ErrorStatusFlags & 16777216;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _2 = ErrorEnFlags & 2;
  if (_2 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _3 = (int) Instance;
  _4 = Gmac_apxState[_3];
  _5 = _4->SafetyCallback;
  _5 (Instance, 4);
  goto <bb 13>; [INV]

  <bb 5> :
  _6 = ErrorStatusFlags & 6912;
  if (_6 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  _7 = ErrorEnFlags & 1;
  if (_7 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _8 = (int) Instance;
  _9 = Gmac_apxState[_8];
  _10 = _9->SafetyCallback;
  _10 (Instance, 8);
  goto <bb 13>; [INV]

  <bb 8> :
  _11 = ErrorStatusFlags & 32;
  if (_11 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  _12 = ErrorEnFlags & 1;
  if (_12 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  _13 = (int) Instance;
  _14 = Gmac_apxState[_13];
  _15 = _14->SafetyCallback;
  _15 (Instance, 32);
  goto <bb 13>; [INV]

  <bb 11> :
  if (ErrorStatusFlags == 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  _16 = (int) Instance;
  _17 = Gmac_apxState[_16];
  _18 = _17->SafetyCallback;
  _18 (Instance, 1);

  <bb 13> :
  return;

}


REV_BITS_32 (uint32 value)
{
  uint32 v;
  uint32 D.7205;

  <bb 2> :
  v = value;
  _1 = v >> 1;
  _2 = _1 & 1431655765;
  _3 = v << 1;
  _4 = _3 & 2863311530;
  v = _2 | _4;
  _5 = v >> 2;
  _6 = _5 & 858993459;
  _7 = v << 2;
  _8 = _7 & 3435973836;
  v = _6 | _8;
  _9 = v >> 4;
  _10 = _9 & 252645135;
  _11 = v << 4;
  _12 = _11 & 4042322160;
  v = _10 | _12;
  _13 = v >> 8;
  _14 = _13 & 16711935;
  _15 = v << 8;
  _16 = _15 & 4278255360;
  v = _14 | _16;
  D.7205 = v r>> 16;

  <bb 3> :
<L0>:
  return D.7205;

}


