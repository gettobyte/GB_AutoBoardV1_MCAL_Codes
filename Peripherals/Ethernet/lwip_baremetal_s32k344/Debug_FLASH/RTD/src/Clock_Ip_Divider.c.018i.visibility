
Marking local functions:


Marking externally visible functions:


Marking externally visible variables: Clock_Ip_axDividerCallbacks/4


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

Clock_Ip_apxPll/11 (Clock_Ip_apxPll) @06cc3b88
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_SetPllPll0divDeDivOutput/2 (read) Clock_Ip_SetPllPll0divDeDivOutput/2 (read) Clock_Ip_SetPllPlldvOdiv2Output/3 (read) Clock_Ip_SetPllPlldvOdiv2Output/3 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_ReportClockErrors/10 (Clock_Ip_ReportClockErrors) @06cc58c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Clock_Ip_SetCgmXDeDivStatWithoutPhase/1 
  Calls: 
Clock_Ip_TimeoutExpired/9 (Clock_Ip_TimeoutExpired) @06cc57e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Clock_Ip_SetCgmXDeDivStatWithoutPhase/1 
  Calls: 
Clock_Ip_StartTimeout/8 (Clock_Ip_StartTimeout) @06cc5700
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Clock_Ip_SetCgmXDeDivStatWithoutPhase/1 
  Calls: 
Clock_Ip_apxCgm/7 (Clock_Ip_apxCgm) @06cc3870
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_SetCgmXDeDivStatWithoutPhase/1 (read) Clock_Ip_SetCgmXDeDivStatWithoutPhase/1 (read) Clock_Ip_SetCgmXDeDivStatWithoutPhase/1 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_axFeatureExtensions/6 (Clock_Ip_axFeatureExtensions) @06cc3828
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_SetCgmXDeDivStatWithoutPhase/1 (read) Clock_Ip_SetCgmXDeDivStatWithoutPhase/1 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_au8ClockFeatures/5 (Clock_Ip_au8ClockFeatures) @06cc37e0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_SetCgmXDeDivStatWithoutPhase/1 (read) Clock_Ip_SetCgmXDeDivStatWithoutPhase/1 (read) Clock_Ip_SetCgmXDeDivStatWithoutPhase/1 (read) Clock_Ip_SetCgmXDeDivStatWithoutPhase/1 (read) Clock_Ip_SetCgmXDeDivStatWithoutPhase/1 (read) Clock_Ip_SetPllPll0divDeDivOutput/2 (read) Clock_Ip_SetPllPll0divDeDivOutput/2 (read) Clock_Ip_SetPllPlldvOdiv2Output/3 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_axDividerCallbacks/4 (Clock_Ip_axDividerCallbacks) @06cc30d8
  Type: variable definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Clock_Ip_Callback_DividerEmpty/0 (addr) Clock_Ip_SetCgmXDeDivStatWithoutPhase/1 (addr) Clock_Ip_SetPllPll0divDeDivOutput/2 (addr) Clock_Ip_SetPllPlldvOdiv2Output/3 (addr) 
  Referring: 
  Availability: available
  Varpool flags: initialized read-only const-value-known
Clock_Ip_SetPllPlldvOdiv2Output/3 (Clock_Ip_SetPllPlldvOdiv2Output) @06cc5000
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_au8ClockFeatures/5 (read) Clock_Ip_apxPll/11 (read) Clock_Ip_apxPll/11 (read) 
  Referring: Clock_Ip_axDividerCallbacks/4 (addr) 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
Clock_Ip_SetPllPll0divDeDivOutput/2 (Clock_Ip_SetPllPll0divDeDivOutput) @06cbb7e0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_au8ClockFeatures/5 (read) Clock_Ip_au8ClockFeatures/5 (read) Clock_Ip_apxPll/11 (read) Clock_Ip_apxPll/11 (read) 
  Referring: Clock_Ip_axDividerCallbacks/4 (addr) 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
Clock_Ip_SetCgmXDeDivStatWithoutPhase/1 (Clock_Ip_SetCgmXDeDivStatWithoutPhase) @06cbbc40
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_au8ClockFeatures/5 (read) Clock_Ip_au8ClockFeatures/5 (read) Clock_Ip_au8ClockFeatures/5 (read) Clock_Ip_au8ClockFeatures/5 (read) Clock_Ip_axFeatureExtensions/6 (read) Clock_Ip_au8ClockFeatures/5 (read) Clock_Ip_axFeatureExtensions/6 (read) Clock_Ip_apxCgm/7 (read) Clock_Ip_apxCgm/7 (read) Clock_Ip_apxCgm/7 (read) 
  Referring: Clock_Ip_axDividerCallbacks/4 (addr) 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Clock_Ip_ReportClockErrors/10 Clock_Ip_TimeoutExpired/9 Clock_Ip_StartTimeout/8 
Clock_Ip_Callback_DividerEmpty/0 (Clock_Ip_Callback_DividerEmpty) @06cbb9a0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: 
  Referring: Clock_Ip_axDividerCallbacks/4 (addr) 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
Clock_Ip_SetPllPlldvOdiv2Output (const struct Clock_Ip_DividerConfigType * Config)
{
  uint32 DividerValue;
  uint32 RegValue;
  uint32 Instance;
  const long unsigned int iftmp.1;

  <bb 2> :
  if (Config != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  _1 = Config->Name;
  _2 = Clock_Ip_au8ClockFeatures[_1][0];
  Instance = (uint32) _2;
  _3 = Config->Value;
  if (_3 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  iftmp.1 = Config->Value;
  goto <bb 6>; [INV]

  <bb 5> :
  iftmp.1 = 1;

  <bb 6> :
  DividerValue = iftmp.1;
  _4 = Clock_Ip_apxPll[Instance].PllInstance;
  RegValue = _4->PLLDV;
  RegValue = RegValue & 2181038079;
  _5 = DividerValue << 25;
  _6 = _5 & 2113929216;
  RegValue = RegValue | _6;
  _7 = Clock_Ip_apxPll[Instance].PllInstance;
  _7->PLLDV = RegValue;

  <bb 7> :
  return;

}


Clock_Ip_SetPllPll0divDeDivOutput (const struct Clock_Ip_DividerConfigType * Config)
{
  uint32 RegValue;
  uint32 DividerIndex;
  uint32 Instance;

  <bb 2> :
  if (Config != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _1 = Config->Name;
  _2 = Clock_Ip_au8ClockFeatures[_1][0];
  Instance = (uint32) _2;
  _3 = Config->Name;
  _4 = Clock_Ip_au8ClockFeatures[_3][5];
  DividerIndex = (uint32) _4;
  _5 = Config->Value;
  if (_5 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _6 = Clock_Ip_apxPll[Instance].PllInstance;
  RegValue = _6->PLLODIV[DividerIndex];
  RegValue = RegValue | 2147483648;
  RegValue = RegValue & 4293984255;
  _7 = Config->Value;
  _8 = _7 + 4294967295;
  _9 = _8 << 16;
  _10 = _9 & 983040;
  RegValue = RegValue | _10;
  _11 = Clock_Ip_apxPll[Instance].PllInstance;
  _11->PLLODIV[DividerIndex] = RegValue;

  <bb 5> :
  return;

}


Clock_Ip_SetCgmXDeDivStatWithoutPhase (const struct Clock_Ip_DividerConfigType * Config)
{
  uint32 DividerStatus;
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;
  boolean TimeoutOccurred;
  uint32 RegValue;
  uint32 DividerShift;
  uint32 DividerMask;
  uint32 DividerIndex;
  uint32 SelectorIndex;
  uint32 Instance;

  <bb 2> :
  TimeoutOccurred = 0;
  if (Config != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 3> :
  _1 = Config->Name;
  _2 = Clock_Ip_au8ClockFeatures[_1][0];
  Instance = (uint32) _2;
  _3 = Config->Name;
  _4 = Clock_Ip_au8ClockFeatures[_3][4];
  SelectorIndex = (uint32) _4;
  _5 = Config->Name;
  _6 = Clock_Ip_au8ClockFeatures[_5][5];
  DividerIndex = (uint32) _6;
  _7 = Config->Name;
  _8 = Clock_Ip_au8ClockFeatures[_7][2];
  _9 = (int) _8;
  DividerMask = Clock_Ip_axFeatureExtensions[_9].DividerValueMask;
  _10 = Config->Name;
  _11 = Clock_Ip_au8ClockFeatures[_10][2];
  _12 = (int) _11;
  DividerShift = Clock_Ip_axFeatureExtensions[_12].DividerValueShift;
  _13 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  RegValue = _13->Divider[DividerIndex];
  _14 = Config->Value;
  if (_14 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _15 = ~DividerMask;
  RegValue = RegValue & _15;
  _16 = Config->Value;
  _17 = _16 + 4294967295;
  _18 = _17 << DividerShift;
  _19 = DividerMask & _18;
  RegValue = RegValue | _19;
  RegValue = RegValue | 2147483648;
  goto <bb 6>; [INV]

  <bb 5> :
  RegValue = RegValue & 2147483647;

  <bb 6> :
  _20 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _20->Divider[DividerIndex] = RegValue;
  Clock_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 7> :
  _21 = Clock_Ip_apxCgm[Instance][SelectorIndex];
  _22 = _21->MUX_DIV_UPD_STAT;
  DividerStatus = _22 & 1;
  TimeoutTicks.0_23 = TimeoutTicks;
  TimeoutOccurred = Clock_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.0_23);
  if (DividerStatus == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  _24 = ~TimeoutOccurred;
  if (_24 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  if (TimeoutOccurred != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  _25 = Config->Name;
  Clock_Ip_ReportClockErrors (1, _25);

  <bb 11> :
  StartTime = {CLOBBER};
  ElapsedTime = {CLOBBER};
  TimeoutTicks = {CLOBBER};
  return;

}


Clock_Ip_Callback_DividerEmpty (const struct Clock_Ip_DividerConfigType * Config)
{
  <bb 2> :
  return;

}


