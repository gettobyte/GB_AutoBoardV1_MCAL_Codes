Siul2_Port_Ip_GetPinConfiguration (const struct Siul2_Port_Ip_PortType * const base, struct Siul2_Port_Ip_PinSettingsConfig * config, uint16 pin)
{
  uint8 inputMuxIterator;
  uint32 u32PinIdx;
  uint32 u32MscrBase;
  uint32 u32MscrId;
  uint32 portNumber;
  uint32 MaxPinConfigured;
  const struct Siul2_Port_Ip_PinSettingsConfig * ConfigPtr;
  _Bool _1;
  _Bool _2;
  long unsigned int base.6_3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  const struct Siul2_Port_Ip_PinSettingsConfig * _8;
  long unsigned int _9;
  long unsigned int _10;
  const struct Siul2_Port_Ip_PinSettingsConfig * _11;
  struct SIUL2_Type * _12;
  long unsigned int _13;
  const struct Siul2_Port_Ip_PinSettingsConfig * _14;
  long unsigned int _15;
  long unsigned int _16;
  const struct Siul2_Port_Ip_PinSettingsConfig * _17;
  unsigned char _18;
  long unsigned int _19;
  const struct Siul2_Port_Ip_PinSettingsConfig * _20;
  int _21;
  int _22;
  long unsigned int _23;
  long unsigned int _24;
  const struct Siul2_Port_Ip_PinSettingsConfig * _25;
  int _26;
  int _27;
  <unnamed type> _28;
  unsigned char inputMuxIterator.7_29;

  <bb 2> :
  ConfigPtr_35 = pPort_Setting;
  MaxPinConfigured_36 = u32MaxPinConfigured;
  _1 = base_37(D) != 0B;
  DevAssert (_1);
  _2 = pin_39(D) <= 15;
  DevAssert (_2);
  u32MscrBase_41 = 1076429376;
  base.6_3 = (long unsigned int) base_37(D);
  _4 = base.6_3 - u32MscrBase_41;
  portNumber_42 = _4 / 64;
  _5 = portNumber_42 << 4;
  _6 = (long unsigned int) pin_39(D);
  u32MscrId_43 = _5 + _6;
  u32PinIdx_44 = 0;
  goto <bb 9>; [INV]

  <bb 3> :
  _7 = u32PinIdx_30 * 188;
  _8 = ConfigPtr_35 + _7;
  _9 = _8->pinPortIdx;
  if (u32MscrId_43 == _9)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  _10 = u32PinIdx_30 * 188;
  _11 = ConfigPtr_35 + _10;
  _12 = _11->base;
  config_46(D)->base = _12;
  _13 = u32PinIdx_30 * 188;
  _14 = ConfigPtr_35 + _13;
  _15 = _14->pinPortIdx;
  config_46(D)->pinPortIdx = _15;
  _16 = u32PinIdx_30 * 188;
  _17 = ConfigPtr_35 + _16;
  _18 = _17->initValue;
  config_46(D)->initValue = _18;
  inputMuxIterator_50 = 0;
  goto <bb 6>; [INV]

  <bb 5> :
  _19 = u32PinIdx_30 * 188;
  _20 = ConfigPtr_35 + _19;
  _21 = (int) inputMuxIterator_31;
  _22 = (int) inputMuxIterator_31;
  _23 = _20->inputMuxReg[_21];
  config_46(D)->inputMuxReg[_22] = _23;
  _24 = u32PinIdx_30 * 188;
  _25 = ConfigPtr_35 + _24;
  _26 = (int) inputMuxIterator_31;
  _27 = (int) inputMuxIterator_31;
  _28 = _25->inputMux[_26];
  config_46(D)->inputMux[_27] = _28;
  inputMuxIterator.7_29 = inputMuxIterator_31;
  inputMuxIterator_54 = inputMuxIterator.7_29 + 1;

  <bb 6> :
  # inputMuxIterator_31 = PHI <inputMuxIterator_50(4), inputMuxIterator_54(5)>
  if (inputMuxIterator_31 <= 15)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  Siul2_Port_Ip_GetMSCRConfiguration (config_46(D), base_37(D), pin_39(D));
  goto <bb 10>; [INV]

  <bb 8> :
  u32PinIdx_45 = u32PinIdx_30 + 1;

  <bb 9> :
  # u32PinIdx_30 = PHI <u32PinIdx_44(2), u32PinIdx_45(8)>
  if (u32PinIdx_30 < MaxPinConfigured_36)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  return;

}


Siul2_Port_Ip_RevertPinConfiguration (const struct Siul2_Port_Ip_PortType * const base, uint16 pin)
{
  uint32 u32MscrId;
  uint32 portNumber;
  uint32 MaxPinConfigured;
  const struct Siul2_Port_Ip_PinSettingsConfig * ConfigPtr;
  uint32 u32RegVal;
  uint32 u32PinIdx;
  uint32 D.6756;
  _Bool _1;
  _Bool _2;
  long unsigned int base.5_3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  const struct Siul2_Port_Ip_PinSettingsConfig * _8;
  long unsigned int _9;
  long unsigned int _10;
  const struct Siul2_Port_Ip_PinSettingsConfig * _11;
  int _12;
  uint32 _30;

  <bb 2> :
  u32RegVal_16 = 4294967295;
  ConfigPtr_18 = pPort_Setting;
  MaxPinConfigured_19 = u32MaxPinConfigured;
  _1 = base_20(D) != 0B;
  DevAssert (_1);
  _2 = pin_22(D) <= 15;
  DevAssert (_2);
  base.5_3 = (long unsigned int) base_20(D);
  _4 = base.5_3 + 3218537920;
  portNumber_24 = _4 >> 6;
  _5 = portNumber_24 << 4;
  _6 = (long unsigned int) pin_22(D);
  u32MscrId_25 = _5 + _6;
  u32PinIdx_26 = 0;
  goto <bb 6>; [INV]

  <bb 3> :
  _7 = u32PinIdx_13 * 188;
  _8 = ConfigPtr_18 + _7;
  _9 = _8->pinPortIdx;
  if (u32MscrId_25 == _9)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _10 = u32PinIdx_13 * 188;
  _11 = ConfigPtr_18 + _10;
  Siul2_Port_Ip_PinInit (_11);
  _12 = (int) pin_22(D);
  u32RegVal_29 ={v} base_20(D)->MSCR[_12];
  goto <bb 7>; [INV]

  <bb 5> :
  u32PinIdx_27 = u32PinIdx_13 + 1;

  <bb 6> :
  # u32PinIdx_13 = PHI <u32PinIdx_26(2), u32PinIdx_27(5)>
  if (u32PinIdx_13 < MaxPinConfigured_19)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  # u32RegVal_14 = PHI <u32RegVal_29(4), u32RegVal_16(6)>
  _30 = u32RegVal_14;

  <bb 8> :
<L5>:
  return _30;

}


Siul2_Port_Ip_SetPinDirection (struct Siul2_Port_Ip_PortType * const base, uint16 pin, Siul2_Port_Ip_PortDirectionType direction)
{
  _Bool _1;
  _Bool _2;
  int _3;
  long unsigned int _4;
  int _5;
  long unsigned int _6;
  int _7;
  long unsigned int _8;
  int _9;
  long unsigned int _10;
  int _11;
  long unsigned int _12;
  int _13;
  long unsigned int _14;
  int _15;
  long unsigned int _16;
  int _17;
  long unsigned int _18;
  int _19;
  long unsigned int _20;
  int _21;
  long unsigned int _22;
  int _23;
  long unsigned int _24;
  int _25;
  long unsigned int _26;

  <bb 2> :
  _1 = base_28(D) != 0B;
  DevAssert (_1);
  _2 = pin_31(D) <= 15;
  DevAssert (_2);
  SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04 ();
  switch (direction_34(D)) <default: <L4> [INV], case 0: <L0> [INV], case 1: <L1> [INV], case 2: <L2> [INV], case 3: <L3> [INV]>

  <bb 3> :
<L0>:
  _3 = (int) pin_31(D);
  _4 ={v} base_28(D)->MSCR[_3];
  _5 = (int) pin_31(D);
  _6 = _4 & 4292870143;
  base_28(D)->MSCR[_5] ={v} _6;
  _7 = (int) pin_31(D);
  _8 ={v} base_28(D)->MSCR[_7];
  _9 = (int) pin_31(D);
  _10 = _8 | 524288;
  base_28(D)->MSCR[_9] ={v} _10;
  goto <bb 8>; [INV]

  <bb 4> :
<L1>:
  _11 = (int) pin_31(D);
  _12 ={v} base_28(D)->MSCR[_11];
  _13 = (int) pin_31(D);
  _14 = _12 & 4294443007;
  base_28(D)->MSCR[_13] ={v} _14;
  _15 = (int) pin_31(D);
  _16 ={v} base_28(D)->MSCR[_15];
  _17 = (int) pin_31(D);
  _18 = _16 | 2097152;
  base_28(D)->MSCR[_17] ={v} _18;
  goto <bb 8>; [INV]

  <bb 5> :
<L2>:
  _19 = (int) pin_31(D);
  _20 ={v} base_28(D)->MSCR[_19];
  _21 = (int) pin_31(D);
  _22 = _20 | 2621440;
  base_28(D)->MSCR[_21] ={v} _22;
  goto <bb 8>; [INV]

  <bb 6> :
<L3>:
  _23 = (int) pin_31(D);
  _24 ={v} base_28(D)->MSCR[_23];
  _25 = (int) pin_31(D);
  _26 = _24 & 4292345855;
  base_28(D)->MSCR[_25] ={v} _26;
  goto <bb 8>; [INV]

  <bb 7> :
<L4>:

  <bb 8> :
  SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04 ();
  return;

}


Siul2_Port_Ip_SetInputBuffer (struct Siul2_Port_Ip_PortType * const base, uint16 pin, boolean enable, uint32 inputMuxReg, Siul2_Port_Ip_PortInputMux inputMux)
{
  uint32 imcrVal;
  uint32 imcrRegIdx;
  struct SIUL2_Type * siul2Base;
  long unsigned int iftmp.4;
  _Bool _1;
  int _2;
  long unsigned int _3;
  int _4;
  long unsigned int _5;
  int _6;
  long unsigned int _7;
  int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int iftmp.4_14;
  long unsigned int iftmp.4_27;
  long unsigned int iftmp.4_28;

  <bb 2> :
  siul2Base_17 = 4294967295B;
  imcrRegIdx_19 = inputMuxReg_18(D);
  _1 = pin_20(D) <= 15;
  DevAssert (_1);
  SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03 ();
  if (base_24(D) != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  _2 = (int) pin_20(D);
  _3 ={v} base_24(D)->MSCR[_2];
  _4 = (int) pin_20(D);
  _5 = _3 & 4294443007;
  base_24(D)->MSCR[_4] ={v} _5;
  _6 = (int) pin_20(D);
  _7 ={v} base_24(D)->MSCR[_6];
  if (enable_26(D) != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  iftmp.4_28 = 524288;
  goto <bb 6>; [INV]

  <bb 5> :
  iftmp.4_27 = 0;

  <bb 6> :
  # iftmp.4_14 = PHI <iftmp.4_28(4), iftmp.4_27(5)>
  _8 = (int) pin_20(D);
  _9 = iftmp.4_14 | _7;
  base_24(D)->MSCR[_8] ={v} _9;

  <bb 7> :
  if (inputMux_30(D) != 16)
    goto <bb 8>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 8> :
  if (imcrRegIdx_19 <= 511)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  siul2Base_31 = 1076428800B;

  <bb 10> :
  # siul2Base_13 = PHI <siul2Base_17(8), siul2Base_31(9)>
  if (imcrRegIdx_19 <= 378)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  _10 = imcrRegIdx_19 & 511;
  imcrVal_32 ={v} siul2Base_13->IMCR[_10];
  imcrVal_33 = imcrVal_32 & 4294967280;
  _11 = inputMux_30(D) & 15;
  imcrVal_34 = imcrVal_33 | _11;
  _12 = imcrRegIdx_19 & 511;
  siul2Base_13->IMCR[_12] ={v} imcrVal_34;

  <bb 12> :
  SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03 ();
  return;

}


Siul2_Port_Ip_SetOutputBuffer (struct Siul2_Port_Ip_PortType * const base, uint16 pin, boolean enable, Siul2_Port_Ip_PortMux mux)
{
  long unsigned int iftmp.3;
  _Bool _1;
  _Bool _2;
  int _3;
  long unsigned int _4;
  int _5;
  long unsigned int _6;
  int _7;
  long unsigned int _8;
  int _9;
  long unsigned int _10;
  int _11;
  long unsigned int _12;
  int _13;
  long unsigned int _14;
  int _15;
  long unsigned int _16;
  long unsigned int _17;
  int _18;
  long unsigned int _19;
  long unsigned int iftmp.3_20;
  long unsigned int iftmp.3_29;
  long unsigned int iftmp.3_30;

  <bb 2> :
  _1 = base_21(D) != 0B;
  DevAssert (_1);
  _2 = pin_24(D) <= 15;
  DevAssert (_2);
  SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02 ();
  _3 = (int) pin_24(D);
  _4 ={v} base_21(D)->MSCR[_3];
  _5 = (int) pin_24(D);
  _6 = _4 & 4292870143;
  base_21(D)->MSCR[_5] ={v} _6;
  _7 = (int) pin_24(D);
  _8 ={v} base_21(D)->MSCR[_7];
  if (enable_28(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.3_30 = 2097152;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.3_29 = 0;

  <bb 5> :
  # iftmp.3_20 = PHI <iftmp.3_30(3), iftmp.3_29(4)>
  _9 = (int) pin_24(D);
  _10 = iftmp.3_20 | _8;
  base_21(D)->MSCR[_9] ={v} _10;
  _11 = (int) pin_24(D);
  _12 ={v} base_21(D)->MSCR[_11];
  _13 = (int) pin_24(D);
  _14 = _12 & 4294967280;
  base_21(D)->MSCR[_13] ={v} _14;
  _15 = (int) pin_24(D);
  _16 ={v} base_21(D)->MSCR[_15];
  _17 = mux_33(D) & 15;
  _18 = (int) pin_24(D);
  _19 = _16 | _17;
  base_21(D)->MSCR[_18] ={v} _19;
  SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02 ();
  return;

}


Siul2_Port_Ip_SetPullSel (struct Siul2_Port_Ip_PortType * const base, uint16 pin, Siul2_Port_Ip_PortPullConfig pullConfig)
{
  uint32 pusVal;
  uint32 pueVal;
  uint32 regVal;
  _Bool _1;
  _Bool _2;
  int _3;
  long unsigned int _4;
  long unsigned int _5;
  int _6;
  long unsigned int _7;
  int _8;
  long unsigned int _9;
  int _10;
  int _11;
  int _12;

  <bb 2> :
  _1 = base_14(D) != 0B;
  DevAssert (_1);
  _2 = pin_17(D) <= 15;
  DevAssert (_2);
  pueVal_19 = 8192;
  pusVal_20 = 2048;
  SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01 ();
  switch (pullConfig_22(D)) <default: <L3> [INV], case 0: <L1> [INV], case 1: <L2> [INV], case 2: <L0> [INV]>

  <bb 3> :
<L0>:
  _3 = (int) pin_17(D);
  _4 ={v} base_14(D)->MSCR[_3];
  _5 = ~pueVal_19;
  _6 = (int) pin_17(D);
  _7 = _4 & _5;
  base_14(D)->MSCR[_6] ={v} _7;
  goto <bb 7>; [INV]

  <bb 4> :
<L1>:
  _8 = (int) pin_17(D);
  regVal_28 ={v} base_14(D)->MSCR[_8];
  regVal_29 = regVal_28 | pueVal_19;
  _9 = ~pusVal_20;
  regVal_30 = regVal_29 & _9;
  _10 = (int) pin_17(D);
  base_14(D)->MSCR[_10] ={v} regVal_30;
  goto <bb 7>; [INV]

  <bb 5> :
<L2>:
  _11 = (int) pin_17(D);
  regVal_24 ={v} base_14(D)->MSCR[_11];
  regVal_25 = regVal_24 | pueVal_19;
  regVal_26 = regVal_25 | pusVal_20;
  _12 = (int) pin_17(D);
  base_14(D)->MSCR[_12] ={v} regVal_26;
  goto <bb 7>; [INV]

  <bb 6> :
<L3>:
  DevAssert (0);

  <bb 7> :
  SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01 ();
  return;

}


Siul2_Port_Ip_Init (uint32 pinCount, const struct Siul2_Port_Ip_PinSettingsConfig * config)
{
  uint32 i;
  Siul2_Port_Ip_PortStatusType D.6736;
  long unsigned int _1;
  const struct Siul2_Port_Ip_PinSettingsConfig * _2;
  Siul2_Port_Ip_PortStatusType _11;

  <bb 2> :
  pPort_Setting = config_6(D);
  u32MaxPinConfigured = pinCount_8(D);
  i_10 = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  _1 = i_3 * 188;
  _2 = config_6(D) + _1;
  Siul2_Port_Ip_PinInit (_2);
  i_13 = i_3 + 1;

  <bb 4> :
  # i_3 = PHI <i_10(2), i_13(3)>
  if (i_3 < pinCount_8(D))
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  _11 = 0;

  <bb 6> :
<L3>:
  return _11;

}


Siul2_Port_Ip_GetMSCRConfiguration (struct Siul2_Port_Ip_PinSettingsConfig * config, const struct Siul2_Port_Ip_PortType * const base, uint16 pin)
{
  Siul2_Port_Ip_PortPullConfig pullValue;
  uint32 u32TempVal;
  uint32 u32RegVal;
  int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;

  <bb 2> :
  u32RegVal_13 = 0;
  u32TempVal_14 = 0;
  _1 = (int) pin_15(D);
  u32RegVal_18 ={v} base_17(D)->MSCR[_1];
  u32TempVal_19 = u32RegVal_18 & 15;
  config_20(D)->mux = u32TempVal_19;
  _2 = u32RegVal_18 >> 5;
  u32TempVal_22 = _2 & 1;
  config_20(D)->safeMode = u32TempVal_22;
  _3 = u32RegVal_18 & 8192;
  if (_3 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  pullValue_26 = 2;
  goto <bb 5>; [INV]

  <bb 4> :
  _4 = u32RegVal_18 >> 11;
  u32TempVal_24 = _4 & 1;
  pullValue_25 = u32TempVal_24;

  <bb 5> :
  # pullValue_12 = PHI <pullValue_26(3), pullValue_25(4)>
  config_20(D)->pullConfig = pullValue_12;
  _5 = u32RegVal_18 >> 14;
  u32TempVal_28 = _5 & 1;
  config_20(D)->slewRateCtrlSel = u32TempVal_28;
  _6 = u32RegVal_18 >> 8;
  u32TempVal_30 = _6 & 1;
  config_20(D)->driveStrength = u32TempVal_30;
  _7 = u32RegVal_18 >> 6;
  u32TempVal_32 = _7 & 1;
  config_20(D)->inputFilter = u32TempVal_32;
  _8 = u32RegVal_18 >> 17;
  u32TempVal_34 = _8 & 1;
  config_20(D)->invert = u32TempVal_34;
  _9 = u32RegVal_18 >> 16;
  u32TempVal_36 = _9 & 1;
  config_20(D)->pullKeep = u32TempVal_36;
  _10 = u32RegVal_18 >> 19;
  u32TempVal_38 = _10 & 1;
  config_20(D)->inputBuffer = u32TempVal_38;
  _11 = u32RegVal_18 >> 21;
  u32TempVal_40 = _11 & 1;
  config_20(D)->outputBuffer = u32TempVal_40;
  return;

}


Siul2_Port_Ip_WriteIMCRConfiguration (const struct Siul2_Port_Ip_PinSettingsConfig * config)
{
  struct SIUL2_Type * imcrBase;
  uint32 imcrRegIdx;
  uint8 inputMuxIterator;
  <unnamed type> _1;
  int _2;
  <unnamed type> _3;
  int _4;
  int _5;
  <unnamed type> _6;
  long unsigned int _7;
  long unsigned int _8;
  unsigned char inputMuxIterator.1_9;

  <bb 2> :
  imcrBase_17 = 1076428800B;
  _1 = config_19(D)->inputBuffer;
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 3> :
  inputMuxIterator_20 = 0;
  goto <bb 10>; [INV]

  <bb 4> :
  _2 = (int) inputMuxIterator_10;
  _3 = config_19(D)->inputMux[_2];
  if (_3 != 16)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 5> :
  _4 = (int) inputMuxIterator_10;
  imcrRegIdx_21 = config_19(D)->inputMuxReg[_4];
  if (imcrRegIdx_21 <= 511)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  imcrBase_22 = 1076428800B;

  <bb 7> :
  # imcrBase_11 = PHI <imcrBase_13(5), imcrBase_22(6)>
  if (imcrRegIdx_21 <= 378)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  _5 = (int) inputMuxIterator_10;
  _6 = config_19(D)->inputMux[_5];
  _7 = imcrRegIdx_21 & 511;
  _8 = _6 & 15;
  imcrBase_11->IMCR[_7] ={v} _8;

  <bb 9> :
  # imcrBase_12 = PHI <imcrBase_13(4), imcrBase_11(7), imcrBase_11(8)>
  inputMuxIterator.1_9 = inputMuxIterator_10;
  inputMuxIterator_24 = inputMuxIterator.1_9 + 1;

  <bb 10> :
  # inputMuxIterator_10 = PHI <inputMuxIterator_20(3), inputMuxIterator_24(9)>
  # imcrBase_13 = PHI <imcrBase_17(3), imcrBase_12(9)>
  if (inputMuxIterator_10 <= 15)
    goto <bb 4>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  return;

}


Siul2_Port_Ip_WriteDCMConfiguration (const struct Siul2_Port_Ip_PinSettingsConfig * config)
{
  uint32 adcInterleaves;
  uint8 iterator;
  uint32 dcmrwf4RegValue;
  volatile uint32 * _1;
  int _2;
  long unsigned int _3;
  long unsigned int _4;
  unsigned char iterator.2_5;
  volatile uint32 * _6;

  <bb 2> :
  _1 = 1076545036B;
  dcmrwf4RegValue_11 ={v} *_1;
  iterator_12 = 0;
  goto <bb 8>; [INV]

  <bb 3> :
  _2 = (int) iterator_9;
  adcInterleaves_15 = config_14(D)->adcInterleaves[_2];
  if (adcInterleaves_15 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  _3 = adcInterleaves_15 & 32768;
  if (_3 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _4 = adcInterleaves_15 | 4294965633;
  dcmrwf4RegValue_17 = dcmrwf4RegValue_8 & _4;
  goto <bb 7>; [INV]

  <bb 6> :
  dcmrwf4RegValue_16 = dcmrwf4RegValue_8 | adcInterleaves_15;

  <bb 7> :
  # dcmrwf4RegValue_7 = PHI <dcmrwf4RegValue_8(3), dcmrwf4RegValue_17(5), dcmrwf4RegValue_16(6)>
  iterator.2_5 = iterator_9;
  iterator_18 = iterator.2_5 + 1;

  <bb 8> :
  # dcmrwf4RegValue_8 = PHI <dcmrwf4RegValue_11(2), dcmrwf4RegValue_7(7)>
  # iterator_9 = PHI <iterator_12(2), iterator_18(7)>
  if (iterator_9 <= 1)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  _6 = 1076545036B;
  *_6 ={v} dcmrwf4RegValue_8;
  return;

}


Siul2_Port_Ip_PinInit (const struct Siul2_Port_Ip_PinSettingsConfig * config)
{
  uint8 siulInstance;
  uint32 pinsValues;
  _Bool _1;
  long unsigned int _2;
  _Bool _3;
  struct SIUL2_Type * _4;
  <unnamed type> _5;
  <unnamed type> _6;
  long unsigned int _7;
  long unsigned int _8;
  <unnamed type> _9;
  <unnamed type> _10;
  long unsigned int _11;
  long unsigned int _12;
  <unnamed type> _13;
  <unnamed type> _14;
  long unsigned int _15;
  long unsigned int _16;
  <unnamed type> _17;
  <unnamed type> _18;
  long unsigned int _19;
  long unsigned int _20;
  <unnamed type> _21;
  <unnamed type> _22;
  long unsigned int _23;
  long unsigned int _24;
  <unnamed type> _25;
  <unnamed type> _26;
  long unsigned int _27;
  long unsigned int _28;
  <unnamed type> _29;
  <unnamed type> _30;
  long unsigned int _31;
  long unsigned int _32;
  <unnamed type> _33;
  <unnamed type> _34;
  long unsigned int _35;
  long unsigned int _36;
  <unnamed type> _37;
  <unnamed type> _38;
  long unsigned int _39;
  long unsigned int _40;
  <unnamed type> _41;
  long unsigned int _42;
  <unnamed type> _43;
  <unnamed type> _44;
  unsigned char _45;
  int _46;
  long unsigned int _47;
  long unsigned int _48;
  short unsigned int _49;
  short unsigned int _50;
  long unsigned int _51;
  long unsigned int _52;
  long unsigned int _53;
  volatile uint8 * _54;
  unsigned char _55;
  struct SIUL2_Type * _56;
  long unsigned int _57;

  <bb 2> :
  pinsValues_69 = 0;
  siulInstance_70 = 0;
  _1 = config_71(D) != 0B;
  DevAssert (_1);
  _2 = config_71(D)->pinPortIdx;
  _3 = _2 <= 219;
  DevAssert (_3);
  _4 = config_71(D)->base;
  if (_4 == 1076428800B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  siulInstance_75 = 0;

  <bb 4> :
  # siulInstance_67 = PHI <siulInstance_70(2), siulInstance_75(3)>
  _5 = config_71(D)->pullConfig;
  if (_5 != 2)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  pinsValues_76 = pinsValues_69 | 8192;
  _6 = config_71(D)->pullConfig;
  _7 = _6 << 11;
  _8 = _7 & 2048;
  pinsValues_77 = pinsValues_76 | _8;

  <bb 6> :
  # pinsValues_58 = PHI <pinsValues_69(4), pinsValues_77(5)>
  _9 = config_71(D)->outputBuffer;
  if (_9 != 2)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _10 = config_71(D)->outputBuffer;
  _11 = _10 << 21;
  _12 = _11 & 2097152;
  pinsValues_78 = pinsValues_58 | _12;

  <bb 8> :
  # pinsValues_59 = PHI <pinsValues_58(6), pinsValues_78(7)>
  _13 = config_71(D)->invert;
  if (_13 != 2)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  _14 = config_71(D)->invert;
  _15 = _14 << 17;
  _16 = _15 & 131072;
  pinsValues_79 = pinsValues_59 | _16;

  <bb 10> :
  # pinsValues_60 = PHI <pinsValues_59(8), pinsValues_79(9)>
  _17 = config_71(D)->pullKeep;
  if (_17 != 2)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  _18 = config_71(D)->pullKeep;
  _19 = _18 << 16;
  _20 = _19 & 65536;
  pinsValues_80 = pinsValues_60 | _20;

  <bb 12> :
  # pinsValues_61 = PHI <pinsValues_60(10), pinsValues_80(11)>
  _21 = config_71(D)->driveStrength;
  if (_21 != 2)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  _22 = config_71(D)->driveStrength;
  _23 = _22 << 8;
  _24 = _23 & 256;
  pinsValues_81 = pinsValues_61 | _24;

  <bb 14> :
  # pinsValues_62 = PHI <pinsValues_61(12), pinsValues_81(13)>
  _25 = config_71(D)->inputFilter;
  if (_25 != 2)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  _26 = config_71(D)->inputFilter;
  _27 = _26 << 6;
  _28 = _27 & 64;
  pinsValues_82 = pinsValues_62 | _28;

  <bb 16> :
  # pinsValues_63 = PHI <pinsValues_62(14), pinsValues_82(15)>
  _29 = config_71(D)->inputBuffer;
  if (_29 != 2)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  _30 = config_71(D)->inputBuffer;
  _31 = _30 << 19;
  _32 = _31 & 524288;
  pinsValues_83 = pinsValues_63 | _32;

  <bb 18> :
  # pinsValues_64 = PHI <pinsValues_63(16), pinsValues_83(17)>
  _33 = config_71(D)->slewRateCtrlSel;
  if (_33 != 2)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  _34 = config_71(D)->slewRateCtrlSel;
  _35 = _34 << 14;
  _36 = _35 & 16384;
  pinsValues_84 = pinsValues_64 | _36;

  <bb 20> :
  # pinsValues_65 = PHI <pinsValues_64(18), pinsValues_84(19)>
  _37 = config_71(D)->safeMode;
  if (_37 != 2)
    goto <bb 21>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 21> :
  _38 = config_71(D)->safeMode;
  _39 = _38 << 5;
  _40 = _39 & 32;
  pinsValues_85 = pinsValues_65 | _40;

  <bb 22> :
  # pinsValues_66 = PHI <pinsValues_65(20), pinsValues_85(21)>
  _41 = config_71(D)->mux;
  _42 = _41 & 15;
  pinsValues_86 = pinsValues_66 | _42;
  _43 = config_71(D)->mux;
  if (_43 == 0)
    goto <bb 23>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 23> :
  _44 = config_71(D)->outputBuffer;
  if (_44 == 1)
    goto <bb 24>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 24> :
  _45 = config_71(D)->initValue;
  if (_45 != 2)
    goto <bb 25>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 25> :
  _46 = (int) siulInstance_67;
  _47 = 1076428800;
  _48 = config_71(D)->pinPortIdx;
  _49 = (short unsigned int) _48;
  _50 = _49 ^ 3;
  _51 = (long unsigned int) _50;
  _52 = _47 + _51;
  _53 = _52 + 4864;
  _54 = (volatile uint8 *) _53;
  _55 = config_71(D)->initValue;
  *_54 ={v} _55;

  <bb 26> :
  _56 = config_71(D)->base;
  _57 = config_71(D)->pinPortIdx;
  _56->MSCR[_57] ={v} pinsValues_86;
  Siul2_Port_Ip_WriteIMCRConfiguration (config_71(D));
  Siul2_Port_Ip_WriteDCMConfiguration (config_71(D));
  return;

}


DevAssert (volatile boolean x)
{
  _Bool x.0_1;

  <bb 2> :
  x.0_1 ={v} x;
  if (x.0_1 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  __asm__ __volatile__("BKPT #0");
  goto <bb 3>; [INV]

  <bb 4> :
  return;

}


