
Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

Clock_Ip_axIntOscCallbacks/25 (Clock_Ip_axIntOscCallbacks) @06f2f360
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/15 (addr) Clock_Ip_ClockInitializeObjects/15 (addr) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_au8IrcoscCallbackIndex/24 (Clock_Ip_au8IrcoscCallbackIndex) @06f2f318
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/15 (read) Clock_Ip_ClockInitializeObjects/15 (read) 
  Availability: not_available
  Varpool flags: read-only
Clock_Ip_FreqIds/23 (Clock_Ip_FreqIds) @06f2a630
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_CodeInRamSetFlashWaitStates/6 (read) Clock_Ip_PRAMCSetRamIWS/18 (read) Clock_Ip_PRAMCSetRamIWS/18 (read) 
  Availability: not_available
  Varpool flags:
Clock_Ip_pxConfig/22 (Clock_Ip_pxConfig) @06f2a5e8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Clock_Ip_CodeInRamSetFlashWaitStates/6 (read) Clock_Ip_PRAMCSetRamIWS/18 (read) Clock_Ip_PRAMCSetRamIWS/18 (read) 
  Availability: not_available
  Varpool flags:
Clock_Ip_ReportClockErrors/21 (Clock_Ip_ReportClockErrors) @06f0c7e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Clock_Ip_PowerClockIpModules/5 Clock_Ip_PowerClockIpModules/5 Clock_Ip_PowerClockIpModules/5 Clock_Ip_PowerClockIpModules/5 Clock_Ip_PllPowerClockIp/4 
  Calls: 
Clock_Ip_TimeoutExpired/20 (Clock_Ip_TimeoutExpired) @06f0c700
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Clock_Ip_PowerClockIpModules/5 Clock_Ip_PowerClockIpModules/5 Clock_Ip_PowerClockIpModules/5 Clock_Ip_PowerClockIpModules/5 Clock_Ip_PllPowerClockIp/4 
  Calls: 
Clock_Ip_StartTimeout/19 (Clock_Ip_StartTimeout) @06f0c620
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Clock_Ip_PowerClockIpModules/5 Clock_Ip_PowerClockIpModules/5 Clock_Ip_PowerClockIpModules/5 Clock_Ip_PowerClockIpModules/5 Clock_Ip_PllPowerClockIp/4 
  Calls: 
Clock_Ip_PRAMCSetRamIWS/18 (Clock_Ip_PRAMCSetRamIWS) @06f0c1c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Clock_Ip_pxConfig/22 (read) Clock_Ip_FreqIds/23 (read) Clock_Ip_pxConfig/22 (read) Clock_Ip_FreqIds/23 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Clock_Ip_SetRamWaitStates/7 
  Calls: 
Clock_Ip_FLASH_SetFlashIWS/17 (Clock_Ip_FLASH_SetFlashIWS) @06f06e00
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Clock_Ip_SetFlashWaitStatesCallback/2 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Clock_Ip_SetFlashWaitStates/8 
  Calls: 
   Indirect call Num speculative call targets: 0
Clock_Ip_Command/16 (Clock_Ip_Command) @06f068c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Clock_Ip_SpecificPlatformInitClock/10 Clock_Ip_ClockInitializeObjects/15 
Clock_Ip_ClockInitializeObjects/15 (Clock_Ip_ClockInitializeObjects) @06f06380
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Clock_Ip_bObjectsAreInitialized/3 (read) Clock_Ip_bObjectsAreInitialized/3 (write) Clock_Ip_au8IrcoscCallbackIndex/24 (read) Clock_Ip_axIntOscCallbacks/25 (addr) Clock_Ip_pxSircStdbyClock/0 (write) Clock_Ip_au8IrcoscCallbackIndex/24 (read) Clock_Ip_axIntOscCallbacks/25 (addr) Clock_Ip_pxFircStdbyClock/1 (write) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Clock_Ip_Command/16 
  Calls: 
EnableSircInStandbyMode/14 (EnableSircInStandbyMode) @06f06d20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Clock_Ip_pxSircStdbyClock/0 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call Num speculative call targets: 0
DisableSircInStandbyMode/13 (DisableSircInStandbyMode) @06f06a80
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Clock_Ip_pxSircStdbyClock/0 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call Num speculative call targets: 0
EnableFircInStandbyMode/12 (EnableFircInStandbyMode) @06f067e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Clock_Ip_pxFircStdbyClock/1 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call Num speculative call targets: 0
DisableFircInStandbyMode/11 (DisableFircInStandbyMode) @06f06540
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Clock_Ip_pxFircStdbyClock/1 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call Num speculative call targets: 0
Clock_Ip_SpecificPlatformInitClock/10 (Clock_Ip_SpecificPlatformInitClock) @06f062a0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Clock_Ip_Command/16 
  Calls: Clock_Ip_PowerClockIpModules/5 
Clock_Ip_McMeEnterKey/9 (Clock_Ip_McMeEnterKey) @06f06000
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Clock_Ip_PowerClockIpModules/5 Clock_Ip_PowerClockIpModules/5 Clock_Ip_PowerClockIpModules/5 Clock_Ip_PowerClockIpModules/5 Clock_Ip_PllPowerClockIp/4 
  Calls: 
Clock_Ip_SetFlashWaitStates/8 (Clock_Ip_SetFlashWaitStates) @06d158c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Clock_Ip_FLASH_SetFlashIWS/17 
Clock_Ip_SetRamWaitStates/7 (Clock_Ip_SetRamWaitStates) @06d15e00
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Clock_Ip_PRAMCSetRamIWS/18 
Clock_Ip_CodeInRamSetFlashWaitStates/6 (Clock_Ip_CodeInRamSetFlashWaitStates) @06d15b60
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  Address is taken.
  References: Clock_Ip_pxConfig/22 (read) Clock_Ip_FreqIds/23 (read) 
  Referring: Clock_Ip_SetFlashWaitStatesCallback/2 (addr) 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
Clock_Ip_PowerClockIpModules/5 (Clock_Ip_PowerClockIpModules) @06d157e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Clock_Ip_SpecificPlatformInitClock/10 
  Calls: Clock_Ip_ReportClockErrors/21 Clock_Ip_TimeoutExpired/20 Clock_Ip_StartTimeout/19 Clock_Ip_McMeEnterKey/9 Clock_Ip_ReportClockErrors/21 Clock_Ip_TimeoutExpired/20 Clock_Ip_StartTimeout/19 Clock_Ip_McMeEnterKey/9 Clock_Ip_ReportClockErrors/21 Clock_Ip_TimeoutExpired/20 Clock_Ip_StartTimeout/19 Clock_Ip_McMeEnterKey/9 Clock_Ip_ReportClockErrors/21 Clock_Ip_TimeoutExpired/20 Clock_Ip_StartTimeout/19 Clock_Ip_McMeEnterKey/9 Clock_Ip_PllPowerClockIp/4 
Clock_Ip_PllPowerClockIp/4 (Clock_Ip_PllPowerClockIp) @06d151c0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Clock_Ip_PowerClockIpModules/5 
  Calls: Clock_Ip_ReportClockErrors/21 Clock_Ip_TimeoutExpired/20 Clock_Ip_StartTimeout/19 Clock_Ip_McMeEnterKey/9 
Clock_Ip_bObjectsAreInitialized/3 (Clock_Ip_bObjectsAreInitialized) @06d08ee8
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Clock_Ip_ClockInitializeObjects/15 (read) Clock_Ip_ClockInitializeObjects/15 (write) 
  Availability: available
  Varpool flags:
Clock_Ip_SetFlashWaitStatesCallback/2 (Clock_Ip_SetFlashWaitStatesCallback) @06d08e58
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Clock_Ip_CodeInRamSetFlashWaitStates/6 (addr) 
  Referring: Clock_Ip_FLASH_SetFlashIWS/17 (read) 
  Availability: available
  Varpool flags: initialized
Clock_Ip_pxFircStdbyClock/1 (Clock_Ip_pxFircStdbyClock) @06d08dc8
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: DisableFircInStandbyMode/11 (read) EnableFircInStandbyMode/12 (read) Clock_Ip_ClockInitializeObjects/15 (write) 
  Availability: available
  Varpool flags:
Clock_Ip_pxSircStdbyClock/0 (Clock_Ip_pxSircStdbyClock) @06d08d38
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: DisableSircInStandbyMode/13 (read) EnableSircInStandbyMode/14 (read) Clock_Ip_ClockInitializeObjects/15 (write) 
  Availability: available
  Varpool flags:
Clock_Ip_PRAMCSetRamIWS ()
{
  uint32 Pram1RegVal;
  uint32 Pram0RegVal;
  uint32 ArrayRamFrequency;
  uint32 ControllerRamFrequency;
  struct PRAMC_Type * _1;
  struct PRAMC_Type * _2;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.12_3;
  const struct Clock_Ip_ConfiguredFrequencyType[<unknown>] * _4;
  unsigned char _5;
  int _6;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.13_7;
  const struct Clock_Ip_ConfiguredFrequencyType[<unknown>] * _8;
  unsigned char _9;
  int _10;
  struct PRAMC_Type * _11;
  struct PRAMC_Type * _12;

  <bb 2> :
  ControllerRamFrequency_15 = 0;
  ArrayRamFrequency_16 = 0;
  _1 = 1076248576B;
  Pram0RegVal_18 ={v} _1->PRCR1;
  _2 = 1078345728B;
  Pram1RegVal_19 ={v} _2->PRCR1;
  Clock_Ip_pxConfig.12_3 = Clock_Ip_pxConfig;
  _4 = Clock_Ip_pxConfig.12_3->ConfiguredFrequencies;
  _5 = Clock_Ip_FreqIds[14];
  _6 = (int) _5;
  ControllerRamFrequency_20 = (*_4)[_6].ConfiguredFrequencyValue;
  Clock_Ip_pxConfig.13_7 = Clock_Ip_pxConfig;
  _8 = Clock_Ip_pxConfig.13_7->ConfiguredFrequencies;
  _9 = Clock_Ip_FreqIds[15];
  _10 = (int) _9;
  ArrayRamFrequency_21 = (*_8)[_10].ConfiguredFrequencyValue;
  if (ControllerRamFrequency_20 > ArrayRamFrequency_21)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Pram0RegVal_24 = Pram0RegVal_18 | 1;
  Pram1RegVal_25 = Pram1RegVal_19 | 1;
  Pram0RegVal_26 = Pram0RegVal_24 & 4294967231;
  Pram1RegVal_27 = Pram1RegVal_25 & 4294967231;
  goto <bb 5>; [INV]

  <bb 4> :
  Pram0RegVal_22 = Pram0RegVal_18 & 4294967294;
  Pram1RegVal_23 = Pram1RegVal_19 & 4294967294;

  <bb 5> :
  # Pram0RegVal_13 = PHI <Pram0RegVal_26(3), Pram0RegVal_22(4)>
  # Pram1RegVal_14 = PHI <Pram1RegVal_27(3), Pram1RegVal_23(4)>
  _11 = 1076248576B;
  _11->PRCR1 ={v} Pram0RegVal_13;
  _12 = 1078345728B;
  _12->PRCR1 ={v} Pram1RegVal_14;
  return;

}


Clock_Ip_FLASH_SetFlashIWS ()
{
  void (*<T774>) (void) Clock_Ip_SetFlashWaitStatesCallback.11_1;

  <bb 2> :
  Clock_Ip_SetFlashWaitStatesCallback.11_1 = Clock_Ip_SetFlashWaitStatesCallback;
  Clock_Ip_SetFlashWaitStatesCallback.11_1 ();
  return;

}


Clock_Ip_Command (const struct Clock_Ip_ClockConfigType * Config, Clock_Ip_CommandType Command)
{
  <bb 2> :
  switch (Command_2(D)) <default: <L2> [INV], case 1: <L1> [INV], case 2: <L0> [INV]>

  <bb 3> :
<L0>:
  Clock_Ip_ClockInitializeObjects ();
  goto <bb 6>; [INV]

  <bb 4> :
<L1>:
  Clock_Ip_SpecificPlatformInitClock (Config_5(D));
  goto <bb 6>; [INV]

  <bb 5> :
<L2>:

  <bb 6> :
  return;

}


Clock_Ip_ClockInitializeObjects ()
{
  _Bool Clock_Ip_bObjectsAreInitialized.10_1;
  _Bool _2;
  unsigned char _3;
  int _4;
  const struct Clock_Ip_IntOscCallbackType * _5;
  unsigned char _6;
  int _7;
  const struct Clock_Ip_IntOscCallbackType * _8;

  <bb 2> :
  Clock_Ip_bObjectsAreInitialized.10_1 = Clock_Ip_bObjectsAreInitialized;
  _2 = ~Clock_Ip_bObjectsAreInitialized.10_1;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Clock_Ip_bObjectsAreInitialized = 1;
  _3 = Clock_Ip_au8IrcoscCallbackIndex[3];
  _4 = (int) _3;
  _5 = &Clock_Ip_axIntOscCallbacks[_4];
  Clock_Ip_pxSircStdbyClock = _5;
  _6 = Clock_Ip_au8IrcoscCallbackIndex[2];
  _7 = (int) _6;
  _8 = &Clock_Ip_axIntOscCallbacks[_7];
  Clock_Ip_pxFircStdbyClock = _8;

  <bb 4> :
  return;

}


EnableSircInStandbyMode ()
{
  struct Clock_Ip_IrcoscConfigType SircConfig;
  const struct Clock_Ip_IntOscCallbackType * Clock_Ip_pxSircStdbyClock.9_1;
  void (*<T6a0>) (const struct Clock_Ip_IrcoscConfigType *) _2;

  <bb 2> :
  SircConfig.Enable = 1;
  Clock_Ip_pxSircStdbyClock.9_1 = Clock_Ip_pxSircStdbyClock;
  _2 = Clock_Ip_pxSircStdbyClock.9_1->Enable;
  _2 (&SircConfig);
  SircConfig ={v} {CLOBBER};
  return;

}


DisableSircInStandbyMode ()
{
  const struct Clock_Ip_IntOscCallbackType * Clock_Ip_pxSircStdbyClock.8_1;
  void (*<T6a3>) (Clock_Ip_NameType) _2;

  <bb 2> :
  Clock_Ip_pxSircStdbyClock.8_1 = Clock_Ip_pxSircStdbyClock;
  _2 = Clock_Ip_pxSircStdbyClock.8_1->Disable;
  _2 (3);
  return;

}


EnableFircInStandbyMode ()
{
  struct Clock_Ip_IrcoscConfigType FircConfig;
  const struct Clock_Ip_IntOscCallbackType * Clock_Ip_pxFircStdbyClock.7_1;
  void (*<T6a0>) (const struct Clock_Ip_IrcoscConfigType *) _2;

  <bb 2> :
  FircConfig.Enable = 1;
  Clock_Ip_pxFircStdbyClock.7_1 = Clock_Ip_pxFircStdbyClock;
  _2 = Clock_Ip_pxFircStdbyClock.7_1->Enable;
  _2 (&FircConfig);
  FircConfig ={v} {CLOBBER};
  return;

}


DisableFircInStandbyMode ()
{
  const struct Clock_Ip_IntOscCallbackType * Clock_Ip_pxFircStdbyClock.6_1;
  void (*<T6a3>) (Clock_Ip_NameType) _2;

  <bb 2> :
  Clock_Ip_pxFircStdbyClock.6_1 = Clock_Ip_pxFircStdbyClock;
  _2 = Clock_Ip_pxFircStdbyClock.6_1->Disable;
  _2 (1);
  return;

}


Clock_Ip_SpecificPlatformInitClock (const struct Clock_Ip_ClockConfigType * Config)
{
  <bb 2> :
  Clock_Ip_PowerClockIpModules ();
  return;

}


Clock_Ip_McMeEnterKey ()
{
  struct MC_ME_Type * _1;
  struct MC_ME_Type * _2;

  <bb 2> :
  _1 = 1076740096B;
  _1->CTL_KEY ={v} 23280;
  _2 = 1076740096B;
  _2->CTL_KEY ={v} 42255;
  return;

}


Clock_Ip_SetFlashWaitStates ()
{
  <bb 2> :
  Clock_Ip_FLASH_SetFlashIWS ();
  return;

}


Clock_Ip_SetRamWaitStates ()
{
  <bb 2> :
  Clock_Ip_PRAMCSetRamIWS ();
  return;

}


Clock_Ip_CodeInRamSetFlashWaitStates ()
{
  uint32 ConfiguredCoreClock;
  uint32 RwscSetting;
  uint32 RegValue;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.5_1;
  const struct Clock_Ip_ConfiguredFrequencyType[<unknown>] * _2;
  unsigned char _3;
  int _4;
  struct FLASH_Type * _5;
  long unsigned int _6;
  long unsigned int _7;
  struct FLASH_Type * _8;
  long unsigned int _9;
  struct FLASH_Type * _10;
  long unsigned int _11;
  struct FLASH_Type * _12;

  <bb 2> :
  RwscSetting_14 = 0;
  ConfiguredCoreClock_15 = 0;
  Clock_Ip_pxConfig.5_1 = Clock_Ip_pxConfig;
  _2 = Clock_Ip_pxConfig.5_1->ConfiguredFrequencies;
  _3 = Clock_Ip_FreqIds[14];
  _4 = (int) _3;
  ConfiguredCoreClock_17 = (*_2)[_4].ConfiguredFrequencyValue;
  if (ConfiguredCoreClock_17 <= 167000000)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 3> :
  if (ConfiguredCoreClock_17 <= 66000000)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  RwscSetting_25 = 1;
  goto <bb 17>; [INV]

  <bb 5> :
  if (ConfiguredCoreClock_17 <= 100000000)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  RwscSetting_24 = 2;
  goto <bb 17>; [INV]

  <bb 7> :
  if (ConfiguredCoreClock_17 <= 133000000)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  RwscSetting_23 = 3;
  goto <bb 17>; [INV]

  <bb 9> :
  RwscSetting_22 = 4;
  goto <bb 17>; [INV]

  <bb 10> :
  if (ConfiguredCoreClock_17 <= 200000000)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  RwscSetting_21 = 5;
  goto <bb 17>; [INV]

  <bb 12> :
  if (ConfiguredCoreClock_17 <= 233000000)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  RwscSetting_20 = 6;
  goto <bb 17>; [INV]

  <bb 14> :
  if (ConfiguredCoreClock_17 <= 250000000)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  RwscSetting_19 = 7;
  goto <bb 17>; [INV]

  <bb 16> :
  RwscSetting_18 = 7;

  <bb 17> :
  # RwscSetting_13 = PHI <RwscSetting_24(6), RwscSetting_21(11), RwscSetting_20(13), RwscSetting_19(15), RwscSetting_18(16), RwscSetting_25(4), RwscSetting_22(9), RwscSetting_23(8)>
  _5 = 1076805632B;
  RegValue_26 ={v} _5->CTL;
  RegValue_27 = RegValue_26 & 4294959359;
  _6 = RwscSetting_13 << 8;
  _7 = _6 & 7936;
  RegValue_28 = RegValue_27 | _7;
  __asm__ __volatile__(" DSB");
  __asm__ __volatile__(" ISB");
  _8 = 1076805632B;
  _9 ={v} _8->CTL;
  _10 = 1076805632B;
  _11 = _9 & 4294934527;
  _10->CTL ={v} _11;
  _12 = 1076805632B;
  _12->CTL ={v} RegValue_28;
  __asm__ __volatile__(" DSB");
  __asm__ __volatile__(" ISB");
  return;

}


Clock_Ip_PowerClockIpModules ()
{
  boolean TimeoutOccurred;
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;
  struct MC_ME_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  struct MC_ME_Type * _4;
  long unsigned int _5;
  struct MC_ME_Type * _6;
  long unsigned int _7;
  struct MC_ME_Type * _8;
  long unsigned int _9;
  struct MC_ME_Type * _10;
  long unsigned int _11;
  struct MC_ME_Type * _12;
  long unsigned int _13;
  struct MC_ME_Type * _14;
  long unsigned int _15;
  long unsigned int TimeoutTicks.1_16;
  struct MC_ME_Type * _17;
  long unsigned int _18;
  long unsigned int _19;
  _Bool _20;
  struct MC_ME_Type * _21;
  long unsigned int _22;
  long unsigned int _23;
  struct MC_ME_Type * _24;
  long unsigned int _25;
  struct MC_ME_Type * _26;
  long unsigned int _27;
  struct MC_ME_Type * _28;
  long unsigned int _29;
  struct MC_ME_Type * _30;
  long unsigned int _31;
  struct MC_ME_Type * _32;
  long unsigned int _33;
  struct MC_ME_Type * _34;
  long unsigned int _35;
  long unsigned int TimeoutTicks.2_36;
  struct MC_ME_Type * _37;
  long unsigned int _38;
  long unsigned int _39;
  _Bool _40;
  struct MC_ME_Type * _41;
  long unsigned int _42;
  long unsigned int _43;
  struct MC_ME_Type * _44;
  long unsigned int _45;
  struct MC_ME_Type * _46;
  long unsigned int _47;
  struct MC_ME_Type * _48;
  long unsigned int _49;
  struct MC_ME_Type * _50;
  long unsigned int _51;
  struct MC_ME_Type * _52;
  long unsigned int _53;
  struct MC_ME_Type * _54;
  long unsigned int _55;
  long unsigned int TimeoutTicks.3_56;
  struct MC_ME_Type * _57;
  long unsigned int _58;
  long unsigned int _59;
  _Bool _60;
  struct MC_ME_Type * _61;
  long unsigned int _62;
  long unsigned int _63;
  struct MC_ME_Type * _64;
  long unsigned int _65;
  struct MC_ME_Type * _66;
  long unsigned int _67;
  struct MC_ME_Type * _68;
  long unsigned int _69;
  struct MC_ME_Type * _70;
  long unsigned int _71;
  struct MC_ME_Type * _72;
  long unsigned int _73;
  struct MC_ME_Type * _74;
  long unsigned int _75;
  long unsigned int TimeoutTicks.4_76;
  struct MC_ME_Type * _77;
  long unsigned int _78;
  long unsigned int _79;
  _Bool _80;

  <bb 2> :
  TimeoutOccurred_89 = 0;
  Clock_Ip_PllPowerClockIp ();
  _1 = 1076740096B;
  _2 ={v} _1->PRTN1_COFB1_STAT;
  _3 = _2 & 2097152;
  if (_3 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  _4 = 1076740096B;
  _5 ={v} _4->PRTN1_COFB1_CLKEN;
  _6 = 1076740096B;
  _7 = _5 | 2097152;
  _6->PRTN1_COFB1_CLKEN ={v} _7;
  _8 = 1076740096B;
  _9 ={v} _8->PRTN1_PCONF;
  _10 = 1076740096B;
  _11 = _9 | 1;
  _10->PRTN1_PCONF ={v} _11;
  _12 = 1076740096B;
  _13 ={v} _12->PRTN1_PUPD;
  _14 = 1076740096B;
  _15 = _13 | 1;
  _14->PRTN1_PUPD ={v} _15;
  Clock_Ip_McMeEnterKey ();
  Clock_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 4> :
  TimeoutTicks.1_16 = TimeoutTicks;
  TimeoutOccurred_98 = Clock_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.1_16);
  _17 = 1076740096B;
  _18 ={v} _17->PRTN1_COFB1_STAT;
  _19 = _18 & 2097152;
  if (_19 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _20 = ~TimeoutOccurred_98;
  if (_20 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  if (TimeoutOccurred_98 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Clock_Ip_ReportClockErrors (1, 5);

  <bb 8> :
  _21 = 1076740096B;
  _22 ={v} _21->PRTN1_COFB1_STAT;
  _23 = _22 & 524288;
  if (_23 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 9> :
  _24 = 1076740096B;
  _25 ={v} _24->PRTN1_COFB1_CLKEN;
  _26 = 1076740096B;
  _27 = _25 | 524288;
  _26->PRTN1_COFB1_CLKEN ={v} _27;
  _28 = 1076740096B;
  _29 ={v} _28->PRTN1_PCONF;
  _30 = 1076740096B;
  _31 = _29 | 1;
  _30->PRTN1_PCONF ={v} _31;
  _32 = 1076740096B;
  _33 ={v} _32->PRTN1_PUPD;
  _34 = 1076740096B;
  _35 = _33 | 1;
  _34->PRTN1_PUPD ={v} _35;
  Clock_Ip_McMeEnterKey ();
  Clock_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 10> :
  TimeoutTicks.2_36 = TimeoutTicks;
  TimeoutOccurred_106 = Clock_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.2_36);
  _37 = 1076740096B;
  _38 ={v} _37->PRTN1_COFB1_STAT;
  _39 = _38 & 524288;
  if (_39 == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  _40 = ~TimeoutOccurred_106;
  if (_40 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  if (TimeoutOccurred_106 != 0)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  Clock_Ip_ReportClockErrors (1, 6);

  <bb 14> :
  _41 = 1076740096B;
  _42 ={v} _41->PRTN1_COFB1_STAT;
  _43 = _42 & 32768;
  if (_43 == 0)
    goto <bb 15>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 15> :
  _44 = 1076740096B;
  _45 ={v} _44->PRTN1_COFB1_CLKEN;
  _46 = 1076740096B;
  _47 = _45 | 32768;
  _46->PRTN1_COFB1_CLKEN ={v} _47;
  _48 = 1076740096B;
  _49 ={v} _48->PRTN1_PCONF;
  _50 = 1076740096B;
  _51 = _49 | 1;
  _50->PRTN1_PCONF ={v} _51;
  _52 = 1076740096B;
  _53 ={v} _52->PRTN1_PUPD;
  _54 = 1076740096B;
  _55 = _53 | 1;
  _54->PRTN1_PUPD ={v} _55;
  Clock_Ip_McMeEnterKey ();
  Clock_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 16> :
  TimeoutTicks.3_56 = TimeoutTicks;
  TimeoutOccurred_114 = Clock_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.3_56);
  _57 = 1076740096B;
  _58 ={v} _57->PRTN1_COFB1_STAT;
  _59 = _58 & 32768;
  if (_59 == 0)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  _60 = ~TimeoutOccurred_114;
  if (_60 != 0)
    goto <bb 16>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 18> :
  if (TimeoutOccurred_114 != 0)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  Clock_Ip_ReportClockErrors (1, 140);

  <bb 20> :
  _61 = 1076740096B;
  _62 ={v} _61->PRTN1_COFB0_STAT;
  _63 = _62 & 16777216;
  if (_63 == 0)
    goto <bb 21>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 21> :
  _64 = 1076740096B;
  _65 ={v} _64->PRTN1_COFB0_CLKEN;
  _66 = 1076740096B;
  _67 = _65 | 16777216;
  _66->PRTN1_COFB0_CLKEN ={v} _67;
  _68 = 1076740096B;
  _69 ={v} _68->PRTN1_PCONF;
  _70 = 1076740096B;
  _71 = _69 | 1;
  _70->PRTN1_PCONF ={v} _71;
  _72 = 1076740096B;
  _73 ={v} _72->PRTN1_PUPD;
  _74 = 1076740096B;
  _75 = _73 | 1;
  _74->PRTN1_PUPD ={v} _75;
  Clock_Ip_McMeEnterKey ();
  Clock_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 22> :
  TimeoutTicks.4_76 = TimeoutTicks;
  TimeoutOccurred_122 = Clock_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.4_76);
  _77 = 1076740096B;
  _78 ={v} _77->PRTN1_COFB0_STAT;
  _79 = _78 & 16777216;
  if (_79 == 0)
    goto <bb 23>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 23> :
  _80 = ~TimeoutOccurred_122;
  if (_80 != 0)
    goto <bb 22>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 24> :
  if (TimeoutOccurred_122 != 0)
    goto <bb 25>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 25> :
  Clock_Ip_ReportClockErrors (1, 140);

  <bb 26> :
  StartTime ={v} {CLOBBER};
  ElapsedTime ={v} {CLOBBER};
  TimeoutTicks ={v} {CLOBBER};
  return;

}


Clock_Ip_PllPowerClockIp ()
{
  boolean TimeoutOccurred;
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;
  struct MC_ME_Type * _1;
  long unsigned int _2;
  long unsigned int _3;
  struct MC_ME_Type * _4;
  long unsigned int _5;
  struct MC_ME_Type * _6;
  long unsigned int _7;
  struct MC_ME_Type * _8;
  long unsigned int _9;
  struct MC_ME_Type * _10;
  long unsigned int _11;
  struct MC_ME_Type * _12;
  long unsigned int _13;
  struct MC_ME_Type * _14;
  long unsigned int _15;
  long unsigned int TimeoutTicks.0_16;
  struct MC_ME_Type * _17;
  long unsigned int _18;
  long unsigned int _19;
  _Bool _20;

  <bb 2> :
  TimeoutOccurred_23 = 0;
  _1 = 1076740096B;
  _2 ={v} _1->PRTN1_COFB1_STAT;
  _3 = _2 & 16777216;
  if (_3 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  _4 = 1076740096B;
  _5 ={v} _4->PRTN1_COFB1_CLKEN;
  _6 = 1076740096B;
  _7 = _5 | 16777216;
  _6->PRTN1_COFB1_CLKEN ={v} _7;
  _8 = 1076740096B;
  _9 ={v} _8->PRTN1_PCONF;
  _10 = 1076740096B;
  _11 = _9 | 1;
  _10->PRTN1_PCONF ={v} _11;
  _12 = 1076740096B;
  _13 ={v} _12->PRTN1_PUPD;
  _14 = 1076740096B;
  _15 = _13 | 1;
  _14->PRTN1_PUPD ={v} _15;
  Clock_Ip_McMeEnterKey ();
  Clock_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 4> :
  TimeoutTicks.0_16 = TimeoutTicks;
  TimeoutOccurred_31 = Clock_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.0_16);
  _17 = 1076740096B;
  _18 ={v} _17->PRTN1_COFB1_STAT;
  _19 = _18 & 16777216;
  if (_19 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _20 = ~TimeoutOccurred_31;
  if (_20 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  if (TimeoutOccurred_31 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Clock_Ip_ReportClockErrors (1, 7);

  <bb 8> :
  StartTime ={v} {CLOBBER};
  ElapsedTime ={v} {CLOBBER};
  TimeoutTicks ={v} {CLOBBER};
  return;

}


