Clock_Ip_CMU_ClockFailInt ()
{
  uint32 IndexCmu;
  uint32 CmuIsrValue;
  uint32 CmuIerValue;
  struct Clock_Ip_ClockMonitorType * _1;
  long unsigned int _2;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.3_3;
  struct Clock_Ip_ClockMonitorType * _4;
  long unsigned int _5;
  struct Clock_Ip_ClockMonitorType * _6;
  <unnamed type> _7;
  struct Clock_Ip_ClockMonitorType * _8;

  <bb 2> :
  CmuIsrValue_12 = 0;
  IndexCmu_13 = 0;
  goto <bb 8>; [INV]

  <bb 3> :
  _1 = Clock_Ip_apxCmu[IndexCmu_9];
  _2 ={v} _1->SR;
  CmuIsrValue_15 = _2 & 3;
  Clock_Ip_pxConfig.3_3 = Clock_Ip_pxConfig;
  if (Clock_Ip_pxConfig.3_3 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _4 = Clock_Ip_apxCmu[IndexCmu_9];
  _5 = _4->IER;
  CmuIerValue_17 = _5 & 3;
  CmuIsrValue_18 = CmuIsrValue_15 & CmuIerValue_17;
  if (CmuIsrValue_18 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _6 = Clock_Ip_apxCmu[IndexCmu_9];
  _6->SR ={v} CmuIsrValue_18;
  _7 = Clock_Ip_aeCmuNames[IndexCmu_9];
  Clock_Ip_ReportClockErrors (0, _7);
  goto <bb 7>; [INV]

  <bb 6> :
  _8 = Clock_Ip_apxCmu[IndexCmu_9];
  _8->SR ={v} CmuIsrValue_15;

  <bb 7> :
  IndexCmu_21 = IndexCmu_9 + 1;

  <bb 8> :
  # IndexCmu_9 = PHI <IndexCmu_13(2), IndexCmu_21(7)>
  if (IndexCmu_9 <= 6)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  return;

}


Clock_Ip_CMU_GetInterruptStatus (uint8 IndexCmu)
{
  uint32 CmuIsrValue;
  uint32 D.6697;
  int _1;
  struct Clock_Ip_ClockMonitorType * _2;
  long unsigned int _3;
  uint32 _7;

  <bb 2> :
  _1 = (int) IndexCmu_4(D);
  _2 = Clock_Ip_apxCmu[_1];
  _3 ={v} _2->SR;
  CmuIsrValue_6 = _3 & 3;
  _7 = CmuIsrValue_6;

  <bb 3> :
<L0>:
  return _7;

}


Clock_Ip_EnableCmuFcFceRefCntLfrefHfref (const struct Clock_Ip_CmuConfigType * Config)
{
  struct Clock_Ip_ClockMonitorType * CmuFc;
  const struct Clock_Ip_CmuInfoType * CmuInformation;
  <unnamed type> _1;
  unsigned char _2;
  int _3;
  unsigned char _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;

  <bb 2> :
  if (Config_10(D) != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  _1 = Config_10(D)->Name;
  _2 = Clock_Ip_au8ClockFeatures[_1][8];
  _3 = (int) _2;
  CmuInformation_12 = &Clock_Ip_axCmuInfo[_3];
  CmuFc_13 = CmuInformation_12->CmuInstance;
  _4 = Config_10(D)->Enable;
  if (_4 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _5 = CmuFc_13->GCR;
  _6 = _5 | 1;
  CmuFc_13->GCR = _6;
  goto <bb 6>; [INV]

  <bb 5> :
  _7 = CmuFc_13->GCR;
  _8 = _7 & 4294967294;
  CmuFc_13->GCR = _8;

  <bb 6> :
  return;

}


Clock_Ip_SetCmuFcFceRefCntLfrefHfref (const struct Clock_Ip_CmuConfigType * Config, uint32 Index)
{
  uint32 ModuloValue;
  uint32 DividerResult;
  uint32 DivideBy;
  uint32 Cmp2;
  uint32 Cmp1;
  uint32 LfRef;
  uint32 HfRef;
  uint32 RefCount;
  uint32 BusClk;
  uint32 MonitoredClk;
  uint32 ReferenceClk;
  struct Clock_Ip_ClockMonitorType * CmuFc;
  const struct Clock_Ip_CmuInfoType * CmuInformation;
  unsigned char _1;
  <unnamed type> _2;
  unsigned char _3;
  int _4;
  long unsigned int _5;
  unsigned char _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  <unnamed type> _12;
  long unsigned int _13;
  unsigned char _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  <unnamed type> _20;
  long unsigned int _21;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.1_22;
  const struct Clock_Ip_ConfiguredFrequencyType[<unknown>] * _23;
  <unnamed type> _24;
  unsigned char _25;
  int _26;
  long unsigned int _27;
  const struct Clock_Ip_ClockConfigType * Clock_Ip_pxConfig.2_28;
  const struct Clock_Ip_ConfiguredFrequencyType[<unknown>] * _29;
  <unnamed type> _30;
  unsigned char _31;
  int _32;
  long unsigned int _33;
  long unsigned int _34;
  long unsigned int _35;
  long unsigned int _36;
  long unsigned int _37;
  long unsigned int _38;
  long unsigned int _39;
  long unsigned int _40;
  long unsigned int _41;
  long unsigned int _42;
  long unsigned int _43;
  long unsigned int _44;
  long unsigned int _45;
  long unsigned int _46;
  long unsigned int _47;

  <bb 2> :
  ReferenceClk_50 = 0;
  MonitoredClk_51 = 0;
  BusClk_52 = 0;
  RefCount_53 = 0;
  HfRef_54 = 0;
  LfRef_55 = 0;
  if (Config_56(D) != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 3> :
  _1 = Config_56(D)->Enable;
  if (_1 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 4> :
  _2 = Config_56(D)->Name;
  _3 = Clock_Ip_au8ClockFeatures[_2][8];
  _4 = (int) _3;
  CmuInformation_58 = &Clock_Ip_axCmuInfo[_4];
  CmuFc_59 = CmuInformation_58->CmuInstance;
  _5 = HashCmu[Index_60(D)];
  _6 = Config_56(D)->Enable;
  _7 = (long unsigned int) _6;
  _8 = Config_56(D)->Interrupt;
  _9 = _7 ^ _8;
  _10 = Config_56(D)->MonitoredClockFrequency;
  _11 = _9 ^ _10;
  _12 = Config_56(D)->Name;
  _13 = _11 ^ _12;
  if (_5 != _13)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 5> :
  _14 = Config_56(D)->Enable;
  _15 = (long unsigned int) _14;
  _16 = Config_56(D)->Interrupt;
  _17 = _15 ^ _16;
  _18 = Config_56(D)->MonitoredClockFrequency;
  _19 = _17 ^ _18;
  _20 = Config_56(D)->Name;
  _21 = _19 ^ _20;
  HashCmu[Index_60(D)] = _21;
  Clock_Ip_pxConfig.1_22 = Clock_Ip_pxConfig;
  _23 = Clock_Ip_pxConfig.1_22->ConfiguredFrequencies;
  _24 = CmuInformation_58->Reference;
  _25 = Clock_Ip_FreqIds[_24];
  _26 = (int) _25;
  _27 = (*_23)[_26].ConfiguredFrequencyValue;
  ReferenceClk_62 = _27 / 1000;
  Clock_Ip_pxConfig.2_28 = Clock_Ip_pxConfig;
  _29 = Clock_Ip_pxConfig.2_28->ConfiguredFrequencies;
  _30 = CmuInformation_58->Bus;
  _31 = Clock_Ip_FreqIds[_30];
  _32 = (int) _31;
  _33 = (*_29)[_32].ConfiguredFrequencyValue;
  BusClk_63 = _33 / 1000;
  _34 = Config_56(D)->MonitoredClockFrequency;
  MonitoredClk_64 = _34 / 1000;
  if (ReferenceClk_62 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 6> :
  if (BusClk_63 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  if (MonitoredClk_64 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  _35 = ReferenceClk_62 * 3;
  _36 = _35 / BusClk_63;
  Cmp1_65 = _36 + 1;
  _37 = ReferenceClk_62 * 5;
  _38 = _37 / MonitoredClk_64;
  Cmp2_66 = _38 + 9;
  RefCount_67 = MAX_EXPR <Cmp2_66, Cmp1_65>;
  RefCount_68 = MAX_EXPR <RefCount_67, 80>;
  HfRef_69 = MonitoredClk_64 * 1011;
  DivideBy_70 = ReferenceClk_62 * 967;
  DividerResult_71 = HfRef_69 / DivideBy_70;
  _39 = DivideBy_70 * DividerResult_71;
  ModuloValue_72 = HfRef_69 - _39;
  _40 = DividerResult_71 * RefCount_68;
  _41 = ModuloValue_72 * RefCount_68;
  _42 = _41 / DivideBy_70;
  HfRef_73 = _40 + _42;
  HfRef_74 = HfRef_73 + 4;
  HfRef_75 = MIN_EXPR <HfRef_74, 16777212>;
  LfRef_76 = MonitoredClk_64 * 989;
  DivideBy_77 = ReferenceClk_62 * 1033;
  DividerResult_78 = LfRef_76 / DivideBy_77;
  _43 = DivideBy_77 * DividerResult_78;
  ModuloValue_79 = LfRef_76 - _43;
  _44 = DividerResult_78 * RefCount_68;
  _45 = ModuloValue_79 * RefCount_68;
  _46 = _45 / DivideBy_77;
  LfRef_80 = _44 + _46;
  LfRef_81 = LfRef_80 + 4294967293;
  LfRef_82 = MAX_EXPR <LfRef_81, 3>;
  CmuFc_59->RCCR = RefCount_68;
  CmuFc_59->HTCR = HfRef_75;
  CmuFc_59->LTCR = LfRef_82;

  <bb 9> :
  _47 = Config_56(D)->Interrupt;
  CmuFc_59->IER = _47;

  <bb 10> :
  return;

}


Clock_Ip_ResetCmuFcFceRefCntLfrefHfref (const struct Clock_Ip_CmuConfigType * Config)
{
  <unnamed type> _1;

  <bb 2> :
  if (Config_3(D) != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 = Config_3(D)->Name;
  Clock_Ip_DisableCmuFcFceRefCntLfrefHfref (_1);

  <bb 4> :
  return;

}


Clock_Ip_DisableCmuFcFceRefCntLfrefHfref (Clock_Ip_NameType Name)
{
  uint32 FrequencyCheckStatus;
  uint32 TimeoutTicks;
  uint32 ElapsedTime;
  uint32 StartTime;
  boolean TimeoutOccurred;
  struct Clock_Ip_ClockMonitorType * const CmuFc;
  const struct Clock_Ip_CmuInfoType * CmuInformation;
  unsigned char _1;
  int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int TimeoutTicks.0_6;
  _Bool _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;

  <bb 2> :
  _1 = Clock_Ip_au8ClockFeatures[Name_18(D)][8];
  _2 = (int) _1;
  CmuInformation_19 = &Clock_Ip_axCmuInfo[_2];
  CmuFc_20 = CmuInformation_19->CmuInstance;
  TimeoutOccurred_21 = 0;
  SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01 ();
  _3 = CmuFc_20->GCR;
  _4 = _3 & 1;
  if (_4 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  Clock_Ip_StartTimeout (&StartTime, &ElapsedTime, &TimeoutTicks, 50000);

  <bb 4> :
  _5 ={v} CmuFc_20->SR;
  FrequencyCheckStatus_24 = _5 & 16;
  TimeoutTicks.0_6 = TimeoutTicks;
  TimeoutOccurred_26 = Clock_Ip_TimeoutExpired (&StartTime, &ElapsedTime, TimeoutTicks.0_6);
  if (FrequencyCheckStatus_24 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _7 = ~TimeoutOccurred_26;
  if (_7 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  if (TimeoutOccurred_26 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Clock_Ip_ReportClockErrors (1, Name_18(D));

  <bb 8> :
  _8 = CmuFc_20->GCR;
  _9 = _8 & 4294967294;
  CmuFc_20->GCR = _9;

  <bb 9> :
  _10 = CmuFc_20->IER;
  _11 = _10 & 4294967280;
  CmuFc_20->IER = _11;
  _12 ={v} CmuFc_20->SR;
  _13 = _12 | 3;
  CmuFc_20->SR ={v} _13;
  SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01 ();
  StartTime ={v} {CLOBBER};
  ElapsedTime ={v} {CLOBBER};
  TimeoutTicks ={v} {CLOBBER};
  return;

}


Clock_Ip_ClockMonitorEmpty_Disable (Clock_Ip_NameType Name)
{
  <bb 2> :
  return;

}


Clock_Ip_ClockMonitorEmpty_Set (const struct Clock_Ip_CmuConfigType * Config, uint32 Index)
{
  <bb 2> :
  return;

}


Clock_Ip_ClockMonitorEmpty (const struct Clock_Ip_CmuConfigType * Config)
{
  <bb 2> :
  return;

}


