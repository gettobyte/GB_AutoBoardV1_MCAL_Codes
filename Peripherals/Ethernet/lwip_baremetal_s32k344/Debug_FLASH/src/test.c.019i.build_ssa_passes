start_example ()
{
  <bb 2> :
  mainLoopTask (0B);
  return;

}


mainLoopTask (void * pvParameters)
{
  int i;
  int i;
  uint32 time_now;

  <bb 2> :
  sys_init ();
  lwip_init ();
  test_init (0B);

  <bb 3> :
  sys_check_timeouts ();
  time_now = OsIf_GetMilliseconds ();
  _1 = (double) time_now;
  _2 = _1 / 1.0e+3;
  time_now = (uint32) _2;
  start_time.3_3 = start_time;
  _4 = time_now - start_time.3_3;
  tests_timeout.4_5 = tests_timeout;
  if (_4 >= tests_timeout.4_5)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  i = 0;
  goto <bb 6>; [INV]

  <bb 5> :
  _6 = &network_interfaces[i];
  gmac_ethernetif_shutdown (_6);
  i = i + 1;

  <bb 6> :
  if (i <= 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  end_tcpip_execution (0B);

  <bb 8> :
  goto <bb 3>; [INV]

}


test_init (void * arg)
{
  <bb 2> :
  _1 = OsIf_GetMilliseconds ();
  start_time = _1;
  start_time.2_2 = start_time;
  _3 = (double) start_time.2_2;
  _4 = _3 / 1.0e+3;
  _5 = (long unsigned int) _4;
  start_time = _5;
  interface_init ();
  apps_init ();
  return;

}


apps_init ()
{
  <bb 2> :
  mdns_resp_init ();
  netif_default.0_1 = netif_default;
  netif_default.1_2 = netif_default;
  _3 = netif_default.1_2->hostname;
  mdns_resp_add_netif (netif_default.0_1, _3, 3600);
  udpecho_raw_init ();
  lwiperf_start_tcp_server_default (lwiperf_report, 0B);
  return;

}


lwiperf_report (void * arg, lwiperf_report_type report_type, const struct ip_addr_t * local_addr, u16_t local_port, const struct ip_addr_t * remote_addr, u16_t remote_port, u32_t bytes_transferred, u32_t ms_duration, u32_t bandwidth_kbitpsec)
{
  <bb 2> :
  return;

}


interface_init ()
{
  struct ip4_addr_t gw;
  struct ip4_addr_t netmask;
  struct ip4_addr_t ipaddr;
  int i;

  <bb 2> :
  i = 0;
  goto <bb 9>; [INV]

  <bb 3> :
  gw.addr = 0;
  ipaddr.addr = 0;
  netmask.addr = 0;
  _1 = netif_cfg[i];
  _2 = _1->has_dhcp;
  _3 = ~_2;
  if (_3 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _4 = netif_cfg[i];
  _5 = _4->has_auto_ip;
  _6 = ~_5;
  if (_6 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _7 = netif_cfg[i];
  _8 = _7->gw[0];
  _9 = (long unsigned int) _8;
  _10 = _9 << 24;
  _11 = netif_cfg[i];
  _12 = _11->gw[1];
  _13 = (long unsigned int) _12;
  _14 = _13 << 16;
  _15 = _10 | _14;
  _16 = netif_cfg[i];
  _17 = _16->gw[2];
  _18 = (long unsigned int) _17;
  _19 = _18 << 8;
  _20 = _15 | _19;
  _21 = netif_cfg[i];
  _22 = _21->gw[3];
  _23 = (long unsigned int) _22;
  _24 = _20 | _23;
  _25 = _24 << 24;
  _26 = netif_cfg[i];
  _27 = _26->gw[0];
  _28 = (long unsigned int) _27;
  _29 = _28 << 24;
  _30 = netif_cfg[i];
  _31 = _30->gw[1];
  _32 = (long unsigned int) _31;
  _33 = _32 << 16;
  _34 = _29 | _33;
  _35 = netif_cfg[i];
  _36 = _35->gw[2];
  _37 = (long unsigned int) _36;
  _38 = _37 << 8;
  _39 = _34 | _38;
  _40 = netif_cfg[i];
  _41 = _40->gw[3];
  _42 = (long unsigned int) _41;
  _43 = _39 | _42;
  _44 = _43 << 8;
  _45 = _44 & 16711680;
  _46 = _25 | _45;
  _47 = netif_cfg[i];
  _48 = _47->gw[0];
  _49 = (long unsigned int) _48;
  _50 = _49 << 24;
  _51 = netif_cfg[i];
  _52 = _51->gw[1];
  _53 = (long unsigned int) _52;
  _54 = _53 << 16;
  _55 = _50 | _54;
  _56 = netif_cfg[i];
  _57 = _56->gw[2];
  _58 = (long unsigned int) _57;
  _59 = _58 << 8;
  _60 = _55 | _59;
  _61 = netif_cfg[i];
  _62 = _61->gw[3];
  _63 = (long unsigned int) _62;
  _64 = _60 | _63;
  _65 = _64 >> 8;
  _66 = _65 & 65280;
  _67 = _46 | _66;
  _68 = netif_cfg[i];
  _69 = _68->gw[0];
  _70 = (long unsigned int) _69;
  _71 = _70 << 24;
  _72 = netif_cfg[i];
  _73 = _72->gw[1];
  _74 = (long unsigned int) _73;
  _75 = _74 << 16;
  _76 = _71 | _75;
  _77 = netif_cfg[i];
  _78 = _77->gw[2];
  _79 = (long unsigned int) _78;
  _80 = _79 << 8;
  _81 = _76 | _80;
  _82 = netif_cfg[i];
  _83 = _82->gw[3];
  _84 = (long unsigned int) _83;
  _85 = _81 | _84;
  _86 = _85 >> 24;
  _87 = _67 | _86;
  gw.addr = _87;
  _88 = netif_cfg[i];
  _89 = _88->ip_addr[0];
  _90 = (long unsigned int) _89;
  _91 = _90 << 24;
  _92 = netif_cfg[i];
  _93 = _92->ip_addr[1];
  _94 = (long unsigned int) _93;
  _95 = _94 << 16;
  _96 = _91 | _95;
  _97 = netif_cfg[i];
  _98 = _97->ip_addr[2];
  _99 = (long unsigned int) _98;
  _100 = _99 << 8;
  _101 = _96 | _100;
  _102 = netif_cfg[i];
  _103 = _102->ip_addr[3];
  _104 = (long unsigned int) _103;
  _105 = _101 | _104;
  _106 = _105 << 24;
  _107 = netif_cfg[i];
  _108 = _107->ip_addr[0];
  _109 = (long unsigned int) _108;
  _110 = _109 << 24;
  _111 = netif_cfg[i];
  _112 = _111->ip_addr[1];
  _113 = (long unsigned int) _112;
  _114 = _113 << 16;
  _115 = _110 | _114;
  _116 = netif_cfg[i];
  _117 = _116->ip_addr[2];
  _118 = (long unsigned int) _117;
  _119 = _118 << 8;
  _120 = _115 | _119;
  _121 = netif_cfg[i];
  _122 = _121->ip_addr[3];
  _123 = (long unsigned int) _122;
  _124 = _120 | _123;
  _125 = _124 << 8;
  _126 = _125 & 16711680;
  _127 = _106 | _126;
  _128 = netif_cfg[i];
  _129 = _128->ip_addr[0];
  _130 = (long unsigned int) _129;
  _131 = _130 << 24;
  _132 = netif_cfg[i];
  _133 = _132->ip_addr[1];
  _134 = (long unsigned int) _133;
  _135 = _134 << 16;
  _136 = _131 | _135;
  _137 = netif_cfg[i];
  _138 = _137->ip_addr[2];
  _139 = (long unsigned int) _138;
  _140 = _139 << 8;
  _141 = _136 | _140;
  _142 = netif_cfg[i];
  _143 = _142->ip_addr[3];
  _144 = (long unsigned int) _143;
  _145 = _141 | _144;
  _146 = _145 >> 8;
  _147 = _146 & 65280;
  _148 = _127 | _147;
  _149 = netif_cfg[i];
  _150 = _149->ip_addr[0];
  _151 = (long unsigned int) _150;
  _152 = _151 << 24;
  _153 = netif_cfg[i];
  _154 = _153->ip_addr[1];
  _155 = (long unsigned int) _154;
  _156 = _155 << 16;
  _157 = _152 | _156;
  _158 = netif_cfg[i];
  _159 = _158->ip_addr[2];
  _160 = (long unsigned int) _159;
  _161 = _160 << 8;
  _162 = _157 | _161;
  _163 = netif_cfg[i];
  _164 = _163->ip_addr[3];
  _165 = (long unsigned int) _164;
  _166 = _162 | _165;
  _167 = _166 >> 24;
  _168 = _148 | _167;
  ipaddr.addr = _168;
  _169 = netif_cfg[i];
  _170 = _169->netmask[0];
  _171 = (long unsigned int) _170;
  _172 = _171 << 24;
  _173 = netif_cfg[i];
  _174 = _173->netmask[1];
  _175 = (long unsigned int) _174;
  _176 = _175 << 16;
  _177 = _172 | _176;
  _178 = netif_cfg[i];
  _179 = _178->netmask[2];
  _180 = (long unsigned int) _179;
  _181 = _180 << 8;
  _182 = _177 | _181;
  _183 = netif_cfg[i];
  _184 = _183->netmask[3];
  _185 = (long unsigned int) _184;
  _186 = _182 | _185;
  _187 = _186 << 24;
  _188 = netif_cfg[i];
  _189 = _188->netmask[0];
  _190 = (long unsigned int) _189;
  _191 = _190 << 24;
  _192 = netif_cfg[i];
  _193 = _192->netmask[1];
  _194 = (long unsigned int) _193;
  _195 = _194 << 16;
  _196 = _191 | _195;
  _197 = netif_cfg[i];
  _198 = _197->netmask[2];
  _199 = (long unsigned int) _198;
  _200 = _199 << 8;
  _201 = _196 | _200;
  _202 = netif_cfg[i];
  _203 = _202->netmask[3];
  _204 = (long unsigned int) _203;
  _205 = _201 | _204;
  _206 = _205 << 8;
  _207 = _206 & 16711680;
  _208 = _187 | _207;
  _209 = netif_cfg[i];
  _210 = _209->netmask[0];
  _211 = (long unsigned int) _210;
  _212 = _211 << 24;
  _213 = netif_cfg[i];
  _214 = _213->netmask[1];
  _215 = (long unsigned int) _214;
  _216 = _215 << 16;
  _217 = _212 | _216;
  _218 = netif_cfg[i];
  _219 = _218->netmask[2];
  _220 = (long unsigned int) _219;
  _221 = _220 << 8;
  _222 = _217 | _221;
  _223 = netif_cfg[i];
  _224 = _223->netmask[3];
  _225 = (long unsigned int) _224;
  _226 = _222 | _225;
  _227 = _226 >> 8;
  _228 = _227 & 65280;
  _229 = _208 | _228;
  _230 = netif_cfg[i];
  _231 = _230->netmask[0];
  _232 = (long unsigned int) _231;
  _233 = _232 << 24;
  _234 = netif_cfg[i];
  _235 = _234->netmask[1];
  _236 = (long unsigned int) _235;
  _237 = _236 << 16;
  _238 = _233 | _237;
  _239 = netif_cfg[i];
  _240 = _239->netmask[2];
  _241 = (long unsigned int) _240;
  _242 = _241 << 8;
  _243 = _238 | _242;
  _244 = netif_cfg[i];
  _245 = _244->netmask[3];
  _246 = (long unsigned int) _245;
  _247 = _243 | _246;
  _248 = _247 >> 24;
  _249 = _229 | _248;
  netmask.addr = _249;

  <bb 6> :
  _250 = &network_interfaces[i];
  _251 = netif_add (_250, &ipaddr, &netmask, &gw, 0B, gmac_ethernetif_init, netif_input);
  netif_set_default (_251);
  _252 = netif_cfg[i];
  _253 = _252->has_IPv6;
  if (_253 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _254 = &network_interfaces[i];
  netif_create_ip6_linklocal_address (_254, 1);

  <bb 8> :
  _255 = &network_interfaces[i];
  netif_set_up (_255);
  ipaddr = {CLOBBER};
  netmask = {CLOBBER};
  gw = {CLOBBER};
  i = i + 1;

  <bb 9> :
  if (i <= 0)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  return;

}


