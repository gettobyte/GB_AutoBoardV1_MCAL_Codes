/**************************************************************************
 * FILE NAME: S32K344.h                                                   *
 * REVISION:  1.3                                                         *
 *                                                                        *
 * DESCRIPTION:                                                           *
 * This file contains all of the register and bit field definitions for   *
 * the S32K344.                                                           *
 *========================================================================*
 * UPDATE HISTORY                                                         *
 * REV      AUTHOR      DATE       DESCRIPTION OF CHANGE                  *
 * ---   -----------  ---------    ---------------------                  *
 * 1.0    Taru Shree   22-Oct-19    Initial release based on              * 
 *                                  RM Rev.1 Draft C.                     *
 *                                                                        *
 * 1.1    Taru Shree   28-Jan-19    1)Initial release based on            * 
 *                                  RM Rev.1 Draft D.                     *
 *                                                                        *
 *                                  2)CONFIGURATION_GPR-                  * 
 *                                  Following register names are changed- *
 *                                  -from CONFIG_CFPRAB to CONFIG_CFPRL.  *
 *                                  -from CONFIG_CFPRP to CONFIG_CFPRH.   *
 *                                  -from CONFIG_CFPRAB_ALT to            *
 *                                   CONFIG_CFPRL_ALT.                    * 
 *                                  -from CONFIG_CFPRP_ALT to             *
 *                                   CONFIG_CFPRH_ALT.                    *
 *                                                                        *
 *                                  3)VIRT_WRAPPER-                       *
 *                                  Following register names are changed- *
 *                                  -from REG_E to REG_A.                 *
 *                                  -from REG_F to REG_B.                 *
 *                                  -from REG_G to REG_C.                 *
 *                                  -from REG_H to REG_D.                 * 
 *                                                                        *
 *                                  4)XRDC-                               *
 *                                  Macros are modified.                  *
 *                                                                        *
 *                                  5)Addresses of following blocks have  *
 *                                  been changed-                         *
 *                                  -MCM_0_CM7:from 0xE008000 to          *
 *                                   0xE0080000.                          *
 *                                  -MU_2__MUA:from 0x404F0000 to         *
 *                                   0x400B8000.                          *
 *                                  -MU_2__MUB:from 0x404F4000 to         *
 *                                   0x400BC000.                          *
 *                                                                        *
 *                                  6)Following instances have been added-*
 *                                  -FLASH_ALT                            *
 *                                  -TRGMUX                               *
 *                                                                        *
 *                                  7)REG_PROT block is removed.          * 
 *                                                                        *
 * 1.2    Taru Shree   20-Mar-20    1)Initial release based on            * 
 *                                  RM Rev.1 Draft E.                     *
 *                                  2)ADC-                                *
 *                                  -CEOCFR1 register- SIEOCF24…31        *
 *                                   bitfields are removed.               *
 *                                  -CIMR1 register- SIEOCIEN24…31        *
 *                                   bitfields are removed.               *
 *                                  -WTIMR register- LAWIFEN5…16 and      *
 *                                   HDWIFEN5…16 bitfields are removed.   * 
 *                                  -DMAR1 register- SIDMAREN24…31        *
 *                                   bitfields are removed.               *
 *                                  -CWSELRPI register- Few bitfields     *
 *                                   names are changed from WSEL_PIx to   *
 *                                   WSEL_SIx_0.                          * 
 *                                  -CWSELRSI register- Few bitfields     *
 *                                   names are changed from WSEL_SIx to   *
 *                                   WSEL_SIx_0.                          *
 *                                  -CWSELRSI array size is changed from  *
 *                                   4 to 3.                              * 
 *                                  -CWSELREI register- Few bitfields     *
 *                                   names are changed from WSEL_EIx to   *
 *                                   WSEL_SIx_0.                          *
 *                                  -STAW3R register is removed.          *
 *                                  3)BCTU-                               *
 *                                  -FIFO1DR register- Bitfield name is   *
 *                                   changed from ADC_SRC to ADC_NUM.     *
 *                                  -FIFO2DR register- Bitfield name is   *
 *                                   changed from ADC_SRC to ADC_NUM.     *
 *                                  4)DCM-                                *
 *                                  -DCMDEB register is added.            *
 *                                  5)DCM_GPR-                            *
 *                                  -DCMROD5 register- Bitfields are      *
 *                                   changed from lower-case to upper-case*
 *                                  -rd_stam_edc_err_out bitfield is      *
 *                                   removed.                             *
 *                                  -DCMROF20 register- Following         *
 *                                   bitfields are removed-               *
 *                                   -HSE_EXPORT_CNTRL                    *
 *                                   -HSE_APP_DIS_FLD                     *
 *                                   -HSE_APP_DIS_OEM                     * 
 *                                   -HSE_DBG_EN_FLD                      *
 *                                   -HSE_DBG_EN_OEM                      *
 *                                   -HSE_DIS_CUS                         *
 *                                   -HSE_DIS_FLD                         *
 *                                   -HSE_DIS_OEM                         *
 *                                   -HSE_DIS_PRE_FA                      * 
 *                                   -APPIN_DBG_EN                        * 
 *                                   -HSE_B_IPT_SWT_DIS                   *
 *                                  -DCMRWD2 register-                    *
 *                                   BACKDOOR_DIS_ANOTHER bitfield is     *
 *                                   added.                               *
 *                                  -DCMRWD3 register- Bitfields are      *
 *                                   changed rom lower-case to upper-case *
 *                                  -CM7_1_TAG_MULTI_ERR,                 *
 *                                   CM7_0_IC_MULTI_ERR and               *
 *                                   CM7_1_IC_MULTI_ERR bitfields are     *
 *                                   added.                               *
 *                                  -DCMRWD4 register- Bitfields are      *
 *                                   changed from lower-case to upper-case*
 *                                  -DCMRWD5 register- Bitfields are      *
 *                                   changed from lower-case to upper-case*
 *                                  -rd_stam_edc_err_out bitfield is      *
 *                                   removed.                             * 
 *                                  -DCMRWF4 register- cm7_0_cpuwait and  * 
 *                                   cm7_1_cpuwait bitfields are changed  *
 *                                   from lower-case to upper-case.       *
 *                                  -DCMRWF5 register- boot_address       *
 *                                   cpuwait bitfield is changed from     *
 *                                   lower-case to upper-case.            *
 *                                  6)FCCU-                               *
 *                                  -CGF register- FOP and FOPE bitfields *
 *                                   are removed.                         *
 *                                  7)MC_ME-                              * 
 *                                  -PRTN1_COFB3_STAT register- BLOCK102, *
 *                                   BLOCK103, BLOCK105, BLOCK106,        *
 *                                   BLOCK107 and BLOCK110 bitfields are  *
 *                                   removed.                             *
 *                                  -PRTN1_COFB3_CLKEN register- REQ102   *
 *                                   bitfield is removed.                 *
 *                                  8)MC_RGM-                             * 
 *                                  -FERD and LPDEBUG registers are added.*
 *                                  9)MDM_AP-                             * 
 *                                  -Following registers are removed-     *
 *                                   -MDMAPSTTS2                          *
 *                                   -MDMAPDBG                            *
 *                                   -MDMAPTRC                            *
 *                                   -MDMAPSECDBG                         *
 *                                   -MDMAPSECTRC                         *
 *                                   -CORE0_HALT_DBG_A                    *
 *                                   -CORE1_HALT_DBG_A                    *
 *                                   -CORE2_HALT_DBG_A                    * 
 *                                   -CORE3_HALT_DBG_A                    *
 *                                   -DAP_EN_STATUS                       *
 *                                  10)MSCM-                              *
 *                                  -ENEDC register- STAM and EN_QSPI     *
 *                                   bitfields are removed.               *
 *                                  11)PFLASH-                            *
 *                                  -PFCBLK_SSPELOCK register- SSLCK      *
 *                                   bitfield size is changed from 3 to 12*
 *                                  -PFCBLK_SSETSLOCK register- SSETSLCK  *
 *                                   bitfield size is changed from 3 to 12*
 *                                  -PFCBLKI_SSPELOCK and                 *
 *                                   PFCBLKI_SSETSLOCK array size is      *
 *                                   changed from 5 to 4.                 *
 *                                  -PFCDBLK_SSPELOCK and                 *
 *                                   PFCDBLK_SSETSLOCK registers are added*
 *                                  12)QuadSPI-                           *
 *                                  -MCR register- DQS_FB_SEL bitfield is *
 *                                   removed.                             *
 *                                  -SMPR register- DLLFSMPFB bitfield is *
 *                                   removed.                             * 
 *                                  -DLLCRB, DLSR_FB, SFB1AD and SFB2AD   *
 *                                   registers are removed.               * 
 *                                  13)SDA_AP-                            *
 *                                  -KEYCHAL individual registers changed *
 *                                   to array.                            *
 *                                  -KEYRESP individual registers changed *
 *                                   to array.                            *
 *                                  -AUTHSTTS register- HSENEWDATASTATUS  *
 *                                   and HSEDBGEN bitfields are removed.  *
 *                                  -SDAAPGENSTATUSx registers-           *
 *                                   DAP_GENx_STATUS bitfields are changed*
 *                                   to SDAAPGENSTATUS.                   *
 *                                  -AUTHCTL and DAP_GEN1_CTRL registers  *
 *                                   are removed.                         *
 *                                  14)SIUL2-                             *
 *                                  -MSCR register- SRE bitfield is       *
 *                                   changed to SRC.                      *
 *                                  15)STCU-                              *
 *                                  -LB_CTRL register- PFT bitfield is    *
 *                                   added.                               *
 *                                  16)SXOSC-                             *
 *                                  -SXOSC_CTRL register- GM_SEL,         *
 *                                   CURR_PRG_COMP and CURR_PRG_SF        *
 *                                   bitfields are removed.               *
 *                                  17)GMAC block is renamed as EMAC.     *
 *                                  18)Following blocks are added-        *
 *                                  -PERIPHERAL_DEBUG_FREEZE              *
 *                                  -SELFTEST_GPR                         *
 *                                  -XBIC_AXBS_EDMA                       *
 *                                  -XBIC_AXBS_TCM                        *
 *                                                                        *
 * 1.3    Taru Shree   24-Jul-20    1)Initial release based on            *
 *                                  RM Rev.1 Draft G.                     *
 *                                  2)ADC-                                *
 *                                  -TRGCFG register- Bitfield name is    *
 *                                   changed from                         * 
 *                                   CHANNEL_VALUE_OR_LADDR_7BITS to      *
 *                                   CHANNEL_VALUE_OR_LADDR.              *
 *                                  3)BCTU-                               * 
 *                                  -ADC0DR, ADC1DR and ADC2DR registers  *
 *                                   are converted into array.            * 
 *                                  4)CMU_FC-                             *
 *                                  -SR register- STATE bitfield is       *
 *                                   removed.                             *
 *                                  5)CMU_FM-                             *
 *                                  -SR register- STATE bitfield is       *
 *                                   removed.                             *
 *                                  6)CONFIGURATION_GPR-                  *
 *                                  -CONFIG_REG1, CONFIG_REG2,            *
 *                                   CONFIG_REG3, CONFIG_REG, CONFIG_REG5 *
 *                                   and CONFIG_NVM_TESTMODE.             * 
 *                                   registers are removed.               *
 *                                  -CONFIG_PE_LOCK registers-            *
 *                                   LOCK_BLOCK_5 bitfield is removed.    *
 *                                  7)DCM-                                *
 *                                  -DCMDCFC, DCMDCFA, DCMDCFD, DCMBVL,   *
 *                                   DCMBVH and TESTPASS registers are    *
 *                                   removed.                             *
 *                                  -DCMLCS, DCMSRR and DCMLCS_2 registers*
 *                                   are added.                           * 
 *                                  -DCMDEB register- HSE_APP_DIS_FLD,    *
 *                                   HSE_DBG_EN_FLD, HSE_APP_DIS_OEM and  *
 *                                   HSE_DBG_EN_OEM bitfields are removed.*
 *                                  -DCMSRR register array is added.      *
 *                                  -DCMSTAT register- DCMTPSCAN bitfield *
 *                                   is removed.                          *
 *                                  8)DCM_GPR-                            *
 *                                  -All bitfield names are changed in    *
 *                                   DCMROD3, DCMROD4, DCMROD5, DCMRWD3,  *
 *                                   DCMRWD4 and DCMRWD5 registers.       *
 *                                  -DCMROD5 register- All bitfields names*
 *                                   are changed except STCU_NCF.         *
 *                                  -DCMROF19 register- Bitfield name is  *
 *                                   changed from LOCKSTEP_ENB to         *
 *                                   LOCKSTEP_EN.                         *
 *                                  -DCMRWD2 register-                    *
 *                                   -BACKDOOR_DIS_ANOTHER bitfield is    *
 *                                    removed.                            *
 *                                  -DCMRWD7 register- I3C_DBG_DIS_CM7_0  *
 *                                   bitfield is added.                   * 
 *                                  -DCMRWD9 register- I3C_DBG_DIS_CM7_1  *
 *                                   bitfield is added.                   *
 *                                  -DCMRWD10, DCMRWD11, DCMRWD12,        *
 *                                   DCMRWD13, DCMRWD14 and DCMRWD15      *
 *                                   registers are removed.               *
 *                                  -DCMRWF1 register-                    *   
 *                                   VDD_HV_B_IO_CTRL_LATCH bitfield is   *
 *                                   added.                               *
 *                                  9)FLEXCAN-                            *
 *                                  -IMASK2 and IFLAG2 register are       *
 *                                   removed.                             *
 *                                  -Message buffers are added.           *
 *                                  -FDCTRL register-                     *
 *                                   MBDSR1 bitfield is removed.          *
 *                                  -RXIMR array size is changed from 64  *
 *                                   to 32.                               *
 *                                  -HR_TIME_STAMP register's array size  *
 *                                   is changed 64 to 32.                 *
 *                                  10)FlexCAN_0-                         *
 *                                  -Message buffers are added.           *  
 *                                  11)FlexCAN_1-                         *
 *                                  -Message buffers are added.           * 
 *                                  12)FlexCAN_2 instance is added.       *
 *                                  13)LCU-                               *
 *                                  -Array name is changed from LC_CTRL to*
 *                                   LC.                                  *
 *                                  -Array name is changed from LC_SEL to *
 *                                   SEL.                                 *
 *                                  -LC prefix is removed from registers. *
 *                                  14)LPCMP-                             *
 *                                  -CMP block is renamed as LPCMP.       *
 *                                  15)LPUART-                            *  
 *                                  -BAUD register- RIDMAE bitfield is    *
 *                                   removed.                             *
 *                                  16)MC_CGM-                            *
 *                                  -MUX_0_DC_5 register- PHASE bitfield  *
 *                                   is removed.                          *
 *                                  17)MC_ME-                             *
 *                                  -PRTN1_COFB3_STAT register- BLOCK102, *
 *                                   BLOCK103, BLOCK105, BLOCK106,        *
 *                                   BLOCK107 and BLOCK110 bitfields are  *
 *                                   added.                               *
 *                                  -PRTN1_COFB3_CLKEN register- REQ102   *
 *                                   bitfield is added.                   *
 *                                  18)MSCM-                              *
 *                                  -IRSPRC0 register is removed.         *
 *                                  19)MU-                                *
 *                                  -Single structure is created i.e MU   *
 *                                   instead of MUA and MUB.              *
 *                                  -MU_0__MUA and MU_1__MUA instances are*
 *                                   removed.                             *
 *                                  20)PFLASH-                            * 
 *                                  -PFAPR register- All bitfields        *
 *                                   positions are reverted.              *
 *                                  21)Peripheral_Debug_Freeze-           *
 *                                  -CORE0_DBGFRZ_CTRL_GPR register-      *
 *                                   -Bitfield name is changed from LP12C0*
 *                                    to LPI2C0.                          *
 *                                   -Bitfield name is changed from LP12C1*
 *                                    to LPI2C1.                          *
 *                                  -CORE1_DBGFRZ_CTRL_GPR register-      *
 *                                   -Bitfield name is changed from LP12C0*
 *                                    to LPI2C0.                          *
 *                                   -Bitfield name is changed from LP12C1*
 *                                    to LPI2C1.                          *   
 *                                  22)QuadSPI-                           *
 *                                  -SFB1AD and SFB2AD registers are      *
 *                                   added.                               *
 *                                  23)SDA_AP-                            *
 *                                  -AUTHCTL register is added.           *
 *                                  -DAP_GEN2_CTRL, DAP_GEN3_CTRL and     *
 *                                   DAP_GEN4_CTRL registers are removed. *
 *                                  24)SELFTEST_GPR-                      *
 *                                  -GENERIC_REG0 register is renamed as  *
 *                                   CONFIG_REG.                          *
 *                                  25)SIUL2-                             *
 *                                  -MPGPDO register's array size is      *
 *                                   changed from 13 to 14.               *
 *                                  26)STCU-                              *
 *                                  -LBRMSW0 register is removed.         *
 *                                  27)TEMPSENSE-                         *
 *                                  -TMU is renamed as TEMPSENSE.         *     
 *                                  28)TRGMUX-                            *
 *                                  -ANLCMP_n registers are renamed as    *
 *                                   LPCMP_nr.                            *
 *                                  29)EMIOS-                             *
 *                                  -CH register group is removed.        *
 *                                  30)FLEXCAN_x is renamed as CAN_x in   *
 *                                  base address macros.                  *
 *                                                                        *
 *========================================================================*
 * Copyright 2013-2016 Freescale Semiconductor, Inc.                      *
 * Copyright 2016-2020 NXP                                                *
 *                                                                        *********
 * NXP Confidential. This software is owned or controlled by NXP and may only be  *
 * used strictly in accordance with the applicable license terms. By expressly    *
 * accepting such terms or by downloading, installing, activating and/or otherwise*
 * using the software, you are agreeing that you have read, and that you agree to *
 * comply with and are bound by, such license terms. If you do not agree to be    *
 * bound by the applicable license terms, then you may not retain, install,       *
 * activate or otherwise use the software. The production use license in  *********
 * Section 2.3 is expressly granted for this software.                    *
 *                                                                        *
 **************************************************************************/
/*>>>>>>> NOTE! this file is auto-generated please do not edit it! <<<<<<<*/

/**************************************************************************
 * Example register & bit field write:                                    *
 *                                                                        *
 *  <MODULE>.<REGISTER>.B.<BIT> = 1;                                      *
 *  <MODULE>.<REGISTER>.R       = 0x10000000;                             *
 *                                                                        *
 **************************************************************************/

#ifndef _S32K344_H_
#define _S32K344_H_
#include "std_typedefs.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __MWERKS__
#pragma push
#pragma ANSI_strict off
#endif
#ifdef __ghs__
#pragma ghs nowarning 618
#endif
#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"
#endif


/* ============================================================================
   =============================== Module: ADC ================================
   ============================================================================ */

typedef union ADC_MCR_union_tag {      /* Main Configuration */
  vuint32_t R;
  struct {
    vuint32_t PWDN:1;                  /* Power-Down */
    vuint32_t ADCLKSEL:2;              /* Conversion Clock (AD_clk) Frequency Selection */
    vuint32_t _unused_3:2;
    vuint32_t ACKO:1;                  /* Auto Clock-Off */
    vuint32_t ABORT:1;                 /* Abort Conversion */
    vuint32_t ABORTCHAIN:1;            /* Abort Chain */
    vuint32_t _unused_8:1;
    vuint32_t AVGS:2;                  /* Averaging Select */
    vuint32_t AVGEN:1;                 /* Averaging Enable */
    vuint32_t _unused_12:3;
    vuint32_t STCL:1;                  /* Self-Test Configuration Lock */
    vuint32_t BCTU_MODE:1;             /* Body Cross Trigger Unit Mode Select */
    vuint32_t BCTUEN:1;                /* Body Cross Trigger Unit Enable */
    vuint32_t _unused_18:2;
    vuint32_t JSTART:1;                /* Injection start */
    vuint32_t JEDGE:1;                 /* Injection Trigger Edge Selection */
    vuint32_t JTRGEN:1;                /* Injection Trigger Enable */
    vuint32_t _unused_23:1;
    vuint32_t NSTART:1;                /* Start Normal Conversion */
    vuint32_t XSTRTEN:1;               /* Auxiliary External Start Enable */
    vuint32_t EDGE:1;                  /* External Trigger Edge Selection */
    vuint32_t TRGEN:1;                 /* External Trigger Enable */
    vuint32_t _unused_28:1;
    vuint32_t MODE:1;                  /* Normal Conversion Mode */
    vuint32_t WLSIDE:1;                /* Write Left-Aligned */
    vuint32_t OWREN:1;                 /* Overwrite Enable */
  } B;
} ADC_MCR_tag;

typedef union ADC_MSR_union_tag {      /* Main Status */
  vuint32_t R;
  struct {
    vuint32_t ADCSTATUS:3;             /* SAR_ADC State */
    vuint32_t _unused_3:2;
    vuint32_t ACKO:1;                  /* Auto Clock-Off On */
    vuint32_t _unused_6:3;
    vuint32_t CHADDR:7;                /* Input Under Measure */
    vuint32_t BCTUSTART:1;             /* BCTU Conversion Started */
    vuint32_t _unused_17:1;
    vuint32_t SELF_TEST_S:1;
    vuint32_t _unused_19:1;
    vuint32_t JSTART:1;                /* Injected Conversion Started */
    vuint32_t _unused_21:2;
    vuint32_t JABORT:1;                /* Injected Conversion Aborted */
    vuint32_t NSTART:1;                /* Normal Conversion Started */
    vuint32_t _unused_25:6;
    vuint32_t CALIBRTD:1;              /* Calibration Status */
  } B;
} ADC_MSR_tag;

typedef union ADC_ISR_union_tag {      /* Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t ECH:1;                   /* End of Chain Conversion */
    vuint32_t EOC:1;                   /* End of Conversion */
    vuint32_t JECH:1;                  /* End of Injected Chain Conversion */
    vuint32_t JEOC:1;                  /* End of Injected Conversion */
    vuint32_t EOBCTU:1;                /* End of BCTU Conversion */
    vuint32_t _unused_5:27;
  } B;
} ADC_ISR_tag;

typedef union ADC_CEOCFR0_union_tag {  /* Channel End of Conversion Flag for Precision Inputs */
  vuint32_t R;
  struct {
    vuint32_t PIEOCF0:1;               /* Precision Input End of Conversion Flag */
    vuint32_t PIEOCF1:1;               /* Precision Input End of Conversion Flag */
    vuint32_t PIEOCF2:1;               /* Precision Input End of Conversion Flag */
    vuint32_t PIEOCF3:1;               /* Precision Input End of Conversion Flag */
    vuint32_t PIEOCF4:1;               /* Precision Input End of Conversion Flag */
    vuint32_t PIEOCF5:1;               /* Precision Input End of Conversion Flag */
    vuint32_t PIEOCF6:1;               /* Precision Input End of Conversion Flag */
    vuint32_t PIEOCF7:1;               /* Precision Input End of Conversion Flag */
    vuint32_t PIEOCF8:1;               /* Precision Input End of Conversion Flag */
    vuint32_t PIEOCF9:1;               /* Precision Input End of Conversion Flag */
    vuint32_t _unused_10:22;
  } B;
} ADC_CEOCFR0_tag;

typedef union ADC_CEOCFR1_union_tag {  /* Channel End of Conversion Flag for Standard Inputs */
  vuint32_t R;
  struct {
    vuint32_t SIEOCF0:1;               /* Standard Input End of Conversion Flag */
    vuint32_t SIEOCF1:1;               /* Standard Input End of Conversion Flag */
    vuint32_t SIEOCF2:1;               /* Standard Input End of Conversion Flag */
    vuint32_t SIEOCF3:1;               /* Standard Input End of Conversion Flag */
    vuint32_t SIEOCF4:1;               /* Standard Input End of Conversion Flag */
    vuint32_t SIEOCF5:1;               /* Standard Input End of Conversion Flag */
    vuint32_t SIEOCF6:1;               /* Standard Input End of Conversion Flag */
    vuint32_t SIEOCF7:1;               /* Standard Input End of Conversion Flag */
    vuint32_t SIEOCF8:1;               /* Standard Input End of Conversion Flag */
    vuint32_t SIEOCF9:1;               /* Standard Input End of Conversion Flag */
    vuint32_t SIEOCF10:1;              /* Standard Input End of Conversion Flag */
    vuint32_t SIEOCF11:1;              /* Standard Input End of Conversion Flag */
    vuint32_t SIEOCF12:1;              /* Standard Input End of Conversion Flag */
    vuint32_t SIEOCF13:1;              /* Standard Input End of Conversion Flag */
    vuint32_t SIEOCF14:1;              /* Standard Input End of Conversion Flag */
    vuint32_t SIEOCF15:1;              /* Standard Input End of Conversion Flag */
    vuint32_t SIEOCF16:1;              /* Standard Input End of Conversion Flag */
    vuint32_t SIEOCF17:1;              /* Standard Input End of Conversion Flag */
    vuint32_t SIEOCF18:1;              /* Standard Input End of Conversion Flag */
    vuint32_t SIEOCF19:1;              /* Standard Input End of Conversion Flag */
    vuint32_t SIEOCF20:1;              /* Standard Input End of Conversion Flag */
    vuint32_t SIEOCF21:1;              /* Standard Input End of Conversion Flag */
    vuint32_t SIEOCF22:1;              /* Standard Input End of Conversion Flag */
    vuint32_t SIEOCF23:1;              /* Standard Input End of Conversion Flag */
    vuint32_t _unused_24:8;
  } B;
} ADC_CEOCFR1_tag;

typedef union ADC_CEOCFR2_union_tag {  /* Channel End of Conversion Flag for External Inputs */
  vuint32_t R;
  struct {
    vuint32_t EIEOCF0:1;               /* External Input End of Conversion Flag */
    vuint32_t EIEOCF1:1;               /* External Input End of Conversion Flag */
    vuint32_t EIEOCF2:1;               /* External Input End of Conversion Flag */
    vuint32_t EIEOCF3:1;               /* External Input End of Conversion Flag */
    vuint32_t EIEOCF4:1;               /* External Input End of Conversion Flag */
    vuint32_t EIEOCF5:1;               /* External Input End of Conversion Flag */
    vuint32_t EIEOCF6:1;               /* External Input End of Conversion Flag */
    vuint32_t EIEOCF7:1;               /* External Input End of Conversion Flag */
    vuint32_t EIEOCF8:1;               /* External Input End of Conversion Flag */
    vuint32_t EIEOCF9:1;               /* External Input End of Conversion Flag */
    vuint32_t EIEOCF10:1;              /* External Input End of Conversion Flag */
    vuint32_t EIEOCF11:1;              /* External Input End of Conversion Flag */
    vuint32_t EIEOCF12:1;              /* External Input End of Conversion Flag */
    vuint32_t EIEOCF13:1;              /* External Input End of Conversion Flag */
    vuint32_t EIEOCF14:1;              /* External Input End of Conversion Flag */
    vuint32_t EIEOCF15:1;              /* External Input End of Conversion Flag */
    vuint32_t EIEOCF16:1;              /* External Input End of Conversion Flag */
    vuint32_t EIEOCF17:1;              /* External Input End of Conversion Flag */
    vuint32_t EIEOCF18:1;              /* External Input End of Conversion Flag */
    vuint32_t EIEOCF19:1;              /* External Input End of Conversion Flag */
    vuint32_t EIEOCF20:1;              /* External Input End of Conversion Flag */
    vuint32_t EIEOCF21:1;              /* External Input End of Conversion Flag */
    vuint32_t EIEOCF22:1;              /* External Input End of Conversion Flag */
    vuint32_t EIEOCF23:1;              /* External Input End of Conversion Flag */
    vuint32_t EIEOCF24:1;              /* External Input End of Conversion Flag */
    vuint32_t EIEOCF25:1;              /* External Input End of Conversion Flag */
    vuint32_t EIEOCF26:1;              /* External Input End of Conversion Flag */
    vuint32_t EIEOCF27:1;              /* External Input End of Conversion Flag */
    vuint32_t EIEOCF28:1;              /* External Input End of Conversion Flag */
    vuint32_t EIEOCF29:1;              /* External Input End of Conversion Flag */
    vuint32_t EIEOCF30:1;              /* External Input End of Conversion Flag */
    vuint32_t EIEOCF31:1;              /* External Input End of Conversion Flag */
  } B;
} ADC_CEOCFR2_tag;

typedef union ADC_IMR_union_tag {      /* Interrupt Mask */
  vuint32_t R;
  struct {
    vuint32_t MSKECH:1;                /* ECH Interrupt Flag Enable */
    vuint32_t MSKEOC:1;                /* EOC Interrupt Flag Enable */
    vuint32_t MSKJECH:1;               /* JECH Interrupt Flag Enable */
    vuint32_t MSKJEOC:1;               /* JEOC Interrupt Flag Enable */
    vuint32_t MSKEOBCTU:1;             /* EOBCTU Interrupt Flag Enable */
    vuint32_t _unused_5:27;
  } B;
} ADC_IMR_tag;

typedef union ADC_CIMR0_union_tag {    /* EOC Interrupt Enable for Precision Inputs */
  vuint32_t R;
  struct {
    vuint32_t PIEOCIEN0:1;             /* Precision Input EOC Interrupt Enable */
    vuint32_t PIEOCIEN1:1;             /* Precision Input EOC Interrupt Enable */
    vuint32_t PIEOCIEN2:1;             /* Precision Input EOC Interrupt Enable */
    vuint32_t PIEOCIEN3:1;             /* Precision Input EOC Interrupt Enable */
    vuint32_t PIEOCIEN4:1;             /* Precision Input EOC Interrupt Enable */
    vuint32_t PIEOCIEN5:1;             /* Precision Input EOC Interrupt Enable */
    vuint32_t PIEOCIEN6:1;             /* Precision Input EOC Interrupt Enable */
    vuint32_t PIEOCIEN7:1;             /* Precision Input EOC Interrupt Enable */
    vuint32_t PIEOCIEN8:1;             /* Precision Input EOC Interrupt Enable */
    vuint32_t PIEOCIEN9:1;             /* Precision Input EOC Interrupt Enable */
    vuint32_t _unused_10:22;
  } B;
} ADC_CIMR0_tag;

typedef union ADC_CIMR1_union_tag {    /* EOC Interrupt Enable for Standard Inputs */
  vuint32_t R;
  struct {
    vuint32_t SIEOCIEN0:1;             /* Standard Input EOC Interrupt Enable */
    vuint32_t SIEOCIEN1:1;             /* Standard Input EOC Interrupt Enable */
    vuint32_t SIEOCIEN2:1;             /* Standard Input EOC Interrupt Enable */
    vuint32_t SIEOCIEN3:1;             /* Standard Input EOC Interrupt Enable */
    vuint32_t SIEOCIEN4:1;             /* Standard Input EOC Interrupt Enable */
    vuint32_t SIEOCIEN5:1;             /* Standard Input EOC Interrupt Enable */
    vuint32_t SIEOCIEN6:1;             /* Standard Input EOC Interrupt Enable */
    vuint32_t SIEOCIEN7:1;             /* Standard Input EOC Interrupt Enable */
    vuint32_t SIEOCIEN8:1;             /* Standard Input EOC Interrupt Enable */
    vuint32_t SIEOCIEN9:1;             /* Standard Input EOC Interrupt Enable */
    vuint32_t SIEOCIEN10:1;            /* Standard Input EOC Interrupt Enable */
    vuint32_t SIEOCIEN11:1;            /* Standard Input EOC Interrupt Enable */
    vuint32_t SIEOCIEN12:1;            /* Standard Input EOC Interrupt Enable */
    vuint32_t SIEOCIEN13:1;            /* Standard Input EOC Interrupt Enable */
    vuint32_t SIEOCIEN14:1;            /* Standard Input EOC Interrupt Enable */
    vuint32_t SIEOCIEN15:1;            /* Standard Input EOC Interrupt Enable */
    vuint32_t SIEOCIEN16:1;            /* Standard Input EOC Interrupt Enable */
    vuint32_t SIEOCIEN17:1;            /* Standard Input EOC Interrupt Enable */
    vuint32_t SIEOCIEN18:1;            /* Standard Input EOC Interrupt Enable */
    vuint32_t SIEOCIEN19:1;            /* Standard Input EOC Interrupt Enable */
    vuint32_t SIEOCIEN20:1;            /* Standard Input EOC Interrupt Enable */
    vuint32_t SIEOCIEN21:1;            /* Standard Input EOC Interrupt Enable */
    vuint32_t SIEOCIEN22:1;            /* Standard Input EOC Interrupt Enable */
    vuint32_t SIEOCIEN23:1;            /* Standard Input EOC Interrupt Enable */
    vuint32_t _unused_24:8;
  } B;
} ADC_CIMR1_tag;

typedef union ADC_CIMR2_union_tag {    /* EOC Interrupt Enable for External Inputs */
  vuint32_t R;
  struct {
    vuint32_t EIEOCIEN0:1;             /* External Input EOC Interrupt Enable */
    vuint32_t EIEOCIEN1:1;             /* External Input EOC Interrupt Enable */
    vuint32_t EIEOCIEN2:1;             /* External Input EOC Interrupt Enable */
    vuint32_t EIEOCIEN3:1;             /* External Input EOC Interrupt Enable */
    vuint32_t EIEOCIEN4:1;             /* External Input EOC Interrupt Enable */
    vuint32_t EIEOCIEN5:1;             /* External Input EOC Interrupt Enable */
    vuint32_t EIEOCIEN6:1;             /* External Input EOC Interrupt Enable */
    vuint32_t EIEOCIEN7:1;             /* External Input EOC Interrupt Enable */
    vuint32_t EIEOCIEN8:1;             /* External Input EOC Interrupt Enable */
    vuint32_t EIEOCIEN9:1;             /* External Input EOC Interrupt Enable */
    vuint32_t EIEOCIEN10:1;            /* External Input EOC Interrupt Enable */
    vuint32_t EIEOCIEN11:1;            /* External Input EOC Interrupt Enable */
    vuint32_t EIEOCIEN12:1;            /* External Input EOC Interrupt Enable */
    vuint32_t EIEOCIEN13:1;            /* External Input EOC Interrupt Enable */
    vuint32_t EIEOCIEN14:1;            /* External Input EOC Interrupt Enable */
    vuint32_t EIEOCIEN15:1;            /* External Input EOC Interrupt Enable */
    vuint32_t EIEOCIEN16:1;            /* External Input EOC Interrupt Enable */
    vuint32_t EIEOCIEN17:1;            /* External Input EOC Interrupt Enable */
    vuint32_t EIEOCIEN18:1;            /* External Input EOC Interrupt Enable */
    vuint32_t EIEOCIEN19:1;            /* External Input EOC Interrupt Enable */
    vuint32_t EIEOCIEN20:1;            /* External Input EOC Interrupt Enable */
    vuint32_t EIEOCIEN21:1;            /* External Input EOC Interrupt Enable */
    vuint32_t EIEOCIEN22:1;            /* External Input EOC Interrupt Enable */
    vuint32_t EIEOCIEN23:1;            /* External Input EOC Interrupt Enable */
    vuint32_t EIEOCIEN24:1;            /* External Input EOC Interrupt Enable */
    vuint32_t EIEOCIEN25:1;            /* External Input EOC Interrupt Enable */
    vuint32_t EIEOCIEN26:1;            /* External Input EOC Interrupt Enable */
    vuint32_t EIEOCIEN27:1;            /* External Input EOC Interrupt Enable */
    vuint32_t EIEOCIEN28:1;            /* External Input EOC Interrupt Enable */
    vuint32_t EIEOCIEN29:1;            /* External Input EOC Interrupt Enable */
    vuint32_t EIEOCIEN30:1;            /* External Input EOC Interrupt Enable */
    vuint32_t EIEOCIEN31:1;            /* External Input EOC Interrupt Enable */
  } B;
} ADC_CIMR2_tag;

typedef union ADC_WTISR_union_tag {    /* Analog Watchdog Threshold Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t LAWIF1:1;                /* Low Analog Watchdog Interrupt Flag 1 */
    vuint32_t HAWIF1:1;                /* High Analog Watchdog Interrupt Flag 1 */
    vuint32_t LAWIF2:1;                /* Low Analog Watchdog Interrupt Flag 2 */
    vuint32_t HAWIF2:1;                /* High Analog Watchdog Interrupt Flag 2 */
    vuint32_t LAWIF3:1;                /* Low Analog Watchdog Interrupt Flag 3 */
    vuint32_t HAWIF3:1;                /* High Analog Watchdog Interrupt Flag 3 */
    vuint32_t LAWIF4:1;                /* Low Analog Watchdog Interrupt Flag 4 */
    vuint32_t HAWIF4:1;                /* High Analog Watchdog Interrupt Flag 4 */
    vuint32_t LAWIF5:1;                /* Low Analog Watchdog Interrupt Flag 5 */
    vuint32_t HAWIF5:1;                /* High Analog Watchdog Interrupt Flag 5 */
    vuint32_t LAWIF6:1;                /* Low Analog Watchdog Interrupt Flag 6 */
    vuint32_t HAWIF6:1;                /* High Analog Watchdog Interrupt Flag 6 */
    vuint32_t LAWIF7:1;                /* Low Analog Watchdog Interrupt Flag 7 */
    vuint32_t HAWIF7:1;                /* High Analog Watchdog Interrupt Flag 7 */
    vuint32_t LAWIF8:1;                /* Low Analog Watchdog Interrupt Flag 8 */
    vuint32_t HAWIF8:1;                /* High Analog Watchdog Interrupt Flag 8 */
    vuint32_t LAWIF9:1;                /* Low Analog Watchdog Interrupt Flag 9 */
    vuint32_t HAWIF9:1;                /* High Analog Watchdog Interrupt Flag 9 */
    vuint32_t LAWIF10:1;               /* Low Analog Watchdog Interrupt Flag 10 */
    vuint32_t HAWIF10:1;               /* High Analog Watchdog Interrupt Flag 10 */
    vuint32_t LAWIF11:1;               /* Low Analog Watchdog Interrupt Flag 11 */
    vuint32_t HAWIF11:1;               /* High Analog Watchdog Interrupt Flag 11 */
    vuint32_t LAWIF12:1;               /* Low Analog Watchdog Interrupt Flag 12 */
    vuint32_t HAWIF12:1;               /* High Analog Watchdog Interrupt Flag 12 */
    vuint32_t LAWIF13:1;               /* Low Analog Watchdog Interrupt Flag 13 */
    vuint32_t HAWIF13:1;               /* High Analog Watchdog Interrupt Flag 13 */
    vuint32_t LAWIF14:1;               /* Low Analog Watchdog Interrupt Flag 14 */
    vuint32_t HAWIF14:1;               /* High Analog Watchdog Interrupt Flag 14 */
    vuint32_t LAWIF15:1;               /* Low Analog Watchdog Interrupt Flag 15 */
    vuint32_t HAWIF15:1;               /* High Analog Watchdog Interrupt Flag 15 */
    vuint32_t LAWIF16:1;               /* Low Analog Watchdog Interrupt Flag 16 */
    vuint32_t HAWIF16:1;               /* High Analog Watchdog Interrupt Flag 16 */
  } B;
} ADC_WTISR_tag;

typedef union ADC_WTIMR_union_tag {    /* Analog Watchdog Threshold Interrupt Enable */
  vuint32_t R;
  struct {
    vuint32_t LAWIFEN1:1;              /* Low Analog Watchdog Interrupt Flag Enable 1 */
    vuint32_t HDWIFEN1:1;              /* High Data Watchdog Interrupt Flag Enable 1 */
    vuint32_t LAWIFEN2:1;              /* Low Analog Watchdog Interrupt Flag Enable 2 */
    vuint32_t HDWIFEN2:1;              /* High Data Watchdog Interrupt Flag Enable 2 */
    vuint32_t LAWIFEN3:1;              /* Low Analog Watchdog Interrupt Flag Enable 3 */
    vuint32_t HDWIFEN3:1;              /* High Data Watchdog Interrupt Flag Enable 3 */
    vuint32_t LAWIFEN4:1;              /* Low Analog Watchdog Interrupt Flag Enable 4 */
    vuint32_t HDWIFEN4:1;              /* High Data Watchdog Interrupt Flag Enable 4 */
    vuint32_t _unused_8:24;
  } B;
} ADC_WTIMR_tag;

typedef union ADC_DMAE_union_tag {     /* Direct Memory Access Configuration */
  vuint32_t R;
  struct {
    vuint32_t DMAEN:1;                 /* DMA Enable */
    vuint32_t DCLR:1;                  /* DMA Clear Request */
    vuint32_t _unused_2:30;
  } B;
} ADC_DMAE_tag;

typedef union ADC_DMAR0_union_tag {    /* DMA Request Enable for Precision Inputs */
  vuint32_t R;
  struct {
    vuint32_t PIDMAREN0:1;             /* Precision Input DMA Request Enable 0 */
    vuint32_t PIDMAREN1:1;             /* Precision Input DMA Request Enable 1 */
    vuint32_t PIDMAREN2:1;             /* Precision Input DMA Request Enable 2 */
    vuint32_t PIDMAREN3:1;             /* Precision Input DMA Request Enable 3 */
    vuint32_t PIDMAREN4:1;             /* Precision Input DMA Request Enable 4 */
    vuint32_t PIDMAREN5:1;             /* Precision Input DMA Request Enable 5 */
    vuint32_t PIDMAREN6:1;             /* Precision Input DMA Request Enable 6 */
    vuint32_t PIDMAREN7:1;             /* Precision Input DMA Request Enable 7 */
    vuint32_t PIDMAREN8:1;             /* Precision Input DMA Request Enable 8 */
    vuint32_t PIDMAREN9:1;             /* Precision Input DMA Request Enable 9 */
    vuint32_t _unused_10:22;
  } B;
} ADC_DMAR0_tag;

typedef union ADC_DMAR1_union_tag {    /* DMA Request Enable for Standard Inputs */
  vuint32_t R;
  struct {
    vuint32_t SIDMAREN0:1;             /* Standard Input DMA Request Enable 0 */
    vuint32_t SIDMAREN1:1;             /* Standard Input DMA Request Enable 1 */
    vuint32_t SIDMAREN2:1;             /* Standard Input DMA Request Enable 2 */
    vuint32_t SIDMAREN3:1;             /* Standard Input DMA Request Enable 3 */
    vuint32_t SIDMAREN4:1;             /* Standard Input DMA Request Enable 4 */
    vuint32_t SIDMAREN5:1;             /* Standard Input DMA Request Enable 5 */
    vuint32_t SIDMAREN6:1;             /* Standard Input DMA Request Enable 6 */
    vuint32_t SIDMAREN7:1;             /* Standard Input DMA Request Enable 7 */
    vuint32_t SIDMAREN8:1;             /* Standard Input DMA Request Enable 8 */
    vuint32_t SIDMAREN9:1;             /* Standard Input DMA Request Enable 9 */
    vuint32_t SIDMAREN10:1;            /* Standard Input DMA Request Enable 10 */
    vuint32_t SIDMAREN11:1;            /* Standard Input DMA Request Enable 11 */
    vuint32_t SIDMAREN12:1;            /* Standard Input DMA Request Enable 12 */
    vuint32_t SIDMAREN13:1;            /* Standard Input DMA Request Enable 13 */
    vuint32_t SIDMAREN14:1;            /* Standard Input DMA Request Enable 14 */
    vuint32_t SIDMAREN15:1;            /* Standard Input DMA Request Enable 15 */
    vuint32_t SIDMAREN16:1;            /* Standard Input DMA Request Enable 16 */
    vuint32_t SIDMAREN17:1;            /* Standard Input DMA Request Enable 17 */
    vuint32_t SIDMAREN18:1;            /* Standard Input DMA Request Enable 18 */
    vuint32_t SIDMAREN19:1;            /* Standard Input DMA Request Enable 19 */
    vuint32_t SIDMAREN20:1;            /* Standard Input DMA Request Enable 20 */
    vuint32_t SIDMAREN21:1;            /* Standard Input DMA Request Enable 21 */
    vuint32_t SIDMAREN22:1;            /* Standard Input DMA Request Enable 22 */
    vuint32_t SIDMAREN23:1;            /* Standard Input DMA Request Enable 23 */
    vuint32_t _unused_24:8;
  } B;
} ADC_DMAR1_tag;

typedef union ADC_DMAR2_union_tag {    /* DMA Request Enable for External Inputs */
  vuint32_t R;
  struct {
    vuint32_t EIDMAREN0:1;             /* External Input DMA Request Enable 0 */
    vuint32_t EIDMAREN1:1;             /* External Input DMA Request Enable 1 */
    vuint32_t EIDMAREN2:1;             /* External Input DMA Request Enable 2 */
    vuint32_t EIDMAREN3:1;             /* External Input DMA Request Enable 3 */
    vuint32_t EIDMAREN4:1;             /* External Input DMA Request Enable 4 */
    vuint32_t EIDMAREN5:1;             /* External Input DMA Request Enable 5 */
    vuint32_t EIDMAREN6:1;             /* External Input DMA Request Enable 6 */
    vuint32_t EIDMAREN7:1;             /* External Input DMA Request Enable 7 */
    vuint32_t EIDMAREN8:1;             /* External Input DMA Request Enable 8 */
    vuint32_t EIDMAREN9:1;             /* External Input DMA Request Enable 9 */
    vuint32_t EIDMAREN10:1;            /* External Input DMA Request Enable 10 */
    vuint32_t EIDMAREN11:1;            /* External Input DMA Request Enable 11 */
    vuint32_t EIDMAREN12:1;            /* External Input DMA Request Enable 12 */
    vuint32_t EIDMAREN13:1;            /* External Input DMA Request Enable 13 */
    vuint32_t EIDMAREN14:1;            /* External Input DMA Request Enable 14 */
    vuint32_t EIDMAREN15:1;            /* External Input DMA Request Enable 15 */
    vuint32_t EIDMAREN16:1;            /* External Input DMA Request Enable 16 */
    vuint32_t EIDMAREN17:1;            /* External Input DMA Request Enable 17 */
    vuint32_t EIDMAREN18:1;            /* External Input DMA Request Enable 18 */
    vuint32_t EIDMAREN19:1;            /* External Input DMA Request Enable 19 */
    vuint32_t EIDMAREN20:1;            /* External Input DMA Request Enable 20 */
    vuint32_t EIDMAREN21:1;            /* External Input DMA Request Enable 21 */
    vuint32_t EIDMAREN22:1;            /* External Input DMA Request Enable 22 */
    vuint32_t EIDMAREN23:1;            /* External Input DMA Request Enable 23 */
    vuint32_t EIDMAREN24:1;            /* External Input DMA Request Enable 24 */
    vuint32_t EIDMAREN25:1;            /* External Input DMA Request Enable 25 */
    vuint32_t EIDMAREN26:1;            /* External Input DMA Request Enable 26 */
    vuint32_t EIDMAREN27:1;            /* External Input DMA Request Enable 27 */
    vuint32_t EIDMAREN28:1;            /* External Input DMA Request Enable 28 */
    vuint32_t EIDMAREN29:1;            /* External Input DMA Request Enable 29 */
    vuint32_t EIDMAREN30:1;            /* External Input DMA Request Enable 30 */
    vuint32_t EIDMAREN31:1;            /* External Input DMA Request Enable 31 */
  } B;
} ADC_DMAR2_tag;

typedef union ADC_THRHLR_union_tag {   /* Analog Watchdog Threshold Values */
  vuint32_t R;
  struct {
    vuint32_t THRL:15;                 /* Low Threshold Value */
    vuint32_t _unused_15:1;
    vuint32_t THRH:15;                 /* High Threshold Value */
    vuint32_t _unused_31:1;
  } B;
} ADC_THRHLR_tag;

typedef union ADC_PSCR_union_tag {     /* Presampling Control */
  vuint32_t R;
  struct {
    vuint32_t PRECONV:1;               /* Convert Presampled Value */
    vuint32_t PREVAL0:1;               /* Presampling Voltage Select for Precision Inputs */
    vuint32_t _unused_2:1;
    vuint32_t PREVAL1:1;               /* Presampling Voltage Select for Standard Inputs */
    vuint32_t _unused_4:1;
    vuint32_t PREVAL2:1;               /* Presampling Voltage Select for External Inputs */
    vuint32_t _unused_6:26;
  } B;
} ADC_PSCR_tag;

typedef union ADC_PSR0_union_tag {     /* Presampling Enable for Precision Inputs */
  vuint32_t R;
  struct {
    vuint32_t PRES0:1;                 /* Presampling Enable */
    vuint32_t PRES1:1;                 /* Presampling Enable */
    vuint32_t PRES2:1;                 /* Presampling Enable */
    vuint32_t PRES3:1;                 /* Presampling Enable */
    vuint32_t PRES4:1;                 /* Presampling Enable */
    vuint32_t PRES5:1;                 /* Presampling Enable */
    vuint32_t PRES6:1;                 /* Presampling Enable */
    vuint32_t PRES7:1;                 /* Presampling Enable */
    vuint32_t PRES8:1;                 /* Presampling Enable */
    vuint32_t PRES9:1;                 /* Presampling Enable */
    vuint32_t _unused_10:22;
  } B;
} ADC_PSR0_tag;

typedef union ADC_PSR1_union_tag {     /* Presampling Enable for Standard Inputs */
  vuint32_t R;
  struct {
    vuint32_t PRES0:1;                 /* Presampling enable */
    vuint32_t PRES1:1;                 /* Presampling enable */
    vuint32_t PRES2:1;                 /* Presampling enable */
    vuint32_t PRES3:1;                 /* Presampling enable */
    vuint32_t PRES4:1;                 /* Presampling enable */
    vuint32_t PRES5:1;                 /* Presampling enable */
    vuint32_t PRES6:1;                 /* Presampling enable */
    vuint32_t PRES7:1;                 /* Presampling enable */
    vuint32_t PRES8:1;                 /* Presampling enable */
    vuint32_t PRES9:1;                 /* Presampling enable */
    vuint32_t PRES10:1;                /* Presampling enable */
    vuint32_t PRES11:1;                /* Presampling enable */
    vuint32_t PRES12:1;                /* Presampling enable */
    vuint32_t PRES13:1;                /* Presampling enable */
    vuint32_t PRES14:1;                /* Presampling enable */
    vuint32_t PRES15:1;                /* Presampling enable */
    vuint32_t PRES16:1;                /* Presampling enable */
    vuint32_t PRES17:1;                /* Presampling enable */
    vuint32_t PRES18:1;                /* Presampling enable */
    vuint32_t PRES19:1;                /* Presampling enable */
    vuint32_t PRES20:1;                /* Presampling enable */
    vuint32_t PRES21:1;                /* Presampling enable */
    vuint32_t PRES22:1;                /* Presampling enable */
    vuint32_t PRES23:1;                /* Presampling enable */
    vuint32_t _unused_24:8;
  } B;
} ADC_PSR1_tag;

typedef union ADC_PSR2_union_tag {     /* Presampling Enable for External Inputs */
  vuint32_t R;
  struct {
    vuint32_t PRES0:1;                 /* Presampling enable */
    vuint32_t PRES1:1;                 /* Presampling enable */
    vuint32_t PRES2:1;                 /* Presampling enable */
    vuint32_t PRES3:1;                 /* Presampling enable */
    vuint32_t PRES4:1;                 /* Presampling enable */
    vuint32_t PRES5:1;                 /* Presampling enable */
    vuint32_t PRES6:1;                 /* Presampling enable */
    vuint32_t PRES7:1;                 /* Presampling enable */
    vuint32_t PRES8:1;                 /* Presampling enable */
    vuint32_t PRES9:1;                 /* Presampling enable */
    vuint32_t PRES10:1;                /* Presampling enable */
    vuint32_t PRES11:1;                /* Presampling enable */
    vuint32_t PRES12:1;                /* Presampling enable */
    vuint32_t PRES13:1;                /* Presampling enable */
    vuint32_t PRES14:1;                /* Presampling enable */
    vuint32_t PRES15:1;                /* Presampling enable */
    vuint32_t PRES16:1;                /* Presampling enable */
    vuint32_t PRES17:1;                /* Presampling enable */
    vuint32_t PRES18:1;                /* Presampling enable */
    vuint32_t PRES19:1;                /* Presampling enable */
    vuint32_t PRES20:1;                /* Presampling enable */
    vuint32_t PRES21:1;                /* Presampling enable */
    vuint32_t PRES22:1;                /* Presampling enable */
    vuint32_t PRES23:1;                /* Presampling enable */
    vuint32_t PRES24:1;                /* Presampling enable */
    vuint32_t PRES25:1;                /* Presampling enable */
    vuint32_t PRES26:1;                /* Presampling enable */
    vuint32_t PRES27:1;                /* Presampling enable */
    vuint32_t PRES28:1;                /* Presampling enable */
    vuint32_t PRES29:1;                /* Presampling enable */
    vuint32_t PRES30:1;                /* Presampling enable */
    vuint32_t PRES31:1;                /* Presampling enable */
  } B;
} ADC_PSR2_tag;

typedef union ADC_CTR0_union_tag {     /* Conversion Timing for Precision Inputs */
  vuint32_t R;
  struct {
    vuint32_t INPSAMP:8;               /* Input Sample Cycles */
    vuint32_t _unused_8:24;
  } B;
} ADC_CTR0_tag;

typedef union ADC_CTR1_union_tag {     /* Conversion Timing for Standard Inputs */
  vuint32_t R;
  struct {
    vuint32_t TSENSOR_SEL:1;
    vuint32_t INPSAMP:7;
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ADC_CTR1_tag;

typedef union ADC_CTR2_union_tag {     /* Conversion Timing for External Inputs */
  vuint32_t R;
  struct {
    vuint32_t INPSAMP:8;               /* Input Sample Cycles */
    vuint32_t _unused_8:24;
  } B;
} ADC_CTR2_tag;

typedef union ADC_NCMR0_union_tag {    /* Normal Conversion Enable for Precision Inputs */
  vuint32_t R;
  struct {
    vuint32_t CH0:1;                   /* Precision Input to be Converted */
    vuint32_t CH1:1;                   /* Precision Input to be Converted */
    vuint32_t CH2:1;                   /* Precision Input to be Converted */
    vuint32_t CH3:1;                   /* Precision Input to be Converted */
    vuint32_t CH4:1;                   /* Precision Input to be Converted */
    vuint32_t CH5:1;                   /* Precision Input to be Converted */
    vuint32_t CH6:1;                   /* Precision Input to be Converted */
    vuint32_t CH7:1;                   /* Precision Input to be Converted */
    vuint32_t CH8:1;                   /* Precision Input to be Converted */
    vuint32_t CH9:1;                   /* Precision Input to be Converted */
    vuint32_t _unused_10:22;
  } B;
} ADC_NCMR0_tag;

typedef union ADC_NCMR1_union_tag {    /* Normal Conversion Enable for Standard Inputs */
  vuint32_t R;
  struct {
    vuint32_t CH32:1;                  /* Standard Input to be Converted */
    vuint32_t CH33:1;                  /* Standard Input to be Converted */
    vuint32_t CH34:1;                  /* Standard Input to be Converted */
    vuint32_t CH35:1;                  /* Standard Input to be Converted */
    vuint32_t CH36:1;                  /* Standard Input to be Converted */
    vuint32_t CH37:1;                  /* Standard Input to be Converted */
    vuint32_t CH38:1;                  /* Standard Input to be Converted */
    vuint32_t CH39:1;                  /* Standard Input to be Converted */
    vuint32_t CH40:1;                  /* Standard Input to be Converted */
    vuint32_t CH41:1;                  /* Standard Input to be Converted */
    vuint32_t CH42:1;                  /* Standard Input to be Converted */
    vuint32_t CH43:1;                  /* Standard Input to be Converted */
    vuint32_t CH44:1;                  /* Standard Input to be Converted */
    vuint32_t CH45:1;                  /* Standard Input to be Converted */
    vuint32_t CH46:1;                  /* Standard Input to be Converted */
    vuint32_t CH47:1;                  /* Standard Input to be Converted */
    vuint32_t CH48:1;                  /* Standard Input to be Converted */
    vuint32_t CH49:1;                  /* Standard Input to be Converted */
    vuint32_t CH50:1;                  /* Standard Input to be Converted */
    vuint32_t CH51:1;                  /* Standard Input to be Converted */
    vuint32_t CH52:1;                  /* Standard Input to be Converted */
    vuint32_t CH53:1;                  /* Standard Input to be Converted */
    vuint32_t CH54:1;                  /* Standard Input to be Converted */
    vuint32_t CH55:1;                  /* Standard Input to be Converted */
    vuint32_t _unused_24:8;
  } B;
} ADC_NCMR1_tag;

typedef union ADC_NCMR2_union_tag {    /* Normal Conversion Enable for External Inputs */
  vuint32_t R;
  struct {
    vuint32_t CH64:1;                  /* External Input to be Converted */
    vuint32_t CH65:1;                  /* External Input to be Converted */
    vuint32_t CH66:1;                  /* External Input to be Converted */
    vuint32_t CH67:1;                  /* External Input to be Converted */
    vuint32_t CH68:1;                  /* External Input to be Converted */
    vuint32_t CH69:1;                  /* External Input to be Converted */
    vuint32_t CH70:1;                  /* External Input to be Converted */
    vuint32_t CH71:1;                  /* External Input to be Converted */
    vuint32_t CH72:1;                  /* External Input to be Converted */
    vuint32_t CH73:1;                  /* External Input to be Converted */
    vuint32_t CH74:1;                  /* External Input to be Converted */
    vuint32_t CH75:1;                  /* External Input to be Converted */
    vuint32_t CH76:1;                  /* External Input to be Converted */
    vuint32_t CH77:1;                  /* External Input to be Converted */
    vuint32_t CH78:1;                  /* External Input to be Converted */
    vuint32_t CH79:1;                  /* External Input to be Converted */
    vuint32_t CH80:1;                  /* External Input to be Converted */
    vuint32_t CH81:1;                  /* External Input to be Converted */
    vuint32_t CH82:1;                  /* External Input to be Converted */
    vuint32_t CH83:1;                  /* External Input to be Converted */
    vuint32_t CH84:1;                  /* External Input to be Converted */
    vuint32_t CH85:1;                  /* External Input to be Converted */
    vuint32_t CH86:1;                  /* External Input to be Converted */
    vuint32_t CH87:1;                  /* External Input to be Converted */
    vuint32_t CH88:1;                  /* External Input to be Converted */
    vuint32_t CH89:1;                  /* External Input to be Converted */
    vuint32_t CH90:1;                  /* External Input to be Converted */
    vuint32_t CH91:1;                  /* External Input to be Converted */
    vuint32_t CH92:1;                  /* External Input to be Converted */
    vuint32_t CH93:1;                  /* External Input to be Converted */
    vuint32_t CH94:1;                  /* External Input to be Converted */
    vuint32_t CH95:1;                  /* External Input to be Converted */
  } B;
} ADC_NCMR2_tag;

typedef union ADC_JCMR0_union_tag {    /* Injected Conversion Enable for Precision Inputs */
  vuint32_t R;
  struct {
    vuint32_t CH0:1;                   /* Precision Input to be Converted */
    vuint32_t CH1:1;                   /* Precision Input to be Converted */
    vuint32_t CH2:1;                   /* Precision Input to be Converted */
    vuint32_t CH3:1;                   /* Precision Input to be Converted */
    vuint32_t CH4:1;                   /* Precision Input to be Converted */
    vuint32_t CH5:1;                   /* Precision Input to be Converted */
    vuint32_t CH6:1;                   /* Precision Input to be Converted */
    vuint32_t CH7:1;                   /* Precision Input to be Converted */
    vuint32_t CH8:1;                   /* Precision Input to be Converted */
    vuint32_t CH9:1;                   /* Precision Input to be Converted */
    vuint32_t _unused_10:22;
  } B;
} ADC_JCMR0_tag;

typedef union ADC_JCMR1_union_tag {    /* Injected Conversion Enable for Standard Inputs */
  vuint32_t R;
  struct {
    vuint32_t CH32:1;                  /* Standard Input to be Converted */
    vuint32_t CH33:1;                  /* Standard Input to be Converted */
    vuint32_t CH34:1;                  /* Standard Input to be Converted */
    vuint32_t CH35:1;                  /* Standard Input to be Converted */
    vuint32_t CH36:1;                  /* Standard Input to be Converted */
    vuint32_t CH37:1;                  /* Standard Input to be Converted */
    vuint32_t CH38:1;                  /* Standard Input to be Converted */
    vuint32_t CH39:1;                  /* Standard Input to be Converted */
    vuint32_t CH40:1;                  /* Standard Input to be Converted */
    vuint32_t CH41:1;                  /* Standard Input to be Converted */
    vuint32_t CH42:1;                  /* Standard Input to be Converted */
    vuint32_t CH43:1;                  /* Standard Input to be Converted */
    vuint32_t CH44:1;                  /* Standard Input to be Converted */
    vuint32_t CH45:1;                  /* Standard Input to be Converted */
    vuint32_t CH46:1;                  /* Standard Input to be Converted */
    vuint32_t CH47:1;                  /* Standard Input to be Converted */
    vuint32_t CH48:1;                  /* Standard Input to be Converted */
    vuint32_t CH49:1;                  /* Standard Input to be Converted */
    vuint32_t CH50:1;                  /* Standard Input to be Converted */
    vuint32_t CH51:1;                  /* Standard Input to be Converted */
    vuint32_t CH52:1;                  /* Standard Input to be Converted */
    vuint32_t CH53:1;                  /* Standard Input to be Converted */
    vuint32_t CH54:1;                  /* Standard Input to be Converted */
    vuint32_t CH55:1;                  /* Standard Input to be Converted */
    vuint32_t _unused_24:8;
  } B;
} ADC_JCMR1_tag;

typedef union ADC_JCMR2_union_tag {    /* Injected Conversion Enable for External Inputs */
  vuint32_t R;
  struct {
    vuint32_t CH64:1;                  /* External Input to be Converted */
    vuint32_t CH65:1;                  /* External Input to be Converted */
    vuint32_t CH66:1;                  /* External Input to be Converted */
    vuint32_t CH67:1;                  /* External Input to be Converted */
    vuint32_t CH68:1;                  /* External Input to be Converted */
    vuint32_t CH69:1;                  /* External Input to be Converted */
    vuint32_t CH70:1;                  /* External Input to be Converted */
    vuint32_t CH71:1;                  /* External Input to be Converted */
    vuint32_t CH72:1;                  /* External Input to be Converted */
    vuint32_t CH73:1;                  /* External Input to be Converted */
    vuint32_t CH74:1;                  /* External Input to be Converted */
    vuint32_t CH75:1;                  /* External Input to be Converted */
    vuint32_t CH76:1;                  /* External Input to be Converted */
    vuint32_t CH77:1;                  /* External Input to be Converted */
    vuint32_t CH78:1;                  /* External Input to be Converted */
    vuint32_t CH79:1;                  /* External Input to be Converted */
    vuint32_t CH80:1;                  /* External Input to be Converted */
    vuint32_t CH81:1;                  /* External Input to be Converted */
    vuint32_t CH82:1;                  /* External Input to be Converted */
    vuint32_t CH83:1;                  /* External Input to be Converted */
    vuint32_t CH84:1;                  /* External Input to be Converted */
    vuint32_t CH85:1;                  /* External Input to be Converted */
    vuint32_t CH86:1;                  /* External Input to be Converted */
    vuint32_t CH87:1;                  /* External Input to be Converted */
    vuint32_t CH88:1;                  /* External Input to be Converted */
    vuint32_t CH89:1;                  /* External Input to be Converted */
    vuint32_t CH90:1;                  /* External Input to be Converted */
    vuint32_t CH91:1;                  /* External Input to be Converted */
    vuint32_t CH92:1;                  /* External Input to be Converted */
    vuint32_t CH93:1;                  /* External Input to be Converted */
    vuint32_t CH94:1;                  /* External Input to be Converted */
    vuint32_t CH95:1;                  /* External Input to be Converted */
  } B;
} ADC_JCMR2_tag;

typedef union ADC_DSDR_union_tag {     /* Delay Start of Data Conversion */
  vuint32_t R;
  struct {
    vuint32_t DSD:16;                  /* Delay */
    vuint32_t _unused_16:16;
  } B;
} ADC_DSDR_tag;

typedef union ADC_PDEDR_union_tag {    /* Power Down Exit Delay */
  vuint32_t R;
  struct {
    vuint32_t PDED:8;                  /* Delay */
    vuint32_t _unused_8:24;
  } B;
} ADC_PDEDR_tag;

typedef union ADC_PCDR_union_tag {     /* Precision Input n Conversion Data */
  vuint32_t R;
  struct {
    vuint32_t CDATA:16;                /* Conversion Data */
    vuint32_t RESULT:2;                /* Conversion Data Type */
    vuint32_t OVERW:1;                 /* Overwrite Status Flag */
    vuint32_t VALID:1;                 /* Conversion Data Available */
    vuint32_t _unused_20:12;
  } B;
} ADC_PCDR_tag;

typedef union ADC_ICDR_union_tag {     /* Standard Input n Conversion Data */
  vuint32_t R;
  struct {
    vuint32_t CDATA:16;                /* Conversion Data */
    vuint32_t RESULT:2;                /* Conversion Data Type */
    vuint32_t OVERW:1;                 /* Overwrite Status Flag */
    vuint32_t VALID:1;                 /* Conversion Data Available */
    vuint32_t _unused_20:12;
  } B;
} ADC_ICDR_tag;

typedef union ADC_ECDR_union_tag {     /* External Input n Conversion Data */
  vuint32_t R;
  struct {
    vuint32_t CDATA:16;                /* Conversion Data */
    vuint32_t RESULT:2;                /* Conversion Data Type */
    vuint32_t OVERW:1;                 /* Overwrite Status Flag */
    vuint32_t VALID:1;                 /* Conversion Data Available */
    vuint32_t _unused_20:12;
  } B;
} ADC_ECDR_tag;

typedef union ADC_CWSELRPI_union_tag { /* Channel Analog Watchdog Select for Precision Inputs */
  vuint32_t R;
  struct {
    vuint32_t WSEL_SI0_0:2;            /* Analog Watchdog Selection */
    vuint32_t _unused_2:2;
    vuint32_t WSEL_SI1_0:2;            /* Analog Watchdog Selection */
    vuint32_t _unused_6:2;
    vuint32_t WSEL_SI2_0:2;            /* Analog Watchdog Selection */
    vuint32_t _unused_10:2;
    vuint32_t WSEL_SI3_0:2;            /* Analog Watchdog Selection */
    vuint32_t _unused_14:2;
    vuint32_t WSEL_SI4_0:2;            /* Analog Watchdog Selection */
    vuint32_t _unused_18:2;
    vuint32_t WSEL_SI5_0:2;            /* Analog Watchdog Selection */
    vuint32_t _unused_22:2;
    vuint32_t WSEL_SI6_0:2;            /* Analog Watchdog Selection */
    vuint32_t _unused_26:2;
    vuint32_t WSEL_SI7_0:2;            /* Analog Watchdog Selection */
    vuint32_t _unused_30:2;
  } B;
} ADC_CWSELRPI_tag;

typedef union ADC_CWSELRSI_union_tag { /* Channel Analog Watchdog Select for Standard Inputs */
  vuint32_t R;
  struct {
    vuint32_t WSEL_SI0_0:2;            /* Analog Watchdog Selection */
    vuint32_t _unused_2:2;
    vuint32_t WSEL_SI1_0:2;            /* Analog Watchdog Selection */
    vuint32_t _unused_6:2;
    vuint32_t WSEL_SI2_0:2;            /* Analog Watchdog Selection */
    vuint32_t _unused_10:2;
    vuint32_t WSEL_SI3_0:2;            /* Analog Watchdog Selection */
    vuint32_t _unused_14:2;
    vuint32_t WSEL_SI4_0:2;            /* Analog Watchdog Selection */
    vuint32_t _unused_18:2;
    vuint32_t WSEL_SI5_0:2;            /* Analog Watchdog Selection */
    vuint32_t _unused_22:2;
    vuint32_t WSEL_SI6_0:2;            /* Analog Watchdog Selection */
    vuint32_t _unused_26:2;
    vuint32_t WSEL_SI7_0:2;            /* Analog Watchdog Selection */
    vuint32_t _unused_30:2;
  } B;
} ADC_CWSELRSI_tag;

typedef union ADC_CWSELREI_union_tag { /* Channel Analog Watchdog Select for Standard Inputs */
  vuint32_t R;
  struct {
    vuint32_t WSEL_SI0_0:2;            /* Analog Watchdog Selection */
    vuint32_t _unused_2:2;
    vuint32_t WSEL_SI1_0:2;            /* Analog Watchdog Selection */
    vuint32_t _unused_6:2;
    vuint32_t WSEL_SI2_0:2;            /* Analog Watchdog Selection */
    vuint32_t _unused_10:2;
    vuint32_t WSEL_SI3_0:2;            /* Analog Watchdog Selection */
    vuint32_t _unused_14:2;
    vuint32_t WSEL_SI4_0:2;            /* Analog Watchdog Selection */
    vuint32_t _unused_18:2;
    vuint32_t WSEL_SI5_0:2;            /* Analog Watchdog Selection */
    vuint32_t _unused_22:2;
    vuint32_t WSEL_SI6_0:2;            /* Analog Watchdog Selection */
    vuint32_t _unused_26:2;
    vuint32_t WSEL_SI7_0:2;            /* Analog Watchdog Selection */
    vuint32_t _unused_30:2;
  } B;
} ADC_CWSELREI_tag;

typedef union ADC_CWENR0_union_tag {   /* Channel Watchdog Enable for Precision Inputs */
  vuint32_t R;
  struct {
    vuint32_t CWEN0:1;                 /* Channel Analog Watchdog Enable */
    vuint32_t CWEN1:1;                 /* Channel Analog Watchdog Enable */
    vuint32_t CWEN2:1;                 /* Channel Analog Watchdog Enable */
    vuint32_t CWEN3:1;                 /* Channel Analog Watchdog Enable */
    vuint32_t CWEN4:1;                 /* Channel Analog Watchdog Enable */
    vuint32_t CWEN5:1;                 /* Channel Analog Watchdog Enable */
    vuint32_t CWEN6:1;                 /* Channel Analog Watchdog Enable */
    vuint32_t CWEN7:1;                 /* Channel Analog Watchdog Enable */
    vuint32_t CWEN8:1;                 /* Channel Analog Watchdog Enable */
    vuint32_t CWEN9:1;                 /* Channel Analog Watchdog Enable */
    vuint32_t _unused_10:22;
  } B;
} ADC_CWENR0_tag;

typedef union ADC_CWENR1_union_tag {   /* Channel Watchdog Enable for Standard Inputs */
  vuint32_t R;
  struct {
    vuint32_t CWEN32:1;                /* Channel Analog Watchdog Enable for Standard Inputs */
    vuint32_t CWEN33:1;                /* Channel Analog Watchdog Enable for Standard Inputs */
    vuint32_t CWEN34:1;                /* Channel Analog Watchdog Enable for Standard Inputs */
    vuint32_t CWEN35:1;                /* Channel Analog Watchdog Enable for Standard Inputs */
    vuint32_t CWEN36:1;                /* Channel Analog Watchdog Enable for Standard Inputs */
    vuint32_t CWEN37:1;                /* Channel Analog Watchdog Enable for Standard Inputs */
    vuint32_t CWEN38:1;                /* Channel Analog Watchdog Enable for Standard Inputs */
    vuint32_t CWEN39:1;                /* Channel Analog Watchdog Enable for Standard Inputs */
    vuint32_t CWEN40:1;                /* Channel Analog Watchdog Enable for Standard Inputs */
    vuint32_t CWEN41:1;                /* Channel Analog Watchdog Enable for Standard Inputs */
    vuint32_t CWEN42:1;                /* Channel Analog Watchdog Enable for Standard Inputs */
    vuint32_t CWEN43:1;                /* Channel Analog Watchdog Enable for Standard Inputs */
    vuint32_t CWEN44:1;                /* Channel Analog Watchdog Enable for Standard Inputs */
    vuint32_t CWEN45:1;                /* Channel Analog Watchdog Enable for Standard Inputs */
    vuint32_t CWEN46:1;                /* Channel Analog Watchdog Enable for Standard Inputs */
    vuint32_t CWEN47:1;                /* Channel Analog Watchdog Enable for Standard Inputs */
    vuint32_t CWEN48:1;                /* Channel Analog Watchdog Enable for Standard Inputs */
    vuint32_t CWEN49:1;                /* Channel Analog Watchdog Enable for Standard Inputs */
    vuint32_t CWEN50:1;                /* Channel Analog Watchdog Enable for Standard Inputs */
    vuint32_t CWEN51:1;                /* Channel Analog Watchdog Enable for Standard Inputs */
    vuint32_t CWEN52:1;                /* Channel Analog Watchdog Enable for Standard Inputs */
    vuint32_t CWEN53:1;                /* Channel Analog Watchdog Enable for Standard Inputs */
    vuint32_t CWEN54:1;                /* Channel Analog Watchdog Enable for Standard Inputs */
    vuint32_t CWEN55:1;                /* Channel Analog Watchdog Enable for Standard Inputs */
    vuint32_t _unused_24:8;
  } B;
} ADC_CWENR1_tag;

typedef union ADC_CWENR2_union_tag {   /* Channel Watchdog Enable for External Inputs */
  vuint32_t R;
  struct {
    vuint32_t CWEN64:1;                /* Channel Analog Watchdog Enable for External Inputs */
    vuint32_t CWEN65:1;                /* Channel Analog Watchdog Enable for External Inputs */
    vuint32_t CWEN66:1;                /* Channel Analog Watchdog Enable for External Inputs */
    vuint32_t CWEN67:1;                /* Channel Analog Watchdog Enable for External Inputs */
    vuint32_t CWEN68:1;                /* Channel Analog Watchdog Enable for External Inputs */
    vuint32_t CWEN69:1;                /* Channel Analog Watchdog Enable for External Inputs */
    vuint32_t CWEN70:1;                /* Channel Analog Watchdog Enable for External Inputs */
    vuint32_t CWEN71:1;                /* Channel Analog Watchdog Enable for External Inputs */
    vuint32_t CWEN72:1;                /* Channel Analog Watchdog Enable for External Inputs */
    vuint32_t CWEN73:1;                /* Channel Analog Watchdog Enable for External Inputs */
    vuint32_t CWEN74:1;                /* Channel Analog Watchdog Enable for External Inputs */
    vuint32_t CWEN75:1;                /* Channel Analog Watchdog Enable for External Inputs */
    vuint32_t CWEN76:1;                /* Channel Analog Watchdog Enable for External Inputs */
    vuint32_t CWEN77:1;                /* Channel Analog Watchdog Enable for External Inputs */
    vuint32_t CWEN78:1;                /* Channel Analog Watchdog Enable for External Inputs */
    vuint32_t CWEN79:1;                /* Channel Analog Watchdog Enable for External Inputs */
    vuint32_t CWEN80:1;                /* Channel Analog Watchdog Enable for External Inputs */
    vuint32_t CWEN81:1;                /* Channel Analog Watchdog Enable for External Inputs */
    vuint32_t CWEN82:1;                /* Channel Analog Watchdog Enable for External Inputs */
    vuint32_t CWEN83:1;                /* Channel Analog Watchdog Enable for External Inputs */
    vuint32_t CWEN84:1;                /* Channel Analog Watchdog Enable for External Inputs */
    vuint32_t CWEN85:1;                /* Channel Analog Watchdog Enable for External Inputs */
    vuint32_t CWEN86:1;                /* Channel Analog Watchdog Enable for External Inputs */
    vuint32_t CWEN87:1;                /* Channel Analog Watchdog Enable for External Inputs */
    vuint32_t CWEN88:1;                /* Channel Analog Watchdog Enable for External Inputs */
    vuint32_t CWEN89:1;                /* Channel Analog Watchdog Enable for External Inputs */
    vuint32_t CWEN90:1;                /* Channel Analog Watchdog Enable for External Inputs */
    vuint32_t CWEN91:1;                /* Channel Analog Watchdog Enable for External Inputs */
    vuint32_t CWEN92:1;                /* Channel Analog Watchdog Enable for External Inputs */
    vuint32_t CWEN93:1;                /* Channel Analog Watchdog Enable for External Inputs */
    vuint32_t CWEN94:1;                /* Channel Analog Watchdog Enable for External Inputs */
    vuint32_t CWEN95:1;                /* Channel Analog Watchdog Enable for External Inputs */
  } B;
} ADC_CWENR2_tag;

typedef union ADC_AWORR0_union_tag {   /* Analog Watchdog Out of Range for Precision Inputs */
  vuint32_t R;
  struct {
    vuint32_t AWOR_CH0:1;              /* Analog Watchdog Out of Range for Precision Inputs */
    vuint32_t AWOR_CH1:1;              /* Analog Watchdog Out of Range for Precision Inputs */
    vuint32_t AWOR_CH2:1;              /* Analog Watchdog Out of Range for Precision Inputs */
    vuint32_t AWOR_CH3:1;              /* Analog Watchdog Out of Range for Precision Inputs */
    vuint32_t AWOR_CH4:1;              /* Analog Watchdog Out of Range for Precision Inputs */
    vuint32_t AWOR_CH5:1;              /* Analog Watchdog Out of Range for Precision Inputs */
    vuint32_t AWOR_CH6:1;              /* Analog Watchdog Out of Range for Precision Inputs */
    vuint32_t AWOR_CH7:1;              /* Analog Watchdog Out of Range for Precision Inputs */
    vuint32_t AWOR_CH8:1;              /* Analog Watchdog Out of Range for Precision Inputs */
    vuint32_t AWOR_CH9:1;              /* Analog Watchdog Out of Range for Precision Inputs */
    vuint32_t _unused_10:22;
  } B;
} ADC_AWORR0_tag;

typedef union ADC_AWORR1_union_tag {   /* Analog Watchdog Out of Range for Standard Inputs */
  vuint32_t R;
  struct {
    vuint32_t AWOR_CH0:1;              /* Analog Watchdog Out of Range for Standard Inputs */
    vuint32_t AWOR_CH1:1;              /* Analog Watchdog Out of Range for Standard Inputs */
    vuint32_t AWOR_CH2:1;              /* Analog Watchdog Out of Range for Standard Inputs */
    vuint32_t AWOR_CH3:1;              /* Analog Watchdog Out of Range for Standard Inputs */
    vuint32_t AWOR_CH4:1;              /* Analog Watchdog Out of Range for Standard Inputs */
    vuint32_t AWOR_CH5:1;              /* Analog Watchdog Out of Range for Standard Inputs */
    vuint32_t AWOR_CH6:1;              /* Analog Watchdog Out of Range for Standard Inputs */
    vuint32_t AWOR_CH7:1;              /* Analog Watchdog Out of Range for Standard Inputs */
    vuint32_t AWOR_CH8:1;              /* Analog Watchdog Out of Range for Standard Inputs */
    vuint32_t AWOR_CH9:1;              /* Analog Watchdog Out of Range for Standard Inputs */
    vuint32_t AWOR_CH10:1;             /* Analog Watchdog Out of Range for Standard Inputs */
    vuint32_t AWOR_CH11:1;             /* Analog Watchdog Out of Range for Standard Inputs */
    vuint32_t AWOR_CH12:1;             /* Analog Watchdog Out of Range for Standard Inputs */
    vuint32_t AWOR_CH13:1;             /* Analog Watchdog Out of Range for Standard Inputs */
    vuint32_t AWOR_CH14:1;             /* Analog Watchdog Out of Range for Standard Inputs */
    vuint32_t AWOR_CH15:1;             /* Analog Watchdog Out of Range for Standard Inputs */
    vuint32_t AWOR_CH16:1;             /* Analog Watchdog Out of Range for Standard Inputs */
    vuint32_t AWOR_CH17:1;             /* Analog Watchdog Out of Range for Standard Inputs */
    vuint32_t AWOR_CH18:1;             /* Analog Watchdog Out of Range for Standard Inputs */
    vuint32_t AWOR_CH19:1;             /* Analog Watchdog Out of Range for Standard Inputs */
    vuint32_t AWOR_CH20:1;             /* Analog Watchdog Out of Range for Standard Inputs */
    vuint32_t AWOR_CH21:1;             /* Analog Watchdog Out of Range for Standard Inputs */
    vuint32_t AWOR_CH22:1;             /* Analog Watchdog Out of Range for Standard Inputs */
    vuint32_t AWOR_CH23:1;             /* Analog Watchdog Out of Range for Standard Inputs */
    vuint32_t AWOR_CH24:1;             /* Analog Watchdog Out of Range for Standard Inputs */
    vuint32_t AWOR_CH25:1;             /* Analog Watchdog Out of Range for Standard Inputs */
    vuint32_t AWOR_CH26:1;             /* Analog Watchdog Out of Range for Standard Inputs */
    vuint32_t AWOR_CH27:1;             /* Analog Watchdog Out of Range for Standard Inputs */
    vuint32_t AWOR_CH28:1;             /* Analog Watchdog Out of Range for Standard Inputs */
    vuint32_t AWOR_CH29:1;             /* Analog Watchdog Out of Range for Standard Inputs */
    vuint32_t AWOR_CH30:1;             /* Analog Watchdog Out of Range for Standard Inputs */
    vuint32_t AWOR_CH31:1;             /* Analog Watchdog Out of Range for Standard Inputs */
  } B;
} ADC_AWORR1_tag;

typedef union ADC_AWORR2_union_tag {   /* Analog Watchdog Out of Range for External Inputs */
  vuint32_t R;
  struct {
    vuint32_t AWOR_CH0:1;              /* Analog Watchdog Out of Range for External Inputs */
    vuint32_t AWOR_CH1:1;              /* Analog Watchdog Out of Range for External Inputs */
    vuint32_t AWOR_CH2:1;              /* Analog Watchdog Out of Range for External Inputs */
    vuint32_t AWOR_CH3:1;              /* Analog Watchdog Out of Range for External Inputs */
    vuint32_t AWOR_CH4:1;              /* Analog Watchdog Out of Range for External Inputs */
    vuint32_t AWOR_CH5:1;              /* Analog Watchdog Out of Range for External Inputs */
    vuint32_t AWOR_CH6:1;              /* Analog Watchdog Out of Range for External Inputs */
    vuint32_t AWOR_CH7:1;              /* Analog Watchdog Out of Range for External Inputs */
    vuint32_t AWOR_CH8:1;              /* Analog Watchdog Out of Range for External Inputs */
    vuint32_t AWOR_CH9:1;              /* Analog Watchdog Out of Range for External Inputs */
    vuint32_t AWOR_CH10:1;             /* Analog Watchdog Out of Range for External Inputs */
    vuint32_t AWOR_CH11:1;             /* Analog Watchdog Out of Range for External Inputs */
    vuint32_t AWOR_CH12:1;             /* Analog Watchdog Out of Range for External Inputs */
    vuint32_t AWOR_CH13:1;             /* Analog Watchdog Out of Range for External Inputs */
    vuint32_t AWOR_CH14:1;             /* Analog Watchdog Out of Range for External Inputs */
    vuint32_t AWOR_CH15:1;             /* Analog Watchdog Out of Range for External Inputs */
    vuint32_t AWOR_CH16:1;             /* Analog Watchdog Out of Range for External Inputs */
    vuint32_t AWOR_CH17:1;             /* Analog Watchdog Out of Range for External Inputs */
    vuint32_t AWOR_CH18:1;             /* Analog Watchdog Out of Range for External Inputs */
    vuint32_t AWOR_CH19:1;             /* Analog Watchdog Out of Range for External Inputs */
    vuint32_t AWOR_CH20:1;             /* Analog Watchdog Out of Range for External Inputs */
    vuint32_t AWOR_CH21:1;             /* Analog Watchdog Out of Range for External Inputs */
    vuint32_t AWOR_CH22:1;             /* Analog Watchdog Out of Range for External Inputs */
    vuint32_t AWOR_CH23:1;             /* Analog Watchdog Out of Range for External Inputs */
    vuint32_t AWOR_CH24:1;             /* Analog Watchdog Out of Range for External Inputs */
    vuint32_t AWOR_CH25:1;             /* Analog Watchdog Out of Range for External Inputs */
    vuint32_t AWOR_CH26:1;             /* Analog Watchdog Out of Range for External Inputs */
    vuint32_t AWOR_CH27:1;             /* Analog Watchdog Out of Range for External Inputs */
    vuint32_t AWOR_CH28:1;             /* Analog Watchdog Out of Range for External Inputs */
    vuint32_t AWOR_CH29:1;             /* Analog Watchdog Out of Range for External Inputs */
    vuint32_t AWOR_CH30:1;             /* Analog Watchdog Out of Range for External Inputs */
    vuint32_t AWOR_CH31:1;             /* Analog Watchdog Out of Range for External Inputs */
  } B;
} ADC_AWORR2_tag;

typedef union ADC_STCR1_union_tag {    /* Self-Test Configuration 1 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:8;             /* Reserved */
    vuint32_t INPSAMP_S:8;             /* Input Sampling Time Algorithm S */
    vuint32_t _unused_16:8;            /* Reserved */
    vuint32_t INPSAMP_C:8;             /* Input Sampling Time Algorithm C */
  } B;
} ADC_STCR1_tag;

typedef union ADC_STCR2_union_tag {    /* Self-Test Configuration 2 */
  vuint32_t R;
  struct {
    vuint32_t FMA_S:1;                 /* Fault Mapping Algorithm S */
    vuint32_t _unused_1:1;
    vuint32_t FMA_C:1;                 /* Fault Mapping Algorithm C */
    vuint32_t FMA_WDTERR:1;            /* Fault Mapping Self-Test Watchdog Timer Error */
    vuint32_t FMA_WDSERR:1;            /* Fault Mapping Self-Test Watchdog Sequence Error */
    vuint32_t _unused_5:2;
    vuint32_t EN:1;                    /* Self-Test Enable */
    vuint32_t _unused_8:3;
    vuint32_t MSKERR_S0:1;             /* Mask Error Interrupt Algorithm S0 */
    vuint32_t MSKERR_S1:1;             /* Mask Error Interrupt Algorithm S1 */
    vuint32_t MSKERR_S2:1;             /* Mask Error Interrupt Algorithm S2 */
    vuint32_t _unused_14:1;
    vuint32_t MSKERR_C:1;              /* Mask Error Interrupt Algorithm C */
    vuint32_t MSKWDG_EOA_S:1;          /* Mask Error Interrupt End of Algorithm S */
    vuint32_t _unused_17:1;
    vuint32_t MSKWDG_EOA_C:1;          /* Mask Error Interrupt End of Algorithm C */
    vuint32_t _unused_19:4;
    vuint32_t MSKST_EOC:1;             /* Mask Interrupt Self-Test End of Conversion */
    vuint32_t _unused_24:1;
    vuint32_t MSKWDTERR:1;             /* Mask Interrupt Self-Test Watchdog Timer Error */
    vuint32_t SERR:1;                  /* Self-Test Error Injection */
    vuint32_t MSKWDSERR:1;             /* Mask Interrupt Self-Test Watchdog Sequence Error */
    vuint32_t _unused_28:4;
  } B;
} ADC_STCR2_tag;

typedef union ADC_STCR3_union_tag {    /* Self-Test Configuration 3 */
  vuint32_t R;
  struct {
    vuint32_t MSTEP:5;                 /* Algorithm Step */
    vuint32_t _unused_5:3;             /* Reserved */
    vuint32_t ALG:2;                   /* Algorithm Selection */
    vuint32_t _unused_10:22;           /* Reserved */
  } B;
} ADC_STCR3_tag;

typedef union ADC_STBRR_union_tag {    /* Self-Test Baud Rate */
  vuint32_t R;
  struct {
    vuint32_t BR:8;                    /* Baud Rate */
    vuint32_t _unused_8:8;
    vuint32_t WDT:3;                   /* Self-Test Watchdog Timer */
    vuint32_t _unused_19:13;
  } B;
} ADC_STBRR_tag;

typedef union ADC_STSR1_union_tag {    /* Self-Test Status 1 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:5;
    vuint32_t STEP_C:5;                /* Step of Algorithm C */
    vuint32_t _unused_10:1;
    vuint32_t ERR_S0:1;                /* Error Algorithm S Step 0 */
    vuint32_t ERR_S1:1;                /* Error Algorithm S Step 1 */
    vuint32_t ERR_S2:1;                /* Error Algorithm S Step 2 */
    vuint32_t _unused_14:1;
    vuint32_t ERR_C:1;                 /* Error Algorithm C */
    vuint32_t WDG_EOA_S:1;             /* Self-Test Watchdog End of Algorithm S */
    vuint32_t _unused_17:1;
    vuint32_t WDG_EOA_C:1;             /* Self-Test Watchdog End of Algorithm C */
    vuint32_t _unused_19:4;
    vuint32_t ST_EOC:1;                /* Self-Test End of Conversion */
    vuint32_t OVERWR:1;                /* Self-Test Error Status Overwrite */
    vuint32_t WDTERR:1;                /* Self-Test Watchdog Timer Error */
    vuint32_t _unused_26:1;
    vuint32_t WDSERR:1;                /* Self-Test Watchdog Sequence Error */
    vuint32_t _unused_28:4;
  } B;
} ADC_STSR1_tag;

typedef union ADC_STSR2_union_tag {    /* Self-Test Status 2 */
  vuint32_t R;
  struct {
    vuint32_t DATA0:15;                /* Conversion Data ERR_S1 */
    vuint32_t _unused_15:1;
    vuint32_t _unused_16:16;
  } B;
} ADC_STSR2_tag;

typedef union ADC_STSR3_union_tag {    /* Self-Test Status 3 */
  vuint32_t R;
  struct {
    vuint32_t DATA0:15;                /* Conversion Data ERR_S0 */
    vuint32_t _unused_15:1;
    vuint32_t DATA1:15;                /* Conversion Data ERR_S2 */
    vuint32_t _unused_31:1;
  } B;
} ADC_STSR3_tag;

typedef union ADC_STSR4_union_tag {    /* Self-Test Status 4 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t DATA1:15;                /* Conversion Data ERR_C */
    vuint32_t _unused_31:1;
  } B;
} ADC_STSR4_tag;

typedef union ADC_STDR1_union_tag {    /* Self-Test Conversion Data 1 */
  vuint32_t R;
  struct {
    vuint32_t TCDATA:15;               /* Test Channel Conversion Data */
    vuint32_t _unused_15:1;
    vuint32_t _unused_16:2;
    vuint32_t OWERWR:1;                /* Conversion Data Overwrite Status */
    vuint32_t VALID:1;                 /* Valid Conversion Data */
    vuint32_t _unused_20:12;
  } B;
} ADC_STDR1_tag;

typedef union ADC_STAW0R_union_tag {   /* Self-Test Analog Watchdog S0 */
  vuint32_t R;
  struct {
    vuint32_t THRL:15;                 /* Lower Threshold Value */
    vuint32_t _unused_15:1;
    vuint32_t THRH:14;                 /* Higher Threshold Value */
    vuint32_t WDTE:1;                  /* Self-Test Watchdog Timer Enable */
    vuint32_t AWDE:1;                  /* Self-Test Watchdog Enable */
  } B;
} ADC_STAW0R_tag;

typedef union ADC_STAW1R_union_tag {   /* Self Test Analog Watchdog S1 */
  vuint32_t R;
  struct {
    vuint32_t THRL:15;                 /* Lower Threshold Value */
    vuint32_t _unused_15:1;
    vuint32_t _unused_16:15;
    vuint32_t AWDE:1;                  /* Self-Test Watchdog Enable */
  } B;
} ADC_STAW1R_tag;

typedef union ADC_STAW2R_union_tag {   /* Self-Test Analog Watchdog S2 */
  vuint32_t R;
  struct {
    vuint32_t THRL:15;                 /* Lower Threshold Value */
    vuint32_t _unused_15:1;
    vuint32_t _unused_16:15;
    vuint32_t AWDE:1;                  /* Self-Test Watchdog Enable */
  } B;
} ADC_STAW2R_tag;

typedef union ADC_STAW4R_union_tag {   /* Self-Test Analog Watchdog C0 */
  vuint32_t R;
  struct {
    vuint32_t THRL:15;                 /* Lower Threshold Value */
    vuint32_t _unused_15:1;
    vuint32_t THRH:14;                 /* Higher Threshold Value */
    vuint32_t WDTE:1;                  /* Self-Test Watchdog Timer Enable */
    vuint32_t AWDE:1;                  /* Self-Test Watchdog Enable */
  } B;
} ADC_STAW4R_tag;

typedef union ADC_STAW5R_union_tag {   /* Self-Test Analog Watchdog C */
  vuint32_t R;
  struct {
    vuint32_t THRL:15;                 /* Lower Threshold Value */
    vuint32_t _unused_15:1;
    vuint32_t THRH:15;                 /* Higher Threshold Value */
    vuint32_t _unused_31:1;
  } B;
} ADC_STAW5R_tag;

typedef union ADC_CALBISTREG_union_tag { /* Control and Calibration Status */
  vuint32_t R;
  struct {
    vuint32_t TEST_EN:1;               /* Calibration Enable */
    vuint32_t _unused_1:2;
    vuint32_t TEST_FAIL:1;             /* Calibration Status */
    vuint32_t AVG_EN:1;                /* Calibration Averaging Enable */
    vuint32_t NR_SMPL:2;               /* Calibration Averaging Number */
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t _unused_8:6;             /* Reserved */
    vuint32_t CALSTFUL:1;              /* Calibration and Self-test Full Range Comparison */
    vuint32_t C_T_BUSY:1;              /* Calibration Busy */
    vuint32_t _unused_16:11;           /* Reserved */
    vuint32_t TSAMP:2;                 /* Sample Period in Calibration */
    vuint32_t RESN:3;                  /* Conversion Resolution */
  } B;
} ADC_CALBISTREG_tag;

typedef union ADC_OFSGNUSR_union_tag { /* Offset and Gain User */
  vuint32_t R;
  struct {
    vuint32_t OFFSET_USER:8;           /* Offset User */
    vuint32_t _unused_8:8;
    vuint32_t GAIN_USER:10;            /* Gain User */
    vuint32_t _unused_26:6;
  } B;
} ADC_OFSGNUSR_tag;

struct ADC_tag {
  ADC_MCR_tag MCR;                     /* Main Configuration */
  ADC_MSR_tag MSR;                     /* Main Status */
  uint8_t ADC_reserved0[8];
  ADC_ISR_tag ISR;                     /* Interrupt Status */
  ADC_CEOCFR0_tag CEOCFR0;             /* Channel End of Conversion Flag for Precision Inputs */
  ADC_CEOCFR1_tag CEOCFR1;             /* Channel End of Conversion Flag for Standard Inputs */
  ADC_CEOCFR2_tag CEOCFR2;             /* Channel End of Conversion Flag for External Inputs */
  ADC_IMR_tag IMR;                     /* Interrupt Mask */
  ADC_CIMR0_tag CIMR0;                 /* EOC Interrupt Enable for Precision Inputs */
  ADC_CIMR1_tag CIMR1;                 /* EOC Interrupt Enable for Standard Inputs */
  ADC_CIMR2_tag CIMR2;                 /* EOC Interrupt Enable for External Inputs */
  ADC_WTISR_tag WTISR;                 /* Analog Watchdog Threshold Interrupt Status */
  ADC_WTIMR_tag WTIMR;                 /* Analog Watchdog Threshold Interrupt Enable */
  uint8_t ADC_reserved1[8];
  ADC_DMAE_tag DMAE;                   /* Direct Memory Access Configuration */
  ADC_DMAR0_tag DMAR0;                 /* DMA Request Enable for Precision Inputs */
  ADC_DMAR1_tag DMAR1;                 /* DMA Request Enable for Standard Inputs */
  ADC_DMAR2_tag DMAR2;                 /* DMA Request Enable for External Inputs */
  uint8_t ADC_reserved2[16];
  ADC_THRHLR_tag THRHLR[4];            /* Analog Watchdog Threshold Values */
  uint8_t ADC_reserved3[16];
  ADC_PSCR_tag PSCR;                   /* Presampling Control */
  ADC_PSR0_tag PSR0;                   /* Presampling Enable for Precision Inputs */
  ADC_PSR1_tag PSR1;                   /* Presampling Enable for Standard Inputs */
  ADC_PSR2_tag PSR2;                   /* Presampling Enable for External Inputs */
  uint8_t ADC_reserved4[4];
  ADC_CTR0_tag CTR0;                   /* Conversion Timing for Precision Inputs */
  ADC_CTR1_tag CTR1;                   /* Conversion Timing for Standard Inputs */
  ADC_CTR2_tag CTR2;                   /* Conversion Timing for External Inputs */
  uint8_t ADC_reserved5[4];
  ADC_NCMR0_tag NCMR0;                 /* Normal Conversion Enable for Precision Inputs */
  ADC_NCMR1_tag NCMR1;                 /* Normal Conversion Enable for Standard Inputs */
  ADC_NCMR2_tag NCMR2;                 /* Normal Conversion Enable for External Inputs */
  uint8_t ADC_reserved6[4];
  ADC_JCMR0_tag JCMR0;                 /* Injected Conversion Enable for Precision Inputs */
  ADC_JCMR1_tag JCMR1;                 /* Injected Conversion Enable for Standard Inputs */
  ADC_JCMR2_tag JCMR2;                 /* Injected Conversion Enable for External Inputs */
  uint8_t ADC_reserved7[4];
  ADC_DSDR_tag DSDR;                   /* Delay Start of Data Conversion */
  ADC_PDEDR_tag PDEDR;                 /* Power Down Exit Delay */
  uint8_t ADC_reserved8[52];
  ADC_PCDR_tag PCDR[10];               /* Precision Input n Conversion Data */
  uint8_t ADC_reserved9[88];
  ADC_ICDR_tag ICDR[24];               /* Standard Input n Conversion Data */
  uint8_t ADC_reserved10[32];
  ADC_ECDR_tag ECDR[32];               /* External Input n Conversion Data */
  uint8_t ADC_reserved11[48];
  ADC_CWSELRPI_tag CWSELRPI[2];        /* Channel Analog Watchdog Select for Precision Inputs */
  uint8_t ADC_reserved12[8];
  ADC_CWSELRSI_tag CWSELRSI[3];        /* Channel Analog Watchdog Select for Standard Inputs */
  uint8_t ADC_reserved13[4];
  ADC_CWSELREI_tag CWSELREI[4];        /* Channel Analog Watchdog Select for Standard Inputs */
  ADC_CWENR0_tag CWENR0;               /* Channel Watchdog Enable for Precision Inputs */
  ADC_CWENR1_tag CWENR1;               /* Channel Watchdog Enable for Standard Inputs */
  ADC_CWENR2_tag CWENR2;               /* Channel Watchdog Enable for External Inputs */
  uint8_t ADC_reserved14[4];
  ADC_AWORR0_tag AWORR0;               /* Analog Watchdog Out of Range for Precision Inputs */
  ADC_AWORR1_tag AWORR1;               /* Analog Watchdog Out of Range for Standard Inputs */
  ADC_AWORR2_tag AWORR2;               /* Analog Watchdog Out of Range for External Inputs */
  uint8_t ADC_reserved15[68];
  ADC_STCR1_tag STCR1;                 /* Self-Test Configuration 1 */
  ADC_STCR2_tag STCR2;                 /* Self-Test Configuration 2 */
  ADC_STCR3_tag STCR3;                 /* Self-Test Configuration 3 */
  ADC_STBRR_tag STBRR;                 /* Self-Test Baud Rate */
  ADC_STSR1_tag STSR1;                 /* Self-Test Status 1 */
  ADC_STSR2_tag STSR2;                 /* Self-Test Status 2 */
  ADC_STSR3_tag STSR3;                 /* Self-Test Status 3 */
  ADC_STSR4_tag STSR4;                 /* Self-Test Status 4 */
  uint8_t ADC_reserved16[16];
  ADC_STDR1_tag STDR1;                 /* Self-Test Conversion Data 1 */
  uint8_t ADC_reserved17[12];
  ADC_STAW0R_tag STAW0R;               /* Self-Test Analog Watchdog S0 */
  uint8_t ADC_reserved18[4];
  ADC_STAW1R_tag STAW1R;               /* Self Test Analog Watchdog S1 */
  ADC_STAW2R_tag STAW2R;               /* Self-Test Analog Watchdog S2 */
  uint8_t ADC_reserved19[4];
  ADC_STAW4R_tag STAW4R;               /* Self-Test Analog Watchdog C0 */
  ADC_STAW5R_tag STAW5R;               /* Self-Test Analog Watchdog C */
  uint8_t ADC_reserved20[4];
  ADC_CALBISTREG_tag CALBISTREG;       /* Control and Calibration Status */
  uint8_t ADC_reserved21[4];
  ADC_OFSGNUSR_tag OFSGNUSR;           /* Offset and Gain User */
};


/* ============================================================================
   =============================== Module: AXBS_LITE ==========================
   ============================================================================ */

typedef union AXBS_LITE_PRS0_union_tag { /* Priority Slave Registers */
  vuint32_t R;
  struct {
    vuint32_t M0:3;                    /* Master 0 Priority */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t M1:3;                    /* Master 1 Priority */
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t M2:3;                    /* Master 2 Priority */
    vuint32_t _unused_11:1;            /* Reserved */
    vuint32_t M3:3;                    /* Master 3 Priority */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t M4:3;                    /* Master 4 Priority */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t _unused_20:3;            /* Reserved */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t _unused_24:3;            /* Reserved */
    vuint32_t _unused_27:1;            /* Reserved */
    vuint32_t _unused_28:3;            /* Reserved */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} AXBS_LITE_PRS0_tag;

typedef union AXBS_LITE_CRS0_union_tag { /* Control Register */
  vuint32_t R;
  struct {
    vuint32_t PARK:3;                  /* Park */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t PCTL:2;                  /* Parking Control */
    vuint32_t _unused_6:2;             /* Reserved */
    vuint32_t ARB:2;                   /* Arbitration Mode */
    vuint32_t _unused_10:6;            /* Reserved */
    vuint32_t HPE0:1;                  /* High Priority Elevation 0 */
    vuint32_t HPE1:1;                  /* High Priority Elevation 1 */
    vuint32_t HPE2:1;                  /* High Priority Elevation 2 */
    vuint32_t HPE3:1;                  /* High Priority Elevation 3 */
    vuint32_t HPE4:1;                  /* High Priority Elevation 4 */
    vuint32_t _unused_21:1;            /* Reserved */
    vuint32_t _unused_22:1;            /* Reserved */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t _unused_24:6;            /* Reserved */
    vuint32_t HLP:1;                   /* Halt Low Priority */
    vuint32_t RO:1;                    /* Read Only */
  } B;
} AXBS_LITE_CRS0_tag;

typedef union AXBS_LITE_PRS1_union_tag { /* Priority Slave Registers */
  vuint32_t R;
  struct {
    vuint32_t M0:3;                    /* Master 0 Priority */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t M1:3;                    /* Master 1 Priority */
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t M2:3;                    /* Master 2 Priority */
    vuint32_t _unused_11:1;            /* Reserved */
    vuint32_t M3:3;                    /* Master 3 Priority */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t M4:3;                    /* Master 4 Priority */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t _unused_20:3;            /* Reserved */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t _unused_24:3;            /* Reserved */
    vuint32_t _unused_27:1;            /* Reserved */
    vuint32_t _unused_28:3;            /* Reserved */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} AXBS_LITE_PRS1_tag;

typedef union AXBS_LITE_CRS1_union_tag { /* Control Register */
  vuint32_t R;
  struct {
    vuint32_t PARK:3;                  /* Park */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t PCTL:2;                  /* Parking Control */
    vuint32_t _unused_6:2;             /* Reserved */
    vuint32_t ARB:2;                   /* Arbitration Mode */
    vuint32_t _unused_10:6;            /* Reserved */
    vuint32_t HPE0:1;                  /* High Priority Elevation 0 */
    vuint32_t HPE1:1;                  /* High Priority Elevation 1 */
    vuint32_t HPE2:1;                  /* High Priority Elevation 2 */
    vuint32_t HPE3:1;                  /* High Priority Elevation 3 */
    vuint32_t HPE4:1;                  /* High Priority Elevation 4 */
    vuint32_t _unused_21:1;            /* Reserved */
    vuint32_t _unused_22:1;            /* Reserved */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t _unused_24:6;            /* Reserved */
    vuint32_t HLP:1;                   /* Halt Low Priority */
    vuint32_t RO:1;                    /* Read Only */
  } B;
} AXBS_LITE_CRS1_tag;

typedef union AXBS_LITE_PRS2_union_tag { /* Priority Slave Registers */
  vuint32_t R;
  struct {
    vuint32_t M0:3;                    /* Master 0 Priority */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t M1:3;                    /* Master 1 Priority */
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t M2:3;                    /* Master 2 Priority */
    vuint32_t _unused_11:1;            /* Reserved */
    vuint32_t M3:3;                    /* Master 3 Priority */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t M4:3;                    /* Master 4 Priority */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t _unused_20:3;            /* Reserved */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t _unused_24:3;            /* Reserved */
    vuint32_t _unused_27:1;            /* Reserved */
    vuint32_t _unused_28:3;            /* Reserved */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} AXBS_LITE_PRS2_tag;

typedef union AXBS_LITE_CRS2_union_tag { /* Control Register */
  vuint32_t R;
  struct {
    vuint32_t PARK:3;                  /* Park */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t PCTL:2;                  /* Parking Control */
    vuint32_t _unused_6:2;             /* Reserved */
    vuint32_t ARB:2;                   /* Arbitration Mode */
    vuint32_t _unused_10:6;            /* Reserved */
    vuint32_t HPE0:1;                  /* High Priority Elevation 0 */
    vuint32_t HPE1:1;                  /* High Priority Elevation 1 */
    vuint32_t HPE2:1;                  /* High Priority Elevation 2 */
    vuint32_t HPE3:1;                  /* High Priority Elevation 3 */
    vuint32_t HPE4:1;                  /* High Priority Elevation 4 */
    vuint32_t _unused_21:1;            /* Reserved */
    vuint32_t _unused_22:1;            /* Reserved */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t _unused_24:6;            /* Reserved */
    vuint32_t HLP:1;                   /* Halt Low Priority */
    vuint32_t RO:1;                    /* Read Only */
  } B;
} AXBS_LITE_CRS2_tag;

typedef union AXBS_LITE_PRS3_union_tag { /* Priority Slave Registers */
  vuint32_t R;
  struct {
    vuint32_t M0:3;                    /* Master 0 Priority */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t M1:3;                    /* Master 1 Priority */
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t M2:3;                    /* Master 2 Priority */
    vuint32_t _unused_11:1;            /* Reserved */
    vuint32_t M3:3;                    /* Master 3 Priority */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t M4:3;                    /* Master 4 Priority */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t _unused_20:3;            /* Reserved */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t _unused_24:3;            /* Reserved */
    vuint32_t _unused_27:1;            /* Reserved */
    vuint32_t _unused_28:3;            /* Reserved */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} AXBS_LITE_PRS3_tag;

typedef union AXBS_LITE_CRS3_union_tag { /* Control Register */
  vuint32_t R;
  struct {
    vuint32_t PARK:3;                  /* Park */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t PCTL:2;                  /* Parking Control */
    vuint32_t _unused_6:2;             /* Reserved */
    vuint32_t ARB:2;                   /* Arbitration Mode */
    vuint32_t _unused_10:6;            /* Reserved */
    vuint32_t HPE0:1;                  /* High Priority Elevation 0 */
    vuint32_t HPE1:1;                  /* High Priority Elevation 1 */
    vuint32_t HPE2:1;                  /* High Priority Elevation 2 */
    vuint32_t HPE3:1;                  /* High Priority Elevation 3 */
    vuint32_t HPE4:1;                  /* High Priority Elevation 4 */
    vuint32_t _unused_21:1;            /* Reserved */
    vuint32_t _unused_22:1;            /* Reserved */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t _unused_24:6;            /* Reserved */
    vuint32_t HLP:1;                   /* Halt Low Priority */
    vuint32_t RO:1;                    /* Read Only */
  } B;
} AXBS_LITE_CRS3_tag;

typedef union AXBS_LITE_PRS4_union_tag { /* Priority Slave Registers */
  vuint32_t R;
  struct {
    vuint32_t M0:3;                    /* Master 0 Priority */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t M1:3;                    /* Master 1 Priority */
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t M2:3;                    /* Master 2 Priority */
    vuint32_t _unused_11:1;            /* Reserved */
    vuint32_t M3:3;                    /* Master 3 Priority */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t M4:3;                    /* Master 4 Priority */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t _unused_20:3;            /* Reserved */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t _unused_24:3;            /* Reserved */
    vuint32_t _unused_27:1;            /* Reserved */
    vuint32_t _unused_28:3;            /* Reserved */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} AXBS_LITE_PRS4_tag;

typedef union AXBS_LITE_CRS4_union_tag { /* Control Register */
  vuint32_t R;
  struct {
    vuint32_t PARK:3;                  /* Park */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t PCTL:2;                  /* Parking Control */
    vuint32_t _unused_6:2;             /* Reserved */
    vuint32_t ARB:2;                   /* Arbitration Mode */
    vuint32_t _unused_10:6;            /* Reserved */
    vuint32_t HPE0:1;                  /* High Priority Elevation 0 */
    vuint32_t HPE1:1;                  /* High Priority Elevation 1 */
    vuint32_t HPE2:1;                  /* High Priority Elevation 2 */
    vuint32_t HPE3:1;                  /* High Priority Elevation 3 */
    vuint32_t HPE4:1;                  /* High Priority Elevation 4 */
    vuint32_t _unused_21:1;            /* Reserved */
    vuint32_t _unused_22:1;            /* Reserved */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t _unused_24:6;            /* Reserved */
    vuint32_t HLP:1;                   /* Halt Low Priority */
    vuint32_t RO:1;                    /* Read Only */
  } B;
} AXBS_LITE_CRS4_tag;

typedef union AXBS_LITE_PRS5_union_tag { /* Priority Slave Registers */
  vuint32_t R;
  struct {
    vuint32_t M0:3;                    /* Master 0 Priority */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t M1:3;                    /* Master 1 Priority */
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t M2:3;                    /* Master 2 Priority */
    vuint32_t _unused_11:1;            /* Reserved */
    vuint32_t M3:3;                    /* Master 3 Priority */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t M4:3;                    /* Master 4 Priority */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t _unused_20:3;            /* Reserved */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t _unused_24:3;            /* Reserved */
    vuint32_t _unused_27:1;            /* Reserved */
    vuint32_t _unused_28:3;            /* Reserved */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} AXBS_LITE_PRS5_tag;

typedef union AXBS_LITE_CRS5_union_tag { /* Control Register */
  vuint32_t R;
  struct {
    vuint32_t PARK:3;                  /* Park */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t PCTL:2;                  /* Parking Control */
    vuint32_t _unused_6:2;             /* Reserved */
    vuint32_t ARB:2;                   /* Arbitration Mode */
    vuint32_t _unused_10:6;            /* Reserved */
    vuint32_t HPE0:1;                  /* High Priority Elevation 0 */
    vuint32_t HPE1:1;                  /* High Priority Elevation 1 */
    vuint32_t HPE2:1;                  /* High Priority Elevation 2 */
    vuint32_t HPE3:1;                  /* High Priority Elevation 3 */
    vuint32_t HPE4:1;                  /* High Priority Elevation 4 */
    vuint32_t _unused_21:1;            /* Reserved */
    vuint32_t _unused_22:1;            /* Reserved */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t _unused_24:6;            /* Reserved */
    vuint32_t HLP:1;                   /* Halt Low Priority */
    vuint32_t RO:1;                    /* Read Only */
  } B;
} AXBS_LITE_CRS5_tag;

typedef union AXBS_LITE_PRS6_union_tag { /* Priority Slave Registers */
  vuint32_t R;
  struct {
    vuint32_t M0:3;                    /* Master 0 Priority */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t M1:3;                    /* Master 1 Priority */
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t M2:3;                    /* Master 2 Priority */
    vuint32_t _unused_11:1;            /* Reserved */
    vuint32_t M3:3;                    /* Master 3 Priority */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t M4:3;                    /* Master 4 Priority */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t _unused_20:3;            /* Reserved */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t _unused_24:3;            /* Reserved */
    vuint32_t _unused_27:1;            /* Reserved */
    vuint32_t _unused_28:3;            /* Reserved */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} AXBS_LITE_PRS6_tag;

typedef union AXBS_LITE_CRS6_union_tag { /* Control Register */
  vuint32_t R;
  struct {
    vuint32_t PARK:3;                  /* Park */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t PCTL:2;                  /* Parking Control */
    vuint32_t _unused_6:2;             /* Reserved */
    vuint32_t ARB:2;                   /* Arbitration Mode */
    vuint32_t _unused_10:6;            /* Reserved */
    vuint32_t HPE0:1;                  /* High Priority Elevation 0 */
    vuint32_t HPE1:1;                  /* High Priority Elevation 1 */
    vuint32_t HPE2:1;                  /* High Priority Elevation 2 */
    vuint32_t HPE3:1;                  /* High Priority Elevation 3 */
    vuint32_t HPE4:1;                  /* High Priority Elevation 4 */
    vuint32_t _unused_21:1;            /* Reserved */
    vuint32_t _unused_22:1;            /* Reserved */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t _unused_24:6;            /* Reserved */
    vuint32_t HLP:1;                   /* Halt Low Priority */
    vuint32_t RO:1;                    /* Read Only */
  } B;
} AXBS_LITE_CRS6_tag;

struct AXBS_LITE_tag {
  AXBS_LITE_PRS0_tag PRS0;             /* Priority Slave Registers */
  uint8_t AXBS_LITE_reserved0[12];
  AXBS_LITE_CRS0_tag CRS0;             /* Control Register */
  uint8_t AXBS_LITE_reserved1[236];
  AXBS_LITE_PRS1_tag PRS1;             /* Priority Slave Registers */
  uint8_t AXBS_LITE_reserved2[12];
  AXBS_LITE_CRS1_tag CRS1;             /* Control Register */
  uint8_t AXBS_LITE_reserved3[236];
  AXBS_LITE_PRS2_tag PRS2;             /* Priority Slave Registers */
  uint8_t AXBS_LITE_reserved4[12];
  AXBS_LITE_CRS2_tag CRS2;             /* Control Register */
  uint8_t AXBS_LITE_reserved5[236];
  AXBS_LITE_PRS3_tag PRS3;             /* Priority Slave Registers */
  uint8_t AXBS_LITE_reserved6[12];
  AXBS_LITE_CRS3_tag CRS3;             /* Control Register */
  uint8_t AXBS_LITE_reserved7[236];
  AXBS_LITE_PRS4_tag PRS4;             /* Priority Slave Registers */
  uint8_t AXBS_LITE_reserved8[12];
  AXBS_LITE_CRS4_tag CRS4;             /* Control Register */
  uint8_t AXBS_LITE_reserved9[236];
  AXBS_LITE_PRS5_tag PRS5;             /* Priority Slave Registers */
  uint8_t AXBS_LITE_reserved10[12];
  AXBS_LITE_CRS5_tag CRS5;             /* Control Register */
  uint8_t AXBS_LITE_reserved11[236];
  AXBS_LITE_PRS6_tag PRS6;             /* Priority Slave Registers */
  uint8_t AXBS_LITE_reserved12[12];
  AXBS_LITE_CRS6_tag CRS6;             /* Control Register */
};


/* ============================================================================
   =============================== Module: BCTU ===============================
   ============================================================================ */

typedef union BCTU_MCR_union_tag {     /* Module Configuration */
  vuint32_t R;
  struct {
    vuint32_t IEN0:1;                  /* Interrupt Enable For ADC0DR */
    vuint32_t IEN1:1;                  /* Interrupt Enable For ADC1DR */
    vuint32_t IEN2:1;                  /* Interrupt Enable For ADC2DR */
    vuint32_t _unused_3:2;
    vuint32_t LIST_IEN:1;              /* CL Interrupt Enable */
    vuint32_t _unused_6:1;
    vuint32_t TRGEN:1;                 /* Trigger Interrupt Request Enable */
    vuint32_t _unused_8:8;
    vuint32_t DMA0:1;                  /* Enable ADC0DR DMA */
    vuint32_t DMA1:1;                  /* Enable ADC1DR DMA */
    vuint32_t DMA2:1;                  /* Enable ADC2DR DMA */
    vuint32_t _unused_19:7;
    vuint32_t GTRGEN:1;                /* Global Trigger Enable */
    vuint32_t _unused_27:2;
    vuint32_t FRZ:1;                   /* Debug Freeze */
    vuint32_t MDIS:1;                  /* Module Disable */
    vuint32_t SOFTWARE_RESET:1;        /* Software Reset */
  } B;
} BCTU_MCR_tag;

typedef union BCTU_MSR_union_tag {     /* Module Status */
  vuint32_t R;
  struct {
    vuint32_t NDATA0:1;                /* New Data 0 */
    vuint32_t NDATA1:1;                /* New Data 1 */
    vuint32_t NDATA2:1;                /* New Data 2 */
    vuint32_t _unused_3:1;
    vuint32_t DATAOVR0:1;              /* Data Overrun 0 */
    vuint32_t DATAOVR1:1;              /* Data Overrun 1 */
    vuint32_t DATAOVR2:1;              /* Data Overrun 2 */
    vuint32_t _unused_7:1;
    vuint32_t LIST0_LAST:1;            /* CL 0 Last Conversion */
    vuint32_t LIST1_LAST:1;            /* CL 1 Last Conversion */
    vuint32_t LIST2_LAST:1;            /* CL 2 Last Conversion */
    vuint32_t _unused_11:4;
    vuint32_t TRGF:1;                  /* Trigger Flag */
    vuint32_t NDATA0_CLR:1;            /* New Data Clear */
    vuint32_t NDATA1_CLR:1;            /* New Data Clear */
    vuint32_t NDATA2_CLR:1;            /* New Data Clear */
    vuint32_t _unused_19:1;
    vuint32_t DATAOVR0_CLR:1;          /* DATAOVR0 Clear */
    vuint32_t DATAOVR1_CLR:1;          /* DATAOVR1 Clear */
    vuint32_t DATAOVR2_CLR:1;          /* DATAOVR2 Clear */
    vuint32_t _unused_23:1;
    vuint32_t LIST0_LAST_CLR:1;        /* CL 0 Last Clear */
    vuint32_t LIST1_LAST_CLR:1;        /* CL 1 Last Clear */
    vuint32_t LIST2_LAST_CLR:1;        /* CL 2 Last Clear */
    vuint32_t _unused_27:4;
    vuint32_t TRGF_CLR:1;              /* TRGF Clear */
  } B;
} BCTU_MSR_tag;

typedef union BCTU_TRGCFG_union_tag {  /* Trigger Configuration */
  vuint32_t R;
  struct {
    vuint32_t CHANNEL_VALUE_OR_LADDR:7; /* Channel or CL Address */
    vuint32_t _unused_7:1;
    vuint32_t ADC_SEL0:1;              /* ADC Select 0 */
    vuint32_t ADC_SEL1:1;              /* ADC Select 1 */
    vuint32_t ADC_SEL2:1;              /* ADC Select 2 */
    vuint32_t _unused_11:2;
    vuint32_t TRS:1;                   /* Trigger Resolution */
    vuint32_t TRG_FLAG:1;              /* Trigger Flag */
    vuint32_t TRIGEN:1;                /* Trigger Enable */
    vuint32_t _unused_16:8;
    vuint32_t _unused_24:4;
    vuint32_t DATA_DEST:3;             /* Data Destination */
    vuint32_t LOOP:1;                  /* Loop */
  } B;
} BCTU_TRGCFG_tag;

typedef union BCTU_WRPROT_union_tag {  /* Write Protection */
  vuint32_t R;
  struct {
    vuint32_t PROTEC_CODE:4;           /* Protection Code */
    vuint32_t _unused_4:28;
  } B;
} BCTU_WRPROT_tag;

typedef union BCTU_SFTRGR1_union_tag { /* Software Trigger 1 */
  vuint32_t R;
  struct {
    vuint32_t SFTRG0:1;                /* Software Trigger 0 */
    vuint32_t SFTRG1:1;                /* Software Trigger 1 */
    vuint32_t SFTRG2:1;                /* Software Trigger 2 */
    vuint32_t SFTRG3:1;                /* Software Trigger 3 */
    vuint32_t SFTRG4:1;                /* Software Trigger 4 */
    vuint32_t SFTRG5:1;                /* Software Trigger 5 */
    vuint32_t SFTRG6:1;                /* Software Trigger 6 */
    vuint32_t SFTRG7:1;                /* Software Trigger 7 */
    vuint32_t SFTRG8:1;                /* Software Trigger 8 */
    vuint32_t SFTRG9:1;                /* Software Trigger 9 */
    vuint32_t SFTRG10:1;               /* Software Trigger 10 */
    vuint32_t SFTRG11:1;               /* Software Trigger 11 */
    vuint32_t SFTRG12:1;               /* Software Trigger 12 */
    vuint32_t SFTRG13:1;               /* Software Trigger 13 */
    vuint32_t SFTRG14:1;               /* Software Trigger 14 */
    vuint32_t SFTRG15:1;               /* Software Trigger 15 */
    vuint32_t SFTRG16:1;               /* Software Trigger 16 */
    vuint32_t SFTRG17:1;               /* Software Trigger 17 */
    vuint32_t SFTRG18:1;               /* Software Trigger 18 */
    vuint32_t SFTRG19:1;               /* Software Trigger 19 */
    vuint32_t SFTRG20:1;               /* Software Trigger 20 */
    vuint32_t SFTRG21:1;               /* Software Trigger 21 */
    vuint32_t SFTRG22:1;               /* Software Trigger 22 */
    vuint32_t SFTRG23:1;               /* Software Trigger 23 */
    vuint32_t SFTRG24:1;               /* Software Trigger 24 */
    vuint32_t SFTRG25:1;               /* Software Trigger 25 */
    vuint32_t SFTRG26:1;               /* Software Trigger 26 */
    vuint32_t SFTRG27:1;               /* Software Trigger 27 */
    vuint32_t SFTRG28:1;               /* Software Trigger 28 */
    vuint32_t SFTRG29:1;               /* Software Trigger 29 */
    vuint32_t SFTRG30:1;               /* Software Trigger 30 */
    vuint32_t SFTRG31:1;               /* Software Trigger 31 */
  } B;
} BCTU_SFTRGR1_tag;

typedef union BCTU_SFTRGR2_union_tag { /* Software Trigger 2 */
  vuint32_t R;
  struct {
    vuint32_t SFTRG32:1;               /* Software Trigger 32 */
    vuint32_t SFTRG33:1;               /* Software Trigger 33 */
    vuint32_t SFTRG34:1;               /* Software Trigger 34 */
    vuint32_t SFTRG35:1;               /* Software Trigger 35 */
    vuint32_t SFTRG36:1;               /* Software Trigger 36 */
    vuint32_t SFTRG37:1;               /* Software Trigger 37 */
    vuint32_t SFTRG38:1;               /* Software Trigger 38 */
    vuint32_t SFTRG39:1;               /* Software Trigger 39 */
    vuint32_t SFTRG40:1;               /* Software Trigger 40 */
    vuint32_t SFTRG41:1;               /* Software Trigger 41 */
    vuint32_t SFTRG42:1;               /* Software Trigger 42 */
    vuint32_t SFTRG43:1;               /* Software Trigger 43 */
    vuint32_t SFTRG44:1;               /* Software Trigger 44 */
    vuint32_t SFTRG45:1;               /* Software Trigger 45 */
    vuint32_t SFTRG46:1;               /* Software Trigger 46 */
    vuint32_t SFTRG47:1;               /* Software Trigger 47 */
    vuint32_t SFTRG48:1;               /* Software Trigger 48 */
    vuint32_t SFTRG49:1;               /* Software Trigger 49 */
    vuint32_t SFTRG50:1;               /* Software Trigger 50 */
    vuint32_t SFTRG51:1;               /* Software Trigger 51 */
    vuint32_t SFTRG52:1;               /* Software Trigger 52 */
    vuint32_t SFTRG53:1;               /* Software Trigger 53 */
    vuint32_t SFTRG54:1;               /* Software Trigger 54 */
    vuint32_t SFTRG55:1;               /* Software Trigger 55 */
    vuint32_t SFTRG56:1;               /* Software Trigger 56 */
    vuint32_t SFTRG57:1;               /* Software Trigger 57 */
    vuint32_t SFTRG58:1;               /* Software Trigger 58 */
    vuint32_t SFTRG59:1;               /* Software Trigger 59 */
    vuint32_t SFTRG60:1;               /* Software Trigger 60 */
    vuint32_t SFTRG61:1;               /* Software Trigger 61 */
    vuint32_t SFTRG62:1;               /* Software Trigger 62 */
    vuint32_t SFTRG63:1;               /* Software Trigger 63 */
  } B;
} BCTU_SFTRGR2_tag;

typedef union BCTU_SFTRGR3_union_tag { /* Software Trigger 3 */
  vuint32_t R;
  struct {
    vuint32_t SFTRG64:1;               /* Software Trigger 64 */
    vuint32_t SFTRG65:1;               /* Software Trigger 65 */
    vuint32_t SFTRG66:1;               /* Software Trigger 66 */
    vuint32_t SFTRG67:1;               /* Software Trigger 67 */
    vuint32_t SFTRG68:1;               /* Software Trigger 68 */
    vuint32_t SFTRG69:1;               /* Software Trigger 69 */
    vuint32_t SFTRG70:1;               /* Software Trigger 70 */
    vuint32_t SFTRG71:1;               /* Software Trigger 71 */
    vuint32_t _unused_8:24;
  } B;
} BCTU_SFTRGR3_tag;

typedef union BCTU_ADCDR_union_tag {   /* ADC0 Result Data */
  vuint32_t R;
  struct {
    vuint32_t ADC_DATA:15;             /* ADC Data */
    vuint32_t _unused_15:1;
    vuint32_t LAST:1;                  /* Last */
    vuint32_t LIST:1;                  /* List */
    vuint32_t CH:7;                    /* Channel */
    vuint32_t TRG_SRC:7;               /* Trigger Source */
  } B;
} BCTU_ADCDR_tag;

typedef union BCTU_LISTSTAR_union_tag { /* CL Size Status */
  vuint32_t R;
  struct {
    vuint32_t LISTSZ:8;                /* CL Size */
    vuint32_t _unused_8:24;
  } B;
} BCTU_LISTSTAR_tag;

typedef union BCTU_LISTCHR_union_tag { /* CL Channel Address */
  vuint32_t R;
  struct {
    vuint32_t ADC_CHL_Y_PLUS_1:7;      /* ADC Channel Selection Plus 1 */
    vuint32_t _unused_7:1;
    vuint32_t _unused_8:4;
    vuint32_t _unused_12:2;
    vuint32_t NEXT_CH_WAIT_ON_TRIG_Y_PLUS_1:1; /* Next Channel Wait For Trigger Plus 1 */
    vuint32_t LAST_Y_PLUS_1:1;         /* Last Channel Plus 1 */
    vuint32_t ADC_CH_Y:7;              /* ADC Channel Selection */
    vuint32_t _unused_23:1;
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:2;
    vuint32_t NEXT_CH_WAIT_ON_TRIG_Y:1; /* Next Channel Wait For Trigger */
    vuint32_t LAST_Y:1;                /* Last Channel */
  } B;
} BCTU_LISTCHR_tag;

typedef union BCTU_FIFO1DR_union_tag { /* FIFO1 Result Data */
  vuint32_t R;
  struct {
    vuint32_t ADC_DATA:15;             /* ADC Data */
    vuint32_t _unused_15:1;
    vuint32_t ADC_NUM:2;               /* ADC Number */
    vuint32_t CH:7;                    /* Channel */
    vuint32_t TRG_SRC:7;               /* Trigger Source */
  } B;
} BCTU_FIFO1DR_tag;

typedef union BCTU_FIFO2DR_union_tag { /* FIFO1 Result Data */
  vuint32_t R;
  struct {
    vuint32_t ADC_DATA:15;             /* ADC Data */
    vuint32_t _unused_15:1;
    vuint32_t ADC_NUM:2;               /* ADC Number */
    vuint32_t CH:7;                    /* Channel */
    vuint32_t TRG_SRC:7;               /* Trigger Source */
  } B;
} BCTU_FIFO2DR_tag;

typedef union BCTU_FIFOCR_union_tag {  /* FIFO Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t IEN_FIFO1:1;             /* FIFO1 Interrupt Enable */
    vuint32_t IEN_FIFO2:1;             /* FIFO2 Interrupt Enable */
    vuint32_t _unused_18:1;
    vuint32_t _unused_19:1;
    vuint32_t _unused_20:4;
    vuint32_t DMA_EN_FIFO1:1;          /* FIFO1 DMA Enable */
    vuint32_t DMA_EN_FIFO2:1;          /* FIFO2 DMA Enable */
    vuint32_t _unused_26:1;
    vuint32_t _unused_27:1;
    vuint32_t _unused_28:4;
  } B;
} BCTU_FIFOCR_tag;

typedef union BCTU_FIFOWM_union_tag {  /* FIFO Watermark Configuration */
  vuint32_t R;
  struct {
    vuint32_t WM_FIFO1:4;              /* FIFO1 Watermark Level */
    vuint32_t _unused_4:4;
    vuint32_t WM_FIFO2:3;              /* FIFO2 Watermark Level */
    vuint32_t _unused_11:5;
    vuint32_t _unused_16:8;
    vuint32_t _unused_24:8;
  } B;
} BCTU_FIFOWM_tag;

typedef union BCTU_FIFOERR_union_tag { /* FIFO Error/Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t WM_INT_FIFO1:1;          /* FIFO Watermark Interrupt Status */
    vuint32_t WM_INT_FIFO2:1;          /* FIFO Watermark Interrupt Status */
    vuint32_t _unused_18:2;
    vuint32_t _unused_20:4;
    vuint32_t OVR_ERR_FIFO1:1;         /* Overrun Error Flag */
    vuint32_t UNDR_ERR_FIFO1:1;        /* Underrun Error Flag */
    vuint32_t OVR_ERR_FIFO2:1;         /* Overrun Error Flag */
    vuint32_t UNDR_ERR_FIFO2:1;        /* Underrun Error Flag */
    vuint32_t _unused_28:2;
    vuint32_t _unused_30:2;
  } B;
} BCTU_FIFOERR_tag;

typedef union BCTU_FIFOSR_union_tag {  /* FIFO Status */
  vuint32_t R;
  struct {
    vuint32_t FULL_FIFO1:1;            /* FIFO Full */
    vuint32_t FULL_FIFO2:1;            /* FIFO Full */
    vuint32_t _unused_2:30;
  } B;
} BCTU_FIFOSR_tag;

typedef union BCTU_FIFOCNTR_union_tag { /* FIFO Counter */
  vuint32_t R;
  struct {
    vuint32_t CNTR_FIFO1:5;            /* FIFO1 Counter */
    vuint32_t _unused_5:3;
    vuint32_t CNTR_FIFO2:4;            /* FIFO2 Counter */
    vuint32_t _unused_12:4;
    vuint32_t _unused_16:8;
    vuint32_t _unused_24:8;
  } B;
} BCTU_FIFOCNTR_tag;

struct BCTU_tag {
  BCTU_MCR_tag MCR;                    /* Module Configuration */
  uint8_t BCTU_reserved0[4];
  BCTU_MSR_tag MSR;                    /* Module Status */
  uint8_t BCTU_reserved1[12];
  BCTU_TRGCFG_tag TRGCFG[72];          /* Trigger Configuration */
  uint8_t BCTU_reserved2[240];
  BCTU_WRPROT_tag WRPROT;              /* Write Protection */
  BCTU_SFTRGR1_tag SFTRGR1;            /* Software Trigger 1 */
  BCTU_SFTRGR2_tag SFTRGR2;            /* Software Trigger 2 */
  BCTU_SFTRGR3_tag SFTRGR3;            /* Software Trigger 3 */
  uint8_t BCTU_reserved3[4];
  BCTU_ADCDR_tag ADCDR[3];             /* ADC0 Result Data */
  uint8_t BCTU_reserved4[4];
  BCTU_LISTSTAR_tag LISTSTAR;          /* CL Size Status */
  BCTU_LISTCHR_tag LISTCHR[16];        /* CL Channel Address */
  uint8_t BCTU_reserved5[448];
  BCTU_FIFO1DR_tag FIFO1DR;            /* FIFO1 Result Data */
  BCTU_FIFO2DR_tag FIFO2DR;            /* FIFO1 Result Data */
  uint8_t BCTU_reserved6[8];
  BCTU_FIFOCR_tag FIFOCR;              /* FIFO Control */
  BCTU_FIFOWM_tag FIFOWM;              /* FIFO Watermark Configuration */
  BCTU_FIFOERR_tag FIFOERR;            /* FIFO Error/Status */
  BCTU_FIFOSR_tag FIFOSR;              /* FIFO Status */
  BCTU_FIFOCNTR_tag FIFOCNTR;          /* FIFO Counter */
};


/* ============================================================================
   =============================== Module: CMU_FC =============================
   ============================================================================ */

typedef union CMU_FC_GCR_union_tag {   /* Global Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t FCE:1;                   /* Frequency Check Enable */
    vuint32_t _unused_1:31;
  } B;
} CMU_FC_GCR_tag;

typedef union CMU_FC_RCCR_union_tag {  /* Reference Count Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t REF_CNT:16;              /* Reference clock count */
    vuint32_t _unused_16:16;
  } B;
} CMU_FC_RCCR_tag;

typedef union CMU_FC_HTCR_union_tag {  /* High Threshold Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t HFREF:24;                /* High frequency reference threshold */
    vuint32_t _unused_24:8;
  } B;
} CMU_FC_HTCR_tag;

typedef union CMU_FC_LTCR_union_tag {  /* Low Threshold Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t LFREF:24;                /* Low Frequency Reference Threshold */
    vuint32_t _unused_24:8;
  } B;
} CMU_FC_LTCR_tag;

typedef union CMU_FC_SR_union_tag {    /* Status Register */
  vuint32_t R;
  struct {
    vuint32_t FLL:1;                   /* Frequency lower than low frequency reference threshold event status */
    vuint32_t FHH:1;                   /* Frequency higher than high frequency reference threshold event status */
    vuint32_t _unused_2:2;
    vuint32_t RS:1;                    /* Run Status */
    vuint32_t _unused_5:27;
  } B;
} CMU_FC_SR_tag;

typedef union CMU_FC_IER_union_tag {   /* Interrupt Enable Register */
  vuint32_t R;
  struct {
    vuint32_t FLLIE:1;                 /* Frequency Lower than Low Frequency Reference Threshold Synchronous Interrupt Enable */
    vuint32_t FHHIE:1;                 /* Frequency Higher than High Frequency Reference Threshold Synchronous Interrupt Enable */
    vuint32_t FLLAIE:1;                /* Frequency Lower than Low Frequency Reference Threshold Asynchronous Interrupt Enable */
    vuint32_t FHHAIE:1;                /* Frequency Higher than High Frequency Reference Threshold Asynchronous Interrupt Enable */
    vuint32_t _unused_4:28;
  } B;
} CMU_FC_IER_tag;

struct CMU_FC_tag {
  CMU_FC_GCR_tag GCR;                  /* Global Configuration Register */
  CMU_FC_RCCR_tag RCCR;                /* Reference Count Configuration Register */
  CMU_FC_HTCR_tag HTCR;                /* High Threshold Configuration Register */
  CMU_FC_LTCR_tag LTCR;                /* Low Threshold Configuration Register */
  CMU_FC_SR_tag SR;                    /* Status Register */
  CMU_FC_IER_tag IER;                  /* Interrupt Enable Register */
};


/* ============================================================================
   =============================== Module: CMU_FM =============================
   ============================================================================ */

typedef union CMU_FM_GCR_union_tag {   /* Global Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t FME:1;                   /* Frequency Meter Enable */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} CMU_FM_GCR_tag;

typedef union CMU_FM_RCCR_union_tag {  /* Reference Count Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t REF_CNT:16;              /* Reference Clock Count */
    vuint32_t _unused_16:16;
  } B;
} CMU_FM_RCCR_tag;

typedef union CMU_FM_SR_union_tag {    /* Status Register */
  vuint32_t R;
  struct {
    vuint32_t FMC:1;                   /* Frequency Meter Operation Complete */
    vuint32_t FMTO:1;                  /* Frequency Meter Time Out */
    vuint32_t _unused_2:2;             /* Reserved */
    vuint32_t RS:1;                    /* Run Status */
    vuint32_t _unused_5:3;             /* Reserved */
    vuint32_t MET_CNT:24;              /* Meter Clock Count */
  } B;
} CMU_FM_SR_tag;

typedef union CMU_FM_IER_union_tag {   /* Interrupt Enable Register */
  vuint32_t R;
  struct {
    vuint32_t FMCIE:1;                 /* Frequency Meter Complete Interrupt Enable */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} CMU_FM_IER_tag;

struct CMU_FM_tag {
  CMU_FM_GCR_tag GCR;                  /* Global Configuration Register */
  CMU_FM_RCCR_tag RCCR;                /* Reference Count Configuration Register */
  CMU_FM_SR_tag SR;                    /* Status Register */
  CMU_FM_IER_tag IER;                  /* Interrupt Enable Register */
};


/* ============================================================================
   =============================== Module: CONFIGURATION_GPR ==================
   ============================================================================ */

typedef union CONFIGURATION_GPR_CONFIG_REG0_union_tag { /* General Purpose Configuration 0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:6;             /* Reserved */
    vuint32_t EDB:1;                   /* Hardware Debugger Attached */
    vuint32_t _unused_7:25;            /* Reserved */
  } B;
} CONFIGURATION_GPR_CONFIG_REG0_tag;

typedef union CONFIGURATION_GPR_CONFIG_REG6_union_tag { /* General Purpose Configuration 6 */
  vuint32_t R;
  struct {
    vuint32_t QUADSPI_SDID_PCTL:1;     /* QuadSPI Clock Gating */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t ENET_CLOCK_GATE:1;       /* Ethernet Clock Gating */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t FLEXIO_CLOCK_GATE:1;     /* FlexIO Clock Gating */
    vuint32_t SAI_SDID_PCTL:1;         /* SAI0 and SAI1 clock gating */
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t _unused_7:24;            /* Reserved */
    vuint32_t HL:1;                    /* Hard Lock */
  } B;
} CONFIGURATION_GPR_CONFIG_REG6_tag;

typedef union CONFIGURATION_GPR_CONFIG_RAMPR_union_tag { /* Configuration RAM Protected Region */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:5;             /* Reserved */
    vuint32_t SECURE_SIZE:16;          /* Secure Size */
    vuint32_t _unused_21:9;            /* Reserved */
    vuint32_t SOFT_LOCK:1;             /* Soft Lock */
    vuint32_t HARD_LOCK:1;             /* Hard Lock */
  } B;
} CONFIGURATION_GPR_CONFIG_RAMPR_tag;

typedef union CONFIGURATION_GPR_CONFIG_CFPRL_union_tag { /* Configuration Code Flash Memory Active Block */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:13;            /* Reserved */
    vuint32_t SECURE_SIZE:8;           /* Secure Size */
    vuint32_t _unused_21:9;            /* Reserved */
    vuint32_t SOFT_LOCK:1;             /* Soft Lock */
    vuint32_t HARD_LOCK:1;             /* Hard Lock */
  } B;
} CONFIGURATION_GPR_CONFIG_CFPRL_tag;

typedef union CONFIGURATION_GPR_CONFIG_CFPRH_union_tag { /* Configuration Code Flash Memory Passive Block */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:13;            /* Reserved */
    vuint32_t SECURE_SIZE:8;           /* Secure Size */
    vuint32_t _unused_21:9;            /* Reserved */
    vuint32_t SOFT_LOCK:1;             /* Soft Lock */
    vuint32_t HARD_LOCK:1;             /* Hard Lock */
  } B;
} CONFIGURATION_GPR_CONFIG_CFPRH_tag;

typedef union CONFIGURATION_GPR_CONFIG_DFPR_union_tag { /* Configuration Data Flash Memory Protected Region */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:13;            /* Reserved */
    vuint32_t SECURE_SIZE:8;           /* Secure Size */
    vuint32_t _unused_21:9;            /* Reserved */
    vuint32_t SOFT_LOCK:1;             /* Soft Lock */
    vuint32_t HARD_LOCK:1;             /* Hard Lock */
  } B;
} CONFIGURATION_GPR_CONFIG_DFPR_tag;

typedef union CONFIGURATION_GPR_CONFIG_PE_LOCK_union_tag { /* Configuration Program and Erase Lock */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;            /* Reserved */
    vuint32_t PE_LOCK_BLOCK_0:1;       /* Program/Erase Lock for Block 0 */
    vuint32_t PE_LOCK_BLOCK_1:1;       /* Program/Erase Lock for Block 1 */
    vuint32_t PE_LOCK_BLOCK_2:1;       /* Program/Erase Lock for Block 2 */
    vuint32_t PE_LOCK_BLOCK_3:1;       /* Program/Erase Lock for Block 3 */
    vuint32_t PE_LOCK_BLOCK_4:1;       /* Program/Erase Lock for Block 4 */
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t PE_LOCK_UTEST:1;         /* Program/Erase Lock for UTEST */
    vuint32_t _unused_19:13;           /* Reserved */
  } B;
} CONFIGURATION_GPR_CONFIG_PE_LOCK_tag;

typedef union CONFIGURATION_GPR_CONFIG_RAMPR_ALT_union_tag { /* Configuration RAM Protected Region Alternate */
  vuint32_t R;
  struct {
    vuint32_t INVERT_VALUE_RAMPR:32;   /* Invert Value RAMPR */
  } B;
} CONFIGURATION_GPR_CONFIG_RAMPR_ALT_tag;

typedef union CONFIGURATION_GPR_CONFIG_CFPRL_ALT_union_tag { /* Configuration Code Flash Memory Active Block Alternate */
  vuint32_t R;
  struct {
    vuint32_t INVERT_VALUE_CFPRAB:32;  /* Invert Value CFPRAB */
  } B;
} CONFIGURATION_GPR_CONFIG_CFPRL_ALT_tag;

typedef union CONFIGURATION_GPR_CONFIG_CFPRH_ALT_union_tag { /* Configuration Code Flash Memory Passive Block Alternate */
  vuint32_t R;
  struct {
    vuint32_t INVERT_VALUE_CFPRP:32;   /* Invert Value CFPRP */
  } B;
} CONFIGURATION_GPR_CONFIG_CFPRH_ALT_tag;

typedef union CONFIGURATION_GPR_CONFIG_DFPR_ALT_union_tag { /* Configuration Data Flash Memory Protected Region Alternate */
  vuint32_t R;
  struct {
    vuint32_t INVERT_VALUE_DFPR:32;    /* Invert Value CFPRP */
  } B;
} CONFIGURATION_GPR_CONFIG_DFPR_ALT_tag;

typedef union CONFIGURATION_GPR_CONFIG_REG_GPR_union_tag { /* Configuration REG_GPR */
  vuint32_t R;
  struct {
    vuint32_t FIRC_DIV_SEL:2;          /* FIRC Divider */
    vuint32_t _unused_2:27;            /* Reserved */
    vuint32_t APP_CORE_ACC:3;          /* FIRC Divider */
  } B;
} CONFIGURATION_GPR_CONFIG_REG_GPR_tag;

struct CONFIGURATION_GPR_tag {
  uint8_t CONFIGURATION_GPR_reserved0[28];
  CONFIGURATION_GPR_CONFIG_REG0_tag CONFIG_REG0; /* General Purpose Configuration 0 */
  uint8_t CONFIGURATION_GPR_reserved1[20];
  CONFIGURATION_GPR_CONFIG_REG6_tag CONFIG_REG6; /* General Purpose Configuration 6 */
  CONFIGURATION_GPR_CONFIG_RAMPR_tag CONFIG_RAMPR; /* Configuration RAM Protected Region */
  CONFIGURATION_GPR_CONFIG_CFPRL_tag CONFIG_CFPRL; /* Configuration Code Flash Memory Active Block */
  CONFIGURATION_GPR_CONFIG_CFPRH_tag CONFIG_CFPRH; /* Configuration Code Flash Memory Passive Block */
  CONFIGURATION_GPR_CONFIG_DFPR_tag CONFIG_DFPR; /* Configuration Data Flash Memory Protected Region */
  uint8_t CONFIGURATION_GPR_reserved2[8];
  CONFIGURATION_GPR_CONFIG_PE_LOCK_tag CONFIG_PE_LOCK; /* Configuration Program and Erase Lock */
  CONFIGURATION_GPR_CONFIG_RAMPR_ALT_tag CONFIG_RAMPR_ALT; /* Configuration RAM Protected Region Alternate */
  CONFIGURATION_GPR_CONFIG_CFPRL_ALT_tag CONFIG_CFPRL_ALT; /* Configuration Code Flash Memory Active Block Alternate */
  CONFIGURATION_GPR_CONFIG_CFPRH_ALT_tag CONFIG_CFPRH_ALT; /* Configuration Code Flash Memory Passive Block Alternate */
  CONFIGURATION_GPR_CONFIG_DFPR_ALT_tag CONFIG_DFPR_ALT; /* Configuration Data Flash Memory Protected Region Alternate */
  CONFIGURATION_GPR_CONFIG_REG_GPR_tag CONFIG_REG_GPR; /* Configuration REG_GPR */
};


/* ============================================================================
   =============================== Module: CRC ================================
   ============================================================================ */

typedef union CRC_DATA_union_tag {     /* CRC DATA register */
  vuint32_t R;
  struct {
    vuint32_t LL:8;                    /* CRC Low Lower Byte */
    vuint32_t LU:8;                    /* CRC Low Upper Byte */
    vuint32_t HL:8;                    /* CRC High Lower Byte */
    vuint32_t HU:8;                    /* CRC High Upper Byte */
  } B;
} CRC_DATA_tag;

typedef union CRC_GPOLY_union_tag {    /* CRC Polynomial register */
  vuint32_t R;
  struct {
    vuint32_t LOW:16;                  /* Low Polynominal Half-word */
    vuint32_t HIGH:16;                 /* High Polynominal Half-word */
  } B;
} CRC_GPOLY_tag;

typedef union CRC_CTRL_union_tag {     /* CRC Control register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t TCRC:1;                  /* TCRC */
    vuint32_t WAS:1;                   /* Write CRC DATA register As Seed */
    vuint32_t FXOR:1;                  /* Complement Read Of CRC DATA register */
    vuint32_t _unused_27:1;            /* Reserved */
    vuint32_t TOTR:2;                  /* Type Of Transpose For Read */
    vuint32_t TOT:2;                   /* Type Of Transpose For Writes */
  } B;
} CRC_CTRL_tag;

struct CRC_tag {
  CRC_DATA_tag DATA;                   /* CRC DATA register */
  CRC_GPOLY_tag GPOLY;                 /* CRC Polynomial register */
  CRC_CTRL_tag CTRL;                   /* CRC Control register */
};


/* ============================================================================
   =============================== Module: DCM ================================
   ============================================================================ */

typedef union DCM_DCMSTAT_union_tag {  /* DCM Status */
  vuint32_t R;
  struct {
    vuint32_t DCMDONE:1;               /* DCM Scanning Status */
    vuint32_t _unused_1:3;             /* Reserved */
    vuint32_t DCMLCST:1;               /* LC Scanning Status */
    vuint32_t _unused_5:4;             /* Reserved */
    vuint32_t DCMOTAS:1;               /* DCM OTA Scanning Status (valid only when the value of the DCMDONE field is 1) */
    vuint32_t DCMDBGPS:1;              /* Debug Password Scanning Status */
    vuint32_t _unused_11:1;            /* Reserved */
    vuint32_t _unused_12:4;            /* Reserved */
    vuint32_t DCMOTAA:1;               /* OTA Active State (valid only when the value of the DCMDONE field is 1) */
    vuint32_t DCMOTAR:1;               /* OTA Active Region (valid only when the value of the DCMDONE field is 1) */
    vuint32_t _unused_18:14;           /* Reserved */
  } B;
} DCM_DCMSTAT_tag;

typedef union DCM_DCMLCC_union_tag {   /* LC and LC Control */
  vuint32_t R;
  struct {
    vuint32_t DCMCLC:3;                /* Current LC */
    vuint32_t DCMLCFN:1;               /* Force LC */
    vuint32_t DCMRLC:3;                /* Real LC */
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t DCMFLC:2;                /* Force Next LC */
    vuint32_t _unused_10:22;           /* Reserved */
  } B;
} DCM_DCMLCC_tag;

typedef union DCM_DCMLCS_union_tag {   /* LC Scan Status */
  vuint32_t R;
  struct {
    vuint32_t DCMLCSS1:1;              /* MCU_PROD Scan Status */
    vuint32_t DCMLCC1:3;               /* MCU_PROD Marking */
    vuint32_t DCMLCE1:1;               /* MCU_PROD ECC Errors */
    vuint32_t DCMLCFE1:1;              /* MCU_PROD Flash Memory Error Check */
    vuint32_t DCMLCSS2:1;              /* CUST_DEL Scan Status */
    vuint32_t DCMLCC2:3;               /* CUST_DEL Marking */
    vuint32_t DCMLCE2:1;               /* ECC Errors In CUST_DEL */
    vuint32_t DCMLCFE2:1;              /* CUST_DEL Flash Memory Error Check */
    vuint32_t DCMLCSS3:1;              /* OEM_PROD Scan Status */
    vuint32_t DCMLCC3:3;               /* OEM_PROD Marking */
    vuint32_t DCMLCE3:1;               /* OEM_PROD ECC Errors */
    vuint32_t DCMLCFE3:1;              /* OEM_PROD Flash Memory Error Check */
    vuint32_t DCMLCSS4:1;              /* IN_FIELD Scan Status */
    vuint32_t DCMLCC4:3;               /* IN_FIELD Marking Status */
    vuint32_t DCMLCE4:1;               /* IN_FIELD ECC Errors */
    vuint32_t DCMLCFE4:1;              /* IN_FIELD Flash Memory Error Check */
    vuint32_t DCMLCSS5:1;              /* Pre-FA Scan Status */
    vuint32_t DCMLCC5:3;               /* Pre-FA Marking Status */
    vuint32_t DCMLCE5:1;               /* Pre-FA ECC Errors */
    vuint32_t DCMLCFE5:1;              /* Pre-FA Flash Memory Error Check */
    vuint32_t _unused_30:2;            /* Reserved */
  } B;
} DCM_DCMLCS_tag;

typedef union DCM_DCMMISC_union_tag {  /* DCM Miscellaneous */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:10;            /* Reserved */
    vuint32_t DCMDBGT:1;               /* DBG Section Error */
    vuint32_t _unused_11:3;            /* Reserved */
    vuint32_t _unused_14:10;           /* Reserved */
    vuint32_t _unused_24:4;            /* Reserved */
    vuint32_t DCMCERS:1;               /* DCF Client Errors */
    vuint32_t _unused_29:1;            /* Reserved */
    vuint32_t MRKLSTRCHK:1;            /* MRK Local Storage Check */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} DCM_DCMMISC_tag;

typedef union DCM_DCMDEB_union_tag {   /* Debug Status and Configuration */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t DCM_APPDBG_STAT:1;       /* DCM Authentication Engine Status */
    vuint32_t _unused_2:4;             /* Reserved */
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t _unused_7:9;             /* Reserved */
    vuint32_t APPDBG_STAT_SOC:1;       /* Application Debug Status */
    vuint32_t _unused_17:15;           /* Reserved */
  } B;
} DCM_DCMDEB_tag;

typedef union DCM_DCMEC_union_tag {    /* DCF Error Count */
  vuint32_t R;
  struct {
    vuint32_t DCMECT:16;               /* Error Count */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} DCM_DCMEC_tag;

typedef union DCM_DCMSRR_union_tag {   /* DCF Scan Report */
  vuint32_t R;
  struct {
    vuint32_t DCMDCFE1:21;             /* Flash Memory Address */
    vuint32_t _unused_21:3;            /* Reserved */
    vuint32_t DCMDCFF1:3;              /* DCF Record Location */
    vuint32_t DCMESF1:1;               /* Flash Memory Error */
    vuint32_t DCMESD1:1;               /* Chip Side Error */
    vuint32_t DCMDCFT1:1;              /* Scanning Timeout On Flash Memory */
    vuint32_t _unused_30:2;            /* Reserved */
  } B;
} DCM_DCMSRR_tag;

typedef union DCM_DCMLCS_2_union_tag { /* LC Scan Status 2 */
  vuint32_t R;
  struct {
    vuint32_t DCMLCSS6:1;              /* FA Scan Status */
    vuint32_t DCMLCC6:3;               /* FA Marking */
    vuint32_t DCMLCE6:1;               /* FA ECC Errors */
    vuint32_t DCMLCFE6:1;              /* Flash Memory Error Check */
    vuint32_t _unused_6:26;            /* Reserved */
  } B;
} DCM_DCMLCS_2_tag;

struct DCM_tag {
  DCM_DCMSTAT_tag DCMSTAT;             /* DCM Status */
  DCM_DCMLCC_tag DCMLCC;               /* LC and LC Control */
  DCM_DCMLCS_tag DCMLCS;               /* LC Scan Status */
  uint8_t DCM_reserved0[16];
  DCM_DCMMISC_tag DCMMISC;             /* DCM Miscellaneous */
  DCM_DCMDEB_tag DCMDEB;               /* Debug Status and Configuration */
  uint8_t DCM_reserved1[8];
  DCM_DCMEC_tag DCMEC;                 /* DCF Error Count */
  DCM_DCMSRR_tag DCMSRR[1];            /* DCF Scan Report */
  uint8_t DCM_reserved2[76];
  DCM_DCMLCS_2_tag DCMLCS_2;           /* LC Scan Status 2 */
};


/* ============================================================================
   =============================== Module: DCM_GPR ============================
   ============================================================================ */

typedef union DCM_GPR_DCMROD1_union_tag { /* Read Only GPR On Destructive Reset Register */
  vuint32_t R;
  struct {
    vuint32_t PCU_ISO_STATUS:1;        /* Input isolation status bit */
    vuint32_t HSE_DCF_VIO:1;           /* DCF violation from HSE */
    vuint32_t KEY_RESP_READY:1;        /* Key Response Ready */
    vuint32_t _unused_3:29;            /* Reserved */
  } B;
} DCM_GPR_DCMROD1_tag;

typedef union DCM_GPR_DCMROD3_union_tag { /* Read Only GPR On Destructive Reset Register */
  vuint32_t R;
  struct {
    vuint32_t CM7_0_LOCKUP:1;          /* CM7_0 Core Lockup Status. Read this bit to identify the reason of fault in case of FCCU NCF 0. */
    vuint32_t CM7_1_LOCKUP:1;          /* CM7_1 Core Lockup Status. Read this bit to identify the reason of fault in case of FCCU NCF 0. */
    vuint32_t HSE_LOCKUP:1;            /* HSE Core Lockup Status. Read this bit to identify the reason of fault in case of FCCU NCF 0. */
    vuint32_t CM7_RCCU1_ALARM:1;       /* Cortex M7 Cores Lockstep Error Status. Read this bit to identify the reason of fault in case of FCCU NCF 0. */
    vuint32_t CM7_RCCU2_ALARM:1;       /* Cortex M7 Cores Redundant Lockstep Error Status. Read this bit to identify the reason of fault in case of FCCU NCF 0. */
    vuint32_t TCM_GSKT_ALARM:1;        /* TCM IAHB Gasket Monitor Alarm Status. Read this bit to identify the reason of fault in case of FCCU NCF 1. */
    vuint32_t DMA_SYS_GSKT_ALARM:1;
    vuint32_t DMA_PERIPH_GSKT_ALARM:1;
    vuint32_t SYS_AXBS_ALARM:1;        /* System AXBS Safety Alarm Status. Read this bit to identify the reason of fault in case of FCCU NCF 1. */
    vuint32_t DMA_AXBS_ALARM:1;        /* DMA AXBS_Lite Safety Alarm Status. Read this bit to identify the reason of fault in case of FCCU NCF 1. */
    vuint32_t _unused_10:1;            /* Reserved */
    vuint32_t HSE_GSKT_ALARM:1;        /* HSE IAHB Gasket Alarm Status. Read this bit to identify the reason of fault in case of FCCU NCF 1. */
    vuint32_t QSPI_GSKT_ALARM:1;       /* QSPI IAHB Gasket Alarm Status. Read this bit to identify the reason of fault in case of FCCU NCF 1. */
    vuint32_t AIPS1_GSKT_ALARM:1;      /* AIPS1 IAHB Gasket Alarm Status. Read this bit to identify the reason of fault in case of FCCU NCF 1. */
    vuint32_t AIPS2_GSKT_ALARM:1;      /* AIPS2 IAHB Gasket Alarm Status. Read this bit to identify the reason of fault in case of FCCU NCF 1. */
    vuint32_t ADDR_EDC_ERR:1;
    vuint32_t DATA_EDC_ERR:1;
    vuint32_t TCM_AXBS_ALARM:1;        /* TCM AHB Splitter Safety Alarm Status. Read this bit to identify the reason of fault in case of FCCU NCF 1. */
    vuint32_t EMAC_GSKT_ALARM:1;       /* ENET IAHB Gasket Alarm Status. Read this bit to identify the reason of fault in case of FCCU NCF 1. */
    vuint32_t PERIPH_AXBS_ALARM:1;     /* PERIPH AXBS_Lite Safety Alarm Status. Read this bit to identify the reason of fault in case of FCCU NCF 1. */
    vuint32_t _unused_20:2;            /* Reserved */
    vuint32_t LC_ERR:1;                /* Error in Lifecycle Scanning. Read this bit to identify the reason of fault in case of FCCU NCF 3. */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t PRAM1_ECC_ERR:1;
    vuint32_t PRAM0_ECC_ERR:1;
    vuint32_t CM7_0_DCDATA_ECC_ERR:1;
    vuint32_t CM7_1_DCDATA_ECC_ERR:1;
    vuint32_t CM7_0_DCTAG_ECC_ERR:1;   /* Multi bit ECC error from CM7_0 DCache tag memory. Read this bit to identify the reason of fault in case of FCCU NCF 2. */
    vuint32_t CM7_1_DCTAG_ECC_ERR:1;
    vuint32_t CM7_0_ICDATA_ECC_ERR:1;
    vuint32_t CM7_1_ICDATA_ECC_ERR:1;
  } B;
} DCM_GPR_DCMROD3_tag;

typedef union DCM_GPR_DCMROD4_union_tag { /* Read Only GPR On Destructive Reset Register */
  vuint32_t R;
  struct {
    vuint32_t CM7_0_ICTAG_ECC_ERR:1;
    vuint32_t CM7_1_ICTAG_ECC_ERR:1;
    vuint32_t CM7_0_ITCM_ECC_ERR:1;
    vuint32_t CM7_0_DTCM0_ECC_ERR:1;
    vuint32_t CM7_0_DTCM1_ECC_ERR:1;
    vuint32_t CM7_1_ITCM_ECC_ERR:1;
    vuint32_t CM7_1_DTCM0_ECC_ERR:1;
    vuint32_t CM7_1_DTCM1_ECC_ERR:1;
    vuint32_t DMA_TCD_RAM_ECC_ERR:1;
    vuint32_t PRAM0_FCCU_ALARM:1;
    vuint32_t PRAM1_FCCU_ALARM:1;
    vuint32_t HSE_RAM_ECC_ERR:1;       /* HSE RAM Uncorrectable ECC Status. Read this bit to identify the reason of fault in case of FCCU NCF 2. */
    vuint32_t PF0_CODE_ECC_ERR:1;      /* Flash0 Code ECC Uncorrectable Error */
    vuint32_t PF0_DATA_ECC_ERR:1;      /* Flash0 Data ECC Uncorrectable Error */
    vuint32_t PF1_CODE_ECC_ERR:1;      /* Flash1 Code ECC Uncorrectable Error */
    vuint32_t PF1_DATA_ECC_ERR:1;      /* Flash1 Data ECC Uncorrectable Error */
    vuint32_t PF2_CODE_ECC_ERR:1;      /* Flash2 Code ECC Uncorrectable Error */
    vuint32_t PF2_DATA_ECC_ERR:1;      /* Flash2 Data ECC Uncorrectable Error */
    vuint32_t FLASH_EDC_ERR:1;
    vuint32_t FLASH_ADDR_ENC_ERR:1;    /* Flash Address Encode Error */
    vuint32_t FLASH_REF_ERR:1;
    vuint32_t FLASH_RST_ERR:1;         /* Flash Reset Error Status */
    vuint32_t FLASH_SCAN_ERR:1;
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t FLASH_ECC_ERR:1;         /* ECC Error From Flash Controller */
    vuint32_t FLASH_ACCESS_ERR:1;      /* Transaction Monitor Mismatch Error From Flash Controller */
    vuint32_t VDD1P1_GNG_ERR:1;
    vuint32_t VDD2P5_GNG_ERR:1;
    vuint32_t _unused_28:1;            /* Reserved */
    vuint32_t TEST_ACTIVATION_0_ERR:1; /* Accidental Partial Test Activation. Read this bit to identify the reason of fault in case of FCCU NCF 5. */
    vuint32_t TEST_ACTIVATION_1_ERR:1; /* Accidental Partial Test Activation. Read this bit to identify the reason of fault in case of FCCU NCF 5. */
    vuint32_t TEST_ACTIVATION_2_ERR:1; /* Accidental Partial Test Activation. Read this bit to identify the reason of fault in case of FCCU NCF 5. */
  } B;
} DCM_GPR_DCMROD4_tag;

typedef union DCM_GPR_DCMROD5_union_tag { /* Read Only GPR On Destructive Reset Register */
  vuint32_t R;
  struct {
    vuint32_t TEST_ACTIVATION_3_ERR:1; /* Accidental Partial Test Activation. Read this bit to identify the reason of fault in case of FCCU NCF 5. */
    vuint32_t INTM_0_ERR:1;
    vuint32_t INTM_1_ERR:1;
    vuint32_t INTM_2_ERR:1;
    vuint32_t INTM_3_ERR:1;
    vuint32_t SW_NCF_0:1;              /* Software NCF0 Status */
    vuint32_t SW_NCF_1:1;              /* Software NCF1 Status */
    vuint32_t SW_NCF_2:1;              /* Software NCF2 Status */
    vuint32_t SW_NCF_3:1;              /* Software NCF3 Status */
    vuint32_t STCU_NCF:1;
    vuint32_t MBIST_ACTIVATION_ERR:1;
    vuint32_t STCU_BIST_USER_CF:1;
    vuint32_t MTR_BUS_ERR:1;
    vuint32_t DEBUG_ACTIVATION_ERR:1;
    vuint32_t TCM_RDATA_EDC_ERR:1;
    vuint32_t EMAC_RDATA_EDC_ERR:1;
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t DMA_RDATA_EDC_ERR:1;
    vuint32_t CM7_1_AHBP_RDATA_EDC_ERR:1;
    vuint32_t CM7_1_AHBM_RDATA_EDC_ERR:1;
    vuint32_t CM7_0_AHBP_RDATA_EDC_ERR:1;
    vuint32_t CM7_0_AHBM_RDATA_EDC_ERR:1;
    vuint32_t HSE_RDATA_EDC_ERR:1;
    vuint32_t _unused_23:9;            /* Reserved */
  } B;
} DCM_GPR_DCMROD5_tag;

typedef union DCM_GPR_DCMROF1_union_tag { /* Read Only GPR On Functional Reset Register */
  vuint32_t R;
  struct {
    vuint32_t EMAC_MDC_CHID_0:1;       /* EMAC DMA Channel ID0 Status */
    vuint32_t EMAC_MDC_CHID_1:1;       /* EMAC DMA Channel ID1 Status */
    vuint32_t _unused_2:30;            /* Reserved */
  } B;
} DCM_GPR_DCMROF1_tag;

typedef union DCM_GPR_DCMROF2_union_tag { /* Read Only GPR On Functional Reset Register */
  vuint32_t R;
  struct {
    vuint32_t DCF_SDID0:32;            /* Configuration bits of DCF client SDID 0. */
  } B;
} DCM_GPR_DCMROF2_tag;

typedef union DCM_GPR_DCMROF3_union_tag { /* Read Only GPR On Functional Reset Register */
  vuint32_t R;
  struct {
    vuint32_t DCF_SDID1:32;            /* Configuration bits of DCF client SDID 1. */
  } B;
} DCM_GPR_DCMROF3_tag;

typedef union DCM_GPR_DCMROF4_union_tag { /* Read Only GPR On Functional Reset Register */
  vuint32_t R;
  struct {
    vuint32_t DCF_SDID2:32;            /* Configuration bits of DCF client SDID 2. */
  } B;
} DCM_GPR_DCMROF4_tag;

typedef union DCM_GPR_DCMROF5_union_tag { /* Read Only GPR On Functional Reset Register */
  vuint32_t R;
  struct {
    vuint32_t DCF_SDID3:32;            /* Configuration bits of DCF client SDID 3. */
  } B;
} DCM_GPR_DCMROF5_tag;

typedef union DCM_GPR_DCMROF6_union_tag { /* Read Only GPR On Functional Reset Register */
  vuint32_t R;
  struct {
    vuint32_t DCF_SDID4:32;            /* Configuration bits of DCF client SDID 4. */
  } B;
} DCM_GPR_DCMROF6_tag;

typedef union DCM_GPR_DCMROF7_union_tag { /* Read Only GPR On Functional Reset Register */
  vuint32_t R;
  struct {
    vuint32_t DCF_SDID5:32;            /* Configuration bits of DCF client SDID 5. */
  } B;
} DCM_GPR_DCMROF7_tag;

typedef union DCM_GPR_DCMROF8_union_tag { /* Read Only GPR On Functional Reset Register */
  vuint32_t R;
  struct {
    vuint32_t DCF_SDID6:32;            /* Configuration bits of DCF client SDID 6. */
  } B;
} DCM_GPR_DCMROF8_tag;

typedef union DCM_GPR_DCMROF9_union_tag { /* Read Only GPR On Functional Reset Register */
  vuint32_t R;
  struct {
    vuint32_t DCF_SDID7:32;            /* Configuration bits of DCF client SDID 7. */
  } B;
} DCM_GPR_DCMROF9_tag;

typedef union DCM_GPR_DCMROF10_union_tag { /* Read Only GPR On Functional Reset Register */
  vuint32_t R;
  struct {
    vuint32_t DCF_SDID8:32;            /* Configuration bits of DCF client SDID 8. */
  } B;
} DCM_GPR_DCMROF10_tag;

typedef union DCM_GPR_DCMROF11_union_tag { /* Read Only GPR On Functional Reset Register */
  vuint32_t R;
  struct {
    vuint32_t DCF_SDID9:32;            /* Configuration bits of DCF client SDID 9. */
  } B;
} DCM_GPR_DCMROF11_tag;

typedef union DCM_GPR_DCMROF12_union_tag { /* Read Only GPR On Functional Reset Register */
  vuint32_t R;
  struct {
    vuint32_t DCF_SDID10:32;           /* Configuration bits of DCF client SDID 10. */
  } B;
} DCM_GPR_DCMROF12_tag;

typedef union DCM_GPR_DCMROF13_union_tag { /* Read Only GPR On Functional Reset Register */
  vuint32_t R;
  struct {
    vuint32_t DCF_SDID11:32;           /* Configuration bits of DCF client SDID 11. */
  } B;
} DCM_GPR_DCMROF13_tag;

typedef union DCM_GPR_DCMROF14_union_tag { /* Read Only GPR On Functional Reset Register */
  vuint32_t R;
  struct {
    vuint32_t DCF_SDID12:32;           /* Configuration bits of DCF client SDID 12. */
  } B;
} DCM_GPR_DCMROF14_tag;

typedef union DCM_GPR_DCMROF15_union_tag { /* Read Only GPR On Functional Reset Register */
  vuint32_t R;
  struct {
    vuint32_t DCF_SDID13:32;           /* Configuration bits of DCF client SDID 13. */
  } B;
} DCM_GPR_DCMROF15_tag;

typedef union DCM_GPR_DCMROF16_union_tag { /* Read Only GPR On Functional Reset Register */
  vuint32_t R;
  struct {
    vuint32_t DCF_SDID14:32;           /* Configuration bits of DCF client SDID 14. */
  } B;
} DCM_GPR_DCMROF16_tag;

typedef union DCM_GPR_DCMROF17_union_tag { /* Read Only GPR On Functional Reset Register */
  vuint32_t R;
  struct {
    vuint32_t DCF_SDID15:32;           /* Configuration bits of DCF client SDID 15. */
  } B;
} DCM_GPR_DCMROF17_tag;

typedef union DCM_GPR_DCMROF19_union_tag { /* Read Only GPR On Functional Reset Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:29;            /* Reserved */
    vuint32_t LOCKSTEP_EN:1;           /* Lockstep Enable */
    vuint32_t DCM_DONE:1;              /* DCM Done */
    vuint32_t FCCU_EOUT_DEDICATED:1;   /* FCCU EOUT Dedicated */
  } B;
} DCM_GPR_DCMROF19_tag;

typedef union DCM_GPR_DCMROF20_union_tag { /* Read Only GPR On Functional Reset Register */
  vuint32_t R;
  struct {
    vuint32_t POR_WDG_EN:1;
    vuint32_t LMAUTO_DIS:1;
    vuint32_t CM7_TCM_WS_EN:1;
    vuint32_t DMA_AXBS_IAHB_BYP:1;
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t QSPI_IAHB_BYP:1;
    vuint32_t AIPS_IAHB_BYP:1;
    vuint32_t _unused_7:11;            /* Reserved */
    vuint32_t DCF_DEST_RST_ESC:14;
  } B;
} DCM_GPR_DCMROF20_tag;

typedef union DCM_GPR_DCMROF21_union_tag { /* Read Only GPR On Functional Reset Register */
  vuint32_t R;
  struct {
    vuint32_t DCF_DEST_RST_ESC:18;
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t HSE_CLK_MODE_OPTION:2;   /* HSE Clock Mode Option */
    vuint32_t _unused_21:11;           /* Reserved */
  } B;
} DCM_GPR_DCMROF21_tag;

typedef union DCM_GPR_DCMRWP1_union_tag { /* Read Write GPR On Power On Reset Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t _unused_1:2;             /* Reserved */
    vuint32_t CLKOUT_STANDBY:1;        /* Clockout standby expose over functional and destructive reset. */
    vuint32_t _unused_4:2;             /* Reserved */
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t STANBDY_PWDOG_DIS:1;     /* Disables the standby entry and exit monitoring window of the POR WDOG. */
    vuint32_t POR_WDOG_TRIM:2;         /* Trims for POR WDG timeout value. */
    vuint32_t _unused_11:21;           /* Reserved */
  } B;
} DCM_GPR_DCMRWP1_tag;

typedef union DCM_GPR_DCMRWP3_union_tag { /* Read Write GPR On Power On Reset Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:9;             /* Reserved */
    vuint32_t DEST_RST9_AS_IPI:1;      /* Configures a destructive reset to interrupt. */
    vuint32_t _unused_10:22;           /* Reserved */
  } B;
} DCM_GPR_DCMRWP3_tag;

typedef union DCM_GPR_DCMRWD2_union_tag { /* Read Write GPR On Destructive Reset Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t _unused_2:1;             /* Reserved */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t EOUT_STAT_DUR_STEST:1;   /* Controls the EOUT state during selftest. */
    vuint32_t _unused_8:24;
  } B;
} DCM_GPR_DCMRWD2_tag;

typedef union DCM_GPR_DCMRWD3_union_tag { /* Read Write GPR On Destructive Reset Register */
  vuint32_t R;
  struct {
    vuint32_t CM7_0_LOCKUP_EN:1;
    vuint32_t CM7_1_LOCKUP_EN:1;
    vuint32_t _unused_2:1;             /* Reserved */
    vuint32_t CM7_RCCU1_ALARM_EN:1;
    vuint32_t CM7_RCCU2_ALARM_EN:1;
    vuint32_t TCM_GSKT_ALARM_EN:1;
    vuint32_t DMA_SYS_GSKT_ALARM_EN:1;
    vuint32_t DMA_PERIPH_GSKT_ALARM_EN:1;
    vuint32_t SYS_AXBS_ALARM_EN:1;
    vuint32_t DMA_AXBS_ALARM_EN:1;
    vuint32_t _unused_10:1;            /* Reserved */
    vuint32_t HSE_GSKT_ALARM_EN:1;
    vuint32_t QSPI_GSKT_ALARM_EN:1;
    vuint32_t AIPS1_GSKT_ALARM_EN:1;
    vuint32_t AIPS2_GSKT_ALARM_EN:1;
    vuint32_t ADDR_EDC_ERR_EN:1;
    vuint32_t DATA_EDC_ERR_EN:1;
    vuint32_t TCM_AXBS_ALARM_EN:1;
    vuint32_t EMAC_GSKT_ALARM_EN:1;
    vuint32_t PERIPH_AXBS_ALARM_EN:1;
    vuint32_t _unused_20:2;            /* Reserved */
    vuint32_t LC_ERR_EN:1;
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t PRAM1_ECC_ERR_EN:1;
    vuint32_t PRAM0_ECC_ERR_EN:1;
    vuint32_t CM7_0_DCDATA_ECC_ERR_EN:1;
    vuint32_t CM7_1_DCDATA_ECC_ERR_EN:1;
    vuint32_t CM7_0_DCTAG_ECC_ERR_EN:1;
    vuint32_t CM7_1_DCTAG_ECC_ERR_EN:1;
    vuint32_t CM7_0_ICDATA_ECC_ERR_EN:1;
    vuint32_t CM7_1_ICDATA_ECC_ERR_EN:1;
  } B;
} DCM_GPR_DCMRWD3_tag;

typedef union DCM_GPR_DCMRWD4_union_tag { /* Read Write GPR On Destructive Reset Register */
  vuint32_t R;
  struct {
    vuint32_t CM7_0_ICTAG_ECC_ERR_EN:1;
    vuint32_t CM7_1_ICTAG_ECC_ERR_EN:1;
    vuint32_t CM7_0_ITCM_ECC_ERR_EN:1;
    vuint32_t CM7_0_DTCM0_ECC_ERR_EN:1;
    vuint32_t CM7_0_DTCM1_ECC_ERR_EN:1;
    vuint32_t CM7_1_ITCM_ECC_ERR_EN:1;
    vuint32_t CM7_1_DTCM0_ECC_ERR_EN:1;
    vuint32_t CM7_1_DTCM1_ECC_ERR_EN:1;
    vuint32_t DMA_TCD_RAM_ECC_ERR_EN:1;
    vuint32_t PRAM0_FCCU_ALARM_EN:1;
    vuint32_t PRAM1_FCCU_ALARM_EN:1;
    vuint32_t HSE_RAM_ECC_ERR_EN:1;
    vuint32_t PF0_CODE_ECC_ERR_EN:1;
    vuint32_t PF0_DATA_ECC_ERR_EN:1;
    vuint32_t PF1_CODE_ECC_ERR_EN:1;
    vuint32_t PF1_DATA_ECC_ERR_EN:1;
    vuint32_t PF2_CODE_ECC_ERR_EN:1;
    vuint32_t PF2_DATA_ECC_ERR_EN:1;
    vuint32_t FLASH_EDC_ERR_EN:1;
    vuint32_t FLASH_ADDR_ENC_ERR_EN:1;
    vuint32_t FLASH_REF_ERR_EN:1;
    vuint32_t FLASH_RST_ERR_EN:1;
    vuint32_t FLASH_SCAN_ERR_EN:1;
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t FLASH_ECC_ERR_EN:1;
    vuint32_t FLASH_ACCESS_ERR_EN:1;
    vuint32_t VDD1P1_GNG_ERR_EN:1;
    vuint32_t VDD2P5_GNG_ERR_EN:1;
    vuint32_t _unused_28:1;            /* Reserved */
    vuint32_t TEST_ACTIVATION_0_ERR_EN:1;
    vuint32_t TEST_ACTIVATION_1_ERR_EN:1;
    vuint32_t TEST_ACTIVATION_2_ERR_EN:1;
  } B;
} DCM_GPR_DCMRWD4_tag;

typedef union DCM_GPR_DCMRWD5_union_tag { /* Read Write GPR On Destructive Reset Register */
  vuint32_t R;
  struct {
    vuint32_t TEST_ACTIVATION_3_ERR_EN:1;
    vuint32_t INTM_0_ERR_EN:1;
    vuint32_t INTM_1_ERR_EN:1;
    vuint32_t INTM_2_ERR_EN:1;
    vuint32_t INTM_3_ERR_EN:1;
    vuint32_t SW_NCF_0_EN:1;
    vuint32_t SW_NCF_1_EN:1;
    vuint32_t SW_NCF_2_EN:1;
    vuint32_t SW_NCF_3_EN:1;
    vuint32_t STCU_NCF_EN:1;
    vuint32_t MBIST_ACTIVATION_ERR_EN:1;
    vuint32_t STCU_BIST_USER_CF_EN:1;
    vuint32_t MTR_BUS_ERR_EN:1;
    vuint32_t DEBUG_ACTIVATION_ERR_EN:1;
    vuint32_t TCM_RDATA_EDC_ERR_EN:1;
    vuint32_t EMAC_RDATA_EDC_ERR_EN:1;
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t DMA_RDATA_EDC_ERR_EN:1;
    vuint32_t CM7_1_AHBP_RDATA_EDC_ERR_EN:1;
    vuint32_t CM7_1_AHBM_RDATA_EDC_ERR_EN:1;
    vuint32_t CM7_0_AHBP_RDATA_EDC_ERR_EN:1;
    vuint32_t CM7_0_AHBM_RDATA_EDC_ERR_EN:1;
    vuint32_t HSE_RDATA_EDC_ERR_EN:1;
    vuint32_t _unused_23:9;            /* Reserved */
  } B;
} DCM_GPR_DCMRWD5_tag;

typedef union DCM_GPR_DCMRWD6_union_tag { /* Read Write GPR On Destructive Reset Register */
  vuint32_t R;
  struct {
    vuint32_t EDMA_DBG_DIS_CM7_0:1;
    vuint32_t FCCU_DBG_DIS_CM7_0:1;
    vuint32_t LCU0_DBG_DIS_CM7_0:1;
    vuint32_t LCU1_DBG_DIS_CM7_0:1;
    vuint32_t EMIOS0_DBG_DIS_CM7_0:1;
    vuint32_t EMIOS1_DBG_DIS_CM7_0:1;
    vuint32_t EMIOS2_DBG_DIS_CM7_0:1;
    vuint32_t RTC_DBG_DIS_CM7_0:1;
    vuint32_t SWT0_DBG_DIS_CM7_0:1;
    vuint32_t SWT1_DBG_DIS_CM7_0:1;
    vuint32_t STM0_DBG_DIS_CM7_0:1;
    vuint32_t STM1_DBG_DIS_CM7_0:1;
    vuint32_t PIT0_DBG_DIS_CM7_0:1;
    vuint32_t PIT1_DBG_DIS_CM7_0:1;
    vuint32_t PIT2_DBG_DIS_CM7_0:1;
    vuint32_t LPSPI0_DBG_DIS_CM7_0:1;
    vuint32_t LPSPI1_DBG_DIS_CM7_0:1;
    vuint32_t LPSPI2_DBG_DIS_CM7_0:1;
    vuint32_t LPSPI3_DBG_DIS_CM7_0:1;
    vuint32_t LPSPI4_DBG_DIS_CM7_0:1;
    vuint32_t LPSPI5_DBG_DIS_CM7_0:1;
    vuint32_t LPI2C0_DBG_DIS_CM7_0:1;
    vuint32_t LPI2C1_DBG_DIS_CM7_0:1;
    vuint32_t FLEXIO_DBG_DIS_CM7_0:1;
    vuint32_t FLEXCAN0_DBG_DIS_CM7_0:1;
    vuint32_t FLEXCAN1_DBG_DIS_CM7_0:1;
    vuint32_t FLEXCAN2_DBG_DIS_CM7_0:1;
    vuint32_t FLEXCAN3_DBG_DIS_CM7_0:1;
    vuint32_t FLEXCAN4_DBG_DIS_CM7_0:1;
    vuint32_t FLEXCAN5_DBG_DIS_CM7_0:1;
    vuint32_t SAI0_DBG_DIS_CM7_0:1;
    vuint32_t SAI1_DBG_DIS_CM7_0:1;
  } B;
} DCM_GPR_DCMRWD6_tag;

typedef union DCM_GPR_DCMRWD7_union_tag { /* Read Write GPR On Destructive Reset Register */
  vuint32_t R;
  struct {
    vuint32_t I3C_DBG_DIS_CM7_0:1;
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} DCM_GPR_DCMRWD7_tag;

typedef union DCM_GPR_DCMRWD8_union_tag { /* Read Write GPR On Destructive Reset Register */
  vuint32_t R;
  struct {
    vuint32_t EDMA_DBG_DIS_CM7_1:1;
    vuint32_t FCCU_DBG_DIS_CM7_1:1;
    vuint32_t LCU0_DBG_DIS_CM7_1:1;
    vuint32_t LCU1_DBG_DIS_CM7_1:1;
    vuint32_t EMIOS0_DBG_DIS_CM7_1:1;
    vuint32_t EMIOS1_DBG_DIS_CM7_1:1;
    vuint32_t EMIOS2_DBG_DIS_CM7_1:1;
    vuint32_t RTC_DBG_DIS_CM7_1:1;
    vuint32_t SWT0_DBG_DIS_CM7_1:1;
    vuint32_t SWT1_DBG_DIS_CM7_1:1;
    vuint32_t STM0_DBG_DIS_CM7_1:1;
    vuint32_t STM1_DBG_DIS_CM7_1:1;
    vuint32_t PIT0_DBG_DIS_CM7_1:1;
    vuint32_t PIT1_DBG_DIS_CM7_1:1;
    vuint32_t PIT2_DBG_DIS_CM7_1:1;
    vuint32_t LPSPI0_DBG_DIS_CM7_1:1;
    vuint32_t LPSPI1_DBG_DIS_CM7_1:1;
    vuint32_t LPSPI2_DBG_DIS_CM7_1:1;
    vuint32_t LPSPI3_DBG_DIS_CM7_1:1;
    vuint32_t LPSPI4_DBG_DIS_CM7_1:1;
    vuint32_t LPSPI5_DBG_DIS_CM7_1:1;
    vuint32_t LPI2C0_DBG_DIS_CM7_1:1;
    vuint32_t LPI2C1_DBG_DIS_CM7_1:1;
    vuint32_t FLEXIO_DBG_DIS_CM7_1:1;
    vuint32_t FLEXCAN0_DBG_DIS_CM7_1:1;
    vuint32_t FLEXCAN1_DBG_DIS_CM7_1:1;
    vuint32_t FLEXCAN2_DBG_DIS_CM7_1:1;
    vuint32_t FLEXCAN3_DBG_DIS_CM7_1:1;
    vuint32_t FLEXCAN4_DBG_DIS_CM7_1:1;
    vuint32_t FLEXCAN5_DBG_DIS_CM7_1:1;
    vuint32_t SAI0_DBG_DIS_CM7_1:1;
    vuint32_t SAI1_DBG_DIS_CM7_1:1;
  } B;
} DCM_GPR_DCMRWD8_tag;

typedef union DCM_GPR_DCMRWD9_union_tag { /* Read Write GPR On Destructive Reset Register */
  vuint32_t R;
  struct {
    vuint32_t I3C_DBG_DIS_CM7_1:1;
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} DCM_GPR_DCMRWD9_tag;

typedef union DCM_GPR_DCMRWF1_union_tag { /* Read Write GPR On Functional Reset Register */
  vuint32_t R;
  struct {
    vuint32_t CAN_TIMESTAMP_SEL:1;     /* Select between EMAC and STM for CAN timestamping */
    vuint32_t CAN_TIMESTAMP_EN:1;      /* Enables CAN timestamping feature for all flexcans. */
    vuint32_t FCCU_SW_NCF0:1;          /* Control to initiate Software NCF to FCCU. */
    vuint32_t FCCU_SW_NCF1:1;          /* Control to initiate Software NCF to FCCU. */
    vuint32_t FCCU_SW_NCF2:1;          /* Control to initiate Software NCF to FCCU. */
    vuint32_t FCCU_SW_NCF3:1;          /* Control to initiate Software NCF to FCCU. */
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t RMII_MII_SEL:1;          /* Selects between MII and RMII mode of ethernet. */
    vuint32_t _unused_8:5;             /* Reserved */
    vuint32_t _unused_13:2;            /* Reserved */
    vuint32_t VDD_HV_B_IO_CTRL_LATCH:1; /* Controls the IO controls latching in low frequency RUN mode to reduce power consumption on VDD_HV_B domain pins. */
    vuint32_t STANDBY_IO_CONFIG:1;     /* Controls the IO state in the standby mode. */
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t _unused_18:2;            /* Reserved */
    vuint32_t SUPPLY_MON_EN:1;         /* Enable the supply voltage monitoring by ADC. */
    vuint32_t SUPPLY_MON_SEL:3;        /* Selects the source of voltage which is used by ADC for supply voltage monitoring. */
    vuint32_t VSS_LV_ANMUX_EN:1;       /* Enable for VSS_LV divider for voltage measurement using supply voltage monitoring by ADC. */
    vuint32_t VDD_HV_A_VLT_DVDR_EN:1;  /* Enable for VDD_HV_A divider for voltage measurement using supply voltage monitoring by ADC. */
    vuint32_t VDD_HV_B_VLT_DVDR_EN:1;  /* Enable for VDD_HV_B divider for voltage measurement using supply voltage monitoring by ADC. */
    vuint32_t VDD_1_5_VLT_DVDR_EN:1;   /* Enable for VDD1P5 divider for voltage measurement using supply voltage monitoring by ADC. */
    vuint32_t _unused_28:3;            /* Reserved */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} DCM_GPR_DCMRWF1_tag;

typedef union DCM_GPR_DCMRWF2_union_tag { /* Read Write GPR On Functional Reset Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t _unused_1:2;             /* Reserved */
    vuint32_t DCM_SCAN_BYP_STDBY_EXT:1; /* Control to bypass the DCM scanning on standby exit. */
    vuint32_t FIRC_TRIM_BYP_STDBY_EXT:1; /* Control to bypass the FIRC trimming on standby exit. */
    vuint32_t PMC_TRIM_RGM_DCF__BYP_STDBY_EXT:1; /* Control to bypass the PMC trimming and RGM DCF loading on standby exit. */
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t _unused_7:9;             /* Reserved */
    vuint32_t HSE_GSKT_BYPASS:1;       /* Control to enable the HSE IAHB gasket behavior out of standby mode. */
    vuint32_t _unused_17:15;           /* Reserved */
  } B;
} DCM_GPR_DCMRWF2_tag;

typedef union DCM_GPR_DCMRWF4_union_tag { /* Read Write GPR On Functional Reset Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t MUX_MODE_EN_ADC0_S8:1;   /* Selects the GPIO45 to drive ADC0 standard channel 8th. */
    vuint32_t MUX_MODE_EN_ADC0_S9:1;   /* Selects the GPIO46 to drive ADC0 standard channel 9th. */
    vuint32_t MUX_MODE_EN_ADC1_S14:1;  /* Selects the GPIO32 to drive ADC1 standard channel 14th. */
    vuint32_t MUX_MODE_EN_ADC1_S15:1;  /* Selects the GPIO33 to drive ADC1 standard channel 15th. */
    vuint32_t MUX_MODE_EN_ADC1_S22:1;  /* Selects the GPIO114 to drive ADC1 standard channel 22nd. */
    vuint32_t MUX_MODE_EN_ADC1_S23:1;  /* Selects the GPIO115 to drive ADC1 standard channel 23rd. */
    vuint32_t _unused_7:2;             /* Reserved */
    vuint32_t MUX_MODE_EN_ADC2_S8:1;   /* Selects the GPIO45 to drive adc2 standard channel 8th. */
    vuint32_t MUX_MODE_EN_ADC2_S9:1;   /* Selects the GPIO46 to drive adc2 standard channel 9th. */
    vuint32_t _unused_11:2;            /* Reserved */
    vuint32_t GLITCH_FIL_TRG_IN0_BYP:1; /* Selects whether to BYPASS or filter out the pulse. */
    vuint32_t GLITCH_FIL_TRG_IN1_BYP:1; /* Selects whether to BYPASS or filter out the pulse. */
    vuint32_t GLITCH_FIL_TRG_IN2_BYP:1; /* Selects whether to BYPASS or filter out the pulse. */
    vuint32_t GLITCH_FIL_TRG_IN3_BYP:1; /* Selects whether to BYPASS or filter out the pulse. */
    vuint32_t CM7_0_CPUWAIT:1;
    vuint32_t CM7_1_CPUWAIT:1;
    vuint32_t _unused_19:13;           /* Reserved */
  } B;
} DCM_GPR_DCMRWF4_tag;

typedef union DCM_GPR_DCMRWF5_union_tag { /* Read Write GPR On Functional Reset Register */
  vuint32_t R;
  struct {
    vuint32_t BOOT_ADDRESS:32;         /* SBAF application boot address after standby exit. */
  } B;
} DCM_GPR_DCMRWF5_tag;

typedef union DCM_GPR_DCMROPP1_union_tag { /* Read Only GPR On PMCPOR Reset */
  vuint32_t R;
  struct {
    vuint32_t POR_WDG_STAT0:1;         /* This bit captures the status of functional reset sequence process FUNC0 when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT1:1;         /* This bit captures the status of functional reset sequence process FUNC1 when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT2:1;         /* This bit captures the status of functional reset sequence process FUNC2 when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT3:1;         /* This bit captures the status of functional reset sequence process FUNC3 when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT4:1;         /* This bit captures the status of functional reset sequence process FUNC4 when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT5:1;         /* This bit captures the status of functional reset sequence process FUNC5 when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT6:1;         /* This bit captures the status of functional reset sequence process FUNC6 when POR_WDG overflows. */
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t _unused_8:1;             /* Reserved */
    vuint32_t _unused_9:1;             /* Reserved */
    vuint32_t POR_WDG_STAT10:1;        /* This bit captures the status of functional reset sequence process FUNC7 when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT11:1;        /* This bit captures the status of functional reset sequence process FUNC7 when POR_WDG overflows. */
    vuint32_t _unused_12:1;            /* Reserved */
    vuint32_t _unused_13:1;            /* Reserved */
    vuint32_t POR_WDG_STAT14:1;        /* This bit captures the status of functional reset sequence process FUNC9 when POR_WDG overflows. */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t POR_WDG_STAT17:1;        /* This bit captures the status of functional reset sequence process FUNC10 when POR_WDG overflows. */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t POR_WDG_STAT20:1;        /* This bit captures the status of functional reset sequence process DEST0 when POR_WDG overflows. */
    vuint32_t _unused_21:1;            /* Reserved */
    vuint32_t _unused_22:1;            /* Reserved */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t _unused_25:1;            /* Reserved */
    vuint32_t _unused_26:1;            /* Reserved */
    vuint32_t _unused_27:1;            /* Reserved */
    vuint32_t _unused_28:1;            /* Reserved */
    vuint32_t POR_WDG_STAT29:1;        /* This bit captures the status of standby entry request initiated by MC_ME when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT30:1;        /* This bit captures the status of standby exit acknowledgement by MC_PCU when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT31:1;        /* This bit captures MC_RGM reset event (if occured) while the device is in STANDBY mode. */
  } B;
} DCM_GPR_DCMROPP1_tag;

typedef union DCM_GPR_DCMROPP2_union_tag { /* Read Only GPR On PMCPOR Reset */
  vuint32_t R;
  struct {
    vuint32_t POR_WDG_STAT32:1;        /* This bit captures MC_RGM functional/external event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT33:1;        /* This bit captures MC_RGM functional/external event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT34:1;        /* This bit captures MC_RGM functional/external event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT35:1;        /* This bit captures MC_RGM functional/external event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT36:1;        /* This bit captures MC_RGM functional/external event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT37:1;        /* This bit captures MC_RGM functional/external event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT38:1;        /* This bit captures MC_RGM functional/external event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT39:1;        /* This bit captures MC_RGM functional/external event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT40:1;        /* This bit captures MC_RGM functional/external event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT41:1;        /* This bit captures MC_RGM functional/external event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT42:1;        /* This bit captures MC_RGM functional/external event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT43:1;        /* This bit captures MC_RGM functional/external event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT44:1;        /* This bit captures MC_RGM functional/external event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT45:1;        /* This bit captures MC_RGM functional/external event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT46:1;        /* This bit captures MC_RGM functional/external event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT47:1;        /* This bit captures MC_RGM functional/external event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT48:1;        /* This bit captures MC_RGM functional/external event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT49:1;        /* This bit captures MC_RGM functional/external event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT50:1;        /* This bit captures MC_RGM functional/external event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT51:1;        /* This bit captures MC_RGM functional/external event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT52:1;        /* This bit captures MC_RGM functional/external event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT53:1;        /* This bit captures MC_RGM functional/external event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT54:1;        /* This bit captures MC_RGM functional/external event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT55:1;        /* This bit captures MC_RGM functional/external event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT56:1;        /* This bit captures MC_RGM functional/external event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT57:1;        /* This bit captures MC_RGM functional/external event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT58:1;        /* This bit captures MC_RGM functional/external event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT59:1;        /* This bit captures MC_RGM functional/external event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT60:1;        /* This bit captures MC_RGM functional/external event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT61:1;        /* This bit captures MC_RGM functional/external event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT62:1;        /* This bit captures MC_RGM functional/external event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT63:1;        /* This bit captures MC_RGM functional/external event status register when POR_WDG overflows. */
  } B;
} DCM_GPR_DCMROPP2_tag;

typedef union DCM_GPR_DCMROPP3_union_tag { /* Read Only GPR On PMCPOR Reset */
  vuint32_t R;
  struct {
    vuint32_t POR_WDG_STAT64:1;        /* This bit captures MC_RGM destructive event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT65:1;        /* This bit captures MC_RGM destructive event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT66:1;        /* This bit captures MC_RGM destructive event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT67:1;        /* This bit captures MC_RGM destructive event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT68:1;        /* This bit captures MC_RGM destructive event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT69:1;        /* This bit captures MC_RGM destructive event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT70:1;        /* This bit captures MC_RGM destructive event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT71:1;        /* This bit captures MC_RGM destructive event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT72:1;        /* This bit captures MC_RGM destructive event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT73:1;        /* This bit captures MC_RGM destructive event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT74:1;        /* This bit captures MC_RGM destructive event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT75:1;        /* This bit captures MC_RGM destructive event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT76:1;        /* This bit captures MC_RGM destructive event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT77:1;        /* This bit captures MC_RGM destructive event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT78:1;        /* This bit captures MC_RGM destructive event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT79:1;        /* This bit captures MC_RGM destructive event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT80:1;        /* This bit captures MC_RGM destructive event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT81:1;        /* This bit captures MC_RGM destructive event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT82:1;        /* This bit captures MC_RGM destructive event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT83:1;        /* This bit captures MC_RGM destructive event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT84:1;        /* This bit captures MC_RGM destructive event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT85:1;        /* This bit captures MC_RGM destructive event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT86:1;        /* This bit captures MC_RGM destructive event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT87:1;        /* This bit captures MC_RGM destructive event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT88:1;        /* This bit captures MC_RGM destructive event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT89:1;        /* This bit captures MC_RGM destructive event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT90:1;        /* This bit captures MC_RGM destructive event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT91:1;        /* This bit captures MC_RGM destructive event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT92:1;        /* This bit captures MC_RGM destructive event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT93:1;        /* This bit captures MC_RGM destructive event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT94:1;        /* This bit captures MC_RGM destructive event status register when POR_WDG overflows. */
    vuint32_t POR_WDG_STAT95:1;        /* This bit captures MC_RGM destructive event status register when POR_WDG overflows. */
  } B;
} DCM_GPR_DCMROPP3_tag;

typedef union DCM_GPR_DCMROPP4_union_tag { /* Read Only GPR On PMCPOR Reset */
  vuint32_t R;
  struct {
    vuint32_t POR_WDG_STAT96:1;        /* This bit captures POR_WDG reset event if POR_WDG initiates a POR sequence. */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} DCM_GPR_DCMROPP4_tag;

struct DCM_GPR_tag {
  uint8_t DCM_GPR_reserved0[512];
  DCM_GPR_DCMROD1_tag DCMROD1;         /* Read Only GPR On Destructive Reset Register */
  uint8_t DCM_GPR_reserved1[4];
  DCM_GPR_DCMROD3_tag DCMROD3;         /* Read Only GPR On Destructive Reset Register */
  DCM_GPR_DCMROD4_tag DCMROD4;         /* Read Only GPR On Destructive Reset Register */
  DCM_GPR_DCMROD5_tag DCMROD5;         /* Read Only GPR On Destructive Reset Register */
  uint8_t DCM_GPR_reserved2[236];
  DCM_GPR_DCMROF1_tag DCMROF1;         /* Read Only GPR On Functional Reset Register */
  DCM_GPR_DCMROF2_tag DCMROF2;         /* Read Only GPR On Functional Reset Register */
  DCM_GPR_DCMROF3_tag DCMROF3;         /* Read Only GPR On Functional Reset Register */
  DCM_GPR_DCMROF4_tag DCMROF4;         /* Read Only GPR On Functional Reset Register */
  DCM_GPR_DCMROF5_tag DCMROF5;         /* Read Only GPR On Functional Reset Register */
  DCM_GPR_DCMROF6_tag DCMROF6;         /* Read Only GPR On Functional Reset Register */
  DCM_GPR_DCMROF7_tag DCMROF7;         /* Read Only GPR On Functional Reset Register */
  DCM_GPR_DCMROF8_tag DCMROF8;         /* Read Only GPR On Functional Reset Register */
  DCM_GPR_DCMROF9_tag DCMROF9;         /* Read Only GPR On Functional Reset Register */
  DCM_GPR_DCMROF10_tag DCMROF10;       /* Read Only GPR On Functional Reset Register */
  DCM_GPR_DCMROF11_tag DCMROF11;       /* Read Only GPR On Functional Reset Register */
  DCM_GPR_DCMROF12_tag DCMROF12;       /* Read Only GPR On Functional Reset Register */
  DCM_GPR_DCMROF13_tag DCMROF13;       /* Read Only GPR On Functional Reset Register */
  DCM_GPR_DCMROF14_tag DCMROF14;       /* Read Only GPR On Functional Reset Register */
  DCM_GPR_DCMROF15_tag DCMROF15;       /* Read Only GPR On Functional Reset Register */
  DCM_GPR_DCMROF16_tag DCMROF16;       /* Read Only GPR On Functional Reset Register */
  DCM_GPR_DCMROF17_tag DCMROF17;       /* Read Only GPR On Functional Reset Register */
  uint8_t DCM_GPR_reserved3[4];
  DCM_GPR_DCMROF19_tag DCMROF19;       /* Read Only GPR On Functional Reset Register */
  DCM_GPR_DCMROF20_tag DCMROF20;       /* Read Only GPR On Functional Reset Register */
  DCM_GPR_DCMROF21_tag DCMROF21;       /* Read Only GPR On Functional Reset Register */
  uint8_t DCM_GPR_reserved4[172];
  DCM_GPR_DCMRWP1_tag DCMRWP1;         /* Read Write GPR On Power On Reset Register */
  uint8_t DCM_GPR_reserved5[4];
  DCM_GPR_DCMRWP3_tag DCMRWP3;         /* Read Write GPR On Power On Reset Register */
  uint8_t DCM_GPR_reserved6[248];
  DCM_GPR_DCMRWD2_tag DCMRWD2;         /* Read Write GPR On Destructive Reset Register */
  DCM_GPR_DCMRWD3_tag DCMRWD3;         /* Read Write GPR On Destructive Reset Register */
  DCM_GPR_DCMRWD4_tag DCMRWD4;         /* Read Write GPR On Destructive Reset Register */
  DCM_GPR_DCMRWD5_tag DCMRWD5;         /* Read Write GPR On Destructive Reset Register */
  DCM_GPR_DCMRWD6_tag DCMRWD6;         /* Read Write GPR On Destructive Reset Register */
  DCM_GPR_DCMRWD7_tag DCMRWD7;         /* Read Write GPR On Destructive Reset Register */
  DCM_GPR_DCMRWD8_tag DCMRWD8;         /* Read Write GPR On Destructive Reset Register */
  DCM_GPR_DCMRWD9_tag DCMRWD9;         /* Read Write GPR On Destructive Reset Register */
  uint8_t DCM_GPR_reserved7[220];
  DCM_GPR_DCMRWF1_tag DCMRWF1;         /* Read Write GPR On Functional Reset Register */
  DCM_GPR_DCMRWF2_tag DCMRWF2;         /* Read Write GPR On Functional Reset Register */
  uint8_t DCM_GPR_reserved8[4];
  DCM_GPR_DCMRWF4_tag DCMRWF4;         /* Read Write GPR On Functional Reset Register */
  DCM_GPR_DCMRWF5_tag DCMRWF5;         /* Read Write GPR On Functional Reset Register */
  uint8_t DCM_GPR_reserved9[236];
  DCM_GPR_DCMROPP1_tag DCMROPP1;       /* Read Only GPR On PMCPOR Reset */
  DCM_GPR_DCMROPP2_tag DCMROPP2;       /* Read Only GPR On PMCPOR Reset */
  DCM_GPR_DCMROPP3_tag DCMROPP3;       /* Read Only GPR On PMCPOR Reset */
  DCM_GPR_DCMROPP4_tag DCMROPP4;       /* Read Only GPR On PMCPOR Reset */
};


/* ============================================================================
   =============================== Module: DMAMUX =============================
   ============================================================================ */

typedef union DMAMUX_CHCFG_union_tag { /* Channel Configuration register */
  vuint8_t R;
  struct {
    vuint8_t SOURCE:6;                 /* DMA Channel Source (Slot) */
    vuint8_t TRIG:1;                   /* DMA Channel Trigger Enable */
    vuint8_t ENBL:1;                   /* DMA Channel Enable */
  } B;
} DMAMUX_CHCFG_tag;

struct DMAMUX_tag {
  DMAMUX_CHCFG_tag CHCFG[16];          /* Channel Configuration register */
};


/* ============================================================================
   =============================== Module: EIM ================================
   ============================================================================ */

typedef union EIM_EIMCR_union_tag {    /* Error Injection Module Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t GEIEN:1;                 /* Global Error Injection Enable */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} EIM_EIMCR_tag;

typedef union EIM_EICHEN_union_tag {   /* Error Injection Channel Enable register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t EICH30EN:1;              /* Error Injection Channel 30 Enable */
    vuint32_t EICH29EN:1;              /* Error Injection Channel 29 Enable */
    vuint32_t EICH28EN:1;              /* Error Injection Channel 28 Enable */
    vuint32_t EICH27EN:1;              /* Error Injection Channel 27 Enable */
    vuint32_t EICH26EN:1;              /* Error Injection Channel 26 Enable */
    vuint32_t EICH25EN:1;              /* Error Injection Channel 25 Enable */
    vuint32_t EICH24EN:1;              /* Error Injection Channel 24 Enable */
    vuint32_t EICH23EN:1;              /* Error Injection Channel 23 Enable */
    vuint32_t EICH22EN:1;              /* Error Injection Channel 22 Enable */
    vuint32_t EICH21EN:1;              /* Error Injection Channel 21 Enable */
    vuint32_t EICH20EN:1;              /* Error Injection Channel 20 Enable */
    vuint32_t EICH19EN:1;              /* Error Injection Channel 19 Enable */
    vuint32_t EICH18EN:1;              /* Error Injection Channel 18 Enable */
    vuint32_t EICH17EN:1;              /* Error Injection Channel 17 Enable */
    vuint32_t EICH16EN:1;              /* Error Injection Channel 16 Enable */
    vuint32_t EICH15EN:1;              /* Error Injection Channel 15 Enable */
    vuint32_t EICH14EN:1;              /* Error Injection Channel 14 Enable */
    vuint32_t EICH13EN:1;              /* Error Injection Channel 13 Enable */
    vuint32_t EICH12EN:1;              /* Error Injection Channel 12 Enable */
    vuint32_t EICH11EN:1;              /* Error Injection Channel 11 Enable */
    vuint32_t EICH10EN:1;              /* Error Injection Channel 10 Enable */
    vuint32_t EICH9EN:1;               /* Error Injection Channel 9 Enable */
    vuint32_t EICH8EN:1;               /* Error Injection Channel 8 Enable */
    vuint32_t EICH7EN:1;               /* Error Injection Channel 7 Enable */
    vuint32_t EICH6EN:1;               /* Error Injection Channel 6 Enable */
    vuint32_t EICH5EN:1;               /* Error Injection Channel 5 Enable */
    vuint32_t EICH4EN:1;               /* Error Injection Channel 4 Enable */
    vuint32_t EICH3EN:1;               /* Error Injection Channel 3 Enable */
    vuint32_t EICH2EN:1;               /* Error Injection Channel 2 Enable */
    vuint32_t EICH1EN:1;               /* Error Injection Channel 1 Enable */
    vuint32_t EICH0EN:1;               /* Error Injection Channel 0 Enable */
  } B;
} EIM_EICHEN_tag;

typedef union EIM_EICHD0_WORD0_union_tag { /* Error Injection Channel Descriptor n, Word0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;
    vuint32_t CHKBIT_MASK:8;           /* Checkbit Mask */
  } B;
} EIM_EICHD0_WORD0_tag;

typedef union EIM_EICHD0_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:32;        /* Data Mask Bytes 0-3 */
  } B;
} EIM_EICHD0_WORD1_tag;

typedef union EIM_EICHD0_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD0_WORD2_tag;

typedef union EIM_EICHD1_WORD0_union_tag { /* Error Injection Channel Descriptor n, Word0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;
    vuint32_t CHKBIT_MASK:8;           /* Checkbit Mask */
  } B;
} EIM_EICHD1_WORD0_tag;

typedef union EIM_EICHD1_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:32;        /* Data Mask Bytes 0-3 */
  } B;
} EIM_EICHD1_WORD1_tag;

typedef union EIM_EICHD1_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD1_WORD2_tag;

typedef union EIM_EICHD2_WORD0_union_tag { /* Error Injection Channel Descriptor n, Word0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;
    vuint32_t CHKBIT_MASK:8;           /* Checkbit Mask */
  } B;
} EIM_EICHD2_WORD0_tag;

typedef union EIM_EICHD2_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:32;        /* Data Mask Bytes 0-3 */
  } B;
} EIM_EICHD2_WORD1_tag;

typedef union EIM_EICHD2_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD2_WORD2_tag;

typedef union EIM_EICHD3_WORD0_union_tag { /* Error Injection Channel Descriptor n, Word0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:18;
    vuint32_t CHKBIT_MASK:14;          /* Checkbit Mask */
  } B;
} EIM_EICHD3_WORD0_tag;

typedef union EIM_EICHD3_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:12;        /* Data Mask Bytes 0-3 */
    vuint32_t _unused_12:20;
  } B;
} EIM_EICHD3_WORD1_tag;

typedef union EIM_EICHD3_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD3_WORD2_tag;

typedef union EIM_EICHD4_WORD0_union_tag { /* Error Injection Channel Descriptor n, Word0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t CHKBIT_MASK:16;          /* Checkbit Mask */
  } B;
} EIM_EICHD4_WORD0_tag;

typedef union EIM_EICHD4_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:32;        /* Data Mask Bytes 0-3 */
  } B;
} EIM_EICHD4_WORD1_tag;

typedef union EIM_EICHD4_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD4_WORD2_tag;

typedef union EIM_EICHD4_WORD3_union_tag { /* Error Injection Channel Descriptor n, Word3 */
  vuint32_t R;
  struct {
    vuint32_t B8_11DATA_MASK:32;       /* Data Mask Bytes 8-11 */
  } B;
} EIM_EICHD4_WORD3_tag;

typedef union EIM_EICHD4_WORD4_union_tag { /* Error Injection Channel Descriptor n, Word4 */
  vuint32_t R;
  struct {
    vuint32_t B12_15DATA_MASK:32;      /* Data Mask Bytes 12-15 */
  } B;
} EIM_EICHD4_WORD4_tag;

typedef union EIM_EICHD5_WORD0_union_tag { /* Error Injection Channel Descriptor n, Word0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:4;
    vuint32_t CHKBIT_MASK:28;          /* Checkbit Mask */
  } B;
} EIM_EICHD5_WORD0_tag;

typedef union EIM_EICHD5_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:8;         /* Data Mask Bytes 0-3 */
    vuint32_t _unused_8:24;
  } B;
} EIM_EICHD5_WORD1_tag;

typedef union EIM_EICHD5_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD5_WORD2_tag;

typedef union EIM_EICHD5_WORD3_union_tag { /* Error Injection Channel Descriptor n, Word3 */
  vuint32_t R;
  struct {
    vuint32_t B8_11DATA_MASK:32;       /* Data Mask Bytes 8-11 */
  } B;
} EIM_EICHD5_WORD3_tag;

typedef union EIM_EICHD5_WORD4_union_tag { /* Error Injection Channel Descriptor n, Word4 */
  vuint32_t R;
  struct {
    vuint32_t B12_15DATA_MASK:32;      /* Data Mask Bytes 12-15 */
  } B;
} EIM_EICHD5_WORD4_tag;

typedef union EIM_EICHD6_WORD0_union_tag { /* Error Injection Channel Descriptor n, Word0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:4;
    vuint32_t CHKBIT_MASK:28;          /* Checkbit Mask */
  } B;
} EIM_EICHD6_WORD0_tag;

typedef union EIM_EICHD6_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:32;        /* Data Mask Bytes 0-3 */
  } B;
} EIM_EICHD6_WORD1_tag;

typedef union EIM_EICHD6_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD6_WORD2_tag;

typedef union EIM_EICHD6_WORD3_union_tag { /* Error Injection Channel Descriptor n, Word3 */
  vuint32_t R;
  struct {
    vuint32_t B8_11DATA_MASK:32;       /* Data Mask Bytes 8-11 */
  } B;
} EIM_EICHD6_WORD3_tag;

typedef union EIM_EICHD6_WORD4_union_tag { /* Error Injection Channel Descriptor n, Word4 */
  vuint32_t R;
  struct {
    vuint32_t B12_15DATA_MASK:32;      /* Data Mask Bytes 12-15 */
  } B;
} EIM_EICHD6_WORD4_tag;

typedef union EIM_EICHD7_WORD0_union_tag { /* Error Injection Channel Descriptor n, Word0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:4;
    vuint32_t CHKBIT_MASK:28;          /* Checkbit Mask */
  } B;
} EIM_EICHD7_WORD0_tag;

typedef union EIM_EICHD7_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:32;        /* Data Mask Bytes 0-3 */
  } B;
} EIM_EICHD7_WORD1_tag;

typedef union EIM_EICHD7_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD7_WORD2_tag;

typedef union EIM_EICHD7_WORD3_union_tag { /* Error Injection Channel Descriptor n, Word3 */
  vuint32_t R;
  struct {
    vuint32_t B8_11DATA_MASK:32;       /* Data Mask Bytes 8-11 */
  } B;
} EIM_EICHD7_WORD3_tag;

typedef union EIM_EICHD7_WORD4_union_tag { /* Error Injection Channel Descriptor n, Word4 */
  vuint32_t R;
  struct {
    vuint32_t B12_15DATA_MASK:32;      /* Data Mask Bytes 12-15 */
  } B;
} EIM_EICHD7_WORD4_tag;

typedef union EIM_EICHD8_WORD0_union_tag { /* Error Injection Channel Descriptor n, Word0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:18;
    vuint32_t CHKBIT_MASK:14;          /* Checkbit Mask */
  } B;
} EIM_EICHD8_WORD0_tag;

typedef union EIM_EICHD8_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:12;        /* Data Mask Bytes 0-3 */
    vuint32_t _unused_12:20;
  } B;
} EIM_EICHD8_WORD1_tag;

typedef union EIM_EICHD8_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD8_WORD2_tag;

typedef union EIM_EICHD9_WORD0_union_tag { /* Error Injection Channel Descriptor n, Word0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t CHKBIT_MASK:16;          /* Checkbit Mask */
  } B;
} EIM_EICHD9_WORD0_tag;

typedef union EIM_EICHD9_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:32;        /* Data Mask Bytes 0-3 */
  } B;
} EIM_EICHD9_WORD1_tag;

typedef union EIM_EICHD9_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD9_WORD2_tag;

typedef union EIM_EICHD9_WORD3_union_tag { /* Error Injection Channel Descriptor n, Word3 */
  vuint32_t R;
  struct {
    vuint32_t B8_11DATA_MASK:32;       /* Data Mask Bytes 8-11 */
  } B;
} EIM_EICHD9_WORD3_tag;

typedef union EIM_EICHD9_WORD4_union_tag { /* Error Injection Channel Descriptor n, Word4 */
  vuint32_t R;
  struct {
    vuint32_t B12_15DATA_MASK:32;      /* Data Mask Bytes 12-15 */
  } B;
} EIM_EICHD9_WORD4_tag;

typedef union EIM_EICHD10_WORD0_union_tag { /* Error Injection Channel Descriptor n, Word0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:4;
    vuint32_t CHKBIT_MASK:28;          /* Checkbit Mask */
  } B;
} EIM_EICHD10_WORD0_tag;

typedef union EIM_EICHD10_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:8;         /* Data Mask Bytes 0-3 */
    vuint32_t _unused_8:24;
  } B;
} EIM_EICHD10_WORD1_tag;

typedef union EIM_EICHD10_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD10_WORD2_tag;

typedef union EIM_EICHD10_WORD3_union_tag { /* Error Injection Channel Descriptor n, Word3 */
  vuint32_t R;
  struct {
    vuint32_t B8_11DATA_MASK:32;       /* Data Mask Bytes 8-11 */
  } B;
} EIM_EICHD10_WORD3_tag;

typedef union EIM_EICHD10_WORD4_union_tag { /* Error Injection Channel Descriptor n, Word4 */
  vuint32_t R;
  struct {
    vuint32_t B12_15DATA_MASK:32;      /* Data Mask Bytes 12-15 */
  } B;
} EIM_EICHD10_WORD4_tag;

typedef union EIM_EICHD11_WORD0_union_tag { /* Error Injection Channel Descriptor n, Word0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:4;
    vuint32_t CHKBIT_MASK:28;          /* Checkbit Mask */
  } B;
} EIM_EICHD11_WORD0_tag;

typedef union EIM_EICHD11_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:32;        /* Data Mask Bytes 0-3 */
  } B;
} EIM_EICHD11_WORD1_tag;

typedef union EIM_EICHD11_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD11_WORD2_tag;

typedef union EIM_EICHD11_WORD3_union_tag { /* Error Injection Channel Descriptor n, Word3 */
  vuint32_t R;
  struct {
    vuint32_t B8_11DATA_MASK:32;       /* Data Mask Bytes 8-11 */
  } B;
} EIM_EICHD11_WORD3_tag;

typedef union EIM_EICHD11_WORD4_union_tag { /* Error Injection Channel Descriptor n, Word4 */
  vuint32_t R;
  struct {
    vuint32_t B12_15DATA_MASK:32;      /* Data Mask Bytes 12-15 */
  } B;
} EIM_EICHD11_WORD4_tag;

typedef union EIM_EICHD12_WORD0_union_tag { /* Error Injection Channel Descriptor n, Word0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:4;
    vuint32_t CHKBIT_MASK:28;          /* Checkbit Mask */
  } B;
} EIM_EICHD12_WORD0_tag;

typedef union EIM_EICHD12_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:32;        /* Data Mask Bytes 0-3 */
  } B;
} EIM_EICHD12_WORD1_tag;

typedef union EIM_EICHD12_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD12_WORD2_tag;

typedef union EIM_EICHD12_WORD3_union_tag { /* Error Injection Channel Descriptor n, Word3 */
  vuint32_t R;
  struct {
    vuint32_t B8_11DATA_MASK:32;       /* Data Mask Bytes 8-11 */
  } B;
} EIM_EICHD12_WORD3_tag;

typedef union EIM_EICHD12_WORD4_union_tag { /* Error Injection Channel Descriptor n, Word4 */
  vuint32_t R;
  struct {
    vuint32_t B12_15DATA_MASK:32;      /* Data Mask Bytes 12-15 */
  } B;
} EIM_EICHD12_WORD4_tag;

typedef union EIM_EICHD13_WORD0_union_tag { /* Error Injection Channel Descriptor n, Word0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;
    vuint32_t CHKBIT_MASK:8;           /* Checkbit Mask */
  } B;
} EIM_EICHD13_WORD0_tag;

typedef union EIM_EICHD13_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:32;        /* Data Mask Bytes 0-3 */
  } B;
} EIM_EICHD13_WORD1_tag;

typedef union EIM_EICHD13_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD13_WORD2_tag;

typedef union EIM_EICHD14_WORD0_union_tag { /* Error Injection Channel Descriptor n, Word0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;
    vuint32_t CHKBIT_MASK:8;           /* Checkbit Mask */
  } B;
} EIM_EICHD14_WORD0_tag;

typedef union EIM_EICHD14_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:32;        /* Data Mask Bytes 0-3 */
  } B;
} EIM_EICHD14_WORD1_tag;

typedef union EIM_EICHD15_WORD0_union_tag { /* Error Injection Channel Descriptor n, Word0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;
    vuint32_t CHKBIT_MASK:8;           /* Checkbit Mask */
  } B;
} EIM_EICHD15_WORD0_tag;

typedef union EIM_EICHD15_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:32;        /* Data Mask Bytes 0-3 */
  } B;
} EIM_EICHD15_WORD1_tag;

typedef union EIM_EICHD16_WORD0_union_tag { /* Error Injection Channel Descriptor n, Word0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;
    vuint32_t CHKBIT_MASK:8;           /* Checkbit Mask */
  } B;
} EIM_EICHD16_WORD0_tag;

typedef union EIM_EICHD16_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:32;        /* Data Mask Bytes 0-3 */
  } B;
} EIM_EICHD16_WORD1_tag;

typedef union EIM_EICHD16_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD16_WORD2_tag;

typedef union EIM_EICHD17_WORD0_union_tag { /* Error Injection Channel Descriptor n, Word0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;
    vuint32_t CHKBIT_MASK:8;           /* Checkbit Mask */
  } B;
} EIM_EICHD17_WORD0_tag;

typedef union EIM_EICHD17_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:32;        /* Data Mask Bytes 0-3 */
  } B;
} EIM_EICHD17_WORD1_tag;

typedef union EIM_EICHD18_WORD0_union_tag { /* Error Injection Channel Descriptor n, Word0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;
    vuint32_t CHKBIT_MASK:8;           /* Checkbit Mask */
  } B;
} EIM_EICHD18_WORD0_tag;

typedef union EIM_EICHD18_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:32;        /* Data Mask Bytes 0-3 */
  } B;
} EIM_EICHD18_WORD1_tag;

typedef union EIM_EICHD19_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:28;        /* Data Mask Bytes 0-3 */
    vuint32_t _unused_28:4;
  } B;
} EIM_EICHD19_WORD1_tag;

typedef union EIM_EICHD19_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD19_WORD2_tag;

typedef union EIM_EICHD19_WORD3_union_tag { /* Error Injection Channel Descriptor n, Word3 */
  vuint32_t R;
  struct {
    vuint32_t B8_11DATA_MASK:32;       /* Data Mask Bytes 8-11 */
  } B;
} EIM_EICHD19_WORD3_tag;

typedef union EIM_EICHD19_WORD4_union_tag { /* Error Injection Channel Descriptor n, Word4 */
  vuint32_t R;
  struct {
    vuint32_t B12_15DATA_MASK:32;      /* Data Mask Bytes 12-15 */
  } B;
} EIM_EICHD19_WORD4_tag;

typedef union EIM_EICHD19_WORD5_union_tag { /* Error Injection Channel Descriptor n, Word5 */
  vuint32_t R;
  struct {
    vuint32_t B16_19DATA_MASK:32;      /* Data Mask Bytes 16-19 */
  } B;
} EIM_EICHD19_WORD5_tag;

typedef union EIM_EICHD19_WORD6_union_tag { /* Error Injection Channel Descriptor n, Word6 */
  vuint32_t R;
  struct {
    vuint32_t B20_23DATA_MASK:32;      /* Data Mask Bytes 20-23 */
  } B;
} EIM_EICHD19_WORD6_tag;

typedef union EIM_EICHD20_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:28;        /* Data Mask Bytes 0-3 */
    vuint32_t _unused_28:4;
  } B;
} EIM_EICHD20_WORD1_tag;

typedef union EIM_EICHD20_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD20_WORD2_tag;

typedef union EIM_EICHD20_WORD3_union_tag { /* Error Injection Channel Descriptor n, Word3 */
  vuint32_t R;
  struct {
    vuint32_t B8_11DATA_MASK:32;       /* Data Mask Bytes 8-11 */
  } B;
} EIM_EICHD20_WORD3_tag;

typedef union EIM_EICHD20_WORD4_union_tag { /* Error Injection Channel Descriptor n, Word4 */
  vuint32_t R;
  struct {
    vuint32_t B12_15DATA_MASK:32;      /* Data Mask Bytes 12-15 */
  } B;
} EIM_EICHD20_WORD4_tag;

typedef union EIM_EICHD20_WORD5_union_tag { /* Error Injection Channel Descriptor n, Word5 */
  vuint32_t R;
  struct {
    vuint32_t B16_19DATA_MASK:32;      /* Data Mask Bytes 16-19 */
  } B;
} EIM_EICHD20_WORD5_tag;

typedef union EIM_EICHD20_WORD6_union_tag { /* Error Injection Channel Descriptor n, Word6 */
  vuint32_t R;
  struct {
    vuint32_t B20_23DATA_MASK:32;      /* Data Mask Bytes 20-23 */
  } B;
} EIM_EICHD20_WORD6_tag;

typedef union EIM_EICHD21_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:28;        /* Data Mask Bytes 0-3 */
    vuint32_t _unused_28:4;
  } B;
} EIM_EICHD21_WORD1_tag;

typedef union EIM_EICHD21_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD21_WORD2_tag;

typedef union EIM_EICHD22_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:28;        /* Data Mask Bytes 0-3 */
    vuint32_t _unused_28:4;
  } B;
} EIM_EICHD22_WORD1_tag;

typedef union EIM_EICHD22_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD22_WORD2_tag;

typedef union EIM_EICHD23_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:28;        /* Data Mask Bytes 0-3 */
    vuint32_t _unused_28:4;
  } B;
} EIM_EICHD23_WORD1_tag;

typedef union EIM_EICHD23_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD23_WORD2_tag;

typedef union EIM_EICHD24_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:28;        /* Data Mask Bytes 0-3 */
    vuint32_t _unused_28:4;
  } B;
} EIM_EICHD24_WORD1_tag;

typedef union EIM_EICHD24_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD24_WORD2_tag;

typedef union EIM_EICHD25_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:28;        /* Data Mask Bytes 0-3 */
    vuint32_t _unused_28:4;
  } B;
} EIM_EICHD25_WORD1_tag;

typedef union EIM_EICHD25_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD25_WORD2_tag;

typedef union EIM_EICHD26_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:28;        /* Data Mask Bytes 0-3 */
    vuint32_t _unused_28:4;
  } B;
} EIM_EICHD26_WORD1_tag;

typedef union EIM_EICHD26_WORD2_union_tag { /* Error Injection Channel Descriptor n, Word2 */
  vuint32_t R;
  struct {
    vuint32_t B4_7DATA_MASK:32;        /* Data Mask Bytes 4-7 */
  } B;
} EIM_EICHD26_WORD2_tag;

typedef union EIM_EICHD27_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:30;        /* Data Mask Bytes 0-3 */
    vuint32_t _unused_30:2;
  } B;
} EIM_EICHD27_WORD1_tag;

typedef union EIM_EICHD28_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:24;        /* Data Mask Bytes 0-3 */
    vuint32_t _unused_24:8;
  } B;
} EIM_EICHD28_WORD1_tag;

typedef union EIM_EICHD29_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:18;        /* Data Mask Bytes 0-3 */
    vuint32_t _unused_18:14;
  } B;
} EIM_EICHD29_WORD1_tag;

typedef union EIM_EICHD30_WORD1_union_tag { /* Error Injection Channel Descriptor n, Word1 */
  vuint32_t R;
  struct {
    vuint32_t B0_3DATA_MASK:18;        /* Data Mask Bytes 0-3 */
    vuint32_t _unused_18:14;
  } B;
} EIM_EICHD30_WORD1_tag;

struct EIM_tag {
  EIM_EIMCR_tag EIMCR;                 /* Error Injection Module Configuration Register */
  EIM_EICHEN_tag EICHEN;               /* Error Injection Channel Enable register */
  uint8_t EIM_reserved0[248];
  EIM_EICHD0_WORD0_tag EICHD0_WORD0;   /* Error Injection Channel Descriptor n, Word0 */
  EIM_EICHD0_WORD1_tag EICHD0_WORD1;   /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD0_WORD2_tag EICHD0_WORD2;   /* Error Injection Channel Descriptor n, Word2 */
  uint8_t EIM_reserved1[52];
  EIM_EICHD1_WORD0_tag EICHD1_WORD0;   /* Error Injection Channel Descriptor n, Word0 */
  EIM_EICHD1_WORD1_tag EICHD1_WORD1;   /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD1_WORD2_tag EICHD1_WORD2;   /* Error Injection Channel Descriptor n, Word2 */
  uint8_t EIM_reserved2[52];
  EIM_EICHD2_WORD0_tag EICHD2_WORD0;   /* Error Injection Channel Descriptor n, Word0 */
  EIM_EICHD2_WORD1_tag EICHD2_WORD1;   /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD2_WORD2_tag EICHD2_WORD2;   /* Error Injection Channel Descriptor n, Word2 */
  uint8_t EIM_reserved3[52];
  EIM_EICHD3_WORD0_tag EICHD3_WORD0;   /* Error Injection Channel Descriptor n, Word0 */
  EIM_EICHD3_WORD1_tag EICHD3_WORD1;   /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD3_WORD2_tag EICHD3_WORD2;   /* Error Injection Channel Descriptor n, Word2 */
  uint8_t EIM_reserved4[52];
  EIM_EICHD4_WORD0_tag EICHD4_WORD0;   /* Error Injection Channel Descriptor n, Word0 */
  EIM_EICHD4_WORD1_tag EICHD4_WORD1;   /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD4_WORD2_tag EICHD4_WORD2;   /* Error Injection Channel Descriptor n, Word2 */
  EIM_EICHD4_WORD3_tag EICHD4_WORD3;   /* Error Injection Channel Descriptor n, Word3 */
  EIM_EICHD4_WORD4_tag EICHD4_WORD4;   /* Error Injection Channel Descriptor n, Word4 */
  uint8_t EIM_reserved5[44];
  EIM_EICHD5_WORD0_tag EICHD5_WORD0;   /* Error Injection Channel Descriptor n, Word0 */
  EIM_EICHD5_WORD1_tag EICHD5_WORD1;   /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD5_WORD2_tag EICHD5_WORD2;   /* Error Injection Channel Descriptor n, Word2 */
  EIM_EICHD5_WORD3_tag EICHD5_WORD3;   /* Error Injection Channel Descriptor n, Word3 */
  EIM_EICHD5_WORD4_tag EICHD5_WORD4;   /* Error Injection Channel Descriptor n, Word4 */
  uint8_t EIM_reserved6[44];
  EIM_EICHD6_WORD0_tag EICHD6_WORD0;   /* Error Injection Channel Descriptor n, Word0 */
  EIM_EICHD6_WORD1_tag EICHD6_WORD1;   /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD6_WORD2_tag EICHD6_WORD2;   /* Error Injection Channel Descriptor n, Word2 */
  EIM_EICHD6_WORD3_tag EICHD6_WORD3;   /* Error Injection Channel Descriptor n, Word3 */
  EIM_EICHD6_WORD4_tag EICHD6_WORD4;   /* Error Injection Channel Descriptor n, Word4 */
  uint8_t EIM_reserved7[44];
  EIM_EICHD7_WORD0_tag EICHD7_WORD0;   /* Error Injection Channel Descriptor n, Word0 */
  EIM_EICHD7_WORD1_tag EICHD7_WORD1;   /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD7_WORD2_tag EICHD7_WORD2;   /* Error Injection Channel Descriptor n, Word2 */
  EIM_EICHD7_WORD3_tag EICHD7_WORD3;   /* Error Injection Channel Descriptor n, Word3 */
  EIM_EICHD7_WORD4_tag EICHD7_WORD4;   /* Error Injection Channel Descriptor n, Word4 */
  uint8_t EIM_reserved8[44];
  EIM_EICHD8_WORD0_tag EICHD8_WORD0;   /* Error Injection Channel Descriptor n, Word0 */
  EIM_EICHD8_WORD1_tag EICHD8_WORD1;   /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD8_WORD2_tag EICHD8_WORD2;   /* Error Injection Channel Descriptor n, Word2 */
  uint8_t EIM_reserved9[52];
  EIM_EICHD9_WORD0_tag EICHD9_WORD0;   /* Error Injection Channel Descriptor n, Word0 */
  EIM_EICHD9_WORD1_tag EICHD9_WORD1;   /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD9_WORD2_tag EICHD9_WORD2;   /* Error Injection Channel Descriptor n, Word2 */
  EIM_EICHD9_WORD3_tag EICHD9_WORD3;   /* Error Injection Channel Descriptor n, Word3 */
  EIM_EICHD9_WORD4_tag EICHD9_WORD4;   /* Error Injection Channel Descriptor n, Word4 */
  uint8_t EIM_reserved10[44];
  EIM_EICHD10_WORD0_tag EICHD10_WORD0; /* Error Injection Channel Descriptor n, Word0 */
  EIM_EICHD10_WORD1_tag EICHD10_WORD1; /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD10_WORD2_tag EICHD10_WORD2; /* Error Injection Channel Descriptor n, Word2 */
  EIM_EICHD10_WORD3_tag EICHD10_WORD3; /* Error Injection Channel Descriptor n, Word3 */
  EIM_EICHD10_WORD4_tag EICHD10_WORD4; /* Error Injection Channel Descriptor n, Word4 */
  uint8_t EIM_reserved11[44];
  EIM_EICHD11_WORD0_tag EICHD11_WORD0; /* Error Injection Channel Descriptor n, Word0 */
  EIM_EICHD11_WORD1_tag EICHD11_WORD1; /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD11_WORD2_tag EICHD11_WORD2; /* Error Injection Channel Descriptor n, Word2 */
  EIM_EICHD11_WORD3_tag EICHD11_WORD3; /* Error Injection Channel Descriptor n, Word3 */
  EIM_EICHD11_WORD4_tag EICHD11_WORD4; /* Error Injection Channel Descriptor n, Word4 */
  uint8_t EIM_reserved12[44];
  EIM_EICHD12_WORD0_tag EICHD12_WORD0; /* Error Injection Channel Descriptor n, Word0 */
  EIM_EICHD12_WORD1_tag EICHD12_WORD1; /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD12_WORD2_tag EICHD12_WORD2; /* Error Injection Channel Descriptor n, Word2 */
  EIM_EICHD12_WORD3_tag EICHD12_WORD3; /* Error Injection Channel Descriptor n, Word3 */
  EIM_EICHD12_WORD4_tag EICHD12_WORD4; /* Error Injection Channel Descriptor n, Word4 */
  uint8_t EIM_reserved13[44];
  EIM_EICHD13_WORD0_tag EICHD13_WORD0; /* Error Injection Channel Descriptor n, Word0 */
  EIM_EICHD13_WORD1_tag EICHD13_WORD1; /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD13_WORD2_tag EICHD13_WORD2; /* Error Injection Channel Descriptor n, Word2 */
  uint8_t EIM_reserved14[52];
  EIM_EICHD14_WORD0_tag EICHD14_WORD0; /* Error Injection Channel Descriptor n, Word0 */
  EIM_EICHD14_WORD1_tag EICHD14_WORD1; /* Error Injection Channel Descriptor n, Word1 */
  uint8_t EIM_reserved15[56];
  EIM_EICHD15_WORD0_tag EICHD15_WORD0; /* Error Injection Channel Descriptor n, Word0 */
  EIM_EICHD15_WORD1_tag EICHD15_WORD1; /* Error Injection Channel Descriptor n, Word1 */
  uint8_t EIM_reserved16[56];
  EIM_EICHD16_WORD0_tag EICHD16_WORD0; /* Error Injection Channel Descriptor n, Word0 */
  EIM_EICHD16_WORD1_tag EICHD16_WORD1; /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD16_WORD2_tag EICHD16_WORD2; /* Error Injection Channel Descriptor n, Word2 */
  uint8_t EIM_reserved17[52];
  EIM_EICHD17_WORD0_tag EICHD17_WORD0; /* Error Injection Channel Descriptor n, Word0 */
  EIM_EICHD17_WORD1_tag EICHD17_WORD1; /* Error Injection Channel Descriptor n, Word1 */
  uint8_t EIM_reserved18[56];
  EIM_EICHD18_WORD0_tag EICHD18_WORD0; /* Error Injection Channel Descriptor n, Word0 */
  EIM_EICHD18_WORD1_tag EICHD18_WORD1; /* Error Injection Channel Descriptor n, Word1 */
  uint8_t EIM_reserved19[60];
  EIM_EICHD19_WORD1_tag EICHD19_WORD1; /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD19_WORD2_tag EICHD19_WORD2; /* Error Injection Channel Descriptor n, Word2 */
  EIM_EICHD19_WORD3_tag EICHD19_WORD3; /* Error Injection Channel Descriptor n, Word3 */
  EIM_EICHD19_WORD4_tag EICHD19_WORD4; /* Error Injection Channel Descriptor n, Word4 */
  EIM_EICHD19_WORD5_tag EICHD19_WORD5; /* Error Injection Channel Descriptor n, Word5 */
  EIM_EICHD19_WORD6_tag EICHD19_WORD6; /* Error Injection Channel Descriptor n, Word6 */
  uint8_t EIM_reserved20[40];
  EIM_EICHD20_WORD1_tag EICHD20_WORD1; /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD20_WORD2_tag EICHD20_WORD2; /* Error Injection Channel Descriptor n, Word2 */
  EIM_EICHD20_WORD3_tag EICHD20_WORD3; /* Error Injection Channel Descriptor n, Word3 */
  EIM_EICHD20_WORD4_tag EICHD20_WORD4; /* Error Injection Channel Descriptor n, Word4 */
  EIM_EICHD20_WORD5_tag EICHD20_WORD5; /* Error Injection Channel Descriptor n, Word5 */
  EIM_EICHD20_WORD6_tag EICHD20_WORD6; /* Error Injection Channel Descriptor n, Word6 */
  uint8_t EIM_reserved21[40];
  EIM_EICHD21_WORD1_tag EICHD21_WORD1; /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD21_WORD2_tag EICHD21_WORD2; /* Error Injection Channel Descriptor n, Word2 */
  uint8_t EIM_reserved22[56];
  EIM_EICHD22_WORD1_tag EICHD22_WORD1; /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD22_WORD2_tag EICHD22_WORD2; /* Error Injection Channel Descriptor n, Word2 */
  uint8_t EIM_reserved23[56];
  EIM_EICHD23_WORD1_tag EICHD23_WORD1; /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD23_WORD2_tag EICHD23_WORD2; /* Error Injection Channel Descriptor n, Word2 */
  uint8_t EIM_reserved24[56];
  EIM_EICHD24_WORD1_tag EICHD24_WORD1; /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD24_WORD2_tag EICHD24_WORD2; /* Error Injection Channel Descriptor n, Word2 */
  uint8_t EIM_reserved25[56];
  EIM_EICHD25_WORD1_tag EICHD25_WORD1; /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD25_WORD2_tag EICHD25_WORD2; /* Error Injection Channel Descriptor n, Word2 */
  uint8_t EIM_reserved26[56];
  EIM_EICHD26_WORD1_tag EICHD26_WORD1; /* Error Injection Channel Descriptor n, Word1 */
  EIM_EICHD26_WORD2_tag EICHD26_WORD2; /* Error Injection Channel Descriptor n, Word2 */
  uint8_t EIM_reserved27[56];
  EIM_EICHD27_WORD1_tag EICHD27_WORD1; /* Error Injection Channel Descriptor n, Word1 */
  uint8_t EIM_reserved28[60];
  EIM_EICHD28_WORD1_tag EICHD28_WORD1; /* Error Injection Channel Descriptor n, Word1 */
  uint8_t EIM_reserved29[60];
  EIM_EICHD29_WORD1_tag EICHD29_WORD1; /* Error Injection Channel Descriptor n, Word1 */
  uint8_t EIM_reserved30[60];
  EIM_EICHD30_WORD1_tag EICHD30_WORD1; /* Error Injection Channel Descriptor n, Word1 */
};


/* ============================================================================
   =============================== Module: EMAC ===============================
   ============================================================================ */

typedef union EMAC_MAC_CONFIGURATION_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RE:1;                    /* Receiver Enable */
    vuint32_t TE:1;                    /* Transmitter Enable */
    vuint32_t PRELEN:2;                /* Preamble Length for Transmit Packets */
    vuint32_t DC:1;                    /* Deferral Check */
    vuint32_t BL:2;                    /* Back-Off Limit */
    vuint32_t _unused_7:1;
    vuint32_t DR:1;                    /* Disable Retry */
    vuint32_t DCRS:1;                  /* Disable Carrier Sense During Transmission */
    vuint32_t DO:1;                    /* Disable Receive Own */
    vuint32_t ECRSFD:1;                /* Enable Carrier Sense In Full-Duplex Mode */
    vuint32_t LM:1;                    /* Loopback Mode */
    vuint32_t DM:1;                    /* Duplex Mode */
    vuint32_t FES:1;                   /* Speed */
    vuint32_t PS:1;                    /* Port Select */
    vuint32_t JE:1;                    /* Jumbo Packet Enable */
    vuint32_t JD:1;                    /* Jabber Disable */
    vuint32_t _unused_18:1;
    vuint32_t WD:1;                    /* Watchdog Disable */
    vuint32_t ACS:1;                   /* Automatic Pad Or CRC Stripping */
    vuint32_t CST:1;                   /* CRC Stripping For Type Packets */
    vuint32_t S2KP:1;                  /* IEEE 802.3 Support For 2K Packets */
    vuint32_t GPSLCE:1;                /* Giant Packet Size Limit Control Enable */
    vuint32_t IPG:3;                   /* Inter-Packet Gap */
    vuint32_t IPC:1;                   /* Checksum Offload */
    vuint32_t SARC:3;                  /* Source Address Insertion Or Replacement Control */
    vuint32_t _unused_31:1;
  } B;
} EMAC_MAC_CONFIGURATION_tag;

typedef union EMAC_MAC_EXT_CONFIGURATION_union_tag { /* MAC Extended Configuration */
  vuint32_t R;
  struct {
    vuint32_t GPSL:14;                 /* Giant Packet Size Limit */
    vuint32_t _unused_14:2;
    vuint32_t DCRCC:1;                 /* Disable CRC Checking For Received Packets */
    vuint32_t SPEN:1;                  /* Slow Protocol Detection Enable */
    vuint32_t USP:1;                   /* Unicast Slow Protocol Packet Detect */
    vuint32_t PDC:1;                   /* Packet Duplication Control */
    vuint32_t _unused_20:3;
    vuint32_t _unused_23:1;
    vuint32_t EIPGEN:1;                /* Extended Inter-Packet Gap Enable */
    vuint32_t EIPG:5;                  /* Extended Inter-Packet Gap */
    vuint32_t _unused_30:1;
    vuint32_t _unused_31:1;
  } B;
} EMAC_MAC_EXT_CONFIGURATION_tag;

typedef union EMAC_MAC_PACKET_FILTER_union_tag { /* MAC Packet Filter */
  vuint32_t R;
  struct {
    vuint32_t PR:1;                    /* Promiscuous Mode */
    vuint32_t HUC:1;                   /* Hash Unicast */
    vuint32_t HMC:1;                   /* Hash Multicast */
    vuint32_t DAIF:1;                  /* DA Inverse Filtering */
    vuint32_t PM:1;                    /* Pass All Multicast */
    vuint32_t DBF:1;                   /* Disable Broadcast Packets */
    vuint32_t PCF:2;                   /* Pass Control Packets */
    vuint32_t SAIF:1;                  /* SA Inverse Filtering */
    vuint32_t SAF:1;                   /* Source Address Filter Enable */
    vuint32_t HPF:1;                   /* Hash Or Perfect Filter */
    vuint32_t _unused_11:5;
    vuint32_t VTFE:1;                  /* VLAN Tag Filter Enable */
    vuint32_t _unused_17:3;
    vuint32_t IPFE:1;                  /* Layer 3 and Layer 4 Filter Enable */
    vuint32_t DNTU:1;                  /* Drop Non-TCP/UDP Over IP Packets */
    vuint32_t _unused_22:9;
    vuint32_t RA:1;                    /* Receive All */
  } B;
} EMAC_MAC_PACKET_FILTER_tag;

typedef union EMAC_MAC_WATCHDOG_TIMEOUT_union_tag { /* MAC Watchdog Timeout */
  vuint32_t R;
  struct {
    vuint32_t WTO:4;
    vuint32_t _unused_4:4;
    vuint32_t PWE:1;
    vuint32_t _unused_9:23;
  } B;
} EMAC_MAC_WATCHDOG_TIMEOUT_tag;

typedef union EMAC_MAC_HASH_TABLE_REG0_union_tag {
  vuint32_t R;
  struct {
    vuint32_t HT31T0:32;
  } B;
} EMAC_MAC_HASH_TABLE_REG0_tag;

typedef union EMAC_MAC_HASH_TABLE_REG1_union_tag {
  vuint32_t R;
  struct {
    vuint32_t HT63T32:32;
  } B;
} EMAC_MAC_HASH_TABLE_REG1_tag;

typedef union EMAC_MAC_VLAN_TAG_CTRL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t OB:1;
    vuint32_t CT:1;
    vuint32_t OFS:2;
    vuint32_t _unused_4:12;
    vuint32_t ETV:1;
    vuint32_t VTIM:1;
    vuint32_t ESVL:1;
    vuint32_t ERSVLM:1;
    vuint32_t DOVLTC:1;
    vuint32_t EVLS:2;
    vuint32_t _unused_23:1;
    vuint32_t EVLRXS:1;
    vuint32_t VTHM:1;
    vuint32_t EDVLP:1;
    vuint32_t ERIVLT:1;                /* Enable Inner VLAN Tag Comparison */
    vuint32_t EIVLS:2;
    vuint32_t _unused_30:1;
    vuint32_t EIVLRXS:1;
  } B;
} EMAC_MAC_VLAN_TAG_CTRL_tag;

typedef union EMAC_MAC_VLAN_TAG_DATA_union_tag {
  vuint32_t R;
  struct {
    vuint32_t VID:16;
    vuint32_t VEN:1;
    vuint32_t ETV:1;
    vuint32_t DOVLTC:1;
    vuint32_t ERSVLM:1;
    vuint32_t ERIVLT:1;
    vuint32_t _unused_21:3;
    vuint32_t DMACHEN:1;
    vuint32_t DMACHN:1;
    vuint32_t _unused_26:6;
  } B;
} EMAC_MAC_VLAN_TAG_DATA_tag;

typedef union EMAC_MAC_VLAN_HASH_TABLE_union_tag {
  vuint32_t R;
  struct {
    vuint32_t VLHT:16;
    vuint32_t _unused_16:16;
  } B;
} EMAC_MAC_VLAN_HASH_TABLE_tag;

typedef union EMAC_MAC_VLAN_INCL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t VLT:16;
    vuint32_t VLC:2;
    vuint32_t VLP:1;
    vuint32_t CSVL:1;
    vuint32_t VLTI:1;
    vuint32_t CBTI:1;
    vuint32_t _unused_22:2;
    vuint32_t ADDR:1;
    vuint32_t _unused_25:5;
    vuint32_t RDWR:1;
    vuint32_t BUSY:1;
  } B;
} EMAC_MAC_VLAN_INCL_tag;

typedef union EMAC_MAC_INNER_VLAN_INCL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t VLT:16;
    vuint32_t VLC:2;
    vuint32_t VLP:1;
    vuint32_t CSVL:1;                  /* C-VLAN or S-VLAN */
    vuint32_t VLTI:1;
    vuint32_t _unused_21:11;
  } B;
} EMAC_MAC_INNER_VLAN_INCL_tag;

typedef union EMAC_MAC_Q0_TX_FLOW_CTRL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t FCB_BPA:1;
    vuint32_t TFE:1;
    vuint32_t _unused_2:2;
    vuint32_t PLT:3;
    vuint32_t DZPQ:1;
    vuint32_t _unused_8:8;
    vuint32_t PT:16;
  } B;
} EMAC_MAC_Q0_TX_FLOW_CTRL_tag;

typedef union EMAC_MAC_RX_FLOW_CTRL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RFE:1;
    vuint32_t UP:1;
    vuint32_t _unused_2:6;
    vuint32_t _unused_8:1;
    vuint32_t _unused_9:23;
  } B;
} EMAC_MAC_RX_FLOW_CTRL_tag;

typedef union EMAC_MAC_RXQ_CTRL4_union_tag {
  vuint32_t R;
  struct {
    vuint32_t UFFQE:1;
    vuint32_t UFFQ:1;
    vuint32_t _unused_2:6;
    vuint32_t MFFQE:1;
    vuint32_t MFFQ:1;
    vuint32_t _unused_10:6;
    vuint32_t VFFQE:1;
    vuint32_t VFFQ:1;
    vuint32_t _unused_18:14;
  } B;
} EMAC_MAC_RXQ_CTRL4_tag;

typedef union EMAC_MAC_RXQ_CTRL0_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXQ0EN:2;
    vuint32_t RXQ1EN:2;
    vuint32_t _unused_4:2;
    vuint32_t _unused_6:2;
    vuint32_t _unused_8:2;
    vuint32_t _unused_10:2;
    vuint32_t _unused_12:2;
    vuint32_t _unused_14:2;
    vuint32_t _unused_16:16;
  } B;
} EMAC_MAC_RXQ_CTRL0_tag;

typedef union EMAC_MAC_RXQ_CTRL1_union_tag {
  vuint32_t R;
  struct {
    vuint32_t AVCPQ:3;
    vuint32_t _unused_3:1;
    vuint32_t PTPQ:3;
    vuint32_t _unused_7:1;
    vuint32_t _unused_8:3;
    vuint32_t _unused_11:1;
    vuint32_t UPQ:3;
    vuint32_t _unused_15:1;
    vuint32_t MCBCQ:3;
    vuint32_t _unused_19:1;
    vuint32_t MCBCQEN:1;
    vuint32_t TACPQE:1;
    vuint32_t TPQC:2;
    vuint32_t FPRQ:3;
    vuint32_t _unused_27:5;
  } B;
} EMAC_MAC_RXQ_CTRL1_tag;

typedef union EMAC_MAC_RXQ_CTRL2_union_tag {
  vuint32_t R;
  struct {
    vuint32_t PSRQ0:8;
    vuint32_t PSRQ1:8;
    vuint32_t _unused_16:8;
    vuint32_t _unused_24:8;
  } B;
} EMAC_MAC_RXQ_CTRL2_tag;

typedef union EMAC_MAC_INTERRUPT_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;
    vuint32_t _unused_1:1;
    vuint32_t _unused_2:1;
    vuint32_t PHYIS:1;
    vuint32_t _unused_4:1;
    vuint32_t _unused_5:1;
    vuint32_t _unused_6:2;
    vuint32_t MMCIS:1;
    vuint32_t MMCRXIS:1;
    vuint32_t MMCTXIS:1;
    vuint32_t _unused_11:1;
    vuint32_t TSIS:1;
    vuint32_t TXSTSIS:1;
    vuint32_t RXSTSIS:1;
    vuint32_t _unused_15:1;
    vuint32_t _unused_16:1;
    vuint32_t FPEIS:1;
    vuint32_t MDIOIS:1;
    vuint32_t MFTIS:1;
    vuint32_t MFRIS:1;
    vuint32_t _unused_21:11;
  } B;
} EMAC_MAC_INTERRUPT_STATUS_tag;

typedef union EMAC_MAC_INTERRUPT_ENABLE_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;
    vuint32_t _unused_1:1;
    vuint32_t _unused_2:1;
    vuint32_t PHYIE:1;
    vuint32_t _unused_4:1;
    vuint32_t _unused_5:1;
    vuint32_t _unused_6:6;
    vuint32_t TSIE:1;
    vuint32_t TXSTSIE:1;
    vuint32_t RXSTSIE:1;
    vuint32_t _unused_15:1;
    vuint32_t _unused_16:1;
    vuint32_t FPEIE:1;
    vuint32_t MDIOIE:1;
    vuint32_t _unused_19:13;
  } B;
} EMAC_MAC_INTERRUPT_ENABLE_tag;

typedef union EMAC_MAC_RX_TX_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TJT:1;
    vuint32_t NCARR:1;
    vuint32_t LCARR:1;
    vuint32_t EXDEF:1;
    vuint32_t LCOL:1;
    vuint32_t EXCOL:1;
    vuint32_t _unused_6:2;
    vuint32_t RWT:1;
    vuint32_t _unused_9:23;
  } B;
} EMAC_MAC_RX_TX_STATUS_tag;

typedef union EMAC_MAC_VERSION_union_tag {
  vuint32_t R;
  struct {
    vuint32_t IPVER:8;
    vuint32_t CFGVER:8;
    vuint32_t _unused_16:16;
  } B;
} EMAC_MAC_VERSION_tag;

typedef union EMAC_MAC_DEBUG_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RPESTS:1;
    vuint32_t RFCFCSTS:2;
    vuint32_t _unused_3:13;
    vuint32_t TPESTS:1;
    vuint32_t TFCSTS:2;
    vuint32_t _unused_19:13;
  } B;
} EMAC_MAC_DEBUG_tag;

typedef union EMAC_MAC_HW_FEATURE0_union_tag {
  vuint32_t R;
  struct {
    vuint32_t MIISEL:1;
    vuint32_t GMIISEL:1;
    vuint32_t HDSEL:1;
    vuint32_t PCSSEL:1;
    vuint32_t VLHASH:1;
    vuint32_t SMASEL:1;
    vuint32_t RWKSEL:1;
    vuint32_t MGKSEL:1;
    vuint32_t MMCSEL:1;
    vuint32_t ARPOFFSEL:1;
    vuint32_t _unused_10:2;
    vuint32_t TSSEL:1;
    vuint32_t EEESEL:1;
    vuint32_t TXCOESEL:1;
    vuint32_t _unused_15:1;
    vuint32_t RXCOESEL:1;
    vuint32_t _unused_17:1;
    vuint32_t ADDMACADRSEL:5;
    vuint32_t MACADR32SEL:1;
    vuint32_t MACADR64SEL:1;
    vuint32_t TSSTSSEL:2;
    vuint32_t SAVLANINS:1;
    vuint32_t ACTPHYSEL:3;
    vuint32_t _unused_31:1;
  } B;
} EMAC_MAC_HW_FEATURE0_tag;

typedef union EMAC_MAC_HW_FEATURE1_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXFIFOSIZE:5;
    vuint32_t SPRAM:1;
    vuint32_t TXFIFOSIZE:5;
    vuint32_t OSTEN:1;
    vuint32_t PTOEN:1;
    vuint32_t ADVTHWORD:1;
    vuint32_t ADDR64:2;
    vuint32_t DCBEN:1;
    vuint32_t SPHEN:1;
    vuint32_t TSOEN:1;
    vuint32_t DBGMEMA:1;
    vuint32_t AVSEL:1;
    vuint32_t RAVSEL:1;
    vuint32_t _unused_22:1;
    vuint32_t POUOST:1;
    vuint32_t HASHTBLSZ:2;
    vuint32_t _unused_26:1;
    vuint32_t L3L4FNUM:4;
    vuint32_t _unused_31:1;
  } B;
} EMAC_MAC_HW_FEATURE1_tag;

typedef union EMAC_MAC_HW_FEATURE2_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXQCNT:4;
    vuint32_t _unused_4:2;
    vuint32_t TXQCNT:4;
    vuint32_t _unused_10:2;
    vuint32_t RXCHCNT:4;
    vuint32_t _unused_16:2;
    vuint32_t TXCHCNT:4;
    vuint32_t _unused_22:2;
    vuint32_t PPSOUTNUM:3;
    vuint32_t _unused_27:1;
    vuint32_t AUXSNAPNUM:3;
    vuint32_t _unused_31:1;
  } B;
} EMAC_MAC_HW_FEATURE2_tag;

typedef union EMAC_MAC_HW_FEATURE3_union_tag {
  vuint32_t R;
  struct {
    vuint32_t NRVF:3;
    vuint32_t _unused_3:1;
    vuint32_t CBTISEL:1;
    vuint32_t DVLAN:1;
    vuint32_t _unused_6:3;
    vuint32_t PDUPSEL:1;
    vuint32_t FRPSEL:1;
    vuint32_t FRPBS:2;
    vuint32_t FRPES:2;
    vuint32_t _unused_15:1;
    vuint32_t ESTSEL:1;
    vuint32_t ESTDEP:3;
    vuint32_t ESTWID:2;
    vuint32_t _unused_22:4;
    vuint32_t FPESEL:1;
    vuint32_t TBSSEL:1;
    vuint32_t ASP:2;
    vuint32_t _unused_30:2;
  } B;
} EMAC_MAC_HW_FEATURE3_tag;

typedef union EMAC_MAC_DPP_FSM_INTERRUPT_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;
    vuint32_t _unused_1:1;
    vuint32_t RDPES:1;
    vuint32_t MPES:1;
    vuint32_t MTSPES:1;
    vuint32_t ARPES:1;                 /* Application Receive interface data path Parity Error Status */
    vuint32_t _unused_6:1;
    vuint32_t _unused_7:1;
    vuint32_t TTES:1;
    vuint32_t RTES:1;
    vuint32_t _unused_10:1;
    vuint32_t ATES:1;
    vuint32_t PTES:1;
    vuint32_t _unused_13:1;
    vuint32_t _unused_14:1;
    vuint32_t _unused_15:1;
    vuint32_t MSTTES:1;
    vuint32_t _unused_17:1;
    vuint32_t _unused_18:6;
    vuint32_t FSMPES:1;
    vuint32_t _unused_25:7;
  } B;
} EMAC_MAC_DPP_FSM_INTERRUPT_STATUS_tag;

typedef union EMAC_MAC_FSM_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TMOUTEN:1;
    vuint32_t PRTYEN:1;
    vuint32_t _unused_2:6;
    vuint32_t TTEIN:1;
    vuint32_t RTEIN:1;
    vuint32_t _unused_10:1;
    vuint32_t ATEIN:1;
    vuint32_t PTEIN:1;
    vuint32_t _unused_13:1;
    vuint32_t _unused_14:1;
    vuint32_t _unused_15:1;
    vuint32_t TPEIN:1;
    vuint32_t RPEIN:1;
    vuint32_t _unused_18:1;
    vuint32_t APEIN:1;
    vuint32_t PPEIN:1;
    vuint32_t _unused_21:1;
    vuint32_t _unused_22:1;
    vuint32_t _unused_23:1;
    vuint32_t TLGRNML:1;
    vuint32_t RLGRNML:1;
    vuint32_t _unused_26:1;
    vuint32_t ALGRNML:1;
    vuint32_t PLGRNML:1;
    vuint32_t _unused_29:1;
    vuint32_t _unused_30:1;
    vuint32_t _unused_31:1;
  } B;
} EMAC_MAC_FSM_CONTROL_tag;

typedef union EMAC_MAC_FSM_ACT_TIMER_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TMR:10;
    vuint32_t _unused_10:6;
    vuint32_t NTMRMD:4;
    vuint32_t LTMRMD:4;
    vuint32_t _unused_24:8;
  } B;
} EMAC_MAC_FSM_ACT_TIMER_tag;

typedef union EMAC_SCS_REG1_union_tag {
  vuint32_t R;
  struct {
    vuint32_t MAC_SCS1:32;
  } B;
} EMAC_SCS_REG1_tag;

typedef union EMAC_MAC_MDIO_ADDRESS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t GB:1;
    vuint32_t C45E:1;
    vuint32_t GOC_0:1;
    vuint32_t GOC_1:1;
    vuint32_t SKAP:1;
    vuint32_t _unused_5:3;
    vuint32_t CR:4;
    vuint32_t NTC:3;
    vuint32_t _unused_15:1;
    vuint32_t RDA:5;
    vuint32_t PA:5;
    vuint32_t BTB:1;
    vuint32_t PSE:1;
    vuint32_t _unused_28:4;
  } B;
} EMAC_MAC_MDIO_ADDRESS_tag;

typedef union EMAC_MAC_MDIO_DATA_union_tag {
  vuint32_t R;
  struct {
    vuint32_t GD:16;
    vuint32_t RA:16;
  } B;
} EMAC_MAC_MDIO_DATA_tag;

typedef union EMAC_MAC_CSR_SW_CTRL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RCWE:1;
    vuint32_t _unused_1:7;
    vuint32_t SEEN:1;
    vuint32_t _unused_9:23;
  } B;
} EMAC_MAC_CSR_SW_CTRL_tag;

typedef union EMAC_MAC_FPE_CTRL_STS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t EFPE:1;
    vuint32_t SVER:1;
    vuint32_t SRSP:1;
    vuint32_t S1_SET_0:1;
    vuint32_t _unused_4:12;
    vuint32_t RVER:1;
    vuint32_t RRSP:1;
    vuint32_t TVER:1;
    vuint32_t TRSP:1;
    vuint32_t _unused_20:12;
  } B;
} EMAC_MAC_FPE_CTRL_STS_tag;

typedef union EMAC_MAC_PRESN_TIME_NS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t MPTN:32;
  } B;
} EMAC_MAC_PRESN_TIME_NS_tag;

typedef union EMAC_MAC_PRESN_TIME_UPDT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t MPTU:32;
  } B;
} EMAC_MAC_PRESN_TIME_UPDT_tag;

typedef union EMAC_MAC_ADDRESS0_HIGH_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ADDRHI:16;
    vuint32_t DCS:2;
    vuint32_t _unused_18:13;
    vuint32_t AE:1;
  } B;
} EMAC_MAC_ADDRESS0_HIGH_tag;

typedef union EMAC_MAC_ADDRESS0_LOW_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ADDRLO:32;
  } B;
} EMAC_MAC_ADDRESS0_LOW_tag;

typedef union EMAC_MAC_ADDRESS1_HIGH_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ADDRHI:16;
    vuint32_t DCS:2;
    vuint32_t _unused_18:6;
    vuint32_t MBC:6;
    vuint32_t SA:1;
    vuint32_t AE:1;
  } B;
} EMAC_MAC_ADDRESS1_HIGH_tag;

typedef union EMAC_MAC_ADDRESS1_LOW_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ADDRLO:32;
  } B;
} EMAC_MAC_ADDRESS1_LOW_tag;

typedef union EMAC_MAC_ADDRESS2_HIGH_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ADDRHI:16;
    vuint32_t DCS:2;
    vuint32_t _unused_18:6;
    vuint32_t MBC:6;
    vuint32_t SA:1;
    vuint32_t AE:1;
  } B;
} EMAC_MAC_ADDRESS2_HIGH_tag;

typedef union EMAC_MAC_ADDRESS2_LOW_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ADDRLO:32;
  } B;
} EMAC_MAC_ADDRESS2_LOW_tag;

typedef union EMAC_MMC_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t CNTRST:1;
    vuint32_t CNTSTOPRO:1;
    vuint32_t RSTONRD:1;
    vuint32_t CNTFREEZ:1;
    vuint32_t CNTPRST:1;
    vuint32_t CNTPRSTLVL:1;
    vuint32_t _unused_6:2;
    vuint32_t UCDBC:1;
    vuint32_t _unused_9:23;
  } B;
} EMAC_MMC_CONTROL_tag;

typedef union EMAC_MMC_RX_INTERRUPT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXGBPKTIS:1;
    vuint32_t RXGBOCTIS:1;
    vuint32_t RXGOCTIS:1;
    vuint32_t RXBCGPIS:1;
    vuint32_t RXMCGPIS:1;
    vuint32_t RXCRCERPIS:1;
    vuint32_t RXALGNERPIS:1;
    vuint32_t RXRUNTPIS:1;
    vuint32_t RXJABERPIS:1;
    vuint32_t RXUSIZEGPIS:1;
    vuint32_t RXOSIZEGPIS:1;
    vuint32_t RX64OCTGBPIS:1;
    vuint32_t RX65T127OCTGBPIS:1;
    vuint32_t RX128T255OCTGBPIS:1;
    vuint32_t RX256T511OCTGBPIS:1;
    vuint32_t RX512T1023OCTGBPIS:1;
    vuint32_t RX1024TMAXOCTGBPIS:1;
    vuint32_t RXUCGPIS:1;
    vuint32_t RXLENERPIS:1;
    vuint32_t RXORANGEPIS:1;
    vuint32_t RXPAUSPIS:1;
    vuint32_t RXFOVPIS:1;
    vuint32_t RXVLANGBPIS:1;
    vuint32_t RXWDOGPIS:1;
    vuint32_t RXRCVERRPIS:1;
    vuint32_t RXCTRLPIS:1;
    vuint32_t _unused_26:1;
    vuint32_t _unused_27:1;
    vuint32_t _unused_28:4;
  } B;
} EMAC_MMC_RX_INTERRUPT_tag;

typedef union EMAC_MMC_TX_INTERRUPT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXGBOCTIS:1;
    vuint32_t TXGBPKTIS:1;
    vuint32_t TXBCGPIS:1;
    vuint32_t TXMCGPIS:1;
    vuint32_t TX64OCTGBPIS:1;
    vuint32_t TX65T127OCTGBPIS:1;
    vuint32_t TX128T255OCTGBPIS:1;
    vuint32_t TX256T511OCTGBPIS:1;
    vuint32_t TX512T1023OCTGBPIS:1;
    vuint32_t TX1024TMAXOCTGBPIS:1;
    vuint32_t TXUCGBPIS:1;
    vuint32_t TXMCGBPIS:1;
    vuint32_t TXBCGBPIS:1;
    vuint32_t TXUFLOWERPIS:1;
    vuint32_t TXSCOLGPIS:1;
    vuint32_t TXMCOLGPIS:1;
    vuint32_t TXDEFPIS:1;
    vuint32_t TXLATCOLPIS:1;
    vuint32_t TXEXCOLPIS:1;
    vuint32_t TXCARERPIS:1;
    vuint32_t TXGOCTIS:1;
    vuint32_t TXGPKTIS:1;
    vuint32_t TXEXDEFPIS:1;
    vuint32_t TXPAUSPIS:1;
    vuint32_t TXVLANGPIS:1;
    vuint32_t TXOSIZEGPIS:1;
    vuint32_t _unused_26:1;
    vuint32_t _unused_27:1;
    vuint32_t _unused_28:4;
  } B;
} EMAC_MMC_TX_INTERRUPT_tag;

typedef union EMAC_MMC_RX_INTERRUPT_MASK_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXGBPKTIM:1;
    vuint32_t RXGBOCTIM:1;
    vuint32_t RXGOCTIM:1;
    vuint32_t RXBCGPIM:1;
    vuint32_t RXMCGPIM:1;
    vuint32_t RXCRCERPIM:1;
    vuint32_t RXALGNERPIM:1;
    vuint32_t RXRUNTPIM:1;
    vuint32_t RXJABERPIM:1;
    vuint32_t RXUSIZEGPIM:1;
    vuint32_t RXOSIZEGPIM:1;
    vuint32_t RX64OCTGBPIM:1;
    vuint32_t RX65T127OCTGBPIM:1;
    vuint32_t RX128T255OCTGBPIM:1;
    vuint32_t RX256T511OCTGBPIM:1;
    vuint32_t RX512T1023OCTGBPIM:1;
    vuint32_t RX1024TMAXOCTGBPIM:1;
    vuint32_t RXUCGPIM:1;
    vuint32_t RXLENERPIM:1;
    vuint32_t RXORANGEPIM:1;
    vuint32_t RXPAUSPIM:1;
    vuint32_t RXFOVPIM:1;
    vuint32_t RXVLANGBPIM:1;
    vuint32_t RXWDOGPIM:1;
    vuint32_t RXRCVERRPIM:1;
    vuint32_t RXCTRLPIM:1;
    vuint32_t _unused_26:1;
    vuint32_t _unused_27:1;
    vuint32_t _unused_28:4;
  } B;
} EMAC_MMC_RX_INTERRUPT_MASK_tag;

typedef union EMAC_MMC_TX_INTERRUPT_MASK_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXGBOCTIM:1;
    vuint32_t TXGBPKTIM:1;
    vuint32_t TXBCGPIM:1;
    vuint32_t TXMCGPIM:1;
    vuint32_t TX64OCTGBPIM:1;
    vuint32_t TX65T127OCTGBPIM:1;
    vuint32_t TX128T255OCTGBPIM:1;
    vuint32_t TX256T511OCTGBPIM:1;
    vuint32_t TX512T1023OCTGBPIM:1;
    vuint32_t TX1024TMAXOCTGBPIM:1;
    vuint32_t TXUCGBPIM:1;
    vuint32_t TXMCGBPIM:1;
    vuint32_t TXBCGBPIM:1;
    vuint32_t TXUFLOWERPIM:1;
    vuint32_t TXSCOLGPIM:1;
    vuint32_t TXMCOLGPIM:1;
    vuint32_t TXDEFPIM:1;
    vuint32_t TXLATCOLPIM:1;
    vuint32_t TXEXCOLPIM:1;
    vuint32_t TXCARERPIM:1;
    vuint32_t TXGOCTIM:1;
    vuint32_t TXGPKTIM:1;
    vuint32_t TXEXDEFPIM:1;
    vuint32_t TXPAUSPIM:1;
    vuint32_t TXVLANGPIM:1;
    vuint32_t TXOSIZEGPIM:1;
    vuint32_t _unused_26:1;
    vuint32_t _unused_27:1;
    vuint32_t _unused_28:4;
  } B;
} EMAC_MMC_TX_INTERRUPT_MASK_tag;

typedef union EMAC_TX_OCTET_COUNT_GOOD_BAD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXOCTGB:32;
  } B;
} EMAC_TX_OCTET_COUNT_GOOD_BAD_tag;

typedef union EMAC_TX_PACKET_COUNT_GOOD_BAD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXPKTGB:32;
  } B;
} EMAC_TX_PACKET_COUNT_GOOD_BAD_tag;

typedef union EMAC_TX_BROADCAST_PACKETS_GOOD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXBCASTG:32;
  } B;
} EMAC_TX_BROADCAST_PACKETS_GOOD_tag;

typedef union EMAC_TX_MULTICAST_PACKETS_GOOD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXMCASTG:32;
  } B;
} EMAC_TX_MULTICAST_PACKETS_GOOD_tag;

typedef union EMAC_TX_64OCTETS_PACKETS_GOOD_BAD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TX64OCTGB:32;
  } B;
} EMAC_TX_64OCTETS_PACKETS_GOOD_BAD_tag;

typedef union EMAC_TX_65TO127OCTETS_PACKETS_GOOD_BAD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TX65_127OCTGB:32;
  } B;
} EMAC_TX_65TO127OCTETS_PACKETS_GOOD_BAD_tag;

typedef union EMAC_TX_128TO255OCTETS_PACKETS_GOOD_BAD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TX128_255OCTGB:32;
  } B;
} EMAC_TX_128TO255OCTETS_PACKETS_GOOD_BAD_tag;

typedef union EMAC_TX_256TO511OCTETS_PACKETS_GOOD_BAD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TX256_511OCTGB:32;
  } B;
} EMAC_TX_256TO511OCTETS_PACKETS_GOOD_BAD_tag;

typedef union EMAC_TX_512TO1023OCTETS_PACKETS_GOOD_BAD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TX512_1023OCTGB:32;
  } B;
} EMAC_TX_512TO1023OCTETS_PACKETS_GOOD_BAD_tag;

typedef union EMAC_TX_1024TOMAXOCTETS_PACKETS_GOOD_BAD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TX1024_MAXOCTGB:32;
  } B;
} EMAC_TX_1024TOMAXOCTETS_PACKETS_GOOD_BAD_tag;

typedef union EMAC_TX_UNICAST_PACKETS_GOOD_BAD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXUCASTGB:32;
  } B;
} EMAC_TX_UNICAST_PACKETS_GOOD_BAD_tag;

typedef union EMAC_TX_MULTICAST_PACKETS_GOOD_BAD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXMCASTGB:32;
  } B;
} EMAC_TX_MULTICAST_PACKETS_GOOD_BAD_tag;

typedef union EMAC_TX_BROADCAST_PACKETS_GOOD_BAD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXBCASTGB:32;
  } B;
} EMAC_TX_BROADCAST_PACKETS_GOOD_BAD_tag;

typedef union EMAC_TX_UNDERFLOW_ERROR_PACKETS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXUNDRFLW:32;
  } B;
} EMAC_TX_UNDERFLOW_ERROR_PACKETS_tag;

typedef union EMAC_TX_SINGLE_COLLISION_GOOD_PACKETS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXSNGLCOLG:32;
  } B;
} EMAC_TX_SINGLE_COLLISION_GOOD_PACKETS_tag;

typedef union EMAC_TX_MULTIPLE_COLLISION_GOOD_PACKETS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXMULTCOLG:32;
  } B;
} EMAC_TX_MULTIPLE_COLLISION_GOOD_PACKETS_tag;

typedef union EMAC_TX_DEFERRED_PACKETS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXDEFRD:32;
  } B;
} EMAC_TX_DEFERRED_PACKETS_tag;

typedef union EMAC_TX_LATE_COLLISION_PACKETS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXLATECOL:32;
  } B;
} EMAC_TX_LATE_COLLISION_PACKETS_tag;

typedef union EMAC_TX_EXCESSIVE_COLLISION_PACKETS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXEXSCOL:32;
  } B;
} EMAC_TX_EXCESSIVE_COLLISION_PACKETS_tag;

typedef union EMAC_TX_CARRIER_ERROR_PACKETS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXCARR:32;
  } B;
} EMAC_TX_CARRIER_ERROR_PACKETS_tag;

typedef union EMAC_TX_OCTET_COUNT_GOOD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXOCTG:32;
  } B;
} EMAC_TX_OCTET_COUNT_GOOD_tag;

typedef union EMAC_TX_PACKET_COUNT_GOOD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXPKTG:32;
  } B;
} EMAC_TX_PACKET_COUNT_GOOD_tag;

typedef union EMAC_TX_EXCESSIVE_DEFERRAL_ERROR_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXEXSDEF:32;
  } B;
} EMAC_TX_EXCESSIVE_DEFERRAL_ERROR_tag;

typedef union EMAC_TX_PAUSE_PACKETS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXPAUSE:32;
  } B;
} EMAC_TX_PAUSE_PACKETS_tag;

typedef union EMAC_TX_VLAN_PACKETS_GOOD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXVLANG:32;
  } B;
} EMAC_TX_VLAN_PACKETS_GOOD_tag;

typedef union EMAC_TX_OSIZE_PACKETS_GOOD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXOSIZG:32;
  } B;
} EMAC_TX_OSIZE_PACKETS_GOOD_tag;

typedef union EMAC_RX_PACKETS_COUNT_GOOD_BAD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXPKTGB:32;
  } B;
} EMAC_RX_PACKETS_COUNT_GOOD_BAD_tag;

typedef union EMAC_RX_OCTET_COUNT_GOOD_BAD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXOCTGB:32;
  } B;
} EMAC_RX_OCTET_COUNT_GOOD_BAD_tag;

typedef union EMAC_RX_OCTET_COUNT_GOOD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXOCTG:32;
  } B;
} EMAC_RX_OCTET_COUNT_GOOD_tag;

typedef union EMAC_RX_BROADCAST_PACKETS_GOOD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXBCASTG:32;
  } B;
} EMAC_RX_BROADCAST_PACKETS_GOOD_tag;

typedef union EMAC_RX_MULTICAST_PACKETS_GOOD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXMCASTG:32;
  } B;
} EMAC_RX_MULTICAST_PACKETS_GOOD_tag;

typedef union EMAC_RX_CRC_ERROR_PACKETS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXCRCERR:32;
  } B;
} EMAC_RX_CRC_ERROR_PACKETS_tag;

typedef union EMAC_RX_ALIGNMENT_ERROR_PACKETS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXALGNERR:32;
  } B;
} EMAC_RX_ALIGNMENT_ERROR_PACKETS_tag;

typedef union EMAC_RX_RUNT_ERROR_PACKETS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXRUNTERR:32;
  } B;
} EMAC_RX_RUNT_ERROR_PACKETS_tag;

typedef union EMAC_RX_JABBER_ERROR_PACKETS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXJABERR:32;
  } B;
} EMAC_RX_JABBER_ERROR_PACKETS_tag;

typedef union EMAC_RX_UNDERSIZE_PACKETS_GOOD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXUNDERSZG:32;
  } B;
} EMAC_RX_UNDERSIZE_PACKETS_GOOD_tag;

typedef union EMAC_RX_OVERSIZE_PACKETS_GOOD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXOVERSZG:32;
  } B;
} EMAC_RX_OVERSIZE_PACKETS_GOOD_tag;

typedef union EMAC_RX_64OCTETS_PACKETS_GOOD_BAD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RX64OCTGB:32;
  } B;
} EMAC_RX_64OCTETS_PACKETS_GOOD_BAD_tag;

typedef union EMAC_RX_65TO127OCTETS_PACKETS_GOOD_BAD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RX65_127OCTGB:32;
  } B;
} EMAC_RX_65TO127OCTETS_PACKETS_GOOD_BAD_tag;

typedef union EMAC_RX_128TO255OCTETS_PACKETS_GOOD_BAD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RX128_255OCTGB:32;
  } B;
} EMAC_RX_128TO255OCTETS_PACKETS_GOOD_BAD_tag;

typedef union EMAC_RX_256TO511OCTETS_PACKETS_GOOD_BAD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RX256_511OCTGB:32;
  } B;
} EMAC_RX_256TO511OCTETS_PACKETS_GOOD_BAD_tag;

typedef union EMAC_RX_512TO1023OCTETS_PACKETS_GOOD_BAD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RX512_1023OCTGB:32;
  } B;
} EMAC_RX_512TO1023OCTETS_PACKETS_GOOD_BAD_tag;

typedef union EMAC_RX_1024TOMAXOCTETS_PACKETS_GOOD_BAD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RX1024_MAXOCTGB:32;
  } B;
} EMAC_RX_1024TOMAXOCTETS_PACKETS_GOOD_BAD_tag;

typedef union EMAC_RX_UNICAST_PACKETS_GOOD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXUCASTG:32;
  } B;
} EMAC_RX_UNICAST_PACKETS_GOOD_tag;

typedef union EMAC_RX_LENGTH_ERROR_PACKETS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXLENERR:32;
  } B;
} EMAC_RX_LENGTH_ERROR_PACKETS_tag;

typedef union EMAC_RX_OUT_OF_RANGE_TYPE_PACKETS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXOUTOFRNG:32;
  } B;
} EMAC_RX_OUT_OF_RANGE_TYPE_PACKETS_tag;

typedef union EMAC_RX_PAUSE_PACKETS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXPAUSEPKT:32;
  } B;
} EMAC_RX_PAUSE_PACKETS_tag;

typedef union EMAC_RX_FIFO_OVERFLOW_PACKETS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXFIFOOVFL:32;
  } B;
} EMAC_RX_FIFO_OVERFLOW_PACKETS_tag;

typedef union EMAC_RX_VLAN_PACKETS_GOOD_BAD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXVLANPKTGB:32;
  } B;
} EMAC_RX_VLAN_PACKETS_GOOD_BAD_tag;

typedef union EMAC_RX_WATCHDOG_ERROR_PACKETS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXWDGERR:32;
  } B;
} EMAC_RX_WATCHDOG_ERROR_PACKETS_tag;

typedef union EMAC_RX_RECEIVE_ERROR_PACKETS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXRCVERR:32;
  } B;
} EMAC_RX_RECEIVE_ERROR_PACKETS_tag;

typedef union EMAC_RX_CONTROL_PACKETS_GOOD_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXCTRLG:32;
  } B;
} EMAC_RX_CONTROL_PACKETS_GOOD_tag;

typedef union EMAC_MMC_FPE_TX_INTERRUPT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t FCIS:1;
    vuint32_t HRCIS:1;
    vuint32_t _unused_2:30;
  } B;
} EMAC_MMC_FPE_TX_INTERRUPT_tag;

typedef union EMAC_MMC_FPE_TX_INTERRUPT_MASK_union_tag {
  vuint32_t R;
  struct {
    vuint32_t FCIM:1;
    vuint32_t HRCIM:1;
    vuint32_t _unused_2:30;
  } B;
} EMAC_MMC_FPE_TX_INTERRUPT_MASK_tag;

typedef union EMAC_MMC_TX_FPE_FRAGMENT_CNTR_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXFFC:32;
  } B;
} EMAC_MMC_TX_FPE_FRAGMENT_CNTR_tag;

typedef union EMAC_MMC_TX_HOLD_REQ_CNTR_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXHRC:32;
  } B;
} EMAC_MMC_TX_HOLD_REQ_CNTR_tag;

typedef union EMAC_MMC_FPE_RX_INTERRUPT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t PAECIS:1;
    vuint32_t PSECIS:1;
    vuint32_t PAOCIS:1;
    vuint32_t FCIS:1;
    vuint32_t _unused_4:28;
  } B;
} EMAC_MMC_FPE_RX_INTERRUPT_tag;

typedef union EMAC_MMC_FPE_RX_INTERRUPT_MASK_union_tag {
  vuint32_t R;
  struct {
    vuint32_t PAECIM:1;
    vuint32_t PSECIM:1;
    vuint32_t PAOCIM:1;
    vuint32_t FCIM:1;
    vuint32_t _unused_4:28;
  } B;
} EMAC_MMC_FPE_RX_INTERRUPT_MASK_tag;

typedef union EMAC_MMC_RX_PACKET_ASSEMBLY_ERR_CNTR_union_tag {
  vuint32_t R;
  struct {
    vuint32_t PAEC:32;
  } B;
} EMAC_MMC_RX_PACKET_ASSEMBLY_ERR_CNTR_tag;

typedef union EMAC_MMC_RX_PACKET_SMD_ERR_CNTR_union_tag {
  vuint32_t R;
  struct {
    vuint32_t PSEC:32;
  } B;
} EMAC_MMC_RX_PACKET_SMD_ERR_CNTR_tag;

typedef union EMAC_MMC_RX_PACKET_ASSEMBLY_OK_CNTR_union_tag {
  vuint32_t R;
  struct {
    vuint32_t PAOC:32;
  } B;
} EMAC_MMC_RX_PACKET_ASSEMBLY_OK_CNTR_tag;

typedef union EMAC_MMC_RX_FPE_FRAGMENT_CNTR_union_tag {
  vuint32_t R;
  struct {
    vuint32_t FFC:32;
  } B;
} EMAC_MMC_RX_FPE_FRAGMENT_CNTR_tag;

typedef union EMAC_MAC_L3_L4_CONTROL0_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3PEN0:1;
    vuint32_t _unused_1:1;
    vuint32_t L3SAM0:1;
    vuint32_t L3SAIM0:1;
    vuint32_t L3DAM0:1;
    vuint32_t L3DAIM0:1;
    vuint32_t L3HSBM0:5;
    vuint32_t L3HDBM0:5;
    vuint32_t L4PEN0:1;
    vuint32_t _unused_17:1;
    vuint32_t L4SPM0:1;
    vuint32_t L4SPIM0:1;
    vuint32_t L4DPM0:1;
    vuint32_t L4DPIM0:1;
    vuint32_t _unused_22:2;
    vuint32_t DMCHN0:1;
    vuint32_t _unused_25:3;
    vuint32_t DMCHEN0:1;
    vuint32_t _unused_29:3;
  } B;
} EMAC_MAC_L3_L4_CONTROL0_tag;

typedef union EMAC_MAC_LAYER4_ADDRESS0_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L4SP0:16;
    vuint32_t L4DP0:16;
  } B;
} EMAC_MAC_LAYER4_ADDRESS0_tag;

typedef union EMAC_MAC_LAYER3_ADDR0_REG0_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3A00:32;
  } B;
} EMAC_MAC_LAYER3_ADDR0_REG0_tag;

typedef union EMAC_MAC_LAYER3_ADDR1_REG0_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3A10:32;
  } B;
} EMAC_MAC_LAYER3_ADDR1_REG0_tag;

typedef union EMAC_MAC_LAYER3_ADDR2_REG0_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3A20:32;
  } B;
} EMAC_MAC_LAYER3_ADDR2_REG0_tag;

typedef union EMAC_MAC_LAYER3_ADDR3_REG0_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3A30:32;
  } B;
} EMAC_MAC_LAYER3_ADDR3_REG0_tag;

typedef union EMAC_MAC_L3_L4_CONTROL1_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3PEN1:1;
    vuint32_t _unused_1:1;
    vuint32_t L3SAM1:1;
    vuint32_t L3SAIM1:1;
    vuint32_t L3DAM1:1;
    vuint32_t L3DAIM1:1;
    vuint32_t L3HSBM1:5;
    vuint32_t L3HDBM1:5;
    vuint32_t L4PEN1:1;
    vuint32_t _unused_17:1;
    vuint32_t L4SPM1:1;
    vuint32_t L4SPIM1:1;
    vuint32_t L4DPM1:1;
    vuint32_t L4DPIM1:1;
    vuint32_t _unused_22:2;
    vuint32_t DMCHN1:1;
    vuint32_t _unused_25:3;
    vuint32_t DMCHEN1:1;
    vuint32_t _unused_29:3;
  } B;
} EMAC_MAC_L3_L4_CONTROL1_tag;

typedef union EMAC_MAC_LAYER4_ADDRESS1_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L4SP1:16;
    vuint32_t L4DP1:16;
  } B;
} EMAC_MAC_LAYER4_ADDRESS1_tag;

typedef union EMAC_MAC_LAYER3_ADDR0_REG1_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3A01:32;
  } B;
} EMAC_MAC_LAYER3_ADDR0_REG1_tag;

typedef union EMAC_MAC_LAYER3_ADDR1_REG1_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3A11:32;
  } B;
} EMAC_MAC_LAYER3_ADDR1_REG1_tag;

typedef union EMAC_MAC_LAYER3_ADDR2_REG1_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3A21:32;
  } B;
} EMAC_MAC_LAYER3_ADDR2_REG1_tag;

typedef union EMAC_MAC_LAYER3_ADDR3_REG1_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3A31:32;
  } B;
} EMAC_MAC_LAYER3_ADDR3_REG1_tag;

typedef union EMAC_MAC_L3_L4_CONTROL2_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3PEN2:1;
    vuint32_t _unused_1:1;
    vuint32_t L3SAM2:1;
    vuint32_t L3SAIM2:1;
    vuint32_t L3DAM2:1;
    vuint32_t L3DAIM2:1;
    vuint32_t L3HSBM2:5;
    vuint32_t L3HDBM2:5;
    vuint32_t L4PEN2:1;
    vuint32_t _unused_17:1;
    vuint32_t L4SPM2:1;
    vuint32_t L4SPIM2:1;
    vuint32_t L4DPM2:1;
    vuint32_t L4DPIM2:1;
    vuint32_t _unused_22:2;
    vuint32_t DMCHN2:1;
    vuint32_t _unused_25:3;
    vuint32_t DMCHEN2:1;
    vuint32_t _unused_29:3;
  } B;
} EMAC_MAC_L3_L4_CONTROL2_tag;

typedef union EMAC_MAC_LAYER4_ADDRESS2_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L4SP2:16;
    vuint32_t L4DP2:16;
  } B;
} EMAC_MAC_LAYER4_ADDRESS2_tag;

typedef union EMAC_MAC_LAYER3_ADDR0_REG2_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3A02:32;
  } B;
} EMAC_MAC_LAYER3_ADDR0_REG2_tag;

typedef union EMAC_MAC_LAYER3_ADDR1_REG2_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3A12:32;
  } B;
} EMAC_MAC_LAYER3_ADDR1_REG2_tag;

typedef union EMAC_MAC_LAYER3_ADDR2_REG2_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3A22:32;
  } B;
} EMAC_MAC_LAYER3_ADDR2_REG2_tag;

typedef union EMAC_MAC_LAYER3_ADDR3_REG2_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3A32:32;
  } B;
} EMAC_MAC_LAYER3_ADDR3_REG2_tag;

typedef union EMAC_MAC_L3_L4_CONTROL3_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3PEN3:1;
    vuint32_t _unused_1:1;
    vuint32_t L3SAM3:1;
    vuint32_t L3SAIM3:1;
    vuint32_t L3DAM3:1;
    vuint32_t L3DAIM3:1;
    vuint32_t L3HSBM3:5;
    vuint32_t L3HDBM3:5;
    vuint32_t L4PEN3:1;
    vuint32_t _unused_17:1;
    vuint32_t L4SPM3:1;
    vuint32_t L4SPIM3:1;
    vuint32_t L4DPM3:1;
    vuint32_t L4DPIM3:1;
    vuint32_t _unused_22:2;
    vuint32_t DMCHN3:1;
    vuint32_t _unused_25:3;
    vuint32_t DMCHEN3:1;
    vuint32_t _unused_29:3;
  } B;
} EMAC_MAC_L3_L4_CONTROL3_tag;

typedef union EMAC_MAC_LAYER4_ADDRESS3_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L4SP3:16;
    vuint32_t L4DP3:16;
  } B;
} EMAC_MAC_LAYER4_ADDRESS3_tag;

typedef union EMAC_MAC_LAYER3_ADDR0_REG3_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3A03:32;
  } B;
} EMAC_MAC_LAYER3_ADDR0_REG3_tag;

typedef union EMAC_MAC_LAYER3_ADDR1_REG3_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3A13:32;
  } B;
} EMAC_MAC_LAYER3_ADDR1_REG3_tag;

typedef union EMAC_MAC_LAYER3_ADDR2_REG3_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3A23:32;
  } B;
} EMAC_MAC_LAYER3_ADDR2_REG3_tag;

typedef union EMAC_MAC_LAYER3_ADDR3_REG3_union_tag {
  vuint32_t R;
  struct {
    vuint32_t L3A33:32;
  } B;
} EMAC_MAC_LAYER3_ADDR3_REG3_tag;

typedef union EMAC_MAC_TIMESTAMP_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TSENA:1;
    vuint32_t TSCFUPDT:1;
    vuint32_t TSINIT:1;
    vuint32_t TSUPDT:1;
    vuint32_t _unused_4:1;
    vuint32_t TSADDREG:1;
    vuint32_t PTGE:1;
    vuint32_t _unused_7:1;
    vuint32_t TSENALL:1;
    vuint32_t TSCTRLSSR:1;
    vuint32_t TSVER2ENA:1;
    vuint32_t TSIPENA:1;
    vuint32_t TSIPV6ENA:1;
    vuint32_t TSIPV4ENA:1;
    vuint32_t TSEVNTENA:1;
    vuint32_t TSMSTRENA:1;
    vuint32_t SNAPTYPSEL:2;
    vuint32_t TSENMACADDR:1;
    vuint32_t _unused_19:1;
    vuint32_t ESTI:1;
    vuint32_t _unused_21:3;
    vuint32_t TXTSSTSM:1;
    vuint32_t _unused_25:3;
    vuint32_t AV8021ASMEN:1;
    vuint32_t _unused_29:3;
  } B;
} EMAC_MAC_TIMESTAMP_CONTROL_tag;

typedef union EMAC_MAC_SUB_SECOND_INCREMENT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:8;
    vuint32_t SNSINC:8;
    vuint32_t SSINC:8;
    vuint32_t _unused_24:8;
  } B;
} EMAC_MAC_SUB_SECOND_INCREMENT_tag;

typedef union EMAC_MAC_SYSTEM_TIME_SECONDS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TSS:32;
  } B;
} EMAC_MAC_SYSTEM_TIME_SECONDS_tag;

typedef union EMAC_MAC_SYSTEM_TIME_NANOSECONDS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TSSS:31;
    vuint32_t _unused_31:1;
  } B;
} EMAC_MAC_SYSTEM_TIME_NANOSECONDS_tag;

typedef union EMAC_MAC_SYSTEM_TIME_SECONDS_UPDATE_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TSS:32;
  } B;
} EMAC_MAC_SYSTEM_TIME_SECONDS_UPDATE_tag;

typedef union EMAC_MAC_SYSTEM_TIME_NANOSECONDS_UPDATE_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TSSS:31;
    vuint32_t ADDSUB:1;
  } B;
} EMAC_MAC_SYSTEM_TIME_NANOSECONDS_UPDATE_tag;

typedef union EMAC_MAC_TIMESTAMP_ADDEND_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TSAR:32;
  } B;
} EMAC_MAC_TIMESTAMP_ADDEND_tag;

typedef union EMAC_MAC_SYSTEM_TIME_HIGHER_WORD_SECONDS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TSHWR:16;
    vuint32_t _unused_16:16;
  } B;
} EMAC_MAC_SYSTEM_TIME_HIGHER_WORD_SECONDS_tag;

typedef union EMAC_MAC_TIMESTAMP_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TSSOVF:1;
    vuint32_t TSTARGT0:1;
    vuint32_t _unused_2:1;
    vuint32_t TSTRGTERR0:1;
    vuint32_t TSTARGT1:1;
    vuint32_t TSTRGTERR1:1;
    vuint32_t TSTARGT2:1;
    vuint32_t TSTRGTERR2:1;
    vuint32_t TSTARGT3:1;
    vuint32_t TSTRGTERR3:1;
    vuint32_t _unused_10:5;
    vuint32_t TXTSSIS:1;
    vuint32_t _unused_16:4;
    vuint32_t _unused_20:4;
    vuint32_t _unused_24:1;
    vuint32_t _unused_25:5;
    vuint32_t _unused_30:2;
  } B;
} EMAC_MAC_TIMESTAMP_STATUS_tag;

typedef union EMAC_MAC_TX_TIMESTAMP_STATUS_NANOSECONDS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXTSSLO:31;
    vuint32_t TXTSSMIS:1;
  } B;
} EMAC_MAC_TX_TIMESTAMP_STATUS_NANOSECONDS_tag;

typedef union EMAC_MAC_TX_TIMESTAMP_STATUS_SECONDS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXTSSHI:32;
  } B;
} EMAC_MAC_TX_TIMESTAMP_STATUS_SECONDS_tag;

typedef union EMAC_MAC_TIMESTAMP_INGRESS_ASYM_CORR_union_tag {
  vuint32_t R;
  struct {
    vuint32_t OSTIAC:32;
  } B;
} EMAC_MAC_TIMESTAMP_INGRESS_ASYM_CORR_tag;

typedef union EMAC_MAC_TIMESTAMP_EGRESS_ASYM_CORR_union_tag {
  vuint32_t R;
  struct {
    vuint32_t OSTEAC:32;
  } B;
} EMAC_MAC_TIMESTAMP_EGRESS_ASYM_CORR_tag;

typedef union EMAC_MAC_TIMESTAMP_INGRESS_CORR_NANOSECOND_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TSIC:32;
  } B;
} EMAC_MAC_TIMESTAMP_INGRESS_CORR_NANOSECOND_tag;

typedef union EMAC_MAC_TIMESTAMP_EGRESS_CORR_NANOSECOND_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TSEC:32;
  } B;
} EMAC_MAC_TIMESTAMP_EGRESS_CORR_NANOSECOND_tag;

typedef union EMAC_MAC_TIMESTAMP_INGRESS_CORR_SUBNANOSEC_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:8;
    vuint32_t TSICSNS:8;
    vuint32_t _unused_16:16;
  } B;
} EMAC_MAC_TIMESTAMP_INGRESS_CORR_SUBNANOSEC_tag;

typedef union EMAC_MAC_TIMESTAMP_EGRESS_CORR_SUBNANOSEC_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:8;
    vuint32_t TSECSNS:8;
    vuint32_t _unused_16:16;
  } B;
} EMAC_MAC_TIMESTAMP_EGRESS_CORR_SUBNANOSEC_tag;

typedef union EMAC_MAC_TIMESTAMP_INGRESS_LATENCY_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:8;
    vuint32_t ITLSNS:8;
    vuint32_t ITLNS:12;
    vuint32_t _unused_28:4;
  } B;
} EMAC_MAC_TIMESTAMP_INGRESS_LATENCY_tag;

typedef union EMAC_MAC_TIMESTAMP_EGRESS_LATENCY_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:8;
    vuint32_t ETLSNS:8;
    vuint32_t ETLNS:12;
    vuint32_t _unused_28:4;
  } B;
} EMAC_MAC_TIMESTAMP_EGRESS_LATENCY_tag;

typedef union EMAC_MAC_PPS_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t PPSCTRL_PPSCMD:4;
    vuint32_t PPSEN0:1;
    vuint32_t TRGTMODSEL0:2;
    vuint32_t MCGREN0:1;
    vuint32_t PPSCMD1:4;
    vuint32_t _unused_12:1;
    vuint32_t TRGTMODSEL1:2;
    vuint32_t MCGREN1:1;
    vuint32_t PPSCMD2:4;
    vuint32_t _unused_20:1;
    vuint32_t TRGTMODSEL2:2;
    vuint32_t MCGREN2:1;
    vuint32_t PPSCMD3:4;
    vuint32_t _unused_28:1;
    vuint32_t TRGTMODSEL3:2;
    vuint32_t MCGREN3:1;
  } B;
} EMAC_MAC_PPS_CONTROL_tag;

typedef union EMAC_MAC_PPS0_TARGET_TIME_SECONDS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TSTRH0:32;
  } B;
} EMAC_MAC_PPS0_TARGET_TIME_SECONDS_tag;

typedef union EMAC_MAC_PPS0_TARGET_TIME_NANOSECONDS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TTSL0:31;
    vuint32_t TRGTBUSY0:1;
  } B;
} EMAC_MAC_PPS0_TARGET_TIME_NANOSECONDS_tag;

typedef union EMAC_MAC_PPS0_INTERVAL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t PPSINT0:32;
  } B;
} EMAC_MAC_PPS0_INTERVAL_tag;

typedef union EMAC_MAC_PPS0_WIDTH_union_tag {
  vuint32_t R;
  struct {
    vuint32_t PPSWIDTH0:32;
  } B;
} EMAC_MAC_PPS0_WIDTH_tag;

typedef union EMAC_MAC_PPS1_TARGET_TIME_SECONDS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TSTRH1:32;
  } B;
} EMAC_MAC_PPS1_TARGET_TIME_SECONDS_tag;

typedef union EMAC_MAC_PPS1_TARGET_TIME_NANOSECONDS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TTSL1:31;
    vuint32_t TRGTBUSY1:1;
  } B;
} EMAC_MAC_PPS1_TARGET_TIME_NANOSECONDS_tag;

typedef union EMAC_MAC_PPS1_INTERVAL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t PPSINT1:32;
  } B;
} EMAC_MAC_PPS1_INTERVAL_tag;

typedef union EMAC_MAC_PPS1_WIDTH_union_tag {
  vuint32_t R;
  struct {
    vuint32_t PPSWIDTH1:32;
  } B;
} EMAC_MAC_PPS1_WIDTH_tag;

typedef union EMAC_MAC_PPS2_TARGET_TIME_SECONDS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TSTRH2:32;
  } B;
} EMAC_MAC_PPS2_TARGET_TIME_SECONDS_tag;

typedef union EMAC_MAC_PPS2_TARGET_TIME_NANOSECONDS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TTSL2:31;
    vuint32_t TRGTBUSY2:1;
  } B;
} EMAC_MAC_PPS2_TARGET_TIME_NANOSECONDS_tag;

typedef union EMAC_MAC_PPS2_INTERVAL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t PPSINT2:32;
  } B;
} EMAC_MAC_PPS2_INTERVAL_tag;

typedef union EMAC_MAC_PPS2_WIDTH_union_tag {
  vuint32_t R;
  struct {
    vuint32_t PPSWIDTH2:32;
  } B;
} EMAC_MAC_PPS2_WIDTH_tag;

typedef union EMAC_MAC_PPS3_TARGET_TIME_SECONDS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TSTRH3:32;
  } B;
} EMAC_MAC_PPS3_TARGET_TIME_SECONDS_tag;

typedef union EMAC_MAC_PPS3_TARGET_TIME_NANOSECONDS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TTSL3:31;
    vuint32_t TRGTBUSY3:1;
  } B;
} EMAC_MAC_PPS3_TARGET_TIME_NANOSECONDS_tag;

typedef union EMAC_MAC_PPS3_INTERVAL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t PPSINT3:32;
  } B;
} EMAC_MAC_PPS3_INTERVAL_tag;

typedef union EMAC_MAC_PPS3_WIDTH_union_tag {
  vuint32_t R;
  struct {
    vuint32_t PPSWIDTH3:32;
  } B;
} EMAC_MAC_PPS3_WIDTH_tag;

typedef union EMAC_MTL_OPERATION_MODE_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;
    vuint32_t DTXSTS:1;
    vuint32_t RAA:1;
    vuint32_t _unused_3:2;
    vuint32_t SCHALG:2;
    vuint32_t _unused_7:1;
    vuint32_t CNTPRST:1;
    vuint32_t CNTCLR:1;
    vuint32_t _unused_10:5;
    vuint32_t FRPE:1;
    vuint32_t _unused_16:16;
  } B;
} EMAC_MTL_OPERATION_MODE_tag;

typedef union EMAC_MTL_DBG_CTL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t FDBGEN:1;
    vuint32_t DBGMOD:1;
    vuint32_t BYTEEN:2;
    vuint32_t _unused_4:1;
    vuint32_t PKTSTATE:2;
    vuint32_t _unused_7:1;
    vuint32_t RSTALL:1;
    vuint32_t RSTSEL:1;
    vuint32_t FIFORDEN:1;
    vuint32_t FIFOWREN:1;
    vuint32_t FIFOSEL:2;
    vuint32_t PKTIE:1;
    vuint32_t STSIE:1;
    vuint32_t EIEE:1;
    vuint32_t EIEC:2;
    vuint32_t _unused_19:13;
  } B;
} EMAC_MTL_DBG_CTL_tag;

typedef union EMAC_MTL_DBG_STS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t FIFOBUSY:1;
    vuint32_t PKTSTATE:2;
    vuint32_t BYTEEN:2;
    vuint32_t _unused_5:3;
    vuint32_t PKTI:1;
    vuint32_t STSI:1;
    vuint32_t _unused_10:5;
    vuint32_t LOCR:17;
  } B;
} EMAC_MTL_DBG_STS_tag;

typedef union EMAC_MTL_FIFO_DEBUG_DATA_union_tag {
  vuint32_t R;
  struct {
    vuint32_t FDBGDATA:32;
  } B;
} EMAC_MTL_FIFO_DEBUG_DATA_tag;

typedef union EMAC_MTL_INTERRUPT_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t Q0IS:1;
    vuint32_t Q1IS:1;
    vuint32_t _unused_2:1;
    vuint32_t _unused_3:1;
    vuint32_t _unused_4:1;
    vuint32_t _unused_5:1;
    vuint32_t _unused_6:1;
    vuint32_t _unused_7:1;
    vuint32_t _unused_8:8;
    vuint32_t _unused_16:1;
    vuint32_t DBGIS:1;
    vuint32_t ESTIS:1;
    vuint32_t _unused_19:4;
    vuint32_t MTLPIS:1;
    vuint32_t _unused_24:8;
  } B;
} EMAC_MTL_INTERRUPT_STATUS_tag;

typedef union EMAC_MTL_RXQ_DMA_MAP0_union_tag {
  vuint32_t R;
  struct {
    vuint32_t Q0MDMACH:1;
    vuint32_t _unused_1:3;
    vuint32_t Q0DDMACH:1;
    vuint32_t _unused_5:3;
    vuint32_t Q1MDMACH:1;
    vuint32_t _unused_9:3;
    vuint32_t Q1DDMACH:1;
    vuint32_t _unused_13:3;
    vuint32_t _unused_16:1;
    vuint32_t _unused_17:3;
    vuint32_t _unused_20:1;
    vuint32_t _unused_21:3;
    vuint32_t _unused_24:1;
    vuint32_t _unused_25:3;
    vuint32_t _unused_28:1;
    vuint32_t _unused_29:3;
  } B;
} EMAC_MTL_RXQ_DMA_MAP0_tag;

typedef union EMAC_MTL_TBS_CTRL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ESTM:1;
    vuint32_t LEOV:1;
    vuint32_t _unused_2:2;
    vuint32_t LEGOS:3;
    vuint32_t _unused_7:1;
    vuint32_t LEOS:24;
  } B;
} EMAC_MTL_TBS_CTRL_tag;

typedef union EMAC_MTL_EST_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t EEST:1;
    vuint32_t SSWL:1;
    vuint32_t _unused_2:2;
    vuint32_t DDBF:1;
    vuint32_t DFBS:1;
    vuint32_t LCSE:2;
    vuint32_t TILS:3;
    vuint32_t _unused_11:1;
    vuint32_t CTOV:12;
    vuint32_t PTOV:8;
  } B;
} EMAC_MTL_EST_CONTROL_tag;

typedef union EMAC_MTL_EST_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t SWLC:1;
    vuint32_t BTRE:1;
    vuint32_t HLBF:1;
    vuint32_t HLBS:1;
    vuint32_t CGCE:1;
    vuint32_t _unused_5:2;
    vuint32_t SWOL:1;
    vuint32_t BTRL:4;
    vuint32_t _unused_12:4;
    vuint32_t CGSN:4;
    vuint32_t _unused_20:12;
  } B;
} EMAC_MTL_EST_STATUS_tag;

typedef union EMAC_MTL_EST_SCH_ERROR_union_tag {
  vuint32_t R;
  struct {
    vuint32_t SEQN:2;
    vuint32_t _unused_2:30;
  } B;
} EMAC_MTL_EST_SCH_ERROR_tag;

typedef union EMAC_MTL_EST_FRM_SIZE_ERROR_union_tag {
  vuint32_t R;
  struct {
    vuint32_t FEQN:2;
    vuint32_t _unused_2:30;
  } B;
} EMAC_MTL_EST_FRM_SIZE_ERROR_tag;

typedef union EMAC_MTL_EST_FRM_SIZE_CAPTURE_union_tag {
  vuint32_t R;
  struct {
    vuint32_t HBFS:15;
    vuint32_t _unused_15:1;
    vuint32_t HBFQ:1;
    vuint32_t _unused_17:15;
  } B;
} EMAC_MTL_EST_FRM_SIZE_CAPTURE_tag;

typedef union EMAC_MTL_EST_INTR_ENABLE_union_tag {
  vuint32_t R;
  struct {
    vuint32_t IECC:1;
    vuint32_t IEBE:1;
    vuint32_t IEHF:1;
    vuint32_t IEHS:1;
    vuint32_t CGCE:1;
    vuint32_t _unused_5:27;
  } B;
} EMAC_MTL_EST_INTR_ENABLE_tag;

typedef union EMAC_MTL_EST_GCL_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t SRWO:1;
    vuint32_t R1W0:1;
    vuint32_t GCRR:1;
    vuint32_t _unused_3:1;
    vuint32_t DBGM:1;
    vuint32_t DBGB:1;
    vuint32_t _unused_6:2;
    vuint32_t ADDR:8;
    vuint32_t _unused_16:4;
    vuint32_t ERR0:1;
    vuint32_t ESTEIEE:1;
    vuint32_t ESTEIEC:2;
    vuint32_t _unused_24:8;
  } B;
} EMAC_MTL_EST_GCL_CONTROL_tag;

typedef union EMAC_MTL_EST_GCL_DATA_union_tag {
  vuint32_t R;
  struct {
    vuint32_t GCD:32;
  } B;
} EMAC_MTL_EST_GCL_DATA_tag;

typedef union EMAC_MTL_FPE_CTRL_STS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t AFSZ:2;
    vuint32_t _unused_2:6;
    vuint32_t PEC:2;
    vuint32_t _unused_10:6;
    vuint32_t _unused_16:12;
    vuint32_t HRS:1;
    vuint32_t _unused_29:3;
  } B;
} EMAC_MTL_FPE_CTRL_STS_tag;

typedef union EMAC_MTL_FPE_ADVANCE_union_tag {
  vuint32_t R;
  struct {
    vuint32_t HADV:16;
    vuint32_t RADV:16;
  } B;
} EMAC_MTL_FPE_ADVANCE_tag;

typedef union EMAC_MTL_RXP_CONTROL_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t NVE:6;                   /* Number Of Valid Entry Address Or Index In The Instruction Table */
    vuint32_t _unused_6:9;
    vuint32_t MTL_SCS1:1;
    vuint32_t NPE:6;
    vuint32_t _unused_22:9;
    vuint32_t RXPI:1;
  } B;
} EMAC_MTL_RXP_CONTROL_STATUS_tag;

typedef union EMAC_MTL_RXP_INTERRUPT_CONTROL_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t NVEOVIS:1;
    vuint32_t NPEOVIS:1;
    vuint32_t FOOVIS:1;
    vuint32_t PDRFIS:1;
    vuint32_t _unused_4:12;
    vuint32_t NVEOVIE:1;
    vuint32_t NPEOVIE:1;
    vuint32_t FOOVIE:1;
    vuint32_t PDRFIE:1;
    vuint32_t _unused_20:12;
  } B;
} EMAC_MTL_RXP_INTERRUPT_CONTROL_STATUS_tag;

typedef union EMAC_MTL_RXP_DROP_CNT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXPDC:31;
    vuint32_t RXPDCOVF:1;
  } B;
} EMAC_MTL_RXP_DROP_CNT_tag;

typedef union EMAC_MTL_RXP_ERROR_CNT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXPEC:31;
    vuint32_t RXPECOVF:1;
  } B;
} EMAC_MTL_RXP_ERROR_CNT_tag;

typedef union EMAC_MTL_RXP_INDIRECT_ACC_CONTROL_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ADDR:8;
    vuint32_t _unused_8:8;
    vuint32_t WRRDN:1;
    vuint32_t _unused_17:3;
    vuint32_t RXPEIEE:1;
    vuint32_t RXPEIEC:2;
    vuint32_t _unused_23:8;
    vuint32_t STARTBUSY:1;
  } B;
} EMAC_MTL_RXP_INDIRECT_ACC_CONTROL_STATUS_tag;

typedef union EMAC_MTL_RXP_INDIRECT_ACC_DATA_union_tag {
  vuint32_t R;
  struct {
    vuint32_t DATA:32;
  } B;
} EMAC_MTL_RXP_INDIRECT_ACC_DATA_tag;

typedef union EMAC_MTL_ECC_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t MTXEE:1;
    vuint32_t MRXEE:1;
    vuint32_t MESTEE:1;
    vuint32_t MRXPEE:1;
    vuint32_t _unused_4:1;
    vuint32_t _unused_5:3;
    vuint32_t MEEAO:1;
    vuint32_t _unused_9:23;
  } B;
} EMAC_MTL_ECC_CONTROL_tag;

typedef union EMAC_MTL_SAFETY_INTERRUPT_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t MECIS:1;
    vuint32_t MEUIS:1;
    vuint32_t _unused_2:29;
    vuint32_t _unused_31:1;
  } B;
} EMAC_MTL_SAFETY_INTERRUPT_STATUS_tag;

typedef union EMAC_MTL_ECC_INTERRUPT_ENABLE_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXCEIE:1;
    vuint32_t _unused_1:3;
    vuint32_t RXCEIE:1;
    vuint32_t _unused_5:3;
    vuint32_t ECEIE:1;
    vuint32_t _unused_9:3;
    vuint32_t RPCEIE:1;
    vuint32_t _unused_13:19;
  } B;
} EMAC_MTL_ECC_INTERRUPT_ENABLE_tag;

typedef union EMAC_MTL_ECC_INTERRUPT_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXCES:1;
    vuint32_t TXAMS:1;
    vuint32_t TXUES:1;
    vuint32_t _unused_3:1;
    vuint32_t RXCES:1;
    vuint32_t RXAMS:1;
    vuint32_t RXUES:1;
    vuint32_t _unused_7:1;
    vuint32_t ECES:1;
    vuint32_t EAMS:1;
    vuint32_t EUES:1;
    vuint32_t _unused_11:1;
    vuint32_t RPCES:1;
    vuint32_t RPAMS:1;
    vuint32_t RPUES:1;
    vuint32_t _unused_15:17;
  } B;
} EMAC_MTL_ECC_INTERRUPT_STATUS_tag;

typedef union EMAC_MTL_ECC_ERR_STS_RCTL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t EESRE:1;
    vuint32_t EMS:3;
    vuint32_t CCES:1;
    vuint32_t CUES:1;
    vuint32_t _unused_6:26;
  } B;
} EMAC_MTL_ECC_ERR_STS_RCTL_tag;

typedef union EMAC_MTL_ECC_ERR_ADDR_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ECEAS:16;
    vuint32_t EUEAS:16;
  } B;
} EMAC_MTL_ECC_ERR_ADDR_STATUS_tag;

typedef union EMAC_MTL_ECC_ERR_CNTR_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ECECS:8;
    vuint32_t _unused_8:8;
    vuint32_t EUECS:4;
    vuint32_t _unused_20:12;
  } B;
} EMAC_MTL_ECC_ERR_CNTR_STATUS_tag;

typedef union EMAC_MTL_DPP_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t EDPP:1;
    vuint32_t OPE:1;
    vuint32_t _unused_2:1;
    vuint32_t _unused_3:1;
    vuint32_t IPEID:1;
    vuint32_t IPEMC:1;
    vuint32_t IPEMTS:1;
    vuint32_t IPEMRF:1;
    vuint32_t IPEDDC:1;
    vuint32_t _unused_9:1;
    vuint32_t IPETD:1;
    vuint32_t IPERD:1;
    vuint32_t _unused_12:1;
    vuint32_t _unused_13:1;
    vuint32_t _unused_14:18;
  } B;
} EMAC_MTL_DPP_CONTROL_tag;

typedef union EMAC_MTL_TXQ0_OPERATION_MODE_union_tag {
  vuint32_t R;
  struct {
    vuint32_t FTQ:1;
    vuint32_t TSF:1;
    vuint32_t TXQEN:2;
    vuint32_t TTC:3;
    vuint32_t _unused_7:9;
    vuint32_t TQS:5;
    vuint32_t _unused_21:11;
  } B;
} EMAC_MTL_TXQ0_OPERATION_MODE_tag;

typedef union EMAC_MTL_TXQ0_UNDERFLOW_union_tag {
  vuint32_t R;
  struct {
    vuint32_t UFFRMCNT:11;
    vuint32_t UFCNTOVF:1;
    vuint32_t _unused_12:20;
  } B;
} EMAC_MTL_TXQ0_UNDERFLOW_tag;

typedef union EMAC_MTL_TXQ0_DEBUG_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXQPAUSED:1;
    vuint32_t TRCSTS:2;
    vuint32_t TWCSTS:1;
    vuint32_t TXQSTS:1;
    vuint32_t TXSTSFSTS:1;
    vuint32_t _unused_6:10;
    vuint32_t PTXQ:3;
    vuint32_t _unused_19:1;
    vuint32_t STXSTSF:3;
    vuint32_t _unused_23:9;
  } B;
} EMAC_MTL_TXQ0_DEBUG_tag;

typedef union EMAC_MTL_TXQ0_ETS_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ABS:24;
    vuint32_t _unused_24:8;
  } B;
} EMAC_MTL_TXQ0_ETS_STATUS_tag;

typedef union EMAC_MTL_TXQ0_QUANTUM_WEIGHT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ISCQW:21;
    vuint32_t _unused_21:11;
  } B;
} EMAC_MTL_TXQ0_QUANTUM_WEIGHT_tag;

typedef union EMAC_MTL_Q0_INTERRUPT_CONTROL_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXUNFIS:1;
    vuint32_t ABPSIS:1;
    vuint32_t _unused_2:6;
    vuint32_t TXUIE:1;
    vuint32_t ABPSIE:1;
    vuint32_t _unused_10:6;
    vuint32_t RXOVFIS:1;
    vuint32_t _unused_17:7;
    vuint32_t RXOIE:1;
    vuint32_t _unused_25:7;
  } B;
} EMAC_MTL_Q0_INTERRUPT_CONTROL_STATUS_tag;

typedef union EMAC_MTL_RXQ0_OPERATION_MODE_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RTCf:2;
    vuint32_t _unused_2:1;
    vuint32_t FUP:1;
    vuint32_t FEP:1;
    vuint32_t RSF:1;
    vuint32_t DIS_TCP_EF:1;
    vuint32_t EHFC:1;
    vuint32_t RFA:4;
    vuint32_t _unused_12:2;
    vuint32_t RFD:4;
    vuint32_t _unused_18:2;
    vuint32_t RQS:5;
    vuint32_t _unused_25:7;
  } B;
} EMAC_MTL_RXQ0_OPERATION_MODE_tag;

typedef union EMAC_MTL_RXQ0_MISSED_PACKET_OVERFLOW_CNT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t OVFPKTCNT:11;
    vuint32_t OVFCNTOVF:1;
    vuint32_t _unused_12:4;
    vuint32_t MISPKTCNT:11;
    vuint32_t MISCNTOVF:1;
    vuint32_t _unused_28:4;
  } B;
} EMAC_MTL_RXQ0_MISSED_PACKET_OVERFLOW_CNT_tag;

typedef union EMAC_MTL_RXQ0_DEBUG_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RWCSTS:1;
    vuint32_t RRCSTS:2;
    vuint32_t _unused_3:1;
    vuint32_t RXQSTS:2;
    vuint32_t _unused_6:10;
    vuint32_t PRXQ:14;
    vuint32_t _unused_30:2;
  } B;
} EMAC_MTL_RXQ0_DEBUG_tag;

typedef union EMAC_MTL_RXQ0_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXQ_WEGT:3;              /* Receive Queue Weight */
    vuint32_t RXQ_FRM_ARBIT:1;
    vuint32_t _unused_4:28;
  } B;
} EMAC_MTL_RXQ0_CONTROL_tag;

typedef union EMAC_MTL_TXQ1_OPERATION_MODE_union_tag {
  vuint32_t R;
  struct {
    vuint32_t FTQ:1;
    vuint32_t TSF:1;
    vuint32_t TXQEN:2;
    vuint32_t TTC:3;
    vuint32_t _unused_7:9;
    vuint32_t TQS:5;
    vuint32_t _unused_21:11;
  } B;
} EMAC_MTL_TXQ1_OPERATION_MODE_tag;

typedef union EMAC_MTL_TXQ1_UNDERFLOW_union_tag {
  vuint32_t R;
  struct {
    vuint32_t UFFRMCNT:11;
    vuint32_t UFCNTOVF:1;
    vuint32_t _unused_12:20;
  } B;
} EMAC_MTL_TXQ1_UNDERFLOW_tag;

typedef union EMAC_MTL_TXQ1_DEBUG_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXQPAUSED:1;
    vuint32_t TRCSTS:2;
    vuint32_t TWCSTS:1;
    vuint32_t TXQSTS:1;
    vuint32_t TXSTSFSTS:1;
    vuint32_t _unused_6:10;
    vuint32_t PTXQ:3;
    vuint32_t _unused_19:1;
    vuint32_t STXSTSF:3;
    vuint32_t _unused_23:9;
  } B;
} EMAC_MTL_TXQ1_DEBUG_tag;

typedef union EMAC_MTL_TXQ1_ETS_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t AVALG:1;
    vuint32_t CC:1;
    vuint32_t SLC:3;
    vuint32_t _unused_7:25;
  } B;
} EMAC_MTL_TXQ1_ETS_CONTROL_tag;

typedef union EMAC_MTL_TXQ1_ETS_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ABS:24;
    vuint32_t _unused_24:8;
  } B;
} EMAC_MTL_TXQ1_ETS_STATUS_tag;

typedef union EMAC_MTL_TXQ1_QUANTUM_WEIGHT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ISCQW:21;
    vuint32_t _unused_21:11;
  } B;
} EMAC_MTL_TXQ1_QUANTUM_WEIGHT_tag;

typedef union EMAC_MTL_TXQ1_SENDSLOPECREDIT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t SSC:14;
    vuint32_t _unused_14:18;
  } B;
} EMAC_MTL_TXQ1_SENDSLOPECREDIT_tag;

typedef union EMAC_MTL_TXQ1_HICREDIT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t HC:29;
    vuint32_t _unused_29:3;
  } B;
} EMAC_MTL_TXQ1_HICREDIT_tag;

typedef union EMAC_MTL_TXQ1_LOCREDIT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t LC:29;
    vuint32_t _unused_29:3;
  } B;
} EMAC_MTL_TXQ1_LOCREDIT_tag;

typedef union EMAC_MTL_Q1_INTERRUPT_CONTROL_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TXUNFIS:1;
    vuint32_t ABPSIS:1;
    vuint32_t _unused_2:6;
    vuint32_t TXUIE:1;
    vuint32_t ABPSIE:1;
    vuint32_t _unused_10:6;
    vuint32_t RXOVFIS:1;
    vuint32_t _unused_17:7;
    vuint32_t RXOIE:1;
    vuint32_t _unused_25:7;
  } B;
} EMAC_MTL_Q1_INTERRUPT_CONTROL_STATUS_tag;

typedef union EMAC_MTL_RXQ1_OPERATION_MODE_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RTCf:2;
    vuint32_t _unused_2:1;
    vuint32_t FUP:1;
    vuint32_t FEP:1;
    vuint32_t RSF:1;
    vuint32_t DIS_TCP_EF:1;
    vuint32_t EHFC:1;
    vuint32_t RFA:4;
    vuint32_t _unused_12:2;
    vuint32_t RFD:4;
    vuint32_t _unused_18:2;
    vuint32_t RQS:5;
    vuint32_t _unused_25:7;
  } B;
} EMAC_MTL_RXQ1_OPERATION_MODE_tag;

typedef union EMAC_MTL_RXQ1_MISSED_PACKET_OVERFLOW_CNT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t OVFPKTCNT:11;
    vuint32_t OVFCNTOVF:1;
    vuint32_t _unused_12:4;
    vuint32_t MISPKTCNT:11;
    vuint32_t MISCNTOVF:1;
    vuint32_t _unused_28:4;
  } B;
} EMAC_MTL_RXQ1_MISSED_PACKET_OVERFLOW_CNT_tag;

typedef union EMAC_MTL_RXQ1_DEBUG_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RWCSTS:1;
    vuint32_t RRCSTS:2;
    vuint32_t _unused_3:1;
    vuint32_t RXQSTS:2;
    vuint32_t _unused_6:10;
    vuint32_t PRXQ:14;
    vuint32_t _unused_30:2;
  } B;
} EMAC_MTL_RXQ1_DEBUG_tag;

typedef union EMAC_MTL_RXQ1_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXQ_WEGT:3;
    vuint32_t RXQ_FRM_ARBIT:1;
    vuint32_t _unused_4:28;
  } B;
} EMAC_MTL_RXQ1_CONTROL_tag;

typedef union EMAC_DMA_MODE_union_tag {
  vuint32_t R;
  struct {
    vuint32_t SWR:1;
    vuint32_t DA:1;
    vuint32_t TAA:3;
    vuint32_t _unused_5:3;
    vuint32_t _unused_8:1;
    vuint32_t ARBC:1;
    vuint32_t _unused_10:1;
    vuint32_t TXPR:1;
    vuint32_t PR:3;
    vuint32_t _unused_15:1;
    vuint32_t INTMf:2;
    vuint32_t _unused_18:14;
  } B;
} EMAC_DMA_MODE_tag;

typedef union EMAC_DMA_SYSBUS_MODE_union_tag {
  vuint32_t R;
  struct {
    vuint32_t FB:1;
    vuint32_t _unused_1:1;
    vuint32_t _unused_2:1;
    vuint32_t _unused_3:1;
    vuint32_t _unused_4:1;
    vuint32_t _unused_5:1;
    vuint32_t _unused_6:1;
    vuint32_t _unused_7:1;
    vuint32_t _unused_8:2;
    vuint32_t _unused_10:1;
    vuint32_t _unused_11:1;
    vuint32_t AAL:1;
    vuint32_t _unused_13:1;
    vuint32_t MB:1;
    vuint32_t RB:1;
    vuint32_t _unused_16:2;
    vuint32_t _unused_18:6;
    vuint32_t _unused_24:2;
    vuint32_t _unused_26:4;
    vuint32_t _unused_30:1;
    vuint32_t _unused_31:1;
  } B;
} EMAC_DMA_SYSBUS_MODE_tag;

typedef union EMAC_DMA_INTERRUPT_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t DC0IS:1;
    vuint32_t DC1IS:1;
    vuint32_t _unused_2:1;
    vuint32_t _unused_3:1;
    vuint32_t _unused_4:1;
    vuint32_t _unused_5:1;
    vuint32_t _unused_6:1;
    vuint32_t _unused_7:1;
    vuint32_t _unused_8:8;
    vuint32_t MTLIS:1;
    vuint32_t MACIS:1;
    vuint32_t _unused_18:14;
  } B;
} EMAC_DMA_INTERRUPT_STATUS_tag;

typedef union EMAC_DMA_DEBUG_STATUS0_union_tag {
  vuint32_t R;
  struct {
    vuint32_t AXWHSTS:1;
    vuint32_t _unused_1:1;
    vuint32_t _unused_2:6;
    vuint32_t RPS0:4;
    vuint32_t TPS0:4;
    vuint32_t RPS1:4;
    vuint32_t TPS1:4;
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:4;
  } B;
} EMAC_DMA_DEBUG_STATUS0_tag;

typedef union EMAC_DMA_TBS_CTRL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t FTOV:1;
    vuint32_t _unused_1:3;
    vuint32_t FGOS:3;
    vuint32_t _unused_7:1;
    vuint32_t FTOS:24;
  } B;
} EMAC_DMA_TBS_CTRL_tag;

typedef union EMAC_DMA_SAFETY_INTERRUPT_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t DECIS:1;
    vuint32_t DEUIS:1;
    vuint32_t _unused_2:26;
    vuint32_t MSCIS:1;
    vuint32_t MSUIS:1;
    vuint32_t _unused_30:1;
    vuint32_t MCSIS:1;
  } B;
} EMAC_DMA_SAFETY_INTERRUPT_STATUS_tag;

typedef union EMAC_DMA_CH0_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:14;
    vuint32_t _unused_14:2;
    vuint32_t PBLX8:1;
    vuint32_t _unused_17:1;
    vuint32_t DSL:3;
    vuint32_t _unused_21:3;
    vuint32_t _unused_24:1;
    vuint32_t _unused_25:7;
  } B;
} EMAC_DMA_CH0_CONTROL_tag;

typedef union EMAC_DMA_CH0_TX_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ST:1;
    vuint32_t TCW:3;
    vuint32_t OSF:1;
    vuint32_t _unused_5:7;
    vuint32_t _unused_12:1;
    vuint32_t _unused_13:2;
    vuint32_t _unused_15:1;
    vuint32_t TXPBL:6;
    vuint32_t ETIC:1;
    vuint32_t _unused_23:1;
    vuint32_t _unused_24:4;
    vuint32_t EDSE:1;
    vuint32_t _unused_29:3;
  } B;
} EMAC_DMA_CH0_TX_CONTROL_tag;

typedef union EMAC_DMA_CH0_RX_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t SR:1;
    vuint32_t RBSZ_X_0:2;
    vuint32_t RBSZ_13_Y:12;
    vuint32_t _unused_15:1;
    vuint32_t RXPBL:6;
    vuint32_t ERIC:1;
    vuint32_t _unused_23:1;
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:3;
    vuint32_t RPF:1;
  } B;
} EMAC_DMA_CH0_RX_CONTROL_tag;

typedef union EMAC_DMA_CH0_TXDESC_LIST_ADDRESS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t TDESLA:30;
  } B;
} EMAC_DMA_CH0_TXDESC_LIST_ADDRESS_tag;

typedef union EMAC_DMA_CH0_RXDESC_LIST_ADDRESS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t RDESLA:30;
  } B;
} EMAC_DMA_CH0_RXDESC_LIST_ADDRESS_tag;

typedef union EMAC_DMA_CH0_TXDESC_TAIL_POINTER_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t TDTP:30;
  } B;
} EMAC_DMA_CH0_TXDESC_TAIL_POINTER_tag;

typedef union EMAC_DMA_CH0_RXDESC_TAIL_POINTER_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t RDTP:30;
  } B;
} EMAC_DMA_CH0_RXDESC_TAIL_POINTER_tag;

typedef union EMAC_DMA_CH0_TXDESC_RING_LENGTH_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TDRL:10;
    vuint32_t _unused_10:22;
  } B;
} EMAC_DMA_CH0_TXDESC_RING_LENGTH_tag;

typedef union EMAC_DMA_CH0_RXDESC_RING_LENGTH_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RDRL:10;
    vuint32_t _unused_10:22;
  } B;
} EMAC_DMA_CH0_RXDESC_RING_LENGTH_tag;

typedef union EMAC_DMA_CH0_INTERRUPT_ENABLE_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TIE:1;
    vuint32_t TXSE:1;
    vuint32_t TBUE:1;
    vuint32_t _unused_3:3;
    vuint32_t RIE:1;
    vuint32_t RBUE:1;
    vuint32_t RSE:1;
    vuint32_t RWTE:1;
    vuint32_t ETIE:1;
    vuint32_t ERIE:1;
    vuint32_t FBEE:1;
    vuint32_t CDEE:1;
    vuint32_t AIE:1;
    vuint32_t NIE:1;
    vuint32_t _unused_16:16;
  } B;
} EMAC_DMA_CH0_INTERRUPT_ENABLE_tag;

typedef union EMAC_DMA_CH0_RX_INTERRUPT_WATCHDOG_TIMER_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RWT:8;
    vuint32_t _unused_8:8;
    vuint32_t RWTU:2;
    vuint32_t _unused_18:14;
  } B;
} EMAC_DMA_CH0_RX_INTERRUPT_WATCHDOG_TIMER_tag;

typedef union EMAC_DMA_CH0_SLOT_FUNCTION_CONTROL_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ESC:1;
    vuint32_t ASC:1;
    vuint32_t _unused_2:2;
    vuint32_t SIV:12;
    vuint32_t RSN:4;
    vuint32_t _unused_20:12;
  } B;
} EMAC_DMA_CH0_SLOT_FUNCTION_CONTROL_STATUS_tag;

typedef union EMAC_DMA_CH0_CURRENT_APP_TXDESC_union_tag {
  vuint32_t R;
  struct {
    vuint32_t CURTDESAPTR:32;
  } B;
} EMAC_DMA_CH0_CURRENT_APP_TXDESC_tag;

typedef union EMAC_DMA_CH0_CURRENT_APP_RXDESC_union_tag {
  vuint32_t R;
  struct {
    vuint32_t CURRDESAPTR:32;
  } B;
} EMAC_DMA_CH0_CURRENT_APP_RXDESC_tag;

typedef union EMAC_DMA_CH0_CURRENT_APP_TXBUFFER_union_tag {
  vuint32_t R;
  struct {
    vuint32_t CURTBUFAPTR:32;
  } B;
} EMAC_DMA_CH0_CURRENT_APP_TXBUFFER_tag;

typedef union EMAC_DMA_CH0_CURRENT_APP_RXBUFFER_union_tag {
  vuint32_t R;
  struct {
    vuint32_t CURRBUFAPTR:32;
  } B;
} EMAC_DMA_CH0_CURRENT_APP_RXBUFFER_tag;

typedef union EMAC_DMA_CH0_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TI:1;
    vuint32_t TPS:1;
    vuint32_t TBU:1;
    vuint32_t _unused_3:3;
    vuint32_t RI:1;
    vuint32_t RBU:1;
    vuint32_t RPS:1;
    vuint32_t RWT:1;
    vuint32_t ETI:1;
    vuint32_t ERI:1;
    vuint32_t FBE:1;
    vuint32_t CDE:1;
    vuint32_t AIS:1;
    vuint32_t NIS:1;
    vuint32_t TEB:3;
    vuint32_t REB:3;
    vuint32_t _unused_22:10;
  } B;
} EMAC_DMA_CH0_STATUS_tag;

typedef union EMAC_DMA_CH0_MISS_FRAME_CNT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t MFC:11;
    vuint32_t _unused_11:4;
    vuint32_t MFCO:1;
    vuint32_t _unused_16:16;
  } B;
} EMAC_DMA_CH0_MISS_FRAME_CNT_tag;

typedef union EMAC_DMA_CH0_RXP_ACCEPT_CNT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXPAC:31;
    vuint32_t RXPACOF:1;
  } B;
} EMAC_DMA_CH0_RXP_ACCEPT_CNT_tag;

typedef union EMAC_DMA_CH0_RX_ERI_CNT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ECNT:12;
    vuint32_t _unused_12:20;
  } B;
} EMAC_DMA_CH0_RX_ERI_CNT_tag;

typedef union EMAC_DMA_CH1_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:14;
    vuint32_t _unused_14:2;
    vuint32_t PBLX8:1;
    vuint32_t _unused_17:1;
    vuint32_t DSL:3;
    vuint32_t _unused_21:3;
    vuint32_t _unused_24:1;
    vuint32_t _unused_25:7;
  } B;
} EMAC_DMA_CH1_CONTROL_tag;

typedef union EMAC_DMA_CH1_TX_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ST:1;
    vuint32_t TCW:3;
    vuint32_t OSF:1;
    vuint32_t _unused_5:7;
    vuint32_t _unused_12:1;
    vuint32_t _unused_13:2;
    vuint32_t _unused_15:1;
    vuint32_t TXPBL:6;
    vuint32_t ETIC:1;
    vuint32_t _unused_23:1;
    vuint32_t _unused_24:4;
    vuint32_t EDSE:1;
    vuint32_t _unused_29:3;
  } B;
} EMAC_DMA_CH1_TX_CONTROL_tag;

typedef union EMAC_DMA_CH1_RX_CONTROL_union_tag {
  vuint32_t R;
  struct {
    vuint32_t SR:1;
    vuint32_t RBSZ_X_0:2;
    vuint32_t RBSZ_13_Y:12;
    vuint32_t _unused_15:1;
    vuint32_t RXPBL:6;
    vuint32_t ERIC:1;
    vuint32_t _unused_23:1;
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:3;
    vuint32_t RPF:1;
  } B;
} EMAC_DMA_CH1_RX_CONTROL_tag;

typedef union EMAC_DMA_CH1_TXDESC_LIST_ADDRESS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t TDESLA:30;
  } B;
} EMAC_DMA_CH1_TXDESC_LIST_ADDRESS_tag;

typedef union EMAC_DMA_CH1_RXDESC_LIST_ADDRESS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t RDESLA:30;
  } B;
} EMAC_DMA_CH1_RXDESC_LIST_ADDRESS_tag;

typedef union EMAC_DMA_CH1_TXDESC_TAIL_POINTER_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t TDTP:30;
  } B;
} EMAC_DMA_CH1_TXDESC_TAIL_POINTER_tag;

typedef union EMAC_DMA_CH1_RXDESC_TAIL_POINTER_union_tag {
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t RDTP:30;
  } B;
} EMAC_DMA_CH1_RXDESC_TAIL_POINTER_tag;

typedef union EMAC_DMA_CH1_TXDESC_RING_LENGTH_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TDRL:10;
    vuint32_t _unused_10:22;
  } B;
} EMAC_DMA_CH1_TXDESC_RING_LENGTH_tag;

typedef union EMAC_DMA_CH1_RXDESC_RING_LENGTH_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RDRL:10;
    vuint32_t _unused_10:22;
  } B;
} EMAC_DMA_CH1_RXDESC_RING_LENGTH_tag;

typedef union EMAC_DMA_CH1_INTERRUPT_ENABLE_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TIE:1;
    vuint32_t TXSE:1;
    vuint32_t TBUE:1;
    vuint32_t _unused_3:3;
    vuint32_t RIE:1;
    vuint32_t RBUE:1;
    vuint32_t RSE:1;
    vuint32_t RWTE:1;
    vuint32_t ETIE:1;
    vuint32_t ERIE:1;
    vuint32_t FBEE:1;
    vuint32_t CDEE:1;
    vuint32_t AIE:1;
    vuint32_t NIE:1;
    vuint32_t _unused_16:16;
  } B;
} EMAC_DMA_CH1_INTERRUPT_ENABLE_tag;

typedef union EMAC_DMA_CH1_RX_INTERRUPT_WATCHDOG_TIMER_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RWT:8;
    vuint32_t _unused_8:8;
    vuint32_t RWTU:2;
    vuint32_t _unused_18:14;
  } B;
} EMAC_DMA_CH1_RX_INTERRUPT_WATCHDOG_TIMER_tag;

typedef union EMAC_DMA_CH1_SLOT_FUNCTION_CONTROL_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ESC:1;
    vuint32_t ASC:1;
    vuint32_t _unused_2:2;
    vuint32_t SIV:12;
    vuint32_t RSN:4;
    vuint32_t _unused_20:12;
  } B;
} EMAC_DMA_CH1_SLOT_FUNCTION_CONTROL_STATUS_tag;

typedef union EMAC_DMA_CH1_CURRENT_APP_TXDESC_union_tag {
  vuint32_t R;
  struct {
    vuint32_t CURTDESAPTR:32;
  } B;
} EMAC_DMA_CH1_CURRENT_APP_TXDESC_tag;

typedef union EMAC_DMA_CH1_CURRENT_APP_RXDESC_union_tag {
  vuint32_t R;
  struct {
    vuint32_t CURRDESAPTR:32;
  } B;
} EMAC_DMA_CH1_CURRENT_APP_RXDESC_tag;

typedef union EMAC_DMA_CH1_CURRENT_APP_TXBUFFER_union_tag {
  vuint32_t R;
  struct {
    vuint32_t CURTBUFAPTR:32;
  } B;
} EMAC_DMA_CH1_CURRENT_APP_TXBUFFER_tag;

typedef union EMAC_DMA_CH1_CURRENT_APP_RXBUFFER_union_tag {
  vuint32_t R;
  struct {
    vuint32_t CURRBUFAPTR:32;
  } B;
} EMAC_DMA_CH1_CURRENT_APP_RXBUFFER_tag;

typedef union EMAC_DMA_CH1_STATUS_union_tag {
  vuint32_t R;
  struct {
    vuint32_t TI:1;
    vuint32_t TPS:1;
    vuint32_t TBU:1;
    vuint32_t _unused_3:3;
    vuint32_t RI:1;
    vuint32_t RBU:1;
    vuint32_t RPS:1;
    vuint32_t RWT:1;
    vuint32_t ETI:1;
    vuint32_t ERI:1;
    vuint32_t FBE:1;
    vuint32_t CDE:1;
    vuint32_t AIS:1;
    vuint32_t NIS:1;
    vuint32_t TEB:3;
    vuint32_t REB:3;
    vuint32_t _unused_22:10;
  } B;
} EMAC_DMA_CH1_STATUS_tag;

typedef union EMAC_DMA_CH1_MISS_FRAME_CNT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t MFC:11;
    vuint32_t _unused_11:4;
    vuint32_t MFCO:1;
    vuint32_t _unused_16:16;
  } B;
} EMAC_DMA_CH1_MISS_FRAME_CNT_tag;

typedef union EMAC_DMA_CH1_RXP_ACCEPT_CNT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t RXPAC:31;
    vuint32_t RXPACOF:1;
  } B;
} EMAC_DMA_CH1_RXP_ACCEPT_CNT_tag;

typedef union EMAC_DMA_CH1_RX_ERI_CNT_union_tag {
  vuint32_t R;
  struct {
    vuint32_t ECNT:12;
    vuint32_t _unused_12:20;
  } B;
} EMAC_DMA_CH1_RX_ERI_CNT_tag;

struct EMAC_tag {
  EMAC_MAC_CONFIGURATION_tag MAC_CONFIGURATION;
  EMAC_MAC_EXT_CONFIGURATION_tag MAC_EXT_CONFIGURATION; /* MAC Extended Configuration */
  EMAC_MAC_PACKET_FILTER_tag MAC_PACKET_FILTER; /* MAC Packet Filter */
  EMAC_MAC_WATCHDOG_TIMEOUT_tag MAC_WATCHDOG_TIMEOUT; /* MAC Watchdog Timeout */
  EMAC_MAC_HASH_TABLE_REG0_tag MAC_HASH_TABLE_REG0;
  EMAC_MAC_HASH_TABLE_REG1_tag MAC_HASH_TABLE_REG1;
  uint8_t EMAC_reserved0[56];
  EMAC_MAC_VLAN_TAG_CTRL_tag MAC_VLAN_TAG_CTRL;
  EMAC_MAC_VLAN_TAG_DATA_tag MAC_VLAN_TAG_DATA;
  EMAC_MAC_VLAN_HASH_TABLE_tag MAC_VLAN_HASH_TABLE;
  uint8_t EMAC_reserved1[4];
  EMAC_MAC_VLAN_INCL_tag MAC_VLAN_INCL;
  EMAC_MAC_INNER_VLAN_INCL_tag MAC_INNER_VLAN_INCL;
  uint8_t EMAC_reserved2[8];
  EMAC_MAC_Q0_TX_FLOW_CTRL_tag MAC_Q0_TX_FLOW_CTRL;
  uint8_t EMAC_reserved3[28];
  EMAC_MAC_RX_FLOW_CTRL_tag MAC_RX_FLOW_CTRL;
  EMAC_MAC_RXQ_CTRL4_tag MAC_RXQ_CTRL4;
  uint8_t EMAC_reserved4[8];
  EMAC_MAC_RXQ_CTRL0_tag MAC_RXQ_CTRL0;
  EMAC_MAC_RXQ_CTRL1_tag MAC_RXQ_CTRL1;
  EMAC_MAC_RXQ_CTRL2_tag MAC_RXQ_CTRL2;
  uint8_t EMAC_reserved5[4];
  EMAC_MAC_INTERRUPT_STATUS_tag MAC_INTERRUPT_STATUS;
  EMAC_MAC_INTERRUPT_ENABLE_tag MAC_INTERRUPT_ENABLE;
  EMAC_MAC_RX_TX_STATUS_tag MAC_RX_TX_STATUS;
  uint8_t EMAC_reserved6[84];
  EMAC_MAC_VERSION_tag MAC_VERSION;
  EMAC_MAC_DEBUG_tag MAC_DEBUG;
  uint8_t EMAC_reserved7[4];
  EMAC_MAC_HW_FEATURE0_tag MAC_HW_FEATURE0;
  EMAC_MAC_HW_FEATURE1_tag MAC_HW_FEATURE1;
  EMAC_MAC_HW_FEATURE2_tag MAC_HW_FEATURE2;
  EMAC_MAC_HW_FEATURE3_tag MAC_HW_FEATURE3;
  uint8_t EMAC_reserved8[20];
  EMAC_MAC_DPP_FSM_INTERRUPT_STATUS_tag MAC_DPP_FSM_INTERRUPT_STATUS;
  uint8_t EMAC_reserved9[4];
  EMAC_MAC_FSM_CONTROL_tag MAC_FSM_CONTROL;
  EMAC_MAC_FSM_ACT_TIMER_tag MAC_FSM_ACT_TIMER;
  EMAC_SCS_REG1_tag SCS_REG1;
  uint8_t EMAC_reserved10[172];
  EMAC_MAC_MDIO_ADDRESS_tag MAC_MDIO_ADDRESS;
  EMAC_MAC_MDIO_DATA_tag MAC_MDIO_DATA;
  uint8_t EMAC_reserved11[40];
  EMAC_MAC_CSR_SW_CTRL_tag MAC_CSR_SW_CTRL;
  EMAC_MAC_FPE_CTRL_STS_tag MAC_FPE_CTRL_STS;
  uint8_t EMAC_reserved12[8];
  EMAC_MAC_PRESN_TIME_NS_tag MAC_PRESN_TIME_NS;
  EMAC_MAC_PRESN_TIME_UPDT_tag MAC_PRESN_TIME_UPDT;
  uint8_t EMAC_reserved13[184];
  EMAC_MAC_ADDRESS0_HIGH_tag MAC_ADDRESS0_HIGH;
  EMAC_MAC_ADDRESS0_LOW_tag MAC_ADDRESS0_LOW;
  EMAC_MAC_ADDRESS1_HIGH_tag MAC_ADDRESS1_HIGH;
  EMAC_MAC_ADDRESS1_LOW_tag MAC_ADDRESS1_LOW;
  EMAC_MAC_ADDRESS2_HIGH_tag MAC_ADDRESS2_HIGH;
  EMAC_MAC_ADDRESS2_LOW_tag MAC_ADDRESS2_LOW;
  uint8_t EMAC_reserved14[1000];
  EMAC_MMC_CONTROL_tag MMC_CONTROL;
  EMAC_MMC_RX_INTERRUPT_tag MMC_RX_INTERRUPT;
  EMAC_MMC_TX_INTERRUPT_tag MMC_TX_INTERRUPT;
  EMAC_MMC_RX_INTERRUPT_MASK_tag MMC_RX_INTERRUPT_MASK;
  EMAC_MMC_TX_INTERRUPT_MASK_tag MMC_TX_INTERRUPT_MASK;
  EMAC_TX_OCTET_COUNT_GOOD_BAD_tag TX_OCTET_COUNT_GOOD_BAD;
  EMAC_TX_PACKET_COUNT_GOOD_BAD_tag TX_PACKET_COUNT_GOOD_BAD;
  EMAC_TX_BROADCAST_PACKETS_GOOD_tag TX_BROADCAST_PACKETS_GOOD;
  EMAC_TX_MULTICAST_PACKETS_GOOD_tag TX_MULTICAST_PACKETS_GOOD;
  EMAC_TX_64OCTETS_PACKETS_GOOD_BAD_tag TX_64OCTETS_PACKETS_GOOD_BAD;
  EMAC_TX_65TO127OCTETS_PACKETS_GOOD_BAD_tag TX_65TO127OCTETS_PACKETS_GOOD_BAD;
  EMAC_TX_128TO255OCTETS_PACKETS_GOOD_BAD_tag TX_128TO255OCTETS_PACKETS_GOOD_BAD;
  EMAC_TX_256TO511OCTETS_PACKETS_GOOD_BAD_tag TX_256TO511OCTETS_PACKETS_GOOD_BAD;
  EMAC_TX_512TO1023OCTETS_PACKETS_GOOD_BAD_tag TX_512TO1023OCTETS_PACKETS_GOOD_BAD;
  EMAC_TX_1024TOMAXOCTETS_PACKETS_GOOD_BAD_tag TX_1024TOMAXOCTETS_PACKETS_GOOD_BAD;
  EMAC_TX_UNICAST_PACKETS_GOOD_BAD_tag TX_UNICAST_PACKETS_GOOD_BAD;
  EMAC_TX_MULTICAST_PACKETS_GOOD_BAD_tag TX_MULTICAST_PACKETS_GOOD_BAD;
  EMAC_TX_BROADCAST_PACKETS_GOOD_BAD_tag TX_BROADCAST_PACKETS_GOOD_BAD;
  EMAC_TX_UNDERFLOW_ERROR_PACKETS_tag TX_UNDERFLOW_ERROR_PACKETS;
  EMAC_TX_SINGLE_COLLISION_GOOD_PACKETS_tag TX_SINGLE_COLLISION_GOOD_PACKETS;
  EMAC_TX_MULTIPLE_COLLISION_GOOD_PACKETS_tag TX_MULTIPLE_COLLISION_GOOD_PACKETS;
  EMAC_TX_DEFERRED_PACKETS_tag TX_DEFERRED_PACKETS;
  EMAC_TX_LATE_COLLISION_PACKETS_tag TX_LATE_COLLISION_PACKETS;
  EMAC_TX_EXCESSIVE_COLLISION_PACKETS_tag TX_EXCESSIVE_COLLISION_PACKETS;
  EMAC_TX_CARRIER_ERROR_PACKETS_tag TX_CARRIER_ERROR_PACKETS;
  EMAC_TX_OCTET_COUNT_GOOD_tag TX_OCTET_COUNT_GOOD;
  EMAC_TX_PACKET_COUNT_GOOD_tag TX_PACKET_COUNT_GOOD;
  EMAC_TX_EXCESSIVE_DEFERRAL_ERROR_tag TX_EXCESSIVE_DEFERRAL_ERROR;
  EMAC_TX_PAUSE_PACKETS_tag TX_PAUSE_PACKETS;
  EMAC_TX_VLAN_PACKETS_GOOD_tag TX_VLAN_PACKETS_GOOD;
  EMAC_TX_OSIZE_PACKETS_GOOD_tag TX_OSIZE_PACKETS_GOOD;
  uint8_t EMAC_reserved15[4];
  EMAC_RX_PACKETS_COUNT_GOOD_BAD_tag RX_PACKETS_COUNT_GOOD_BAD;
  EMAC_RX_OCTET_COUNT_GOOD_BAD_tag RX_OCTET_COUNT_GOOD_BAD;
  EMAC_RX_OCTET_COUNT_GOOD_tag RX_OCTET_COUNT_GOOD;
  EMAC_RX_BROADCAST_PACKETS_GOOD_tag RX_BROADCAST_PACKETS_GOOD;
  EMAC_RX_MULTICAST_PACKETS_GOOD_tag RX_MULTICAST_PACKETS_GOOD;
  EMAC_RX_CRC_ERROR_PACKETS_tag RX_CRC_ERROR_PACKETS;
  EMAC_RX_ALIGNMENT_ERROR_PACKETS_tag RX_ALIGNMENT_ERROR_PACKETS;
  EMAC_RX_RUNT_ERROR_PACKETS_tag RX_RUNT_ERROR_PACKETS;
  EMAC_RX_JABBER_ERROR_PACKETS_tag RX_JABBER_ERROR_PACKETS;
  EMAC_RX_UNDERSIZE_PACKETS_GOOD_tag RX_UNDERSIZE_PACKETS_GOOD;
  EMAC_RX_OVERSIZE_PACKETS_GOOD_tag RX_OVERSIZE_PACKETS_GOOD;
  EMAC_RX_64OCTETS_PACKETS_GOOD_BAD_tag RX_64OCTETS_PACKETS_GOOD_BAD;
  EMAC_RX_65TO127OCTETS_PACKETS_GOOD_BAD_tag RX_65TO127OCTETS_PACKETS_GOOD_BAD;
  EMAC_RX_128TO255OCTETS_PACKETS_GOOD_BAD_tag RX_128TO255OCTETS_PACKETS_GOOD_BAD;
  EMAC_RX_256TO511OCTETS_PACKETS_GOOD_BAD_tag RX_256TO511OCTETS_PACKETS_GOOD_BAD;
  EMAC_RX_512TO1023OCTETS_PACKETS_GOOD_BAD_tag RX_512TO1023OCTETS_PACKETS_GOOD_BAD;
  EMAC_RX_1024TOMAXOCTETS_PACKETS_GOOD_BAD_tag RX_1024TOMAXOCTETS_PACKETS_GOOD_BAD;
  EMAC_RX_UNICAST_PACKETS_GOOD_tag RX_UNICAST_PACKETS_GOOD;
  EMAC_RX_LENGTH_ERROR_PACKETS_tag RX_LENGTH_ERROR_PACKETS;
  EMAC_RX_OUT_OF_RANGE_TYPE_PACKETS_tag RX_OUT_OF_RANGE_TYPE_PACKETS;
  EMAC_RX_PAUSE_PACKETS_tag RX_PAUSE_PACKETS;
  EMAC_RX_FIFO_OVERFLOW_PACKETS_tag RX_FIFO_OVERFLOW_PACKETS;
  EMAC_RX_VLAN_PACKETS_GOOD_BAD_tag RX_VLAN_PACKETS_GOOD_BAD;
  EMAC_RX_WATCHDOG_ERROR_PACKETS_tag RX_WATCHDOG_ERROR_PACKETS;
  EMAC_RX_RECEIVE_ERROR_PACKETS_tag RX_RECEIVE_ERROR_PACKETS;
  EMAC_RX_CONTROL_PACKETS_GOOD_tag RX_CONTROL_PACKETS_GOOD;
  uint8_t EMAC_reserved16[184];
  EMAC_MMC_FPE_TX_INTERRUPT_tag MMC_FPE_TX_INTERRUPT;
  EMAC_MMC_FPE_TX_INTERRUPT_MASK_tag MMC_FPE_TX_INTERRUPT_MASK;
  EMAC_MMC_TX_FPE_FRAGMENT_CNTR_tag MMC_TX_FPE_FRAGMENT_CNTR;
  EMAC_MMC_TX_HOLD_REQ_CNTR_tag MMC_TX_HOLD_REQ_CNTR;
  uint8_t EMAC_reserved17[16];
  EMAC_MMC_FPE_RX_INTERRUPT_tag MMC_FPE_RX_INTERRUPT;
  EMAC_MMC_FPE_RX_INTERRUPT_MASK_tag MMC_FPE_RX_INTERRUPT_MASK;
  EMAC_MMC_RX_PACKET_ASSEMBLY_ERR_CNTR_tag MMC_RX_PACKET_ASSEMBLY_ERR_CNTR;
  EMAC_MMC_RX_PACKET_SMD_ERR_CNTR_tag MMC_RX_PACKET_SMD_ERR_CNTR;
  EMAC_MMC_RX_PACKET_ASSEMBLY_OK_CNTR_tag MMC_RX_PACKET_ASSEMBLY_OK_CNTR;
  EMAC_MMC_RX_FPE_FRAGMENT_CNTR_tag MMC_RX_FPE_FRAGMENT_CNTR;
  uint8_t EMAC_reserved18[40];
  EMAC_MAC_L3_L4_CONTROL0_tag MAC_L3_L4_CONTROL0;
  EMAC_MAC_LAYER4_ADDRESS0_tag MAC_LAYER4_ADDRESS0;
  uint8_t EMAC_reserved19[8];
  EMAC_MAC_LAYER3_ADDR0_REG0_tag MAC_LAYER3_ADDR0_REG0;
  EMAC_MAC_LAYER3_ADDR1_REG0_tag MAC_LAYER3_ADDR1_REG0;
  EMAC_MAC_LAYER3_ADDR2_REG0_tag MAC_LAYER3_ADDR2_REG0;
  EMAC_MAC_LAYER3_ADDR3_REG0_tag MAC_LAYER3_ADDR3_REG0;
  uint8_t EMAC_reserved20[16];
  EMAC_MAC_L3_L4_CONTROL1_tag MAC_L3_L4_CONTROL1;
  EMAC_MAC_LAYER4_ADDRESS1_tag MAC_LAYER4_ADDRESS1;
  uint8_t EMAC_reserved21[8];
  EMAC_MAC_LAYER3_ADDR0_REG1_tag MAC_LAYER3_ADDR0_REG1;
  EMAC_MAC_LAYER3_ADDR1_REG1_tag MAC_LAYER3_ADDR1_REG1;
  EMAC_MAC_LAYER3_ADDR2_REG1_tag MAC_LAYER3_ADDR2_REG1;
  EMAC_MAC_LAYER3_ADDR3_REG1_tag MAC_LAYER3_ADDR3_REG1;
  uint8_t EMAC_reserved22[16];
  EMAC_MAC_L3_L4_CONTROL2_tag MAC_L3_L4_CONTROL2;
  EMAC_MAC_LAYER4_ADDRESS2_tag MAC_LAYER4_ADDRESS2;
  uint8_t EMAC_reserved23[8];
  EMAC_MAC_LAYER3_ADDR0_REG2_tag MAC_LAYER3_ADDR0_REG2;
  EMAC_MAC_LAYER3_ADDR1_REG2_tag MAC_LAYER3_ADDR1_REG2;
  EMAC_MAC_LAYER3_ADDR2_REG2_tag MAC_LAYER3_ADDR2_REG2;
  EMAC_MAC_LAYER3_ADDR3_REG2_tag MAC_LAYER3_ADDR3_REG2;
  uint8_t EMAC_reserved24[16];
  EMAC_MAC_L3_L4_CONTROL3_tag MAC_L3_L4_CONTROL3;
  EMAC_MAC_LAYER4_ADDRESS3_tag MAC_LAYER4_ADDRESS3;
  uint8_t EMAC_reserved25[8];
  EMAC_MAC_LAYER3_ADDR0_REG3_tag MAC_LAYER3_ADDR0_REG3;
  EMAC_MAC_LAYER3_ADDR1_REG3_tag MAC_LAYER3_ADDR1_REG3;
  EMAC_MAC_LAYER3_ADDR2_REG3_tag MAC_LAYER3_ADDR2_REG3;
  EMAC_MAC_LAYER3_ADDR3_REG3_tag MAC_LAYER3_ADDR3_REG3;
  uint8_t EMAC_reserved26[336];
  EMAC_MAC_TIMESTAMP_CONTROL_tag MAC_TIMESTAMP_CONTROL;
  EMAC_MAC_SUB_SECOND_INCREMENT_tag MAC_SUB_SECOND_INCREMENT;
  EMAC_MAC_SYSTEM_TIME_SECONDS_tag MAC_SYSTEM_TIME_SECONDS;
  EMAC_MAC_SYSTEM_TIME_NANOSECONDS_tag MAC_SYSTEM_TIME_NANOSECONDS;
  EMAC_MAC_SYSTEM_TIME_SECONDS_UPDATE_tag MAC_SYSTEM_TIME_SECONDS_UPDATE;
  EMAC_MAC_SYSTEM_TIME_NANOSECONDS_UPDATE_tag MAC_SYSTEM_TIME_NANOSECONDS_UPDATE;
  EMAC_MAC_TIMESTAMP_ADDEND_tag MAC_TIMESTAMP_ADDEND;
  EMAC_MAC_SYSTEM_TIME_HIGHER_WORD_SECONDS_tag MAC_SYSTEM_TIME_HIGHER_WORD_SECONDS;
  EMAC_MAC_TIMESTAMP_STATUS_tag MAC_TIMESTAMP_STATUS;
  uint8_t EMAC_reserved27[12];
  EMAC_MAC_TX_TIMESTAMP_STATUS_NANOSECONDS_tag MAC_TX_TIMESTAMP_STATUS_NANOSECONDS;
  EMAC_MAC_TX_TIMESTAMP_STATUS_SECONDS_tag MAC_TX_TIMESTAMP_STATUS_SECONDS;
  uint8_t EMAC_reserved28[24];
  EMAC_MAC_TIMESTAMP_INGRESS_ASYM_CORR_tag MAC_TIMESTAMP_INGRESS_ASYM_CORR;
  EMAC_MAC_TIMESTAMP_EGRESS_ASYM_CORR_tag MAC_TIMESTAMP_EGRESS_ASYM_CORR;
  EMAC_MAC_TIMESTAMP_INGRESS_CORR_NANOSECOND_tag MAC_TIMESTAMP_INGRESS_CORR_NANOSECOND;
  EMAC_MAC_TIMESTAMP_EGRESS_CORR_NANOSECOND_tag MAC_TIMESTAMP_EGRESS_CORR_NANOSECOND;
  EMAC_MAC_TIMESTAMP_INGRESS_CORR_SUBNANOSEC_tag MAC_TIMESTAMP_INGRESS_CORR_SUBNANOSEC;
  EMAC_MAC_TIMESTAMP_EGRESS_CORR_SUBNANOSEC_tag MAC_TIMESTAMP_EGRESS_CORR_SUBNANOSEC;
  EMAC_MAC_TIMESTAMP_INGRESS_LATENCY_tag MAC_TIMESTAMP_INGRESS_LATENCY;
  EMAC_MAC_TIMESTAMP_EGRESS_LATENCY_tag MAC_TIMESTAMP_EGRESS_LATENCY;
  EMAC_MAC_PPS_CONTROL_tag MAC_PPS_CONTROL;
  uint8_t EMAC_reserved29[12];
  EMAC_MAC_PPS0_TARGET_TIME_SECONDS_tag MAC_PPS0_TARGET_TIME_SECONDS;
  EMAC_MAC_PPS0_TARGET_TIME_NANOSECONDS_tag MAC_PPS0_TARGET_TIME_NANOSECONDS;
  EMAC_MAC_PPS0_INTERVAL_tag MAC_PPS0_INTERVAL;
  EMAC_MAC_PPS0_WIDTH_tag MAC_PPS0_WIDTH;
  EMAC_MAC_PPS1_TARGET_TIME_SECONDS_tag MAC_PPS1_TARGET_TIME_SECONDS;
  EMAC_MAC_PPS1_TARGET_TIME_NANOSECONDS_tag MAC_PPS1_TARGET_TIME_NANOSECONDS;
  EMAC_MAC_PPS1_INTERVAL_tag MAC_PPS1_INTERVAL;
  EMAC_MAC_PPS1_WIDTH_tag MAC_PPS1_WIDTH;
  EMAC_MAC_PPS2_TARGET_TIME_SECONDS_tag MAC_PPS2_TARGET_TIME_SECONDS;
  EMAC_MAC_PPS2_TARGET_TIME_NANOSECONDS_tag MAC_PPS2_TARGET_TIME_NANOSECONDS;
  EMAC_MAC_PPS2_INTERVAL_tag MAC_PPS2_INTERVAL;
  EMAC_MAC_PPS2_WIDTH_tag MAC_PPS2_WIDTH;
  EMAC_MAC_PPS3_TARGET_TIME_SECONDS_tag MAC_PPS3_TARGET_TIME_SECONDS;
  EMAC_MAC_PPS3_TARGET_TIME_NANOSECONDS_tag MAC_PPS3_TARGET_TIME_NANOSECONDS;
  EMAC_MAC_PPS3_INTERVAL_tag MAC_PPS3_INTERVAL;
  EMAC_MAC_PPS3_WIDTH_tag MAC_PPS3_WIDTH;
  uint8_t EMAC_reserved30[64];
  EMAC_MTL_OPERATION_MODE_tag MTL_OPERATION_MODE;
  uint8_t EMAC_reserved31[4];
  EMAC_MTL_DBG_CTL_tag MTL_DBG_CTL;
  EMAC_MTL_DBG_STS_tag MTL_DBG_STS;
  EMAC_MTL_FIFO_DEBUG_DATA_tag MTL_FIFO_DEBUG_DATA;
  uint8_t EMAC_reserved32[12];
  EMAC_MTL_INTERRUPT_STATUS_tag MTL_INTERRUPT_STATUS;
  uint8_t EMAC_reserved33[12];
  EMAC_MTL_RXQ_DMA_MAP0_tag MTL_RXQ_DMA_MAP0;
  uint8_t EMAC_reserved34[12];
  EMAC_MTL_TBS_CTRL_tag MTL_TBS_CTRL;
  uint8_t EMAC_reserved35[12];
  EMAC_MTL_EST_CONTROL_tag MTL_EST_CONTROL;
  uint8_t EMAC_reserved36[4];
  EMAC_MTL_EST_STATUS_tag MTL_EST_STATUS;
  uint8_t EMAC_reserved37[4];
  EMAC_MTL_EST_SCH_ERROR_tag MTL_EST_SCH_ERROR;
  EMAC_MTL_EST_FRM_SIZE_ERROR_tag MTL_EST_FRM_SIZE_ERROR;
  EMAC_MTL_EST_FRM_SIZE_CAPTURE_tag MTL_EST_FRM_SIZE_CAPTURE;
  uint8_t EMAC_reserved38[4];
  EMAC_MTL_EST_INTR_ENABLE_tag MTL_EST_INTR_ENABLE;
  uint8_t EMAC_reserved39[12];
  EMAC_MTL_EST_GCL_CONTROL_tag MTL_EST_GCL_CONTROL;
  EMAC_MTL_EST_GCL_DATA_tag MTL_EST_GCL_DATA;
  uint8_t EMAC_reserved40[8];
  EMAC_MTL_FPE_CTRL_STS_tag MTL_FPE_CTRL_STS;
  EMAC_MTL_FPE_ADVANCE_tag MTL_FPE_ADVANCE;
  uint8_t EMAC_reserved41[8];
  EMAC_MTL_RXP_CONTROL_STATUS_tag MTL_RXP_CONTROL_STATUS;
  EMAC_MTL_RXP_INTERRUPT_CONTROL_STATUS_tag MTL_RXP_INTERRUPT_CONTROL_STATUS;
  EMAC_MTL_RXP_DROP_CNT_tag MTL_RXP_DROP_CNT;
  EMAC_MTL_RXP_ERROR_CNT_tag MTL_RXP_ERROR_CNT;
  EMAC_MTL_RXP_INDIRECT_ACC_CONTROL_STATUS_tag MTL_RXP_INDIRECT_ACC_CONTROL_STATUS;
  EMAC_MTL_RXP_INDIRECT_ACC_DATA_tag MTL_RXP_INDIRECT_ACC_DATA;
  uint8_t EMAC_reserved42[8];
  EMAC_MTL_ECC_CONTROL_tag MTL_ECC_CONTROL;
  EMAC_MTL_SAFETY_INTERRUPT_STATUS_tag MTL_SAFETY_INTERRUPT_STATUS;
  EMAC_MTL_ECC_INTERRUPT_ENABLE_tag MTL_ECC_INTERRUPT_ENABLE;
  EMAC_MTL_ECC_INTERRUPT_STATUS_tag MTL_ECC_INTERRUPT_STATUS;
  EMAC_MTL_ECC_ERR_STS_RCTL_tag MTL_ECC_ERR_STS_RCTL;
  EMAC_MTL_ECC_ERR_ADDR_STATUS_tag MTL_ECC_ERR_ADDR_STATUS;
  EMAC_MTL_ECC_ERR_CNTR_STATUS_tag MTL_ECC_ERR_CNTR_STATUS;
  uint8_t EMAC_reserved43[4];
  EMAC_MTL_DPP_CONTROL_tag MTL_DPP_CONTROL;
  uint8_t EMAC_reserved44[28];
  EMAC_MTL_TXQ0_OPERATION_MODE_tag MTL_TXQ0_OPERATION_MODE;
  EMAC_MTL_TXQ0_UNDERFLOW_tag MTL_TXQ0_UNDERFLOW;
  EMAC_MTL_TXQ0_DEBUG_tag MTL_TXQ0_DEBUG;
  uint8_t EMAC_reserved45[8];
  EMAC_MTL_TXQ0_ETS_STATUS_tag MTL_TXQ0_ETS_STATUS;
  EMAC_MTL_TXQ0_QUANTUM_WEIGHT_tag MTL_TXQ0_QUANTUM_WEIGHT;
  uint8_t EMAC_reserved46[16];
  EMAC_MTL_Q0_INTERRUPT_CONTROL_STATUS_tag MTL_Q0_INTERRUPT_CONTROL_STATUS;
  EMAC_MTL_RXQ0_OPERATION_MODE_tag MTL_RXQ0_OPERATION_MODE;
  EMAC_MTL_RXQ0_MISSED_PACKET_OVERFLOW_CNT_tag MTL_RXQ0_MISSED_PACKET_OVERFLOW_CNT;
  EMAC_MTL_RXQ0_DEBUG_tag MTL_RXQ0_DEBUG;
  EMAC_MTL_RXQ0_CONTROL_tag MTL_RXQ0_CONTROL;
  EMAC_MTL_TXQ1_OPERATION_MODE_tag MTL_TXQ1_OPERATION_MODE;
  EMAC_MTL_TXQ1_UNDERFLOW_tag MTL_TXQ1_UNDERFLOW;
  EMAC_MTL_TXQ1_DEBUG_tag MTL_TXQ1_DEBUG;
  uint8_t EMAC_reserved47[4];
  EMAC_MTL_TXQ1_ETS_CONTROL_tag MTL_TXQ1_ETS_CONTROL;
  EMAC_MTL_TXQ1_ETS_STATUS_tag MTL_TXQ1_ETS_STATUS;
  EMAC_MTL_TXQ1_QUANTUM_WEIGHT_tag MTL_TXQ1_QUANTUM_WEIGHT;
  EMAC_MTL_TXQ1_SENDSLOPECREDIT_tag MTL_TXQ1_SENDSLOPECREDIT;
  EMAC_MTL_TXQ1_HICREDIT_tag MTL_TXQ1_HICREDIT;
  EMAC_MTL_TXQ1_LOCREDIT_tag MTL_TXQ1_LOCREDIT;
  uint8_t EMAC_reserved48[4];
  EMAC_MTL_Q1_INTERRUPT_CONTROL_STATUS_tag MTL_Q1_INTERRUPT_CONTROL_STATUS;
  EMAC_MTL_RXQ1_OPERATION_MODE_tag MTL_RXQ1_OPERATION_MODE;
  EMAC_MTL_RXQ1_MISSED_PACKET_OVERFLOW_CNT_tag MTL_RXQ1_MISSED_PACKET_OVERFLOW_CNT;
  EMAC_MTL_RXQ1_DEBUG_tag MTL_RXQ1_DEBUG;
  EMAC_MTL_RXQ1_CONTROL_tag MTL_RXQ1_CONTROL;
  uint8_t EMAC_reserved49[640];
  EMAC_DMA_MODE_tag DMA_MODE;
  EMAC_DMA_SYSBUS_MODE_tag DMA_SYSBUS_MODE;
  EMAC_DMA_INTERRUPT_STATUS_tag DMA_INTERRUPT_STATUS;
  EMAC_DMA_DEBUG_STATUS0_tag DMA_DEBUG_STATUS0;
  uint8_t EMAC_reserved50[64];
  EMAC_DMA_TBS_CTRL_tag DMA_TBS_CTRL;
  uint8_t EMAC_reserved51[44];
  EMAC_DMA_SAFETY_INTERRUPT_STATUS_tag DMA_SAFETY_INTERRUPT_STATUS;
  uint8_t EMAC_reserved52[124];
  EMAC_DMA_CH0_CONTROL_tag DMA_CH0_CONTROL;
  EMAC_DMA_CH0_TX_CONTROL_tag DMA_CH0_TX_CONTROL;
  EMAC_DMA_CH0_RX_CONTROL_tag DMA_CH0_RX_CONTROL;
  uint8_t EMAC_reserved53[8];
  EMAC_DMA_CH0_TXDESC_LIST_ADDRESS_tag DMA_CH0_TXDESC_LIST_ADDRESS;
  uint8_t EMAC_reserved54[4];
  EMAC_DMA_CH0_RXDESC_LIST_ADDRESS_tag DMA_CH0_RXDESC_LIST_ADDRESS;
  EMAC_DMA_CH0_TXDESC_TAIL_POINTER_tag DMA_CH0_TXDESC_TAIL_POINTER;
  uint8_t EMAC_reserved55[4];
  EMAC_DMA_CH0_RXDESC_TAIL_POINTER_tag DMA_CH0_RXDESC_TAIL_POINTER;
  EMAC_DMA_CH0_TXDESC_RING_LENGTH_tag DMA_CH0_TXDESC_RING_LENGTH;
  EMAC_DMA_CH0_RXDESC_RING_LENGTH_tag DMA_CH0_RXDESC_RING_LENGTH;
  EMAC_DMA_CH0_INTERRUPT_ENABLE_tag DMA_CH0_INTERRUPT_ENABLE;
  EMAC_DMA_CH0_RX_INTERRUPT_WATCHDOG_TIMER_tag DMA_CH0_RX_INTERRUPT_WATCHDOG_TIMER;
  EMAC_DMA_CH0_SLOT_FUNCTION_CONTROL_STATUS_tag DMA_CH0_SLOT_FUNCTION_CONTROL_STATUS;
  uint8_t EMAC_reserved56[4];
  EMAC_DMA_CH0_CURRENT_APP_TXDESC_tag DMA_CH0_CURRENT_APP_TXDESC;
  uint8_t EMAC_reserved57[4];
  EMAC_DMA_CH0_CURRENT_APP_RXDESC_tag DMA_CH0_CURRENT_APP_RXDESC;
  uint8_t EMAC_reserved58[4];
  EMAC_DMA_CH0_CURRENT_APP_TXBUFFER_tag DMA_CH0_CURRENT_APP_TXBUFFER;
  uint8_t EMAC_reserved59[4];
  EMAC_DMA_CH0_CURRENT_APP_RXBUFFER_tag DMA_CH0_CURRENT_APP_RXBUFFER;
  EMAC_DMA_CH0_STATUS_tag DMA_CH0_STATUS;
  EMAC_DMA_CH0_MISS_FRAME_CNT_tag DMA_CH0_MISS_FRAME_CNT;
  EMAC_DMA_CH0_RXP_ACCEPT_CNT_tag DMA_CH0_RXP_ACCEPT_CNT;
  EMAC_DMA_CH0_RX_ERI_CNT_tag DMA_CH0_RX_ERI_CNT;
  uint8_t EMAC_reserved60[16];
  EMAC_DMA_CH1_CONTROL_tag DMA_CH1_CONTROL;
  EMAC_DMA_CH1_TX_CONTROL_tag DMA_CH1_TX_CONTROL;
  EMAC_DMA_CH1_RX_CONTROL_tag DMA_CH1_RX_CONTROL;
  uint8_t EMAC_reserved61[8];
  EMAC_DMA_CH1_TXDESC_LIST_ADDRESS_tag DMA_CH1_TXDESC_LIST_ADDRESS;
  uint8_t EMAC_reserved62[4];
  EMAC_DMA_CH1_RXDESC_LIST_ADDRESS_tag DMA_CH1_RXDESC_LIST_ADDRESS;
  EMAC_DMA_CH1_TXDESC_TAIL_POINTER_tag DMA_CH1_TXDESC_TAIL_POINTER;
  uint8_t EMAC_reserved63[4];
  EMAC_DMA_CH1_RXDESC_TAIL_POINTER_tag DMA_CH1_RXDESC_TAIL_POINTER;
  EMAC_DMA_CH1_TXDESC_RING_LENGTH_tag DMA_CH1_TXDESC_RING_LENGTH;
  EMAC_DMA_CH1_RXDESC_RING_LENGTH_tag DMA_CH1_RXDESC_RING_LENGTH;
  EMAC_DMA_CH1_INTERRUPT_ENABLE_tag DMA_CH1_INTERRUPT_ENABLE;
  EMAC_DMA_CH1_RX_INTERRUPT_WATCHDOG_TIMER_tag DMA_CH1_RX_INTERRUPT_WATCHDOG_TIMER;
  EMAC_DMA_CH1_SLOT_FUNCTION_CONTROL_STATUS_tag DMA_CH1_SLOT_FUNCTION_CONTROL_STATUS;
  uint8_t EMAC_reserved64[4];
  EMAC_DMA_CH1_CURRENT_APP_TXDESC_tag DMA_CH1_CURRENT_APP_TXDESC;
  uint8_t EMAC_reserved65[4];
  EMAC_DMA_CH1_CURRENT_APP_RXDESC_tag DMA_CH1_CURRENT_APP_RXDESC;
  uint8_t EMAC_reserved66[4];
  EMAC_DMA_CH1_CURRENT_APP_TXBUFFER_tag DMA_CH1_CURRENT_APP_TXBUFFER;
  uint8_t EMAC_reserved67[4];
  EMAC_DMA_CH1_CURRENT_APP_RXBUFFER_tag DMA_CH1_CURRENT_APP_RXBUFFER;
  EMAC_DMA_CH1_STATUS_tag DMA_CH1_STATUS;
  EMAC_DMA_CH1_MISS_FRAME_CNT_tag DMA_CH1_MISS_FRAME_CNT;
  EMAC_DMA_CH1_RXP_ACCEPT_CNT_tag DMA_CH1_RXP_ACCEPT_CNT;
  EMAC_DMA_CH1_RX_ERI_CNT_tag DMA_CH1_RX_ERI_CNT;
};


/* ============================================================================
   =============================== Module: ERM ================================
   ============================================================================ */

typedef union ERM_CR0_union_tag {      /* ERM Configuration Register 0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;             /* Reserved */
    vuint32_t ENCIE7:1;                /* ENCIE7 */
    vuint32_t ESCIE7:1;                /* ESCIE7 */
    vuint32_t _unused_4:2;             /* Reserved */
    vuint32_t ENCIE6:1;                /* ENCIE6 */
    vuint32_t ESCIE6:1;                /* ESCIE6 */
    vuint32_t _unused_8:2;             /* Reserved */
    vuint32_t ENCIE5:1;                /* ENCIE5 */
    vuint32_t ESCIE5:1;                /* ESCIE5 */
    vuint32_t _unused_12:2;            /* Reserved */
    vuint32_t ENCIE4:1;                /* ENCIE4 */
    vuint32_t ESCIE4:1;                /* ESCIE4 */
    vuint32_t _unused_16:2;            /* Reserved */
    vuint32_t ENCIE3:1;                /* ENCIE3 */
    vuint32_t ESCIE3:1;                /* ESCIE3 */
    vuint32_t _unused_20:2;            /* Reserved */
    vuint32_t ENCIE2:1;                /* ENCIE2 */
    vuint32_t ESCIE2:1;                /* ESCIE2 */
    vuint32_t _unused_24:2;            /* Reserved */
    vuint32_t ENCIE1:1;                /* ENCIE1 */
    vuint32_t ESCIE1:1;                /* ESCIE1 */
    vuint32_t _unused_28:2;            /* Reserved */
    vuint32_t ENCIE0:1;                /* ENCIE0 */
    vuint32_t ESCIE0:1;                /* ESCIE0 */
  } B;
} ERM_CR0_tag;

typedef union ERM_CR1_union_tag {      /* ERM Configuration Register 1 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;             /* Reserved */
    vuint32_t ENCIE15:1;               /* ENCIE15 */
    vuint32_t ESCIE15:1;               /* ESCIE15 */
    vuint32_t _unused_4:2;             /* Reserved */
    vuint32_t ENCIE14:1;               /* ENCIE14 */
    vuint32_t ESCIE14:1;               /* ESCIE14 */
    vuint32_t _unused_8:2;             /* Reserved */
    vuint32_t ENCIE13:1;               /* ENCIE13 */
    vuint32_t ESCIE13:1;               /* ESCIE13 */
    vuint32_t _unused_12:2;            /* Reserved */
    vuint32_t ENCIE12:1;               /* ENCIE12 */
    vuint32_t ESCIE12:1;               /* ESCIE12 */
    vuint32_t _unused_16:2;            /* Reserved */
    vuint32_t ENCIE11:1;               /* ENCIE11 */
    vuint32_t ESCIE11:1;               /* ESCIE11 */
    vuint32_t _unused_20:2;            /* Reserved */
    vuint32_t ENCIE10:1;               /* ENCIE10 */
    vuint32_t ESCIE10:1;               /* ESCIE10 */
    vuint32_t _unused_24:2;            /* Reserved */
    vuint32_t ENCIE9:1;                /* ENCIE9 */
    vuint32_t ESCIE9:1;                /* ESCIE9 */
    vuint32_t _unused_28:2;            /* Reserved */
    vuint32_t ENCIE8:1;                /* ENCIE8 */
    vuint32_t ESCIE8:1;                /* ESCIE8 */
  } B;
} ERM_CR1_tag;

typedef union ERM_CR2_union_tag {      /* ERM Configuration Register 2 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;             /* Reserved */
    vuint32_t _unused_2:2;             /* Reserved */
    vuint32_t _unused_4:2;             /* Reserved */
    vuint32_t _unused_6:2;             /* Reserved */
    vuint32_t _unused_8:2;             /* Reserved */
    vuint32_t _unused_10:2;            /* Reserved */
    vuint32_t _unused_12:2;            /* Reserved */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t _unused_16:2;            /* Reserved */
    vuint32_t ENCIE19:1;               /* ENCIE19 */
    vuint32_t ESCIE19:1;               /* ESCIE19 */
    vuint32_t _unused_20:2;            /* Reserved */
    vuint32_t ENCIE18:1;               /* ENCIE18 */
    vuint32_t ESCIE18:1;               /* ESCIE18 */
    vuint32_t _unused_24:2;            /* Reserved */
    vuint32_t ENCIE17:1;               /* ENCIE17 */
    vuint32_t ESCIE17:1;               /* ESCIE17 */
    vuint32_t _unused_28:2;            /* Reserved */
    vuint32_t ENCIE16:1;               /* ENCIE16 */
    vuint32_t ESCIE16:1;               /* ESCIE16 */
  } B;
} ERM_CR2_tag;

typedef union ERM_SR0_union_tag {      /* ERM Status Register 0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;             /* Reserved */
    vuint32_t NCE7:1;                  /* NCE7 */
    vuint32_t SBC7:1;                  /* SBC7 */
    vuint32_t _unused_4:2;             /* Reserved */
    vuint32_t NCE6:1;                  /* NCE6 */
    vuint32_t SBC6:1;                  /* SBC6 */
    vuint32_t _unused_8:2;             /* Reserved */
    vuint32_t NCE5:1;                  /* NCE5 */
    vuint32_t SBC5:1;                  /* SBC5 */
    vuint32_t _unused_12:2;            /* Reserved */
    vuint32_t NCE4:1;                  /* NCE4 */
    vuint32_t SBC4:1;                  /* SBC4 */
    vuint32_t _unused_16:2;            /* Reserved */
    vuint32_t NCE3:1;                  /* NCE3 */
    vuint32_t SBC3:1;                  /* SBC3 */
    vuint32_t _unused_20:2;            /* Reserved */
    vuint32_t NCE2:1;                  /* NCE2 */
    vuint32_t SBC2:1;                  /* SBC2 */
    vuint32_t _unused_24:2;            /* Reserved */
    vuint32_t NCE1:1;                  /* NCE1 */
    vuint32_t SBC1:1;                  /* SBC1 */
    vuint32_t _unused_28:2;            /* Reserved */
    vuint32_t NCE0:1;                  /* NCE0 */
    vuint32_t SBC0:1;                  /* SBC0 */
  } B;
} ERM_SR0_tag;

typedef union ERM_SR1_union_tag {      /* ERM Status Register 1 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;             /* Reserved */
    vuint32_t NCE15:1;                 /* NCE15 */
    vuint32_t SBC15:1;                 /* SBC15 */
    vuint32_t _unused_4:2;             /* Reserved */
    vuint32_t NCE14:1;                 /* NCE14 */
    vuint32_t SBC14:1;                 /* SBC14 */
    vuint32_t _unused_8:2;             /* Reserved */
    vuint32_t NCE13:1;                 /* NCE13 */
    vuint32_t SBC13:1;                 /* SBC13 */
    vuint32_t _unused_12:2;            /* Reserved */
    vuint32_t NCE12:1;                 /* NCE12 */
    vuint32_t SBC12:1;                 /* SBC12 */
    vuint32_t _unused_16:2;            /* Reserved */
    vuint32_t NCE11:1;                 /* NCE11 */
    vuint32_t SBC11:1;                 /* SBC11 */
    vuint32_t _unused_20:2;            /* Reserved */
    vuint32_t NCE10:1;                 /* NCE10 */
    vuint32_t SBC10:1;                 /* SBC10 */
    vuint32_t _unused_24:2;            /* Reserved */
    vuint32_t NCE9:1;                  /* NCE9 */
    vuint32_t SBC9:1;                  /* SBC9 */
    vuint32_t _unused_28:2;            /* Reserved */
    vuint32_t NCE8:1;                  /* NCE8 */
    vuint32_t SBC8:1;                  /* SBC8 */
  } B;
} ERM_SR1_tag;

typedef union ERM_SR2_union_tag {      /* ERM Status Register 2 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:4;             /* Reserved */
    vuint32_t _unused_4:4;             /* Reserved */
    vuint32_t _unused_8:4;             /* Reserved */
    vuint32_t _unused_12:4;            /* Reserved */
    vuint32_t _unused_16:2;            /* Reserved */
    vuint32_t NCE19:1;                 /* NCE19 */
    vuint32_t SBC19:1;                 /* SBC19 */
    vuint32_t _unused_20:2;            /* Reserved */
    vuint32_t NCE18:1;                 /* NCE18 */
    vuint32_t SBC18:1;                 /* SBC18 */
    vuint32_t _unused_24:2;            /* Reserved */
    vuint32_t NCE17:1;                 /* NCE17 */
    vuint32_t SBC17:1;                 /* SBC17 */
    vuint32_t _unused_28:2;            /* Reserved */
    vuint32_t NCE16:1;                 /* NCE16 */
    vuint32_t SBC16:1;                 /* SBC16 */
  } B;
} ERM_SR2_tag;

typedef union ERM_EAR0_union_tag {     /* ERM Memory 0 Error Address Register */
  vuint32_t R;
  struct {
    vuint32_t EAR:32;                  /* EAR */
  } B;
} ERM_EAR0_tag;

typedef union ERM_SYN0_union_tag {     /* ERM Memory 0 Syndrome Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t SYNDROME:8;              /* SYNDROME */
  } B;
} ERM_SYN0_tag;

typedef union ERM_CORR_ERR_CNT0_union_tag { /* ERM Memory 0 Correctable Error Count Register */
  vuint32_t R;
  struct {
    vuint32_t COUNT:8;                 /* Memory n Correctable Error Count */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ERM_CORR_ERR_CNT0_tag;

typedef union ERM_EAR1_union_tag {     /* ERM Memory 1 Error Address Register */
  vuint32_t R;
  struct {
    vuint32_t EAR:32;                  /* EAR */
  } B;
} ERM_EAR1_tag;

typedef union ERM_SYN1_union_tag {     /* ERM Memory 1 Syndrome Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t SYNDROME:8;              /* SYNDROME */
  } B;
} ERM_SYN1_tag;

typedef union ERM_CORR_ERR_CNT1_union_tag { /* ERM Memory 1 Correctable Error Count Register */
  vuint32_t R;
  struct {
    vuint32_t COUNT:8;                 /* Memory n Correctable Error Count */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ERM_CORR_ERR_CNT1_tag;

typedef union ERM_CORR_ERR_CNT2_union_tag { /* ERM Memory 2 Correctable Error Count Register */
  vuint32_t R;
  struct {
    vuint32_t COUNT:8;                 /* Memory n Correctable Error Count */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ERM_CORR_ERR_CNT2_tag;

typedef union ERM_CORR_ERR_CNT3_union_tag { /* ERM Memory 3 Correctable Error Count Register */
  vuint32_t R;
  struct {
    vuint32_t COUNT:8;                 /* Memory n Correctable Error Count */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ERM_CORR_ERR_CNT3_tag;

typedef union ERM_CORR_ERR_CNT4_union_tag { /* ERM Memory 4 Correctable Error Count Register */
  vuint32_t R;
  struct {
    vuint32_t COUNT:8;                 /* Memory n Correctable Error Count */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ERM_CORR_ERR_CNT4_tag;

typedef union ERM_CORR_ERR_CNT5_union_tag { /* ERM Memory 5 Correctable Error Count Register */
  vuint32_t R;
  struct {
    vuint32_t COUNT:8;                 /* Memory n Correctable Error Count */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ERM_CORR_ERR_CNT5_tag;

typedef union ERM_CORR_ERR_CNT6_union_tag { /* ERM Memory 6 Correctable Error Count Register */
  vuint32_t R;
  struct {
    vuint32_t COUNT:8;                 /* Memory n Correctable Error Count */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ERM_CORR_ERR_CNT6_tag;

typedef union ERM_CORR_ERR_CNT7_union_tag { /* ERM Memory 7 Correctable Error Count Register */
  vuint32_t R;
  struct {
    vuint32_t COUNT:8;                 /* Memory n Correctable Error Count */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ERM_CORR_ERR_CNT7_tag;

typedef union ERM_CORR_ERR_CNT8_union_tag { /* ERM Memory 8 Correctable Error Count Register */
  vuint32_t R;
  struct {
    vuint32_t COUNT:8;                 /* Memory n Correctable Error Count */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ERM_CORR_ERR_CNT8_tag;

typedef union ERM_CORR_ERR_CNT9_union_tag { /* ERM Memory 9 Correctable Error Count Register */
  vuint32_t R;
  struct {
    vuint32_t COUNT:8;                 /* Memory n Correctable Error Count */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ERM_CORR_ERR_CNT9_tag;

typedef union ERM_EAR10_union_tag {    /* ERM Memory 10 Error Address Register */
  vuint32_t R;
  struct {
    vuint32_t EAR:32;                  /* EAR */
  } B;
} ERM_EAR10_tag;

typedef union ERM_SYN10_union_tag {    /* ERM Memory 10 Syndrome Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t SYNDROME:8;              /* SYNDROME */
  } B;
} ERM_SYN10_tag;

typedef union ERM_CORR_ERR_CNT10_union_tag { /* ERM Memory 10 Correctable Error Count Register */
  vuint32_t R;
  struct {
    vuint32_t COUNT:8;                 /* Memory n Correctable Error Count */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ERM_CORR_ERR_CNT10_tag;

typedef union ERM_EAR11_union_tag {    /* ERM Memory 11 Error Address Register */
  vuint32_t R;
  struct {
    vuint32_t EAR:32;                  /* EAR */
  } B;
} ERM_EAR11_tag;

typedef union ERM_SYN11_union_tag {    /* ERM Memory 11 Syndrome Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t SYNDROME:8;              /* SYNDROME */
  } B;
} ERM_SYN11_tag;

typedef union ERM_CORR_ERR_CNT11_union_tag { /* ERM Memory 11 Correctable Error Count Register */
  vuint32_t R;
  struct {
    vuint32_t COUNT:8;                 /* Memory n Correctable Error Count */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ERM_CORR_ERR_CNT11_tag;

typedef union ERM_EAR12_union_tag {    /* ERM Memory 12 Error Address Register */
  vuint32_t R;
  struct {
    vuint32_t EAR:32;                  /* EAR */
  } B;
} ERM_EAR12_tag;

typedef union ERM_SYN12_union_tag {    /* ERM Memory 12 Syndrome Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t SYNDROME:8;              /* SYNDROME */
  } B;
} ERM_SYN12_tag;

typedef union ERM_CORR_ERR_CNT12_union_tag { /* ERM Memory 12 Correctable Error Count Register */
  vuint32_t R;
  struct {
    vuint32_t COUNT:8;                 /* Memory n Correctable Error Count */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ERM_CORR_ERR_CNT12_tag;

typedef union ERM_EAR13_union_tag {    /* ERM Memory 13 Error Address Register */
  vuint32_t R;
  struct {
    vuint32_t EAR:32;                  /* EAR */
  } B;
} ERM_EAR13_tag;

typedef union ERM_SYN13_union_tag {    /* ERM Memory 13 Syndrome Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t SYNDROME:8;              /* SYNDROME */
  } B;
} ERM_SYN13_tag;

typedef union ERM_CORR_ERR_CNT13_union_tag { /* ERM Memory 13 Correctable Error Count Register */
  vuint32_t R;
  struct {
    vuint32_t COUNT:8;                 /* Memory n Correctable Error Count */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ERM_CORR_ERR_CNT13_tag;

typedef union ERM_EAR14_union_tag {    /* ERM Memory 14 Error Address Register */
  vuint32_t R;
  struct {
    vuint32_t EAR:32;                  /* EAR */
  } B;
} ERM_EAR14_tag;

typedef union ERM_SYN14_union_tag {    /* ERM Memory 14 Syndrome Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t SYNDROME:8;              /* SYNDROME */
  } B;
} ERM_SYN14_tag;

typedef union ERM_CORR_ERR_CNT14_union_tag { /* ERM Memory 14 Correctable Error Count Register */
  vuint32_t R;
  struct {
    vuint32_t COUNT:8;                 /* Memory n Correctable Error Count */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ERM_CORR_ERR_CNT14_tag;

typedef union ERM_EAR15_union_tag {    /* ERM Memory 15 Error Address Register */
  vuint32_t R;
  struct {
    vuint32_t EAR:32;                  /* EAR */
  } B;
} ERM_EAR15_tag;

typedef union ERM_SYN15_union_tag {    /* ERM Memory 15 Syndrome Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t SYNDROME:8;              /* SYNDROME */
  } B;
} ERM_SYN15_tag;

typedef union ERM_CORR_ERR_CNT15_union_tag { /* ERM Memory 15 Correctable Error Count Register */
  vuint32_t R;
  struct {
    vuint32_t COUNT:8;                 /* Memory n Correctable Error Count */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ERM_CORR_ERR_CNT15_tag;

typedef union ERM_EAR16_union_tag {    /* ERM Memory 16 Error Address Register */
  vuint32_t R;
  struct {
    vuint32_t EAR:32;                  /* EAR */
  } B;
} ERM_EAR16_tag;

typedef union ERM_SYN16_union_tag {    /* ERM Memory 16 Syndrome Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;            /* Reserved */
    vuint32_t SYNDROME:8;              /* SYNDROME */
  } B;
} ERM_SYN16_tag;

typedef union ERM_CORR_ERR_CNT16_union_tag { /* ERM Memory 16 Correctable Error Count Register */
  vuint32_t R;
  struct {
    vuint32_t COUNT:8;                 /* Memory n Correctable Error Count */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ERM_CORR_ERR_CNT16_tag;

typedef union ERM_EAR17_union_tag {    /* ERM Memory 17 Error Address Register */
  vuint32_t R;
  struct {
    vuint32_t EAR:32;                  /* EAR */
  } B;
} ERM_EAR17_tag;

typedef union ERM_CORR_ERR_CNT17_union_tag { /* ERM Memory 17 Correctable Error Count Register */
  vuint32_t R;
  struct {
    vuint32_t COUNT:8;                 /* Memory n Correctable Error Count */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ERM_CORR_ERR_CNT17_tag;

typedef union ERM_EAR18_union_tag {    /* ERM Memory 18 Error Address Register */
  vuint32_t R;
  struct {
    vuint32_t EAR:32;                  /* EAR */
  } B;
} ERM_EAR18_tag;

typedef union ERM_CORR_ERR_CNT18_union_tag { /* ERM Memory 18 Correctable Error Count Register */
  vuint32_t R;
  struct {
    vuint32_t COUNT:8;                 /* Memory n Correctable Error Count */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ERM_CORR_ERR_CNT18_tag;

typedef union ERM_EAR19_union_tag {    /* ERM Memory 19 Error Address Register */
  vuint32_t R;
  struct {
    vuint32_t EAR:32;                  /* EAR */
  } B;
} ERM_EAR19_tag;

typedef union ERM_CORR_ERR_CNT19_union_tag { /* ERM Memory 19 Correctable Error Count Register */
  vuint32_t R;
  struct {
    vuint32_t COUNT:8;                 /* Memory n Correctable Error Count */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} ERM_CORR_ERR_CNT19_tag;

struct ERM_tag {
  ERM_CR0_tag CR0;                     /* ERM Configuration Register 0 */
  ERM_CR1_tag CR1;                     /* ERM Configuration Register 1 */
  ERM_CR2_tag CR2;                     /* ERM Configuration Register 2 */
  uint8_t ERM_reserved0[4];
  ERM_SR0_tag SR0;                     /* ERM Status Register 0 */
  ERM_SR1_tag SR1;                     /* ERM Status Register 1 */
  ERM_SR2_tag SR2;                     /* ERM Status Register 2 */
  uint8_t ERM_reserved1[228];
  ERM_EAR0_tag EAR0;                   /* ERM Memory 0 Error Address Register */
  ERM_SYN0_tag SYN0;                   /* ERM Memory 0 Syndrome Register */
  ERM_CORR_ERR_CNT0_tag CORR_ERR_CNT0; /* ERM Memory 0 Correctable Error Count Register */
  uint8_t ERM_reserved2[4];
  ERM_EAR1_tag EAR1;                   /* ERM Memory 1 Error Address Register */
  ERM_SYN1_tag SYN1;                   /* ERM Memory 1 Syndrome Register */
  ERM_CORR_ERR_CNT1_tag CORR_ERR_CNT1; /* ERM Memory 1 Correctable Error Count Register */
  uint8_t ERM_reserved3[12];
  ERM_CORR_ERR_CNT2_tag CORR_ERR_CNT2; /* ERM Memory 2 Correctable Error Count Register */
  uint8_t ERM_reserved4[12];
  ERM_CORR_ERR_CNT3_tag CORR_ERR_CNT3; /* ERM Memory 3 Correctable Error Count Register */
  uint8_t ERM_reserved5[12];
  ERM_CORR_ERR_CNT4_tag CORR_ERR_CNT4; /* ERM Memory 4 Correctable Error Count Register */
  uint8_t ERM_reserved6[12];
  ERM_CORR_ERR_CNT5_tag CORR_ERR_CNT5; /* ERM Memory 5 Correctable Error Count Register */
  uint8_t ERM_reserved7[12];
  ERM_CORR_ERR_CNT6_tag CORR_ERR_CNT6; /* ERM Memory 6 Correctable Error Count Register */
  uint8_t ERM_reserved8[12];
  ERM_CORR_ERR_CNT7_tag CORR_ERR_CNT7; /* ERM Memory 7 Correctable Error Count Register */
  uint8_t ERM_reserved9[12];
  ERM_CORR_ERR_CNT8_tag CORR_ERR_CNT8; /* ERM Memory 8 Correctable Error Count Register */
  uint8_t ERM_reserved10[12];
  ERM_CORR_ERR_CNT9_tag CORR_ERR_CNT9; /* ERM Memory 9 Correctable Error Count Register */
  uint8_t ERM_reserved11[4];
  ERM_EAR10_tag EAR10;                 /* ERM Memory 10 Error Address Register */
  ERM_SYN10_tag SYN10;                 /* ERM Memory 10 Syndrome Register */
  ERM_CORR_ERR_CNT10_tag CORR_ERR_CNT10; /* ERM Memory 10 Correctable Error Count Register */
  uint8_t ERM_reserved12[4];
  ERM_EAR11_tag EAR11;                 /* ERM Memory 11 Error Address Register */
  ERM_SYN11_tag SYN11;                 /* ERM Memory 11 Syndrome Register */
  ERM_CORR_ERR_CNT11_tag CORR_ERR_CNT11; /* ERM Memory 11 Correctable Error Count Register */
  uint8_t ERM_reserved13[4];
  ERM_EAR12_tag EAR12;                 /* ERM Memory 12 Error Address Register */
  ERM_SYN12_tag SYN12;                 /* ERM Memory 12 Syndrome Register */
  ERM_CORR_ERR_CNT12_tag CORR_ERR_CNT12; /* ERM Memory 12 Correctable Error Count Register */
  uint8_t ERM_reserved14[4];
  ERM_EAR13_tag EAR13;                 /* ERM Memory 13 Error Address Register */
  ERM_SYN13_tag SYN13;                 /* ERM Memory 13 Syndrome Register */
  ERM_CORR_ERR_CNT13_tag CORR_ERR_CNT13; /* ERM Memory 13 Correctable Error Count Register */
  uint8_t ERM_reserved15[4];
  ERM_EAR14_tag EAR14;                 /* ERM Memory 14 Error Address Register */
  ERM_SYN14_tag SYN14;                 /* ERM Memory 14 Syndrome Register */
  ERM_CORR_ERR_CNT14_tag CORR_ERR_CNT14; /* ERM Memory 14 Correctable Error Count Register */
  uint8_t ERM_reserved16[4];
  ERM_EAR15_tag EAR15;                 /* ERM Memory 15 Error Address Register */
  ERM_SYN15_tag SYN15;                 /* ERM Memory 15 Syndrome Register */
  ERM_CORR_ERR_CNT15_tag CORR_ERR_CNT15; /* ERM Memory 15 Correctable Error Count Register */
  uint8_t ERM_reserved17[4];
  ERM_EAR16_tag EAR16;                 /* ERM Memory 16 Error Address Register */
  ERM_SYN16_tag SYN16;                 /* ERM Memory 16 Syndrome Register */
  ERM_CORR_ERR_CNT16_tag CORR_ERR_CNT16; /* ERM Memory 16 Correctable Error Count Register */
  uint8_t ERM_reserved18[4];
  ERM_EAR17_tag EAR17;                 /* ERM Memory 17 Error Address Register */
  uint8_t ERM_reserved19[4];
  ERM_CORR_ERR_CNT17_tag CORR_ERR_CNT17; /* ERM Memory 17 Correctable Error Count Register */
  uint8_t ERM_reserved20[4];
  ERM_EAR18_tag EAR18;                 /* ERM Memory 18 Error Address Register */
  uint8_t ERM_reserved21[4];
  ERM_CORR_ERR_CNT18_tag CORR_ERR_CNT18; /* ERM Memory 18 Correctable Error Count Register */
  uint8_t ERM_reserved22[4];
  ERM_EAR19_tag EAR19;                 /* ERM Memory 19 Error Address Register */
  uint8_t ERM_reserved23[4];
  ERM_CORR_ERR_CNT19_tag CORR_ERR_CNT19; /* ERM Memory 19 Correctable Error Count Register */
};


/* ============================================================================
   =============================== Module: FCCU ===============================
   ============================================================================ */

typedef union FCCU_CTRL_union_tag {    /* Control */
  vuint32_t R;
  struct {
    vuint32_t OPR:5;                   /* Operation Run */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t OPS:2;                   /* Operation Status */
    vuint32_t _unused_8:1;             /* Reserved */
    vuint32_t DEBUG:1;                 /* Debug Mode Enable */
    vuint32_t _unused_10:19;           /* Reserved */
    vuint32_t _unused_29:2;            /* Reserved */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} FCCU_CTRL_tag;

typedef union FCCU_CTRLK_union_tag {   /* Control Key */
  vuint32_t R;
  struct {
    vuint32_t CTRLK:32;                /* Locked-Operation Control Key */
  } B;
} FCCU_CTRLK_tag;

typedef union FCCU_CFG_union_tag {     /* Configuration */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:6;             /* Reserved */
    vuint32_t FOM:3;                   /* Fault-Output (EOUT) Mode */
    vuint32_t PS:1;                    /* Fault-Output (EOUT) Polarity Selection */
    vuint32_t SM:1;                    /* Fault-Output (EOUT) Switching Mode */
    vuint32_t CM:1;                    /* Fault-Output (EOUT) Configuration-Indication Mode */
    vuint32_t _unused_12:1;            /* Reserved */
    vuint32_t _unused_13:2;            /* Reserved */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t _unused_16:4;            /* Reserved */
    vuint32_t _unused_20:2;            /* Reserved */
    vuint32_t FCCU_SET_CLEAR:2;        /* Fault-Output (EOUT) Control */
    vuint32_t FCCU_SET_AFTER_RESET:1;  /* Fault-Output (EOUT) Activate */
    vuint32_t _unused_25:7;            /* Reserved */
  } B;
} FCCU_CFG_tag;

typedef union FCCU_NCF_CFG_union_tag { /* Non-critical Fault Configuration */
  vuint32_t R;
  struct {
    vuint32_t NCFC0:1;                 /* Non-critical Fault Configuration n */
    vuint32_t NCFC1:1;                 /* Non-critical Fault Configuration n */
    vuint32_t NCFC2:1;                 /* Non-critical Fault Configuration n */
    vuint32_t NCFC3:1;                 /* Non-critical Fault Configuration n */
    vuint32_t NCFC4:1;                 /* Non-critical Fault Configuration n */
    vuint32_t NCFC5:1;                 /* Non-critical Fault Configuration n */
    vuint32_t NCFC6:1;                 /* Non-critical Fault Configuration n */
    vuint32_t NCFC7:1;                 /* Non-critical Fault Configuration n */
    vuint32_t _unused_8:24;
  } B;
} FCCU_NCF_CFG_tag;

typedef union FCCU_NCFS_CFG_union_tag { /* Non-critical Fault-State Configuration */
  vuint32_t R;
  struct {
    vuint32_t NCFSC0:2;                /* Non-critical Fault-State Configuration n */
    vuint32_t NCFSC1:2;                /* Non-critical Fault-State Configuration n */
    vuint32_t NCFSC2:2;                /* Non-critical Fault-State Configuration n */
    vuint32_t NCFSC3:2;                /* Non-critical Fault-State Configuration n */
    vuint32_t NCFSC4:2;                /* Non-critical Fault-State Configuration n */
    vuint32_t NCFSC5:2;                /* Non-critical Fault-State Configuration n */
    vuint32_t NCFSC6:2;                /* Non-critical Fault-State Configuration n */
    vuint32_t NCFSC7:2;                /* Non-critical Fault-State Configuration n */
    vuint32_t _unused_16:16;
  } B;
} FCCU_NCFS_CFG_tag;

typedef union FCCU_NCF_S_union_tag {   /* Non-critical Fault Status */
  vuint32_t R;
  struct {
    vuint32_t NCFS0:1;                 /* Non-critical Fault Status n */
    vuint32_t NCFS1:1;                 /* Non-critical Fault Status n */
    vuint32_t NCFS2:1;                 /* Non-critical Fault Status n */
    vuint32_t NCFS3:1;                 /* Non-critical Fault Status n */
    vuint32_t NCFS4:1;                 /* Non-critical Fault Status n */
    vuint32_t NCFS5:1;                 /* Non-critical Fault Status n */
    vuint32_t NCFS6:1;                 /* Non-critical Fault Status n */
    vuint32_t NCFS7:1;                 /* Non-critical Fault Status n */
    vuint32_t _unused_8:24;
  } B;
} FCCU_NCF_S_tag;

typedef union FCCU_NCFK_union_tag {    /* Non-critical Fault Key */
  vuint32_t R;
  struct {
    vuint32_t NCFK:32;                 /* Non-critical Fault Key */
  } B;
} FCCU_NCFK_tag;

typedef union FCCU_NCF_E_union_tag {   /* Non-critical Fault Enable */
  vuint32_t R;
  struct {
    vuint32_t NCFE0:1;                 /* Non-critical Fault Enable n */
    vuint32_t NCFE1:1;                 /* Non-critical Fault Enable n */
    vuint32_t NCFE2:1;                 /* Non-critical Fault Enable n */
    vuint32_t NCFE3:1;                 /* Non-critical Fault Enable n */
    vuint32_t NCFE4:1;                 /* Non-critical Fault Enable n */
    vuint32_t NCFE5:1;                 /* Non-critical Fault Enable n */
    vuint32_t NCFE6:1;                 /* Non-critical Fault Enable n */
    vuint32_t NCFE7:1;                 /* Non-critical Fault Enable n */
    vuint32_t _unused_8:24;
  } B;
} FCCU_NCF_E_tag;

typedef union FCCU_NCF_TOE_union_tag { /* Non-critical-Fault Alarm-State Timeout Enable */
  vuint32_t R;
  struct {
    vuint32_t NCFTOE0:1;               /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE1:1;               /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE2:1;               /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE3:1;               /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE4:1;               /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE5:1;               /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE6:1;               /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t NCFTOE7:1;               /* Non-critical-Fault Alarm-State Timeout Enable n */
    vuint32_t _unused_8:24;
  } B;
} FCCU_NCF_TOE_tag;

typedef union FCCU_NCF_TO_union_tag {  /* Non-critical-Fault Alarm-State Timeout Interval */
  vuint32_t R;
  struct {
    vuint32_t TO:32;                   /* Non-critical-Fault Alarm-State Timeout Interval */
  } B;
} FCCU_NCF_TO_tag;

typedef union FCCU_CFG_TO_union_tag {  /* Configuration-State Timeout Interval */
  vuint32_t R;
  struct {
    vuint32_t TO:3;                    /* Configuration-State Timeout Interval */
    vuint32_t _unused_3:29;            /* Reserved */
  } B;
} FCCU_CFG_TO_tag;

typedef union FCCU_EINOUT_union_tag {  /* IO Control */
  vuint32_t R;
  struct {
    vuint32_t EOUT0:1;                 /* EOUT0 */
    vuint32_t EOUT1:1;                 /* EOUT1 */
    vuint32_t _unused_2:2;             /* Reserved */
    vuint32_t EIN0:1;                  /* Error Input 0 */
    vuint32_t EIN1:1;                  /* Error Input 1 */
    vuint32_t _unused_6:26;            /* Reserved */
  } B;
} FCCU_EINOUT_tag;

typedef union FCCU_STAT_union_tag {    /* Status */
  vuint32_t R;
  struct {
    vuint32_t STATUS:3;                /* FCCU State */
    vuint32_t ESTAT:1;                 /* FCCU Faulty Condition */
    vuint32_t PHYSICERRORPIN:2;        /* EOUT Signal States */
    vuint32_t _unused_6:26;            /* Reserved */
  } B;
} FCCU_STAT_tag;

typedef union FCCU_N2AF_STATUS_union_tag { /* Normal-to-Alarm Freeze Status */
  vuint32_t R;
  struct {
    vuint32_t NAFS:8;                  /* Normal-to-Alarm Freeze Status */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} FCCU_N2AF_STATUS_tag;

typedef union FCCU_A2FF_STATUS_union_tag { /* Alarm-to-Fault Freeze Status */
  vuint32_t R;
  struct {
    vuint32_t AFFS:8;                  /* Alarm-to-Fault Freeze Status */
    vuint32_t AF_SRC:2;                /* Alarm-to-Fault Source */
    vuint32_t _unused_10:22;
  } B;
} FCCU_A2FF_STATUS_tag;

typedef union FCCU_N2FF_STATUS_union_tag { /* Normal-to-Fault Freeze Status */
  vuint32_t R;
  struct {
    vuint32_t NFFS:8;                  /* Normal-to-Fault Freeze Status */
    vuint32_t NF_SRC:2;                /* Normal-to-Fault Source */
    vuint32_t _unused_10:22;           /* Reserved */
  } B;
} FCCU_N2FF_STATUS_tag;

typedef union FCCU_F2AF_STATUS_union_tag { /* Fault-to-Alarm Freeze Status */
  vuint32_t R;
  struct {
    vuint32_t FAFS:9;                  /* Fault-to-Alarm Freeze Status */
    vuint32_t _unused_9:23;            /* Reserved */
  } B;
} FCCU_F2AF_STATUS_tag;

typedef union FCCU_NCFF_union_tag {    /* Non-critical Fault Fake */
  vuint32_t R;
  struct {
    vuint32_t FNCFC:7;                 /* FNCFC */
    vuint32_t _unused_7:25;            /* Reserved */
  } B;
} FCCU_NCFF_tag;

typedef union FCCU_IRQ_STAT_union_tag { /* IRQ Status */
  vuint32_t R;
  struct {
    vuint32_t CFG_TO_STAT:1;           /* Configuration-State Timeout Status */
    vuint32_t ALRM_STAT:1;             /* Alarm Interrupt Status */
    vuint32_t NMI_STAT:1;              /* NMI Interrupt Status */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t _unused_5:27;            /* Reserved */
  } B;
} FCCU_IRQ_STAT_tag;

typedef union FCCU_IRQ_EN_union_tag {  /* IRQ Enable */
  vuint32_t R;
  struct {
    vuint32_t CFG_TO_IEN:1;            /* Configuration-State Timeout Interrupt Enable */
    vuint32_t _unused_1:2;             /* Reserved */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t _unused_4:28;            /* Reserved */
  } B;
} FCCU_IRQ_EN_tag;

typedef union FCCU_TRANS_LOCK_union_tag { /* Transient Configuration Lock */
  vuint32_t R;
  struct {
    vuint32_t TRANSKEY:9;              /* Transient Configuration Lock */
    vuint32_t _unused_9:23;            /* Reserved */
  } B;
} FCCU_TRANS_LOCK_tag;

typedef union FCCU_PERMNT_LOCK_union_tag { /* Permanent Configuration Lock */
  vuint32_t R;
  struct {
    vuint32_t PERMNTKEY:9;             /* Permanent Configuration Lock */
    vuint32_t _unused_9:23;            /* Reserved */
  } B;
} FCCU_PERMNT_LOCK_tag;

typedef union FCCU_DELTA_T_union_tag { /* Delta T */
  vuint32_t R;
  struct {
    vuint32_t DELTA_T:14;              /* Minimum Fault-Output (EOUT) Timer Interval */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t _unused_16:14;           /* Reserved */
    vuint32_t _unused_30:2;            /* Reserved */
  } B;
} FCCU_DELTA_T_tag;

typedef union FCCU_IRQ_ALARM_EN_union_tag { /* Non-critical Alarm-State Interrupt-Request Enable */
  vuint32_t R;
  struct {
    vuint32_t IRQEN0:1;                /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN1:1;                /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN2:1;                /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN3:1;                /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN4:1;                /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN5:1;                /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN6:1;                /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t IRQEN7:1;                /* Non-critical Alarm-State Interrupt-Request Enable n */
    vuint32_t _unused_8:24;
  } B;
} FCCU_IRQ_ALARM_EN_tag;

typedef union FCCU_NMI_EN_union_tag {  /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable */
  vuint32_t R;
  struct {
    vuint32_t NMIEN0:1;                /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN1:1;                /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN2:1;                /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN3:1;                /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN4:1;                /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN5:1;                /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN6:1;                /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t NMIEN7:1;                /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable n */
    vuint32_t _unused_8:24;
  } B;
} FCCU_NMI_EN_tag;

typedef union FCCU_EOUT_SIG_EN_union_tag { /* Non-critical Fault-State EOUT Signaling Enable */
  vuint32_t R;
  struct {
    vuint32_t EOUTEN0:1;               /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN1:1;               /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN2:1;               /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN3:1;               /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN4:1;               /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN5:1;               /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN6:1;               /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t EOUTEN7:1;               /* Non-critical Fault-State EOUT Signaling Enable n */
    vuint32_t _unused_8:24;
  } B;
} FCCU_EOUT_SIG_EN_tag;

typedef union FCCU_TMR_ALARM_union_tag { /* Alarm-State Timer */
  vuint32_t R;
  struct {
    vuint32_t COUNT:32;                /* Alarm-State Timer Count */
  } B;
} FCCU_TMR_ALARM_tag;

typedef union FCCU_TMR_CFG_union_tag { /* Configuration-State Timer */
  vuint32_t R;
  struct {
    vuint32_t COUNT:32;                /* Configuration-State Timer Count */
  } B;
} FCCU_TMR_CFG_tag;

typedef union FCCU_TMR_ETMR_union_tag { /* Fault-Output Timer */
  vuint32_t R;
  struct {
    vuint32_t COUNT:32;                /* Fault-Output Timer Count */
  } B;
} FCCU_TMR_ETMR_tag;

struct FCCU_tag {
  FCCU_CTRL_tag CTRL;                  /* Control */
  FCCU_CTRLK_tag CTRLK;                /* Control Key */
  FCCU_CFG_tag CFG;                    /* Configuration */
  uint8_t FCCU_reserved0[16];
  FCCU_NCF_CFG_tag NCF_CFG[1];         /* Non-critical Fault Configuration */
  uint8_t FCCU_reserved1[44];
  FCCU_NCFS_CFG_tag NCFS_CFG[1];       /* Non-critical Fault-State Configuration */
  uint8_t FCCU_reserved2[48];
  FCCU_NCF_S_tag NCF_S[1];             /* Non-critical Fault Status */
  uint8_t FCCU_reserved3[12];
  FCCU_NCFK_tag NCFK;                  /* Non-critical Fault Key */
  FCCU_NCF_E_tag NCF_E[1];             /* Non-critical Fault Enable */
  uint8_t FCCU_reserved4[12];
  FCCU_NCF_TOE_tag NCF_TOE[1];         /* Non-critical-Fault Alarm-State Timeout Enable */
  uint8_t FCCU_reserved5[12];
  FCCU_NCF_TO_tag NCF_TO;              /* Non-critical-Fault Alarm-State Timeout Interval */
  FCCU_CFG_TO_tag CFG_TO;              /* Configuration-State Timeout Interval */
  FCCU_EINOUT_tag EINOUT;              /* IO Control */
  FCCU_STAT_tag STAT;                  /* Status */
  FCCU_N2AF_STATUS_tag N2AF_STATUS;    /* Normal-to-Alarm Freeze Status */
  FCCU_A2FF_STATUS_tag A2FF_STATUS;    /* Alarm-to-Fault Freeze Status */
  FCCU_N2FF_STATUS_tag N2FF_STATUS;    /* Normal-to-Fault Freeze Status */
  FCCU_F2AF_STATUS_tag F2AF_STATUS;    /* Fault-to-Alarm Freeze Status */
  uint8_t FCCU_reserved6[8];
  FCCU_NCFF_tag NCFF;                  /* Non-critical Fault Fake */
  FCCU_IRQ_STAT_tag IRQ_STAT;          /* IRQ Status */
  FCCU_IRQ_EN_tag IRQ_EN;              /* IRQ Enable */
  uint8_t FCCU_reserved7[8];
  FCCU_TRANS_LOCK_tag TRANS_LOCK;      /* Transient Configuration Lock */
  FCCU_PERMNT_LOCK_tag PERMNT_LOCK;    /* Permanent Configuration Lock */
  FCCU_DELTA_T_tag DELTA_T;            /* Delta T */
  FCCU_IRQ_ALARM_EN_tag IRQ_ALARM_EN[1]; /* Non-critical Alarm-State Interrupt-Request Enable */
  uint8_t FCCU_reserved8[12];
  FCCU_NMI_EN_tag NMI_EN[1];           /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable */
  uint8_t FCCU_reserved9[12];
  FCCU_EOUT_SIG_EN_tag EOUT_SIG_EN[1]; /* Non-critical Fault-State EOUT Signaling Enable */
  uint8_t FCCU_reserved10[12];
  FCCU_TMR_ALARM_tag TMR_ALARM;        /* Alarm-State Timer */
  uint8_t FCCU_reserved11[4];
  FCCU_TMR_CFG_tag TMR_CFG;            /* Configuration-State Timer */
  FCCU_TMR_ETMR_tag TMR_ETMR;          /* Fault-Output Timer */
};


/* ============================================================================
   =============================== Module: FIRC ===============================
   ============================================================================ */

typedef union FIRC_STATUS_REGISTER_union_tag { /* Status Register */
  vuint32_t R;
  struct {
    vuint32_t STATUS:1;                /* Status bit for FIRC */
    vuint32_t _unused_1:31;
  } B;
} FIRC_STATUS_REGISTER_tag;

typedef union FIRC_STDBY_ENABLE_union_tag { /* Standby Enable Register */
  vuint32_t R;
  struct {
    vuint32_t STDBY_EN:1;              /* Enables or disables FIRC in chip's Standby mode. */
    vuint32_t _unused_1:31;            /* RESERVED */
  } B;
} FIRC_STDBY_ENABLE_tag;

struct FIRC_tag {
  uint8_t FIRC_reserved0[4];
  FIRC_STATUS_REGISTER_tag STATUS_REGISTER; /* Status Register */
  FIRC_STDBY_ENABLE_tag STDBY_ENABLE;  /* Standby Enable Register */
};


/* ============================================================================
   =============================== Module: FLASH ==============================
   ============================================================================ */

typedef union FLASH_MCR_union_tag {    /* Module Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t EHV:1;                   /* Enable High Voltage */
    vuint32_t _unused_1:3;             /* Reserved */
    vuint32_t ERS:1;                   /* Erase */
    vuint32_t ESS:1;                   /* Erase Size Select */
    vuint32_t _unused_6:2;             /* Reserved */
    vuint32_t PGM:1;                   /* Program */
    vuint32_t _unused_9:3;             /* Reserved */
    vuint32_t WDIE:1;                  /* Watch Dog Interrupt Enable */
    vuint32_t _unused_13:2;            /* Reserved */
    vuint32_t PECIE:1;                 /* Program/Erase Complete Interrupt Enable */
    vuint32_t PEID:8;                  /* Program and Erase Master/Domain ID */
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} FLASH_MCR_tag;

typedef union FLASH_MCRS_union_tag {   /* Module Configuration Status Register */
  vuint32_t R;
  struct {
    vuint32_t RE:1;                    /* Reset Error */
    vuint32_t _unused_1:7;             /* Reserved */
    vuint32_t TSPELOCK:1;              /* UTest NVM Program and Erase Lock */
    vuint32_t EPEG:1;                  /* ECC Enabled Program/Erase Good */
    vuint32_t _unused_10:2;            /* Reserved */
    vuint32_t WDI:1;                   /* Watch Dog Interrupt */
    vuint32_t _unused_13:1;            /* Reserved */
    vuint32_t PEG:1;                   /* Program/Erase Good */
    vuint32_t DONE:1;                  /* State Machine Status */
    vuint32_t PES:1;                   /* Program and Erase Sequence Error */
    vuint32_t PEP:1;                   /* Program and Erase Protection Error */
    vuint32_t _unused_18:2;            /* Reserved */
    vuint32_t RWE:1;                   /* Read-While-Write Event Error */
    vuint32_t _unused_21:3;            /* Reserved */
    vuint32_t RRE:1;                   /* Read Reference Error */
    vuint32_t RVE:1;                   /* Read Voltage Error */
    vuint32_t _unused_26:2;            /* Reserved */
    vuint32_t EEE:1;                   /* EDC after ECC Error */
    vuint32_t AEE:1;                   /* Address Encode Error */
    vuint32_t SBC:1;                   /* Single Bit Correction */
    vuint32_t EER:1;                   /* ECC Event Error */
  } B;
} FLASH_MCRS_tag;

typedef union FLASH_MCRE_union_tag {   /* Extended Module Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:6;             /* Reserved */
    vuint32_t N256K:2;                 /* n256K */
    vuint32_t _unused_8:6;             /* Reserved */
    vuint32_t N512K:2;                 /* n512K */
    vuint32_t _unused_16:5;            /* Reserved */
    vuint32_t N1M:3;                   /* n1M */
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} FLASH_MCRE_tag;

typedef union FLASH_CTL_union_tag {    /* Module Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:8;             /* Reserved */
    vuint32_t RWSC:5;                  /* Wait State Control */
    vuint32_t _unused_13:2;            /* Reserved */
    vuint32_t RWSL:1;                  /* Read Wait State Lock */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} FLASH_CTL_tag;

typedef union FLASH_ADR_union_tag {    /* Address register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t ADDR:18;                 /* Address */
    vuint32_t A0:1;                    /* Address region 0 */
    vuint32_t A1:1;                    /* Address region 1 */
    vuint32_t A2:1;                    /* Address region 2 */
    vuint32_t A3:1;                    /* Address region 3 */
    vuint32_t A4:1;                    /* Address region 4 */
    vuint32_t A5:1;                    /* Address region 5 */
    vuint32_t _unused_25:6;            /* Reserved */
    vuint32_t SAD:1;                   /* SAD */
  } B;
} FLASH_ADR_tag;

typedef union FLASH_PEADR_union_tag {  /* Program and Erase Address register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:5;             /* Reserved */
    vuint32_t PEADDR:14;               /* Program and Erase Address */
    vuint32_t PEA0:1;                  /* Program and Erase Address Region 0 */
    vuint32_t PEA1:1;                  /* Program and Erase Address Region 1 */
    vuint32_t PEA2:1;                  /* Program and Erase Address Region 2 */
    vuint32_t PEA3:1;                  /* Program and Erase Address Region 3 */
    vuint32_t PEA4:1;                  /* Program and Erase Address Region 4 */
    vuint32_t PEA5:1;                  /* Program and Erase Address Region 5 */
    vuint32_t _unused_25:6;            /* Reserved */
    vuint32_t PEASAD:1;                /* PEASAD */
  } B;
} FLASH_PEADR_tag;

typedef union FLASH_AMCR_union_tag {   /* Alternate Module Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t AEHV:1;                  /* Alternate Enable High Voltage */
    vuint32_t _unused_1:3;             /* Reserved */
    vuint32_t AERS:1;                  /* Alternate Erase */
    vuint32_t AESS:1;                  /* Alternate Erase Size Select */
    vuint32_t _unused_6:2;             /* Reserved */
    vuint32_t APGM:1;                  /* Alternate Program */
    vuint32_t _unused_9:3;             /* Reserved */
    vuint32_t AWDIE:1;                 /* Alternate Watch Dog Interrupt Enable */
    vuint32_t _unused_13:3;            /* Reserved */
    vuint32_t APEID:8;                 /* Alternate Program and Erase Master/Domain ID */
    vuint32_t _unused_24:5;            /* Reserved */
    vuint32_t WDD:1;                   /* Watch Dog Disable */
    vuint32_t WDT:2;                   /* Watch Dog Tune */
  } B;
} FLASH_AMCR_tag;

typedef union FLASH_AMCRS_union_tag {  /* Alternate Module Configuration Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:8;             /* Reserved */
    vuint32_t ATSPELOCK:1;             /* Alternate UTest NVM Program and Erase Lock */
    vuint32_t AEPEG:1;                 /* Alternate ECC Enabled Program/Erase Good */
    vuint32_t _unused_10:2;            /* Reserved */
    vuint32_t AWDI:1;                  /* Alternate Watch Dog Interrupt */
    vuint32_t _unused_13:1;            /* Reserved */
    vuint32_t APEG:1;                  /* Alternate Program/Erase Good */
    vuint32_t ADONE:1;                 /* Alternate State Machine Status */
    vuint32_t APES:1;                  /* Alternate Program and Erase Sequence Error */
    vuint32_t APEP:1;                  /* Alternate Program and Erase Protection Error */
    vuint32_t _unused_18:14;           /* Reserved */
  } B;
} FLASH_AMCRS_tag;

typedef union FLASH_APEADR_union_tag { /* Alternate Program and Erase Address register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:3;             /* Reserved */
    vuint32_t APEADDR:16;              /* Alternate Program and Erase Address */
    vuint32_t APEA0:1;                 /* Alternate Program and Erase Address Region 0 */
    vuint32_t APEA1:1;                 /* Alternate Program and Erase Address Region 1 */
    vuint32_t APEA2:1;                 /* Alternate Program and Erase Address Region 2 */
    vuint32_t APEA3:1;                 /* Alternate Program and Erase Address Region 3 */
    vuint32_t APEA4:1;                 /* Alternate Program and Erase Address Region 4 */
    vuint32_t APEA5:1;                 /* Alternate Program and Erase Address Region 5 */
    vuint32_t _unused_25:6;            /* Reserved */
    vuint32_t APEASAD:1;               /* APEASAD */
  } B;
} FLASH_APEADR_tag;

typedef union FLASH_ADATA_union_tag {  /* Alternate Program Data Register */
  vuint32_t R;
  struct {
    vuint32_t APDATA:32;               /* APDATA */
  } B;
} FLASH_ADATA_tag;

typedef union FLASH_SPELOCK_union_tag { /* Sector Program and Erase Hardware Lock register */
  vuint32_t R;
  struct {
    vuint32_t SPELOCK:32;              /* Sector Program and Erase Lock [31:0] */
  } B;
} FLASH_SPELOCK_tag;

typedef union FLASH_SSPELOCK_union_tag { /* Super Sector Program and Erase Hardware Lock register */
  vuint32_t R;
  struct {
    vuint32_t SSPELOCK:12;             /* Super Sector Program and Erase Lock [11:0] */
    vuint32_t _unused_12:20;           /* Reserved */
  } B;
} FLASH_SSPELOCK_tag;

typedef union FLASH_ASPELOCK_union_tag { /* Alternate Sector Program and Erase Hardware Lock register */
  vuint32_t R;
  struct {
    vuint32_t ASPELOCK:32;             /* Alternate Sector Program and Erase Lock [31:0] */
  } B;
} FLASH_ASPELOCK_tag;

typedef union FLASH_ASSPELOCK_union_tag { /* Alternate Super Sector Program and Erase Hardware Lock register */
  vuint32_t R;
  struct {
    vuint32_t ASSPELOCK:12;            /* Alternate Super Sector Program and Erase Lock [11:0] */
    vuint32_t _unused_12:20;           /* Reserved */
  } B;
} FLASH_ASSPELOCK_tag;

typedef union FLASH_XSPELOCK_union_tag { /* Express Sector Program and Erase Hardware Lock register */
  vuint32_t R;
  struct {
    vuint32_t XSPELOCK:32;             /* Express Sector Program and Erase Lock [31:0] */
  } B;
} FLASH_XSPELOCK_tag;

typedef union FLASH_XSSPELOCK_union_tag { /* Express Super Sector Program and Erase Hardware Lock register */
  vuint32_t R;
  struct {
    vuint32_t XSSPELOCK:12;            /* Express Super Sector Program and Erase Lock [11:0] */
    vuint32_t _unused_12:20;           /* Reserved */
  } B;
} FLASH_XSSPELOCK_tag;

typedef union FLASH_TMD_union_tag {    /* Test Mode Disable Password Check register */
  vuint32_t R;
  struct {
    vuint32_t PWD:32;                  /* Password challenge */
  } B;
} FLASH_TMD_tag;

typedef union FLASH_UT0_union_tag {    /* UTest 0 register */
  vuint32_t R;
  struct {
    vuint32_t AID:1;                   /* AID */
    vuint32_t AIE:1;                   /* AIE */
    vuint32_t AIS:1;                   /* AIS */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t MRV:1;                   /* MRV */
    vuint32_t MRE:1;                   /* MRE */
    vuint32_t AISUS:1;                 /* AISUS */
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t AIBPE:1;                 /* AIBPE */
    vuint32_t NAIBP:1;                 /* NAIBP */
    vuint32_t _unused_10:2;            /* Reserved */
    vuint32_t EIE:1;                   /* ECC Data Input Enable */
    vuint32_t EDIE:1;                  /* EDC after ECC Data Input Enable */
    vuint32_t AEIE:1;                  /* Address Encode Invert Enable */
    vuint32_t RRIE:1;                  /* Read Reference Input Enable */
    vuint32_t _unused_16:14;           /* Reserved */
    vuint32_t SBCE:1;                  /* SBCE */
    vuint32_t UTE:1;                   /* U-Test Enable */
  } B;
} FLASH_UT0_tag;

typedef union FLASH_UM_union_tag {     /* UMISRn register */
  vuint32_t R;
  struct {
    vuint32_t MISR:32;                 /* MISR[31:0] */
  } B;
} FLASH_UM_tag;

typedef union FLASH_UM9_union_tag {    /* UMISR9 register */
  vuint32_t R;
  struct {
    vuint32_t MISR:1;                  /* MISR[288] */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} FLASH_UM9_tag;

typedef union FLASH_UD0_union_tag {    /* UTest Data 0 Register */
  vuint32_t R;
  struct {
    vuint32_t EDATA:32;                /* ECC Data [31:0] */
  } B;
} FLASH_UD0_tag;

typedef union FLASH_UD1_union_tag {    /* UTest Data 1 Register */
  vuint32_t R;
  struct {
    vuint32_t EDATA:32;                /* ECC Data [63:32] */
  } B;
} FLASH_UD1_tag;

typedef union FLASH_UD2_union_tag {    /* UTest Data 2 Register */
  vuint32_t R;
  struct {
    vuint32_t EDATAC:8;                /* ECC Data Check Bits [7:0] */
    vuint32_t _unused_8:16;            /* Reserved */
    vuint32_t ED0:1;                   /* ECC Logic Check Double Word 0 */
    vuint32_t ED1:1;                   /* ECC Logic Check Double Word 1 */
    vuint32_t ED2:1;                   /* ECC Logic Check Double Word 2 */
    vuint32_t ED3:1;                   /* ECC Logic Check Double Word 3 */
    vuint32_t _unused_28:4;            /* Reserved */
  } B;
} FLASH_UD2_tag;

typedef union FLASH_UD3_union_tag {    /* UTest Data 3 Register */
  vuint32_t R;
  struct {
    vuint32_t EDDATA:32;               /* EDC after ECC Data [31:0] */
  } B;
} FLASH_UD3_tag;

typedef union FLASH_UD4_union_tag {    /* UTest Data 4 Register */
  vuint32_t R;
  struct {
    vuint32_t EDDATA:32;               /* EDC after ECC Data [63:31] */
  } B;
} FLASH_UD4_tag;

typedef union FLASH_UD5_union_tag {    /* UTest Data 5 Register */
  vuint32_t R;
  struct {
    vuint32_t EDDATAC:8;               /* EDC after ECC Data Check Bits [7:0] */
    vuint32_t _unused_8:16;            /* Reserved */
    vuint32_t EDD0:1;                  /* EDC after ECC Logic Check Double Word 0 */
    vuint32_t EDD1:1;                  /* EDC after ECC Logic Check Double Word 1 */
    vuint32_t EDD2:1;                  /* EDC after ECC Logic Check Double Word 2 */
    vuint32_t EDD3:1;                  /* EDC after ECC Logic Check Double Word 3 */
    vuint32_t _unused_28:4;            /* Reserved */
  } B;
} FLASH_UD5_tag;

typedef union FLASH_UA0_union_tag {    /* UTest Address 0 Register */
  vuint32_t R;
  struct {
    vuint32_t AEI:32;                  /* Address Encode Invert [31:0] */
  } B;
} FLASH_UA0_tag;

typedef union FLASH_UA1_union_tag {    /* UTest Address 1 Register */
  vuint32_t R;
  struct {
    vuint32_t AEI:20;                  /* Address Encode Invert [51:32] */
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} FLASH_UA1_tag;

typedef union FLASH_XMCR_union_tag {   /* Express Module Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t XEHV:1;                  /* Express Enable High Voltage */
    vuint32_t _unused_1:7;             /* Reserved */
    vuint32_t XPGM:1;                  /* Express Program */
    vuint32_t XEPEG:1;                 /* Express ECC Enabled Program Good */
    vuint32_t _unused_10:1;            /* Reserved */
    vuint32_t XWDIE:1;                 /* Express Watch Dog Interrupt Enable */
    vuint32_t XWDI:1;                  /* Express Watch Dog Interrupt */
    vuint32_t XDOK:1;                  /* Express Data OK */
    vuint32_t XPEG:1;                  /* Express Program Good */
    vuint32_t XDONE:1;                 /* Express State Machine Status */
    vuint32_t XPEID:8;                 /* Express Program Master/Domain ID */
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} FLASH_XMCR_tag;

typedef union FLASH_XPEADR_union_tag { /* Express Program Address register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:5;             /* Reserved */
    vuint32_t XPEADDR:14;              /* Express Program Address */
    vuint32_t XPEA0:1;                 /* Express Program Address Region 0 */
    vuint32_t XPEA1:1;                 /* Express Program Address Region 1 */
    vuint32_t XPEA2:1;                 /* Express Program Address Region 2 */
    vuint32_t XPEA3:1;                 /* Express Program Address Region 3 */
    vuint32_t XPEA4:1;                 /* Express Program Address Region 4 */
    vuint32_t XPEA5:1;                 /* Express Program Address Region 5 */
    vuint32_t _unused_25:7;            /* Reserved */
  } B;
} FLASH_XPEADR_tag;

typedef union FLASH_DATA_union_tag {   /* Program Data Register */
  vuint32_t R;
  struct {
    vuint32_t PDATA:32;                /* PDATA */
  } B;
} FLASH_DATA_tag;

struct FLASH_tag {
  FLASH_MCR_tag MCR;                   /* Module Configuration Register */
  FLASH_MCRS_tag MCRS;                 /* Module Configuration Status Register */
  FLASH_MCRE_tag MCRE;                 /* Extended Module Configuration Register */
  FLASH_CTL_tag CTL;                   /* Module Control Register */
  FLASH_ADR_tag ADR;                   /* Address register */
  FLASH_PEADR_tag PEADR;               /* Program and Erase Address register */
  uint8_t FLASH_reserved0[8];
  FLASH_AMCR_tag AMCR;                 /* Alternate Module Configuration Register */
  FLASH_AMCRS_tag AMCRS;               /* Alternate Module Configuration Status Register */
  FLASH_APEADR_tag APEADR;             /* Alternate Program and Erase Address register */
  uint8_t FLASH_reserved1[4];
  FLASH_ADATA_tag ADATA[8];            /* Alternate Program Data Register */
  FLASH_SPELOCK_tag SPELOCK;           /* Sector Program and Erase Hardware Lock register */
  FLASH_SSPELOCK_tag SSPELOCK;         /* Super Sector Program and Erase Hardware Lock register */
  uint8_t FLASH_reserved2[8];
  FLASH_ASPELOCK_tag ASPELOCK;         /* Alternate Sector Program and Erase Hardware Lock register */
  FLASH_ASSPELOCK_tag ASSPELOCK;       /* Alternate Super Sector Program and Erase Hardware Lock register */
  uint8_t FLASH_reserved3[8];
  FLASH_XSPELOCK_tag XSPELOCK;         /* Express Sector Program and Erase Hardware Lock register */
  FLASH_XSSPELOCK_tag XSSPELOCK;       /* Express Super Sector Program and Erase Hardware Lock register */
  uint8_t FLASH_reserved4[24];
  FLASH_TMD_tag TMD;                   /* Test Mode Disable Password Check register */
  FLASH_UT0_tag UT0;                   /* UTest 0 register */
  FLASH_UM_tag UM[9];                  /* UMISRn register */
  FLASH_UM9_tag UM9;                   /* UMISR9 register */
  uint8_t FLASH_reserved5[16];
  FLASH_UD0_tag UD0;                   /* UTest Data 0 Register */
  FLASH_UD1_tag UD1;                   /* UTest Data 1 Register */
  FLASH_UD2_tag UD2;                   /* UTest Data 2 Register */
  FLASH_UD3_tag UD3;                   /* UTest Data 3 Register */
  FLASH_UD4_tag UD4;                   /* UTest Data 4 Register */
  FLASH_UD5_tag UD5;                   /* UTest Data 5 Register */
  FLASH_UA0_tag UA0;                   /* UTest Address 0 Register */
  FLASH_UA1_tag UA1;                   /* UTest Address 1 Register */
  FLASH_XMCR_tag XMCR;                 /* Express Module Configuration Register */
  FLASH_XPEADR_tag XPEADR;             /* Express Program Address register */
  uint8_t FLASH_reserved6[8];
  FLASH_DATA_tag DATA[32];             /* Program Data Register */
};


/* ============================================================================
   =============================== Module: FLEXCAN ============================
   ============================================================================ */

typedef union FLEXCAN_MCR_union_tag {  /* Module Configuration register */
  vuint32_t R;
  struct {
    vuint32_t MAXMB:7;                 /* Number Of The Last Message Buffer */
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t IDAM:2;                  /* ID Acceptance Mode */
    vuint32_t _unused_10:1;            /* Reserved */
    vuint32_t FDEN:1;                  /* CAN FD operation enable */
    vuint32_t AEN:1;                   /* Abort Enable */
    vuint32_t LPRIOEN:1;               /* Local Priority Enable */
    vuint32_t _unused_14:1;            /* Reserved */
    vuint32_t DMA:1;                   /* DMA Enable */
    vuint32_t IRMQ:1;                  /* Individual Rx Masking And Queue Enable */
    vuint32_t SRXDIS:1;                /* Self Reception Disable */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t LPMACK:1;                /* Low-Power Mode Acknowledge */
    vuint32_t WRNEN:1;                 /* Warning Interrupt Enable */
    vuint32_t _unused_22:1;            /* Reserved */
    vuint32_t SUPV:1;                  /* Supervisor Mode */
    vuint32_t FRZACK:1;                /* Freeze Mode Acknowledge */
    vuint32_t SOFTRST:1;               /* Soft Reset */
    vuint32_t _unused_26:1;            /* Reserved */
    vuint32_t NOTRDY:1;                /* FlexCAN Not Ready */
    vuint32_t HALT:1;                  /* Halt FlexCAN */
    vuint32_t RFEN:1;                  /* Rx FIFO Enable */
    vuint32_t FRZ:1;                   /* Freeze Enable */
    vuint32_t MDIS:1;                  /* Module Disable */
  } B;
} FLEXCAN_MCR_tag;

typedef union FLEXCAN_CTRL1_union_tag { /* Control 1 register */
  vuint32_t R;
  struct {
    vuint32_t PROPSEG:3;               /* Propagation Segment */
    vuint32_t LOM:1;                   /* Listen-Only Mode */
    vuint32_t LBUF:1;                  /* Lowest Buffer Transmitted First */
    vuint32_t TSYN:1;                  /* Timer Sync */
    vuint32_t BOFFREC:1;               /* Bus Off Recovery */
    vuint32_t SMP:1;                   /* CAN Bit Sampling */
    vuint32_t _unused_8:1;             /* Reserved */
    vuint32_t _unused_9:1;             /* Reserved */
    vuint32_t RWRNMSK:1;               /* Rx Warning Interrupt Mask */
    vuint32_t TWRNMSK:1;               /* Tx Warning Interrupt Mask */
    vuint32_t LPB:1;                   /* Loop Back Mode */
    vuint32_t _unused_13:1;            /* Reserved */
    vuint32_t ERRMSK:1;                /* Error Interrupt Mask */
    vuint32_t BOFFMSK:1;               /* Bus Off Interrupt Mask */
    vuint32_t PSEG2:3;                 /* Phase Segment 2 */
    vuint32_t PSEG1:3;                 /* Phase Segment 1 */
    vuint32_t RJW:2;                   /* Resync Jump Width */
    vuint32_t PRESDIV:8;               /* Prescaler Division Factor */
  } B;
} FLEXCAN_CTRL1_tag;

typedef union FLEXCAN_TIMER_union_tag { /* Free Running Timer */
  vuint32_t R;
  struct {
    vuint32_t TIMER:16;                /* Timer Value */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} FLEXCAN_TIMER_tag;

typedef union FLEXCAN_RXMGMASK_union_tag { /* Rx Mailboxes Global Mask register */
  vuint32_t R;
  struct {
    vuint32_t MG:32;                   /* Rx Mailboxes Global Mask Bits */
  } B;
} FLEXCAN_RXMGMASK_tag;

typedef union FLEXCAN_RX14MASK_union_tag { /* Rx 14 Mask register */
  vuint32_t R;
  struct {
    vuint32_t RX14M:32;                /* Rx Buffer 14 Mask Bits */
  } B;
} FLEXCAN_RX14MASK_tag;

typedef union FLEXCAN_RX15MASK_union_tag { /* Rx 15 Mask register */
  vuint32_t R;
  struct {
    vuint32_t RX15M:32;                /* Rx Buffer 15 Mask Bits */
  } B;
} FLEXCAN_RX15MASK_tag;

typedef union FLEXCAN_ECR_union_tag {  /* Error Counter */
  vuint32_t R;
  struct {
    vuint32_t TXERRCNT:8;              /* Transmit Error Counter */
    vuint32_t RXERRCNT:8;              /* Receive Error Counter */
    vuint32_t TXERRCNT_FAST:8;         /* Transmit Error Counter for fast bits */
    vuint32_t RXERRCNT_FAST:8;         /* Receive Error Counter for fast bits */
  } B;
} FLEXCAN_ECR_tag;

typedef union FLEXCAN_ESR1_union_tag { /* Error and Status 1 register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t ERRINT:1;                /* Error Interrupt */
    vuint32_t BOFFINT:1;               /* Bus Off Interrupt */
    vuint32_t RX:1;                    /* FlexCAN In Reception */
    vuint32_t FLTCONF:2;               /* Fault Confinement State */
    vuint32_t TX:1;                    /* FlexCAN In Transmission */
    vuint32_t IDLE:1;                  /* IDLE */
    vuint32_t RXWRN:1;                 /* Rx Error Warning */
    vuint32_t TXWRN:1;                 /* TX Error Warning */
    vuint32_t STFERR:1;                /* Stuffing Error */
    vuint32_t FRMERR:1;                /* Form Error */
    vuint32_t CRCERR:1;                /* Cyclic Redundancy Check Error */
    vuint32_t ACKERR:1;                /* Acknowledge Error */
    vuint32_t BIT0ERR:1;               /* Bit0 Error */
    vuint32_t BIT1ERR:1;               /* Bit1 Error */
    vuint32_t RWRNINT:1;               /* Rx Warning Interrupt Flag */
    vuint32_t TWRNINT:1;               /* Tx Warning Interrupt Flag */
    vuint32_t SYNCH:1;                 /* CAN Synchronization Status */
    vuint32_t BOFFDONEINT:1;           /* Bus Off Done Interrupt */
    vuint32_t ERRINT_FAST:1;           /* Error interrupt for errors detected in Data Phase of CAN FD frames with BRS bit set */
    vuint32_t ERROVR:1;                /* Error Overrun */
    vuint32_t _unused_22:4;            /* Reserved */
    vuint32_t STFERR_FAST:1;           /* Stuffing Error in the Data Phase of CAN FD frames with the BRS bit set */
    vuint32_t FRMERR_FAST:1;           /* Form Error in the Data Phase of CAN FD frames with the BRS bit set */
    vuint32_t CRCERR_FAST:1;           /* Cyclic Redundancy Check Error in the CRC field of CAN FD frames with the BRS bit set */
    vuint32_t _unused_29:1;            /* Reserved */
    vuint32_t BIT0ERR_FAST:1;          /* Bit0 Error in the Data Phase of CAN FD frames with the BRS bit set */
    vuint32_t BIT1ERR_FAST:1;          /* Bit1 Error in the Data Phase of CAN FD frames with the BRS bit set */
  } B;
} FLEXCAN_ESR1_tag;

typedef union FLEXCAN_IMASK1_union_tag { /* Interrupt Masks 1 register */
  vuint32_t R;
  struct {
    vuint32_t BUF31TO0M:32;            /* Buffer MBi Mask */
  } B;
} FLEXCAN_IMASK1_tag;

typedef union FLEXCAN_IFLAG1_union_tag { /* Interrupt Flags 1 register */
  vuint32_t R;
  struct {
    vuint32_t BUF0I:1;                 /* Buffer MB0 Interrupt Or Clear FIFO bit */
    vuint32_t BUF4TO1I:4;              /* Buffer MBi Interrupt Or Reserved */
    vuint32_t BUF5I:1;                 /* Buffer MB5 Interrupt Or Frames available in Rx FIFO */
    vuint32_t BUF6I:1;                 /* Buffer MB6 Interrupt Or Rx FIFO Warning */
    vuint32_t BUF7I:1;                 /* Buffer MB7 Interrupt Or Rx FIFO Overflow */
    vuint32_t BUF31TO8I:24;            /* Buffer MBi Interrupt */
  } B;
} FLEXCAN_IFLAG1_tag;

typedef union FLEXCAN_CTRL2_union_tag { /* Control 2 register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:6;             /* Reserved */
    vuint32_t TSTAMPCAP:2;             /* Time Stamp Capture Point */
    vuint32_t MBTSBASE:2;              /* Message Buffer Time Stamp Base */
    vuint32_t _unused_10:1;            /* Reserved */
    vuint32_t EDFLTDIS:1;              /* Edge Filter Disable */
    vuint32_t ISOCANFDEN:1;            /* ISO CAN FD Enable */
    vuint32_t BTE:1;                   /* Bit Timing Expansion enable */
    vuint32_t PREXCEN:1;               /* Protocol Exception Enable */
    vuint32_t TIMER_SRC:1;             /* Timer Source */
    vuint32_t EACEN:1;                 /* Entire Frame Arbitration Field Comparison Enable For Rx Mailboxes */
    vuint32_t RRS:1;                   /* Remote Request Storing */
    vuint32_t MRP:1;                   /* Mailboxes Reception Priority */
    vuint32_t TASD:5;                  /* Tx Arbitration Start Delay */
    vuint32_t RFFN:4;                  /* Number Of Rx FIFO Filters */
    vuint32_t WRMFRZ:1;                /* Write-Access To Memory In Freeze Mode */
    vuint32_t ECRWRE:1;                /* Error-correction Configuration Register Write Enable */
    vuint32_t BOFFDONEMSK:1;           /* Bus Off Done Interrupt Mask */
    vuint32_t ERRMSK_FAST:1;           /* Error Interrupt Mask for errors detected in the data phase of fast CAN FD frames */
  } B;
} FLEXCAN_CTRL2_tag;

typedef union FLEXCAN_ESR2_union_tag { /* Error and Status 2 register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:13;            /* Reserved */
    vuint32_t IMB:1;                   /* Inactive Mailbox */
    vuint32_t VPS:1;                   /* Valid Priority Status */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t LPTM:7;                  /* Lowest Priority Tx Mailbox */
    vuint32_t _unused_23:9;            /* Reserved */
  } B;
} FLEXCAN_ESR2_tag;

typedef union FLEXCAN_CRCR_union_tag { /* CRC register */
  vuint32_t R;
  struct {
    vuint32_t TXCRC:15;                /* Transmitted CRC value */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t MBCRC:7;                 /* CRC Mailbox */
    vuint32_t _unused_23:9;            /* Reserved */
  } B;
} FLEXCAN_CRCR_tag;

typedef union FLEXCAN_RXFGMASK_union_tag { /* Rx FIFO Global Mask register */
  vuint32_t R;
  struct {
    vuint32_t FGM:32;                  /* Rx FIFO Global Mask Bits */
  } B;
} FLEXCAN_RXFGMASK_tag;

typedef union FLEXCAN_RXFIR_union_tag { /* Rx FIFO Information register */
  vuint32_t R;
  struct {
    vuint32_t IDHIT:9;                 /* Identifier Acceptance Filter Hit Indicator */
    vuint32_t _unused_9:23;            /* Reserved */
  } B;
} FLEXCAN_RXFIR_tag;

typedef union FLEXCAN_CBT_union_tag {  /* CAN Bit Timing register */
  vuint32_t R;
  struct {
    vuint32_t EPSEG2:5;                /* Extended Phase Segment 2 */
    vuint32_t EPSEG1:5;                /* Extended Phase Segment 1 */
    vuint32_t EPROPSEG:6;              /* Extended Propagation Segment */
    vuint32_t ERJW:5;                  /* Extended Resync Jump Width */
    vuint32_t EPRESDIV:10;             /* Extended Prescaler Division Factor */
    vuint32_t BTF:1;                   /* Bit Timing Format Enable */
  } B;
} FLEXCAN_CBT_tag;

typedef union FLEXCAN_MB_CS_union_tag { /* Message Buffer 0 CS Register */
  vuint32_t R;
  struct {
    vuint32_t TIMESTAMP:16;            /* Free-Running Counter Time stamp. This 16-bit field is a copy of the Free-Running Timer, captured for Tx and Rx frames at the time when the beginning of the Identifier field appears on the CAN bus. */
	vuint32_t DLC:4;                   /* Length of the data to be stored/transmitted. */
	vuint32_t RTR:1;                   /* Remote Transmission Request. One/zero for remote/data frame. */
	vuint32_t IDE:1;                   /* ID Extended. One/zero for extended/standard format frame. */
	vuint32_t SRR:1;                   /* Substitute Remote Request. Contains a fixed recessive bit. */
    vuint32_t _unused_23:1;
    vuint32_t CODE:4;                  /* Message Buffer Code */
    vuint32_t _unused_28:1;
	vuint32_t ESI:1;                   /*  Error State Indicator */
	vuint32_t BRS:1;                   /* Bit Rate Switch */
    vuint32_t EDL:1;                   /* Extended Data Length */
  } B;
} FLEXCAN_MB_CS_tag;

typedef union FLEXCAN_MB_ID_union_tag { /* Message Buffer 0 ID Register */
  vuint32_t R;
  struct {
    vuint32_t ID_EXT:18;               /* Frame Identifier Extended */
    vuint32_t ID_STD:11;               /* Frame Identifier Standard */
    vuint32_t PRIO:3;                  /* Local Priority */
  } B;
} FLEXCAN_MB_ID_tag;

typedef union FLEXCAN_MB_DATA_union_tag {
    vuint8_t B[8];
    vuint16_t H[4];
    vuint32_t W[2];
} FLEXCAN_MB_DATA_tag;

typedef struct FLEXCAN_MB_struct_tag {
   FLEXCAN_MB_CS_tag CS;                    /* Message Buffer 0 CS Register */
   FLEXCAN_MB_ID_tag ID;                    /* Message Buffer 0 ID Register */
   FLEXCAN_MB_DATA_tag DATA;
} FLEXCAN_MB_tag;

typedef union FLEXCAN_RXIMR_union_tag { /* Rx Individual Mask registers */
  vuint32_t R;
  struct {
    vuint32_t MI:32;                   /* Individual Mask Bits */
  } B;
} FLEXCAN_RXIMR_tag;

typedef union FLEXCAN_MECR_union_tag { /* Memory Error Control register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:7;             /* Reserved */
    vuint32_t NCEFAFRZ:1;              /* Non-Correctable Errors In FlexCAN Access Put Device In Freeze Mode */
    vuint32_t ECCDIS:1;                /* Error Correction Disable */
    vuint32_t RERRDIS:1;               /* Error Report Disable */
    vuint32_t _unused_10:3;            /* Reserved */
    vuint32_t EXTERRIE:1;              /* Extended Error Injection Enable */
    vuint32_t FAERRIE:1;               /* FlexCAN Access Error Injection Enable */
    vuint32_t HAERRIE:1;               /* Host Access Error Injection Enable */
    vuint32_t CEI_MSK:1;               /* Correctable Errors Interrupt Mask */
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t FANCEI_MSK:1;            /* FlexCAN Access With Non-Correctable Errors Interrupt Mask */
    vuint32_t HANCEI_MSK:1;            /* Host Access With Non-Correctable Errors Interrupt Mask */
    vuint32_t _unused_20:11;           /* Reserved */
    vuint32_t ECRWRDIS:1;              /* Error Configuration Register Write Disable */
  } B;
} FLEXCAN_MECR_tag;

typedef union FLEXCAN_ERRIAR_union_tag { /* Error Injection Address register */
  vuint32_t R;
  struct {
    vuint32_t INJADDR_L:2;             /* Error Injection Address Low */
    vuint32_t INJADDR_H:12;            /* Error Injection Address High */
    vuint32_t _unused_14:18;           /* Reserved */
  } B;
} FLEXCAN_ERRIAR_tag;

typedef union FLEXCAN_ERRIDPR_union_tag { /* Error Injection Data Pattern register */
  vuint32_t R;
  struct {
    vuint32_t DFLIP:32;                /* Data flip pattern */
  } B;
} FLEXCAN_ERRIDPR_tag;

typedef union FLEXCAN_ERRIPPR_union_tag { /* Error Injection Parity Pattern register */
  vuint32_t R;
  struct {
    vuint32_t PFLIP0:5;                /* Parity Flip Pattern For Byte 0 (Least Significant) */
    vuint32_t _unused_5:3;             /* Reserved */
    vuint32_t PFLIP1:5;                /* Parity Flip Pattern For Byte 1 */
    vuint32_t _unused_13:3;            /* Reserved */
    vuint32_t PFLIP2:5;                /* Parity Flip Pattern For Byte 2 */
    vuint32_t _unused_21:3;            /* Reserved */
    vuint32_t PFLIP3:5;                /* Parity Flip Pattern For Byte 3 (most significant) */
    vuint32_t _unused_29:3;            /* Reserved */
  } B;
} FLEXCAN_ERRIPPR_tag;

typedef union FLEXCAN_RERRAR_union_tag { /* Error Report Address register */
  vuint32_t R;
  struct {
    vuint32_t ERRADDR:14;              /* Address Where Error Detected */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t SAID:3;                  /* SAID */
    vuint32_t _unused_19:5;            /* Reserved */
    vuint32_t NCE:1;                   /* Non-Correctable Error */
    vuint32_t _unused_25:7;            /* Reserved */
  } B;
} FLEXCAN_RERRAR_tag;

typedef union FLEXCAN_RERRDR_union_tag { /* Error Report Data register */
  vuint32_t R;
  struct {
    vuint32_t RDATA:32;                /* Raw data word read from memory with error */
  } B;
} FLEXCAN_RERRDR_tag;

typedef union FLEXCAN_RERRSYNR_union_tag { /* Error Report Syndrome register */
  vuint32_t R;
  struct {
    vuint32_t SYND0:5;                 /* Error Syndrome For Byte 0 (least significant) */
    vuint32_t _unused_5:2;             /* Reserved */
    vuint32_t BE0:1;                   /* Byte Enabled For Byte 0 (least significant) */
    vuint32_t SYND1:5;                 /* Error Syndrome for Byte 1 */
    vuint32_t _unused_13:2;            /* Reserved */
    vuint32_t BE1:1;                   /* Byte Enabled For Byte 1 */
    vuint32_t SYND2:5;                 /* Error Syndrome For Byte 2 */
    vuint32_t _unused_21:2;            /* Reserved */
    vuint32_t BE2:1;                   /* Byte Enabled For Byte 2 */
    vuint32_t SYND3:5;                 /* Error Syndrome For Byte 3 (most significant) */
    vuint32_t _unused_29:2;            /* Reserved */
    vuint32_t BE3:1;                   /* Byte Enabled For Byte 3 (most significant) */
  } B;
} FLEXCAN_RERRSYNR_tag;

typedef union FLEXCAN_ERRSR_union_tag { /* Error Status register */
  vuint32_t R;
  struct {
    vuint32_t CEIOF:1;                 /* Correctable Error Interrupt Overrun Flag */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t FANCEIOF:1;              /* FlexCAN Access With Non-Correctable Error Interrupt Overrun Flag */
    vuint32_t HANCEIOF:1;              /* Host Access With Non-Correctable Error Interrupt Overrun Flag */
    vuint32_t _unused_4:12;            /* Reserved */
    vuint32_t CEIF:1;                  /* Correctable Error Interrupt Flag */
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t FANCEIF:1;               /* FlexCAN Access With Non-Correctable Error Interrupt Flag */
    vuint32_t HANCEIF:1;               /* Host Access With Non-Correctable Error Interrupt Flag */
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} FLEXCAN_ERRSR_tag;

typedef union FLEXCAN_EPRS_union_tag { /* Enhanced CAN Bit Timing Prescalers */
  vuint32_t R;
  struct {
    vuint32_t ENPRESDIV:10;            /* Extended Nominal Prescaler Division Factor */
    vuint32_t _unused_10:6;            /* Reserved. */
    vuint32_t EDPRESDIV:10;            /* Extended Data Phase Prescaler Division Factor */
    vuint32_t _unused_26:6;
  } B;
} FLEXCAN_EPRS_tag;

typedef union FLEXCAN_ENCBT_union_tag { /* Enhanced Nominal CAN Bit Timing */
  vuint32_t R;
  struct {
    vuint32_t NTSEG1:8;                /* Nominal Time Segment 1 */
    vuint32_t _unused_8:4;
    vuint32_t NTSEG2:7;                /* Nominal Time Segment 2 */
    vuint32_t _unused_19:3;
    vuint32_t NRJW:7;                  /* Nominal Resynchronization Jump Width */
    vuint32_t _unused_29:3;
  } B;
} FLEXCAN_ENCBT_tag;

typedef union FLEXCAN_EDCBT_union_tag { /* Enhanced Data Phase CAN bit Timing */
  vuint32_t R;
  struct {
    vuint32_t DTSEG1:5;                /* Data Phase Segment 1 */
    vuint32_t _unused_5:7;
    vuint32_t DTSEG2:4;                /* Data Phase Time Segment 2 */
    vuint32_t _unused_16:6;
    vuint32_t DRJW:4;                  /* Data Phase Resynchronization Jump Width */
    vuint32_t _unused_26:6;
  } B;
} FLEXCAN_EDCBT_tag;

typedef union FLEXCAN_ETDC_union_tag { /* Enhanced Transceiver Delay Compensation */
  vuint32_t R;
  struct {
    vuint32_t ETDCVAL:8;               /* Enhanced Transceiver Delay Compensation Value */
    vuint32_t _unused_8:7;
    vuint32_t ETDCFAIL:1;              /* Transceiver Delay Compensation Fail */
    vuint32_t ETDCOFF:7;               /* Enhanced Transceiver Delay Compensation Offset */
    vuint32_t _unused_23:7;
    vuint32_t TDMDIS:1;                /* Transceiver Delay Measurement Disable */
    vuint32_t ETDCEN:1;                /* Transceiver Delay Compensation Enable */
  } B;
} FLEXCAN_ETDC_tag;

typedef union FLEXCAN_FDCTRL_union_tag { /* CAN FD Control register */
  vuint32_t R;
  struct {
    vuint32_t TDCVAL:6;                /* Transceiver Delay Compensation Value */
    vuint32_t _unused_6:2;             /* Reserved */
    vuint32_t TDCOFF:5;                /* Transceiver Delay Compensation Offset */
    vuint32_t _unused_13:1;            /* Reserved */
    vuint32_t TDCFAIL:1;               /* Transceiver Delay Compensation Fail */
    vuint32_t TDCEN:1;                 /* Transceiver Delay Compensation Enable */
    vuint32_t MBDSR0:2;                /* Message Buffer Data Size for Region 0 */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t _unused_19:2;            /* Reserved */
    vuint32_t _unused_21:1;            /* Reserved */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t _unused_25:2;            /* Reserved */
    vuint32_t _unused_27:4;            /* Reserved */
    vuint32_t FDRATE:1;                /* Bit Rate Switch Enable */
  } B;
} FLEXCAN_FDCTRL_tag;

typedef union FLEXCAN_FDCBT_union_tag { /* CAN FD Bit Timing register */
  vuint32_t R;
  struct {
    vuint32_t FPSEG2:3;                /* Fast Phase Segment 2 */
    vuint32_t _unused_3:2;             /* Reserved */
    vuint32_t FPSEG1:3;                /* Fast Phase Segment 1 */
    vuint32_t _unused_8:2;             /* Reserved */
    vuint32_t FPROPSEG:5;              /* Fast Propagation Segment */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t FRJW:3;                  /* Fast Resync Jump Width */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t FPRESDIV:10;             /* Fast Prescaler Division Factor */
    vuint32_t _unused_30:2;            /* Reserved */
  } B;
} FLEXCAN_FDCBT_tag;

typedef union FLEXCAN_FDCRC_union_tag { /* CAN FD CRC register */
  vuint32_t R;
  struct {
    vuint32_t FD_TXCRC:21;             /* Extended Transmitted CRC value */
    vuint32_t _unused_21:3;            /* Reserved */
    vuint32_t FD_MBCRC:7;              /* CRC Mailbox Number for FD_TXCRC */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} FLEXCAN_FDCRC_tag;

typedef union FLEXCAN_HR_TIME_STAMP_union_tag { /* High Resolution Time Stamp */
  vuint32_t R;
  struct {
    vuint32_t TS:32;                   /* High Resolution Time Stamp */
  } B;
} FLEXCAN_HR_TIME_STAMP_tag;

struct FLEXCAN_tag {
  FLEXCAN_MCR_tag MCR;                 /* Module Configuration register */
  FLEXCAN_CTRL1_tag CTRL1;             /* Control 1 register */
  FLEXCAN_TIMER_tag TIMER;             /* Free Running Timer */
  uint8_t FLEXCAN_reserved0[4];
  FLEXCAN_RXMGMASK_tag RXMGMASK;       /* Rx Mailboxes Global Mask register */
  FLEXCAN_RX14MASK_tag RX14MASK;       /* Rx 14 Mask register */
  FLEXCAN_RX15MASK_tag RX15MASK;       /* Rx 15 Mask register */
  FLEXCAN_ECR_tag ECR;                 /* Error Counter */
  FLEXCAN_ESR1_tag ESR1;               /* Error and Status 1 register */
  uint8_t FLEXCAN_reserved1[4];
  FLEXCAN_IMASK1_tag IMASK1;           /* Interrupt Masks 1 register */
  uint8_t FLEXCAN_reserved2[4];
  FLEXCAN_IFLAG1_tag IFLAG1;           /* Interrupt Flags 1 register */
  FLEXCAN_CTRL2_tag CTRL2;             /* Control 2 register */
  FLEXCAN_ESR2_tag ESR2;               /* Error and Status 2 register */
  uint8_t FLEXCAN_reserved3[8];
  FLEXCAN_CRCR_tag CRCR;               /* CRC register */
  FLEXCAN_RXFGMASK_tag RXFGMASK;       /* Rx FIFO Global Mask register */
  FLEXCAN_RXFIR_tag RXFIR;             /* Rx FIFO Information register */
  FLEXCAN_CBT_tag CBT;                 /* CAN Bit Timing register */
  uint8_t FLEXCAN_reserved4[44];
  FLEXCAN_MB_tag MB[32];
  uint8_t FLEXCAN_reserved5[1536];
  FLEXCAN_RXIMR_tag RXIMR[32];         /* Rx Individual Mask registers */
  uint8_t FLEXCAN_reserved6[480];
  FLEXCAN_MECR_tag MECR;               /* Memory Error Control register */
  FLEXCAN_ERRIAR_tag ERRIAR;           /* Error Injection Address register */
  FLEXCAN_ERRIDPR_tag ERRIDPR;         /* Error Injection Data Pattern register */
  FLEXCAN_ERRIPPR_tag ERRIPPR;         /* Error Injection Parity Pattern register */
  FLEXCAN_RERRAR_tag RERRAR;           /* Error Report Address register */
  FLEXCAN_RERRDR_tag RERRDR;           /* Error Report Data register */
  FLEXCAN_RERRSYNR_tag RERRSYNR;       /* Error Report Syndrome register */
  FLEXCAN_ERRSR_tag ERRSR;             /* Error Status register */
  uint8_t FLEXCAN_reserved7[240];
  FLEXCAN_EPRS_tag EPRS;               /* Enhanced CAN Bit Timing Prescalers */
  FLEXCAN_ENCBT_tag ENCBT;             /* Enhanced Nominal CAN Bit Timing */
  FLEXCAN_EDCBT_tag EDCBT;             /* Enhanced Data Phase CAN bit Timing */
  FLEXCAN_ETDC_tag ETDC;               /* Enhanced Transceiver Delay Compensation */
  FLEXCAN_FDCTRL_tag FDCTRL;           /* CAN FD Control register */
  FLEXCAN_FDCBT_tag FDCBT;             /* CAN FD Bit Timing register */
  FLEXCAN_FDCRC_tag FDCRC;             /* CAN FD CRC register */
  uint8_t FLEXCAN_reserved8[36];
  FLEXCAN_HR_TIME_STAMP_tag HR_TIME_STAMP[32]; /* High Resolution Time Stamp */
};


/* ============================================================================
   =============================== Module: FLEXIO =============================
   ============================================================================ */

typedef union FLEXIO_VERID_union_tag { /* Version ID Register */
  vuint32_t R;
  struct {
    vuint32_t FEATURE:16;              /* Feature Specification Number */
    vuint32_t MINOR:8;                 /* Minor Version Number */
    vuint32_t MAJOR:8;                 /* Major Version Number */
  } B;
} FLEXIO_VERID_tag;

typedef union FLEXIO_PARAM_union_tag { /* Parameter Register */
  vuint32_t R;
  struct {
    vuint32_t SHIFTER:8;               /* Shifter Number */
    vuint32_t TIMER:8;                 /* Timer Number */
    vuint32_t PIN:8;                   /* Pin Number */
    vuint32_t TRIGGER:8;               /* Trigger Number */
  } B;
} FLEXIO_PARAM_tag;

typedef union FLEXIO_CTRL_union_tag {  /* FlexIO Control Register */
  vuint32_t R;
  struct {
    vuint32_t FLEXEN:1;                /* FlexIO Enable */
    vuint32_t SWRST:1;                 /* Software Reset */
    vuint32_t FASTACC:1;               /* Fast Access */
    vuint32_t _unused_3:27;
    vuint32_t DBGE:1;                  /* Debug Enable */
    vuint32_t _unused_31:1;            /* Any write value to this bit must be zero. */
  } B;
} FLEXIO_CTRL_tag;

typedef union FLEXIO_PIN_union_tag {   /* Pin State Register */
  vuint32_t R;
  struct {
    vuint32_t PDI:32;                  /* Pin Data Input */
  } B;
} FLEXIO_PIN_tag;

typedef union FLEXIO_SHIFTSTAT_union_tag { /* Shifter Status Register */
  vuint32_t R;
  struct {
    vuint32_t SSF:8;                   /* Shifter Status Flag */
    vuint32_t _unused_8:24;
  } B;
} FLEXIO_SHIFTSTAT_tag;

typedef union FLEXIO_SHIFTERR_union_tag { /* Shifter Error Register */
  vuint32_t R;
  struct {
    vuint32_t SEF:8;                   /* Shifter Error Flags */
    vuint32_t _unused_8:24;
  } B;
} FLEXIO_SHIFTERR_tag;

typedef union FLEXIO_TIMSTAT_union_tag { /* Timer Status Register */
  vuint32_t R;
  struct {
    vuint32_t TSF:8;                   /* Timer Status Flags */
    vuint32_t _unused_8:24;
  } B;
} FLEXIO_TIMSTAT_tag;

typedef union FLEXIO_SHIFTSIEN_union_tag { /* Shifter Status Interrupt Enable */
  vuint32_t R;
  struct {
    vuint32_t SSIE:8;                  /* Shifter Status Interrupt Enable */
    vuint32_t _unused_8:24;
  } B;
} FLEXIO_SHIFTSIEN_tag;

typedef union FLEXIO_SHIFTEIEN_union_tag { /* Shifter Error Interrupt Enable */
  vuint32_t R;
  struct {
    vuint32_t SEIE:8;                  /* Shifter Error Interrupt Enable */
    vuint32_t _unused_8:24;
  } B;
} FLEXIO_SHIFTEIEN_tag;

typedef union FLEXIO_TIMIEN_union_tag { /* Timer Interrupt Enable Register */
  vuint32_t R;
  struct {
    vuint32_t TEIE:8;                  /* Timer Status Interrupt Enable */
    vuint32_t _unused_8:24;
  } B;
} FLEXIO_TIMIEN_tag;

typedef union FLEXIO_SHIFTSDEN_union_tag { /* Shifter Status DMA Enable */
  vuint32_t R;
  struct {
    vuint32_t SSDE:8;                  /* Shifter Status DMA Enable */
    vuint32_t _unused_8:24;
  } B;
} FLEXIO_SHIFTSDEN_tag;

typedef union FLEXIO_TIMERSDEN_union_tag { /* Timer Status DMA Enable */
  vuint32_t R;
  struct {
    vuint32_t TSDE:8;                  /* Timer Status DMA Enable */
    vuint32_t _unused_8:24;
  } B;
} FLEXIO_TIMERSDEN_tag;

typedef union FLEXIO_SHIFTSTATE_union_tag { /* Shifter State Register */
  vuint32_t R;
  struct {
    vuint32_t STATE:3;                 /* Current State Pointer */
    vuint32_t _unused_3:29;
  } B;
} FLEXIO_SHIFTSTATE_tag;

typedef union FLEXIO_TRGSTAT_union_tag { /* Trigger Status Register */
  vuint32_t R;
  struct {
    vuint32_t ETSF:4;                  /* External Trigger Status Flags */
    vuint32_t _unused_4:28;
  } B;
} FLEXIO_TRGSTAT_tag;

typedef union FLEXIO_TRIGIEN_union_tag { /* External Trigger Interrupt Enable Register */
  vuint32_t R;
  struct {
    vuint32_t TRIE:4;                  /* External Trigger Interrupt Enable */
    vuint32_t _unused_4:28;
  } B;
} FLEXIO_TRIGIEN_tag;

typedef union FLEXIO_PINSTAT_union_tag { /* Pin Status Register */
  vuint32_t R;
  struct {
    vuint32_t PSF:32;                  /* Pin Status Flags */
  } B;
} FLEXIO_PINSTAT_tag;

typedef union FLEXIO_PINIEN_union_tag { /* Pin Interrupt Enable Register */
  vuint32_t R;
  struct {
    vuint32_t PSIE:32;                 /* Pin Status Interrupt Enable */
  } B;
} FLEXIO_PINIEN_tag;

typedef union FLEXIO_PINREN_union_tag { /* Pin Rising Edge Enable Register */
  vuint32_t R;
  struct {
    vuint32_t PRE:32;                  /* Pin Rising Edge */
  } B;
} FLEXIO_PINREN_tag;

typedef union FLEXIO_PINFEN_union_tag { /* Pin Falling Edge Enable Register */
  vuint32_t R;
  struct {
    vuint32_t PFE:32;                  /* Pin Falling Edge */
  } B;
} FLEXIO_PINFEN_tag;

typedef union FLEXIO_PINOUTD_union_tag { /* Pin Output Data Register */
  vuint32_t R;
  struct {
    vuint32_t OUTD:32;                 /* Output Data */
  } B;
} FLEXIO_PINOUTD_tag;

typedef union FLEXIO_PINOUTE_union_tag { /* Pin Output Enable Register */
  vuint32_t R;
  struct {
    vuint32_t OUTE:32;                 /* Output Enable */
  } B;
} FLEXIO_PINOUTE_tag;

typedef union FLEXIO_PINOUTDIS_union_tag { /* Pin Output Disable Register */
  vuint32_t R;
  struct {
    vuint32_t OUTDIS:32;               /* Output Disable */
  } B;
} FLEXIO_PINOUTDIS_tag;

typedef union FLEXIO_PINOUTCLR_union_tag { /* Pin Output Clear Register */
  vuint32_t R;
  struct {
    vuint32_t OUTCLR:32;               /* Output Clear */
  } B;
} FLEXIO_PINOUTCLR_tag;

typedef union FLEXIO_PINOUTSET_union_tag { /* Pin Output Set Register */
  vuint32_t R;
  struct {
    vuint32_t OUTSET:32;               /* Output Set */
  } B;
} FLEXIO_PINOUTSET_tag;

typedef union FLEXIO_PINOUTTOG_union_tag { /* Pin Output Toggle Register */
  vuint32_t R;
  struct {
    vuint32_t OUTTOG:32;               /* Output Toggle */
  } B;
} FLEXIO_PINOUTTOG_tag;

typedef union FLEXIO_SHIFTCTL_union_tag { /* Shifter Control N Register */
  vuint32_t R;
  struct {
    vuint32_t SMOD:3;                  /* Shifter Mode */
    vuint32_t _unused_3:4;
    vuint32_t PINPOL:1;                /* Shifter Pin Polarity */
    vuint32_t PINSEL:5;                /* Shifter Pin Select */
    vuint32_t _unused_13:3;
    vuint32_t PINCFG:2;                /* Shifter Pin Configuration */
    vuint32_t _unused_18:5;
    vuint32_t TIMPOL:1;                /* Timer Polarity */
    vuint32_t TIMSEL:3;                /* Timer Select */
    vuint32_t _unused_27:5;
  } B;
} FLEXIO_SHIFTCTL_tag;

typedef union FLEXIO_SHIFTCFG_union_tag { /* Shifter Configuration N Register */
  vuint32_t R;
  struct {
    vuint32_t SSTART:2;                /* Shifter Start bit */
    vuint32_t _unused_2:2;
    vuint32_t SSTOP:2;                 /* Shifter Stop bit */
    vuint32_t _unused_6:1;
    vuint32_t _unused_7:1;
    vuint32_t INSRC:1;                 /* Input Source */
    vuint32_t LATST:1;                 /* Late Store */
    vuint32_t _unused_10:2;
    vuint32_t SSIZE:1;                 /* Shifter Size */
    vuint32_t _unused_13:3;
    vuint32_t PWIDTH:5;                /* Parallel Width */
    vuint32_t _unused_21:11;
  } B;
} FLEXIO_SHIFTCFG_tag;

typedef union FLEXIO_SHIFTBUF_union_tag { /* Shifter Buffer N Register */
  vuint32_t R;
  struct {
    vuint32_t SHIFTBUF:32;             /* Shift Buffer */
  } B;
} FLEXIO_SHIFTBUF_tag;

typedef union FLEXIO_SHIFTBUFBIS_union_tag { /* Shifter Buffer N Bit Swapped Register */
  vuint32_t R;
  struct {
    vuint32_t SHIFTBUFBIS:32;          /* Shift Buffer */
  } B;
} FLEXIO_SHIFTBUFBIS_tag;

typedef union FLEXIO_SHIFTBUFBYS_union_tag { /* Shifter Buffer N Byte Swapped Register */
  vuint32_t R;
  struct {
    vuint32_t SHIFTBUFBYS:32;          /* Shift Buffer */
  } B;
} FLEXIO_SHIFTBUFBYS_tag;

typedef union FLEXIO_SHIFTBUFBBS_union_tag { /* Shifter Buffer N Bit Byte Swapped Register */
  vuint32_t R;
  struct {
    vuint32_t SHIFTBUFBBS:32;          /* Shift Buffer */
  } B;
} FLEXIO_SHIFTBUFBBS_tag;

typedef union FLEXIO_TIMCTL_union_tag { /* Timer Control N Register */
  vuint32_t R;
  struct {
    vuint32_t TIMOD:3;                 /* Timer Mode */
    vuint32_t _unused_3:2;
    vuint32_t ONETIM:1;                /* Timer One Time Operation */
    vuint32_t PININS:1;                /* Timer Pin Input Select */
    vuint32_t PINPOL:1;                /* Timer Pin Polarity */
    vuint32_t PINSEL:5;                /* Timer Pin Select */
    vuint32_t _unused_13:3;
    vuint32_t PINCFG:2;                /* Timer Pin Configuration */
    vuint32_t _unused_18:4;
    vuint32_t TRGSRC:1;                /* Trigger Source */
    vuint32_t TRGPOL:1;                /* Trigger Polarity */
    vuint32_t TRGSEL:6;                /* Trigger Select */
    vuint32_t _unused_30:2;
  } B;
} FLEXIO_TIMCTL_tag;

typedef union FLEXIO_TIMCFG_union_tag { /* Timer Configuration N Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;
    vuint32_t TSTART:1;                /* Timer Start Bit */
    vuint32_t _unused_2:2;
    vuint32_t TSTOP:2;                 /* Timer Stop Bit */
    vuint32_t _unused_6:2;
    vuint32_t TIMENA:3;                /* Timer Enable */
    vuint32_t _unused_11:1;
    vuint32_t TIMDIS:3;                /* Timer Disable */
    vuint32_t _unused_15:1;
    vuint32_t TIMRST:3;                /* Timer Reset */
    vuint32_t _unused_19:1;
    vuint32_t TIMDEC:3;                /* Timer Decrement */
    vuint32_t _unused_23:1;
    vuint32_t TIMOUT:2;                /* Timer Output */
    vuint32_t _unused_26:6;
  } B;
} FLEXIO_TIMCFG_tag;

typedef union FLEXIO_TIMCMP_union_tag { /* Timer Compare N Register */
  vuint32_t R;
  struct {
    vuint32_t CMP:16;                  /* Timer Compare Value */
    vuint32_t _unused_16:16;
  } B;
} FLEXIO_TIMCMP_tag;

typedef union FLEXIO_SHIFTBUFNBS_union_tag { /* Shifter Buffer N Nibble Byte Swapped Register */
  vuint32_t R;
  struct {
    vuint32_t SHIFTBUFNBS:32;          /* Shift Buffer */
  } B;
} FLEXIO_SHIFTBUFNBS_tag;

typedef union FLEXIO_SHIFTBUFHWS_union_tag { /* Shifter Buffer N Half Word Swapped Register */
  vuint32_t R;
  struct {
    vuint32_t SHIFTBUFHWS:32;          /* Shift Buffer */
  } B;
} FLEXIO_SHIFTBUFHWS_tag;

typedef union FLEXIO_SHIFTBUFNIS_union_tag { /* Shifter Buffer N Nibble Swapped Register */
  vuint32_t R;
  struct {
    vuint32_t SHIFTBUFNIS:32;          /* Shift Buffer */
  } B;
} FLEXIO_SHIFTBUFNIS_tag;

typedef union FLEXIO_SHIFTBUFOES_union_tag { /* Shifter Buffer N Odd Even Swapped Register */
  vuint32_t R;
  struct {
    vuint32_t SHIFTBUFOES:32;          /* Shift Buffer */
  } B;
} FLEXIO_SHIFTBUFOES_tag;

typedef union FLEXIO_SHIFTBUFEOS_union_tag { /* Shifter Buffer N Even Odd Swapped Register */
  vuint32_t R;
  struct {
    vuint32_t SHIFTBUFEOS:32;          /* Shift Buffer */
  } B;
} FLEXIO_SHIFTBUFEOS_tag;

typedef union FLEXIO_SHIFTBUFHBS_union_tag { /* Shifter Buffer N Halfword Byte Swapped Register */
  vuint32_t R;
  struct {
    vuint32_t SHIFTBUFHBS:32;          /* Shift Buffer */
  } B;
} FLEXIO_SHIFTBUFHBS_tag;

struct FLEXIO_tag {
  FLEXIO_VERID_tag VERID;              /* Version ID Register */
  FLEXIO_PARAM_tag PARAM;              /* Parameter Register */
  FLEXIO_CTRL_tag CTRL;                /* FlexIO Control Register */
  FLEXIO_PIN_tag PIN;                  /* Pin State Register */
  FLEXIO_SHIFTSTAT_tag SHIFTSTAT;      /* Shifter Status Register */
  FLEXIO_SHIFTERR_tag SHIFTERR;        /* Shifter Error Register */
  FLEXIO_TIMSTAT_tag TIMSTAT;          /* Timer Status Register */
  uint8_t FLEXIO_reserved0[4];
  FLEXIO_SHIFTSIEN_tag SHIFTSIEN;      /* Shifter Status Interrupt Enable */
  FLEXIO_SHIFTEIEN_tag SHIFTEIEN;      /* Shifter Error Interrupt Enable */
  FLEXIO_TIMIEN_tag TIMIEN;            /* Timer Interrupt Enable Register */
  uint8_t FLEXIO_reserved1[4];
  FLEXIO_SHIFTSDEN_tag SHIFTSDEN;      /* Shifter Status DMA Enable */
  uint8_t FLEXIO_reserved2[4];
  FLEXIO_TIMERSDEN_tag TIMERSDEN;      /* Timer Status DMA Enable */
  uint8_t FLEXIO_reserved3[4];
  FLEXIO_SHIFTSTATE_tag SHIFTSTATE;    /* Shifter State Register */
  uint8_t FLEXIO_reserved4[4];
  FLEXIO_TRGSTAT_tag TRGSTAT;          /* Trigger Status Register */
  FLEXIO_TRIGIEN_tag TRIGIEN;          /* External Trigger Interrupt Enable Register */
  FLEXIO_PINSTAT_tag PINSTAT;          /* Pin Status Register */
  FLEXIO_PINIEN_tag PINIEN;            /* Pin Interrupt Enable Register */
  FLEXIO_PINREN_tag PINREN;            /* Pin Rising Edge Enable Register */
  FLEXIO_PINFEN_tag PINFEN;            /* Pin Falling Edge Enable Register */
  FLEXIO_PINOUTD_tag PINOUTD;          /* Pin Output Data Register */
  FLEXIO_PINOUTE_tag PINOUTE;          /* Pin Output Enable Register */
  FLEXIO_PINOUTDIS_tag PINOUTDIS;      /* Pin Output Disable Register */
  FLEXIO_PINOUTCLR_tag PINOUTCLR;      /* Pin Output Clear Register */
  FLEXIO_PINOUTSET_tag PINOUTSET;      /* Pin Output Set Register */
  FLEXIO_PINOUTTOG_tag PINOUTTOG;      /* Pin Output Toggle Register */
  uint8_t FLEXIO_reserved5[8];
  FLEXIO_SHIFTCTL_tag SHIFTCTL[8];     /* Shifter Control N Register */
  uint8_t FLEXIO_reserved6[96];
  FLEXIO_SHIFTCFG_tag SHIFTCFG[8];     /* Shifter Configuration N Register */
  uint8_t FLEXIO_reserved7[224];
  FLEXIO_SHIFTBUF_tag SHIFTBUF[8];     /* Shifter Buffer N Register */
  uint8_t FLEXIO_reserved8[96];
  FLEXIO_SHIFTBUFBIS_tag SHIFTBUFBIS[8]; /* Shifter Buffer N Bit Swapped Register */
  uint8_t FLEXIO_reserved9[96];
  FLEXIO_SHIFTBUFBYS_tag SHIFTBUFBYS[8]; /* Shifter Buffer N Byte Swapped Register */
  uint8_t FLEXIO_reserved10[96];
  FLEXIO_SHIFTBUFBBS_tag SHIFTBUFBBS[8]; /* Shifter Buffer N Bit Byte Swapped Register */
  uint8_t FLEXIO_reserved11[96];
  FLEXIO_TIMCTL_tag TIMCTL[8];         /* Timer Control N Register */
  uint8_t FLEXIO_reserved12[96];
  FLEXIO_TIMCFG_tag TIMCFG[8];         /* Timer Configuration N Register */
  uint8_t FLEXIO_reserved13[96];
  FLEXIO_TIMCMP_tag TIMCMP[8];         /* Timer Compare N Register */
  uint8_t FLEXIO_reserved14[352];
  FLEXIO_SHIFTBUFNBS_tag SHIFTBUFNBS[8]; /* Shifter Buffer N Nibble Byte Swapped Register */
  uint8_t FLEXIO_reserved15[96];
  FLEXIO_SHIFTBUFHWS_tag SHIFTBUFHWS[8]; /* Shifter Buffer N Half Word Swapped Register */
  uint8_t FLEXIO_reserved16[96];
  FLEXIO_SHIFTBUFNIS_tag SHIFTBUFNIS[8]; /* Shifter Buffer N Nibble Swapped Register */
  uint8_t FLEXIO_reserved17[96];
  FLEXIO_SHIFTBUFOES_tag SHIFTBUFOES[8]; /* Shifter Buffer N Odd Even Swapped Register */
  uint8_t FLEXIO_reserved18[96];
  FLEXIO_SHIFTBUFEOS_tag SHIFTBUFEOS[8]; /* Shifter Buffer N Even Odd Swapped Register */
  uint8_t FLEXIO_reserved19[96];
  FLEXIO_SHIFTBUFHBS_tag SHIFTBUFHBS[8]; /* Shifter Buffer N Halfword Byte Swapped Register */
};


/* ============================================================================
   =============================== Module: FXOSC ==============================
   ============================================================================ */

typedef union FXOSC_CTRL_union_tag {   /* FXOSC Control Register */
  vuint32_t R;
  struct {
    vuint32_t OSCON:1;                 /* Crystal oscillator power-down control */
    vuint32_t _unused_1:1;
    vuint32_t _unused_2:1;
    vuint32_t _unused_3:1;
    vuint32_t GM_SEL:4;                /* Crystal overdrive protection */
    vuint32_t _unused_8:8;
    vuint32_t EOCV:8;                  /* End of count value */
    vuint32_t COMP_EN:1;               /* Comparator enable */
    vuint32_t _unused_25:1;
    vuint32_t _unused_26:4;
    vuint32_t _unused_30:1;
    vuint32_t OSC_BYP:1;               /* Oscillator bypass */
  } B;
} FXOSC_CTRL_tag;

typedef union FXOSC_STAT_union_tag {   /* Oscillator Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;
    vuint32_t OSC_STAT:1;              /* Crystal oscillator status */
  } B;
} FXOSC_STAT_tag;

struct FXOSC_tag {
  FXOSC_CTRL_tag CTRL;                 /* FXOSC Control Register */
  FXOSC_STAT_tag STAT;                 /* Oscillator Status Register */
};


/* ============================================================================
   =============================== Module: FlexCAN_0 ==========================
   ============================================================================ */

typedef union FlexCAN_0_MCR_union_tag { /* Module Configuration register */
  vuint32_t R;
  struct {
    vuint32_t MAXMB:7;                 /* Number Of The Last Message Buffer */
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t IDAM:2;                  /* ID Acceptance Mode */
    vuint32_t _unused_10:1;            /* Reserved */
    vuint32_t FDEN:1;                  /* CAN FD operation enable */
    vuint32_t AEN:1;                   /* Abort Enable */
    vuint32_t LPRIOEN:1;               /* Local Priority Enable */
    vuint32_t _unused_14:1;            /* Reserved */
    vuint32_t DMA:1;                   /* DMA Enable */
    vuint32_t IRMQ:1;                  /* Individual Rx Masking And Queue Enable */
    vuint32_t SRXDIS:1;                /* Self Reception Disable */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t LPMACK:1;                /* Low-Power Mode Acknowledge */
    vuint32_t WRNEN:1;                 /* Warning Interrupt Enable */
    vuint32_t _unused_22:1;            /* Reserved */
    vuint32_t SUPV:1;                  /* Supervisor Mode */
    vuint32_t FRZACK:1;                /* Freeze Mode Acknowledge */
    vuint32_t SOFTRST:1;               /* Soft Reset */
    vuint32_t _unused_26:1;            /* Reserved */
    vuint32_t NOTRDY:1;                /* FlexCAN Not Ready */
    vuint32_t HALT:1;                  /* Halt FlexCAN */
    vuint32_t RFEN:1;                  /* Legacy Rx FIFO Enable */
    vuint32_t FRZ:1;                   /* Freeze Enable */
    vuint32_t MDIS:1;                  /* Module Disable */
  } B;
} FlexCAN_0_MCR_tag;

typedef union FlexCAN_0_CTRL1_union_tag { /* Control 1 register */
  vuint32_t R;
  struct {
    vuint32_t PROPSEG:3;               /* Propagation Segment */
    vuint32_t LOM:1;                   /* Listen-Only Mode */
    vuint32_t LBUF:1;                  /* Lowest Buffer Transmitted First */
    vuint32_t TSYN:1;                  /* Timer Sync */
    vuint32_t BOFFREC:1;               /* Bus Off Recovery */
    vuint32_t SMP:1;                   /* CAN Bit Sampling */
    vuint32_t _unused_8:1;             /* Reserved */
    vuint32_t _unused_9:1;             /* Reserved */
    vuint32_t RWRNMSK:1;               /* Rx Warning Interrupt Mask */
    vuint32_t TWRNMSK:1;               /* Tx Warning Interrupt Mask */
    vuint32_t LPB:1;                   /* Loop Back Mode */
    vuint32_t _unused_13:1;            /* Reserved */
    vuint32_t ERRMSK:1;                /* Error Interrupt Mask */
    vuint32_t BOFFMSK:1;               /* Bus Off Interrupt Mask */
    vuint32_t PSEG2:3;                 /* Phase Segment 2 */
    vuint32_t PSEG1:3;                 /* Phase Segment 1 */
    vuint32_t RJW:2;                   /* Resync Jump Width */
    vuint32_t PRESDIV:8;               /* Prescaler Division Factor */
  } B;
} FlexCAN_0_CTRL1_tag;

typedef union FlexCAN_0_TIMER_union_tag { /* Free Running Timer */
  vuint32_t R;
  struct {
    vuint32_t TIMER:16;                /* Timer Value */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} FlexCAN_0_TIMER_tag;

typedef union FlexCAN_0_RXMGMASK_union_tag { /* Rx Mailboxes Global Mask register */
  vuint32_t R;
  struct {
    vuint32_t MG:32;                   /* Rx Mailboxes Global Mask Bits */
  } B;
} FlexCAN_0_RXMGMASK_tag;

typedef union FlexCAN_0_RX14MASK_union_tag { /* Rx 14 Mask register */
  vuint32_t R;
  struct {
    vuint32_t RX14M:32;                /* Rx Buffer 14 Mask Bits */
  } B;
} FlexCAN_0_RX14MASK_tag;

typedef union FlexCAN_0_RX15MASK_union_tag { /* Rx 15 Mask register */
  vuint32_t R;
  struct {
    vuint32_t RX15M:32;                /* Rx Buffer 15 Mask Bits */
  } B;
} FlexCAN_0_RX15MASK_tag;

typedef union FlexCAN_0_ECR_union_tag { /* Error Counter */
  vuint32_t R;
  struct {
    vuint32_t TXERRCNT:8;              /* Transmit Error Counter */
    vuint32_t RXERRCNT:8;              /* Receive Error Counter */
    vuint32_t TXERRCNT_FAST:8;         /* Transmit Error Counter for fast bits */
    vuint32_t RXERRCNT_FAST:8;         /* Receive Error Counter for fast bits */
  } B;
} FlexCAN_0_ECR_tag;

typedef union FlexCAN_0_ESR1_union_tag { /* Error and Status 1 register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t ERRINT:1;                /* Error Interrupt */
    vuint32_t BOFFINT:1;               /* Bus Off Interrupt */
    vuint32_t RX:1;                    /* FlexCAN In Reception */
    vuint32_t FLTCONF:2;               /* Fault Confinement State */
    vuint32_t TX:1;                    /* FlexCAN In Transmission */
    vuint32_t IDLE:1;                  /* IDLE */
    vuint32_t RXWRN:1;                 /* Rx Error Warning */
    vuint32_t TXWRN:1;                 /* TX Error Warning */
    vuint32_t STFERR:1;                /* Stuffing Error */
    vuint32_t FRMERR:1;                /* Form Error */
    vuint32_t CRCERR:1;                /* Cyclic Redundancy Check Error */
    vuint32_t ACKERR:1;                /* Acknowledge Error */
    vuint32_t BIT0ERR:1;               /* Bit0 Error */
    vuint32_t BIT1ERR:1;               /* Bit1 Error */
    vuint32_t RWRNINT:1;               /* Rx Warning Interrupt Flag */
    vuint32_t TWRNINT:1;               /* Tx Warning Interrupt Flag */
    vuint32_t SYNCH:1;                 /* CAN Synchronization Status */
    vuint32_t BOFFDONEINT:1;           /* Bus Off Done Interrupt */
    vuint32_t ERRINT_FAST:1;           /* Error interrupt for errors detected in Data Phase of CAN FD frames with BRS bit set */
    vuint32_t ERROVR:1;                /* Error Overrun */
    vuint32_t _unused_22:4;            /* Reserved */
    vuint32_t STFERR_FAST:1;           /* Stuffing Error in the Data Phase of CAN FD frames with the BRS bit set */
    vuint32_t FRMERR_FAST:1;           /* Form Error in the Data Phase of CAN FD frames with the BRS bit set */
    vuint32_t CRCERR_FAST:1;           /* Cyclic Redundancy Check Error in the CRC field of CAN FD frames with the BRS bit set */
    vuint32_t _unused_29:1;            /* Reserved */
    vuint32_t BIT0ERR_FAST:1;          /* Bit0 Error in the Data Phase of CAN FD frames with the BRS bit set */
    vuint32_t BIT1ERR_FAST:1;          /* Bit1 Error in the Data Phase of CAN FD frames with the BRS bit set */
  } B;
} FlexCAN_0_ESR1_tag;

typedef union FlexCAN_0_IMASK2_union_tag { /* Interrupt Masks 2 register */
  vuint32_t R;
  struct {
    vuint32_t BUF63TO32M:32;           /* Buffer MBi Mask */
  } B;
} FlexCAN_0_IMASK2_tag;

typedef union FlexCAN_0_IMASK1_union_tag { /* Interrupt Masks 1 register */
  vuint32_t R;
  struct {
    vuint32_t BUF31TO0M:32;            /* Buffer MBi Mask */
  } B;
} FlexCAN_0_IMASK1_tag;

typedef union FlexCAN_0_IFLAG2_union_tag { /* Interrupt Flags 2 register */
  vuint32_t R;
  struct {
    vuint32_t BUF63TO32I:32;           /* Buffer MBi Interrupt */
  } B;
} FlexCAN_0_IFLAG2_tag;

typedef union FlexCAN_0_IFLAG1_union_tag { /* Interrupt Flags 1 register */
  vuint32_t R;
  struct {
    vuint32_t BUF0I:1;                 /* Buffer MB0 Interrupt Or Clear Legacy FIFO bit */
    vuint32_t BUF4TO1I:4;              /* Buffer MBi Interrupt Or Reserved */
    vuint32_t BUF5I:1;                 /* Buffer MB5 Interrupt Or Frames available in Legacy Rx FIFO */
    vuint32_t BUF6I:1;                 /* Buffer MB6 Interrupt Or Legacy Rx FIFO Warning */
    vuint32_t BUF7I:1;                 /* Buffer MB7 Interrupt Or Legacy Rx FIFO Overflow */
    vuint32_t BUF31TO8I:24;            /* Buffer MBi Interrupt */
  } B;
} FlexCAN_0_IFLAG1_tag;

typedef union FlexCAN_0_CTRL2_union_tag { /* Control 2 register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:6;             /* Reserved */
    vuint32_t TSTAMPCAP:2;             /* Time Stamp Capture Point */
    vuint32_t MBTSBASE:2;              /* Message Buffer Time Stamp Base */
    vuint32_t _unused_10:1;            /* Reserved */
    vuint32_t EDFLTDIS:1;              /* Edge Filter Disable */
    vuint32_t ISOCANFDEN:1;            /* ISO CAN FD Enable */
    vuint32_t BTE:1;                   /* Bit Timing Expansion enable */
    vuint32_t PREXCEN:1;               /* Protocol Exception Enable */
    vuint32_t TIMER_SRC:1;             /* Timer Source */
    vuint32_t EACEN:1;                 /* Entire Frame Arbitration Field Comparison Enable For Rx Mailboxes */
    vuint32_t RRS:1;                   /* Remote Request Storing */
    vuint32_t MRP:1;                   /* Mailboxes Reception Priority */
    vuint32_t TASD:5;                  /* Tx Arbitration Start Delay */
    vuint32_t RFFN:4;                  /* Number Of Legacy Rx FIFO Filters */
    vuint32_t WRMFRZ:1;                /* Write-Access To Memory In Freeze Mode */
    vuint32_t ECRWRE:1;                /* Error-correction Configuration Register Write Enable */
    vuint32_t BOFFDONEMSK:1;           /* Bus Off Done Interrupt Mask */
    vuint32_t ERRMSK_FAST:1;           /* Error Interrupt Mask for errors detected in the data phase of fast CAN FD frames */
  } B;
} FlexCAN_0_CTRL2_tag;

typedef union FlexCAN_0_ESR2_union_tag { /* Error and Status 2 register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:13;            /* Reserved */
    vuint32_t IMB:1;                   /* Inactive Mailbox */
    vuint32_t VPS:1;                   /* Valid Priority Status */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t LPTM:7;                  /* Lowest Priority Tx Mailbox */
    vuint32_t _unused_23:9;            /* Reserved */
  } B;
} FlexCAN_0_ESR2_tag;

typedef union FlexCAN_0_CRCR_union_tag { /* CRC register */
  vuint32_t R;
  struct {
    vuint32_t TXCRC:15;                /* Transmitted CRC value */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t MBCRC:7;                 /* CRC Mailbox */
    vuint32_t _unused_23:9;            /* Reserved */
  } B;
} FlexCAN_0_CRCR_tag;

typedef union FlexCAN_0_RXFGMASK_union_tag { /* Legacy Rx FIFO Global Mask register */
  vuint32_t R;
  struct {
    vuint32_t FGM:32;                  /* Legacy Rx FIFO Global Mask Bits */
  } B;
} FlexCAN_0_RXFGMASK_tag;

typedef union FlexCAN_0_RXFIR_union_tag { /* Legacy Rx FIFO Information register */
  vuint32_t R;
  struct {
    vuint32_t IDHIT:9;                 /* Identifier Acceptance Filter Hit Indicator */
    vuint32_t _unused_9:23;            /* Reserved */
  } B;
} FlexCAN_0_RXFIR_tag;

typedef union FlexCAN_0_CBT_union_tag { /* CAN Bit Timing register */
  vuint32_t R;
  struct {
    vuint32_t EPSEG2:5;                /* Extended Phase Segment 2 */
    vuint32_t EPSEG1:5;                /* Extended Phase Segment 1 */
    vuint32_t EPROPSEG:6;              /* Extended Propagation Segment */
    vuint32_t ERJW:5;                  /* Extended Resync Jump Width */
    vuint32_t EPRESDIV:10;             /* Extended Prescaler Division Factor */
    vuint32_t BTF:1;                   /* Bit Timing Format Enable */
  } B;
} FlexCAN_0_CBT_tag;

typedef union FlexCAN_0_IMASK3_union_tag { /* Interrupt Masks 3 register */
  vuint32_t R;
  struct {
    vuint32_t BUF95TO64M:32;           /* Buffer MBi Mask */
  } B;
} FlexCAN_0_IMASK3_tag;

typedef union FlexCAN_0_IFLAG3_union_tag { /* Interrupt Flags 3 register */
  vuint32_t R;
  struct {
    vuint32_t BUF95TO64:32;            /* Buffer MBi Interrupt */
  } B;
} FlexCAN_0_IFLAG3_tag;

typedef union FlexCAN_0_MB_CS_union_tag { /* Message Buffer 0 CS Register */
  vuint32_t R;
  struct {
    vuint32_t TIMESTAMP:16;            /* Free-Running Counter Time stamp. This 16-bit field is a copy of the Free-Running Timer, captured for Tx and Rx frames at the time when the beginning of the Identifier field appears on the CAN bus. */
	vuint32_t DLC:4;                   /* Length of the data to be stored/transmitted. */
	vuint32_t RTR:1;                   /* Remote Transmission Request. One/zero for remote/data frame. */
	vuint32_t IDE:1;                   /* ID Extended. One/zero for extended/standard format frame. */
	vuint32_t SRR:1;                   /* Substitute Remote Request. Contains a fixed recessive bit. */
    vuint32_t _unused_23:1;
    vuint32_t CODE:4;                  /* Message Buffer Code */
    vuint32_t _unused_28:1;
	vuint32_t ESI:1;                   /*  Error State Indicator */
	vuint32_t BRS:1;                   /* Bit Rate Switch */
    vuint32_t EDL:1;                   /* Extended Data Length */
  } B;
} FlexCAN_0_MB_CS_tag;

typedef union FlexCAN_0_MB_ID_union_tag { /* Message Buffer 0 ID Register */
  vuint32_t R;
  struct {
    vuint32_t ID_EXT:18;               /* Frame Identifier Extended */
    vuint32_t ID_STD:11;               /* Frame Identifier Standard */
    vuint32_t PRIO:3;                  /* Local Priority */
  } B;
} FlexCAN_0_MB_ID_tag;

typedef union FlexCAN_0_MB_DATA_union_tag {
    vuint8_t B[8];
    vuint16_t H[4];
    vuint32_t W[2];
} FlexCAN_0_MB_DATA_tag;

typedef struct FlexCAN_0_MB_struct_tag {
   FlexCAN_0_MB_CS_tag CS;                    /* Message Buffer 0 CS Register */
   FlexCAN_0_MB_ID_tag ID;                    /* Message Buffer 0 ID Register */
   FlexCAN_0_MB_DATA_tag DATA;
} FlexCAN_0_MB_tag;

typedef union FlexCAN_0_RXIMR_union_tag { /* Rx Individual Mask registers */
  vuint32_t R;
  struct {
    vuint32_t MI:32;                   /* Individual Mask Bits */
  } B;
} FlexCAN_0_RXIMR_tag;

typedef union FlexCAN_0_MECR_union_tag { /* Memory Error Control register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:7;             /* Reserved */
    vuint32_t NCEFAFRZ:1;              /* Non-Correctable Errors In FlexCAN Access Put Device In Freeze Mode */
    vuint32_t ECCDIS:1;                /* Error Correction Disable */
    vuint32_t RERRDIS:1;               /* Error Report Disable */
    vuint32_t _unused_10:3;            /* Reserved */
    vuint32_t EXTERRIE:1;              /* Extended Error Injection Enable */
    vuint32_t FAERRIE:1;               /* FlexCAN Access Error Injection Enable */
    vuint32_t HAERRIE:1;               /* Host Access Error Injection Enable */
    vuint32_t CEI_MSK:1;               /* Correctable Errors Interrupt Mask */
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t FANCEI_MSK:1;            /* FlexCAN Access With Non-Correctable Errors Interrupt Mask */
    vuint32_t HANCEI_MSK:1;            /* Host Access With Non-Correctable Errors Interrupt Mask */
    vuint32_t _unused_20:11;           /* Reserved */
    vuint32_t ECRWRDIS:1;              /* Error Configuration Register Write Disable */
  } B;
} FlexCAN_0_MECR_tag;

typedef union FlexCAN_0_ERRIAR_union_tag { /* Error Injection Address register */
  vuint32_t R;
  struct {
    vuint32_t INJADDR_L:2;             /* Error Injection Address Low */
    vuint32_t INJADDR_H:12;            /* Error Injection Address High */
    vuint32_t _unused_14:18;           /* Reserved */
  } B;
} FlexCAN_0_ERRIAR_tag;

typedef union FlexCAN_0_ERRIDPR_union_tag { /* Error Injection Data Pattern register */
  vuint32_t R;
  struct {
    vuint32_t DFLIP:32;                /* Data flip pattern */
  } B;
} FlexCAN_0_ERRIDPR_tag;

typedef union FlexCAN_0_ERRIPPR_union_tag { /* Error Injection Parity Pattern register */
  vuint32_t R;
  struct {
    vuint32_t PFLIP0:5;                /* Parity Flip Pattern For Byte 0 (Least Significant) */
    vuint32_t _unused_5:3;             /* Reserved */
    vuint32_t PFLIP1:5;                /* Parity Flip Pattern For Byte 1 */
    vuint32_t _unused_13:3;            /* Reserved */
    vuint32_t PFLIP2:5;                /* Parity Flip Pattern For Byte 2 */
    vuint32_t _unused_21:3;            /* Reserved */
    vuint32_t PFLIP3:5;                /* Parity Flip Pattern For Byte 3 (most significant) */
    vuint32_t _unused_29:3;            /* Reserved */
  } B;
} FlexCAN_0_ERRIPPR_tag;

typedef union FlexCAN_0_RERRAR_union_tag { /* Error Report Address register */
  vuint32_t R;
  struct {
    vuint32_t ERRADDR:14;              /* Address Where Error Detected */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t SAID:3;                  /* SAID */
    vuint32_t _unused_19:5;            /* Reserved */
    vuint32_t NCE:1;                   /* Non-Correctable Error */
    vuint32_t _unused_25:7;            /* Reserved */
  } B;
} FlexCAN_0_RERRAR_tag;

typedef union FlexCAN_0_RERRDR_union_tag { /* Error Report Data register */
  vuint32_t R;
  struct {
    vuint32_t RDATA:32;                /* Raw data word read from memory with error */
  } B;
} FlexCAN_0_RERRDR_tag;

typedef union FlexCAN_0_RERRSYNR_union_tag { /* Error Report Syndrome register */
  vuint32_t R;
  struct {
    vuint32_t SYND0:5;                 /* Error Syndrome For Byte 0 (least significant) */
    vuint32_t _unused_5:2;             /* Reserved */
    vuint32_t BE0:1;                   /* Byte Enabled For Byte 0 (least significant) */
    vuint32_t SYND1:5;                 /* Error Syndrome for Byte 1 */
    vuint32_t _unused_13:2;            /* Reserved */
    vuint32_t BE1:1;                   /* Byte Enabled For Byte 1 */
    vuint32_t SYND2:5;                 /* Error Syndrome For Byte 2 */
    vuint32_t _unused_21:2;            /* Reserved */
    vuint32_t BE2:1;                   /* Byte Enabled For Byte 2 */
    vuint32_t SYND3:5;                 /* Error Syndrome For Byte 3 (most significant) */
    vuint32_t _unused_29:2;            /* Reserved */
    vuint32_t BE3:1;                   /* Byte Enabled For Byte 3 (most significant) */
  } B;
} FlexCAN_0_RERRSYNR_tag;

typedef union FlexCAN_0_ERRSR_union_tag { /* Error Status register */
  vuint32_t R;
  struct {
    vuint32_t CEIOF:1;                 /* Correctable Error Interrupt Overrun Flag */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t FANCEIOF:1;              /* FlexCAN Access With Non-Correctable Error Interrupt Overrun Flag */
    vuint32_t HANCEIOF:1;              /* Host Access With Non-Correctable Error Interrupt Overrun Flag */
    vuint32_t _unused_4:12;            /* Reserved */
    vuint32_t CEIF:1;                  /* Correctable Error Interrupt Flag */
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t FANCEIF:1;               /* FlexCAN Access With Non-Correctable Error Interrupt Flag */
    vuint32_t HANCEIF:1;               /* Host Access With Non-Correctable Error Interrupt Flag */
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} FlexCAN_0_ERRSR_tag;

typedef union FlexCAN_0_EPRS_union_tag { /* Enhanced CAN Bit Timing Prescalers */
  vuint32_t R;
  struct {
    vuint32_t ENPRESDIV:10;            /* Extended Nominal Prescaler Division Factor */
    vuint32_t _unused_10:6;            /* Reserved. */
    vuint32_t EDPRESDIV:10;            /* Extended Data Phase Prescaler Division Factor */
    vuint32_t _unused_26:6;
  } B;
} FlexCAN_0_EPRS_tag;

typedef union FlexCAN_0_ENCBT_union_tag { /* Enhanced Nominal CAN Bit Timing */
  vuint32_t R;
  struct {
    vuint32_t NTSEG1:8;                /* Nominal Time Segment 1 */
    vuint32_t _unused_8:4;
    vuint32_t NTSEG2:7;                /* Nominal Time Segment 2 */
    vuint32_t _unused_19:3;
    vuint32_t NRJW:7;                  /* Nominal Resynchronization Jump Width */
    vuint32_t _unused_29:3;
  } B;
} FlexCAN_0_ENCBT_tag;

typedef union FlexCAN_0_EDCBT_union_tag { /* Enhanced Data Phase CAN bit Timing */
  vuint32_t R;
  struct {
    vuint32_t DTSEG1:5;                /* Data Phase Segment 1 */
    vuint32_t _unused_5:7;
    vuint32_t DTSEG2:4;                /* Data Phase Time Segment 2 */
    vuint32_t _unused_16:6;
    vuint32_t DRJW:4;                  /* Data Phase Resynchronization Jump Width */
    vuint32_t _unused_26:6;
  } B;
} FlexCAN_0_EDCBT_tag;

typedef union FlexCAN_0_ETDC_union_tag { /* Enhanced Transceiver Delay Compensation */
  vuint32_t R;
  struct {
    vuint32_t ETDCVAL:8;               /* Enhanced Transceiver Delay Compensation Value */
    vuint32_t _unused_8:7;
    vuint32_t ETDCFAIL:1;              /* Transceiver Delay Compensation Fail */
    vuint32_t ETDCOFF:7;               /* Enhanced Transceiver Delay Compensation Offset */
    vuint32_t _unused_23:7;
    vuint32_t TDMDIS:1;                /* Transceiver Delay Measurement Disable */
    vuint32_t ETDCEN:1;                /* Transceiver Delay Compensation Enable */
  } B;
} FlexCAN_0_ETDC_tag;

typedef union FlexCAN_0_FDCTRL_union_tag { /* CAN FD Control register */
  vuint32_t R;
  struct {
    vuint32_t TDCVAL:6;                /* Transceiver Delay Compensation Value */
    vuint32_t _unused_6:2;             /* Reserved */
    vuint32_t TDCOFF:5;                /* Transceiver Delay Compensation Offset */
    vuint32_t _unused_13:1;            /* Reserved */
    vuint32_t TDCFAIL:1;               /* Transceiver Delay Compensation Fail */
    vuint32_t TDCEN:1;                 /* Transceiver Delay Compensation Enable */
    vuint32_t MBDSR0:2;                /* Message Buffer Data Size for Region 0 */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t MBDSR1:2;                /* Message Buffer Data Size for Region 1 */
    vuint32_t _unused_21:1;            /* Reserved */
    vuint32_t MBDSR2:2;                /* Message Buffer Data Size for Region 2 */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t _unused_25:2;            /* Reserved */
    vuint32_t _unused_27:4;            /* Reserved */
    vuint32_t FDRATE:1;                /* Bit Rate Switch Enable */
  } B;
} FlexCAN_0_FDCTRL_tag;

typedef union FlexCAN_0_FDCBT_union_tag { /* CAN FD Bit Timing register */
  vuint32_t R;
  struct {
    vuint32_t FPSEG2:3;                /* Fast Phase Segment 2 */
    vuint32_t _unused_3:2;             /* Reserved */
    vuint32_t FPSEG1:3;                /* Fast Phase Segment 1 */
    vuint32_t _unused_8:2;             /* Reserved */
    vuint32_t FPROPSEG:5;              /* Fast Propagation Segment */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t FRJW:3;                  /* Fast Resync Jump Width */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t FPRESDIV:10;             /* Fast Prescaler Division Factor */
    vuint32_t _unused_30:2;            /* Reserved */
  } B;
} FlexCAN_0_FDCBT_tag;

typedef union FlexCAN_0_FDCRC_union_tag { /* CAN FD CRC register */
  vuint32_t R;
  struct {
    vuint32_t FD_TXCRC:21;             /* Extended Transmitted CRC value */
    vuint32_t _unused_21:3;            /* Reserved */
    vuint32_t FD_MBCRC:7;              /* CRC Mailbox Number for FD_TXCRC */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} FlexCAN_0_FDCRC_tag;

typedef union FlexCAN_0_ERFCR_union_tag { /* Enhanced Rx FIFO Control register */
  vuint32_t R;
  struct {
    vuint32_t ERFWM:5;                 /* Enhanced Rx FIFO Watermark */
    vuint32_t _unused_5:3;             /* Reserved. */
    vuint32_t NFE:6;                   /* Number of Enhanced Rx FIFO Filter Elements */
    vuint32_t _unused_14:2;            /* Reserved. */
    vuint32_t NEXIF:7;                 /* Number of Extended ID Filter Elements */
    vuint32_t _unused_23:3;            /* Reserved. */
    vuint32_t DMALW:5;                 /* DMA Last Word */
    vuint32_t ERFEN:1;                 /* Enhanced Rx FIFO enable */
  } B;
} FlexCAN_0_ERFCR_tag;

typedef union FlexCAN_0_ERFIER_union_tag { /* Enhanced Rx FIFO Interrupt Enable register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:28;            /* Reserved */
    vuint32_t ERFDAIE:1;               /* Enhanced Rx FIFO Data Available Interrupt Enable */
    vuint32_t ERFWMIIE:1;              /* Enhanced Rx FIFO Watermark Indication Interrupt Enable */
    vuint32_t ERFOVFIE:1;              /* Enhanced Rx FIFO Overflow Interrupt Enable */
    vuint32_t ERFUFWIE:1;              /* Enhanced Rx FIFO Underflow Interrupt Enable */
  } B;
} FlexCAN_0_ERFIER_tag;

typedef union FlexCAN_0_ERFSR_union_tag { /* Enhanced Rx FIFO Status register */
  vuint32_t R;
  struct {
    vuint32_t ERFEL:6;                 /* Enhanced Rx FIFO Elements */
    vuint32_t _unused_6:10;            /* Reserved */
    vuint32_t ERFF:1;                  /* Enhanced Rx FIFO full */
    vuint32_t ERFE:1;                  /* Enhanced Rx FIFO empty */
    vuint32_t _unused_18:9;            /* Reserved */
    vuint32_t ERFCLR:1;                /* Enhanced Rx FIFO Clear */
    vuint32_t ERFDA:1;                 /* Enhanced Rx FIFO Data Available */
    vuint32_t ERFWMI:1;                /* Enhanced Rx FIFO Watermark Indication */
    vuint32_t ERFOVF:1;                /* Enhanced Rx FIFO Overflow */
    vuint32_t ERFUFW:1;                /* Enhanced Rx FIFO Underflow */
  } B;
} FlexCAN_0_ERFSR_tag;

typedef union FlexCAN_0_HR_TIME_STAMP_union_tag { /* High Resolution Time Stamp */
  vuint32_t R;
  struct {
    vuint32_t TS:32;                   /* High Resolution Time Stamp */
  } B;
} FlexCAN_0_HR_TIME_STAMP_tag;

typedef union FlexCAN_0_ERFFEL_union_tag { /* Enhanced Rx FIFO Filter Element */
  vuint32_t R;
  struct {
    vuint32_t FEL:32;                  /* Filter Element Bits */
  } B;
} FlexCAN_0_ERFFEL_tag;

struct FlexCAN_0_tag {
  FlexCAN_0_MCR_tag MCR;               /* Module Configuration register */
  FlexCAN_0_CTRL1_tag CTRL1;           /* Control 1 register */
  FlexCAN_0_TIMER_tag TIMER;           /* Free Running Timer */
  uint8_t FlexCAN_0_reserved0[4];
  FlexCAN_0_RXMGMASK_tag RXMGMASK;     /* Rx Mailboxes Global Mask register */
  FlexCAN_0_RX14MASK_tag RX14MASK;     /* Rx 14 Mask register */
  FlexCAN_0_RX15MASK_tag RX15MASK;     /* Rx 15 Mask register */
  FlexCAN_0_ECR_tag ECR;               /* Error Counter */
  FlexCAN_0_ESR1_tag ESR1;             /* Error and Status 1 register */
  FlexCAN_0_IMASK2_tag IMASK2;         /* Interrupt Masks 2 register */
  FlexCAN_0_IMASK1_tag IMASK1;         /* Interrupt Masks 1 register */
  FlexCAN_0_IFLAG2_tag IFLAG2;         /* Interrupt Flags 2 register */
  FlexCAN_0_IFLAG1_tag IFLAG1;         /* Interrupt Flags 1 register */
  FlexCAN_0_CTRL2_tag CTRL2;           /* Control 2 register */
  FlexCAN_0_ESR2_tag ESR2;             /* Error and Status 2 register */
  uint8_t FlexCAN_0_reserved1[8];
  FlexCAN_0_CRCR_tag CRCR;             /* CRC register */
  FlexCAN_0_RXFGMASK_tag RXFGMASK;     /* Legacy Rx FIFO Global Mask register */
  FlexCAN_0_RXFIR_tag RXFIR;           /* Legacy Rx FIFO Information register */
  FlexCAN_0_CBT_tag CBT;               /* CAN Bit Timing register */
  uint8_t FlexCAN_0_reserved2[24];
  FlexCAN_0_IMASK3_tag IMASK3;         /* Interrupt Masks 3 register */
  uint8_t FlexCAN_0_reserved3[4];
  FlexCAN_0_IFLAG3_tag IFLAG3;         /* Interrupt Flags 3 register */
  uint8_t FlexCAN_0_reserved4[8];
  FlexCAN_0_MB_tag MB[96];
  uint8_t FlexCAN_0_reserved5[512];
  FlexCAN_0_RXIMR_tag RXIMR[96];       /* Rx Individual Mask registers */
  uint8_t FlexCAN_0_reserved6[224];
  FlexCAN_0_MECR_tag MECR;             /* Memory Error Control register */
  FlexCAN_0_ERRIAR_tag ERRIAR;         /* Error Injection Address register */
  FlexCAN_0_ERRIDPR_tag ERRIDPR;       /* Error Injection Data Pattern register */
  FlexCAN_0_ERRIPPR_tag ERRIPPR;       /* Error Injection Parity Pattern register */
  FlexCAN_0_RERRAR_tag RERRAR;         /* Error Report Address register */
  FlexCAN_0_RERRDR_tag RERRDR;         /* Error Report Data register */
  FlexCAN_0_RERRSYNR_tag RERRSYNR;     /* Error Report Syndrome register */
  FlexCAN_0_ERRSR_tag ERRSR;           /* Error Status register */
  uint8_t FlexCAN_0_reserved7[240];
  FlexCAN_0_EPRS_tag EPRS;             /* Enhanced CAN Bit Timing Prescalers */
  FlexCAN_0_ENCBT_tag ENCBT;           /* Enhanced Nominal CAN Bit Timing */
  FlexCAN_0_EDCBT_tag EDCBT;           /* Enhanced Data Phase CAN bit Timing */
  FlexCAN_0_ETDC_tag ETDC;             /* Enhanced Transceiver Delay Compensation */
  FlexCAN_0_FDCTRL_tag FDCTRL;         /* CAN FD Control register */
  FlexCAN_0_FDCBT_tag FDCBT;           /* CAN FD Bit Timing register */
  FlexCAN_0_FDCRC_tag FDCRC;           /* CAN FD CRC register */
  FlexCAN_0_ERFCR_tag ERFCR;           /* Enhanced Rx FIFO Control register */
  FlexCAN_0_ERFIER_tag ERFIER;         /* Enhanced Rx FIFO Interrupt Enable register */
  FlexCAN_0_ERFSR_tag ERFSR;           /* Enhanced Rx FIFO Status register */
  uint8_t FlexCAN_0_reserved8[24];
  FlexCAN_0_HR_TIME_STAMP_tag HR_TIME_STAMP[96]; /* High Resolution Time Stamp */
  uint8_t FlexCAN_0_reserved9[8784];
  FlexCAN_0_ERFFEL_tag ERFFEL[128];    /* Enhanced Rx FIFO Filter Element */
};


/* ============================================================================
   =============================== Module: FlexCAN_1 ==========================
   ============================================================================ */

typedef union FlexCAN_1_MCR_union_tag { /* Module Configuration register */
  vuint32_t R;
  struct {
    vuint32_t MAXMB:7;                 /* Number Of The Last Message Buffer */
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t IDAM:2;                  /* ID Acceptance Mode */
    vuint32_t _unused_10:1;            /* Reserved */
    vuint32_t FDEN:1;                  /* CAN FD operation enable */
    vuint32_t AEN:1;                   /* Abort Enable */
    vuint32_t LPRIOEN:1;               /* Local Priority Enable */
    vuint32_t _unused_14:1;            /* Reserved */
    vuint32_t DMA:1;                   /* DMA Enable */
    vuint32_t IRMQ:1;                  /* Individual Rx Masking And Queue Enable */
    vuint32_t SRXDIS:1;                /* Self Reception Disable */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t LPMACK:1;                /* Low-Power Mode Acknowledge */
    vuint32_t WRNEN:1;                 /* Warning Interrupt Enable */
    vuint32_t _unused_22:1;            /* Reserved */
    vuint32_t SUPV:1;                  /* Supervisor Mode */
    vuint32_t FRZACK:1;                /* Freeze Mode Acknowledge */
    vuint32_t SOFTRST:1;               /* Soft Reset */
    vuint32_t _unused_26:1;            /* Reserved */
    vuint32_t NOTRDY:1;                /* FlexCAN Not Ready */
    vuint32_t HALT:1;                  /* Halt FlexCAN */
    vuint32_t RFEN:1;                  /* Rx FIFO Enable */
    vuint32_t FRZ:1;                   /* Freeze Enable */
    vuint32_t MDIS:1;                  /* Module Disable */
  } B;
} FlexCAN_1_MCR_tag;

typedef union FlexCAN_1_CTRL1_union_tag { /* Control 1 register */
  vuint32_t R;
  struct {
    vuint32_t PROPSEG:3;               /* Propagation Segment */
    vuint32_t LOM:1;                   /* Listen-Only Mode */
    vuint32_t LBUF:1;                  /* Lowest Buffer Transmitted First */
    vuint32_t TSYN:1;                  /* Timer Sync */
    vuint32_t BOFFREC:1;               /* Bus Off Recovery */
    vuint32_t SMP:1;                   /* CAN Bit Sampling */
    vuint32_t _unused_8:1;             /* Reserved */
    vuint32_t _unused_9:1;             /* Reserved */
    vuint32_t RWRNMSK:1;               /* Rx Warning Interrupt Mask */
    vuint32_t TWRNMSK:1;               /* Tx Warning Interrupt Mask */
    vuint32_t LPB:1;                   /* Loop Back Mode */
    vuint32_t _unused_13:1;            /* Reserved */
    vuint32_t ERRMSK:1;                /* Error Interrupt Mask */
    vuint32_t BOFFMSK:1;               /* Bus Off Interrupt Mask */
    vuint32_t PSEG2:3;                 /* Phase Segment 2 */
    vuint32_t PSEG1:3;                 /* Phase Segment 1 */
    vuint32_t RJW:2;                   /* Resync Jump Width */
    vuint32_t PRESDIV:8;               /* Prescaler Division Factor */
  } B;
} FlexCAN_1_CTRL1_tag;

typedef union FlexCAN_1_TIMER_union_tag { /* Free Running Timer */
  vuint32_t R;
  struct {
    vuint32_t TIMER:16;                /* Timer Value */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} FlexCAN_1_TIMER_tag;

typedef union FlexCAN_1_RXMGMASK_union_tag { /* Rx Mailboxes Global Mask register */
  vuint32_t R;
  struct {
    vuint32_t MG:32;                   /* Rx Mailboxes Global Mask Bits */
  } B;
} FlexCAN_1_RXMGMASK_tag;

typedef union FlexCAN_1_RX14MASK_union_tag { /* Rx 14 Mask register */
  vuint32_t R;
  struct {
    vuint32_t RX14M:32;                /* Rx Buffer 14 Mask Bits */
  } B;
} FlexCAN_1_RX14MASK_tag;

typedef union FlexCAN_1_RX15MASK_union_tag { /* Rx 15 Mask register */
  vuint32_t R;
  struct {
    vuint32_t RX15M:32;                /* Rx Buffer 15 Mask Bits */
  } B;
} FlexCAN_1_RX15MASK_tag;

typedef union FlexCAN_1_ECR_union_tag { /* Error Counter */
  vuint32_t R;
  struct {
    vuint32_t TXERRCNT:8;              /* Transmit Error Counter */
    vuint32_t RXERRCNT:8;              /* Receive Error Counter */
    vuint32_t TXERRCNT_FAST:8;         /* Transmit Error Counter for fast bits */
    vuint32_t RXERRCNT_FAST:8;         /* Receive Error Counter for fast bits */
  } B;
} FlexCAN_1_ECR_tag;

typedef union FlexCAN_1_ESR1_union_tag { /* Error and Status 1 register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t ERRINT:1;                /* Error Interrupt */
    vuint32_t BOFFINT:1;               /* Bus Off Interrupt */
    vuint32_t RX:1;                    /* FlexCAN In Reception */
    vuint32_t FLTCONF:2;               /* Fault Confinement State */
    vuint32_t TX:1;                    /* FlexCAN In Transmission */
    vuint32_t IDLE:1;                  /* IDLE */
    vuint32_t RXWRN:1;                 /* Rx Error Warning */
    vuint32_t TXWRN:1;                 /* TX Error Warning */
    vuint32_t STFERR:1;                /* Stuffing Error */
    vuint32_t FRMERR:1;                /* Form Error */
    vuint32_t CRCERR:1;                /* Cyclic Redundancy Check Error */
    vuint32_t ACKERR:1;                /* Acknowledge Error */
    vuint32_t BIT0ERR:1;               /* Bit0 Error */
    vuint32_t BIT1ERR:1;               /* Bit1 Error */
    vuint32_t RWRNINT:1;               /* Rx Warning Interrupt Flag */
    vuint32_t TWRNINT:1;               /* Tx Warning Interrupt Flag */
    vuint32_t SYNCH:1;                 /* CAN Synchronization Status */
    vuint32_t BOFFDONEINT:1;           /* Bus Off Done Interrupt */
    vuint32_t ERRINT_FAST:1;           /* Error interrupt for errors detected in Data Phase of CAN FD frames with BRS bit set */
    vuint32_t ERROVR:1;                /* Error Overrun */
    vuint32_t _unused_22:4;            /* Reserved */
    vuint32_t STFERR_FAST:1;           /* Stuffing Error in the Data Phase of CAN FD frames with the BRS bit set */
    vuint32_t FRMERR_FAST:1;           /* Form Error in the Data Phase of CAN FD frames with the BRS bit set */
    vuint32_t CRCERR_FAST:1;           /* Cyclic Redundancy Check Error in the CRC field of CAN FD frames with the BRS bit set */
    vuint32_t _unused_29:1;            /* Reserved */
    vuint32_t BIT0ERR_FAST:1;          /* Bit0 Error in the Data Phase of CAN FD frames with the BRS bit set */
    vuint32_t BIT1ERR_FAST:1;          /* Bit1 Error in the Data Phase of CAN FD frames with the BRS bit set */
  } B;
} FlexCAN_1_ESR1_tag;

typedef union FlexCAN_1_IMASK2_union_tag { /* Interrupt Masks 2 register */
  vuint32_t R;
  struct {
    vuint32_t BUF63TO32M:32;           /* Buffer MBi Mask */
  } B;
} FlexCAN_1_IMASK2_tag;

typedef union FlexCAN_1_IMASK1_union_tag { /* Interrupt Masks 1 register */
  vuint32_t R;
  struct {
    vuint32_t BUF31TO0M:32;            /* Buffer MBi Mask */
  } B;
} FlexCAN_1_IMASK1_tag;

typedef union FlexCAN_1_IFLAG2_union_tag { /* Interrupt Flags 2 register */
  vuint32_t R;
  struct {
    vuint32_t BUF63TO32I:32;           /* Buffer MBi Interrupt */
  } B;
} FlexCAN_1_IFLAG2_tag;

typedef union FlexCAN_1_IFLAG1_union_tag { /* Interrupt Flags 1 register */
  vuint32_t R;
  struct {
    vuint32_t BUF0I:1;                 /* Buffer MB0 Interrupt Or Clear FIFO bit */
    vuint32_t BUF4TO1I:4;              /* Buffer MBi Interrupt Or Reserved */
    vuint32_t BUF5I:1;                 /* Buffer MB5 Interrupt Or Frames available in Rx FIFO */
    vuint32_t BUF6I:1;                 /* Buffer MB6 Interrupt Or Rx FIFO Warning */
    vuint32_t BUF7I:1;                 /* Buffer MB7 Interrupt Or Rx FIFO Overflow */
    vuint32_t BUF31TO8I:24;            /* Buffer MBi Interrupt */
  } B;
} FlexCAN_1_IFLAG1_tag;

typedef union FlexCAN_1_CTRL2_union_tag { /* Control 2 register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:6;             /* Reserved */
    vuint32_t TSTAMPCAP:2;             /* Time Stamp Capture Point */
    vuint32_t MBTSBASE:2;              /* Message Buffer Time Stamp Base */
    vuint32_t _unused_10:1;            /* Reserved */
    vuint32_t EDFLTDIS:1;              /* Edge Filter Disable */
    vuint32_t ISOCANFDEN:1;            /* ISO CAN FD Enable */
    vuint32_t BTE:1;                   /* Bit Timing Expansion enable */
    vuint32_t PREXCEN:1;               /* Protocol Exception Enable */
    vuint32_t TIMER_SRC:1;             /* Timer Source */
    vuint32_t EACEN:1;                 /* Entire Frame Arbitration Field Comparison Enable For Rx Mailboxes */
    vuint32_t RRS:1;                   /* Remote Request Storing */
    vuint32_t MRP:1;                   /* Mailboxes Reception Priority */
    vuint32_t TASD:5;                  /* Tx Arbitration Start Delay */
    vuint32_t RFFN:4;                  /* Number Of Rx FIFO Filters */
    vuint32_t WRMFRZ:1;                /* Write-Access To Memory In Freeze Mode */
    vuint32_t ECRWRE:1;                /* Error-correction Configuration Register Write Enable */
    vuint32_t BOFFDONEMSK:1;           /* Bus Off Done Interrupt Mask */
    vuint32_t ERRMSK_FAST:1;           /* Error Interrupt Mask for errors detected in the data phase of fast CAN FD frames */
  } B;
} FlexCAN_1_CTRL2_tag;

typedef union FlexCAN_1_ESR2_union_tag { /* Error and Status 2 register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:13;            /* Reserved */
    vuint32_t IMB:1;                   /* Inactive Mailbox */
    vuint32_t VPS:1;                   /* Valid Priority Status */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t LPTM:7;                  /* Lowest Priority Tx Mailbox */
    vuint32_t _unused_23:9;            /* Reserved */
  } B;
} FlexCAN_1_ESR2_tag;

typedef union FlexCAN_1_CRCR_union_tag { /* CRC register */
  vuint32_t R;
  struct {
    vuint32_t TXCRC:15;                /* Transmitted CRC value */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t MBCRC:7;                 /* CRC Mailbox */
    vuint32_t _unused_23:9;            /* Reserved */
  } B;
} FlexCAN_1_CRCR_tag;

typedef union FlexCAN_1_RXFGMASK_union_tag { /* Rx FIFO Global Mask register */
  vuint32_t R;
  struct {
    vuint32_t FGM:32;                  /* Rx FIFO Global Mask Bits */
  } B;
} FlexCAN_1_RXFGMASK_tag;

typedef union FlexCAN_1_RXFIR_union_tag { /* Rx FIFO Information register */
  vuint32_t R;
  struct {
    vuint32_t IDHIT:9;                 /* Identifier Acceptance Filter Hit Indicator */
    vuint32_t _unused_9:23;            /* Reserved */
  } B;
} FlexCAN_1_RXFIR_tag;

typedef union FlexCAN_1_CBT_union_tag { /* CAN Bit Timing register */
  vuint32_t R;
  struct {
    vuint32_t EPSEG2:5;                /* Extended Phase Segment 2 */
    vuint32_t EPSEG1:5;                /* Extended Phase Segment 1 */
    vuint32_t EPROPSEG:6;              /* Extended Propagation Segment */
    vuint32_t ERJW:5;                  /* Extended Resync Jump Width */
    vuint32_t EPRESDIV:10;             /* Extended Prescaler Division Factor */
    vuint32_t BTF:1;                   /* Bit Timing Format Enable */
  } B;
} FlexCAN_1_CBT_tag;

typedef union FlexCAN_1_MB_CS_union_tag { /* Message Buffer 0 CS Register */
  vuint32_t R;
  struct {
    vuint32_t TIMESTAMP:16;            /* Free-Running Counter Time stamp. This 16-bit field is a copy of the Free-Running Timer, captured for Tx and Rx frames at the time when the beginning of the Identifier field appears on the CAN bus. */
	vuint32_t DLC:4;                   /* Length of the data to be stored/transmitted. */
	vuint32_t RTR:1;                   /* Remote Transmission Request. One/zero for remote/data frame. */
	vuint32_t IDE:1;                   /* ID Extended. One/zero for extended/standard format frame. */
	vuint32_t SRR:1;                   /* Substitute Remote Request. Contains a fixed recessive bit. */
    vuint32_t _unused_23:1;
    vuint32_t CODE:4;                  /* Message Buffer Code */
    vuint32_t _unused_28:1;
	vuint32_t ESI:1;                   /*  Error State Indicator */
	vuint32_t BRS:1;                   /* Bit Rate Switch */
    vuint32_t EDL:1;                   /* Extended Data Length */
  } B;
} FlexCAN_1_MB_CS_tag;

typedef union FlexCAN_1_MB_ID_union_tag { /* Message Buffer 0 ID Register */
  vuint32_t R;
  struct {
    vuint32_t ID_EXT:18;               /* Frame Identifier Extended */
    vuint32_t ID_STD:11;               /* Frame Identifier Standard */
    vuint32_t PRIO:3;                  /* Local Priority */
  } B;
} FlexCAN_1_MB_ID_tag;

typedef union FlexCAN_1_MB_DATA_union_tag {
    vuint8_t B[8];
    vuint16_t H[4];
    vuint32_t W[2];
} FlexCAN_1_MB_DATA_tag;

typedef struct FlexCAN_1_MB_struct_tag {
   FlexCAN_1_MB_CS_tag CS;                    /* Message Buffer 0 CS Register */
   FlexCAN_1_MB_ID_tag ID;                    /* Message Buffer 0 ID Register */
   FlexCAN_1_MB_DATA_tag DATA;
} FlexCAN_1_MB_tag;

typedef union FlexCAN_1_RXIMR_union_tag { /* Rx Individual Mask registers */
  vuint32_t R;
  struct {
    vuint32_t MI:32;                   /* Individual Mask Bits */
  } B;
} FlexCAN_1_RXIMR_tag;

typedef union FlexCAN_1_MECR_union_tag { /* Memory Error Control register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:7;             /* Reserved */
    vuint32_t NCEFAFRZ:1;              /* Non-Correctable Errors In FlexCAN Access Put Device In Freeze Mode */
    vuint32_t ECCDIS:1;                /* Error Correction Disable */
    vuint32_t RERRDIS:1;               /* Error Report Disable */
    vuint32_t _unused_10:3;            /* Reserved */
    vuint32_t EXTERRIE:1;              /* Extended Error Injection Enable */
    vuint32_t FAERRIE:1;               /* FlexCAN Access Error Injection Enable */
    vuint32_t HAERRIE:1;               /* Host Access Error Injection Enable */
    vuint32_t CEI_MSK:1;               /* Correctable Errors Interrupt Mask */
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t FANCEI_MSK:1;            /* FlexCAN Access With Non-Correctable Errors Interrupt Mask */
    vuint32_t HANCEI_MSK:1;            /* Host Access With Non-Correctable Errors Interrupt Mask */
    vuint32_t _unused_20:11;           /* Reserved */
    vuint32_t ECRWRDIS:1;              /* Error Configuration Register Write Disable */
  } B;
} FlexCAN_1_MECR_tag;

typedef union FlexCAN_1_ERRIAR_union_tag { /* Error Injection Address register */
  vuint32_t R;
  struct {
    vuint32_t INJADDR_L:2;             /* Error Injection Address Low */
    vuint32_t INJADDR_H:12;            /* Error Injection Address High */
    vuint32_t _unused_14:18;           /* Reserved */
  } B;
} FlexCAN_1_ERRIAR_tag;

typedef union FlexCAN_1_ERRIDPR_union_tag { /* Error Injection Data Pattern register */
  vuint32_t R;
  struct {
    vuint32_t DFLIP:32;                /* Data flip pattern */
  } B;
} FlexCAN_1_ERRIDPR_tag;

typedef union FlexCAN_1_ERRIPPR_union_tag { /* Error Injection Parity Pattern register */
  vuint32_t R;
  struct {
    vuint32_t PFLIP0:5;                /* Parity Flip Pattern For Byte 0 (Least Significant) */
    vuint32_t _unused_5:3;             /* Reserved */
    vuint32_t PFLIP1:5;                /* Parity Flip Pattern For Byte 1 */
    vuint32_t _unused_13:3;            /* Reserved */
    vuint32_t PFLIP2:5;                /* Parity Flip Pattern For Byte 2 */
    vuint32_t _unused_21:3;            /* Reserved */
    vuint32_t PFLIP3:5;                /* Parity Flip Pattern For Byte 3 (most significant) */
    vuint32_t _unused_29:3;            /* Reserved */
  } B;
} FlexCAN_1_ERRIPPR_tag;

typedef union FlexCAN_1_RERRAR_union_tag { /* Error Report Address register */
  vuint32_t R;
  struct {
    vuint32_t ERRADDR:14;              /* Address Where Error Detected */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t SAID:3;                  /* SAID */
    vuint32_t _unused_19:5;            /* Reserved */
    vuint32_t NCE:1;                   /* Non-Correctable Error */
    vuint32_t _unused_25:7;            /* Reserved */
  } B;
} FlexCAN_1_RERRAR_tag;

typedef union FlexCAN_1_RERRDR_union_tag { /* Error Report Data register */
  vuint32_t R;
  struct {
    vuint32_t RDATA:32;                /* Raw data word read from memory with error */
  } B;
} FlexCAN_1_RERRDR_tag;

typedef union FlexCAN_1_RERRSYNR_union_tag { /* Error Report Syndrome register */
  vuint32_t R;
  struct {
    vuint32_t SYND0:5;                 /* Error Syndrome For Byte 0 (least significant) */
    vuint32_t _unused_5:2;             /* Reserved */
    vuint32_t BE0:1;                   /* Byte Enabled For Byte 0 (least significant) */
    vuint32_t SYND1:5;                 /* Error Syndrome for Byte 1 */
    vuint32_t _unused_13:2;            /* Reserved */
    vuint32_t BE1:1;                   /* Byte Enabled For Byte 1 */
    vuint32_t SYND2:5;                 /* Error Syndrome For Byte 2 */
    vuint32_t _unused_21:2;            /* Reserved */
    vuint32_t BE2:1;                   /* Byte Enabled For Byte 2 */
    vuint32_t SYND3:5;                 /* Error Syndrome For Byte 3 (most significant) */
    vuint32_t _unused_29:2;            /* Reserved */
    vuint32_t BE3:1;                   /* Byte Enabled For Byte 3 (most significant) */
  } B;
} FlexCAN_1_RERRSYNR_tag;

typedef union FlexCAN_1_ERRSR_union_tag { /* Error Status register */
  vuint32_t R;
  struct {
    vuint32_t CEIOF:1;                 /* Correctable Error Interrupt Overrun Flag */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t FANCEIOF:1;              /* FlexCAN Access With Non-Correctable Error Interrupt Overrun Flag */
    vuint32_t HANCEIOF:1;              /* Host Access With Non-Correctable Error Interrupt Overrun Flag */
    vuint32_t _unused_4:12;            /* Reserved */
    vuint32_t CEIF:1;                  /* Correctable Error Interrupt Flag */
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t FANCEIF:1;               /* FlexCAN Access With Non-Correctable Error Interrupt Flag */
    vuint32_t HANCEIF:1;               /* Host Access With Non-Correctable Error Interrupt Flag */
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} FlexCAN_1_ERRSR_tag;

typedef union FlexCAN_1_EPRS_union_tag { /* Enhanced CAN Bit Timing Prescalers */
  vuint32_t R;
  struct {
    vuint32_t ENPRESDIV:10;            /* Extended Nominal Prescaler Division Factor */
    vuint32_t _unused_10:6;            /* Reserved. */
    vuint32_t EDPRESDIV:10;            /* Extended Data Phase Prescaler Division Factor */
    vuint32_t _unused_26:6;
  } B;
} FlexCAN_1_EPRS_tag;

typedef union FlexCAN_1_ENCBT_union_tag { /* Enhanced Nominal CAN Bit Timing */
  vuint32_t R;
  struct {
    vuint32_t NTSEG1:8;                /* Nominal Time Segment 1 */
    vuint32_t _unused_8:4;
    vuint32_t NTSEG2:7;                /* Nominal Time Segment 2 */
    vuint32_t _unused_19:3;
    vuint32_t NRJW:7;                  /* Nominal Resynchronization Jump Width */
    vuint32_t _unused_29:3;
  } B;
} FlexCAN_1_ENCBT_tag;

typedef union FlexCAN_1_EDCBT_union_tag { /* Enhanced Data Phase CAN bit Timing */
  vuint32_t R;
  struct {
    vuint32_t DTSEG1:5;                /* Data Phase Segment 1 */
    vuint32_t _unused_5:7;
    vuint32_t DTSEG2:4;                /* Data Phase Time Segment 2 */
    vuint32_t _unused_16:6;
    vuint32_t DRJW:4;                  /* Data Phase Resynchronization Jump Width */
    vuint32_t _unused_26:6;
  } B;
} FlexCAN_1_EDCBT_tag;

typedef union FlexCAN_1_ETDC_union_tag { /* Enhanced Transceiver Delay Compensation */
  vuint32_t R;
  struct {
    vuint32_t ETDCVAL:8;               /* Enhanced Transceiver Delay Compensation Value */
    vuint32_t _unused_8:7;
    vuint32_t ETDCFAIL:1;              /* Transceiver Delay Compensation Fail */
    vuint32_t ETDCOFF:7;               /* Enhanced Transceiver Delay Compensation Offset */
    vuint32_t _unused_23:7;
    vuint32_t TDMDIS:1;                /* Transceiver Delay Measurement Disable */
    vuint32_t ETDCEN:1;                /* Transceiver Delay Compensation Enable */
  } B;
} FlexCAN_1_ETDC_tag;

typedef union FlexCAN_1_FDCTRL_union_tag { /* CAN FD Control register */
  vuint32_t R;
  struct {
    vuint32_t TDCVAL:6;                /* Transceiver Delay Compensation Value */
    vuint32_t _unused_6:2;             /* Reserved */
    vuint32_t TDCOFF:5;                /* Transceiver Delay Compensation Offset */
    vuint32_t _unused_13:1;            /* Reserved */
    vuint32_t TDCFAIL:1;               /* Transceiver Delay Compensation Fail */
    vuint32_t TDCEN:1;                 /* Transceiver Delay Compensation Enable */
    vuint32_t MBDSR0:2;                /* Message Buffer Data Size for Region 0 */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t MBDSR1:2;                /* Message Buffer Data Size for Region 1 */
    vuint32_t _unused_21:1;            /* Reserved */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t _unused_25:2;            /* Reserved */
    vuint32_t _unused_27:4;            /* Reserved */
    vuint32_t FDRATE:1;                /* Bit Rate Switch Enable */
  } B;
} FlexCAN_1_FDCTRL_tag;

typedef union FlexCAN_1_FDCBT_union_tag { /* CAN FD Bit Timing register */
  vuint32_t R;
  struct {
    vuint32_t FPSEG2:3;                /* Fast Phase Segment 2 */
    vuint32_t _unused_3:2;             /* Reserved */
    vuint32_t FPSEG1:3;                /* Fast Phase Segment 1 */
    vuint32_t _unused_8:2;             /* Reserved */
    vuint32_t FPROPSEG:5;              /* Fast Propagation Segment */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t FRJW:3;                  /* Fast Resync Jump Width */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t FPRESDIV:10;             /* Fast Prescaler Division Factor */
    vuint32_t _unused_30:2;            /* Reserved */
  } B;
} FlexCAN_1_FDCBT_tag;

typedef union FlexCAN_1_FDCRC_union_tag { /* CAN FD CRC register */
  vuint32_t R;
  struct {
    vuint32_t FD_TXCRC:21;             /* Extended Transmitted CRC value */
    vuint32_t _unused_21:3;            /* Reserved */
    vuint32_t FD_MBCRC:7;              /* CRC Mailbox Number for FD_TXCRC */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} FlexCAN_1_FDCRC_tag;

typedef union FlexCAN_1_HR_TIME_STAMP_union_tag { /* High Resolution Time Stamp */
  vuint32_t R;
  struct {
    vuint32_t TS:32;                   /* High Resolution Time Stamp */
  } B;
} FlexCAN_1_HR_TIME_STAMP_tag;

struct FlexCAN_1_tag {
  FlexCAN_1_MCR_tag MCR;               /* Module Configuration register */
  FlexCAN_1_CTRL1_tag CTRL1;           /* Control 1 register */
  FlexCAN_1_TIMER_tag TIMER;           /* Free Running Timer */
  uint8_t FlexCAN_1_reserved0[4];
  FlexCAN_1_RXMGMASK_tag RXMGMASK;     /* Rx Mailboxes Global Mask register */
  FlexCAN_1_RX14MASK_tag RX14MASK;     /* Rx 14 Mask register */
  FlexCAN_1_RX15MASK_tag RX15MASK;     /* Rx 15 Mask register */
  FlexCAN_1_ECR_tag ECR;               /* Error Counter */
  FlexCAN_1_ESR1_tag ESR1;             /* Error and Status 1 register */
  FlexCAN_1_IMASK2_tag IMASK2;         /* Interrupt Masks 2 register */
  FlexCAN_1_IMASK1_tag IMASK1;         /* Interrupt Masks 1 register */
  FlexCAN_1_IFLAG2_tag IFLAG2;         /* Interrupt Flags 2 register */
  FlexCAN_1_IFLAG1_tag IFLAG1;         /* Interrupt Flags 1 register */
  FlexCAN_1_CTRL2_tag CTRL2;           /* Control 2 register */
  FlexCAN_1_ESR2_tag ESR2;             /* Error and Status 2 register */
  uint8_t FlexCAN_1_reserved1[8];
  FlexCAN_1_CRCR_tag CRCR;             /* CRC register */
  FlexCAN_1_RXFGMASK_tag RXFGMASK;     /* Rx FIFO Global Mask register */
  FlexCAN_1_RXFIR_tag RXFIR;           /* Rx FIFO Information register */
  FlexCAN_1_CBT_tag CBT;               /* CAN Bit Timing register */
  uint8_t FlexCAN_1_reserved2[44];
  FlexCAN_1_MB_tag MB[64];
  uint8_t FlexCAN_1_reserved3[1024];
  FlexCAN_1_RXIMR_tag RXIMR[64];       /* Rx Individual Mask registers */
  uint8_t FlexCAN_1_reserved4[352];
  FlexCAN_1_MECR_tag MECR;             /* Memory Error Control register */
  FlexCAN_1_ERRIAR_tag ERRIAR;         /* Error Injection Address register */
  FlexCAN_1_ERRIDPR_tag ERRIDPR;       /* Error Injection Data Pattern register */
  FlexCAN_1_ERRIPPR_tag ERRIPPR;       /* Error Injection Parity Pattern register */
  FlexCAN_1_RERRAR_tag RERRAR;         /* Error Report Address register */
  FlexCAN_1_RERRDR_tag RERRDR;         /* Error Report Data register */
  FlexCAN_1_RERRSYNR_tag RERRSYNR;     /* Error Report Syndrome register */
  FlexCAN_1_ERRSR_tag ERRSR;           /* Error Status register */
  uint8_t FlexCAN_1_reserved5[240];
  FlexCAN_1_EPRS_tag EPRS;             /* Enhanced CAN Bit Timing Prescalers */
  FlexCAN_1_ENCBT_tag ENCBT;           /* Enhanced Nominal CAN Bit Timing */
  FlexCAN_1_EDCBT_tag EDCBT;           /* Enhanced Data Phase CAN bit Timing */
  FlexCAN_1_ETDC_tag ETDC;             /* Enhanced Transceiver Delay Compensation */
  FlexCAN_1_FDCTRL_tag FDCTRL;         /* CAN FD Control register */
  FlexCAN_1_FDCBT_tag FDCBT;           /* CAN FD Bit Timing register */
  FlexCAN_1_FDCRC_tag FDCRC;           /* CAN FD CRC register */
  uint8_t FlexCAN_1_reserved6[36];
  FlexCAN_1_HR_TIME_STAMP_tag HR_TIME_STAMP[64]; /* High Resolution Time Stamp */
};


/* ============================================================================
   =============================== Module: FlexCAN_2 ==========================
   ============================================================================ */

typedef union FlexCAN_2_MCR_union_tag { /* Module Configuration register */
  vuint32_t R;
  struct {
    vuint32_t MAXMB:7;                 /* Number Of The Last Message Buffer */
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t IDAM:2;                  /* ID Acceptance Mode */
    vuint32_t _unused_10:1;            /* Reserved */
    vuint32_t FDEN:1;                  /* CAN FD operation enable */
    vuint32_t AEN:1;                   /* Abort Enable */
    vuint32_t LPRIOEN:1;               /* Local Priority Enable */
    vuint32_t _unused_14:1;            /* Reserved */
    vuint32_t DMA:1;                   /* DMA Enable */
    vuint32_t IRMQ:1;                  /* Individual Rx Masking And Queue Enable */
    vuint32_t SRXDIS:1;                /* Self Reception Disable */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t LPMACK:1;                /* Low-Power Mode Acknowledge */
    vuint32_t WRNEN:1;                 /* Warning Interrupt Enable */
    vuint32_t _unused_22:1;            /* Reserved */
    vuint32_t SUPV:1;                  /* Supervisor Mode */
    vuint32_t FRZACK:1;                /* Freeze Mode Acknowledge */
    vuint32_t SOFTRST:1;               /* Soft Reset */
    vuint32_t _unused_26:1;            /* Reserved */
    vuint32_t NOTRDY:1;                /* FlexCAN Not Ready */
    vuint32_t HALT:1;                  /* Halt FlexCAN */
    vuint32_t RFEN:1;                  /* Rx FIFO Enable */
    vuint32_t FRZ:1;                   /* Freeze Enable */
    vuint32_t MDIS:1;                  /* Module Disable */
  } B;
} FlexCAN_2_MCR_tag;

typedef union FlexCAN_2_CTRL1_union_tag { /* Control 1 register */
  vuint32_t R;
  struct {
    vuint32_t PROPSEG:3;               /* Propagation Segment */
    vuint32_t LOM:1;                   /* Listen-Only Mode */
    vuint32_t LBUF:1;                  /* Lowest Buffer Transmitted First */
    vuint32_t TSYN:1;                  /* Timer Sync */
    vuint32_t BOFFREC:1;               /* Bus Off Recovery */
    vuint32_t SMP:1;                   /* CAN Bit Sampling */
    vuint32_t _unused_8:1;             /* Reserved */
    vuint32_t _unused_9:1;             /* Reserved */
    vuint32_t RWRNMSK:1;               /* Rx Warning Interrupt Mask */
    vuint32_t TWRNMSK:1;               /* Tx Warning Interrupt Mask */
    vuint32_t LPB:1;                   /* Loop Back Mode */
    vuint32_t _unused_13:1;            /* Reserved */
    vuint32_t ERRMSK:1;                /* Error Interrupt Mask */
    vuint32_t BOFFMSK:1;               /* Bus Off Interrupt Mask */
    vuint32_t PSEG2:3;                 /* Phase Segment 2 */
    vuint32_t PSEG1:3;                 /* Phase Segment 1 */
    vuint32_t RJW:2;                   /* Resync Jump Width */
    vuint32_t PRESDIV:8;               /* Prescaler Division Factor */
  } B;
} FlexCAN_2_CTRL1_tag;

typedef union FlexCAN_2_TIMER_union_tag { /* Free Running Timer */
  vuint32_t R;
  struct {
    vuint32_t TIMER:16;                /* Timer Value */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} FlexCAN_2_TIMER_tag;

typedef union FlexCAN_2_RXMGMASK_union_tag { /* Rx Mailboxes Global Mask register */
  vuint32_t R;
  struct {
    vuint32_t MG:32;                   /* Rx Mailboxes Global Mask Bits */
  } B;
} FlexCAN_2_RXMGMASK_tag;

typedef union FlexCAN_2_RX14MASK_union_tag { /* Rx 14 Mask register */
  vuint32_t R;
  struct {
    vuint32_t RX14M:32;                /* Rx Buffer 14 Mask Bits */
  } B;
} FlexCAN_2_RX14MASK_tag;

typedef union FlexCAN_2_RX15MASK_union_tag { /* Rx 15 Mask register */
  vuint32_t R;
  struct {
    vuint32_t RX15M:32;                /* Rx Buffer 15 Mask Bits */
  } B;
} FlexCAN_2_RX15MASK_tag;

typedef union FlexCAN_2_ECR_union_tag { /* Error Counter */
  vuint32_t R;
  struct {
    vuint32_t TXERRCNT:8;              /* Transmit Error Counter */
    vuint32_t RXERRCNT:8;              /* Receive Error Counter */
    vuint32_t TXERRCNT_FAST:8;         /* Transmit Error Counter for fast bits */
    vuint32_t RXERRCNT_FAST:8;         /* Receive Error Counter for fast bits */
  } B;
} FlexCAN_2_ECR_tag;

typedef union FlexCAN_2_ESR1_union_tag { /* Error and Status 1 register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t ERRINT:1;                /* Error Interrupt */
    vuint32_t BOFFINT:1;               /* Bus Off Interrupt */
    vuint32_t RX:1;                    /* FlexCAN In Reception */
    vuint32_t FLTCONF:2;               /* Fault Confinement State */
    vuint32_t TX:1;                    /* FlexCAN In Transmission */
    vuint32_t IDLE:1;                  /* IDLE */
    vuint32_t RXWRN:1;                 /* Rx Error Warning */
    vuint32_t TXWRN:1;                 /* TX Error Warning */
    vuint32_t STFERR:1;                /* Stuffing Error */
    vuint32_t FRMERR:1;                /* Form Error */
    vuint32_t CRCERR:1;                /* Cyclic Redundancy Check Error */
    vuint32_t ACKERR:1;                /* Acknowledge Error */
    vuint32_t BIT0ERR:1;               /* Bit0 Error */
    vuint32_t BIT1ERR:1;               /* Bit1 Error */
    vuint32_t RWRNINT:1;               /* Rx Warning Interrupt Flag */
    vuint32_t TWRNINT:1;               /* Tx Warning Interrupt Flag */
    vuint32_t SYNCH:1;                 /* CAN Synchronization Status */
    vuint32_t BOFFDONEINT:1;           /* Bus Off Done Interrupt */
    vuint32_t ERRINT_FAST:1;           /* Error interrupt for errors detected in Data Phase of CAN FD frames with BRS bit set */
    vuint32_t ERROVR:1;                /* Error Overrun */
    vuint32_t _unused_22:4;            /* Reserved */
    vuint32_t STFERR_FAST:1;           /* Stuffing Error in the Data Phase of CAN FD frames with the BRS bit set */
    vuint32_t FRMERR_FAST:1;           /* Form Error in the Data Phase of CAN FD frames with the BRS bit set */
    vuint32_t CRCERR_FAST:1;           /* Cyclic Redundancy Check Error in the CRC field of CAN FD frames with the BRS bit set */
    vuint32_t _unused_29:1;            /* Reserved */
    vuint32_t BIT0ERR_FAST:1;          /* Bit0 Error in the Data Phase of CAN FD frames with the BRS bit set */
    vuint32_t BIT1ERR_FAST:1;          /* Bit1 Error in the Data Phase of CAN FD frames with the BRS bit set */
  } B;
} FlexCAN_2_ESR1_tag;

typedef union FlexCAN_2_IMASK2_union_tag { /* Interrupt Masks 2 register */
  vuint32_t R;
  struct {
    vuint32_t BUF63TO32M:32;           /* Buffer MBi Mask */
  } B;
} FlexCAN_2_IMASK2_tag;

typedef union FlexCAN_2_IMASK1_union_tag { /* Interrupt Masks 1 register */
  vuint32_t R;
  struct {
    vuint32_t BUF31TO0M:32;            /* Buffer MBi Mask */
  } B;
} FlexCAN_2_IMASK1_tag;

typedef union FlexCAN_2_IFLAG2_union_tag { /* Interrupt Flags 2 register */
  vuint32_t R;
  struct {
    vuint32_t BUF63TO32I:32;           /* Buffer MBi Interrupt */
  } B;
} FlexCAN_2_IFLAG2_tag;

typedef union FlexCAN_2_IFLAG1_union_tag { /* Interrupt Flags 1 register */
  vuint32_t R;
  struct {
    vuint32_t BUF0I:1;                 /* Buffer MB0 Interrupt Or Clear FIFO bit */
    vuint32_t BUF4TO1I:4;              /* Buffer MBi Interrupt Or Reserved */
    vuint32_t BUF5I:1;                 /* Buffer MB5 Interrupt Or Frames available in Rx FIFO */
    vuint32_t BUF6I:1;                 /* Buffer MB6 Interrupt Or Rx FIFO Warning */
    vuint32_t BUF7I:1;                 /* Buffer MB7 Interrupt Or Rx FIFO Overflow */
    vuint32_t BUF31TO8I:24;            /* Buffer MBi Interrupt */
  } B;
} FlexCAN_2_IFLAG1_tag;

typedef union FlexCAN_2_CTRL2_union_tag { /* Control 2 register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:6;             /* Reserved */
    vuint32_t TSTAMPCAP:2;             /* Time Stamp Capture Point */
    vuint32_t MBTSBASE:2;              /* Message Buffer Time Stamp Base */
    vuint32_t _unused_10:1;            /* Reserved */
    vuint32_t EDFLTDIS:1;              /* Edge Filter Disable */
    vuint32_t ISOCANFDEN:1;            /* ISO CAN FD Enable */
    vuint32_t BTE:1;                   /* Bit Timing Expansion enable */
    vuint32_t PREXCEN:1;               /* Protocol Exception Enable */
    vuint32_t TIMER_SRC:1;             /* Timer Source */
    vuint32_t EACEN:1;                 /* Entire Frame Arbitration Field Comparison Enable For Rx Mailboxes */
    vuint32_t RRS:1;                   /* Remote Request Storing */
    vuint32_t MRP:1;                   /* Mailboxes Reception Priority */
    vuint32_t TASD:5;                  /* Tx Arbitration Start Delay */
    vuint32_t RFFN:4;                  /* Number Of Rx FIFO Filters */
    vuint32_t WRMFRZ:1;                /* Write-Access To Memory In Freeze Mode */
    vuint32_t ECRWRE:1;                /* Error-correction Configuration Register Write Enable */
    vuint32_t BOFFDONEMSK:1;           /* Bus Off Done Interrupt Mask */
    vuint32_t ERRMSK_FAST:1;           /* Error Interrupt Mask for errors detected in the data phase of fast CAN FD frames */
  } B;
} FlexCAN_2_CTRL2_tag;

typedef union FlexCAN_2_ESR2_union_tag { /* Error and Status 2 register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:13;            /* Reserved */
    vuint32_t IMB:1;                   /* Inactive Mailbox */
    vuint32_t VPS:1;                   /* Valid Priority Status */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t LPTM:7;                  /* Lowest Priority Tx Mailbox */
    vuint32_t _unused_23:9;            /* Reserved */
  } B;
} FlexCAN_2_ESR2_tag;

typedef union FlexCAN_2_CRCR_union_tag { /* CRC register */
  vuint32_t R;
  struct {
    vuint32_t TXCRC:15;                /* Transmitted CRC value */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t MBCRC:7;                 /* CRC Mailbox */
    vuint32_t _unused_23:9;            /* Reserved */
  } B;
} FlexCAN_2_CRCR_tag;

typedef union FlexCAN_2_RXFGMASK_union_tag { /* Rx FIFO Global Mask register */
  vuint32_t R;
  struct {
    vuint32_t FGM:32;                  /* Rx FIFO Global Mask Bits */
  } B;
} FlexCAN_2_RXFGMASK_tag;

typedef union FlexCAN_2_RXFIR_union_tag { /* Rx FIFO Information register */
  vuint32_t R;
  struct {
    vuint32_t IDHIT:9;                 /* Identifier Acceptance Filter Hit Indicator */
    vuint32_t _unused_9:23;            /* Reserved */
  } B;
} FlexCAN_2_RXFIR_tag;

typedef union FlexCAN_2_CBT_union_tag { /* CAN Bit Timing register */
  vuint32_t R;
  struct {
    vuint32_t EPSEG2:5;                /* Extended Phase Segment 2 */
    vuint32_t EPSEG1:5;                /* Extended Phase Segment 1 */
    vuint32_t EPROPSEG:6;              /* Extended Propagation Segment */
    vuint32_t ERJW:5;                  /* Extended Resync Jump Width */
    vuint32_t EPRESDIV:10;             /* Extended Prescaler Division Factor */
    vuint32_t BTF:1;                   /* Bit Timing Format Enable */
  } B;
} FlexCAN_2_CBT_tag;

typedef union FlexCAN_2_MB_CS_union_tag { /* Message Buffer 0 CS Register */
  vuint32_t R;
  struct {
    vuint32_t TIMESTAMP:16;            /* Free-Running Counter Time stamp. This 16-bit field is a copy of the Free-Running Timer, captured for Tx and Rx frames at the time when the beginning of the Identifier field appears on the CAN bus. */
	vuint32_t DLC:4;                   /* Length of the data to be stored/transmitted. */
	vuint32_t RTR:1;                   /* Remote Transmission Request. One/zero for remote/data frame. */
	vuint32_t IDE:1;                   /* ID Extended. One/zero for extended/standard format frame. */
	vuint32_t SRR:1;                   /* Substitute Remote Request. Contains a fixed recessive bit. */
    vuint32_t _unused_23:1;
    vuint32_t CODE:4;                  /* Message Buffer Code */
    vuint32_t _unused_28:1;
	vuint32_t ESI:1;                   /*  Error State Indicator */
	vuint32_t BRS:1;                   /* Bit Rate Switch */
    vuint32_t EDL:1;                   /* Extended Data Length */
  } B;
} FlexCAN_2_MB_CS_tag;

typedef union FlexCAN_2_MB_ID_union_tag { /* Message Buffer 0 ID Register */
  vuint32_t R;
  struct {
    vuint32_t ID_EXT:18;               /* Frame Identifier Extended */
    vuint32_t ID_STD:11;               /* Frame Identifier Standard */
    vuint32_t PRIO:3;                  /* Local Priority */
  } B;
} FlexCAN_2_MB_ID_tag;

typedef union FlexCAN_2_MB_DATA_union_tag {
    vuint8_t B[8];
    vuint16_t H[4];
    vuint32_t W[2];
} FlexCAN_2_MB_DATA_tag;

typedef struct FlexCAN_2_MB_struct_tag {
   FlexCAN_2_MB_CS_tag CS;                    /* Message Buffer 0 CS Register */
   FlexCAN_2_MB_ID_tag ID;                    /* Message Buffer 0 ID Register */
   FlexCAN_2_MB_DATA_tag DATA;
} FlexCAN_2_MB_tag;

typedef union FlexCAN_2_RXIMR_union_tag { /* Rx Individual Mask registers */
  vuint32_t R;
  struct {
    vuint32_t MI:32;                   /* Individual Mask Bits */
  } B;
} FlexCAN_2_RXIMR_tag;

typedef union FlexCAN_2_MECR_union_tag { /* Memory Error Control register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:7;             /* Reserved */
    vuint32_t NCEFAFRZ:1;              /* Non-Correctable Errors In FlexCAN Access Put Device In Freeze Mode */
    vuint32_t ECCDIS:1;                /* Error Correction Disable */
    vuint32_t RERRDIS:1;               /* Error Report Disable */
    vuint32_t _unused_10:3;            /* Reserved */
    vuint32_t EXTERRIE:1;              /* Extended Error Injection Enable */
    vuint32_t FAERRIE:1;               /* FlexCAN Access Error Injection Enable */
    vuint32_t HAERRIE:1;               /* Host Access Error Injection Enable */
    vuint32_t CEI_MSK:1;               /* Correctable Errors Interrupt Mask */
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t FANCEI_MSK:1;            /* FlexCAN Access With Non-Correctable Errors Interrupt Mask */
    vuint32_t HANCEI_MSK:1;            /* Host Access With Non-Correctable Errors Interrupt Mask */
    vuint32_t _unused_20:11;           /* Reserved */
    vuint32_t ECRWRDIS:1;              /* Error Configuration Register Write Disable */
  } B;
} FlexCAN_2_MECR_tag;

typedef union FlexCAN_2_ERRIAR_union_tag { /* Error Injection Address register */
  vuint32_t R;
  struct {
    vuint32_t INJADDR_L:2;             /* Error Injection Address Low */
    vuint32_t INJADDR_H:12;            /* Error Injection Address High */
    vuint32_t _unused_14:18;           /* Reserved */
  } B;
} FlexCAN_2_ERRIAR_tag;

typedef union FlexCAN_2_ERRIDPR_union_tag { /* Error Injection Data Pattern register */
  vuint32_t R;
  struct {
    vuint32_t DFLIP:32;                /* Data flip pattern */
  } B;
} FlexCAN_2_ERRIDPR_tag;

typedef union FlexCAN_2_ERRIPPR_union_tag { /* Error Injection Parity Pattern register */
  vuint32_t R;
  struct {
    vuint32_t PFLIP0:5;                /* Parity Flip Pattern For Byte 0 (Least Significant) */
    vuint32_t _unused_5:3;             /* Reserved */
    vuint32_t PFLIP1:5;                /* Parity Flip Pattern For Byte 1 */
    vuint32_t _unused_13:3;            /* Reserved */
    vuint32_t PFLIP2:5;                /* Parity Flip Pattern For Byte 2 */
    vuint32_t _unused_21:3;            /* Reserved */
    vuint32_t PFLIP3:5;                /* Parity Flip Pattern For Byte 3 (most significant) */
    vuint32_t _unused_29:3;            /* Reserved */
  } B;
} FlexCAN_2_ERRIPPR_tag;

typedef union FlexCAN_2_RERRAR_union_tag { /* Error Report Address register */
  vuint32_t R;
  struct {
    vuint32_t ERRADDR:14;              /* Address Where Error Detected */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t SAID:3;                  /* SAID */
    vuint32_t _unused_19:5;            /* Reserved */
    vuint32_t NCE:1;                   /* Non-Correctable Error */
    vuint32_t _unused_25:7;            /* Reserved */
  } B;
} FlexCAN_2_RERRAR_tag;

typedef union FlexCAN_2_RERRDR_union_tag { /* Error Report Data register */
  vuint32_t R;
  struct {
    vuint32_t RDATA:32;                /* Raw data word read from memory with error */
  } B;
} FlexCAN_2_RERRDR_tag;

typedef union FlexCAN_2_RERRSYNR_union_tag { /* Error Report Syndrome register */
  vuint32_t R;
  struct {
    vuint32_t SYND0:5;                 /* Error Syndrome For Byte 0 (least significant) */
    vuint32_t _unused_5:2;             /* Reserved */
    vuint32_t BE0:1;                   /* Byte Enabled For Byte 0 (least significant) */
    vuint32_t SYND1:5;                 /* Error Syndrome for Byte 1 */
    vuint32_t _unused_13:2;            /* Reserved */
    vuint32_t BE1:1;                   /* Byte Enabled For Byte 1 */
    vuint32_t SYND2:5;                 /* Error Syndrome For Byte 2 */
    vuint32_t _unused_21:2;            /* Reserved */
    vuint32_t BE2:1;                   /* Byte Enabled For Byte 2 */
    vuint32_t SYND3:5;                 /* Error Syndrome For Byte 3 (most significant) */
    vuint32_t _unused_29:2;            /* Reserved */
    vuint32_t BE3:1;                   /* Byte Enabled For Byte 3 (most significant) */
  } B;
} FlexCAN_2_RERRSYNR_tag;

typedef union FlexCAN_2_ERRSR_union_tag { /* Error Status register */
  vuint32_t R;
  struct {
    vuint32_t CEIOF:1;                 /* Correctable Error Interrupt Overrun Flag */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t FANCEIOF:1;              /* FlexCAN Access With Non-Correctable Error Interrupt Overrun Flag */
    vuint32_t HANCEIOF:1;              /* Host Access With Non-Correctable Error Interrupt Overrun Flag */
    vuint32_t _unused_4:12;            /* Reserved */
    vuint32_t CEIF:1;                  /* Correctable Error Interrupt Flag */
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t FANCEIF:1;               /* FlexCAN Access With Non-Correctable Error Interrupt Flag */
    vuint32_t HANCEIF:1;               /* Host Access With Non-Correctable Error Interrupt Flag */
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} FlexCAN_2_ERRSR_tag;

typedef union FlexCAN_2_EPRS_union_tag { /* Enhanced CAN Bit Timing Prescalers */
  vuint32_t R;
  struct {
    vuint32_t ENPRESDIV:10;            /* Extended Nominal Prescaler Division Factor */
    vuint32_t _unused_10:6;            /* Reserved. */
    vuint32_t EDPRESDIV:10;            /* Extended Data Phase Prescaler Division Factor */
    vuint32_t _unused_26:6;
  } B;
} FlexCAN_2_EPRS_tag;

typedef union FlexCAN_2_ENCBT_union_tag { /* Enhanced Nominal CAN Bit Timing */
  vuint32_t R;
  struct {
    vuint32_t NTSEG1:8;                /* Nominal Time Segment 1 */
    vuint32_t _unused_8:4;
    vuint32_t NTSEG2:7;                /* Nominal Time Segment 2 */
    vuint32_t _unused_19:3;
    vuint32_t NRJW:7;                  /* Nominal Resynchronization Jump Width */
    vuint32_t _unused_29:3;
  } B;
} FlexCAN_2_ENCBT_tag;

typedef union FlexCAN_2_EDCBT_union_tag { /* Enhanced Data Phase CAN bit Timing */
  vuint32_t R;
  struct {
    vuint32_t DTSEG1:5;                /* Data Phase Segment 1 */
    vuint32_t _unused_5:7;
    vuint32_t DTSEG2:4;                /* Data Phase Time Segment 2 */
    vuint32_t _unused_16:6;
    vuint32_t DRJW:4;                  /* Data Phase Resynchronization Jump Width */
    vuint32_t _unused_26:6;
  } B;
} FlexCAN_2_EDCBT_tag;

typedef union FlexCAN_2_ETDC_union_tag { /* Enhanced Transceiver Delay Compensation */
  vuint32_t R;
  struct {
    vuint32_t ETDCVAL:8;               /* Enhanced Transceiver Delay Compensation Value */
    vuint32_t _unused_8:7;
    vuint32_t ETDCFAIL:1;              /* Transceiver Delay Compensation Fail */
    vuint32_t ETDCOFF:7;               /* Enhanced Transceiver Delay Compensation Offset */
    vuint32_t _unused_23:7;
    vuint32_t TDMDIS:1;                /* Transceiver Delay Measurement Disable */
    vuint32_t ETDCEN:1;                /* Transceiver Delay Compensation Enable */
  } B;
} FlexCAN_2_ETDC_tag;

typedef union FlexCAN_2_FDCTRL_union_tag { /* CAN FD Control register */
  vuint32_t R;
  struct {
    vuint32_t TDCVAL:6;                /* Transceiver Delay Compensation Value */
    vuint32_t _unused_6:2;             /* Reserved */
    vuint32_t TDCOFF:5;                /* Transceiver Delay Compensation Offset */
    vuint32_t _unused_13:1;            /* Reserved */
    vuint32_t TDCFAIL:1;               /* Transceiver Delay Compensation Fail */
    vuint32_t TDCEN:1;                 /* Transceiver Delay Compensation Enable */
    vuint32_t MBDSR0:2;                /* Message Buffer Data Size for Region 0 */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t MBDSR1:2;                /* Message Buffer Data Size for Region 1 */
    vuint32_t _unused_21:1;            /* Reserved */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t _unused_25:2;            /* Reserved */
    vuint32_t _unused_27:4;            /* Reserved */
    vuint32_t FDRATE:1;                /* Bit Rate Switch Enable */
  } B;
} FlexCAN_2_FDCTRL_tag;

typedef union FlexCAN_2_FDCBT_union_tag { /* CAN FD Bit Timing register */
  vuint32_t R;
  struct {
    vuint32_t FPSEG2:3;                /* Fast Phase Segment 2 */
    vuint32_t _unused_3:2;             /* Reserved */
    vuint32_t FPSEG1:3;                /* Fast Phase Segment 1 */
    vuint32_t _unused_8:2;             /* Reserved */
    vuint32_t FPROPSEG:5;              /* Fast Propagation Segment */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t FRJW:3;                  /* Fast Resync Jump Width */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t FPRESDIV:10;             /* Fast Prescaler Division Factor */
    vuint32_t _unused_30:2;            /* Reserved */
  } B;
} FlexCAN_2_FDCBT_tag;

typedef union FlexCAN_2_FDCRC_union_tag { /* CAN FD CRC register */
  vuint32_t R;
  struct {
    vuint32_t FD_TXCRC:21;             /* Extended Transmitted CRC value */
    vuint32_t _unused_21:3;            /* Reserved */
    vuint32_t FD_MBCRC:7;              /* CRC Mailbox Number for FD_TXCRC */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} FlexCAN_2_FDCRC_tag;

typedef union FlexCAN_2_HR_TIME_STAMP_union_tag { /* High Resolution Time Stamp */
  vuint32_t R;
  struct {
    vuint32_t TS:32;                   /* High Resolution Time Stamp */
  } B;
} FlexCAN_2_HR_TIME_STAMP_tag;

struct FlexCAN_2_tag {
  FlexCAN_2_MCR_tag MCR;               /* Module Configuration register */
  FlexCAN_2_CTRL1_tag CTRL1;           /* Control 1 register */
  FlexCAN_2_TIMER_tag TIMER;           /* Free Running Timer */
  uint8_t FlexCAN_2_reserved0[4];
  FlexCAN_2_RXMGMASK_tag RXMGMASK;     /* Rx Mailboxes Global Mask register */
  FlexCAN_2_RX14MASK_tag RX14MASK;     /* Rx 14 Mask register */
  FlexCAN_2_RX15MASK_tag RX15MASK;     /* Rx 15 Mask register */
  FlexCAN_2_ECR_tag ECR;               /* Error Counter */
  FlexCAN_2_ESR1_tag ESR1;             /* Error and Status 1 register */
  FlexCAN_2_IMASK2_tag IMASK2;         /* Interrupt Masks 2 register */
  FlexCAN_2_IMASK1_tag IMASK1;         /* Interrupt Masks 1 register */
  FlexCAN_2_IFLAG2_tag IFLAG2;         /* Interrupt Flags 2 register */
  FlexCAN_2_IFLAG1_tag IFLAG1;         /* Interrupt Flags 1 register */
  FlexCAN_2_CTRL2_tag CTRL2;           /* Control 2 register */
  FlexCAN_2_ESR2_tag ESR2;             /* Error and Status 2 register */
  uint8_t FlexCAN_2_reserved1[8];
  FlexCAN_2_CRCR_tag CRCR;             /* CRC register */
  FlexCAN_2_RXFGMASK_tag RXFGMASK;     /* Rx FIFO Global Mask register */
  FlexCAN_2_RXFIR_tag RXFIR;           /* Rx FIFO Information register */
  FlexCAN_2_CBT_tag CBT;               /* CAN Bit Timing register */
  uint8_t FlexCAN_2_reserved2[44];
  FlexCAN_2_MB_tag MB[64];
  uint8_t FlexCAN_2_reserved3[1024];
  FlexCAN_2_RXIMR_tag RXIMR[64];       /* Rx Individual Mask registers */
  uint8_t FlexCAN_2_reserved4[352];
  FlexCAN_2_MECR_tag MECR;             /* Memory Error Control register */
  FlexCAN_2_ERRIAR_tag ERRIAR;         /* Error Injection Address register */
  FlexCAN_2_ERRIDPR_tag ERRIDPR;       /* Error Injection Data Pattern register */
  FlexCAN_2_ERRIPPR_tag ERRIPPR;       /* Error Injection Parity Pattern register */
  FlexCAN_2_RERRAR_tag RERRAR;         /* Error Report Address register */
  FlexCAN_2_RERRDR_tag RERRDR;         /* Error Report Data register */
  FlexCAN_2_RERRSYNR_tag RERRSYNR;     /* Error Report Syndrome register */
  FlexCAN_2_ERRSR_tag ERRSR;           /* Error Status register */
  uint8_t FlexCAN_2_reserved5[240];
  FlexCAN_2_EPRS_tag EPRS;             /* Enhanced CAN Bit Timing Prescalers */
  FlexCAN_2_ENCBT_tag ENCBT;           /* Enhanced Nominal CAN Bit Timing */
  FlexCAN_2_EDCBT_tag EDCBT;           /* Enhanced Data Phase CAN bit Timing */
  FlexCAN_2_ETDC_tag ETDC;             /* Enhanced Transceiver Delay Compensation */
  FlexCAN_2_FDCTRL_tag FDCTRL;         /* CAN FD Control register */
  FlexCAN_2_FDCBT_tag FDCBT;           /* CAN FD Bit Timing register */
  FlexCAN_2_FDCRC_tag FDCRC;           /* CAN FD CRC register */
  uint8_t FlexCAN_2_reserved6[36];
  FlexCAN_2_HR_TIME_STAMP_tag HR_TIME_STAMP[64]; /* High Resolution Time Stamp */
};


/* ============================================================================
   =============================== Module: INTM ===============================
   ============================================================================ */

typedef union INTM_INTM_MM_union_tag { /* Monitor Mode */
  vuint32_t R;
  struct {
    vuint32_t MM:1;                    /* Enable */
    vuint32_t _unused_1:31;
  } B;
} INTM_INTM_MM_tag;

typedef union INTM_INTM_IACK_union_tag { /* Interrupt Acknowledge */
  vuint32_t R;
  struct {
    vuint32_t IRQ:10;
    vuint32_t _unused_10:22;
  } B;
} INTM_INTM_IACK_tag;

typedef union INTM_MON_INTM_IRQSEL_union_tag { /* Interrupt Request Select 0 */
  vuint32_t R;
  struct {
    vuint32_t IRQ:10;
    vuint32_t _unused_10:22;
  } B;
} INTM_MON_INTM_IRQSEL_tag;

typedef union INTM_MON_INTM_LATENCY_union_tag { /* INTM_LATENCY0 */
  vuint32_t R;
  struct {
    vuint32_t LAT:24;
    vuint32_t _unused_24:8;
  } B;
} INTM_MON_INTM_LATENCY_tag;

typedef union INTM_MON_INTM_TIMER_union_tag { /* Timer 0 */
  vuint32_t R;
  struct {
    vuint32_t TIMER:24;
    vuint32_t _unused_24:8;
  } B;
} INTM_MON_INTM_TIMER_tag;

typedef union INTM_MON_INTM_STATUS_union_tag { /* Status 0 */
  vuint32_t R;
  struct {
    vuint32_t STATUS:1;                /* Monitor status */
    vuint32_t _unused_1:31;
  } B;
} INTM_MON_INTM_STATUS_tag;

typedef struct INTM_MON_struct_tag {
  INTM_MON_INTM_IRQSEL_tag INTM_IRQSEL; /* Interrupt Request Select 0 */
  INTM_MON_INTM_LATENCY_tag INTM_LATENCY; /* INTM_LATENCY0 */
  INTM_MON_INTM_TIMER_tag INTM_TIMER;  /* Timer 0 */
  INTM_MON_INTM_STATUS_tag INTM_STATUS; /* Status 0 */
} INTM_MON_tag;

struct INTM_tag {
  INTM_INTM_MM_tag INTM_MM;            /* Monitor Mode */
  INTM_INTM_IACK_tag INTM_IACK;        /* Interrupt Acknowledge */
  INTM_MON_tag MON[4];
};


/* ============================================================================
   =============================== Module: JDC ================================
   ============================================================================ */

typedef union JDC_MCR_union_tag {      /* Module Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t JOUT_IEN:1;              /* JOUT Interrupt Enable. */
    vuint32_t _unused_1:15;            /* Reserved */
    vuint32_t JIN_IEN:1;               /* JIN Interrupt Enable. */
    vuint32_t _unused_17:15;           /* Reserved */
  } B;
} JDC_MCR_tag;

typedef union JDC_MSR_union_tag {      /* Module Status Register */
  vuint32_t R;
  struct {
    vuint32_t JOUT_INT:1;              /* JOUT Interrupt. */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t JOUT_RDY:1;              /* JOUT Ready (read only). */
    vuint32_t _unused_3:13;            /* Reserved */
    vuint32_t JIN_INT:1;               /* JIN Interrupt. */
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t JIN_RDY:1;               /* JIN Ready (read only). */
    vuint32_t _unused_19:13;           /* Reserved */
  } B;
} JDC_MSR_tag;

typedef union JDC_JOUT_IPS_union_tag { /* JTAG Output Data Register */
  vuint32_t R;
  struct {
    vuint32_t DATA:32;                 /* JOUT_IPS data. */
  } B;
} JDC_JOUT_IPS_tag;

typedef union JDC_JIN_IPS_union_tag {  /* JTAG Input Data Register */
  vuint32_t R;
  struct {
    vuint32_t DATA:32;                 /* JIN_IPS data. */
  } B;
} JDC_JIN_IPS_tag;

struct JDC_tag {
  JDC_MCR_tag MCR;                     /* Module Configuration Register */
  JDC_MSR_tag MSR;                     /* Module Status Register */
  JDC_JOUT_IPS_tag JOUT_IPS;           /* JTAG Output Data Register */
  JDC_JIN_IPS_tag JIN_IPS;             /* JTAG Input Data Register */
};


/* ============================================================================
   =============================== Module: LCU ================================
   ============================================================================ */

typedef union LCU_LC_LUTCTRL0_union_tag { /* LC 0 Output 0 LUT Control */
  vuint32_t R;
  struct {
    vuint32_t LUTCTRL:16;              /* LUT Control */
    vuint32_t _unused_16:16;
  } B;
} LCU_LC_LUTCTRL0_tag;

typedef union LCU_LC_LUTCTRL1_union_tag { /* LC 0 Output 1 LUT Control */
  vuint32_t R;
  struct {
    vuint32_t LUTCTRL:16;              /* LUT Control */
    vuint32_t _unused_16:16;
  } B;
} LCU_LC_LUTCTRL1_tag;

typedef union LCU_LC_LUTCTRL2_union_tag { /* LC 0 Output 2 LUT Control */
  vuint32_t R;
  struct {
    vuint32_t LUTCTRL:16;              /* LUT Control */
    vuint32_t _unused_16:16;
  } B;
} LCU_LC_LUTCTRL2_tag;

typedef union LCU_LC_LUTCTRL3_union_tag { /* LC 0 Output 3 LUT Control */
  vuint32_t R;
  struct {
    vuint32_t LUTCTRL:16;              /* LUT Control */
    vuint32_t _unused_16:16;
  } B;
} LCU_LC_LUTCTRL3_tag;

typedef union LCU_LC_FILT0_union_tag { /* LC 0 Output 0 Filter */
  vuint32_t R;
  struct {
    vuint32_t LUT_FALL_FILT:16;        /* Fall Filter */
    vuint32_t LUT_RISE_FILT:16;        /* Rise Filter */
  } B;
} LCU_LC_FILT0_tag;

typedef union LCU_LC_FILT1_union_tag { /* LC 0 Output 1 Filter */
  vuint32_t R;
  struct {
    vuint32_t LUT_FALL_FILT:16;        /* Fall Filter */
    vuint32_t LUT_RISE_FILT:16;        /* Rise Filter */
  } B;
} LCU_LC_FILT1_tag;

typedef union LCU_LC_FILT2_union_tag { /* LC 0 Output 2 Filter */
  vuint32_t R;
  struct {
    vuint32_t LUT_FALL_FILT:16;        /* Fall Filter */
    vuint32_t LUT_RISE_FILT:16;        /* Rise Filter */
  } B;
} LCU_LC_FILT2_tag;

typedef union LCU_LC_FILT3_union_tag { /* LC 0 Output 3 Filter */
  vuint32_t R;
  struct {
    vuint32_t LUT_FALL_FILT:16;        /* Fall Filter */
    vuint32_t LUT_RISE_FILT:16;        /* Rise Filter */
  } B;
} LCU_LC_FILT3_tag;

typedef union LCU_LC_INTDMAEN_union_tag { /* LC 0 Interrupt and DMA Enable */
  vuint32_t R;
  struct {
    vuint32_t LUT_INT_EN:4;            /* LUT Interrupt Enable */
    vuint32_t _unused_4:4;
    vuint32_t LUT_DMA_EN:4;            /* LUT DMA Enable */
    vuint32_t _unused_12:4;
    vuint32_t FORCE_INT_EN:4;          /* Force Interrupt Enable */
    vuint32_t _unused_20:4;
    vuint32_t FORCE_DMA_EN:4;          /* Force DMA Enable */
    vuint32_t _unused_28:4;
  } B;
} LCU_LC_INTDMAEN_tag;

typedef union LCU_LC_STS_union_tag {   /* LC 0 Status */
  vuint32_t R;
  struct {
    vuint32_t LUT_STS:4;               /* LUT Event */
    vuint32_t _unused_4:4;
    vuint32_t FORCESTS:4;              /* Force Event */
    vuint32_t _unused_12:20;
  } B;
} LCU_LC_STS_tag;

typedef union LCU_LC_OUTPOL_union_tag { /* LC 0 Output Polarity Control */
  vuint32_t R;
  struct {
    vuint32_t OUTPOL:4;                /* Output Polarity */
    vuint32_t _unused_4:28;
  } B;
} LCU_LC_OUTPOL_tag;

typedef union LCU_LC_FFILT_union_tag { /* LC 0 Force Filter */
  vuint32_t R;
  struct {
    vuint32_t FORCE_FILT:8;            /* Force Filter */
    vuint32_t _unused_8:8;
    vuint32_t FORCE_POL:3;             /* Force Input Polarity */
    vuint32_t _unused_19:5;
    vuint32_t COMB_EN:3;               /* Combinational Force Path (CFP) Enable */
    vuint32_t _unused_27:1;
    vuint32_t COMB_FORCE:4;            /* Combined Sensed Force Input */
  } B;
} LCU_LC_FFILT_tag;

typedef union LCU_LC_FCTRL_union_tag { /* LC 0 Force Control */
  vuint32_t R;
  struct {
    vuint32_t FORCE_SENSE0:4;          /* Force Input Sensitivity */
    vuint32_t FORCE_MODE0:2;           /* Force Clearing Mode */
    vuint32_t SYNC_SEL0:2;             /* Sync Select */
    vuint32_t FORCE_SENSE1:4;          /* Force Input Sensitivity */
    vuint32_t FORCE_MODE1:2;           /* Force Clearing Mode */
    vuint32_t SYNC_SEL1:2;             /* Sync Select */
    vuint32_t FORCE_SENSE2:4;          /* Force Input Sensitivity */
    vuint32_t FORCE_MODE2:2;           /* Force Clearing Mode */
    vuint32_t SYNC_SEL2:2;             /* Sync Select */
    vuint32_t FORCE_SENSE3:4;          /* Force Input Sensitivity */
    vuint32_t FORCE_MODE3:2;           /* Force Clearing Mode */
    vuint32_t SYNC_SEL3:2;             /* Sync Select */
  } B;
} LCU_LC_FCTRL_tag;

typedef union LCU_LC_SCTRL_union_tag { /* LC 0 Sync Control */
  vuint32_t R;
  struct {
    vuint32_t SW_MODE:4;               /* Software Sync Mode */
    vuint32_t _unused_4:4;
    vuint32_t SW_SYNC_SEL:2;           /* Software Sync Select */
    vuint32_t _unused_10:22;
  } B;
} LCU_LC_SCTRL_tag;

typedef struct LCU_LC_struct_tag {
  LCU_LC_LUTCTRL0_tag LUTCTRL0;        /* LC 0 Output 0 LUT Control */
  LCU_LC_LUTCTRL1_tag LUTCTRL1;        /* LC 0 Output 1 LUT Control */
  LCU_LC_LUTCTRL2_tag LUTCTRL2;        /* LC 0 Output 2 LUT Control */
  LCU_LC_LUTCTRL3_tag LUTCTRL3;        /* LC 0 Output 3 LUT Control */
  LCU_LC_FILT0_tag FILT0;              /* LC 0 Output 0 Filter */
  LCU_LC_FILT1_tag FILT1;              /* LC 0 Output 1 Filter */
  LCU_LC_FILT2_tag FILT2;              /* LC 0 Output 2 Filter */
  LCU_LC_FILT3_tag FILT3;              /* LC 0 Output 3 Filter */
  LCU_LC_INTDMAEN_tag INTDMAEN;        /* LC 0 Interrupt and DMA Enable */
  LCU_LC_STS_tag STS;                  /* LC 0 Status */
  LCU_LC_OUTPOL_tag OUTPOL;            /* LC 0 Output Polarity Control */
  LCU_LC_FFILT_tag FFILT;              /* LC 0 Force Filter */
  LCU_LC_FCTRL_tag FCTRL;              /* LC 0 Force Control */
  LCU_LC_SCTRL_tag SCTRL;              /* LC 0 Sync Control */
  uint8_t LC_reserved0[8];
} LCU_LC_tag;

typedef union LCU_MUXSEL_union_tag {   /* Mux Select */
  vuint32_t R;
  struct {
    vuint32_t MUXSEL:8;                /* Mux Select */
    vuint32_t _unused_8:24;
  } B;
} LCU_MUXSEL_tag;

typedef union LCU_CFG_union_tag {      /* Configuration */
  vuint32_t R;
  struct {
    vuint32_t WP:1;                    /* Write Protect */
    vuint32_t _unused_1:6;
    vuint32_t INCL_MUXES:1;            /* Input Muxing */
    vuint32_t NUM_SYNCS:8;             /* Sync Inputs */
    vuint32_t NUM_FORCES:8;            /* Force Inputs */
    vuint32_t NUM_LOGIC_CELLS:8;       /* LCs */
  } B;
} LCU_CFG_tag;

typedef union LCU_SWEN_union_tag {     /* Software Override Enable */
  vuint32_t R;
  struct {
    vuint32_t SWEN:12;                 /* Software Override Enable */
    vuint32_t _unused_12:20;
  } B;
} LCU_SWEN_tag;

typedef union LCU_SWVALUE_union_tag {  /* Software Override Value */
  vuint32_t R;
  struct {
    vuint32_t SWVALUE:12;              /* Software Override Value */
    vuint32_t _unused_12:20;
  } B;
} LCU_SWVALUE_tag;

typedef union LCU_OUTEN_union_tag {    /* Output Enable */
  vuint32_t R;
  struct {
    vuint32_t OUTEN:12;                /* Output Enables */
    vuint32_t _unused_12:20;
  } B;
} LCU_OUTEN_tag;

typedef union LCU_LCIN_union_tag {     /* Logic Inputs */
  vuint32_t R;
  struct {
    vuint32_t LC_INPUTS:12;            /* Logic Inputs */
    vuint32_t _unused_12:20;
  } B;
} LCU_LCIN_tag;

typedef union LCU_SWOUT_union_tag {    /* Overridden Inputs */
  vuint32_t R;
  struct {
    vuint32_t SWOUT:12;                /* Overridden Inputs */
    vuint32_t _unused_12:20;           /* Reserved */
  } B;
} LCU_SWOUT_tag;

typedef union LCU_LCOUT_union_tag {    /* Logic Outputs */
  vuint32_t R;
  struct {
    vuint32_t LCOUT:12;                /* Logic Outputs */
    vuint32_t _unused_12:20;           /* Reserved */
  } B;
} LCU_LCOUT_tag;

typedef union LCU_FORCEOUT_union_tag { /* Forced Outputs */
  vuint32_t R;
  struct {
    vuint32_t FORCEOUT:12;             /* Forced Outputs */
    vuint32_t _unused_12:20;
  } B;
} LCU_FORCEOUT_tag;

typedef union LCU_FORCESTS_union_tag { /* Force Status */
  vuint32_t R;
  struct {
    vuint32_t FORCESTS:12;             /* Force Status */
    vuint32_t _unused_12:20;
  } B;
} LCU_FORCESTS_tag;

typedef union LCU_DBGEN_union_tag {    /* Debug Mode Enable */
  vuint32_t R;
  struct {
    vuint32_t DBGEN:12;                /* Debug Mode Enable */
    vuint32_t _unused_12:20;
  } B;
} LCU_DBGEN_tag;

struct LCU_tag {
  LCU_LC_tag LC[3];
  uint8_t LCU_reserved0[320];
  LCU_MUXSEL_tag MUXSEL[12];           /* Mux Select */
  uint8_t LCU_reserved1[80];
  LCU_CFG_tag CFG;                     /* Configuration */
  LCU_SWEN_tag SWEN;                   /* Software Override Enable */
  LCU_SWVALUE_tag SWVALUE;             /* Software Override Value */
  LCU_OUTEN_tag OUTEN;                 /* Output Enable */
  LCU_LCIN_tag LCIN;                   /* Logic Inputs */
  LCU_SWOUT_tag SWOUT;                 /* Overridden Inputs */
  LCU_LCOUT_tag LCOUT;                 /* Logic Outputs */
  LCU_FORCEOUT_tag FORCEOUT;           /* Forced Outputs */
  LCU_FORCESTS_tag FORCESTS;           /* Force Status */
  uint8_t LCU_reserved2[4];
  LCU_DBGEN_tag DBGEN;                 /* Debug Mode Enable */
};


/* ============================================================================
   =============================== Module: LPCMP ==============================
   ============================================================================ */

typedef union LPCMP_VERID_union_tag {  /* Version ID Register */
  vuint32_t R;
  struct {
    vuint32_t FEATURE:16;              /* Feature Specification Number */
    vuint32_t MINOR:8;                 /* Minor Version Number */
    vuint32_t MAJOR:8;                 /* Major Version Number */
  } B;
} LPCMP_VERID_tag;

typedef union LPCMP_PARAM_union_tag {  /* Parameter Register */
  vuint32_t R;
  struct {
    vuint32_t DAC_RES:4;               /* DAC Resolution */
    vuint32_t _unused_4:28;
  } B;
} LPCMP_PARAM_tag;

typedef union LPCMP_CCR0_union_tag {   /* Comparator Control Register 0 */
  vuint32_t R;
  struct {
    vuint32_t CMP_EN:1;                /* Comparator Enable */
    vuint32_t CMP_STOP_EN:1;           /* Comparator STANDBY Mode Enable */
    vuint32_t LINKEN:1;                /* CMP-to-DAC Link Enable */
    vuint32_t _unused_3:29;            /* Reserved */
  } B;
} LPCMP_CCR0_tag;

typedef union LPCMP_CCR1_union_tag {   /* Comparator Control Register 1 */
  vuint32_t R;
  struct {
    vuint32_t WINDOW_EN:1;             /* Windowing Enable */
    vuint32_t SAMPLE_EN:1;             /* Sampling Enable */
    vuint32_t DMA_EN:1;                /* DMA Enable */
    vuint32_t COUT_INV:1;              /* Comparator Invert */
    vuint32_t COUT_SEL:1;              /* Comparator Output Select */
    vuint32_t COUT_PEN:1;              /* Comparator Output Pin Enable */
    vuint32_t COUTA_OWEN:1;            /* COUTA_OW Enable */
    vuint32_t COUTA_OW:1;              /* COUTA Output Level for Closed Window */
    vuint32_t WINDOW_INV:1;            /* WINDOW/SAMPLE Signal Invert */
    vuint32_t WINDOW_CLS:1;            /* CMPO Event Window Close */
    vuint32_t EVT_SEL:2;               /* CMPO Event Select */
    vuint32_t _unused_12:4;            /* Reserved */
    vuint32_t FILT_CNT:3;              /* Filter Sample Count */
    vuint32_t _unused_19:5;            /* Reserved */
    vuint32_t FILT_PER:8;              /* Filter Sample Period */
  } B;
} LPCMP_CCR1_tag;

typedef union LPCMP_CCR2_union_tag {   /* Comparator Control Register 2 */
  vuint32_t R;
  struct {
    vuint32_t CMP_HPMD:1;              /* CMP High Power Mode Select */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t OFFSET:1;                /* Comparator Offset Control */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t HYSTCTR:2;               /* Comparator Hysteresis Control */
    vuint32_t _unused_6:10;            /* Reserved */
    vuint32_t PSEL:3;                  /* Plus Input MUX Select */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t MSEL:3;                  /* Minus Input MUX Select */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t INPSEL:2;                /* Input Plus Select */
    vuint32_t _unused_26:2;            /* Reserved */
    vuint32_t INMSEL:2;                /* Input Minus Select */
    vuint32_t _unused_30:2;            /* Reserved */
  } B;
} LPCMP_CCR2_tag;

typedef union LPCMP_DCR_union_tag {    /* DAC Control Register */
  vuint32_t R;
  struct {
    vuint32_t DAC_EN:1;                /* DAC Enable */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t _unused_2:6;             /* Reserved */
    vuint32_t VRSEL:1;                 /* DAC Reference High Voltage Source Select */
    vuint32_t _unused_9:6;             /* Reserved */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t DAC_DATA:8;              /* DAC Output Voltage Select */
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} LPCMP_DCR_tag;

typedef union LPCMP_IER_union_tag {    /* Interrupt Enable Register */
  vuint32_t R;
  struct {
    vuint32_t CFR_IE:1;                /* Comparator Flag Rising Interrupt Enable */
    vuint32_t CFF_IE:1;                /* Comparator Flag Falling Interrupt Enable */
    vuint32_t RRF_IE:1;                /* Round-Robin Flag Interrupt Enable */
    vuint32_t _unused_3:29;            /* Reserved */
  } B;
} LPCMP_IER_tag;

typedef union LPCMP_CSR_union_tag {    /* Comparator Status Register */
  vuint32_t R;
  struct {
    vuint32_t CFR:1;                   /* Analog Comparator Flag Rising */
    vuint32_t CFF:1;                   /* Analog Comparator Flag Falling */
    vuint32_t RRF:1;                   /* Round-Robin Flag */
    vuint32_t _unused_3:5;             /* Reserved */
    vuint32_t COUT:1;                  /* Analog Comparator Output */
    vuint32_t _unused_9:23;            /* Reserved */
  } B;
} LPCMP_CSR_tag;

typedef union LPCMP_RRCR0_union_tag {  /* Round Robin Control Register 0 */
  vuint32_t R;
  struct {
    vuint32_t RR_EN:1;                 /* Round-Robin Enable */
    vuint32_t _unused_1:7;             /* Reserved */
    vuint32_t RR_NSAM:2;               /* Number of Sample Clocks */
    vuint32_t _unused_10:6;            /* Reserved */
    vuint32_t RR_INITMOD:6;            /* Initialization Delay Modulus */
    vuint32_t _unused_22:10;           /* Reserved */
  } B;
} LPCMP_RRCR0_tag;

typedef union LPCMP_RRCR1_union_tag {  /* Round Robin Control Register 1 */
  vuint32_t R;
  struct {
    vuint32_t RR_CH0EN:1;              /* Channel 0 Input Enable in Trigger Mode */
    vuint32_t RR_CH1EN:1;              /* Channel 1 Input Enable in Trigger Mode */
    vuint32_t RR_CH2EN:1;              /* Channel 2 Input Enable in Trigger Mode */
    vuint32_t RR_CH3EN:1;              /* Channel 3 Input Enable in Trigger Mode */
    vuint32_t RR_CH4EN:1;              /* Channel 4 Input Enable in Trigger Mode */
    vuint32_t RR_CH5EN:1;              /* Channel 5 Input Enable in Trigger Mode */
    vuint32_t RR_CH6EN:1;              /* Channel 6 Input Enable in Trigger Mode */
    vuint32_t RR_CH7EN:1;              /* Channel 7 Input Enable in Trigger Mode */
    vuint32_t _unused_8:8;             /* Reserved */
    vuint32_t FIXP:1;                  /* Fixed Port */
    vuint32_t _unused_17:3;            /* Reserved */
    vuint32_t FIXCH:3;                 /* Fixed Channel Select */
    vuint32_t _unused_23:9;            /* Reserved */
  } B;
} LPCMP_RRCR1_tag;

typedef union LPCMP_RRCSR_union_tag {  /* Round Robin Control and Status Register */
  vuint32_t R;
  struct {
    vuint32_t RR_CH0OUT:1;             /* Comparison Result for Channel 0 */
    vuint32_t RR_CH1OUT:1;             /* Comparison Result for Channel 1 */
    vuint32_t RR_CH2OUT:1;             /* Comparison Result for Channel 2 */
    vuint32_t RR_CH3OUT:1;             /* Comparison Result for Channel 3 */
    vuint32_t RR_CH4OUT:1;             /* Comparison Result for Channel 4 */
    vuint32_t RR_CH5OUT:1;             /* Comparison Result for Channel 5 */
    vuint32_t RR_CH6OUT:1;             /* Comparison Result for Channel 6 */
    vuint32_t RR_CH7OUT:1;             /* Comparison Result for Channel 7 */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} LPCMP_RRCSR_tag;

typedef union LPCMP_RRSR_union_tag {   /* Round Robin Status Register */
  vuint32_t R;
  struct {
    vuint32_t RR_CH0F:1;               /* Channel 0 Input Changed Flag */
    vuint32_t RR_CH1F:1;               /* Channel 1 Input Changed Flag */
    vuint32_t RR_CH2F:1;               /* Channel 2 Input Changed Flag */
    vuint32_t RR_CH3F:1;               /* Channel 3 Input Changed Flag */
    vuint32_t RR_CH4F:1;               /* Channel 4 Input Changed Flag */
    vuint32_t RR_CH5F:1;               /* Channel 5 Input Changed Flag */
    vuint32_t RR_CH6F:1;               /* Channel 6 Input Changed Flag */
    vuint32_t RR_CH7F:1;               /* Channel 7 Input Changed Flag */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} LPCMP_RRSR_tag;

struct LPCMP_tag {
  LPCMP_VERID_tag VERID;               /* Version ID Register */
  LPCMP_PARAM_tag PARAM;               /* Parameter Register */
  LPCMP_CCR0_tag CCR0;                 /* Comparator Control Register 0 */
  LPCMP_CCR1_tag CCR1;                 /* Comparator Control Register 1 */
  LPCMP_CCR2_tag CCR2;                 /* Comparator Control Register 2 */
  uint8_t LPCMP_reserved0[4];
  LPCMP_DCR_tag DCR;                   /* DAC Control Register */
  LPCMP_IER_tag IER;                   /* Interrupt Enable Register */
  LPCMP_CSR_tag CSR;                   /* Comparator Status Register */
  LPCMP_RRCR0_tag RRCR0;               /* Round Robin Control Register 0 */
  LPCMP_RRCR1_tag RRCR1;               /* Round Robin Control Register 1 */
  LPCMP_RRCSR_tag RRCSR;               /* Round Robin Control and Status Register */
  LPCMP_RRSR_tag RRSR;                 /* Round Robin Status Register */
};


/* ============================================================================
   =============================== Module: LPI2C ==============================
   ============================================================================ */

typedef union LPI2C_VERID_union_tag {  /* Version ID Register */
  vuint32_t R;
  struct {
    vuint32_t FEATURE:16;              /* Feature Specification Number */
    vuint32_t MINOR:8;                 /* Minor Version Number */
    vuint32_t MAJOR:8;                 /* Major Version Number */
  } B;
} LPI2C_VERID_tag;

typedef union LPI2C_PARAM_union_tag {  /* Parameter Register */
  vuint32_t R;
  struct {
    vuint32_t MTXFIFO:4;               /* Master Transmit FIFO Size */
    vuint32_t _unused_4:4;             /* Reserved */
    vuint32_t MRXFIFO:4;               /* Master Receive FIFO Size */
    vuint32_t _unused_12:4;            /* Reserved */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} LPI2C_PARAM_tag;

typedef union LPI2C_MCR_union_tag {    /* Master Control Register */
  vuint32_t R;
  struct {
    vuint32_t MEN:1;                   /* Master Enable */
    vuint32_t RST:1;                   /* Software Reset */
    vuint32_t DOZEN:1;                 /* Doze mode enable */
    vuint32_t DBGEN:1;                 /* Debug Enable */
    vuint32_t _unused_4:4;             /* Reserved */
    vuint32_t RTF:1;                   /* Reset Transmit FIFO */
    vuint32_t RRF:1;                   /* Reset Receive FIFO */
    vuint32_t _unused_10:22;           /* Reserved */
  } B;
} LPI2C_MCR_tag;

typedef union LPI2C_MSR_union_tag {    /* Master Status Register */
  vuint32_t R;
  struct {
    vuint32_t TDF:1;                   /* Transmit Data Flag */
    vuint32_t RDF:1;                   /* Receive Data Flag */
    vuint32_t _unused_2:6;             /* Reserved */
    vuint32_t EPF:1;                   /* End Packet Flag */
    vuint32_t SDF:1;                   /* STOP Detect Flag */
    vuint32_t NDF:1;                   /* NACK Detect Flag */
    vuint32_t ALF:1;                   /* Arbitration Lost Flag */
    vuint32_t FEF:1;                   /* FIFO Error Flag */
    vuint32_t PLTF:1;                  /* Pin Low Timeout Flag */
    vuint32_t DMF:1;                   /* Data Match Flag */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t _unused_16:8;            /* Reserved */
    vuint32_t MBF:1;                   /* Master Busy Flag */
    vuint32_t BBF:1;                   /* Bus Busy Flag */
    vuint32_t _unused_26:6;            /* Reserved */
  } B;
} LPI2C_MSR_tag;

typedef union LPI2C_MIER_union_tag {   /* Master Interrupt Enable Register */
  vuint32_t R;
  struct {
    vuint32_t TDIE:1;                  /* Transmit Data Interrupt Enable */
    vuint32_t RDIE:1;                  /* Receive Data Interrupt Enable */
    vuint32_t _unused_2:6;             /* Reserved */
    vuint32_t EPIE:1;                  /* End Packet Interrupt Enable */
    vuint32_t SDIE:1;                  /* STOP Detect Interrupt Enable */
    vuint32_t NDIE:1;                  /* NACK Detect Interrupt Enable */
    vuint32_t ALIE:1;                  /* Arbitration Lost Interrupt Enable */
    vuint32_t FEIE:1;                  /* FIFO Error Interrupt Enable */
    vuint32_t PLTIE:1;                 /* Pin Low Timeout Interrupt Enable */
    vuint32_t DMIE:1;                  /* Data Match Interrupt Enable */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} LPI2C_MIER_tag;

typedef union LPI2C_MDER_union_tag {   /* Master DMA Enable Register */
  vuint32_t R;
  struct {
    vuint32_t TDDE:1;                  /* Transmit Data DMA Enable */
    vuint32_t RDDE:1;                  /* Receive Data DMA Enable */
    vuint32_t _unused_2:30;            /* Reserved */
  } B;
} LPI2C_MDER_tag;

typedef union LPI2C_MCFGR0_union_tag { /* Master Configuration Register 0 */
  vuint32_t R;
  struct {
    vuint32_t HREN:1;                  /* Host Request Enable */
    vuint32_t HRPOL:1;                 /* Host Request Polarity */
    vuint32_t HRSEL:1;                 /* Host Request Select */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t _unused_4:4;             /* Reserved */
    vuint32_t CIRFIFO:1;               /* Circular FIFO Enable */
    vuint32_t RDMO:1;                  /* Receive Data Match Only */
    vuint32_t _unused_10:6;            /* Reserved */
    vuint32_t _unused_16:2;            /* Reserved */
    vuint32_t _unused_18:14;           /* Reserved */
  } B;
} LPI2C_MCFGR0_tag;

typedef union LPI2C_MCFGR1_union_tag { /* Master Configuration Register 1 */
  vuint32_t R;
  struct {
    vuint32_t PRESCALE:3;              /* Prescaler */
    vuint32_t _unused_3:5;             /* Reserved */
    vuint32_t AUTOSTOP:1;              /* Automatic STOP Generation */
    vuint32_t IGNACK:1;                /* IGNACK */
    vuint32_t TIMECFG:1;               /* Timeout Configuration */
    vuint32_t _unused_11:2;            /* Reserved */
    vuint32_t _unused_13:3;            /* Reserved */
    vuint32_t MATCFG:3;                /* Match Configuration */
    vuint32_t _unused_19:5;            /* Reserved */
    vuint32_t PINCFG:3;                /* Pin Configuration */
    vuint32_t FRCHS:1;                 /* Force HS-mode */
    vuint32_t _unused_28:4;            /* Reserved */
  } B;
} LPI2C_MCFGR1_tag;

typedef union LPI2C_MCFGR2_union_tag { /* Master Configuration Register 2 */
  vuint32_t R;
  struct {
    vuint32_t BUSIDLE:12;              /* Bus Idle Timeout */
    vuint32_t _unused_12:4;            /* Reserved */
    vuint32_t FILTSCL:4;               /* Glitch Filter SCL */
    vuint32_t _unused_20:4;            /* Reserved */
    vuint32_t FILTSDA:4;               /* Glitch Filter SDA */
    vuint32_t _unused_28:4;            /* Reserved */
  } B;
} LPI2C_MCFGR2_tag;

typedef union LPI2C_MCFGR3_union_tag { /* Master Configuration Register 3 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:8;             /* Reserved */
    vuint32_t PINLOW:12;               /* Pin Low Timeout */
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} LPI2C_MCFGR3_tag;

typedef union LPI2C_MDMR_union_tag {   /* Master Data Match Register */
  vuint32_t R;
  struct {
    vuint32_t MATCH0:8;                /* Match 0 Value */
    vuint32_t _unused_8:8;             /* Reserved */
    vuint32_t MATCH1:8;                /* Match 1 Value */
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} LPI2C_MDMR_tag;

typedef union LPI2C_MCCR0_union_tag {  /* Master Clock Configuration Register 0 */
  vuint32_t R;
  struct {
    vuint32_t CLKLO:6;                 /* Clock Low Period */
    vuint32_t _unused_6:2;             /* Reserved */
    vuint32_t CLKHI:6;                 /* Clock High Period */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t SETHOLD:6;               /* Setup Hold Delay */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t DATAVD:6;                /* Data Valid Delay */
    vuint32_t _unused_30:2;            /* Reserved */
  } B;
} LPI2C_MCCR0_tag;

typedef union LPI2C_MCCR1_union_tag {  /* Master Clock Configuration Register 1 */
  vuint32_t R;
  struct {
    vuint32_t CLKLO:6;                 /* Clock Low Period */
    vuint32_t _unused_6:2;             /* Reserved */
    vuint32_t CLKHI:6;                 /* Clock High Period */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t SETHOLD:6;               /* Setup Hold Delay */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t DATAVD:6;                /* Data Valid Delay */
    vuint32_t _unused_30:2;            /* Reserved */
  } B;
} LPI2C_MCCR1_tag;

typedef union LPI2C_MFCR_union_tag {   /* Master FIFO Control Register */
  vuint32_t R;
  struct {
    vuint32_t TXWATER:2;               /* Transmit FIFO Watermark */
    vuint32_t _unused_2:14;            /* Reserved */
    vuint32_t RXWATER:2;               /* Receive FIFO Watermark */
    vuint32_t _unused_18:14;           /* Reserved */
  } B;
} LPI2C_MFCR_tag;

typedef union LPI2C_MFSR_union_tag {   /* Master FIFO Status Register */
  vuint32_t R;
  struct {
    vuint32_t TXCOUNT:3;               /* Transmit FIFO Count */
    vuint32_t _unused_3:13;            /* Reserved */
    vuint32_t RXCOUNT:3;               /* Receive FIFO Count */
    vuint32_t _unused_19:13;           /* Reserved */
  } B;
} LPI2C_MFSR_tag;

typedef union LPI2C_MTDR_union_tag {   /* Master Transmit Data Register */
  vuint32_t R;
  struct {
    vuint32_t DATA:8;                  /* Transmit Data */
    vuint32_t CMD:3;                   /* Command Data */
    vuint32_t _unused_11:21;           /* Reserved */
  } B;
} LPI2C_MTDR_tag;

typedef union LPI2C_MRDR_union_tag {   /* Master Receive Data Register */
  vuint32_t R;
  struct {
    vuint32_t DATA:8;                  /* Receive Data */
    vuint32_t _unused_8:6;             /* Reserved */
    vuint32_t RXEMPTY:1;               /* RX Empty */
    vuint32_t _unused_15:17;           /* Reserved */
  } B;
} LPI2C_MRDR_tag;

typedef union LPI2C_SCR_union_tag {    /* Slave Control Register */
  vuint32_t R;
  struct {
    vuint32_t SEN:1;                   /* Slave Enable */
    vuint32_t RST:1;                   /* Software Reset */
    vuint32_t _unused_2:2;             /* Reserved */
    vuint32_t FILTEN:1;                /* Filter Enable */
    vuint32_t FILTDZ:1;                /* Filter Doze Enable */
    vuint32_t _unused_6:2;             /* Reserved */
    vuint32_t RTF:1;                   /* Reset Transmit FIFO */
    vuint32_t RRF:1;                   /* Reset Receive FIFO */
    vuint32_t _unused_10:22;           /* Reserved */
  } B;
} LPI2C_SCR_tag;

typedef union LPI2C_SSR_union_tag {    /* Slave Status Register */
  vuint32_t R;
  struct {
    vuint32_t TDF:1;                   /* Transmit Data Flag */
    vuint32_t RDF:1;                   /* Receive Data Flag */
    vuint32_t AVF:1;                   /* Address Valid Flag */
    vuint32_t TAF:1;                   /* Transmit ACK Flag */
    vuint32_t _unused_4:4;             /* Reserved */
    vuint32_t RSF:1;                   /* Repeated Start Flag */
    vuint32_t SDF:1;                   /* STOP Detect Flag */
    vuint32_t BEF:1;                   /* Bit Error Flag */
    vuint32_t FEF:1;                   /* FIFO Error Flag */
    vuint32_t AM0F:1;                  /* Address Match 0 Flag */
    vuint32_t AM1F:1;                  /* Address Match 1 Flag */
    vuint32_t GCF:1;                   /* General Call Flag */
    vuint32_t SARF:1;                  /* SMBus Alert Response Flag */
    vuint32_t _unused_16:8;            /* Reserved */
    vuint32_t SBF:1;                   /* Slave Busy Flag */
    vuint32_t BBF:1;                   /* Bus Busy Flag */
    vuint32_t _unused_26:6;            /* Reserved */
  } B;
} LPI2C_SSR_tag;

typedef union LPI2C_SIER_union_tag {   /* Slave Interrupt Enable Register */
  vuint32_t R;
  struct {
    vuint32_t TDIE:1;                  /* Transmit Data Interrupt Enable */
    vuint32_t RDIE:1;                  /* Receive Data Interrupt Enable */
    vuint32_t AVIE:1;                  /* Address Valid Interrupt Enable */
    vuint32_t TAIE:1;                  /* Transmit ACK Interrupt Enable */
    vuint32_t _unused_4:4;             /* Reserved */
    vuint32_t RSIE:1;                  /* Repeated Start Interrupt Enable */
    vuint32_t SDIE:1;                  /* STOP Detect Interrupt Enable */
    vuint32_t BEIE:1;                  /* Bit Error Interrupt Enable */
    vuint32_t FEIE:1;                  /* FIFO Error Interrupt Enable */
    vuint32_t AM0IE:1;                 /* Address Match 0 Interrupt Enable */
    vuint32_t AM1F:1;                  /* Address Match 1 Interrupt Enable */
    vuint32_t GCIE:1;                  /* General Call Interrupt Enable */
    vuint32_t SARIE:1;                 /* SMBus Alert Response Interrupt Enable */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} LPI2C_SIER_tag;

typedef union LPI2C_SDER_union_tag {   /* Slave DMA Enable Register */
  vuint32_t R;
  struct {
    vuint32_t TDDE:1;                  /* Transmit Data DMA Enable */
    vuint32_t RDDE:1;                  /* Receive Data DMA Enable */
    vuint32_t AVDE:1;                  /* Address Valid DMA Enable */
    vuint32_t _unused_3:29;            /* Reserved */
  } B;
} LPI2C_SDER_tag;

typedef union LPI2C_SCFGR1_union_tag { /* Slave Configuration Register 1 */
  vuint32_t R;
  struct {
    vuint32_t ADRSTALL:1;              /* Address SCL Stall */
    vuint32_t RXSTALL:1;               /* RX SCL Stall */
    vuint32_t TXDSTALL:1;              /* TX Data SCL Stall */
    vuint32_t ACKSTALL:1;              /* ACK SCL Stall */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t _unused_5:3;             /* Reserved */
    vuint32_t GCEN:1;                  /* General Call Enable */
    vuint32_t SAEN:1;                  /* SMBus Alert Enable */
    vuint32_t TXCFG:1;                 /* Transmit Flag Configuration */
    vuint32_t RXCFG:1;                 /* Receive Data Configuration */
    vuint32_t IGNACK:1;                /* Ignore NACK */
    vuint32_t HSMEN:1;                 /* High Speed Mode Enable */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t ADDRCFG:3;               /* Address Configuration */
    vuint32_t _unused_19:5;            /* Reserved */
    vuint32_t _unused_24:3;            /* Reserved */
    vuint32_t _unused_27:5;            /* Reserved */
  } B;
} LPI2C_SCFGR1_tag;

typedef union LPI2C_SCFGR2_union_tag { /* Slave Configuration Register 2 */
  vuint32_t R;
  struct {
    vuint32_t CLKHOLD:4;               /* Clock Hold Time */
    vuint32_t _unused_4:4;             /* Reserved */
    vuint32_t DATAVD:6;                /* Data Valid Delay */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t FILTSCL:4;               /* Glitch Filter SCL */
    vuint32_t _unused_20:4;            /* Reserved */
    vuint32_t FILTSDA:4;               /* Glitch Filter SDA */
    vuint32_t _unused_28:4;            /* Reserved */
  } B;
} LPI2C_SCFGR2_tag;

typedef union LPI2C_SAMR_union_tag {   /* Slave Address Match Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t ADDR0:10;                /* Address 0 Value */
    vuint32_t _unused_11:6;            /* Reserved */
    vuint32_t ADDR1:10;                /* Address 1 Value */
    vuint32_t _unused_27:5;            /* Reserved */
  } B;
} LPI2C_SAMR_tag;

typedef union LPI2C_SASR_union_tag {   /* Slave Address Status Register */
  vuint32_t R;
  struct {
    vuint32_t RADDR:11;                /* Received Address */
    vuint32_t _unused_11:3;            /* Reserved */
    vuint32_t ANV:1;                   /* Address Not Valid */
    vuint32_t _unused_15:17;           /* Reserved */
  } B;
} LPI2C_SASR_tag;

typedef union LPI2C_STAR_union_tag {   /* Slave Transmit ACK Register */
  vuint32_t R;
  struct {
    vuint32_t TXNACK:1;                /* Transmit NACK */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} LPI2C_STAR_tag;

typedef union LPI2C_STDR_union_tag {   /* Slave Transmit Data Register */
  vuint32_t R;
  struct {
    vuint32_t DATA:8;                  /* Transmit Data */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} LPI2C_STDR_tag;

typedef union LPI2C_SRDR_union_tag {   /* Slave Receive Data Register */
  vuint32_t R;
  struct {
    vuint32_t DATA:8;                  /* Receive Data */
    vuint32_t _unused_8:6;             /* Reserved */
    vuint32_t RXEMPTY:1;               /* RX Empty */
    vuint32_t SOF:1;                   /* Start Of Frame */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} LPI2C_SRDR_tag;

struct LPI2C_tag {
  LPI2C_VERID_tag VERID;               /* Version ID Register */
  LPI2C_PARAM_tag PARAM;               /* Parameter Register */
  uint8_t LPI2C_reserved0[8];
  LPI2C_MCR_tag MCR;                   /* Master Control Register */
  LPI2C_MSR_tag MSR;                   /* Master Status Register */
  LPI2C_MIER_tag MIER;                 /* Master Interrupt Enable Register */
  LPI2C_MDER_tag MDER;                 /* Master DMA Enable Register */
  LPI2C_MCFGR0_tag MCFGR0;             /* Master Configuration Register 0 */
  LPI2C_MCFGR1_tag MCFGR1;             /* Master Configuration Register 1 */
  LPI2C_MCFGR2_tag MCFGR2;             /* Master Configuration Register 2 */
  LPI2C_MCFGR3_tag MCFGR3;             /* Master Configuration Register 3 */
  uint8_t LPI2C_reserved1[16];
  LPI2C_MDMR_tag MDMR;                 /* Master Data Match Register */
  uint8_t LPI2C_reserved2[4];
  LPI2C_MCCR0_tag MCCR0;               /* Master Clock Configuration Register 0 */
  uint8_t LPI2C_reserved3[4];
  LPI2C_MCCR1_tag MCCR1;               /* Master Clock Configuration Register 1 */
  uint8_t LPI2C_reserved4[4];
  LPI2C_MFCR_tag MFCR;                 /* Master FIFO Control Register */
  LPI2C_MFSR_tag MFSR;                 /* Master FIFO Status Register */
  LPI2C_MTDR_tag MTDR;                 /* Master Transmit Data Register */
  uint8_t LPI2C_reserved5[12];
  LPI2C_MRDR_tag MRDR;                 /* Master Receive Data Register */
  uint8_t LPI2C_reserved6[156];
  LPI2C_SCR_tag SCR;                   /* Slave Control Register */
  LPI2C_SSR_tag SSR;                   /* Slave Status Register */
  LPI2C_SIER_tag SIER;                 /* Slave Interrupt Enable Register */
  LPI2C_SDER_tag SDER;                 /* Slave DMA Enable Register */
  uint8_t LPI2C_reserved7[4];
  LPI2C_SCFGR1_tag SCFGR1;             /* Slave Configuration Register 1 */
  LPI2C_SCFGR2_tag SCFGR2;             /* Slave Configuration Register 2 */
  uint8_t LPI2C_reserved8[20];
  LPI2C_SAMR_tag SAMR;                 /* Slave Address Match Register */
  uint8_t LPI2C_reserved9[12];
  LPI2C_SASR_tag SASR;                 /* Slave Address Status Register */
  LPI2C_STAR_tag STAR;                 /* Slave Transmit ACK Register */
  uint8_t LPI2C_reserved10[8];
  LPI2C_STDR_tag STDR;                 /* Slave Transmit Data Register */
  uint8_t LPI2C_reserved11[12];
  LPI2C_SRDR_tag SRDR;                 /* Slave Receive Data Register */
};


/* ============================================================================
   =============================== Module: LPSPI ==============================
   ============================================================================ */

typedef union LPSPI_VERID_union_tag {  /* Version ID Register */
  vuint32_t R;
  struct {
    vuint32_t FEATURE:16;              /* Module Identification Number */
    vuint32_t MINOR:8;                 /* Minor Version Number */
    vuint32_t MAJOR:8;                 /* Major Version Number */
  } B;
} LPSPI_VERID_tag;

typedef union LPSPI_PARAM_union_tag {  /* Parameter Register */
  vuint32_t R;
  struct {
    vuint32_t TXFIFO:8;                /* Transmit FIFO Size */
    vuint32_t RXFIFO:8;                /* Receive FIFO Size */
    vuint32_t PCSNUM:8;                /* PCS Number */
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} LPSPI_PARAM_tag;

typedef union LPSPI_CR_union_tag {     /* Control Register */
  vuint32_t R;
  struct {
    vuint32_t MEN:1;                   /* Module Enable */
    vuint32_t RST:1;                   /* Software Reset */
    vuint32_t _unused_2:1;             /* Reserved */
    vuint32_t DBGEN:1;                 /* Debug Enable */
    vuint32_t _unused_4:4;             /* Reserved */
    vuint32_t RTF:1;                   /* Reset Transmit FIFO */
    vuint32_t RRF:1;                   /* Reset Receive FIFO */
    vuint32_t _unused_10:22;           /* Reserved */
  } B;
} LPSPI_CR_tag;

typedef union LPSPI_SR_union_tag {     /* Status Register */
  vuint32_t R;
  struct {
    vuint32_t TDF:1;                   /* Transmit Data Flag */
    vuint32_t RDF:1;                   /* Receive Data Flag */
    vuint32_t _unused_2:6;             /* Reserved */
    vuint32_t WCF:1;                   /* Word Complete Flag */
    vuint32_t FCF:1;                   /* Frame Complete Flag */
    vuint32_t TCF:1;                   /* Transfer Complete Flag */
    vuint32_t TEF:1;                   /* Transmit Error Flag */
    vuint32_t REF:1;                   /* Receive Error Flag */
    vuint32_t DMF:1;                   /* Data Match Flag */
    vuint32_t _unused_14:10;           /* Reserved */
    vuint32_t MBF:1;                   /* Module Busy Flag */
    vuint32_t _unused_25:7;            /* Reserved */
  } B;
} LPSPI_SR_tag;

typedef union LPSPI_IER_union_tag {    /* Interrupt Enable Register */
  vuint32_t R;
  struct {
    vuint32_t TDIE:1;                  /* Transmit Data Interrupt Enable */
    vuint32_t RDIE:1;                  /* Receive Data Interrupt Enable */
    vuint32_t _unused_2:6;             /* Reserved */
    vuint32_t WCIE:1;                  /* Word Complete Interrupt Enable */
    vuint32_t FCIE:1;                  /* Frame Complete Interrupt Enable */
    vuint32_t TCIE:1;                  /* Transfer Complete Interrupt Enable */
    vuint32_t TEIE:1;                  /* Transmit Error Interrupt Enable */
    vuint32_t REIE:1;                  /* Receive Error Interrupt Enable */
    vuint32_t DMIE:1;                  /* Data Match Interrupt Enable */
    vuint32_t _unused_14:18;           /* Reserved */
  } B;
} LPSPI_IER_tag;

typedef union LPSPI_DER_union_tag {    /* DMA Enable Register */
  vuint32_t R;
  struct {
    vuint32_t TDDE:1;                  /* Transmit Data DMA Enable */
    vuint32_t RDDE:1;                  /* Receive Data DMA Enable */
    vuint32_t _unused_2:30;            /* Reserved */
  } B;
} LPSPI_DER_tag;

typedef union LPSPI_CFGR0_union_tag {  /* Configuration Register 0 */
  vuint32_t R;
  struct {
    vuint32_t HREN:1;                  /* Host Request Enable */
    vuint32_t HRPOL:1;                 /* Host Request Polarity */
    vuint32_t HRSEL:1;                 /* Host Request Select */
    vuint32_t HRDIR:1;                 /* Host Request Direction */
    vuint32_t _unused_4:4;             /* Reserved */
    vuint32_t CIRFIFO:1;               /* Circular FIFO Enable */
    vuint32_t RDMO:1;                  /* Receive Data Match Only */
    vuint32_t _unused_10:22;           /* Reserved */
  } B;
} LPSPI_CFGR0_tag;

typedef union LPSPI_CFGR1_union_tag {  /* Configuration Register 1 */
  vuint32_t R;
  struct {
    vuint32_t MASTER:1;                /* Master Mode */
    vuint32_t SAMPLE:1;                /* Sample Point */
    vuint32_t AUTOPCS:1;               /* Automatic PCS */
    vuint32_t NOSTALL:1;               /* No Stall */
    vuint32_t PARTIAL:1;               /* Partial Enable */
    vuint32_t _unused_5:3;             /* Reserved */
    vuint32_t PCSPOL:8;                /* Peripheral Chip Select Polarity, merged from more bitFields with different positions or sizes */
    vuint32_t MATCFG:3;                /* Match Configuration */
    vuint32_t _unused_19:5;            /* Reserved */
    vuint32_t PINCFG:2;                /* Pin Configuration */
    vuint32_t OUTCFG:1;                /* Output Configuration */
    vuint32_t PCSCFG:2;                /* Peripheral Chip Select Configuration, merged from more bitFields with different positions or sizes */
    vuint32_t _unused_29:3;            /* Reserved */
  } B;
} LPSPI_CFGR1_tag;

typedef union LPSPI_DMR0_union_tag {   /* Data Match Register 0 */
  vuint32_t R;
  struct {
    vuint32_t MATCH0:32;               /* Match 0 Value */
  } B;
} LPSPI_DMR0_tag;

typedef union LPSPI_DMR1_union_tag {   /* Data Match Register 1 */
  vuint32_t R;
  struct {
    vuint32_t MATCH1:32;               /* Match 1 Value */
  } B;
} LPSPI_DMR1_tag;

typedef union LPSPI_CCR_union_tag {    /* Clock Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t SCKDIV:8;                /* SCK Divider */
    vuint32_t DBT:8;                   /* Delay Between Transfers */
    vuint32_t PCSSCK:8;                /* PCS-to-SCK Delay */
    vuint32_t SCKPCS:8;                /* SCK-to-PCS Delay */
  } B;
} LPSPI_CCR_tag;

typedef union LPSPI_CCR1_union_tag {   /* Clock Configuration Register 1 */
  vuint32_t R;
  struct {
    vuint32_t SCKSET:8;                /* SCK Setup */
    vuint32_t SCKHLD:8;                /* SCK Hold */
    vuint32_t PCSPCS:8;                /* PCS to PCS delay */
    vuint32_t SCKSCK:8;                /* SCK Inter-Frame Delay */
  } B;
} LPSPI_CCR1_tag;

typedef union LPSPI_FCR_union_tag {    /* The FIFO Control register contains the RXWATER and TXWATER control fields. */
  vuint32_t R;
  struct {
    vuint32_t TXWATER:2;               /* Transmit FIFO Watermark */
    vuint32_t _unused_2:6;             /* Reserved */
    vuint32_t _unused_8:8;             /* Reserved */
    vuint32_t RXWATER:2;               /* Receive FIFO Watermark */
    vuint32_t _unused_18:6;            /* Reserved */
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} LPSPI_FCR_tag;

typedef union LPSPI_FSR_union_tag {    /* FIFO Status Register */
  vuint32_t R;
  struct {
    vuint32_t TXCOUNT:3;               /* Transmit FIFO Count */
    vuint32_t _unused_3:5;             /* Reserved */
    vuint32_t _unused_8:8;             /* Reserved */
    vuint32_t RXCOUNT:3;               /* Receive FIFO Count */
    vuint32_t _unused_19:5;            /* Reserved */
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} LPSPI_FSR_tag;

typedef union LPSPI_TCR_union_tag {    /* Transmit Command Register */
  vuint32_t R;
  struct {
    vuint32_t FRAMESZ:12;              /* Frame Size */
    vuint32_t _unused_12:4;            /* Reserved. Software should only write zero to this field. */
    vuint32_t WIDTH:2;                 /* Transfer Width */
    vuint32_t TXMSK:1;                 /* Transmit Data Mask */
    vuint32_t RXMSK:1;                 /* Receive Data Mask */
    vuint32_t CONTC:1;                 /* Continuing Command */
    vuint32_t CONT:1;                  /* Continuous Transfer */
    vuint32_t BYSW:1;                  /* Byte Swap */
    vuint32_t LSBF:1;                  /* LSB First */
    vuint32_t PCS:3;                   /* Peripheral Chip Select, merged from more bitFields with different positions or sizes */
    vuint32_t PRESCALE:3;              /* Prescaler Value */
    vuint32_t CPHA:1;                  /* Clock Phase */
    vuint32_t CPOL:1;                  /* Clock Polarity */
  } B;
} LPSPI_TCR_tag;

typedef union LPSPI_TDR_union_tag {    /* Transmit Data Register */
  vuint32_t R;
  struct {
    vuint32_t DATA:32;                 /* Transmit Data */
  } B;
} LPSPI_TDR_tag;

typedef union LPSPI_RSR_union_tag {    /* Receive Status Register */
  vuint32_t R;
  struct {
    vuint32_t SOF:1;                   /* Start Of Frame */
    vuint32_t RXEMPTY:1;               /* RX FIFO Empty */
    vuint32_t _unused_2:30;            /* Reserved */
  } B;
} LPSPI_RSR_tag;

typedef union LPSPI_RDR_union_tag {    /* Receive Data Register */
  vuint32_t R;
  struct {
    vuint32_t DATA:32;                 /* Receive Data */
  } B;
} LPSPI_RDR_tag;

typedef union LPSPI_RDROR_union_tag {  /* Receive Data Read Only Register */
  vuint32_t R;
  struct {
    vuint32_t DATA:32;                 /* Receive Data */
  } B;
} LPSPI_RDROR_tag;

typedef union LPSPI_TCBR_union_tag {   /* Transmit Command Burst Register */
  vuint32_t R;
  struct {
    vuint32_t DATA:32;                 /* Command Data */
  } B;
} LPSPI_TCBR_tag;

typedef union LPSPI_TDBR_union_tag {   /* Transmit Data Burst Register */
  vuint32_t R;
  struct {
    vuint32_t DATA:32;                 /* Data */
  } B;
} LPSPI_TDBR_tag;

typedef union LPSPI_RDBR_union_tag {   /* Receive Data Burst Register */
  vuint32_t R;
  struct {
    vuint32_t DATA:32;                 /* Data */
  } B;
} LPSPI_RDBR_tag;

struct LPSPI_tag {
  LPSPI_VERID_tag VERID;               /* Version ID Register */
  LPSPI_PARAM_tag PARAM;               /* Parameter Register */
  uint8_t LPSPI_reserved0[8];
  LPSPI_CR_tag CR;                     /* Control Register */
  LPSPI_SR_tag SR;                     /* Status Register */
  LPSPI_IER_tag IER;                   /* Interrupt Enable Register */
  LPSPI_DER_tag DER;                   /* DMA Enable Register */
  LPSPI_CFGR0_tag CFGR0;               /* Configuration Register 0 */
  LPSPI_CFGR1_tag CFGR1;               /* Configuration Register 1 */
  uint8_t LPSPI_reserved1[8];
  LPSPI_DMR0_tag DMR0;                 /* Data Match Register 0 */
  LPSPI_DMR1_tag DMR1;                 /* Data Match Register 1 */
  uint8_t LPSPI_reserved2[8];
  LPSPI_CCR_tag CCR;                   /* Clock Configuration Register */
  LPSPI_CCR1_tag CCR1;                 /* Clock Configuration Register 1 */
  uint8_t LPSPI_reserved3[16];
  LPSPI_FCR_tag FCR;                   /* The FIFO Control register contains the RXWATER and TXWATER control fields. */
  LPSPI_FSR_tag FSR;                   /* FIFO Status Register */
  LPSPI_TCR_tag TCR;                   /* Transmit Command Register */
  LPSPI_TDR_tag TDR;                   /* Transmit Data Register */
  uint8_t LPSPI_reserved4[8];
  LPSPI_RSR_tag RSR;                   /* Receive Status Register */
  LPSPI_RDR_tag RDR;                   /* Receive Data Register */
  LPSPI_RDROR_tag RDROR;               /* Receive Data Read Only Register */
  uint8_t LPSPI_reserved5[896];
  LPSPI_TCBR_tag TCBR;                 /* Transmit Command Burst Register */
  LPSPI_TDBR_tag TDBR;                 /* Transmit Data Burst Register */
  uint8_t LPSPI_reserved6[508];
  LPSPI_RDBR_tag RDBR;                 /* Receive Data Burst Register */
};


/* ============================================================================
   =============================== Module: LPUART =============================
   ============================================================================ */

typedef union LPUART_VERID_union_tag { /* Version ID Register */
  vuint32_t R;
  struct {
    vuint32_t FEATURE:16;              /* Feature Identification Number */
    vuint32_t MINOR:8;                 /* Minor Version Number */
    vuint32_t MAJOR:8;                 /* Major Version Number */
  } B;
} LPUART_VERID_tag;

typedef union LPUART_PARAM_union_tag { /* Parameter Register */
  vuint32_t R;
  struct {
    vuint32_t TXFIFO:8;                /* Transmit FIFO Size */
    vuint32_t RXFIFO:8;                /* Receive FIFO Size */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} LPUART_PARAM_tag;

typedef union LPUART_GLOBAL_union_tag { /* LPUART Global Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t RST:1;                   /* Software Reset */
    vuint32_t _unused_2:30;            /* Reserved */
  } B;
} LPUART_GLOBAL_tag;

typedef union LPUART_PINCFG_union_tag { /* LPUART Pin Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t TRGSEL:2;                /* Trigger Select */
    vuint32_t _unused_2:30;            /* Reserved */
  } B;
} LPUART_PINCFG_tag;

typedef union LPUART_BAUD_union_tag {  /* LPUART Baud Rate Register */
  vuint32_t R;
  struct {
    vuint32_t SBR:13;                  /* Baud Rate Modulo Divisor. */
    vuint32_t SBNS:1;                  /* Stop Bit Number Select */
    vuint32_t RXEDGIE:1;               /* RX Input Active Edge Interrupt Enable */
    vuint32_t LBKDIE:1;                /* LIN Break Detect Interrupt Enable */
    vuint32_t RESYNCDIS:1;             /* Resynchronization Disable */
    vuint32_t BOTHEDGE:1;              /* Both Edge Sampling */
    vuint32_t MATCFG:2;                /* Match Configuration */
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t RDMAE:1;                 /* Receiver Full DMA Enable */
    vuint32_t _unused_22:1;            /* Reserved */
    vuint32_t TDMAE:1;                 /* Transmitter DMA Enable */
    vuint32_t OSR:5;                   /* Oversampling Ratio */
    vuint32_t M10:1;                   /* 10-bit Mode select */
    vuint32_t MAEN2:1;                 /* Match Address Mode Enable 2 */
    vuint32_t MAEN1:1;                 /* Match Address Mode Enable 1 */
  } B;
} LPUART_BAUD_tag;

typedef union LPUART_STAT_union_tag {  /* LPUART Status Register */
  vuint32_t R;
  struct {
    vuint32_t LBKFE:1;                 /* LIN Break Flag Enable */
    vuint32_t AME:1;                   /* Address Mark Enable */
    vuint32_t _unused_2:6;             /* Reserved */
    vuint32_t _unused_8:2;             /* Reserved */
    vuint32_t _unused_10:4;            /* Reserved */
    vuint32_t MA2F:1;                  /* Match 2 Flag */
    vuint32_t MA1F:1;                  /* Match 1 Flag */
    vuint32_t PF:1;                    /* Parity Error Flag */
    vuint32_t FE:1;                    /* Framing Error Flag */
    vuint32_t NF:1;                    /* Noise Flag */
    vuint32_t OR:1;                    /* Receiver Overrun Flag */
    vuint32_t IDLE:1;                  /* Idle Line Flag */
    vuint32_t RDRF:1;                  /* Receive Data Register Full Flag */
    vuint32_t TC:1;                    /* Transmission Complete Flag */
    vuint32_t TDRE:1;                  /* Transmit Data Register Empty Flag */
    vuint32_t RAF:1;                   /* Receiver Active Flag */
    vuint32_t LBKDE:1;                 /* LIN Break Detection Enable */
    vuint32_t BRK13:1;                 /* Break Character Generation Length */
    vuint32_t RWUID:1;                 /* Receive Wake Up Idle Detect */
    vuint32_t RXINV:1;                 /* Receive Data Inversion */
    vuint32_t MSBF:1;                  /* MSB First */
    vuint32_t RXEDGIF:1;               /* RXD Pin Active Edge Interrupt Flag */
    vuint32_t LBKDIF:1;                /* LIN Break Detect Interrupt Flag */
  } B;
} LPUART_STAT_tag;

typedef union LPUART_CTRL_union_tag {  /* LPUART Control Register */
  vuint32_t R;
  struct {
    vuint32_t PT:1;                    /* Parity Type */
    vuint32_t PE:1;                    /* Parity Enable */
    vuint32_t ILT:1;                   /* Idle Line Type Select */
    vuint32_t WAKE:1;                  /* Receiver Wakeup Method Select */
    vuint32_t M:1;                     /* 9-Bit or 8-Bit Mode Select */
    vuint32_t RSRC:1;                  /* Receiver Source Select */
    vuint32_t DOZEEN:1;                /* Doze Enable */
    vuint32_t LOOPS:1;                 /* Loop Mode Select */
    vuint32_t IDLECFG:3;               /* Idle Configuration */
    vuint32_t M7:1;                    /* 7-Bit Mode Select */
    vuint32_t _unused_12:2;            /* Reserved */
    vuint32_t MA2IE:1;                 /* Match 2 Interrupt Enable */
    vuint32_t MA1IE:1;                 /* Match 1 Interrupt Enable */
    vuint32_t SBK:1;                   /* Send Break */
    vuint32_t RWU:1;                   /* Receiver Wakeup Control */
    vuint32_t RE:1;                    /* Receiver Enable */
    vuint32_t TE:1;                    /* Transmitter Enable */
    vuint32_t ILIE:1;                  /* Idle Line Interrupt Enable */
    vuint32_t RIE:1;                   /* Receiver Interrupt Enable */
    vuint32_t TCIE:1;                  /* Transmission Complete Interrupt Enable for */
    vuint32_t TIE:1;                   /* Transmit Interrupt Enable */
    vuint32_t PEIE:1;                  /* Parity Error Interrupt Enable */
    vuint32_t FEIE:1;                  /* Framing Error Interrupt Enable */
    vuint32_t NEIE:1;                  /* Noise Error Interrupt Enable */
    vuint32_t ORIE:1;                  /* Overrun Interrupt Enable */
    vuint32_t TXINV:1;                 /* Transmit Data Inversion */
    vuint32_t TXDIR:1;                 /* TXD Pin Direction in Single-Wire Mode */
    vuint32_t R9T8:1;                  /* Receive Bit 9 / Transmit Bit 8 */
    vuint32_t R8T9:1;                  /* Receive Bit 8 / Transmit Bit 9 */
  } B;
} LPUART_CTRL_tag;

typedef union LPUART_DATA_union_tag {  /* LPUART Data Register */
  vuint32_t R;
  struct {
    vuint32_t R0T0:1;                  /* R0T0 */
    vuint32_t R1T1:1;                  /* R1T1 */
    vuint32_t R2T2:1;                  /* R2T2 */
    vuint32_t R3T3:1;                  /* R3T3 */
    vuint32_t R4T4:1;                  /* R4T4 */
    vuint32_t R5T5:1;                  /* R5T5 */
    vuint32_t R6T6:1;                  /* R6T6 */
    vuint32_t R7T7:1;                  /* R7T7 */
    vuint32_t R8T8:1;                  /* R8T8 */
    vuint32_t R9T9:1;                  /* R9T9 */
    vuint32_t LINBRK:1;                /* LIN Break */
    vuint32_t IDLINE:1;                /* Idle Line */
    vuint32_t RXEMPT:1;                /* Receive Buffer Empty */
    vuint32_t FRETSC:1;                /* Frame Error / Transmit Special Character */
    vuint32_t PARITYE:1;               /* PARITYE */
    vuint32_t NOISY:1;                 /* NOISY */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} LPUART_DATA_tag;

typedef union LPUART_MATCH_union_tag { /* LPUART Match Address Register */
  vuint32_t R;
  struct {
    vuint32_t MA1:10;                  /* Match Address 1 */
    vuint32_t _unused_10:6;            /* Reserved */
    vuint32_t MA2:10;                  /* Match Address 2 */
    vuint32_t _unused_26:6;            /* Reserved */
  } B;
} LPUART_MATCH_tag;

typedef union LPUART_MODIR_union_tag { /* LPUART Modem IrDA Register */
  vuint32_t R;
  struct {
    vuint32_t TXCTSE:1;                /* Transmitter clear-to-send enable */
    vuint32_t TXRTSE:1;                /* Transmitter request-to-send enable */
    vuint32_t TXRTSPOL:1;              /* Transmitter request-to-send polarity */
    vuint32_t RXRTSE:1;                /* Receiver request-to-send enable */
    vuint32_t TXCTSC:1;                /* Transmit CTS Configuration */
    vuint32_t TXCTSSRC:1;              /* Transmit CTS Source */
    vuint32_t _unused_6:2;             /* Reserved */
    vuint32_t RTSWATER:2;              /* Receive RTS Configuration */
    vuint32_t _unused_10:6;            /* Reserved */
    vuint32_t TNP:2;                   /* Transmitter narrow pulse */
    vuint32_t IREN:1;                  /* Infrared enable */
    vuint32_t _unused_19:13;           /* Reserved */
  } B;
} LPUART_MODIR_tag;

typedef union LPUART_FIFO_union_tag {  /* LPUART FIFO Register */
  vuint32_t R;
  struct {
    vuint32_t RXFIFOSIZE:3;            /* Receive FIFO Buffer Depth */
    vuint32_t RXFE:1;                  /* Receive FIFO Enable */
    vuint32_t TXFIFOSIZE:3;            /* Transmit FIFO Buffer Depth */
    vuint32_t TXFE:1;                  /* Transmit FIFO Enable */
    vuint32_t RXUFE:1;                 /* Receive FIFO Underflow Interrupt Enable */
    vuint32_t TXOFE:1;                 /* Transmit FIFO Overflow Interrupt Enable */
    vuint32_t RXIDEN:3;                /* Receiver Idle Empty Enable */
    vuint32_t _unused_13:1;            /* Reserved */
    vuint32_t RXFLUSH:1;               /* Receive FIFO/Buffer Flush */
    vuint32_t TXFLUSH:1;               /* Transmit FIFO/Buffer Flush */
    vuint32_t RXUF:1;                  /* Receiver Buffer Underflow Flag */
    vuint32_t TXOF:1;                  /* Transmitter Buffer Overflow Flag */
    vuint32_t _unused_18:4;            /* Reserved */
    vuint32_t RXEMPT:1;                /* Receive Buffer/FIFO Empty */
    vuint32_t TXEMPT:1;                /* Transmit Buffer/FIFO Empty */
    vuint32_t _unused_24:8;            /* Reserved */
  } B;
} LPUART_FIFO_tag;

typedef union LPUART_WATER_union_tag { /* LPUART Watermark Register */
  vuint32_t R;
  struct {
    vuint32_t TXWATER:2;               /* Transmit Watermark */
    vuint32_t _unused_2:6;             /* Reserved */
    vuint32_t TXCOUNT:3;               /* Transmit Counter */
    vuint32_t _unused_11:5;            /* Reserved */
    vuint32_t RXWATER:2;               /* Receive Watermark */
    vuint32_t _unused_18:6;            /* Reserved */
    vuint32_t RXCOUNT:3;               /* Receive Counter */
    vuint32_t _unused_27:5;            /* Reserved */
  } B;
} LPUART_WATER_tag;

typedef union LPUART_DATARO_union_tag { /* Data read-only Register */
  vuint32_t R;
  struct {
    vuint32_t DATA:16;                 /* Receive Data */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} LPUART_DATARO_tag;

struct LPUART_tag {
  LPUART_VERID_tag VERID;              /* Version ID Register */
  LPUART_PARAM_tag PARAM;              /* Parameter Register */
  LPUART_GLOBAL_tag GLOBAL;            /* LPUART Global Register */
  LPUART_PINCFG_tag PINCFG;            /* LPUART Pin Configuration Register */
  LPUART_BAUD_tag BAUD;                /* LPUART Baud Rate Register */
  LPUART_STAT_tag STAT;                /* LPUART Status Register */
  LPUART_CTRL_tag CTRL;                /* LPUART Control Register */
  LPUART_DATA_tag DATA;                /* LPUART Data Register */
  LPUART_MATCH_tag MATCH;              /* LPUART Match Address Register */
  LPUART_MODIR_tag MODIR;              /* LPUART Modem IrDA Register */
  LPUART_FIFO_tag FIFO;                /* LPUART FIFO Register */
  LPUART_WATER_tag WATER;              /* LPUART Watermark Register */
  LPUART_DATARO_tag DATARO;            /* Data read-only Register */
};


/* ============================================================================
   =============================== Module: MCM_CM7 ============================
   ============================================================================ */

typedef union MCM_CM7_PLREV_union_tag { /* SoC-defined Platform Revision */
  vuint16_t R;
  struct {
    vuint16_t PLREV:16;                /* The PLREV[15:0] field is specified by a platform input signal to define a software-visible revision number. */
  } B;
} MCM_CM7_PLREV_tag;

typedef union MCM_CM7_PCT_union_tag {  /* Processor Core Type */
  vuint16_t R;
  struct {
    vuint16_t PCT:16;                  /* This MCM design supports the Arm Cortex M7 core. The following value identifies this core complex. */
  } B;
} MCM_CM7_PCT_tag;

typedef union MCM_CM7_CPCR_union_tag { /* Core Platform Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:9;
    vuint32_t _unused_9:1;
    vuint32_t _unused_10:1;
    vuint32_t _unused_11:16;
    vuint32_t CM7_AHBSPRI:1;           /* AHB Slave Priority */
    vuint32_t _unused_28:4;
  } B;
} MCM_CM7_CPCR_tag;

typedef union MCM_CM7_ISCR_union_tag { /* Interrupt Status and Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:5;
    vuint32_t WABS:1;                  /* Write Abort on Slave */
    vuint32_t WABSO:1;                 /* Write Abort on Slave Overrun */
    vuint32_t _unused_7:1;
    vuint32_t FIOC:1;                  /* FPU Invalid Operation Interrupt Status */
    vuint32_t FDZC:1;                  /* FPU Divide-by-Zero Interrupt Status */
    vuint32_t FOFC:1;                  /* FPU Overflow Interrupt Status */
    vuint32_t FUFC:1;                  /* FPU Underflow Interrupt Status */
    vuint32_t FIXC:1;                  /* FPU Inexact Interrupt Status */
    vuint32_t _unused_13:2;
    vuint32_t FIDC:1;                  /* FPU Input Denormal Interrupt Status */
    vuint32_t _unused_16:5;
    vuint32_t WABE:1;                  /* TCM Write Abort Interrupt Enable */
    vuint32_t _unused_22:2;
    vuint32_t FIOCE:1;                 /* FPU Invalid Operation Interrupt Enable */
    vuint32_t FDZCE:1;                 /* FPU Divide-by-Zero Interrupt Enable */
    vuint32_t FOFCE:1;                 /* FPU Overflow Interrupt Enable */
    vuint32_t FUFCE:1;                 /* FPU Underflow Interrupt Enable */
    vuint32_t FIXCE:1;                 /* FPU Inexact Interrupt Enable */
    vuint32_t _unused_29:2;
    vuint32_t FIDCE:1;                 /* FPU Input Denormal Interrupt Enable */
  } B;
} MCM_CM7_ISCR_tag;

typedef union MCM_CM7_LMEM_DESC_union_tag { /* Local Memory Descriptor 0 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t _unused_2:2;
    vuint32_t _unused_4:9;
    vuint32_t MT:3;                    /* Memory Type */
    vuint32_t _unused_16:1;
    vuint32_t DPW:3;                   /* Data Path Width */
    vuint32_t WY:4;                    /* Level 1 Cache Ways */
    vuint32_t LMSZ:4;                  /* Local Memory Size */
    vuint32_t LMSZH:1;                 /* LMEM Size Hole */
    vuint32_t _unused_29:2;
    vuint32_t LMV:1;                   /* Local Memory Valid */
  } B;
} MCM_CM7_LMEM_DESC_tag;

struct MCM_CM7_tag {
  MCM_CM7_PLREV_tag PLREV;             /* SoC-defined Platform Revision */
  MCM_CM7_PCT_tag PCT;                 /* Processor Core Type */
  uint8_t MCM_CM7_reserved0[8];
  MCM_CM7_CPCR_tag CPCR;               /* Core Platform Control */
  MCM_CM7_ISCR_tag ISCR;               /* Interrupt Status and Control */
  uint8_t MCM_CM7_reserved1[1004];
  MCM_CM7_LMEM_DESC_tag LMEM_DESC[5];  /* Local Memory Descriptor 0 */
};


/* ============================================================================
   =============================== Module: MC_CGM =============================
   ============================================================================ */

typedef union MC_CGM_PCFS_SDUR_union_tag { /* PCFS Step Duration */
  vuint32_t R;
  struct {
    vuint32_t SDUR:16;                 /* Step duration */
    vuint32_t _unused_16:16;
  } B;
} MC_CGM_PCFS_SDUR_tag;

typedef union MC_CGM_MUX_0_CSC_union_tag { /* Clock Mux 0 Select Control Register */
  vuint32_t R;
  struct {
    vuint32_t RAMPUP:1;                /* PCFS ramp-up */
    vuint32_t RAMPDOWN:1;              /* PCFS ramp-down */
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:20;
    vuint32_t SELCTL:4;                /* Clock source selection control */
    vuint32_t _unused_28:4;
  } B;
} MC_CGM_MUX_0_CSC_tag;

typedef union MC_CGM_MUX_0_CSS_union_tag { /* Clock Mux 0 Select Status Register */
  vuint32_t R;
  struct {
    vuint32_t RAMPUP:1;                /* PCFS ramp-up */
    vuint32_t RAMPDOWN:1;              /* PCFS ramp-down */
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:12;
    vuint32_t SWIP:1;                  /* Switch in progress */
    vuint32_t SWTRG:3;                 /* Switch trigger cause */
    vuint32_t _unused_20:4;
    vuint32_t SELSTAT:4;               /* Clock source selection status */
    vuint32_t _unused_28:4;
  } B;
} MC_CGM_MUX_0_CSS_tag;

typedef union MC_CGM_MUX_0_DC_0_union_tag { /* Clock Mux 0 Divider 0 Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t DIV:3;                   /* Division value */
    vuint32_t _unused_19:12;
    vuint32_t DE:1;                    /* Divider enable */
  } B;
} MC_CGM_MUX_0_DC_0_tag;

typedef union MC_CGM_MUX_0_DC_1_union_tag { /* Clock Mux 0 Divider 1 Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t DIV:3;                   /* Division value */
    vuint32_t _unused_19:12;
    vuint32_t DE:1;                    /* Divider enable */
  } B;
} MC_CGM_MUX_0_DC_1_tag;

typedef union MC_CGM_MUX_0_DC_2_union_tag { /* Clock Mux 0 Divider 2 Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t DIV:4;                   /* Division value */
    vuint32_t _unused_20:11;
    vuint32_t DE:1;                    /* Divider enable */
  } B;
} MC_CGM_MUX_0_DC_2_tag;

typedef union MC_CGM_MUX_0_DC_3_union_tag { /* Clock Mux 0 Divider 3 Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t DIV:3;                   /* Division value */
    vuint32_t _unused_19:12;
    vuint32_t DE:1;                    /* Divider enable */
  } B;
} MC_CGM_MUX_0_DC_3_tag;

typedef union MC_CGM_MUX_0_DC_4_union_tag { /* Clock Mux 0 Divider 4 Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t DIV:3;                   /* Division value */
    vuint32_t _unused_19:12;
    vuint32_t DE:1;                    /* Divider enable */
  } B;
} MC_CGM_MUX_0_DC_4_tag;

typedef union MC_CGM_MUX_0_DC_5_union_tag { /* Clock Mux 0 Divider 5 Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:8;
    vuint32_t _unused_8:8;
    vuint32_t DIV:3;                   /* Division value */
    vuint32_t _unused_19:12;
    vuint32_t DE:1;                    /* Divider enable */
  } B;
} MC_CGM_MUX_0_DC_5_tag;

typedef union MC_CGM_MUX_0_DC_6_union_tag { /* Clock Mux 0 Divider 6 Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t DIV:3;                   /* Division value */
    vuint32_t _unused_19:12;
    vuint32_t DE:1;                    /* Divider enable */
  } B;
} MC_CGM_MUX_0_DC_6_tag;

typedef union MC_CGM_MUX_0_DIV_TRIG_CTRL_union_tag { /* Clock Mux 0 Divider Trigger Control Register */
  vuint32_t R;
  struct {
    vuint32_t TCTL:1;                  /* Trigger control */
    vuint32_t _unused_1:30;
    vuint32_t HHEN:1;                  /* Halt handshake enable */
  } B;
} MC_CGM_MUX_0_DIV_TRIG_CTRL_tag;

typedef union MC_CGM_MUX_0_DIV_TRIG_union_tag { /* Clock Mux 0 Divider Trigger Register */
  vuint32_t R;
  struct {
    vuint32_t TRIGGER:32;              /* Trigger for divider update */
  } B;
} MC_CGM_MUX_0_DIV_TRIG_tag;

typedef union MC_CGM_MUX_0_DIV_UPD_STAT_union_tag { /* Clock Mux 0 Divider Update Status Register */
  vuint32_t R;
  struct {
    vuint32_t DIV_STAT:1;              /* Divider status for clock mux 0 */
    vuint32_t _unused_1:31;
  } B;
} MC_CGM_MUX_0_DIV_UPD_STAT_tag;

typedef union MC_CGM_MUX_1_CSC_union_tag { /* Clock Mux 1 Select Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:20;
    vuint32_t SELCTL:5;                /* Clock source selection control */
    vuint32_t _unused_29:3;
  } B;
} MC_CGM_MUX_1_CSC_tag;

typedef union MC_CGM_MUX_1_CSS_union_tag { /* Clock Mux 1 Select Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:12;
    vuint32_t SWIP:1;                  /* Switch in progress */
    vuint32_t SWTRG:3;                 /* Switch trigger cause */
    vuint32_t _unused_20:4;
    vuint32_t SELSTAT:5;               /* Clock source selection status */
    vuint32_t _unused_29:3;
  } B;
} MC_CGM_MUX_1_CSS_tag;

typedef union MC_CGM_MUX_1_DC_0_union_tag { /* Clock Mux 1 Divider 0 Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t DIV:1;                   /* Division value */
    vuint32_t _unused_17:14;
    vuint32_t DE:1;                    /* Divider enable */
  } B;
} MC_CGM_MUX_1_DC_0_tag;

typedef union MC_CGM_MUX_1_DIV_UPD_STAT_union_tag { /* Clock Mux 1 Divider Update Status Register */
  vuint32_t R;
  struct {
    vuint32_t DIV_STAT:1;              /* Divider status for clock mux 1 */
    vuint32_t _unused_1:31;
  } B;
} MC_CGM_MUX_1_DIV_UPD_STAT_tag;

typedef union MC_CGM_MUX_2_CSC_union_tag { /* Clock Mux 2 Select Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:20;
    vuint32_t SELCTL:5;                /* Clock source selection control */
    vuint32_t _unused_29:3;
  } B;
} MC_CGM_MUX_2_CSC_tag;

typedef union MC_CGM_MUX_2_CSS_union_tag { /* Clock Mux 2 Select Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:12;
    vuint32_t SWIP:1;                  /* Switch in progress */
    vuint32_t SWTRG:3;                 /* Switch trigger cause */
    vuint32_t _unused_20:4;
    vuint32_t SELSTAT:5;               /* Clock source selection status */
    vuint32_t _unused_29:3;
  } B;
} MC_CGM_MUX_2_CSS_tag;

typedef union MC_CGM_MUX_2_DC_0_union_tag { /* Clock Mux 2 Divider 0 Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t DIV:1;                   /* Division value */
    vuint32_t _unused_17:14;
    vuint32_t DE:1;                    /* Divider enable */
  } B;
} MC_CGM_MUX_2_DC_0_tag;

typedef union MC_CGM_MUX_2_DIV_UPD_STAT_union_tag { /* Clock Mux 2 Divider Update Status Register */
  vuint32_t R;
  struct {
    vuint32_t DIV_STAT:1;              /* Divider status for clock mux 2 */
    vuint32_t _unused_1:31;
  } B;
} MC_CGM_MUX_2_DIV_UPD_STAT_tag;

typedef union MC_CGM_MUX_3_CSC_union_tag { /* Clock Mux 3 Select Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:20;
    vuint32_t SELCTL:5;                /* Clock source selection control */
    vuint32_t _unused_29:3;
  } B;
} MC_CGM_MUX_3_CSC_tag;

typedef union MC_CGM_MUX_3_CSS_union_tag { /* Clock Mux 3 Select Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:12;
    vuint32_t SWIP:1;                  /* Switch in progress */
    vuint32_t SWTRG:3;                 /* Switch trigger cause */
    vuint32_t _unused_20:4;
    vuint32_t SELSTAT:5;               /* Clock source selection status */
    vuint32_t _unused_29:3;
  } B;
} MC_CGM_MUX_3_CSS_tag;

typedef union MC_CGM_MUX_3_DC_0_union_tag { /* Clock Mux 3 Divider 0 Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t DIV:2;                   /* Division value */
    vuint32_t _unused_18:13;
    vuint32_t DE:1;                    /* Divider enable */
  } B;
} MC_CGM_MUX_3_DC_0_tag;

typedef union MC_CGM_MUX_3_DIV_UPD_STAT_union_tag { /* Clock Mux 3 Divider Update Status Register */
  vuint32_t R;
  struct {
    vuint32_t DIV_STAT:1;              /* Divider status for clock mux 3 */
    vuint32_t _unused_1:31;
  } B;
} MC_CGM_MUX_3_DIV_UPD_STAT_tag;

typedef union MC_CGM_MUX_4_CSC_union_tag { /* Clock Mux 4 Select Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:20;
    vuint32_t SELCTL:5;                /* Clock source selection control */
    vuint32_t _unused_29:3;
  } B;
} MC_CGM_MUX_4_CSC_tag;

typedef union MC_CGM_MUX_4_CSS_union_tag { /* Clock Mux 4 Select Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:12;
    vuint32_t SWIP:1;                  /* Switch in progress */
    vuint32_t SWTRG:3;                 /* Switch trigger cause */
    vuint32_t _unused_20:4;
    vuint32_t SELSTAT:5;               /* Clock source selection status */
    vuint32_t _unused_29:3;
  } B;
} MC_CGM_MUX_4_CSS_tag;

typedef union MC_CGM_MUX_4_DC_0_union_tag { /* Clock Mux 4 Divider 0 Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t DIV:2;                   /* Division value */
    vuint32_t _unused_18:13;
    vuint32_t DE:1;                    /* Divider enable */
  } B;
} MC_CGM_MUX_4_DC_0_tag;

typedef union MC_CGM_MUX_4_DIV_UPD_STAT_union_tag { /* Clock Mux 4 Divider Update Status Register */
  vuint32_t R;
  struct {
    vuint32_t DIV_STAT:1;              /* Divider status for clock mux 4 */
    vuint32_t _unused_1:31;
  } B;
} MC_CGM_MUX_4_DIV_UPD_STAT_tag;

typedef union MC_CGM_MUX_5_CSC_union_tag { /* Clock Mux 5 Select Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CG:1;                    /* Clock gate */
    vuint32_t FCG:1;                   /* Force clock gate */
    vuint32_t _unused_4:20;
    vuint32_t SELCTL:6;                /* Clock source selection control */
    vuint32_t _unused_30:2;
  } B;
} MC_CGM_MUX_5_CSC_tag;

typedef union MC_CGM_MUX_5_CSS_union_tag { /* Clock Mux 5 Select Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t GRIP:1;                  /* Gating request is in progress. */
    vuint32_t CS:1;                    /* Clock status */
    vuint32_t _unused_18:2;
    vuint32_t _unused_20:4;
    vuint32_t SELSTAT:6;               /* Clock source selection status */
    vuint32_t _unused_30:2;
  } B;
} MC_CGM_MUX_5_CSS_tag;

typedef union MC_CGM_MUX_5_DC_0_union_tag { /* Clock Mux 5 Divider 0 Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t DIV:3;                   /* Division value */
    vuint32_t _unused_19:12;
    vuint32_t DE:1;                    /* Divider enable */
  } B;
} MC_CGM_MUX_5_DC_0_tag;

typedef union MC_CGM_MUX_5_DIV_UPD_STAT_union_tag { /* Clock Mux 5 Divider Update Status Register */
  vuint32_t R;
  struct {
    vuint32_t DIV_STAT:1;              /* Divider status for clock mux 5 */
    vuint32_t _unused_1:31;
  } B;
} MC_CGM_MUX_5_DIV_UPD_STAT_tag;

typedef union MC_CGM_MUX_6_CSC_union_tag { /* Clock Mux 6 Select Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CG:1;                    /* Clock gate */
    vuint32_t FCG:1;                   /* Force clock gate */
    vuint32_t _unused_4:20;
    vuint32_t SELCTL:6;                /* Clock source selection control */
    vuint32_t _unused_30:2;
  } B;
} MC_CGM_MUX_6_CSC_tag;

typedef union MC_CGM_MUX_6_CSS_union_tag { /* Clock Mux 6 Select Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t GRIP:1;                  /* Gating request is in progress. */
    vuint32_t CS:1;                    /* Clock status */
    vuint32_t _unused_18:2;
    vuint32_t _unused_20:4;
    vuint32_t SELSTAT:6;               /* Clock source selection status */
    vuint32_t _unused_30:2;
  } B;
} MC_CGM_MUX_6_CSS_tag;

typedef union MC_CGM_MUX_6_DC_0_union_tag { /* Clock Mux 6 Divider 0 Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t DIV:6;                   /* Division value */
    vuint32_t _unused_22:9;
    vuint32_t DE:1;                    /* Divider enable */
  } B;
} MC_CGM_MUX_6_DC_0_tag;

typedef union MC_CGM_MUX_6_DIV_UPD_STAT_union_tag { /* Clock Mux 6 Divider Update Status Register */
  vuint32_t R;
  struct {
    vuint32_t DIV_STAT:1;              /* Divider status for clock mux 6 */
    vuint32_t _unused_1:31;
  } B;
} MC_CGM_MUX_6_DIV_UPD_STAT_tag;

typedef union MC_CGM_MUX_7_CSC_union_tag { /* Clock Mux 7 Select Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:20;
    vuint32_t SELCTL:5;                /* Clock source selection control */
    vuint32_t _unused_29:3;
  } B;
} MC_CGM_MUX_7_CSC_tag;

typedef union MC_CGM_MUX_7_CSS_union_tag { /* Clock Mux 7 Select Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:12;
    vuint32_t SWIP:1;                  /* Switch in progress */
    vuint32_t SWTRG:3;                 /* Switch trigger cause */
    vuint32_t _unused_20:4;
    vuint32_t SELSTAT:5;               /* Clock source selection status */
    vuint32_t _unused_29:3;
  } B;
} MC_CGM_MUX_7_CSS_tag;

typedef union MC_CGM_MUX_7_DC_0_union_tag { /* Clock Mux 7 Divider 0 Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t DIV:6;                   /* Division value */
    vuint32_t _unused_22:9;
    vuint32_t DE:1;                    /* Divider enable */
  } B;
} MC_CGM_MUX_7_DC_0_tag;

typedef union MC_CGM_MUX_7_DIV_UPD_STAT_union_tag { /* Clock Mux 7 Divider Update Status Register */
  vuint32_t R;
  struct {
    vuint32_t DIV_STAT:1;              /* Divider status for clock mux 7 */
    vuint32_t _unused_1:31;
  } B;
} MC_CGM_MUX_7_DIV_UPD_STAT_tag;

typedef union MC_CGM_MUX_8_CSC_union_tag { /* Clock Mux 8 Select Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:20;
    vuint32_t SELCTL:5;                /* Clock source selection control */
    vuint32_t _unused_29:3;
  } B;
} MC_CGM_MUX_8_CSC_tag;

typedef union MC_CGM_MUX_8_CSS_union_tag { /* Clock Mux 8 Select Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:12;
    vuint32_t SWIP:1;                  /* Switch in progress */
    vuint32_t SWTRG:3;                 /* Switch trigger cause */
    vuint32_t _unused_20:4;
    vuint32_t SELSTAT:5;               /* Clock source selection status */
    vuint32_t _unused_29:3;
  } B;
} MC_CGM_MUX_8_CSS_tag;

typedef union MC_CGM_MUX_8_DC_0_union_tag { /* Clock Mux 8 Divider 0 Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t DIV:6;                   /* Division value */
    vuint32_t _unused_22:9;
    vuint32_t DE:1;                    /* Divider enable */
  } B;
} MC_CGM_MUX_8_DC_0_tag;

typedef union MC_CGM_MUX_8_DIV_UPD_STAT_union_tag { /* Clock Mux 8 Divider Update Status Register */
  vuint32_t R;
  struct {
    vuint32_t DIV_STAT:1;              /* Divider status for clock mux 8 */
    vuint32_t _unused_1:31;
  } B;
} MC_CGM_MUX_8_DIV_UPD_STAT_tag;

typedef union MC_CGM_MUX_9_CSC_union_tag { /* Clock Mux 9 Select Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:20;
    vuint32_t SELCTL:5;                /* Clock source selection control */
    vuint32_t _unused_29:3;
  } B;
} MC_CGM_MUX_9_CSC_tag;

typedef union MC_CGM_MUX_9_CSS_union_tag { /* Clock Mux 9 Select Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:12;
    vuint32_t SWIP:1;                  /* Switch in progress */
    vuint32_t SWTRG:3;                 /* Switch trigger cause */
    vuint32_t _unused_20:4;
    vuint32_t SELSTAT:5;               /* Clock source selection status */
    vuint32_t _unused_29:3;
  } B;
} MC_CGM_MUX_9_CSS_tag;

typedef union MC_CGM_MUX_9_DC_0_union_tag { /* Clock Mux 9 Divider 0 Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t DIV:6;                   /* Division value */
    vuint32_t _unused_22:9;
    vuint32_t DE:1;                    /* Divider enable */
  } B;
} MC_CGM_MUX_9_DC_0_tag;

typedef union MC_CGM_MUX_9_DIV_UPD_STAT_union_tag { /* Clock Mux 9 Divider Update Status Register */
  vuint32_t R;
  struct {
    vuint32_t DIV_STAT:1;              /* Divider status for clock mux 9 */
    vuint32_t _unused_1:31;
  } B;
} MC_CGM_MUX_9_DIV_UPD_STAT_tag;

typedef union MC_CGM_MUX_10_CSC_union_tag { /* Clock Mux 10 Select Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:20;
    vuint32_t SELCTL:4;                /* Clock source selection control */
    vuint32_t _unused_28:4;
  } B;
} MC_CGM_MUX_10_CSC_tag;

typedef union MC_CGM_MUX_10_CSS_union_tag { /* Clock Mux 10 Select Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CLK_SW:1;                /* Clock switch */
    vuint32_t SAFE_SW:1;               /* Safe clock request */
    vuint32_t _unused_4:12;
    vuint32_t SWIP:1;                  /* Switch in progress */
    vuint32_t SWTRG:3;                 /* Switch trigger cause */
    vuint32_t _unused_20:4;
    vuint32_t SELSTAT:4;               /* Clock source selection status */
    vuint32_t _unused_28:4;
  } B;
} MC_CGM_MUX_10_CSS_tag;

typedef union MC_CGM_MUX_10_DC_0_union_tag { /* Clock Mux 10 Divider 0 Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t DIV:3;                   /* Division value */
    vuint32_t _unused_19:12;
    vuint32_t DE:1;                    /* Divider enable */
  } B;
} MC_CGM_MUX_10_DC_0_tag;

typedef union MC_CGM_MUX_10_DIV_UPD_STAT_union_tag { /* Clock Mux 10 Divider Update Status Register */
  vuint32_t R;
  struct {
    vuint32_t DIV_STAT:1;              /* Divider status for clock mux 10 */
    vuint32_t _unused_1:31;
  } B;
} MC_CGM_MUX_10_DIV_UPD_STAT_tag;

typedef union MC_CGM_MUX_11_CSC_union_tag { /* Clock Mux 11 Select Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t CG:1;                    /* Clock gate */
    vuint32_t FCG:1;                   /* Force clock gate */
    vuint32_t _unused_4:20;
    vuint32_t SELCTL:4;                /* Clock source selection control */
    vuint32_t _unused_28:4;
  } B;
} MC_CGM_MUX_11_CSC_tag;

typedef union MC_CGM_MUX_11_CSS_union_tag { /* Clock Mux 11 Select Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t GRIP:1;                  /* Gating request is in progress. */
    vuint32_t CS:1;                    /* Clock status */
    vuint32_t _unused_18:2;
    vuint32_t _unused_20:4;
    vuint32_t SELSTAT:4;               /* Clock source selection status */
    vuint32_t _unused_28:4;
  } B;
} MC_CGM_MUX_11_CSS_tag;

typedef union MC_CGM_MUX_11_DC_0_union_tag { /* Clock Mux 11 Divider 0 Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;
    vuint32_t DIV:3;                   /* Division value */
    vuint32_t _unused_19:12;
    vuint32_t DE:1;                    /* Divider enable */
  } B;
} MC_CGM_MUX_11_DC_0_tag;

typedef union MC_CGM_MUX_11_DIV_UPD_STAT_union_tag { /* Clock Mux 11 Divider Update Status Register */
  vuint32_t R;
  struct {
    vuint32_t DIV_STAT:1;              /* Divider status for clock mux 11 */
    vuint32_t _unused_1:31;
  } B;
} MC_CGM_MUX_11_DIV_UPD_STAT_tag;

struct MC_CGM_tag {
  MC_CGM_PCFS_SDUR_tag PCFS_SDUR;      /* PCFS Step Duration */
  uint8_t MC_CGM_reserved0[764];
  MC_CGM_MUX_0_CSC_tag MUX_0_CSC;      /* Clock Mux 0 Select Control Register */
  MC_CGM_MUX_0_CSS_tag MUX_0_CSS;      /* Clock Mux 0 Select Status Register */
  MC_CGM_MUX_0_DC_0_tag MUX_0_DC_0;    /* Clock Mux 0 Divider 0 Control Register */
  MC_CGM_MUX_0_DC_1_tag MUX_0_DC_1;    /* Clock Mux 0 Divider 1 Control Register */
  MC_CGM_MUX_0_DC_2_tag MUX_0_DC_2;    /* Clock Mux 0 Divider 2 Control Register */
  MC_CGM_MUX_0_DC_3_tag MUX_0_DC_3;    /* Clock Mux 0 Divider 3 Control Register */
  MC_CGM_MUX_0_DC_4_tag MUX_0_DC_4;    /* Clock Mux 0 Divider 4 Control Register */
  MC_CGM_MUX_0_DC_5_tag MUX_0_DC_5;    /* Clock Mux 0 Divider 5 Control Register */
  MC_CGM_MUX_0_DC_6_tag MUX_0_DC_6;    /* Clock Mux 0 Divider 6 Control Register */
  uint8_t MC_CGM_reserved1[16];
  MC_CGM_MUX_0_DIV_TRIG_CTRL_tag MUX_0_DIV_TRIG_CTRL; /* Clock Mux 0 Divider Trigger Control Register */
  MC_CGM_MUX_0_DIV_TRIG_tag MUX_0_DIV_TRIG; /* Clock Mux 0 Divider Trigger Register */
  MC_CGM_MUX_0_DIV_UPD_STAT_tag MUX_0_DIV_UPD_STAT; /* Clock Mux 0 Divider Update Status Register */
  MC_CGM_MUX_1_CSC_tag MUX_1_CSC;      /* Clock Mux 1 Select Control Register */
  MC_CGM_MUX_1_CSS_tag MUX_1_CSS;      /* Clock Mux 1 Select Status Register */
  MC_CGM_MUX_1_DC_0_tag MUX_1_DC_0;    /* Clock Mux 1 Divider 0 Control Register */
  uint8_t MC_CGM_reserved2[48];
  MC_CGM_MUX_1_DIV_UPD_STAT_tag MUX_1_DIV_UPD_STAT; /* Clock Mux 1 Divider Update Status Register */
  MC_CGM_MUX_2_CSC_tag MUX_2_CSC;      /* Clock Mux 2 Select Control Register */
  MC_CGM_MUX_2_CSS_tag MUX_2_CSS;      /* Clock Mux 2 Select Status Register */
  MC_CGM_MUX_2_DC_0_tag MUX_2_DC_0;    /* Clock Mux 2 Divider 0 Control Register */
  uint8_t MC_CGM_reserved3[48];
  MC_CGM_MUX_2_DIV_UPD_STAT_tag MUX_2_DIV_UPD_STAT; /* Clock Mux 2 Divider Update Status Register */
  MC_CGM_MUX_3_CSC_tag MUX_3_CSC;      /* Clock Mux 3 Select Control Register */
  MC_CGM_MUX_3_CSS_tag MUX_3_CSS;      /* Clock Mux 3 Select Status Register */
  MC_CGM_MUX_3_DC_0_tag MUX_3_DC_0;    /* Clock Mux 3 Divider 0 Control Register */
  uint8_t MC_CGM_reserved4[48];
  MC_CGM_MUX_3_DIV_UPD_STAT_tag MUX_3_DIV_UPD_STAT; /* Clock Mux 3 Divider Update Status Register */
  MC_CGM_MUX_4_CSC_tag MUX_4_CSC;      /* Clock Mux 4 Select Control Register */
  MC_CGM_MUX_4_CSS_tag MUX_4_CSS;      /* Clock Mux 4 Select Status Register */
  MC_CGM_MUX_4_DC_0_tag MUX_4_DC_0;    /* Clock Mux 4 Divider 0 Control Register */
  uint8_t MC_CGM_reserved5[48];
  MC_CGM_MUX_4_DIV_UPD_STAT_tag MUX_4_DIV_UPD_STAT; /* Clock Mux 4 Divider Update Status Register */
  MC_CGM_MUX_5_CSC_tag MUX_5_CSC;      /* Clock Mux 5 Select Control Register */
  MC_CGM_MUX_5_CSS_tag MUX_5_CSS;      /* Clock Mux 5 Select Status Register */
  MC_CGM_MUX_5_DC_0_tag MUX_5_DC_0;    /* Clock Mux 5 Divider 0 Control Register */
  uint8_t MC_CGM_reserved6[48];
  MC_CGM_MUX_5_DIV_UPD_STAT_tag MUX_5_DIV_UPD_STAT; /* Clock Mux 5 Divider Update Status Register */
  MC_CGM_MUX_6_CSC_tag MUX_6_CSC;      /* Clock Mux 6 Select Control Register */
  MC_CGM_MUX_6_CSS_tag MUX_6_CSS;      /* Clock Mux 6 Select Status Register */
  MC_CGM_MUX_6_DC_0_tag MUX_6_DC_0;    /* Clock Mux 6 Divider 0 Control Register */
  uint8_t MC_CGM_reserved7[48];
  MC_CGM_MUX_6_DIV_UPD_STAT_tag MUX_6_DIV_UPD_STAT; /* Clock Mux 6 Divider Update Status Register */
  MC_CGM_MUX_7_CSC_tag MUX_7_CSC;      /* Clock Mux 7 Select Control Register */
  MC_CGM_MUX_7_CSS_tag MUX_7_CSS;      /* Clock Mux 7 Select Status Register */
  MC_CGM_MUX_7_DC_0_tag MUX_7_DC_0;    /* Clock Mux 7 Divider 0 Control Register */
  uint8_t MC_CGM_reserved8[48];
  MC_CGM_MUX_7_DIV_UPD_STAT_tag MUX_7_DIV_UPD_STAT; /* Clock Mux 7 Divider Update Status Register */
  MC_CGM_MUX_8_CSC_tag MUX_8_CSC;      /* Clock Mux 8 Select Control Register */
  MC_CGM_MUX_8_CSS_tag MUX_8_CSS;      /* Clock Mux 8 Select Status Register */
  MC_CGM_MUX_8_DC_0_tag MUX_8_DC_0;    /* Clock Mux 8 Divider 0 Control Register */
  uint8_t MC_CGM_reserved9[48];
  MC_CGM_MUX_8_DIV_UPD_STAT_tag MUX_8_DIV_UPD_STAT; /* Clock Mux 8 Divider Update Status Register */
  MC_CGM_MUX_9_CSC_tag MUX_9_CSC;      /* Clock Mux 9 Select Control Register */
  MC_CGM_MUX_9_CSS_tag MUX_9_CSS;      /* Clock Mux 9 Select Status Register */
  MC_CGM_MUX_9_DC_0_tag MUX_9_DC_0;    /* Clock Mux 9 Divider 0 Control Register */
  uint8_t MC_CGM_reserved10[48];
  MC_CGM_MUX_9_DIV_UPD_STAT_tag MUX_9_DIV_UPD_STAT; /* Clock Mux 9 Divider Update Status Register */
  MC_CGM_MUX_10_CSC_tag MUX_10_CSC;    /* Clock Mux 10 Select Control Register */
  MC_CGM_MUX_10_CSS_tag MUX_10_CSS;    /* Clock Mux 10 Select Status Register */
  MC_CGM_MUX_10_DC_0_tag MUX_10_DC_0;  /* Clock Mux 10 Divider 0 Control Register */
  uint8_t MC_CGM_reserved11[48];
  MC_CGM_MUX_10_DIV_UPD_STAT_tag MUX_10_DIV_UPD_STAT; /* Clock Mux 10 Divider Update Status Register */
  MC_CGM_MUX_11_CSC_tag MUX_11_CSC;    /* Clock Mux 11 Select Control Register */
  MC_CGM_MUX_11_CSS_tag MUX_11_CSS;    /* Clock Mux 11 Select Status Register */
  MC_CGM_MUX_11_DC_0_tag MUX_11_DC_0;  /* Clock Mux 11 Divider 0 Control Register */
  uint8_t MC_CGM_reserved12[48];
  MC_CGM_MUX_11_DIV_UPD_STAT_tag MUX_11_DIV_UPD_STAT; /* Clock Mux 11 Divider Update Status Register */
};


/* ============================================================================
   =============================== Module: MC_ME ==============================
   ============================================================================ */

typedef union MC_ME_CTL_KEY_union_tag { /* Control Key Register */
  vuint32_t R;
  struct {
    vuint32_t KEY:16;                  /* Control key */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} MC_ME_CTL_KEY_tag;

typedef union MC_ME_MODE_CONF_union_tag { /* Mode Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t DEST_RST:1;              /* Destructive reset request */
    vuint32_t FUNC_RST:1;              /* Functional reset request */
    vuint32_t _unused_2:13;            /* Reserved */
    vuint32_t STANDBY:1;               /* Standby request */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} MC_ME_MODE_CONF_tag;

typedef union MC_ME_MODE_UPD_union_tag { /* Mode Update Register */
  vuint32_t R;
  struct {
    vuint32_t MODE_UPD:1;              /* Mode update */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} MC_ME_MODE_UPD_tag;

typedef union MC_ME_MODE_STAT_union_tag { /* Mode Status Register */
  vuint32_t R;
  struct {
    vuint32_t PREV_MODE:1;             /* Previous mode */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} MC_ME_MODE_STAT_tag;

typedef union MC_ME_MAIN_COREID_union_tag { /* Main Core ID Register */
  vuint32_t R;
  struct {
    vuint32_t CIDX:3;                  /* Core index */
    vuint32_t _unused_3:5;             /* Reserved */
    vuint32_t PIDX:5;                  /* Partition index */
    vuint32_t _unused_13:19;           /* Reserved */
  } B;
} MC_ME_MAIN_COREID_tag;

typedef union MC_ME_PRTN0_PCONF_union_tag { /* Partition 0 Process Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t PCE:1;                   /* Partition clock enable */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t _unused_2:1;             /* Reserved */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t _unused_7:25;            /* Reserved */
  } B;
} MC_ME_PRTN0_PCONF_tag;

typedef union MC_ME_PRTN0_PUPD_union_tag { /* Partition 0 Process Update Register */
  vuint32_t R;
  struct {
    vuint32_t PCUD:1;                  /* Partition clock update */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t _unused_2:1;             /* Reserved */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t _unused_7:25;            /* Reserved */
  } B;
} MC_ME_PRTN0_PUPD_tag;

typedef union MC_ME_PRTN0_STAT_union_tag { /* Partition 0 Status Register */
  vuint32_t R;
  struct {
    vuint32_t PCS:1;                   /* Partition clock status */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t _unused_2:1;             /* Reserved */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t _unused_7:25;            /* Reserved */
  } B;
} MC_ME_PRTN0_STAT_tag;

typedef union MC_ME_PRTN0_COFB1_STAT_union_tag { /* Partition 0 COFB Set 1 Clock Status Register */
  vuint32_t R;
  struct {
    vuint32_t BLOCK32:1;               /* IP block status */
    vuint32_t BLOCK33:1;               /* IP block status */
    vuint32_t BLOCK34:1;               /* IP block status */
    vuint32_t BLOCK35:1;               /* IP block status */
    vuint32_t BLOCK36:1;               /* IP block status */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t BLOCK38:1;               /* IP block status */
    vuint32_t BLOCK39:1;               /* IP block status */
    vuint32_t BLOCK40:1;               /* IP block status */
    vuint32_t BLOCK41:1;               /* IP block status */
    vuint32_t BLOCK42:1;               /* IP block status */
    vuint32_t _unused_11:1;            /* Reserved */
    vuint32_t BLOCK44:1;               /* IP block status */
    vuint32_t BLOCK45:1;               /* IP block status */
    vuint32_t BLOCK46:1;               /* IP block status */
    vuint32_t BLOCK47:1;               /* IP block status */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t _unused_21:1;            /* Reserved */
    vuint32_t _unused_22:1;            /* Reserved */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t _unused_25:1;            /* Reserved */
    vuint32_t _unused_26:1;            /* Reserved */
    vuint32_t _unused_27:1;            /* Reserved */
    vuint32_t _unused_28:1;            /* Reserved */
    vuint32_t _unused_29:1;            /* Reserved */
    vuint32_t _unused_30:1;            /* Reserved */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} MC_ME_PRTN0_COFB1_STAT_tag;

typedef union MC_ME_PRTN0_COFB1_CLKEN_union_tag { /* Partition 0 COFB Set 1 Clock Enable Register */
  vuint32_t R;
  struct {
    vuint32_t REQ32:1;                 /* Clock enable */
    vuint32_t REQ33:1;                 /* Clock enable */
    vuint32_t REQ34:1;                 /* Clock enable */
    vuint32_t REQ35:1;                 /* Clock enable */
    vuint32_t REQ36:1;                 /* Clock enable */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t REQ38:1;                 /* Clock enable */
    vuint32_t REQ39:1;                 /* Clock enable */
    vuint32_t REQ40:1;                 /* Clock enable */
    vuint32_t REQ41:1;                 /* Clock enable */
    vuint32_t REQ42:1;                 /* Clock enable */
    vuint32_t _unused_11:1;            /* Reserved */
    vuint32_t REQ44:1;                 /* Clock enable */
    vuint32_t REQ45:1;                 /* Clock enable */
    vuint32_t REQ46:1;                 /* Clock enable */
    vuint32_t REQ47:1;                 /* Clock enable */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t _unused_21:1;            /* Reserved */
    vuint32_t _unused_22:1;            /* Reserved */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t _unused_25:1;            /* Reserved */
    vuint32_t _unused_26:1;            /* Reserved */
    vuint32_t _unused_27:1;            /* Reserved */
    vuint32_t _unused_28:1;            /* Reserved */
    vuint32_t _unused_29:1;            /* Reserved */
    vuint32_t _unused_30:1;            /* Reserved */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} MC_ME_PRTN0_COFB1_CLKEN_tag;

typedef union MC_ME_PRTN0_CORE0_PCONF_union_tag { /* Partition 0 Core 0 Process Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t CCE:1;                   /* Core 0 clock enable */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} MC_ME_PRTN0_CORE0_PCONF_tag;

typedef union MC_ME_PRTN0_CORE0_PUPD_union_tag { /* Partition 0 Core 0 Process Update Register */
  vuint32_t R;
  struct {
    vuint32_t CCUPD:1;                 /* Core 0 clock update */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} MC_ME_PRTN0_CORE0_PUPD_tag;

typedef union MC_ME_PRTN0_CORE0_STAT_union_tag { /* Partition 0 Core 0 Status Register */
  vuint32_t R;
  struct {
    vuint32_t CCS:1;                   /* Core 0 clock process status */
    vuint32_t _unused_1:30;            /* Reserved */
    vuint32_t WFI:1;                   /* Wait for interrupt status */
  } B;
} MC_ME_PRTN0_CORE0_STAT_tag;

typedef union MC_ME_PRTN0_CORE0_ADDR_union_tag { /* Partition 0 Core 0 Address Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;             /* Reserved */
    vuint32_t ADDR:30;                 /* Address */
  } B;
} MC_ME_PRTN0_CORE0_ADDR_tag;

typedef union MC_ME_PRTN0_CORE1_PCONF_union_tag { /* Partition 0 Core 1 Process Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t CCE:1;                   /* Core 1 clock enable */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} MC_ME_PRTN0_CORE1_PCONF_tag;

typedef union MC_ME_PRTN0_CORE1_PUPD_union_tag { /* Partition 0 Core 1 Process Update Register */
  vuint32_t R;
  struct {
    vuint32_t CCUPD:1;                 /* Core 1 clock update */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} MC_ME_PRTN0_CORE1_PUPD_tag;

typedef union MC_ME_PRTN0_CORE1_STAT_union_tag { /* Partition 0 Core 1 Status Register */
  vuint32_t R;
  struct {
    vuint32_t CCS:1;                   /* Core 1 clock process status */
    vuint32_t _unused_1:30;            /* Reserved */
    vuint32_t WFI:1;                   /* Wait for interrupt status */
  } B;
} MC_ME_PRTN0_CORE1_STAT_tag;

typedef union MC_ME_PRTN0_CORE1_ADDR_union_tag { /* Partition 0 Core 1 Address Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;             /* Reserved */
    vuint32_t ADDR:30;                 /* Address */
  } B;
} MC_ME_PRTN0_CORE1_ADDR_tag;

typedef union MC_ME_PRTN0_CORE2_STAT_union_tag { /* Partition 0 Core 2 Status Register */
  vuint32_t R;
  struct {
    vuint32_t CCS:1;                   /* Core 2 clock process status */
    vuint32_t _unused_1:30;            /* Reserved */
    vuint32_t WFI:1;                   /* Wait for interrupt status */
  } B;
} MC_ME_PRTN0_CORE2_STAT_tag;

typedef union MC_ME_PRTN0_CORE2_ADDR_union_tag { /* Partition 0 Core 2 Address Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;             /* Reserved */
    vuint32_t ADDR:30;                 /* Address */
  } B;
} MC_ME_PRTN0_CORE2_ADDR_tag;

typedef union MC_ME_PRTN1_PCONF_union_tag { /* Partition 1 Process Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t PCE:1;                   /* Partition clock enable */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t _unused_2:1;             /* Reserved */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t _unused_7:25;            /* Reserved */
  } B;
} MC_ME_PRTN1_PCONF_tag;

typedef union MC_ME_PRTN1_PUPD_union_tag { /* Partition 1 Process Update Register */
  vuint32_t R;
  struct {
    vuint32_t PCUD:1;                  /* Partition clock update */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t _unused_2:1;             /* Reserved */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t _unused_7:25;            /* Reserved */
  } B;
} MC_ME_PRTN1_PUPD_tag;

typedef union MC_ME_PRTN1_STAT_union_tag { /* Partition 1 Status Register */
  vuint32_t R;
  struct {
    vuint32_t PCS:1;                   /* Partition clock status */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t _unused_2:1;             /* Reserved */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t _unused_7:25;            /* Reserved */
  } B;
} MC_ME_PRTN1_STAT_tag;

typedef union MC_ME_PRTN1_COFB0_STAT_union_tag { /* Partition 1 COFB Set 0 Clock Status Register */
  vuint32_t R;
  struct {
    vuint32_t BLOCK0:1;                /* IP block status */
    vuint32_t BLOCK1:1;                /* IP block status */
    vuint32_t BLOCK2:1;                /* IP block status */
    vuint32_t BLOCK3:1;                /* IP block status */
    vuint32_t BLOCK4:1;                /* IP block status */
    vuint32_t BLOCK5:1;                /* IP block status */
    vuint32_t BLOCK6:1;                /* IP block status */
    vuint32_t BLOCK7:1;                /* IP block status */
    vuint32_t BLOCK8:1;                /* IP block status */
    vuint32_t BLOCK9:1;                /* IP block status */
    vuint32_t BLOCK10:1;               /* IP block status */
    vuint32_t BLOCK11:1;               /* IP block status */
    vuint32_t BLOCK12:1;               /* IP block status */
    vuint32_t BLOCK13:1;               /* IP block status */
    vuint32_t BLOCK14:1;               /* IP block status */
    vuint32_t BLOCK15:1;               /* IP block status */
    vuint32_t BLOCK16:1;               /* IP block status */
    vuint32_t BLOCK17:1;               /* IP block status */
    vuint32_t BLOCK18:1;               /* IP block status */
    vuint32_t BLOCK19:1;               /* IP block status */
    vuint32_t BLOCK20:1;               /* IP block status */
    vuint32_t BLOCK21:1;               /* IP block status */
    vuint32_t BLOCK22:1;               /* IP block status */
    vuint32_t BLOCK23:1;               /* IP block status */
    vuint32_t BLOCK24:1;               /* IP block status */
    vuint32_t BLOCK25:1;               /* IP block status */
    vuint32_t BLOCK26:1;               /* IP block status */
    vuint32_t BLOCK27:1;               /* IP block status */
    vuint32_t BLOCK28:1;               /* IP block status */
    vuint32_t BLOCK29:1;               /* IP block status */
    vuint32_t BLOCK30:1;               /* IP block status */
    vuint32_t BLOCK31:1;               /* IP block status */
  } B;
} MC_ME_PRTN1_COFB0_STAT_tag;

typedef union MC_ME_PRTN1_COFB1_STAT_union_tag { /* Partition 1 COFB Set 1 Clock Status Register */
  vuint32_t R;
  struct {
    vuint32_t BLOCK32:1;               /* IP block status */
    vuint32_t BLOCK33:1;               /* IP block status */
    vuint32_t BLOCK34:1;               /* IP block status */
    vuint32_t BLOCK35:1;               /* IP block status */
    vuint32_t BLOCK36:1;               /* IP block status */
    vuint32_t BLOCK37:1;               /* IP block status */
    vuint32_t BLOCK38:1;               /* IP block status */
    vuint32_t BLOCK39:1;               /* IP block status */
    vuint32_t BLOCK40:1;               /* IP block status */
    vuint32_t BLOCK41:1;               /* IP block status */
    vuint32_t BLOCK42:1;               /* IP block status */
    vuint32_t BLOCK43:1;               /* IP block status */
    vuint32_t _unused_12:1;            /* Reserved */
    vuint32_t BLOCK45:1;               /* IP block status */
    vuint32_t _unused_14:1;            /* Reserved */
    vuint32_t BLOCK47:1;               /* IP block status */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t BLOCK49:1;               /* IP block status */
    vuint32_t BLOCK50:1;               /* IP block status */
    vuint32_t BLOCK51:1;               /* IP block status */
    vuint32_t BLOCK52:1;               /* IP block status */
    vuint32_t BLOCK53:1;               /* IP block status */
    vuint32_t BLOCK54:1;               /* IP block status */
    vuint32_t BLOCK55:1;               /* IP block status */
    vuint32_t BLOCK56:1;               /* IP block status */
    vuint32_t _unused_25:1;            /* Reserved */
    vuint32_t BLOCK58:1;               /* IP block status */
    vuint32_t BLOCK59:1;               /* IP block status */
    vuint32_t BLOCK60:1;               /* IP block status */
    vuint32_t _unused_29:1;            /* Reserved */
    vuint32_t _unused_30:1;            /* Reserved */
    vuint32_t BLOCK63:1;               /* IP block status */
  } B;
} MC_ME_PRTN1_COFB1_STAT_tag;

typedef union MC_ME_PRTN1_COFB2_STAT_union_tag { /* Partition 1 COFB Set 2 Clock Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t BLOCK65:1;               /* IP block status */
    vuint32_t BLOCK66:1;               /* IP block status */
    vuint32_t BLOCK67:1;               /* IP block status */
    vuint32_t BLOCK68:1;               /* IP block status */
    vuint32_t BLOCK69:1;               /* IP block status */
    vuint32_t BLOCK70:1;               /* IP block status */
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t _unused_8:1;             /* Reserved */
    vuint32_t BLOCK73:1;               /* IP block status */
    vuint32_t BLOCK74:1;               /* IP block status */
    vuint32_t BLOCK75:1;               /* IP block status */
    vuint32_t BLOCK76:1;               /* IP block status */
    vuint32_t BLOCK77:1;               /* IP block status */
    vuint32_t BLOCK78:1;               /* IP block status */
    vuint32_t BLOCK79:1;               /* IP block status */
    vuint32_t BLOCK80:1;               /* IP block status */
    vuint32_t BLOCK81:1;               /* IP block status */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t BLOCK84:1;               /* IP block status */
    vuint32_t BLOCK85:1;               /* IP block status */
    vuint32_t BLOCK86:1;               /* IP block status */
    vuint32_t BLOCK87:1;               /* IP block status */
    vuint32_t BLOCK88:1;               /* IP block status */
    vuint32_t BLOCK89:1;               /* IP block status */
    vuint32_t _unused_26:1;            /* Reserved */
    vuint32_t BLOCK91:1;               /* IP block status */
    vuint32_t BLOCK92:1;               /* IP block status */
    vuint32_t BLOCK93:1;               /* IP block status */
    vuint32_t _unused_30:1;            /* Reserved */
    vuint32_t BLOCK95:1;               /* IP block status */
  } B;
} MC_ME_PRTN1_COFB2_STAT_tag;

typedef union MC_ME_PRTN1_COFB3_STAT_union_tag { /* Partition 1 COFB Set 3 Clock Status Register */
  vuint32_t R;
  struct {
    vuint32_t BLOCK96:1;               /* IP block status */
    vuint32_t BLOCK97:1;               /* IP block status */
    vuint32_t BLOCK98:1;               /* IP block status */
    vuint32_t BLOCK99:1;               /* IP block status */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t BLOCK101:1;              /* IP block status */
    vuint32_t BLOCK102:1;              /* IP block status */
    vuint32_t BLOCK103:1;              /* IP block status */
    vuint32_t BLOCK104:1;              /* IP block status */
    vuint32_t BLOCK105:1;              /* IP block status */
    vuint32_t BLOCK106:1;              /* IP block status */
    vuint32_t BLOCK107:1;              /* IP block status */
    vuint32_t BLOCK108:1;              /* IP block status */
    vuint32_t _unused_13:1;            /* Reserved */
    vuint32_t BLOCK110:1;              /* IP block status */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t _unused_21:1;            /* Reserved */
    vuint32_t _unused_22:1;            /* Reserved */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t _unused_25:1;            /* Reserved */
    vuint32_t _unused_26:1;            /* Reserved */
    vuint32_t _unused_27:1;            /* Reserved */
    vuint32_t _unused_28:1;            /* Reserved */
    vuint32_t _unused_29:1;            /* Reserved */
    vuint32_t _unused_30:1;            /* Reserved */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} MC_ME_PRTN1_COFB3_STAT_tag;

typedef union MC_ME_PRTN1_COFB0_CLKEN_union_tag { /* Partition 1 COFB Set 0 Clock Enable Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t _unused_2:1;             /* Reserved */
    vuint32_t REQ3:1;                  /* Clock enable */
    vuint32_t REQ4:1;                  /* Clock enable */
    vuint32_t REQ5:1;                  /* Clock enable */
    vuint32_t REQ6:1;                  /* Clock enable */
    vuint32_t REQ7:1;                  /* Clock enable */
    vuint32_t REQ8:1;                  /* Clock enable */
    vuint32_t REQ9:1;                  /* Clock enable */
    vuint32_t REQ10:1;                 /* Clock enable */
    vuint32_t REQ11:1;                 /* Clock enable */
    vuint32_t REQ12:1;                 /* Clock enable */
    vuint32_t REQ13:1;                 /* Clock enable */
    vuint32_t REQ14:1;                 /* Clock enable */
    vuint32_t REQ15:1;                 /* Clock enable */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t REQ21:1;                 /* Clock enable */
    vuint32_t REQ22:1;                 /* Clock enable */
    vuint32_t REQ23:1;                 /* Clock enable */
    vuint32_t REQ24:1;                 /* Clock enable */
    vuint32_t _unused_25:1;            /* Reserved */
    vuint32_t _unused_26:1;            /* Reserved */
    vuint32_t _unused_27:1;            /* Reserved */
    vuint32_t REQ28:1;                 /* Clock enable */
    vuint32_t REQ29:1;                 /* Clock enable */
    vuint32_t _unused_30:1;            /* Reserved */
    vuint32_t REQ31:1;                 /* Clock enable */
  } B;
} MC_ME_PRTN1_COFB0_CLKEN_tag;

typedef union MC_ME_PRTN1_COFB1_CLKEN_union_tag { /* Partition 1 COFB Set 1 Clock Enable Register */
  vuint32_t R;
  struct {
    vuint32_t REQ32:1;                 /* Clock enable */
    vuint32_t REQ33:1;                 /* Clock enable */
    vuint32_t REQ34:1;                 /* Clock enable */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t _unused_8:1;             /* Reserved */
    vuint32_t _unused_9:1;             /* Reserved */
    vuint32_t REQ42:1;                 /* Clock enable */
    vuint32_t _unused_11:1;            /* Reserved */
    vuint32_t _unused_12:1;            /* Reserved */
    vuint32_t REQ45:1;                 /* Clock enable */
    vuint32_t _unused_14:1;            /* Reserved */
    vuint32_t REQ47:1;                 /* Clock enable */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t REQ49:1;                 /* Clock enable */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t REQ51:1;                 /* Clock enable */
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t REQ53:1;                 /* Clock enable */
    vuint32_t _unused_22:1;            /* Reserved */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t REQ56:1;                 /* Clock enable */
    vuint32_t _unused_25:1;            /* Reserved */
    vuint32_t _unused_26:1;            /* Reserved */
    vuint32_t _unused_27:1;            /* Reserved */
    vuint32_t _unused_28:1;            /* Reserved */
    vuint32_t _unused_29:1;            /* Reserved */
    vuint32_t _unused_30:1;            /* Reserved */
    vuint32_t REQ63:1;                 /* Clock enable */
  } B;
} MC_ME_PRTN1_COFB1_CLKEN_tag;

typedef union MC_ME_PRTN1_COFB2_CLKEN_union_tag { /* Partition 1 COFB Set 2 Clock Enable Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t REQ65:1;                 /* Clock enable */
    vuint32_t REQ66:1;                 /* Clock enable */
    vuint32_t REQ67:1;                 /* Clock enable */
    vuint32_t REQ68:1;                 /* Clock enable */
    vuint32_t REQ69:1;                 /* Clock enable */
    vuint32_t REQ70:1;                 /* Clock enable */
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t _unused_8:1;             /* Reserved */
    vuint32_t REQ73:1;                 /* Clock enable */
    vuint32_t REQ74:1;                 /* Clock enable */
    vuint32_t REQ75:1;                 /* Clock enable */
    vuint32_t REQ76:1;                 /* Clock enable */
    vuint32_t REQ77:1;                 /* Clock enable */
    vuint32_t REQ78:1;                 /* Clock enable */
    vuint32_t REQ79:1;                 /* Clock enable */
    vuint32_t REQ80:1;                 /* Clock enable */
    vuint32_t REQ81:1;                 /* Clock enable */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t REQ84:1;                 /* Clock enable */
    vuint32_t REQ85:1;                 /* Clock enable */
    vuint32_t REQ86:1;                 /* Clock enable */
    vuint32_t REQ87:1;                 /* Clock enable */
    vuint32_t REQ88:1;                 /* Clock enable */
    vuint32_t REQ89:1;                 /* Clock enable */
    vuint32_t _unused_26:1;            /* Reserved */
    vuint32_t REQ91:1;                 /* Clock enable */
    vuint32_t REQ92:1;                 /* Clock enable */
    vuint32_t REQ93:1;                 /* Clock enable */
    vuint32_t _unused_30:1;            /* Reserved */
    vuint32_t REQ95:1;                 /* Clock enable */
  } B;
} MC_ME_PRTN1_COFB2_CLKEN_tag;

typedef union MC_ME_PRTN1_COFB3_CLKEN_union_tag { /* Partition 1 COFB Set 3 Clock Enable Register */
  vuint32_t R;
  struct {
    vuint32_t REQ96:1;                 /* Clock enable */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t _unused_2:1;             /* Reserved */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t REQ102:1;                /* Clock enable */
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t REQ104:1;                /* Clock enable */
    vuint32_t _unused_9:1;             /* Reserved */
    vuint32_t _unused_10:1;            /* Reserved */
    vuint32_t _unused_11:1;            /* Reserved */
    vuint32_t _unused_12:1;            /* Reserved */
    vuint32_t _unused_13:1;            /* Reserved */
    vuint32_t _unused_14:1;            /* Reserved */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t _unused_21:1;            /* Reserved */
    vuint32_t _unused_22:1;            /* Reserved */
    vuint32_t _unused_23:1;            /* Reserved */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t _unused_25:1;            /* Reserved */
    vuint32_t _unused_26:1;            /* Reserved */
    vuint32_t _unused_27:1;            /* Reserved */
    vuint32_t _unused_28:1;            /* Reserved */
    vuint32_t _unused_29:1;            /* Reserved */
    vuint32_t _unused_30:1;            /* Reserved */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} MC_ME_PRTN1_COFB3_CLKEN_tag;

typedef union MC_ME_PRTN2_PCONF_union_tag { /* Partition 2 Process Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t PCE:1;                   /* Partition clock enable */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t _unused_2:1;             /* Reserved */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t _unused_7:25;            /* Reserved */
  } B;
} MC_ME_PRTN2_PCONF_tag;

typedef union MC_ME_PRTN2_PUPD_union_tag { /* Partition 2 Process Update Register */
  vuint32_t R;
  struct {
    vuint32_t PCUD:1;                  /* Partition clock update */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t _unused_2:1;             /* Reserved */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t _unused_7:25;            /* Reserved */
  } B;
} MC_ME_PRTN2_PUPD_tag;

typedef union MC_ME_PRTN2_STAT_union_tag { /* Partition 2 Status Register */
  vuint32_t R;
  struct {
    vuint32_t PCS:1;                   /* Partition clock status */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t _unused_2:1;             /* Reserved */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t _unused_7:25;            /* Reserved */
  } B;
} MC_ME_PRTN2_STAT_tag;

typedef union MC_ME_PRTN2_COFB0_STAT_union_tag { /* Partition 2 COFB Set 0 Clock Status Register */
  vuint32_t R;
  struct {
    vuint32_t BLOCK0:1;                /* IP block status */
    vuint32_t BLOCK1:1;                /* IP block status */
    vuint32_t _unused_2:1;             /* Reserved */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t BLOCK4:1;                /* IP block status */
    vuint32_t BLOCK5:1;                /* IP block status */
    vuint32_t BLOCK6:1;                /* IP block status */
    vuint32_t BLOCK7:1;                /* IP block status */
    vuint32_t BLOCK8:1;                /* IP block status */
    vuint32_t BLOCK9:1;                /* IP block status */
    vuint32_t BLOCK10:1;               /* IP block status */
    vuint32_t BLOCK11:1;               /* IP block status */
    vuint32_t BLOCK12:1;               /* IP block status */
    vuint32_t BLOCK13:1;               /* IP block status */
    vuint32_t BLOCK14:1;               /* IP block status */
    vuint32_t BLOCK15:1;               /* IP block status */
    vuint32_t BLOCK16:1;               /* IP block status */
    vuint32_t BLOCK17:1;               /* IP block status */
    vuint32_t BLOCK18:1;               /* IP block status */
    vuint32_t BLOCK19:1;               /* IP block status */
    vuint32_t BLOCK20:1;               /* IP block status */
    vuint32_t BLOCK21:1;               /* IP block status */
    vuint32_t BLOCK22:1;               /* IP block status */
    vuint32_t BLOCK23:1;               /* IP block status */
    vuint32_t BLOCK24:1;               /* IP block status */
    vuint32_t BLOCK25:1;               /* IP block status */
    vuint32_t _unused_26:1;            /* Reserved */
    vuint32_t BLOCK27:1;               /* IP block status */
    vuint32_t _unused_28:1;            /* Reserved */
    vuint32_t BLOCK29:1;               /* IP block status */
    vuint32_t _unused_30:1;            /* Reserved */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} MC_ME_PRTN2_COFB0_STAT_tag;

typedef union MC_ME_PRTN2_COFB1_STAT_union_tag { /* Partition 2 COFB Set 1 Clock Status Register */
  vuint32_t R;
  struct {
    vuint32_t BLOCK32:1;               /* IP block status */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t _unused_2:1;             /* Reserved */
    vuint32_t BLOCK35:1;               /* IP block status */
    vuint32_t BLOCK36:1;               /* IP block status */
    vuint32_t BLOCK37:1;               /* IP block status */
    vuint32_t BLOCK38:1;               /* IP block status */
    vuint32_t BLOCK39:1;               /* IP block status */
    vuint32_t BLOCK40:1;               /* IP block status */
    vuint32_t BLOCK41:1;               /* IP block status */
    vuint32_t BLOCK42:1;               /* IP block status */
    vuint32_t _unused_11:1;            /* Reserved */
    vuint32_t _unused_12:1;            /* Reserved */
    vuint32_t _unused_13:1;            /* Reserved */
    vuint32_t _unused_14:1;            /* Reserved */
    vuint32_t BLOCK47:1;               /* IP block status */
    vuint32_t BLOCK48:1;               /* IP block status */
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t BLOCK51:1;               /* IP block status */
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t _unused_21:1;            /* Reserved */
    vuint32_t _unused_22:1;            /* Reserved */
    vuint32_t BLOCK55:1;               /* IP block status */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t _unused_25:1;            /* Reserved */
    vuint32_t BLOCK58:1;               /* IP block status */
    vuint32_t BLOCK59:1;               /* IP block status */
    vuint32_t _unused_28:1;            /* Reserved */
    vuint32_t _unused_29:1;            /* Reserved */
    vuint32_t BLOCK62:1;               /* IP block status */
    vuint32_t BLOCK63:1;               /* IP block status */
  } B;
} MC_ME_PRTN2_COFB1_STAT_tag;

typedef union MC_ME_PRTN2_COFB0_CLKEN_union_tag { /* Partition 2 COFB Set 0 Clock Enable Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t _unused_2:1;             /* Reserved */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t REQ4:1;                  /* Clock enable */
    vuint32_t REQ5:1;                  /* Clock enable */
    vuint32_t REQ6:1;                  /* Clock enable */
    vuint32_t REQ7:1;                  /* Clock enable */
    vuint32_t REQ8:1;                  /* Clock enable */
    vuint32_t REQ9:1;                  /* Clock enable */
    vuint32_t REQ10:1;                 /* Clock enable */
    vuint32_t REQ11:1;                 /* Clock enable */
    vuint32_t REQ12:1;                 /* Clock enable */
    vuint32_t REQ13:1;                 /* Clock enable */
    vuint32_t REQ14:1;                 /* Clock enable */
    vuint32_t REQ15:1;                 /* Clock enable */
    vuint32_t REQ16:1;                 /* Clock enable */
    vuint32_t REQ17:1;                 /* Clock enable */
    vuint32_t REQ18:1;                 /* Clock enable */
    vuint32_t REQ19:1;                 /* Clock enable */
    vuint32_t REQ20:1;                 /* Clock enable */
    vuint32_t REQ21:1;                 /* Clock enable */
    vuint32_t REQ22:1;                 /* Clock enable */
    vuint32_t REQ23:1;                 /* Clock enable */
    vuint32_t REQ24:1;                 /* Clock enable */
    vuint32_t _unused_25:1;            /* Reserved */
    vuint32_t _unused_26:1;            /* Reserved */
    vuint32_t REQ27:1;                 /* Clock enable */
    vuint32_t _unused_28:1;            /* Reserved */
    vuint32_t REQ29:1;                 /* Clock enable */
    vuint32_t _unused_30:1;            /* Reserved */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} MC_ME_PRTN2_COFB0_CLKEN_tag;

typedef union MC_ME_PRTN2_COFB1_CLKEN_union_tag { /* Partition 2 COFB Set 1 Clock Enable Register */
  vuint32_t R;
  struct {
    vuint32_t REQ32:1;                 /* Clock enable */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t _unused_2:1;             /* Reserved */
    vuint32_t REQ35:1;                 /* Clock enable */
    vuint32_t REQ36:1;                 /* Clock enable */
    vuint32_t REQ37:1;                 /* Clock enable */
    vuint32_t REQ38:1;                 /* Clock enable */
    vuint32_t REQ39:1;                 /* Clock enable */
    vuint32_t REQ40:1;                 /* Clock enable */
    vuint32_t REQ41:1;                 /* Clock enable */
    vuint32_t REQ42:1;                 /* Clock enable */
    vuint32_t _unused_11:1;            /* Reserved */
    vuint32_t _unused_12:1;            /* Reserved */
    vuint32_t _unused_13:1;            /* Reserved */
    vuint32_t _unused_14:1;            /* Reserved */
    vuint32_t REQ47:1;                 /* Clock enable */
    vuint32_t REQ48:1;                 /* Clock enable */
    vuint32_t _unused_17:1;            /* Reserved */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t REQ51:1;                 /* Clock enable */
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t _unused_21:1;            /* Reserved */
    vuint32_t _unused_22:1;            /* Reserved */
    vuint32_t REQ55:1;                 /* Clock enable */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t _unused_25:1;            /* Reserved */
    vuint32_t REQ58:1;                 /* Clock enable */
    vuint32_t _unused_27:1;            /* Reserved */
    vuint32_t _unused_28:1;            /* Reserved */
    vuint32_t _unused_29:1;            /* Reserved */
    vuint32_t REQ62:1;                 /* Clock enable */
    vuint32_t REQ63:1;                 /* Clock enable */
  } B;
} MC_ME_PRTN2_COFB1_CLKEN_tag;

struct MC_ME_tag {
  MC_ME_CTL_KEY_tag CTL_KEY;           /* Control Key Register */
  MC_ME_MODE_CONF_tag MODE_CONF;       /* Mode Configuration Register */
  MC_ME_MODE_UPD_tag MODE_UPD;         /* Mode Update Register */
  MC_ME_MODE_STAT_tag MODE_STAT;       /* Mode Status Register */
  MC_ME_MAIN_COREID_tag MAIN_COREID;   /* Main Core ID Register */
  uint8_t MC_ME_reserved0[236];
  MC_ME_PRTN0_PCONF_tag PRTN0_PCONF;   /* Partition 0 Process Configuration Register */
  MC_ME_PRTN0_PUPD_tag PRTN0_PUPD;     /* Partition 0 Process Update Register */
  MC_ME_PRTN0_STAT_tag PRTN0_STAT;     /* Partition 0 Status Register */
  uint8_t MC_ME_reserved1[8];
  MC_ME_PRTN0_COFB1_STAT_tag PRTN0_COFB1_STAT; /* Partition 0 COFB Set 1 Clock Status Register */
  uint8_t MC_ME_reserved2[28];
  MC_ME_PRTN0_COFB1_CLKEN_tag PRTN0_COFB1_CLKEN; /* Partition 0 COFB Set 1 Clock Enable Register */
  uint8_t MC_ME_reserved3[8];
  MC_ME_PRTN0_CORE0_PCONF_tag PRTN0_CORE0_PCONF; /* Partition 0 Core 0 Process Configuration Register */
  MC_ME_PRTN0_CORE0_PUPD_tag PRTN0_CORE0_PUPD; /* Partition 0 Core 0 Process Update Register */
  MC_ME_PRTN0_CORE0_STAT_tag PRTN0_CORE0_STAT; /* Partition 0 Core 0 Status Register */
  MC_ME_PRTN0_CORE0_ADDR_tag PRTN0_CORE0_ADDR; /* Partition 0 Core 0 Address Register */
  uint8_t MC_ME_reserved4[16];
  MC_ME_PRTN0_CORE1_PCONF_tag PRTN0_CORE1_PCONF; /* Partition 0 Core 1 Process Configuration Register */
  MC_ME_PRTN0_CORE1_PUPD_tag PRTN0_CORE1_PUPD; /* Partition 0 Core 1 Process Update Register */
  MC_ME_PRTN0_CORE1_STAT_tag PRTN0_CORE1_STAT; /* Partition 0 Core 1 Status Register */
  MC_ME_PRTN0_CORE1_ADDR_tag PRTN0_CORE1_ADDR; /* Partition 0 Core 1 Address Register */
  uint8_t MC_ME_reserved5[24];
  MC_ME_PRTN0_CORE2_STAT_tag PRTN0_CORE2_STAT; /* Partition 0 Core 2 Status Register */
  MC_ME_PRTN0_CORE2_ADDR_tag PRTN0_CORE2_ADDR; /* Partition 0 Core 2 Address Register */
  uint8_t MC_ME_reserved6[368];
  MC_ME_PRTN1_PCONF_tag PRTN1_PCONF;   /* Partition 1 Process Configuration Register */
  MC_ME_PRTN1_PUPD_tag PRTN1_PUPD;     /* Partition 1 Process Update Register */
  MC_ME_PRTN1_STAT_tag PRTN1_STAT;     /* Partition 1 Status Register */
  uint8_t MC_ME_reserved7[4];
  MC_ME_PRTN1_COFB0_STAT_tag PRTN1_COFB0_STAT; /* Partition 1 COFB Set 0 Clock Status Register */
  MC_ME_PRTN1_COFB1_STAT_tag PRTN1_COFB1_STAT; /* Partition 1 COFB Set 1 Clock Status Register */
  MC_ME_PRTN1_COFB2_STAT_tag PRTN1_COFB2_STAT; /* Partition 1 COFB Set 2 Clock Status Register */
  MC_ME_PRTN1_COFB3_STAT_tag PRTN1_COFB3_STAT; /* Partition 1 COFB Set 3 Clock Status Register */
  uint8_t MC_ME_reserved8[16];
  MC_ME_PRTN1_COFB0_CLKEN_tag PRTN1_COFB0_CLKEN; /* Partition 1 COFB Set 0 Clock Enable Register */
  MC_ME_PRTN1_COFB1_CLKEN_tag PRTN1_COFB1_CLKEN; /* Partition 1 COFB Set 1 Clock Enable Register */
  MC_ME_PRTN1_COFB2_CLKEN_tag PRTN1_COFB2_CLKEN; /* Partition 1 COFB Set 2 Clock Enable Register */
  MC_ME_PRTN1_COFB3_CLKEN_tag PRTN1_COFB3_CLKEN; /* Partition 1 COFB Set 3 Clock Enable Register */
  uint8_t MC_ME_reserved9[448];
  MC_ME_PRTN2_PCONF_tag PRTN2_PCONF;   /* Partition 2 Process Configuration Register */
  MC_ME_PRTN2_PUPD_tag PRTN2_PUPD;     /* Partition 2 Process Update Register */
  MC_ME_PRTN2_STAT_tag PRTN2_STAT;     /* Partition 2 Status Register */
  uint8_t MC_ME_reserved10[4];
  MC_ME_PRTN2_COFB0_STAT_tag PRTN2_COFB0_STAT; /* Partition 2 COFB Set 0 Clock Status Register */
  MC_ME_PRTN2_COFB1_STAT_tag PRTN2_COFB1_STAT; /* Partition 2 COFB Set 1 Clock Status Register */
  uint8_t MC_ME_reserved11[24];
  MC_ME_PRTN2_COFB0_CLKEN_tag PRTN2_COFB0_CLKEN; /* Partition 2 COFB Set 0 Clock Enable Register */
  MC_ME_PRTN2_COFB1_CLKEN_tag PRTN2_COFB1_CLKEN; /* Partition 2 COFB Set 1 Clock Enable Register */
};


/* ============================================================================
   =============================== Module: MC_RGM =============================
   ============================================================================ */

typedef union MC_RGM_DES_union_tag {   /* Destructive Event Status Register */
  vuint32_t R;
  struct {
    vuint32_t F_POR:1;                 /* Flag for power-on reset */
    vuint32_t _unused_1:1;
    vuint32_t _unused_2:1;
    vuint32_t FCCU_FTR:1;              /* Flag for 'Destructive' Reset FCCU_FTR */
    vuint32_t STCU_URF:1;              /* Flag for 'Destructive' Reset STCU_URF */
    vuint32_t _unused_5:1;
    vuint32_t MC_RGM_FRE:1;            /* Flag for 'Destructive' Reset MC_RGM_FRE */
    vuint32_t _unused_7:1;
    vuint32_t FXOSC_FAIL:1;            /* Flag for 'Destructive' Reset FXOSC_FAIL */
    vuint32_t PLL_LOL:1;               /* Flag for 'Destructive' Reset PLL_LOL */
    vuint32_t CORE_CLK_FAIL:1;         /* Flag for 'Destructive' Reset CORE_CLK_FAIL */
    vuint32_t _unused_11:1;
    vuint32_t AIPS_PLAT_CLK_FAIL:1;    /* Flag for 'Destructive' Reset AIPS_PLAT_CLK_FAIL */
    vuint32_t _unused_13:1;
    vuint32_t HSE_CLK_FAIL:1;          /* Flag for 'Destructive' Reset HSE_CLK_FAIL */
    vuint32_t SYS_DIV_FAIL:1;          /* Flag for 'Destructive' Reset SYS_DIV_FAIL */
    vuint32_t _unused_16:1;
    vuint32_t HSE_TMPR_RST:1;          /* Flag for 'Destructive' Reset HSE_TMPR_RST */
    vuint32_t HSE_SNVS_RST:1;          /* Flag for 'Destructive' Reset HSE_SNVS_RST */
    vuint32_t _unused_19:1;
    vuint32_t _unused_20:1;
    vuint32_t _unused_21:1;
    vuint32_t _unused_22:1;
    vuint32_t _unused_23:1;
    vuint32_t _unused_24:1;
    vuint32_t _unused_25:1;
    vuint32_t _unused_26:1;
    vuint32_t _unused_27:1;
    vuint32_t _unused_28:1;
    vuint32_t SW_DEST:1;               /* Flag for 'Destructive' Reset SW_DEST */
    vuint32_t DEBUG_DEST:1;            /* Flag for 'Destructive' Reset DEBUG_DEST */
    vuint32_t _unused_31:1;
  } B;
} MC_RGM_DES_tag;

typedef union MC_RGM_FES_union_tag {   /* Functional /External Reset Status Register */
  vuint32_t R;
  struct {
    vuint32_t F_EXR:1;                 /* Flag for External Reset */
    vuint32_t _unused_1:1;
    vuint32_t _unused_2:1;
    vuint32_t FCCU_RST:1;              /* Flag for 'Functional' Reset FCCU_RST */
    vuint32_t ST_DONE:1;               /* Flag for 'Functional' Reset ST_DONE */
    vuint32_t _unused_5:1;
    vuint32_t SWT0_RST:1;              /* Flag for 'Functional' Reset SWT0_RST */
    vuint32_t SWT1_RST:1;              /* Flag for 'Functional' Reset SWT1_RST */
    vuint32_t _unused_8:1;
    vuint32_t JTAG_RST:1;              /* Flag for 'Functional' Reset JTAG_RST */
    vuint32_t _unused_10:1;
    vuint32_t _unused_11:1;
    vuint32_t _unused_12:1;
    vuint32_t _unused_13:1;
    vuint32_t _unused_14:1;
    vuint32_t _unused_15:1;
    vuint32_t HSE_SWT_RST:1;           /* Flag for 'Functional' Reset HSE_SWT_RST */
    vuint32_t _unused_17:1;
    vuint32_t _unused_18:1;
    vuint32_t _unused_19:1;
    vuint32_t HSE_BOOT_RST:1;          /* Flag for 'Functional' Reset HSE_BOOT_RST */
    vuint32_t _unused_21:1;
    vuint32_t _unused_22:1;
    vuint32_t _unused_23:1;
    vuint32_t _unused_24:1;
    vuint32_t _unused_25:1;
    vuint32_t _unused_26:1;
    vuint32_t _unused_27:1;
    vuint32_t _unused_28:1;
    vuint32_t SW_FUNC:1;               /* Flag for 'Functional' Reset SW_FUNC */
    vuint32_t DEBUG_FUNC:1;            /* Flag for 'Functional' Reset DEBUG_FUNC */
    vuint32_t _unused_31:1;
  } B;
} MC_RGM_FES_tag;

typedef union MC_RGM_FERD_union_tag {  /* Functional Event Reset Disable Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;
    vuint32_t _unused_1:1;
    vuint32_t _unused_2:1;
    vuint32_t D_FCCU_RST:1;            /* FCCU_RST Disable Control */
    vuint32_t _unused_4:1;
    vuint32_t _unused_5:1;
    vuint32_t D_SWT0_RST:1;            /* SWT0_RST Disable Control */
    vuint32_t D_SWT1_RST:1;            /* SWT1_RST Disable Control */
    vuint32_t _unused_8:1;
    vuint32_t D_JTAG_RST:1;            /* JTAG_RST Disable Control */
    vuint32_t _unused_10:1;
    vuint32_t _unused_11:1;
    vuint32_t _unused_12:1;
    vuint32_t _unused_13:1;
    vuint32_t _unused_14:1;
    vuint32_t _unused_15:1;
    vuint32_t _unused_16:1;
    vuint32_t _unused_17:1;
    vuint32_t _unused_18:1;
    vuint32_t _unused_19:1;
    vuint32_t _unused_20:1;
    vuint32_t _unused_21:1;
    vuint32_t _unused_22:1;
    vuint32_t _unused_23:1;
    vuint32_t _unused_24:1;
    vuint32_t _unused_25:1;
    vuint32_t _unused_26:1;
    vuint32_t _unused_27:1;
    vuint32_t _unused_28:1;
    vuint32_t _unused_29:1;
    vuint32_t D_DEBUG_FUNC:1;          /* DEBUG_FUNC Disable Control */
    vuint32_t _unused_31:1;
  } B;
} MC_RGM_FERD_tag;

typedef union MC_RGM_FREC_union_tag {  /* Functional Reset Escalation Counter Register */
  vuint32_t R;
  struct {
    vuint32_t FREC:4;                  /* Functional' Reset Escalation Counter */
    vuint32_t _unused_4:28;
  } B;
} MC_RGM_FREC_tag;

typedef union MC_RGM_FRET_union_tag {  /* Functional Reset Escalation Threshold Register */
  vuint32_t R;
  struct {
    vuint32_t FRET:4;                  /* 'Functional' Reset Escalation Threshold */
    vuint32_t _unused_4:28;
  } B;
} MC_RGM_FRET_tag;

typedef union MC_RGM_DRET_union_tag {  /* Destructive Reset Escalation Threshold Register */
  vuint32_t R;
  struct {
    vuint32_t DRET:4;                  /* 'Destructive' Reset Escalation Threshold */
    vuint32_t _unused_4:28;
  } B;
} MC_RGM_DRET_tag;

typedef union MC_RGM_ERCTRL_union_tag { /* External Reset Control Register */
  vuint32_t R;
  struct {
    vuint32_t ERASSERT:1;              /* ERASSERT */
    vuint32_t _unused_1:31;
  } B;
} MC_RGM_ERCTRL_tag;

typedef union MC_RGM_RDSS_union_tag {  /* Reset During Standby Status Register */
  vuint32_t R;
  struct {
    vuint32_t DES_RES:1;               /* DES_RES */
    vuint32_t FES_RES:1;               /* FES_RES */
    vuint32_t _unused_2:30;
  } B;
} MC_RGM_RDSS_tag;

typedef union MC_RGM_LPDEBUG_union_tag { /* Low Power Debug Control Register */
  vuint32_t R;
  struct {
    vuint32_t LP_DBG_EN:1;             /* Low-Power Debug Enable/Disable Control */
    vuint32_t _unused_1:31;
  } B;
} MC_RGM_LPDEBUG_tag;

struct MC_RGM_tag {
  MC_RGM_DES_tag DES;                  /* Destructive Event Status Register */
  uint8_t MC_RGM_reserved0[4];
  MC_RGM_FES_tag FES;                  /* Functional /External Reset Status Register */
  MC_RGM_FERD_tag FERD;                /* Functional Event Reset Disable Register */
  uint8_t MC_RGM_reserved1[4];
  MC_RGM_FREC_tag FREC;                /* Functional Reset Escalation Counter Register */
  MC_RGM_FRET_tag FRET;                /* Functional Reset Escalation Threshold Register */
  MC_RGM_DRET_tag DRET;                /* Destructive Reset Escalation Threshold Register */
  MC_RGM_ERCTRL_tag ERCTRL;            /* External Reset Control Register */
  MC_RGM_RDSS_tag RDSS;                /* Reset During Standby Status Register */
  uint8_t MC_RGM_reserved2[4];
  MC_RGM_LPDEBUG_tag LPDEBUG;          /* Low Power Debug Control Register */
};


/* ============================================================================
   =============================== Module: MDM_AP =============================
   ============================================================================ */

typedef union MDM_AP_MDMAPSTTS_union_tag { /* Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t DESTRST:1;               /* Destructive Reset */
    vuint32_t FUNCRST:1;               /* Functional Reset */
    vuint32_t _unused_3:9;             /* Reserved */
    vuint32_t CM70HLT:1;               /* Cortex-M7_0 Halted */
    vuint32_t CM71HLT:1;               /* CM7_1 Debug Halted */
    vuint32_t _unused_14:1;            /* Reserved */
    vuint32_t HSEHLT:1;                /* Cortex-M0+ Halted */
    vuint32_t CM70DPSLP:1;             /* Cortex-M7_0 Deep Sleep */
    vuint32_t CM71DPSLP:1;             /* Cortex-M7_1 Deep Sleep */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t HSEBPDPSLP:1;            /* Cortex-M0+ Deep Sleep */
    vuint32_t CM70SLPNG:1;             /* Cortex-M7_0 Sleeping */
    vuint32_t CM71SLPNG:1;             /* CM7_1 Sleeping */
    vuint32_t _unused_22:1;            /* Reserved */
    vuint32_t HSEBSLPNG:1;             /* Cortex-M0+ Sleeping */
    vuint32_t _unused_24:4;            /* Reserved */
    vuint32_t CM70DBGRSTRD:1;          /* Cortex-M7_0 Debug Restarted */
    vuint32_t CM71DBGRSTRD:1;          /* Cortex-M7_1 Debug Restarted */
    vuint32_t CM0PDBGRST:1;            /* Cortex-M0+ Debug Restart */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} MDM_AP_MDMAPSTTS_tag;

typedef union MDM_AP_MDMAPCTL_union_tag { /* Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:4;             /* Reserved */
    vuint32_t SYSRESETREQ:1;           /* System Destructive Reset */
    vuint32_t SYSFUNCRST:1;            /* System Functional Reset */
    vuint32_t _unused_6:2;             /* Reserved */
    vuint32_t CM70DBGREQ:1;            /* Cortex-M7_0 Debug Request */
    vuint32_t CM71DBGREQ:1;            /* Cortex-M7_1 Debug Request */
    vuint32_t _unused_10:1;            /* Reserved */
    vuint32_t HSEBDBGREQ:1;            /* Cortex-M0+ Debug Request */
    vuint32_t DBGRSTSLOWPAD:1;         /* Debug Over Reset Via Slow Pads */
    vuint32_t DBGRSTFASTPAD:1;         /* Debug Over Reset Via Fast Pads */
    vuint32_t _unused_14:1;            /* Reserved */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t CM7_0_CORE_ACCESS:1;     /* Debugger Access To Application Cortex-M7_0 */
    vuint32_t CM7_1_CORE_ACCESS:1;     /* Debugger Access To Application Cortex-M7_1 */
    vuint32_t _unused_18:2;            /* Reserved */
    vuint32_t TRIUOVRD:1;              /* TPIU Override */
    vuint32_t _unused_21:1;            /* Reserved */
    vuint32_t SWOOVRD:1;               /* SWO Override */
    vuint32_t _unused_23:5;            /* Reserved */
    vuint32_t CM70DBGRSRT:1;           /* Cortex-M7_0 Debug Restart */
    vuint32_t CM71DBGRSRT:1;           /* Cortex-M7_1 Debug Restart */
    vuint32_t CM0PDBGRSRT:1;           /* Cortex-M0+ Debug Restart */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} MDM_AP_MDMAPCTL_tag;

typedef union MDM_AP_MDMAPWIREN_union_tag { /* WIR Enable */
  vuint32_t R;
  struct {
    vuint32_t LWPWREN:1;               /* Low Power Debug Enable */
    vuint32_t LWPRSTPRVT:1;            /* Low-Power Entry */
    vuint32_t _unused_2:30;            /* Reserved */
  } B;
} MDM_AP_MDMAPWIREN_tag;

typedef union MDM_AP_MDMAPWIRSTTS_union_tag { /* WIR Status */
  vuint32_t R;
  struct {
    vuint32_t MDM_DAP_WIR_STATUS:32;   /* MDM_AP WIR Status */
  } B;
} MDM_AP_MDMAPWIRSTTS_tag;

typedef union MDM_AP_MDMAPWIRREL_union_tag { /* WIR Release */
  vuint32_t R;
  struct {
    vuint32_t WTRSTRGM:1;              /* Wait In Reset B */
    vuint32_t PRVNTRSTRGM:1;           /* Prevent Reset */
    vuint32_t _unused_2:30;            /* Reserved */
  } B;
} MDM_AP_MDMAPWIRREL_tag;

typedef union MDM_AP_ID_union_tag {    /* Identity */
  vuint32_t R;
  struct {
    vuint32_t ID:32;                   /* Identity */
  } B;
} MDM_AP_ID_tag;

struct MDM_AP_tag {
  MDM_AP_MDMAPSTTS_tag MDMAPSTTS;      /* Status */
  MDM_AP_MDMAPCTL_tag MDMAPCTL;        /* Control */
  uint8_t MDM_AP_reserved0[40];
  MDM_AP_MDMAPWIREN_tag MDMAPWIREN;    /* WIR Enable */
  MDM_AP_MDMAPWIRSTTS_tag MDMAPWIRSTTS; /* WIR Status */
  MDM_AP_MDMAPWIRREL_tag MDMAPWIRREL;  /* WIR Release */
  uint8_t MDM_AP_reserved1[192];
  MDM_AP_ID_tag ID;                    /* Identity */
};


/* ============================================================================
   =============================== Module: MSCM ===============================
   ============================================================================ */

typedef union MSCM_CPXTYPE_union_tag { /* Processor X Type */
  vuint32_t R;
  struct {
    vuint32_t PERSONALITY:32;          /* Personality of CPx */
  } B;
} MSCM_CPXTYPE_tag;

typedef union MSCM_CPXNUM_union_tag {  /* Processor X Number */
  vuint32_t R;
  struct {
    vuint32_t CPN:2;                   /* Processor Number */
    vuint32_t _unused_2:30;            /* Reserved */
  } B;
} MSCM_CPXNUM_tag;

typedef union MSCM_CPXREV_union_tag {  /* Processor X Revision */
  vuint32_t R;
  struct {
    vuint32_t RYPZ:8;                  /* Processor Revision */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} MSCM_CPXREV_tag;

typedef union MSCM_CPXCFG0_union_tag { /* Processor X Configuration 0 */
  vuint32_t R;
  struct {
    vuint32_t DCWY:8;                  /* L1 Data Cache Ways */
    vuint32_t DCSZ:8;                  /* L1 Data Cache Size */
    vuint32_t ICWY:8;                  /* L1 Instruction Cache Ways */
    vuint32_t ICSZ:8;                  /* Level 1 Instruction Cache Size */
  } B;
} MSCM_CPXCFG0_tag;

typedef union MSCM_CPXCFG1_union_tag { /* Processor X Configuration 1 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t L2WY:8;                  /* L2 Cache Ways */
    vuint32_t L2SZ:8;                  /* L2 Cache Size */
  } B;
} MSCM_CPXCFG1_tag;

typedef union MSCM_CPXCFG2_union_tag { /* Processor X Configuration 2 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t ITCMSZ:8;                /* Instruction Tightly Coupled Memory Size */
    vuint32_t DTCMSZ:8;                /* Tightly Coupled Data Memory Size */
  } B;
} MSCM_CPXCFG2_tag;

typedef union MSCM_CPXCFG3_union_tag { /* Processor x Configuration 3 */
  vuint32_t R;
  struct {
    vuint32_t FPU:1;                   /* Floating Point Unit */
    vuint32_t SIMD:1;                  /* SIMD/NEON Instruction Support */
    vuint32_t MMU:1;                   /* Memory Management Unit */
    vuint32_t CMP:1;                   /* Core Memory Protection Unit */
    vuint32_t CPY:1;                   /* Cryptography */
    vuint32_t _unused_5:27;            /* Reserved */
  } B;
} MSCM_CPXCFG3_tag;

typedef union MSCM_CP0TYPE_union_tag { /* Processor 0 Type */
  vuint32_t R;
  struct {
    vuint32_t PERSONALITY:32;          /* Processor Personality */
  } B;
} MSCM_CP0TYPE_tag;

typedef union MSCM_CP0NUM_union_tag {  /* Processor 0 Number */
  vuint32_t R;
  struct {
    vuint32_t CPN:2;                   /* Processor Number */
    vuint32_t _unused_2:30;            /* Reserved */
  } B;
} MSCM_CP0NUM_tag;

typedef union MSCM_CP0REV_union_tag {  /* Processor 0 Count */
  vuint32_t R;
  struct {
    vuint32_t RYPZ:8;                  /* Processor Revision */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} MSCM_CP0REV_tag;

typedef union MSCM_CP0CFG0_union_tag { /* Processor 0 Configuration 0 */
  vuint32_t R;
  struct {
    vuint32_t DCWY:8;                  /* L1 Data Cache Ways */
    vuint32_t DCSZ:8;                  /* L1 Data Cache Size */
    vuint32_t ICWY:8;                  /* L1 Instruction Cache Ways */
    vuint32_t ICSZ:8;                  /* Level 1 Instruction Cache Size */
  } B;
} MSCM_CP0CFG0_tag;

typedef union MSCM_CP0CFG1_union_tag { /* Processor 0 Configuration 1 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t L2WY:8;                  /* L2 Cache Ways */
    vuint32_t L2SZ:8;                  /* L2 Cache Size */
  } B;
} MSCM_CP0CFG1_tag;

typedef union MSCM_CP0CFG2_union_tag { /* Processor 0 Configuration 2 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t ITCMSZ:8;                /* Instruction Tightly Coupled Memory Size */
    vuint32_t DTCMSZ:8;                /* Tightly Coupled Data Memory Size */
  } B;
} MSCM_CP0CFG2_tag;

typedef union MSCM_CP0CFG3_union_tag { /* Processor 0 Configuration 3 */
  vuint32_t R;
  struct {
    vuint32_t FPU:1;                   /* Floating Point Unit */
    vuint32_t SIMD:1;                  /* SIMD/NEON Instruction Support */
    vuint32_t MMU:1;                   /* Memory Management Unit */
    vuint32_t CMP:1;                   /* Core Memory Protection Unit */
    vuint32_t CPY:1;                   /* Cryptography */
    vuint32_t _unused_5:27;            /* Reserved */
  } B;
} MSCM_CP0CFG3_tag;

typedef union MSCM_CP1TYPE_union_tag { /* Processor 1 Type */
  vuint32_t R;
  struct {
    vuint32_t PERSONALITY:32;          /* Personality Processor */
  } B;
} MSCM_CP1TYPE_tag;

typedef union MSCM_CP1NUM_union_tag {  /* Processor 1 Number */
  vuint32_t R;
  struct {
    vuint32_t CPN:2;                   /* Processor Number */
    vuint32_t _unused_2:30;            /* Reserved */
  } B;
} MSCM_CP1NUM_tag;

typedef union MSCM_CP1REV_union_tag {  /* Processor 1 Count */
  vuint32_t R;
  struct {
    vuint32_t RYPZ:8;                  /* Processor Revision */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} MSCM_CP1REV_tag;

typedef union MSCM_CP1CFG0_union_tag { /* Processor 1 Configuration 0 */
  vuint32_t R;
  struct {
    vuint32_t DCWY:8;                  /* L1 Data Cache Ways */
    vuint32_t DCSZ:8;                  /* L1 Data Cache Size */
    vuint32_t ICWY:8;                  /* Level 1 Instruction Cache Ways */
    vuint32_t ICSZ:8;                  /* Level 1 Instruction Cache Size */
  } B;
} MSCM_CP1CFG0_tag;

typedef union MSCM_CP1CFG1_union_tag { /* Processor 1 Configuration 1 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t L2WY:8;                  /* L2 Cache Ways */
    vuint32_t L2SZ:8;                  /* L2 Cache Size */
  } B;
} MSCM_CP1CFG1_tag;

typedef union MSCM_CP1CFG2_union_tag { /* Processor 1 Configuration 2 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t ITCMSZ:8;                /* Instruction Tightly Coupled Memory Size */
    vuint32_t DTCMSZ:8;                /* Tightly Coupled Data Memory Size */
  } B;
} MSCM_CP1CFG2_tag;

typedef union MSCM_CP1CFG3_union_tag { /* Processor 1 Configuration 3 */
  vuint32_t R;
  struct {
    vuint32_t FPU:1;                   /* Floating Point Unit */
    vuint32_t SIMD:1;                  /* SIMD/NEON Instruction Support */
    vuint32_t MMU:1;                   /* Memory Management Unit */
    vuint32_t CMP:1;                   /* Core Memory Protection Unit */
    vuint32_t CPY:1;                   /* Cryptography */
    vuint32_t _unused_5:27;            /* Reserved */
  } B;
} MSCM_CP1CFG3_tag;

typedef union MSCM_IRCP0ISR0_union_tag { /* Interrupt Router CP0 Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t CP0_INT:1;               /* CP0-to-CPn Interrupt */
    vuint32_t CP1_INT:1;               /* CP1-to-CPn Interrupt */
    vuint32_t _unused_2:30;            /* Reserved */
  } B;
} MSCM_IRCP0ISR0_tag;

typedef union MSCM_IRCP0IGR0_union_tag { /* Interrupt Router CP0 Interrupt Generation */
  vuint32_t R;
  struct {
    vuint32_t INT_EN:1;                /* Interrupt Enable */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} MSCM_IRCP0IGR0_tag;

typedef union MSCM_IRCP0ISR1_union_tag { /* Interrupt Router CP0 Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t CP0_INT:1;               /* CP0-to-CPn Interrupt */
    vuint32_t CP1_INT:1;               /* CP1-to-CPn Interrupt */
    vuint32_t _unused_2:30;            /* Reserved */
  } B;
} MSCM_IRCP0ISR1_tag;

typedef union MSCM_IRCP0IGR1_union_tag { /* Interrupt Router CP0 Interrupt Generation */
  vuint32_t R;
  struct {
    vuint32_t INT_EN:1;                /* Interrupt Enable */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} MSCM_IRCP0IGR1_tag;

typedef union MSCM_IRCP0ISR2_union_tag { /* Interrupt Router CP0 Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t CP0_INT:1;               /* CP0-to-CPn Interrupt */
    vuint32_t CP1_INT:1;               /* CP1-to-CPn Interrupt */
    vuint32_t _unused_2:30;            /* Reserved */
  } B;
} MSCM_IRCP0ISR2_tag;

typedef union MSCM_IRCP0IGR2_union_tag { /* Interrupt Router CP0 Interrupt Generation */
  vuint32_t R;
  struct {
    vuint32_t INT_EN:1;                /* Interrupt Enable */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} MSCM_IRCP0IGR2_tag;

typedef union MSCM_IRCP0ISR3_union_tag { /* Interrupt Router CP0 Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t CP0_INT:1;               /* CP0-to-CPn Interrupt */
    vuint32_t CP1_INT:1;               /* CP1-to-CPn Interrupt */
    vuint32_t _unused_2:30;            /* Reserved */
  } B;
} MSCM_IRCP0ISR3_tag;

typedef union MSCM_IRCP0IGR3_union_tag { /* Interrupt Router CP0 Interrupt Generation */
  vuint32_t R;
  struct {
    vuint32_t INT_EN:1;                /* Interrupt Enable */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} MSCM_IRCP0IGR3_tag;

typedef union MSCM_IRCP1ISR0_union_tag { /* Interrupt Router CP1 Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t CP0_INT:1;               /* CP0-to-CPn Interrupt */
    vuint32_t CP1_INT:1;               /* CP1-to-CPn Interrupt */
    vuint32_t _unused_2:30;            /* Reserved */
  } B;
} MSCM_IRCP1ISR0_tag;

typedef union MSCM_IRCP1IGR0_union_tag { /* Interrupt Router CP1 Interrupt Generation */
  vuint32_t R;
  struct {
    vuint32_t INT_EN:1;                /* Interrupt Enable */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} MSCM_IRCP1IGR0_tag;

typedef union MSCM_IRCP1ISR1_union_tag { /* Interrupt Router CP1 Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t CP0_INT:1;               /* CP0-to-CPn Interrupt */
    vuint32_t CP1_INT:1;               /* CP1-to-CPn Interrupt */
    vuint32_t _unused_2:30;            /* Reserved */
  } B;
} MSCM_IRCP1ISR1_tag;

typedef union MSCM_IRCP1IGR1_union_tag { /* Interrupt Router CP1 Interrupt Generation */
  vuint32_t R;
  struct {
    vuint32_t INT_EN:1;                /* Interrupt Enable */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} MSCM_IRCP1IGR1_tag;

typedef union MSCM_IRCP1ISR2_union_tag { /* Interrupt Router CP1 Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t CP0_INT:1;               /* CP0-to-CPn Interrupt */
    vuint32_t CP1_INT:1;               /* CP1-to-CPn Interrupt */
    vuint32_t _unused_2:30;            /* Reserved */
  } B;
} MSCM_IRCP1ISR2_tag;

typedef union MSCM_IRCP1IGR2_union_tag { /* Interrupt Router CP1 Interrupt Generation */
  vuint32_t R;
  struct {
    vuint32_t INT_EN:1;                /* Interrupt Enable */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} MSCM_IRCP1IGR2_tag;

typedef union MSCM_IRCP1ISR3_union_tag { /* Interrupt Router CP1 Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t CP0_INT:1;               /* CP0-to-CPn Interrupt */
    vuint32_t CP1_INT:1;               /* CP1-to-CPn Interrupt */
    vuint32_t _unused_2:30;            /* Reserved */
  } B;
} MSCM_IRCP1ISR3_tag;

typedef union MSCM_IRCP1IGR3_union_tag { /* Interrupt Router CP1 Interrupt Generation */
  vuint32_t R;
  struct {
    vuint32_t INT_EN:1;                /* Interrupt Enable */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} MSCM_IRCP1IGR3_tag;

typedef union MSCM_IRCPCFG_union_tag { /* Interrupt Router Configuration */
  vuint32_t R;
  struct {
    vuint32_t CP0_TR:1;                /* CP0 as Trusted Core */
    vuint32_t CP1_TR:1;                /* CP1 as Trusted Core */
    vuint32_t _unused_2:29;            /* Reserved */
    vuint32_t LOCK:1;                  /* Lock */
  } B;
} MSCM_IRCPCFG_tag;

typedef union MSCM_ENEDC_union_tag {   /* Enable Interconnect Error Detection */
  vuint32_t R;
  struct {
    vuint32_t CM7_0_AHBM:1;            /* Enable Read Data Check Cortex-M7_0_AHBM */
    vuint32_t CM7_0_AHBP:1;            /* Enable Read Data Check Cortex-M7_0_AHBP */
    vuint32_t EDMAf:1;                 /* Enable Read Data Check eDMA */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t HSE:1;                   /* Enable Read Data Check HSE */
    vuint32_t ENET:1;                  /* Enable Read Data Check ENET */
    vuint32_t CM7_1_AHBM:1;            /* Enable Read Data Check Cortex-M7_1_AHBM */
    vuint32_t CM7_1_AHBP:1;            /* Enable Read Data Check Cortex-M7_1_AHBP */
    vuint32_t TCM:1;                   /* Enable Read Data Check TCM */
    vuint32_t P_FLASH_PORT0:1;         /* Enable Address Check P_FLASH_PORT0 */
    vuint32_t P_FLASH_PORT1:1;         /* Enable Address Check P_FLASH_PORT1 */
    vuint32_t P_FLASH_PORT2:1;         /* Enable Address Check P_FLASH_PORT2 */
    vuint32_t EN_PRAM0:1;              /* Enable Write Data Check PRAM0 */
    vuint32_t PRAM0:1;                 /* Enable Address Check PRAM0 */
    vuint32_t EN_PRAM1:1;              /* Enable Write Data Check PRAM1 */
    vuint32_t EN_ADD_PRAM1:1;          /* Enable Address Check PRAM1 */
    vuint32_t EN_TCM:1;                /* Enable Write Data Check TCM */
    vuint32_t ADD_TCM:1;               /* Enable Address Check TCM */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t EN_ADD_QSPI:1;           /* Enable Address Check QuadSPI */
    vuint32_t EN_AIPS0:1;              /* Enable Write Data Check AIPS0 */
    vuint32_t EN_ADD_AIPS0:1;          /* Enable Address Check AIPS0 */
    vuint32_t EN_AIPS1:1;              /* Enable Write Data Check AIPS1 */
    vuint32_t EN_ADD_AIPS1:1;          /* Enable Address Check AIPS1 */
    vuint32_t AIPS2:1;                 /* Enable Write Data Check AIPS2 */
    vuint32_t ADD_AIPS2:1;             /* Enable Address Check AIPS2 */
    vuint32_t CM7_0_TCM:1;             /* Enable Write Data Check Cortex-M7_0_TCM */
    vuint32_t ADD_CM7_0_TCM:1;         /* Enable Address Check Cortex-M7_0_TCM */
    vuint32_t CM7_1_TCM:1;             /* Enable Write Data Check Cortex-M7_1_TCM */
    vuint32_t ADD_CM7_1_TCM:1;         /* Enable Address Check Cortex-M7_1_TCM */
    vuint32_t _unused_30:2;            /* Reserved */
  } B;
} MSCM_ENEDC_tag;

typedef union MSCM_IAHBCFGREG_union_tag { /* AHB Gasket Configuration */
  vuint32_t R;
  struct {
    vuint32_t ENET_DIS_WR_OPT:1;
    vuint32_t _unused_1:3;             /* Reserved */
    vuint32_t DMA_AXBS_S0_DIS_WR_OPT:1;
    vuint32_t _unused_5:3;             /* Reserved */
    vuint32_t DMA_AXBS_S1_DIS_WR_OPT:1;
    vuint32_t _unused_9:3;             /* Reserved */
    vuint32_t HSE_DIS_WR_OPT:1;
    vuint32_t _unused_13:3;            /* Reserved */
    vuint32_t TCM_DIS_WR_OPT:1;
    vuint32_t _unused_17:3;            /* Reserved */
    vuint32_t QSPI_DIS_WR_OPT:1;
    vuint32_t _unused_21:3;            /* Reserved */
    vuint32_t AIPS1_DIS_WR_OPT:1;
    vuint32_t _unused_25:3;            /* Reserved */
    vuint32_t AIPS2_DIS_WR_OPT:1;
    vuint32_t _unused_29:3;            /* Reserved */
  } B;
} MSCM_IAHBCFGREG_tag;

typedef union MSCM_IRSPRC_union_tag {  /* Interrupt Router Shared Peripheral Routing Control */
  vuint16_t R;
  struct {
    vuint16_t M7_0:1;                  /* Enable Cortex-M7_0 Interrupt Steering */
    vuint16_t M7_1:1;                  /* Enable Cortex-M7_1 Interrupt Steering */
    vuint16_t _unused_2:13;            /* Reserved */
    vuint16_t LOCK:1;                  /* Lock */
  } B;
} MSCM_IRSPRC_tag;

struct MSCM_tag {
  MSCM_CPXTYPE_tag CPXTYPE;            /* Processor X Type */
  MSCM_CPXNUM_tag CPXNUM;              /* Processor X Number */
  MSCM_CPXREV_tag CPXREV;              /* Processor X Revision */
  MSCM_CPXCFG0_tag CPXCFG0;            /* Processor X Configuration 0 */
  MSCM_CPXCFG1_tag CPXCFG1;            /* Processor X Configuration 1 */
  MSCM_CPXCFG2_tag CPXCFG2;            /* Processor X Configuration 2 */
  MSCM_CPXCFG3_tag CPXCFG3;            /* Processor x Configuration 3 */
  uint8_t MSCM_reserved0[4];
  MSCM_CP0TYPE_tag CP0TYPE;            /* Processor 0 Type */
  MSCM_CP0NUM_tag CP0NUM;              /* Processor 0 Number */
  MSCM_CP0REV_tag CP0REV;              /* Processor 0 Count */
  MSCM_CP0CFG0_tag CP0CFG0;            /* Processor 0 Configuration 0 */
  MSCM_CP0CFG1_tag CP0CFG1;            /* Processor 0 Configuration 1 */
  MSCM_CP0CFG2_tag CP0CFG2;            /* Processor 0 Configuration 2 */
  MSCM_CP0CFG3_tag CP0CFG3;            /* Processor 0 Configuration 3 */
  uint8_t MSCM_reserved1[4];
  MSCM_CP1TYPE_tag CP1TYPE;            /* Processor 1 Type */
  MSCM_CP1NUM_tag CP1NUM;              /* Processor 1 Number */
  MSCM_CP1REV_tag CP1REV;              /* Processor 1 Count */
  MSCM_CP1CFG0_tag CP1CFG0;            /* Processor 1 Configuration 0 */
  MSCM_CP1CFG1_tag CP1CFG1;            /* Processor 1 Configuration 1 */
  MSCM_CP1CFG2_tag CP1CFG2;            /* Processor 1 Configuration 2 */
  MSCM_CP1CFG3_tag CP1CFG3;            /* Processor 1 Configuration 3 */
  uint8_t MSCM_reserved2[420];
  MSCM_IRCP0ISR0_tag IRCP0ISR0;        /* Interrupt Router CP0 Interrupt Status */
  MSCM_IRCP0IGR0_tag IRCP0IGR0;        /* Interrupt Router CP0 Interrupt Generation */
  MSCM_IRCP0ISR1_tag IRCP0ISR1;        /* Interrupt Router CP0 Interrupt Status */
  MSCM_IRCP0IGR1_tag IRCP0IGR1;        /* Interrupt Router CP0 Interrupt Generation */
  MSCM_IRCP0ISR2_tag IRCP0ISR2;        /* Interrupt Router CP0 Interrupt Status */
  MSCM_IRCP0IGR2_tag IRCP0IGR2;        /* Interrupt Router CP0 Interrupt Generation */
  MSCM_IRCP0ISR3_tag IRCP0ISR3;        /* Interrupt Router CP0 Interrupt Status */
  MSCM_IRCP0IGR3_tag IRCP0IGR3;        /* Interrupt Router CP0 Interrupt Generation */
  MSCM_IRCP1ISR0_tag IRCP1ISR0;        /* Interrupt Router CP1 Interrupt Status */
  MSCM_IRCP1IGR0_tag IRCP1IGR0;        /* Interrupt Router CP1 Interrupt Generation */
  MSCM_IRCP1ISR1_tag IRCP1ISR1;        /* Interrupt Router CP1 Interrupt Status */
  MSCM_IRCP1IGR1_tag IRCP1IGR1;        /* Interrupt Router CP1 Interrupt Generation */
  MSCM_IRCP1ISR2_tag IRCP1ISR2;        /* Interrupt Router CP1 Interrupt Status */
  MSCM_IRCP1IGR2_tag IRCP1IGR2;        /* Interrupt Router CP1 Interrupt Generation */
  MSCM_IRCP1ISR3_tag IRCP1ISR3;        /* Interrupt Router CP1 Interrupt Status */
  MSCM_IRCP1IGR3_tag IRCP1IGR3;        /* Interrupt Router CP1 Interrupt Generation */
  uint8_t MSCM_reserved3[448];
  MSCM_IRCPCFG_tag IRCPCFG;            /* Interrupt Router Configuration */
  uint8_t MSCM_reserved4[508];
  MSCM_ENEDC_tag ENEDC;                /* Enable Interconnect Error Detection */
  uint8_t MSCM_reserved5[252];
  MSCM_IAHBCFGREG_tag IAHBCFGREG;      /* AHB Gasket Configuration */
  uint8_t MSCM_reserved6[382];
  MSCM_IRSPRC_tag IRSPRC[240];         /* Interrupt Router Shared Peripheral Routing Control */
};


/* ============================================================================
   =============================== Module: MU =================================
   ============================================================================ */

typedef union MU_VER_union_tag {       /* Version ID Register */
  vuint32_t R;
  struct {
    vuint32_t FEATURE:16;              /* Feature Set Number */
    vuint32_t MINOR:8;                 /* Minor Version Number */
    vuint32_t MAJOR:8;                 /* Major Version Number */
  } B;
} MU_VER_tag;

typedef union MU_PAR_union_tag {       /* Parameter Register */
  vuint32_t R;
  struct {
    vuint32_t TR_NUM:8;                /* Transmit Register Number */
    vuint32_t RR_NUM:8;                /* RR Number */
    vuint32_t GIR_NUM:8;               /* General Interrupt Request Number */
    vuint32_t FLAG_WIDTH:8;            /* Flag Width */
  } B;
} MU_PAR_tag;

typedef union MU_CR_union_tag {        /* Control Register */
  vuint32_t R;
  struct {
    vuint32_t MUR:1;                   /* MU Reset */
    vuint32_t MURIE:1;                 /* MUA Reset Interrupt Enable */
    vuint32_t _unused_2:30;            /* Reserved */
  } B;
} MU_CR_tag;

typedef union MU_SR_union_tag {        /* Status Register */
  vuint32_t R;
  struct {
    vuint32_t MURS:1;                  /* MUA and MUB Reset State */
    vuint32_t MURIP:1;                 /* MU Reset Interrupt Pending */
    vuint32_t EP:1;                    /* MUA Side Event Pending */
    vuint32_t FUP:1;                   /* MUA Flags Update Pending */
    vuint32_t GIRP:1;                  /* MUA General Interrupt Pending */
    vuint32_t TEP:1;                   /* MUA Transmit Empty Pending */
    vuint32_t RFP:1;                   /* MUA Receive Full Pending Flag */
    vuint32_t _unused_7:25;            /* Reserved */
  } B;
} MU_SR_tag;

typedef union MU_CCR0_union_tag {      /* Core Control Register 0 */
  vuint32_t R;
  struct {
    vuint32_t NMI:1;                   /* MUA Non-maskable Interrupt Request */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t _unused_2:1;             /* Reserved */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t _unused_5:2;             /* Reserved */
    vuint32_t _unused_7:25;            /* Reserved */
  } B;
} MU_CCR0_tag;

typedef union MU_CSSR0_union_tag {     /* Core Sticky Status Register 0 */
  vuint32_t R;
  struct {
    vuint32_t NMIC:1;                  /* Processor B Non-Maskable-Interrupt Clear */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t _unused_2:1;             /* Reserved */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t _unused_6:1;             /* Reserved */
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} MU_CSSR0_tag;

typedef union MU_FCR_union_tag {       /* Flag Control Register */
  vuint32_t R;
  struct {
    vuint32_t F0:1;                    /* MUA to MUB Flag n */
    vuint32_t F1:1;                    /* MUA to MUB Flag n */
    vuint32_t F2:1;                    /* MUA to MUB Flag n */
    vuint32_t F3:1;                    /* MUB to MUA Flag n */
    vuint32_t F4:1;                    /* MUB to MUA Flag n */
    vuint32_t F5:1;                    /* MUB to MUA Flag n */
    vuint32_t F6:1;                    /* MUB to MUA Flag n */
    vuint32_t F7:1;                    /* MUB to MUA Flag n */
    vuint32_t F8:1;                    /* MUB to MUA Flag n */
    vuint32_t F9:1;                    /* MUB to MUA Flag n */
    vuint32_t F10:1;                   /* MUB to MUA Flag n */
    vuint32_t F11:1;                   /* MUB to MUA Flag n */
    vuint32_t F12:1;                   /* MUB to MUA Flag n */
    vuint32_t F13:1;                   /* MUB to MUA Flag n */
    vuint32_t F14:1;                   /* MUB to MUA Flag n */
    vuint32_t F15:1;                   /* MUB to MUA Flag n */
    vuint32_t F16:1;                   /* MUB to MUA Flag n */
    vuint32_t F17:1;                   /* MUB to MUA Flag n */
    vuint32_t F18:1;                   /* MUB to MUA Flag n */
    vuint32_t F19:1;                   /* MUB to MUA Flag n */
    vuint32_t F20:1;                   /* MUB to MUA Flag n */
    vuint32_t F21:1;                   /* MUB to MUA Flag n */
    vuint32_t F22:1;                   /* MUB to MUA Flag n */
    vuint32_t F23:1;                   /* MUB to MUA Flag n */
    vuint32_t F24:1;                   /* MUB to MUA Flag n */
    vuint32_t F25:1;                   /* MUB to MUA Flag n */
    vuint32_t F26:1;                   /* MUB to MUA Flag n */
    vuint32_t F27:1;                   /* MUB to MUA Flag n */
    vuint32_t F28:1;                   /* MUB to MUA Flag n */
    vuint32_t F29:1;                   /* MUB to MUA Flag n */
    vuint32_t F30:1;                   /* MUB to MUA Flag n */
    vuint32_t F31:1;                   /* MUB to MUA Flag n */
  } B;
} MU_FCR_tag;

typedef union MU_FSR_union_tag {       /* Flag Status Register */
  vuint32_t R;
  struct {
    vuint32_t F0:1;                    /* MUB to MUA Side Flag n */
    vuint32_t F1:1;                    /* MUB to MUA Side Flag n */
    vuint32_t F2:1;                    /* MUB to MUA Side Flag n */
    vuint32_t F3:1;                    /* MUA to MUB Side Flag n */
    vuint32_t F4:1;                    /* MUA to MUB Side Flag n */
    vuint32_t F5:1;                    /* MUA to MUB Side Flag n */
    vuint32_t F6:1;                    /* MUA to MUB Side Flag n */
    vuint32_t F7:1;                    /* MUA to MUB Side Flag n */
    vuint32_t F8:1;                    /* MUA to MUB Side Flag n */
    vuint32_t F9:1;                    /* MUA to MUB Side Flag n */
    vuint32_t F10:1;                   /* MUA to MUB Side Flag n */
    vuint32_t F11:1;                   /* MUA to MUB Side Flag n */
    vuint32_t F12:1;                   /* MUA to MUB Side Flag n */
    vuint32_t F13:1;                   /* MUA to MUB Side Flag n */
    vuint32_t F14:1;                   /* MUA to MUB Side Flag n */
    vuint32_t F15:1;                   /* MUA to MUB Side Flag n */
    vuint32_t F16:1;                   /* MUA to MUB Side Flag n */
    vuint32_t F17:1;                   /* MUA to MUB Side Flag n */
    vuint32_t F18:1;                   /* MUA to MUB Side Flag n */
    vuint32_t F19:1;                   /* MUA to MUB Side Flag n */
    vuint32_t F20:1;                   /* MUA to MUB Side Flag n */
    vuint32_t F21:1;                   /* MUA to MUB Side Flag n */
    vuint32_t F22:1;                   /* MUA to MUB Side Flag n */
    vuint32_t F23:1;                   /* MUA to MUB Side Flag n */
    vuint32_t F24:1;                   /* MUA to MUB Side Flag n */
    vuint32_t F25:1;                   /* MUA to MUB Side Flag n */
    vuint32_t F26:1;                   /* MUA to MUB Side Flag n */
    vuint32_t F27:1;                   /* MUA to MUB Side Flag n */
    vuint32_t F28:1;                   /* MUA to MUB Side Flag n */
    vuint32_t F29:1;                   /* MUA to MUB Side Flag n */
    vuint32_t F30:1;                   /* MUA to MUB Side Flag n */
    vuint32_t F31:1;                   /* MUA to MUB Side Flag n */
  } B;
} MU_FSR_tag;

typedef union MU_GIER_union_tag {      /* General Interrupt Enable Register */
  vuint32_t R;
  struct {
    vuint32_t GIE0:1;                  /* MUA General Purpose Interrupt Enable n */
    vuint32_t GIE1:1;                  /* MUB General Purpose Interrupt Enable n */
    vuint32_t GIE2:1;                  /* MUB General Purpose Interrupt Enable n */
    vuint32_t GIE3:1;                  /* MUB General Purpose Interrupt Enable n */
    vuint32_t GIE4:1;                  /* MUB General Purpose Interrupt Enable n */
    vuint32_t GIE5:1;                  /* MUB General Purpose Interrupt Enable n */
    vuint32_t GIE6:1;                  /* MUB General Purpose Interrupt Enable n */
    vuint32_t GIE7:1;                  /* MUB General Purpose Interrupt Enable n */
    vuint32_t GIE8:1;                  /* MUB General Purpose Interrupt Enable n */
    vuint32_t GIE9:1;                  /* MUB General Purpose Interrupt Enable n */
    vuint32_t GIE10:1;                 /* MUB General Purpose Interrupt Enable n */
    vuint32_t GIE11:1;                 /* MUB General Purpose Interrupt Enable n */
    vuint32_t GIE12:1;                 /* MUB General Purpose Interrupt Enable n */
    vuint32_t GIE13:1;                 /* MUB General Purpose Interrupt Enable n */
    vuint32_t GIE14:1;                 /* MUB General Purpose Interrupt Enable n */
    vuint32_t GIE15:1;                 /* MUB General Purpose Interrupt Enable n */
    vuint32_t GIE16:1;                 /* MUB General Purpose Interrupt Enable n */
    vuint32_t GIE17:1;                 /* MUB General Purpose Interrupt Enable n */
    vuint32_t GIE18:1;                 /* MUB General Purpose Interrupt Enable n */
    vuint32_t GIE19:1;                 /* MUB General Purpose Interrupt Enable n */
    vuint32_t GIE20:1;                 /* MUB General Purpose Interrupt Enable n */
    vuint32_t GIE21:1;                 /* MUB General Purpose Interrupt Enable n */
    vuint32_t GIE22:1;                 /* MUB General Purpose Interrupt Enable n */
    vuint32_t GIE23:1;                 /* MUB General Purpose Interrupt Enable n */
    vuint32_t GIE24:1;                 /* MUB General Purpose Interrupt Enable n */
    vuint32_t GIE25:1;                 /* MUB General Purpose Interrupt Enable n */
    vuint32_t GIE26:1;                 /* MUB General Purpose Interrupt Enable n */
    vuint32_t GIE27:1;                 /* MUB General Purpose Interrupt Enable n */
    vuint32_t GIE28:1;                 /* MUB General Purpose Interrupt Enable n */
    vuint32_t GIE29:1;                 /* MUB General Purpose Interrupt Enable n */
    vuint32_t GIE30:1;                 /* MUB General Purpose Interrupt Enable n */
    vuint32_t GIE31:1;                 /* MUB General Purpose Interrupt Enable n */
  } B;
} MU_GIER_tag;

typedef union MU_GCR_union_tag {       /* General Control Register */
  vuint32_t R;
  struct {
    vuint32_t GIR0:1;                  /* MUA General Purpose Interrupt Request n */
    vuint32_t GIR1:1;                  /* MUB General Purpose Interrupt Request n */
    vuint32_t GIR2:1;                  /* MUB General Purpose Interrupt Request n */
    vuint32_t GIR3:1;                  /* MUB General Purpose Interrupt Request n */
    vuint32_t GIR4:1;                  /* MUB General Purpose Interrupt Request n */
    vuint32_t GIR5:1;                  /* MUB General Purpose Interrupt Request n */
    vuint32_t GIR6:1;                  /* MUB General Purpose Interrupt Request n */
    vuint32_t GIR7:1;                  /* MUB General Purpose Interrupt Request n */
    vuint32_t GIR8:1;                  /* MUB General Purpose Interrupt Request n */
    vuint32_t GIR9:1;                  /* MUB General Purpose Interrupt Request n */
    vuint32_t GIR10:1;                 /* MUB General Purpose Interrupt Request n */
    vuint32_t GIR11:1;                 /* MUB General Purpose Interrupt Request n */
    vuint32_t GIR12:1;                 /* MUB General Purpose Interrupt Request n */
    vuint32_t GIR13:1;                 /* MUB General Purpose Interrupt Request n */
    vuint32_t GIR14:1;                 /* MUB General Purpose Interrupt Request n */
    vuint32_t GIR15:1;                 /* MUB General Purpose Interrupt Request n */
    vuint32_t GIR16:1;                 /* MUB General Purpose Interrupt Request n */
    vuint32_t GIR17:1;                 /* MUB General Purpose Interrupt Request n */
    vuint32_t GIR18:1;                 /* MUB General Purpose Interrupt Request n */
    vuint32_t GIR19:1;                 /* MUB General Purpose Interrupt Request n */
    vuint32_t GIR20:1;                 /* MUB General Purpose Interrupt Request n */
    vuint32_t GIR21:1;                 /* MUB General Purpose Interrupt Request n */
    vuint32_t GIR22:1;                 /* MUB General Purpose Interrupt Request n */
    vuint32_t GIR23:1;                 /* MUB General Purpose Interrupt Request n */
    vuint32_t GIR24:1;                 /* MUB General Purpose Interrupt Request n */
    vuint32_t GIR25:1;                 /* MUB General Purpose Interrupt Request n */
    vuint32_t GIR26:1;                 /* MUB General Purpose Interrupt Request n */
    vuint32_t GIR27:1;                 /* MUB General Purpose Interrupt Request n */
    vuint32_t GIR28:1;                 /* MUB General Purpose Interrupt Request n */
    vuint32_t GIR29:1;                 /* MUB General Purpose Interrupt Request n */
    vuint32_t GIR30:1;                 /* MUB General Purpose Interrupt Request n */
    vuint32_t GIR31:1;                 /* MUB General Purpose Interrupt Request n */
  } B;
} MU_GCR_tag;

typedef union MU_GSR_union_tag {       /* General Status Register */
  vuint32_t R;
  struct {
    vuint32_t GIP0:1;                  /* MUA General Interrupt Request Pending n */
    vuint32_t GIP1:1;                  /* MUB General Interrupt Request Pending n */
    vuint32_t GIP2:1;                  /* MUB General Interrupt Request Pending n */
    vuint32_t GIP3:1;                  /* MUB General Interrupt Request Pending n */
    vuint32_t GIP4:1;                  /* MUB General Interrupt Request Pending n */
    vuint32_t GIP5:1;                  /* MUB General Interrupt Request Pending n */
    vuint32_t GIP6:1;                  /* MUB General Interrupt Request Pending n */
    vuint32_t GIP7:1;                  /* MUB General Interrupt Request Pending n */
    vuint32_t GIP8:1;                  /* MUB General Interrupt Request Pending n */
    vuint32_t GIP9:1;                  /* MUB General Interrupt Request Pending n */
    vuint32_t GIP10:1;                 /* MUB General Interrupt Request Pending n */
    vuint32_t GIP11:1;                 /* MUB General Interrupt Request Pending n */
    vuint32_t GIP12:1;                 /* MUB General Interrupt Request Pending n */
    vuint32_t GIP13:1;                 /* MUB General Interrupt Request Pending n */
    vuint32_t GIP14:1;                 /* MUB General Interrupt Request Pending n */
    vuint32_t GIP15:1;                 /* MUB General Interrupt Request Pending n */
    vuint32_t GIP16:1;                 /* MUB General Interrupt Request Pending n */
    vuint32_t GIP17:1;                 /* MUB General Interrupt Request Pending n */
    vuint32_t GIP18:1;                 /* MUB General Interrupt Request Pending n */
    vuint32_t GIP19:1;                 /* MUB General Interrupt Request Pending n */
    vuint32_t GIP20:1;                 /* MUB General Interrupt Request Pending n */
    vuint32_t GIP21:1;                 /* MUB General Interrupt Request Pending n */
    vuint32_t GIP22:1;                 /* MUB General Interrupt Request Pending n */
    vuint32_t GIP23:1;                 /* MUB General Interrupt Request Pending n */
    vuint32_t GIP24:1;                 /* MUB General Interrupt Request Pending n */
    vuint32_t GIP25:1;                 /* MUB General Interrupt Request Pending n */
    vuint32_t GIP26:1;                 /* MUB General Interrupt Request Pending n */
    vuint32_t GIP27:1;                 /* MUB General Interrupt Request Pending n */
    vuint32_t GIP28:1;                 /* MUB General Interrupt Request Pending n */
    vuint32_t GIP29:1;                 /* MUB General Interrupt Request Pending n */
    vuint32_t GIP30:1;                 /* MUB General Interrupt Request Pending n */
    vuint32_t GIP31:1;                 /* MUB General Interrupt Request Pending n */
  } B;
} MU_GSR_tag;

typedef union MU_TCR_union_tag {       /* Transmit Control Register */
  vuint32_t R;
  struct {
    vuint32_t TIE0:1;                  /* MUA Transmit Interrupt Enable n */
    vuint32_t TIE1:1;                  /* MUA Transmit Interrupt Enable n */
    vuint32_t TIE2:1;                  /* MUA Transmit Interrupt Enable n */
    vuint32_t TIE3:1;                  /* MUA Transmit Interrupt Enable n */
    vuint32_t _unused_4:28;            /* Reserved */
  } B;
} MU_TCR_tag;

typedef union MU_TSR_union_tag {       /* Transmit Status Register */
  vuint32_t R;
  struct {
    vuint32_t TE0:1;                   /* MUA Transmit Register n Empty */
    vuint32_t TE1:1;                   /* MUA Transmit Register n Empty */
    vuint32_t TE2:1;                   /* MUA Transmit Register n Empty */
    vuint32_t TE3:1;                   /* MUA Transmit Register n Empty */
    vuint32_t _unused_4:28;            /* Reserved */
  } B;
} MU_TSR_tag;

typedef union MU_RCR_union_tag {       /* Receive Control Register */
  vuint32_t R;
  struct {
    vuint32_t RIE0:1;                  /* MUA Receive Interrupt Enable n */
    vuint32_t RIE1:1;                  /* MUA Receive Interrupt Enable n */
    vuint32_t RIE2:1;                  /* MUA Receive Interrupt Enable n */
    vuint32_t RIE3:1;                  /* MUA Receive Interrupt Enable n */
    vuint32_t _unused_4:28;            /* Reserved */
  } B;
} MU_RCR_tag;

typedef union MU_RSR_union_tag {       /* Receive Status Register */
  vuint32_t R;
  struct {
    vuint32_t RF0:1;                   /* MUA Receive Register n Full */
    vuint32_t RF1:1;                   /* MUA Receive Register n Full */
    vuint32_t RF2:1;                   /* MUA Receive Register n Full */
    vuint32_t RF3:1;                   /* MUA Receive Register n Full */
    vuint32_t _unused_4:28;            /* Reserved */
  } B;
} MU_RSR_tag;

typedef union MU_TR_union_tag {        /* Transmit Register */
  vuint32_t R;
  struct {
    vuint32_t TR_DATA:32;              /* MUA Transmit Data */
  } B;
} MU_TR_tag;

typedef union MU_RR_union_tag {        /* Receive Register */
  vuint32_t R;
  struct {
    vuint32_t RR_DATA:32;              /* MUA Receive Data */
  } B;
} MU_RR_tag;

struct MU_tag {
  MU_VER_tag VER;                      /* Version ID Register */
  MU_PAR_tag PAR;                      /* Parameter Register */
  MU_CR_tag CR;                        /* Control Register */
  MU_SR_tag SR;                        /* Status Register */
  MU_CCR0_tag CCR0;                    /* Core Control Register 0 */
  uint8_t MU_reserved0[4];
  MU_CSSR0_tag CSSR0;                  /* Core Sticky Status Register 0 */
  uint8_t MU_reserved1[228];
  MU_FCR_tag FCR;                      /* Flag Control Register */
  MU_FSR_tag FSR;                      /* Flag Status Register */
  uint8_t MU_reserved2[8];
  MU_GIER_tag GIER;                    /* General Interrupt Enable Register */
  MU_GCR_tag GCR;                      /* General Control Register */
  MU_GSR_tag GSR;                      /* General Status Register */
  uint8_t MU_reserved3[4];
  MU_TCR_tag TCR;                      /* Transmit Control Register */
  MU_TSR_tag TSR;                      /* Transmit Status Register */
  MU_RCR_tag RCR;                      /* Receive Control Register */
  MU_RSR_tag RSR;                      /* Receive Status Register */
  uint8_t MU_reserved4[208];
  MU_TR_tag TR[4];                     /* Transmit Register */
  uint8_t MU_reserved5[112];
  MU_RR_tag RR[4];                     /* Receive Register */
};


/* ============================================================================
   =============================== Module: PFLASH =============================
   ============================================================================ */

typedef union PFLASH_PFCR_union_tag {  /* Platform Flash Memory Configuration 0 */
  vuint32_t R;
  struct {
    vuint32_t P0_CBFEN:1;              /* Port0 PFLASH Line Read Code Buffers Enable */
    vuint32_t P0_DBFEN:1;              /* Port0 PFLASH Line Read Data Buffers Enable */
    vuint32_t _unused_2:2;             /* Reserved */
    vuint32_t P0_CPFEN:1;              /* Port0 Code Prefetch Enable */
    vuint32_t P0_DPFEN:1;              /* Port0 Data Prefetch Enable */
    vuint32_t _unused_6:26;            /* Reserved */
  } B;
} PFLASH_PFCR_tag;

typedef union PFLASH_PFCR4_union_tag { /* Platform Flash Memory Configuration 4 */
  vuint32_t R;
  struct {
    vuint32_t DERR_SUP:1;              /* Data Error Suppression */
    vuint32_t BLK4_PS:3;               /* Block 4 Pipe Select */
    vuint32_t _unused_4:3;             /* Reserved */
    vuint32_t DMEEE:1;                 /* Disable Multi-Bit ECC Error Exception */
    vuint32_t _unused_8:24;            /* Reserved */
  } B;
} PFLASH_PFCR4_tag;

typedef union PFLASH_PFAPR_union_tag { /* Platform Flash Memory Access Protection */
  vuint32_t R;
  struct {
    vuint32_t M15AP:2;                 /* Master n Access Protection */
    vuint32_t M14AP:2;                 /* Master n Access Protection */
    vuint32_t M13AP:2;                 /* Master n Access Protection */
    vuint32_t M12AP:2;                 /* Master n Access Protection */
    vuint32_t M11AP:2;                 /* Master n Access Protection */
    vuint32_t M10AP:2;                 /* Master n Access Protection */
    vuint32_t M9AP:2;                  /* Master n Access Protection */
    vuint32_t M8AP:2;                  /* Master n Access Protection */
    vuint32_t M7AP:2;                  /* Master n Access Protection */
    vuint32_t M6AP:2;                  /* Master n Access Protection */
    vuint32_t M5AP:2;                  /* Master n Access Protection */
    vuint32_t M4AP:2;                  /* Master n Access Protection */
    vuint32_t _unused_24:2;            /* Master n Access Protection */
    vuint32_t M2AP:2;                  /* Master n Access Protection */
    vuint32_t M1AP:2;                  /* Master n Access Protection */
    vuint32_t M0AP:2;                  /* Master n Access Protection */
  } B;
} PFLASH_PFAPR_tag;

typedef union PFLASH_PFCPGM_PEADR_L_union_tag { /* Platform Flash Memory Program Erase Address Logical */
  vuint32_t R;
  struct {
    vuint32_t PEADR_L:32;              /* Program Erase Address Logical */
  } B;
} PFLASH_PFCPGM_PEADR_L_tag;

typedef union PFLASH_PFCPGM_PEADR_P_union_tag { /* Platform Flash Memory Program Erase Address Physical */
  vuint32_t R;
  struct {
    vuint32_t PEADR_P:32;              /* Program Erase Address Physical */
  } B;
} PFLASH_PFCPGM_PEADR_P_tag;

typedef union PFLASH_PFCPGM_XPEADR_L_union_tag { /* Platform Flash Memory Express Program Erase Address Logical */
  vuint32_t R;
  struct {
    vuint32_t XPEADR_L:32;             /* Express Program Erase Address Logical */
  } B;
} PFLASH_PFCPGM_XPEADR_L_tag;

typedef union PFLASH_PFCPGM_XPEADR_P_union_tag { /* Platform Flash Memory Express Program Erase Address Physical */
  vuint32_t R;
  struct {
    vuint32_t XPEADR_P:32;             /* Express Program Erase Address Physical */
  } B;
} PFLASH_PFCPGM_XPEADR_P_tag;

typedef union PFLASH_PFCPGM_APEADR_L_union_tag { /* Platform Flash Memory Alternate Program Erase Address Logical */
  vuint32_t R;
  struct {
    vuint32_t APEADR_L:32;             /* Alternate Program Erase Address Logical */
  } B;
} PFLASH_PFCPGM_APEADR_L_tag;

typedef union PFLASH_PFCPGM_APEADR_P_union_tag { /* Platform Flash Memory Alternate Program Erase Address Physical */
  vuint32_t R;
  struct {
    vuint32_t APEADR_P:32;             /* Alternate Program Erase Address Physical */
  } B;
} PFLASH_PFCPGM_APEADR_P_tag;

typedef union PFLASH_PFCBLK_SPELOCK_union_tag { /* Block n Sector Program Erase Lock */
  vuint32_t R;
  struct {
    vuint32_t SLCK:32;                 /* Sector Lock */
  } B;
} PFLASH_PFCBLK_SPELOCK_tag;

typedef union PFLASH_PFCBLKU_SPELOCK_union_tag { /* Block UTEST Sector Program Erase Lock */
  vuint32_t R;
  struct {
    vuint32_t SLCK:1;                  /* Sector Lock */
    vuint32_t _unused_1:31;
  } B;
} PFLASH_PFCBLKU_SPELOCK_tag;

typedef union PFLASH_PFCBLK_SSPELOCK_union_tag { /* Block n Super Sector Program Erase Lock */
  vuint32_t R;
  struct {
    vuint32_t SSLCK:12;                /* Super Sector Lock */
    vuint32_t _unused_12:20;
  } B;
} PFLASH_PFCBLK_SSPELOCK_tag;

typedef union PFLASH_PFCDBLK_SSPELOCK_union_tag { /* Block n Super Sector Program Erase Lock */
  vuint32_t R;
  struct {
    vuint32_t SSLCK:4;                 /* Super Sector Lock */
    vuint32_t _unused_4:28;
  } B;
} PFLASH_PFCDBLK_SSPELOCK_tag;

typedef union PFLASH_PFCBLK_SETSLOCK_union_tag { /* Block n Set Sector Lock */
  vuint32_t R;
  struct {
    vuint32_t SETSLCK:32;
  } B;
} PFLASH_PFCBLK_SETSLOCK_tag;

typedef union PFLASH_PFCBLKU_SETSLOCK_union_tag { /* Block UTEST Set Sector Lock */
  vuint32_t R;
  struct {
    vuint32_t SETSLCK:1;               /* Set Sector Lock */
    vuint32_t _unused_1:31;
  } B;
} PFLASH_PFCBLKU_SETSLOCK_tag;

typedef union PFLASH_PFCBLK_SSETSLOCK_union_tag { /* Block n Set Super Sector Lock */
  vuint32_t R;
  struct {
    vuint32_t SSETSLCK:12;             /* Set Super Sector Lock */
    vuint32_t _unused_12:20;
  } B;
} PFLASH_PFCBLK_SSETSLOCK_tag;

typedef union PFLASH_PFCDBLK_SSETSLOCK_union_tag { /* Block n Set Super Sector Lock */
  vuint32_t R;
  struct {
    vuint32_t SSETSLCK:4;              /* Set Super Sector Lock */
    vuint32_t _unused_4:28;
  } B;
} PFLASH_PFCDBLK_SSETSLOCK_tag;

typedef union PFLASH_PFCBLK_LOCKMASTER_S_union_tag { /* Block a Lock Master Sectorb */
  vuint32_t R;
  struct {
    vuint32_t LOCKMASTER_S:32;         /* Block a Lock Master Sectorb */
  } B;
} PFLASH_PFCBLK_LOCKMASTER_S_tag;

typedef union PFLASH_PFCBLKU_LOCKMASTER_S_union_tag { /* Block UTEST Lock Master Sector */
  vuint32_t R;
  struct {
    vuint32_t LOCKMASTER_S:8;          /* Lock Master Sector */
    vuint32_t _unused_8:24;
  } B;
} PFLASH_PFCBLKU_LOCKMASTER_S_tag;

typedef union PFLASH_PFCBLK0_LOCKMASTER_SS0_union_tag { /* Block m Lock Master Super Sector n */
  vuint32_t R;
  struct {
    vuint32_t LOCKMASTER_SS:32;        /* Block a Lock Master Super Sectorb */
  } B;
} PFLASH_PFCBLK0_LOCKMASTER_SS0_tag;

typedef union PFLASH_PFCBLK0_LOCKMASTER_SS1_union_tag { /* Block m Lock Master Super Sector n */
  vuint32_t R;
  struct {
    vuint32_t LOCKMASTER_SS:32;        /* Block a Lock Master Super Sectorb */
  } B;
} PFLASH_PFCBLK0_LOCKMASTER_SS1_tag;

typedef union PFLASH_PFCBLK0_LOCKMASTER_SS2_union_tag { /* Block m Lock Master Super Sector n */
  vuint32_t R;
  struct {
    vuint32_t LOCKMASTER_SS:32;        /* Block a Lock Master Super Sectorb */
  } B;
} PFLASH_PFCBLK0_LOCKMASTER_SS2_tag;

typedef union PFLASH_PFCBLK1_LOCKMASTER_SS0_union_tag { /* Block m Lock Master Super Sector n */
  vuint32_t R;
  struct {
    vuint32_t LOCKMASTER_SS:32;        /* Block a Lock Master Super Sectorb */
  } B;
} PFLASH_PFCBLK1_LOCKMASTER_SS0_tag;

typedef union PFLASH_PFCBLK1_LOCKMASTER_SS1_union_tag { /* Block m Lock Master Super Sector n */
  vuint32_t R;
  struct {
    vuint32_t LOCKMASTER_SS:32;        /* Block a Lock Master Super Sectorb */
  } B;
} PFLASH_PFCBLK1_LOCKMASTER_SS1_tag;

typedef union PFLASH_PFCBLK1_LOCKMASTER_SS2_union_tag { /* Block m Lock Master Super Sector n */
  vuint32_t R;
  struct {
    vuint32_t LOCKMASTER_SS:32;        /* Block a Lock Master Super Sectorb */
  } B;
} PFLASH_PFCBLK1_LOCKMASTER_SS2_tag;

typedef union PFLASH_PFCBLK2_LOCKMASTER_SS0_union_tag { /* Block m Lock Master Super Sector n */
  vuint32_t R;
  struct {
    vuint32_t LOCKMASTER_SS:32;        /* Block a Lock Master Super Sectorb */
  } B;
} PFLASH_PFCBLK2_LOCKMASTER_SS0_tag;

typedef union PFLASH_PFCBLK2_LOCKMASTER_SS1_union_tag { /* Block m Lock Master Super Sector n */
  vuint32_t R;
  struct {
    vuint32_t LOCKMASTER_SS:32;        /* Block a Lock Master Super Sectorb */
  } B;
} PFLASH_PFCBLK2_LOCKMASTER_SS1_tag;

typedef union PFLASH_PFCBLK2_LOCKMASTER_SS2_union_tag { /* Block m Lock Master Super Sector n */
  vuint32_t R;
  struct {
    vuint32_t LOCKMASTER_SS:32;        /* Block a Lock Master Super Sectorb */
  } B;
} PFLASH_PFCBLK2_LOCKMASTER_SS2_tag;

typedef union PFLASH_PFCBLK3_LOCKMASTER_SS0_union_tag { /* Block m Lock Master Super Sector n */
  vuint32_t R;
  struct {
    vuint32_t LOCKMASTER_SS:32;        /* Block a Lock Master Super Sectorb */
  } B;
} PFLASH_PFCBLK3_LOCKMASTER_SS0_tag;

typedef union PFLASH_PFCBLK3_LOCKMASTER_SS1_union_tag { /* Block m Lock Master Super Sector n */
  vuint32_t R;
  struct {
    vuint32_t LOCKMASTER_SS:32;        /* Block a Lock Master Super Sectorb */
  } B;
} PFLASH_PFCBLK3_LOCKMASTER_SS1_tag;

typedef union PFLASH_PFCBLK3_LOCKMASTER_SS2_union_tag { /* Block m Lock Master Super Sector n */
  vuint32_t R;
  struct {
    vuint32_t LOCKMASTER_SS:32;        /* Block a Lock Master Super Sectorb */
  } B;
} PFLASH_PFCBLK3_LOCKMASTER_SS2_tag;

typedef union PFLASH_PFCBLK4_LOCKMASTER_SS0_union_tag { /* Block m Lock Master Super Sector n */
  vuint32_t R;
  struct {
    vuint32_t LOCKMASTER_SS:32;        /* Block a Lock Master Super Sectorb */
  } B;
} PFLASH_PFCBLK4_LOCKMASTER_SS0_tag;

struct PFLASH_tag {
  PFLASH_PFCR_tag PFCR[3];             /* Platform Flash Memory Configuration 0 */
  uint8_t PFLASH_reserved0[4];
  PFLASH_PFCR4_tag PFCR4;              /* Platform Flash Memory Configuration 4 */
  PFLASH_PFAPR_tag PFAPR;              /* Platform Flash Memory Access Protection */
  uint8_t PFLASH_reserved1[744];
  PFLASH_PFCPGM_PEADR_L_tag PFCPGM_PEADR_L; /* Platform Flash Memory Program Erase Address Logical */
  PFLASH_PFCPGM_PEADR_P_tag PFCPGM_PEADR_P; /* Platform Flash Memory Program Erase Address Physical */
  PFLASH_PFCPGM_XPEADR_L_tag PFCPGM_XPEADR_L; /* Platform Flash Memory Express Program Erase Address Logical */
  PFLASH_PFCPGM_XPEADR_P_tag PFCPGM_XPEADR_P; /* Platform Flash Memory Express Program Erase Address Physical */
  PFLASH_PFCPGM_APEADR_L_tag PFCPGM_APEADR_L; /* Platform Flash Memory Alternate Program Erase Address Logical */
  PFLASH_PFCPGM_APEADR_P_tag PFCPGM_APEADR_P; /* Platform Flash Memory Alternate Program Erase Address Physical */
  uint8_t PFLASH_reserved2[40];
  PFLASH_PFCBLK_SPELOCK_tag PFCBLK_SPELOCK[5]; /* Block n Sector Program Erase Lock */
  uint8_t PFLASH_reserved3[4];
  PFLASH_PFCBLKU_SPELOCK_tag PFCBLKU_SPELOCK[1]; /* Block UTEST Sector Program Erase Lock */
  PFLASH_PFCBLK_SSPELOCK_tag PFCBLK_SSPELOCK[4]; /* Block n Super Sector Program Erase Lock */
  PFLASH_PFCDBLK_SSPELOCK_tag PFCDBLK_SSPELOCK[1]; /* Block n Super Sector Program Erase Lock */
  uint8_t PFLASH_reserved4[16];
  PFLASH_PFCBLK_SETSLOCK_tag PFCBLK_SETSLOCK[5]; /* Block n Set Sector Lock */
  uint8_t PFLASH_reserved5[4];
  PFLASH_PFCBLKU_SETSLOCK_tag PFCBLKU_SETSLOCK[1]; /* Block UTEST Set Sector Lock */
  PFLASH_PFCBLK_SSETSLOCK_tag PFCBLK_SSETSLOCK[4]; /* Block n Set Super Sector Lock */
  PFLASH_PFCDBLK_SSETSLOCK_tag PFCDBLK_SSETSLOCK[1]; /* Block n Set Super Sector Lock */
  uint8_t PFLASH_reserved6[16];
  PFLASH_PFCBLK_LOCKMASTER_S_tag PFCBLK_LOCKMASTER_S[5][8]; /* Block a Lock Master Sectorb */
  uint8_t PFLASH_reserved7[32];
  PFLASH_PFCBLKU_LOCKMASTER_S_tag PFCBLKU_LOCKMASTER_S[1]; /* Block UTEST Lock Master Sector */
  PFLASH_PFCBLK0_LOCKMASTER_SS0_tag PFCBLK0_LOCKMASTER_SS0; /* Block m Lock Master Super Sector n */
  PFLASH_PFCBLK0_LOCKMASTER_SS1_tag PFCBLK0_LOCKMASTER_SS1; /* Block m Lock Master Super Sector n */
  PFLASH_PFCBLK0_LOCKMASTER_SS2_tag PFCBLK0_LOCKMASTER_SS2; /* Block m Lock Master Super Sector n */
  uint8_t PFLASH_reserved8[4];
  PFLASH_PFCBLK1_LOCKMASTER_SS0_tag PFCBLK1_LOCKMASTER_SS0; /* Block m Lock Master Super Sector n */
  PFLASH_PFCBLK1_LOCKMASTER_SS1_tag PFCBLK1_LOCKMASTER_SS1; /* Block m Lock Master Super Sector n */
  PFLASH_PFCBLK1_LOCKMASTER_SS2_tag PFCBLK1_LOCKMASTER_SS2; /* Block m Lock Master Super Sector n */
  uint8_t PFLASH_reserved9[4];
  PFLASH_PFCBLK2_LOCKMASTER_SS0_tag PFCBLK2_LOCKMASTER_SS0; /* Block m Lock Master Super Sector n */
  PFLASH_PFCBLK2_LOCKMASTER_SS1_tag PFCBLK2_LOCKMASTER_SS1; /* Block m Lock Master Super Sector n */
  PFLASH_PFCBLK2_LOCKMASTER_SS2_tag PFCBLK2_LOCKMASTER_SS2; /* Block m Lock Master Super Sector n */
  uint8_t PFLASH_reserved10[4];
  PFLASH_PFCBLK3_LOCKMASTER_SS0_tag PFCBLK3_LOCKMASTER_SS0; /* Block m Lock Master Super Sector n */
  PFLASH_PFCBLK3_LOCKMASTER_SS1_tag PFCBLK3_LOCKMASTER_SS1; /* Block m Lock Master Super Sector n */
  PFLASH_PFCBLK3_LOCKMASTER_SS2_tag PFCBLK3_LOCKMASTER_SS2; /* Block m Lock Master Super Sector n */
  uint8_t PFLASH_reserved11[4];
  PFLASH_PFCBLK4_LOCKMASTER_SS0_tag PFCBLK4_LOCKMASTER_SS0; /* Block m Lock Master Super Sector n */
};


/* ============================================================================
   =============================== Module: PIT ================================
   ============================================================================ */

typedef union PIT_MCR_union_tag {      /* PIT Module Control Register */
  vuint32_t R;
  struct {
    vuint32_t FRZ:1;                   /* Freeze */
    vuint32_t MDIS:1;                  /* Module Disable for PIT */
    vuint32_t MDIS_RTI:1;              /* Module Disable for RTI */
    vuint32_t _unused_3:29;            /* Reserved */
  } B;
} PIT_MCR_tag;

typedef union PIT_LTMR64H_union_tag {  /* PIT Upper Lifetime Timer Register */
  vuint32_t R;
  struct {
    vuint32_t LTH:32;                  /* Life Timer value */
  } B;
} PIT_LTMR64H_tag;

typedef union PIT_LTMR64L_union_tag {  /* PIT Lower Lifetime Timer Register */
  vuint32_t R;
  struct {
    vuint32_t LTL:32;                  /* Life Timer value */
  } B;
} PIT_LTMR64L_tag;

typedef union PIT_RTI_LDVAL_STAT_union_tag { /* RTI Timer Load Value Sync Status Register */
  vuint32_t R;
  struct {
    vuint32_t RT_STAT:1;               /* RTI Timer Load Value Sync Status */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} PIT_RTI_LDVAL_STAT_tag;

typedef union PIT_RTI_LDVAL_union_tag { /* Timer Load Value Register */
  vuint32_t R;
  struct {
    vuint32_t TSV:32;                  /* Timer Start Value */
  } B;
} PIT_RTI_LDVAL_tag;

typedef union PIT_RTI_CVAL_union_tag { /* Current Timer Value Register */
  vuint32_t R;
  struct {
    vuint32_t TVL:32;                  /* Current Timer Value */
  } B;
} PIT_RTI_CVAL_tag;

typedef union PIT_RTI_TCTRL_union_tag { /* Timer Control Register */
  vuint32_t R;
  struct {
    vuint32_t TEN:1;                   /* Timer Enable Bit */
    vuint32_t TIE:1;                   /* Timer Interrupt Enable */
    vuint32_t CHN:1;                   /* Chain Mode */
    vuint32_t _unused_3:29;            /* Reserved */
  } B;
} PIT_RTI_TCTRL_tag;

typedef union PIT_RTI_TFLG_union_tag { /* Timer Flag Register */
  vuint32_t R;
  struct {
    vuint32_t TIF:1;                   /* Timer Interrupt Flag */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} PIT_RTI_TFLG_tag;

typedef union PIT_TIMER_LDVAL_union_tag { /* Timer Load Value Register */
  vuint32_t R;
  struct {
    vuint32_t TSV:32;                  /* Timer Start Value */
  } B;
} PIT_TIMER_LDVAL_tag;

typedef union PIT_TIMER_CVAL_union_tag { /* Current Timer Value Register */
  vuint32_t R;
  struct {
    vuint32_t TVL:32;                  /* Current Timer Value */
  } B;
} PIT_TIMER_CVAL_tag;

typedef union PIT_TIMER_TCTRL_union_tag { /* Timer Control Register */
  vuint32_t R;
  struct {
    vuint32_t TEN:1;                   /* Timer Enable */
    vuint32_t TIE:1;                   /* Timer Interrupt Enable */
    vuint32_t CHN:1;                   /* Chain Mode */
    vuint32_t _unused_3:29;            /* Reserved */
  } B;
} PIT_TIMER_TCTRL_tag;

typedef union PIT_TIMER_TFLG_union_tag { /* Timer Flag Register */
  vuint32_t R;
  struct {
    vuint32_t TIF:1;                   /* Timer Interrupt Flag */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} PIT_TIMER_TFLG_tag;

typedef struct PIT_TIMER_struct_tag {
  PIT_TIMER_LDVAL_tag LDVAL;           /* Timer Load Value Register */
  PIT_TIMER_CVAL_tag CVAL;             /* Current Timer Value Register */
  PIT_TIMER_TCTRL_tag TCTRL;           /* Timer Control Register */
  PIT_TIMER_TFLG_tag TFLG;             /* Timer Flag Register */
} PIT_TIMER_tag;

struct PIT_tag {
  PIT_MCR_tag MCR;                     /* PIT Module Control Register */
  uint8_t PIT_reserved0[220];
  PIT_LTMR64H_tag LTMR64H;             /* PIT Upper Lifetime Timer Register */
  PIT_LTMR64L_tag LTMR64L;             /* PIT Lower Lifetime Timer Register */
  uint8_t PIT_reserved1[4];
  PIT_RTI_LDVAL_STAT_tag RTI_LDVAL_STAT; /* RTI Timer Load Value Sync Status Register */
  PIT_RTI_LDVAL_tag RTI_LDVAL;         /* Timer Load Value Register */
  PIT_RTI_CVAL_tag RTI_CVAL;           /* Current Timer Value Register */
  PIT_RTI_TCTRL_tag RTI_TCTRL;         /* Timer Control Register */
  PIT_RTI_TFLG_tag RTI_TFLG;           /* Timer Flag Register */
  PIT_TIMER_tag TIMER[4];
};


/* ============================================================================
   =============================== Module: PLL ================================
   ============================================================================ */

typedef union PLL_PLLCR_union_tag {    /* PLL Control Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;            /* Reserved */
    vuint32_t PLLPD:1;                 /* PLL power down */
  } B;
} PLL_PLLCR_tag;

typedef union PLL_PLLSR_union_tag {    /* PLL Status Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;
    vuint32_t LOCK:1;                  /* Lock status */
    vuint32_t LOL:1;                   /* Loss-Of-Lock flag */
    vuint32_t _unused_4:4;
    vuint32_t _unused_8:3;
    vuint32_t _unused_11:21;
  } B;
} PLL_PLLSR_tag;

typedef union PLL_PLLDV_union_tag {    /* PLL Divider */
  vuint32_t R;
  struct {
    vuint32_t MFI:8;                   /* Integer portion of loop divider. */
    vuint32_t _unused_8:4;
    vuint32_t RDIV:3;                  /* Input clock predivider */
    vuint32_t _unused_15:1;
    vuint32_t _unused_16:6;
    vuint32_t _unused_22:3;
    vuint32_t ODIV2:6;                 /* Output frequency divider for raw PLL clock. */
    vuint32_t _unused_31:1;
  } B;
} PLL_PLLDV_tag;

typedef union PLL_PLLFM_union_tag {    /* PLL Frequency Modulation */
  vuint32_t R;
  struct {
    vuint32_t STEPNO:11;               /* Number of steps of modulation period/frequency modulation */
    vuint32_t _unused_11:5;
    vuint32_t STEPSIZE:10;             /* Frequency modulation step size */
    vuint32_t _unused_26:3;
    vuint32_t SPREADCTL:1;             /* Modulation type selection */
    vuint32_t SSCGBYP:1;               /* Frequency modulation (spread spectrum clock generation) bypass */
    vuint32_t _unused_31:1;
  } B;
} PLL_PLLFM_tag;

typedef union PLL_PLLFD_union_tag {    /* PLL Fractional Divider */
  vuint32_t R;
  struct {
    vuint32_t MFN:15;                  /* Numerator of fractional loop division factor */
    vuint32_t _unused_15:1;
    vuint32_t _unused_16:1;
    vuint32_t _unused_17:1;
    vuint32_t _unused_18:4;
    vuint32_t _unused_22:6;
    vuint32_t SDM3:1;                  /* Fractional mode configuration */
    vuint32_t SDM2:1;                  /* Fractional mode configuration */
    vuint32_t SDMEN:1;                 /* Fractional mode enable */
    vuint32_t _unused_31:1;
  } B;
} PLL_PLLFD_tag;

typedef union PLL_PLLCAL2_union_tag {  /* PLL Calibration Register 2 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:7;             /* Reserved */
    vuint32_t ULKCTL:2;                /* Unlock control accuracy. */
    vuint32_t _unused_9:7;             /* Reserved */
    vuint32_t _unused_16:3;            /* Reserved */
    vuint32_t _unused_19:3;            /* Reserved */
    vuint32_t _unused_22:10;           /* Reserved */
  } B;
} PLL_PLLCAL2_tag;

typedef union PLL_PLLODIV_union_tag {  /* PLL Output Divider */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:2;             /* Reserved */
    vuint32_t _unused_2:14;
    vuint32_t DIV:4;                   /* Division value */
    vuint32_t _unused_20:11;
    vuint32_t DE:1;                    /* Divider enable */
  } B;
} PLL_PLLODIV_tag;

struct PLL_tag {
  PLL_PLLCR_tag PLLCR;                 /* PLL Control Register */
  PLL_PLLSR_tag PLLSR;                 /* PLL Status Register */
  PLL_PLLDV_tag PLLDV;                 /* PLL Divider */
  PLL_PLLFM_tag PLLFM;                 /* PLL Frequency Modulation */
  PLL_PLLFD_tag PLLFD;                 /* PLL Fractional Divider */
  uint8_t PLL_reserved0[4];
  PLL_PLLCAL2_tag PLLCAL2;             /* PLL Calibration Register 2 */
  uint8_t PLL_reserved1[100];
  PLL_PLLODIV_tag PLLODIV[2];          /* PLL Output Divider */
};


/* ============================================================================
   =============================== Module: PMC ================================
   ============================================================================ */

typedef union PMC_LVSC_union_tag {     /* Low Voltage Status and Control Register */
  vuint32_t R;
  struct {
    vuint32_t HVDAF:1;                 /* HVDA flag on VDD_HV_A domain in FPM */
    vuint32_t HVDBF:1;                 /* HVDB flag on VDD_HV_B domain in FPM */
    vuint32_t HVD25F:1;                /* HVD25 flag on V25 domain in FPM */
    vuint32_t HVD11F:1;                /* HVD11 flag on V11 domain in FPM */
    vuint32_t LVD5AF:1;                /* LVD5A flag on VDD_HV_A domain in FPM */
    vuint32_t LVD15F:1;                /* LVD15 flag on V15 domain in FPM */
    vuint32_t _unused_6:2;
    vuint32_t HVDAS:1;                 /* HVDA status on VDD_HV_A domain in FPM */
    vuint32_t HVDBS:1;                 /* HVDB status on VDD_HV_B domain in FPM */
    vuint32_t HVD25S:1;                /* HVD25 status on V25 domain in FPM */
    vuint32_t HVD11S:1;                /* HVD11 status on V11 domain in FPM */
    vuint32_t LVD5AS:1;                /* LVD5A status on VDD_HV_A domain in FPM */
    vuint32_t LVD15S:1;                /* LVD15 status on V15 domain in FPM */
    vuint32_t _unused_14:2;
    vuint32_t LVRAF:1;                 /* LVRA flag on VDD_HV_A domain in FPM */
    vuint32_t LVRALPF:1;               /* LVRALP flag on VDD_HV_A domain */
    vuint32_t LVRBF:1;                 /* LVRB flag on VDD_HV_B domain in FPM */
    vuint32_t LVRBLPF:1;               /* LVRBLP flag on VDD_HV_B domain */
    vuint32_t LVR25F:1;                /* LVR25 flag on V25 domain in FPM */
    vuint32_t LVR25LPF:1;              /* LVR25LP flag on V25 domain */
    vuint32_t LVR11F:1;                /* LVR11 flag on V11 domain in FPM */
    vuint32_t LVR11LPF:1;              /* LVR11LP flag on V11 domain */
    vuint32_t GNG25OSCF:1;             /* GO/NoGo detect flag on Osc part of V25 domain */
    vuint32_t GNG11OSCF:1;             /* Go/NoGo detect flag on Osc part of V11 domain */
    vuint32_t _unused_26:5;
    vuint32_t PORF:1;                  /* POR flag */
  } B;
} PMC_LVSC_tag;

typedef union PMC_CONFIG_union_tag {   /* PMC Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t LMEN:1;                  /* Last Mile regulator enable bit */
    vuint32_t LMBCTLEN:1;              /* Last Mile regulator base control enable bit */
    vuint32_t FASTREC:1;               /* Fast recovery from LPM enable bit */
    vuint32_t LPM25EN:1;               /* V25 domain enable bit during LPM */
    vuint32_t LVRBLPEN:1;              /* LVRBLP enable bit during LPM */
    vuint32_t _unused_5:3;
    vuint32_t HVDIE:1;                 /* High voltage detect interrupt enable */
    vuint32_t LVDIE:1;                 /* Low voltage detect interrupt enable */
    vuint32_t _unused_10:6;
    vuint32_t LMAUTOEN:1;              /* Last Mile regulator auto turn over bit */
    vuint32_t LMSTAT:1;                /* Last Mile regulator status bit */
    vuint32_t _unused_18:14;
  } B;
} PMC_CONFIG_tag;

typedef union PMC_VERID_union_tag {    /* Version ID register */
  vuint32_t R;
  struct {
    vuint32_t LMFEAT:1;                /* Last Mile Regulator Feature */
    vuint32_t _unused_1:15;
    vuint32_t MINOR:8;                 /* Minor version number */
    vuint32_t MAJOR:8;                 /* Major version number */
  } B;
} PMC_VERID_tag;

struct PMC_tag {
  PMC_LVSC_tag LVSC;                   /* Low Voltage Status and Control Register */
  PMC_CONFIG_tag CONFIG;               /* PMC Configuration Register */
  uint8_t PMC_reserved0[4];
  PMC_VERID_tag VERID;                 /* Version ID register */
};


/* ============================================================================
   =============================== Module: PRAMC ==============================
   ============================================================================ */

typedef union PRAMC_PRCR1_union_tag {  /* Platform RAM Configuration register 1 */
  vuint32_t R;
  struct {
    vuint32_t FT_DIS:1;                /* Flow-through disabled */
    vuint32_t _unused_1:5;             /* Reserved */
    vuint32_t P0_BO_DIS:1;             /* Port p0 read burst optimization disable. */
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t _unused_8:2;             /* Reserved */
    vuint32_t _unused_10:22;           /* Reserved */
  } B;
} PRAMC_PRCR1_tag;

struct PRAMC_tag {
  PRAMC_PRCR1_tag PRCR1;               /* Platform RAM Configuration register 1 */
};


/* ============================================================================
   =============================== Module: Peripheral_Debug_Freeze ============
   ============================================================================ */

typedef union Peripheral_Debug_Freeze_CORE0_DBGFRZ_CTRL_GPR_union_tag { /* Core 0 Debug Freeze Control */
  vuint32_t R;
  struct {
    vuint32_t EDMAf:1;                 /* eDMA Debug Freeze Status */
    vuint32_t FCCUf:1;                 /* FCCU Debug Freeze Status */
    vuint32_t LCU0:1;                  /* LCU 0 Debug Freeze Status */
    vuint32_t LCU1:1;                  /* LCU 1 Debug Freeze Status */
    vuint32_t EMIOS0:1;                /* eMIOS 0 Debug Freeze Status */
    vuint32_t EMIOS1:1;                /* eMIOS 1 Debug Freeze Status */
    vuint32_t EMIOS2:1;                /* eMIOS 2 Debug Freeze Status */
    vuint32_t RTCf:1;                  /* RTC Debug Freeze Status */
    vuint32_t SWT0:1;                  /* SWT 0 Debug Freeze Status */
    vuint32_t SWT1:1;                  /* SWT 1 Debug Freeze Status */
    vuint32_t STM0:1;                  /* STM 0 Debug Freeze Status */
    vuint32_t STM1:1;                  /* STM 1 Debug Freeze Status */
    vuint32_t PIT0:1;                  /* PIT 0 Debug Freeze Status */
    vuint32_t PIT1:1;                  /* PIT 1 Debug Freeze Status */
    vuint32_t PIT2:1;                  /* PIT 2 Debug Freeze Status */
    vuint32_t LPSPI0:1;                /* LPSPI 0 Debug Freeze Status */
    vuint32_t LPSPI1:1;                /* LPSPI 1 Debug Freeze Status */
    vuint32_t LPSPI2:1;                /* LPSPI 2 Debug Freeze Status */
    vuint32_t LPSPI3:1;                /* LPSPI 3 Debug Freeze Status */
    vuint32_t LPSPI4:1;                /* LPSPI 4 Debug Freeze Status */
    vuint32_t LPSPI5:1;                /* LPSPI 5 Debug Freeze Status */
    vuint32_t LPI2C0:1;                /* LPI2C 0 Debug Freeze Status */
    vuint32_t LPI2C1:1;                /* LPI2C 1 Debug Freeze Status */
    vuint32_t FLEXIOf:1;               /* FlexIO Debug Freeze Status */
    vuint32_t FLEXCAN0:1;              /* FlexCAN 0 Debug Freeze Status */
    vuint32_t FLEXCAN1:1;              /* FlexCAN 1 Debug Freeze Status */
    vuint32_t FLEXCAN2:1;              /* FlexCAN 2 Debug Freeze Status */
    vuint32_t FLEXCAN3:1;              /* FlexCAN 3 Debug Freeze Status */
    vuint32_t FLEXCAN4:1;              /* FlexCAN 4 Debug Freeze Status */
    vuint32_t FLEXCAN5:1;              /* FlexCAN 5 Debug Freeze Status */
    vuint32_t SAI0:1;                  /* SAI 0 Debug Freeze Status */
    vuint32_t SAI1:1;                  /* SAI 1 Debug Freeze Status */
  } B;
} Peripheral_Debug_Freeze_CORE0_DBGFRZ_CTRL_GPR_tag;

typedef union Peripheral_Debug_Freeze_CORE1_DBGFRZ_CTRL_GPR_union_tag { /* Core 1 Debug Freeze Control */
  vuint32_t R;
  struct {
    vuint32_t EDMAf:1;                 /* eDMA Debug Freeze Status */
    vuint32_t FCCUf:1;                 /* FCCU Debug Freeze Status */
    vuint32_t LCU0:1;                  /* LCU 0 Debug Freeze Status */
    vuint32_t LCU1:1;                  /* LCU 1 Debug Freeze Status */
    vuint32_t EMIOS0:1;                /* eMIOS 0 Debug Freeze Status */
    vuint32_t EMIOS1:1;                /* eMIOS 1 Debug Freeze Status */
    vuint32_t EMIOS2:1;                /* eMIOS 2 Debug Freeze Status */
    vuint32_t RTCf:1;                  /* RTC Debug Freeze Status */
    vuint32_t SWT0:1;                  /* SWT 0 Debug Freeze Status */
    vuint32_t SWT1:1;                  /* SWT 1 Debug Freeze Status */
    vuint32_t STM0:1;                  /* STM 0 Debug Freeze Status */
    vuint32_t STM1:1;                  /* STM 1 Debug Freeze Status */
    vuint32_t PIT0:1;                  /* PIT 0 Debug Freeze Status */
    vuint32_t PIT1:1;                  /* PIT 1 Debug Freeze Status */
    vuint32_t PIT2:1;                  /* PIT 2 Debug Freeze Status */
    vuint32_t LPSPI0:1;                /* LPSPI 0 Debug Freeze Status */
    vuint32_t LPSPI1:1;                /* LPSPI 1 Debug Freeze Status */
    vuint32_t LPSPI2:1;                /* LPSPI 2 Debug Freeze Status */
    vuint32_t LPSPI3:1;                /* LPSPI 3 Debug Freeze Status */
    vuint32_t LPSPI4:1;                /* LPSPI 4 Debug Freeze Status */
    vuint32_t LPSPI5:1;                /* LPSPI 5 Debug Freeze Status */
    vuint32_t LPI2C0:1;                /* LPI2C 0 Debug Freeze Status */
    vuint32_t LPI2C1:1;                /* LPI2C 1 Debug Freeze Status */
    vuint32_t FLEXIOf:1;               /* FlexIO Debug Freeze Status */
    vuint32_t FLEXCAN0:1;              /* FlexCAN 0 Debug Freeze Status */
    vuint32_t FLEXCAN1:1;              /* FlexCAN 1 Debug Freeze Status */
    vuint32_t FLEXCAN2:1;              /* FlexCAN 2 Debug Freeze Status */
    vuint32_t FLEXCAN3:1;              /* FlexCAN 3 Debug Freeze Status */
    vuint32_t FLEXCAN4:1;              /* FlexCAN 4 Debug Freeze Status */
    vuint32_t FLEXCAN5:1;              /* FlexCAN 5 Debug Freeze Status */
    vuint32_t SAI0:1;                  /* SAI 0 Debug Freeze Status */
    vuint32_t SAI1:1;                  /* SAI 1 Debug Freeze Status */
  } B;
} Peripheral_Debug_Freeze_CORE1_DBGFRZ_CTRL_GPR_tag;

struct Peripheral_Debug_Freeze_tag {
  uint8_t Peripheral_Debug_Freeze_reserved0[1300];
  Peripheral_Debug_Freeze_CORE0_DBGFRZ_CTRL_GPR_tag CORE0_DBGFRZ_CTRL_GPR; /* Core 0 Debug Freeze Control */
  uint8_t Peripheral_Debug_Freeze_reserved1[4];
  Peripheral_Debug_Freeze_CORE1_DBGFRZ_CTRL_GPR_tag CORE1_DBGFRZ_CTRL_GPR; /* Core 1 Debug Freeze Control */
};


/* ============================================================================
   =============================== Module: QuadSPI ============================
   ============================================================================ */

typedef union QuadSPI_MCR_union_tag {  /* Module Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t SWRSTSD:1;               /* Software reset for serial flash memory domain */
    vuint32_t SWRSTHD:1;               /* Software reset for AHB domain */
    vuint32_t _unused_2:2;
    vuint32_t _unused_4:1;
    vuint32_t _unused_5:1;
    vuint32_t _unused_6:1;
    vuint32_t _unused_7:1;
    vuint32_t _unused_8:1;
    vuint32_t _unused_9:1;
    vuint32_t CLR_RXF:1;               /* Clear RX FIFO */
    vuint32_t CLR_TXF:1;               /* Clear TX FIFO/buffer */
    vuint32_t _unused_12:1;
    vuint32_t _unused_13:1;
    vuint32_t MDIS:1;                  /* Module disable */
    vuint32_t _unused_15:1;
    vuint32_t _unused_16:4;            /* Reserved */
    vuint32_t _unused_20:3;
    vuint32_t _unused_23:1;
    vuint32_t DQS_FA_SEL:2;            /* DQS clock for sampling read data at flash memory A */
    vuint32_t _unused_26:1;
    vuint32_t _unused_27:1;
    vuint32_t _unused_28:2;
    vuint32_t _unused_30:1;
    vuint32_t _unused_31:1;
  } B;
} QuadSPI_MCR_tag;

typedef union QuadSPI_IPCR_union_tag { /* IP Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t IDATSZ:16;               /* IP data transfer size */
    vuint32_t _unused_16:1;
    vuint32_t _unused_17:7;
    vuint32_t SEQID:4;                 /* Points to a sequence in the LUT */
    vuint32_t _unused_28:4;
  } B;
} QuadSPI_IPCR_tag;

typedef union QuadSPI_FLSHCR_union_tag { /* Flash Memory Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t TCSS:4;                  /* Serial flash memory CS setup time */
    vuint32_t _unused_4:4;
    vuint32_t TCSH:4;                  /* Serial flash memory CS hold time */
    vuint32_t _unused_12:4;
    vuint32_t _unused_16:2;
    vuint32_t _unused_18:14;
  } B;
} QuadSPI_FLSHCR_tag;

typedef union QuadSPI_BUF0CR_union_tag { /* Buffer 0 Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t MSTRID:4;                /* Master ID */
    vuint32_t _unused_4:4;
    vuint32_t ADATSZ:6;                /* AHB data transfer size */
    vuint32_t _unused_14:17;
    vuint32_t _unused_31:1;
  } B;
} QuadSPI_BUF0CR_tag;

typedef union QuadSPI_BUF1CR_union_tag { /* Buffer 1 Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t MSTRID:4;                /* Master ID */
    vuint32_t _unused_4:4;
    vuint32_t ADATSZ:6;                /* AHB data transfer size */
    vuint32_t _unused_14:18;
  } B;
} QuadSPI_BUF1CR_tag;

typedef union QuadSPI_BUF2CR_union_tag { /* Buffer 2 Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t MSTRID:4;                /* Master ID */
    vuint32_t _unused_4:4;
    vuint32_t ADATSZ:6;                /* AHB data transfer size */
    vuint32_t _unused_14:18;
  } B;
} QuadSPI_BUF2CR_tag;

typedef union QuadSPI_BUF3CR_union_tag { /* Buffer 3 Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t MSTRID:4;                /* Master ID */
    vuint32_t _unused_4:4;
    vuint32_t ADATSZ:6;                /* AHB data transfer size */
    vuint32_t _unused_14:17;
    vuint32_t ALLMST:1;                /* All master enable */
  } B;
} QuadSPI_BUF3CR_tag;

typedef union QuadSPI_BFGENCR_union_tag { /* Buffer Generic Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:12;
    vuint32_t SEQID:4;                 /* Points to a sequence in the LUT */
    vuint32_t _unused_16:1;
    vuint32_t _unused_17:15;
  } B;
} QuadSPI_BFGENCR_tag;

typedef union QuadSPI_SOCCR_union_tag { /* SOC Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t SOCCFG:32;               /* SOC configuration */
  } B;
} QuadSPI_SOCCR_tag;

typedef union QuadSPI_BUF0IND_union_tag { /* Buffer 0 Top Index Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:3;
    vuint32_t TPINDX0:6;               /* Top index of buffer 0 */
    vuint32_t _unused_9:23;
  } B;
} QuadSPI_BUF0IND_tag;

typedef union QuadSPI_BUF1IND_union_tag { /* Buffer 1 Top Index Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:3;
    vuint32_t TPINDX1:6;               /* Top index of buffer 1 */
    vuint32_t _unused_9:23;
  } B;
} QuadSPI_BUF1IND_tag;

typedef union QuadSPI_BUF2IND_union_tag { /* Buffer 2 Top Index Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:3;
    vuint32_t TPINDX2:6;               /* Top index of buffer 2 */
    vuint32_t _unused_9:23;
  } B;
} QuadSPI_BUF2IND_tag;

typedef union QuadSPI_DLLCRA_union_tag { /* DLL Flash Memory A Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t SLV_UPD:1;               /* Slave update */
    vuint32_t SLV_DLL_BYPASS:1;        /* Slave DLL bypass */
    vuint32_t SLV_EN:1;                /* Slave enable */
    vuint32_t _unused_3:1;
    vuint32_t _unused_4:1;
    vuint32_t SLV_DLY_FINE:3;          /* Fine adjustment delay elements */
    vuint32_t SLV_DLY_COARSE:4;        /* Delay elements in each delay tap */
    vuint32_t SLV_DLY_OFFSET:3;        /* T/16 offset delay elements in incoming DQS */
    vuint32_t _unused_15:1;
    vuint32_t SLV_FINE_OFFSET:4;       /* Fine offset delay elements in incoming DQS */
    vuint32_t _unused_20:4;
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:2;
    vuint32_t FREQEN:1;                /* Frequency enable */
    vuint32_t _unused_31:1;
  } B;
} QuadSPI_DLLCRA_tag;

typedef union QuadSPI_SFAR_union_tag { /* Serial Flash Memory Address Register */
  vuint32_t R;
  struct {
    vuint32_t SFADR:32;                /* Serial flash memory address */
  } B;
} QuadSPI_SFAR_tag;

typedef union QuadSPI_SMPR_union_tag { /* Sampling Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:3;
    vuint32_t _unused_3:2;
    vuint32_t FSPHS:1;                 /* Full-speed phase selection for SDR instructions */
    vuint32_t FSDLY:1;                 /* Full speed delay selection for SDR instructions */
    vuint32_t _unused_7:9;
    vuint32_t _unused_16:3;
    vuint32_t _unused_19:5;            /* Reserved */
    vuint32_t DLLFSMPFA:3;             /* Selects the nth tap provided by slave delay chain for flash memory A */
    vuint32_t _unused_27:1;            /* Reserved */
    vuint32_t _unused_28:3;
    vuint32_t _unused_31:1;
  } B;
} QuadSPI_SMPR_tag;

typedef union QuadSPI_RBSR_union_tag { /* RX Buffer Status Register */
  vuint32_t R;
  struct {
    vuint32_t RDBFL:8;                 /* RX buffer fill level */
    vuint32_t _unused_8:8;
    vuint32_t RDCTR:16;                /* Read counter */
  } B;
} QuadSPI_RBSR_tag;

typedef union QuadSPI_RBCT_union_tag { /* RX Buffer Control Register */
  vuint32_t R;
  struct {
    vuint32_t WMRK:7;                  /* RX buffer watermark */
    vuint32_t _unused_7:1;
    vuint32_t RXBRD:1;                 /* RX buffer readout */
    vuint32_t _unused_9:23;
  } B;
} QuadSPI_RBCT_tag;

typedef union QuadSPI_DLSR_FA_union_tag { /* Data Learning Status Flash Memory A Register */
  vuint32_t R;
  struct {
    vuint32_t NEG_EDGE:8;
    vuint32_t POS_EDGE:8;
    vuint32_t _unused_16:15;
    vuint32_t DLPFFA:1;                /* Data learning pattern fail */
  } B;
} QuadSPI_DLSR_FA_tag;

typedef union QuadSPI_TBSR_union_tag { /* TX Buffer Status Register */
  vuint32_t R;
  struct {
    vuint32_t TRBFL:6;                 /* TX buffer fill level */
    vuint32_t _unused_6:10;
    vuint32_t TRCTR:16;                /* Transmit counter */
  } B;
} QuadSPI_TBSR_tag;

typedef union QuadSPI_TBDR_union_tag { /* TX Buffer Data Register */
  vuint32_t R;
  struct {
    vuint32_t TXDATA:32;               /* TX data */
  } B;
} QuadSPI_TBDR_tag;

typedef union QuadSPI_TBCT_union_tag { /* TX Buffer Control Register */
  vuint32_t R;
  struct {
    vuint32_t WMRK:5;                  /* Watermark for TX buffer */
    vuint32_t _unused_5:3;
    vuint32_t _unused_8:24;
  } B;
} QuadSPI_TBCT_tag;

typedef union QuadSPI_SR_union_tag {   /* Status Register */
  vuint32_t R;
  struct {
    vuint32_t BUSY:1;                  /* Module busy */
    vuint32_t IP_ACC:1;                /* IP access */
    vuint32_t AHB_ACC:1;               /* AHB read access */
    vuint32_t _unused_3:1;
    vuint32_t _unused_4:1;
    vuint32_t _unused_5:1;
    vuint32_t AHBTRN:1;                /* AHB access transaction pending */
    vuint32_t AHB0NE:1;                /* AHB 0 buffer not empty */
    vuint32_t AHB1NE:1;                /* AHB 1 buffer not empty */
    vuint32_t AHB2NE:1;                /* AHB 2 buffer not empty */
    vuint32_t AHB3NE:1;                /* AHB 3 buffer not empty */
    vuint32_t AHB0FUL:1;               /* AHB 0 buffer full */
    vuint32_t AHB1FUL:1;               /* AHB 1 buffer full */
    vuint32_t AHB2FUL:1;               /* AHB 2 buffer full */
    vuint32_t AHB3FUL:1;               /* AHB 3 buffer full */
    vuint32_t _unused_15:1;
    vuint32_t RXWE:1;                  /* RX buffer watermark exceeded */
    vuint32_t _unused_17:2;
    vuint32_t RXFULL:1;                /* RX buffer full */
    vuint32_t _unused_20:3;
    vuint32_t RXDMA:1;                 /* RX buffer DMA */
    vuint32_t TXNE:1;                  /* TX buffer not empty */
    vuint32_t TXWA:1;                  /* TX buffer watermark available */
    vuint32_t TXDMA:1;                 /* TX DMA */
    vuint32_t TXFULL:1;                /* TX buffer full */
    vuint32_t _unused_28:1;
    vuint32_t _unused_29:3;
  } B;
} QuadSPI_SR_tag;

typedef union QuadSPI_FR_union_tag {   /* Flag Register */
  vuint32_t R;
  struct {
    vuint32_t TFF:1;                   /* IP command transaction finished flag */
    vuint32_t _unused_1:3;
    vuint32_t _unused_4:1;
    vuint32_t _unused_5:1;
    vuint32_t IPIEF:1;                 /* IP command trigger could not be executed error flag */
    vuint32_t IPAEF:1;                 /* IP command trigger during AHB access error flag */
    vuint32_t _unused_8:1;
    vuint32_t _unused_9:1;
    vuint32_t _unused_10:1;
    vuint32_t _unused_11:1;
    vuint32_t ABOF:1;                  /* AHB buffer overflow flag */
    vuint32_t AIBSEF:1;                /* AHB illegal burst size error flag */
    vuint32_t AITEF:1;                 /* AHB illegal transaction error flag */
    vuint32_t _unused_15:1;
    vuint32_t RBDF:1;                  /* RX buffer drain flag */
    vuint32_t RBOF:1;                  /* RX buffer overflow flag */
    vuint32_t _unused_18:2;
    vuint32_t _unused_20:1;
    vuint32_t _unused_21:2;
    vuint32_t ILLINE:1;                /* Illegal instruction error flag */
    vuint32_t _unused_24:1;
    vuint32_t _unused_25:1;
    vuint32_t TBUF:1;                  /* TX buffer underrun flag */
    vuint32_t TBFF:1;                  /* TX buffer fill flag */
    vuint32_t _unused_28:1;
    vuint32_t _unused_29:2;
    vuint32_t _unused_31:1;
  } B;
} QuadSPI_FR_tag;

typedef union QuadSPI_RSER_union_tag { /* Interrupt and DMA Request Select and Enable Register */
  vuint32_t R;
  struct {
    vuint32_t TFIE:1;                  /* Transaction finished interrupt enable flag */
    vuint32_t _unused_1:3;
    vuint32_t _unused_4:1;
    vuint32_t _unused_5:1;
    vuint32_t IPIEIE:1;                /* IP command trigger during IP access error interrupt enable flag */
    vuint32_t IPAEIE:1;                /* IP command trigger during AHB read access error interrupt enable flag */
    vuint32_t _unused_8:1;
    vuint32_t _unused_9:1;
    vuint32_t _unused_10:1;
    vuint32_t _unused_11:1;
    vuint32_t ABOIE:1;                 /* AHB buffer overflow interrupt enable flag */
    vuint32_t AIBSIE:1;                /* AHB illegal burst size interrupt enable flag */
    vuint32_t AITIE:1;                 /* AHB illegal transaction interrupt enable flag */
    vuint32_t _unused_15:1;
    vuint32_t RBDIE:1;                 /* RX buffer drain interrupt enable */
    vuint32_t RBOIE:1;                 /* RX buffer overflow interrupt enable */
    vuint32_t _unused_18:2;
    vuint32_t _unused_20:1;
    vuint32_t RBDDE:1;                 /* RX buffer drain DMA enable */
    vuint32_t _unused_22:1;
    vuint32_t ILLINIE:1;               /* Illegal instruction error interrupt enable */
    vuint32_t _unused_24:1;
    vuint32_t TBFDE:1;                 /* TX buffer fill DMA enable */
    vuint32_t TBUIE:1;                 /* TX buffer underrun interrupt enable flag */
    vuint32_t TBFIE:1;                 /* TX buffer fill interrupt enable flag */
    vuint32_t _unused_28:1;
    vuint32_t _unused_29:2;
    vuint32_t _unused_31:1;
  } B;
} QuadSPI_RSER_tag;

typedef union QuadSPI_SPTRCLR_union_tag { /* Sequence Pointer Clear Register */
  vuint32_t R;
  struct {
    vuint32_t BFPTRC:1;                /* Buffer pointer clear */
    vuint32_t _unused_1:7;
    vuint32_t IPPTRC:1;                /* IP pointer clear */
    vuint32_t _unused_9:7;
    vuint32_t _unused_16:2;
    vuint32_t _unused_18:2;
    vuint32_t _unused_20:4;
    vuint32_t _unused_24:2;
    vuint32_t _unused_26:6;
  } B;
} QuadSPI_SPTRCLR_tag;

typedef union QuadSPI_SFA1AD_union_tag { /* Serial Flash Memory A1 Top Address Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:10;
    vuint32_t TPADA1:22;               /* Top address for serial flash memory A1 */
  } B;
} QuadSPI_SFA1AD_tag;

typedef union QuadSPI_SFA2AD_union_tag { /* Serial Flash Memory A2 Top Address Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:10;
    vuint32_t TPADA2:22;               /* Top address for serial flash memory A2 */
  } B;
} QuadSPI_SFA2AD_tag;

typedef union QuadSPI_SFB1AD_union_tag { /* Serial Flash Memory B1 Top Address Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:10;
    vuint32_t TPADB1:22;               /* Top address for serial flash memory B1. */
  } B;
} QuadSPI_SFB1AD_tag;

typedef union QuadSPI_SFB2AD_union_tag { /* Serial Flash Memory B2 Top Address Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:10;
    vuint32_t TPADB2:22;               /* Top address for serial flash memory B2. */
  } B;
} QuadSPI_SFB2AD_tag;

typedef union QuadSPI_RBDR_union_tag { /* RX Buffer Data Register */
  vuint32_t R;
  struct {
    vuint32_t RXDATA:32;               /* RX data */
  } B;
} QuadSPI_RBDR_tag;

typedef union QuadSPI_LUTKEY_union_tag { /* LUT Key Register */
  vuint32_t R;
  struct {
    vuint32_t KEY:32;                  /* Key to lock or unlock the LUT */
  } B;
} QuadSPI_LUTKEY_tag;

typedef union QuadSPI_LCKCR_union_tag { /* LUT Lock Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t LOCK:1;                  /* Lock LUT */
    vuint32_t UNLOCK:1;                /* Unlock LUT */
    vuint32_t _unused_2:30;
  } B;
} QuadSPI_LCKCR_tag;

typedef union QuadSPI_LUT_union_tag {  /* LUT Register */
  vuint32_t R;
  struct {
    vuint32_t OPRND0:8;                /* Operand for INSTR0 */
    vuint32_t PAD0:2;                  /* Pad information for INSTR0 */
    vuint32_t INSTR0:6;                /* Instruction 0 */
    vuint32_t OPRND1:8;                /* Operand for INSTR1 */
    vuint32_t PAD1:2;                  /* Pad information for INSTR1 */
    vuint32_t INSTR1:6;                /* Instruction 1 */
  } B;
} QuadSPI_LUT_tag;

struct QuadSPI_tag {
  QuadSPI_MCR_tag MCR;                 /* Module Configuration Register */
  uint8_t QuadSPI_reserved0[4];
  QuadSPI_IPCR_tag IPCR;               /* IP Configuration Register */
  QuadSPI_FLSHCR_tag FLSHCR;           /* Flash Memory Configuration Register */
  QuadSPI_BUF0CR_tag BUF0CR;           /* Buffer 0 Configuration Register */
  QuadSPI_BUF1CR_tag BUF1CR;           /* Buffer 1 Configuration Register */
  QuadSPI_BUF2CR_tag BUF2CR;           /* Buffer 2 Configuration Register */
  QuadSPI_BUF3CR_tag BUF3CR;           /* Buffer 3 Configuration Register */
  QuadSPI_BFGENCR_tag BFGENCR;         /* Buffer Generic Configuration Register */
  QuadSPI_SOCCR_tag SOCCR;             /* SOC Configuration Register */
  uint8_t QuadSPI_reserved1[8];
  QuadSPI_BUF0IND_tag BUF0IND;         /* Buffer 0 Top Index Register */
  QuadSPI_BUF1IND_tag BUF1IND;         /* Buffer 1 Top Index Register */
  QuadSPI_BUF2IND_tag BUF2IND;         /* Buffer 2 Top Index Register */
  uint8_t QuadSPI_reserved2[36];
  QuadSPI_DLLCRA_tag DLLCRA;           /* DLL Flash Memory A Configuration Register */
  uint8_t QuadSPI_reserved3[156];
  QuadSPI_SFAR_tag SFAR;               /* Serial Flash Memory Address Register */
  uint8_t QuadSPI_reserved4[4];
  QuadSPI_SMPR_tag SMPR;               /* Sampling Register */
  QuadSPI_RBSR_tag RBSR;               /* RX Buffer Status Register */
  QuadSPI_RBCT_tag RBCT;               /* RX Buffer Control Register */
  uint8_t QuadSPI_reserved5[32];
  QuadSPI_DLSR_FA_tag DLSR_FA;         /* Data Learning Status Flash Memory A Register */
  uint8_t QuadSPI_reserved6[24];
  QuadSPI_TBSR_tag TBSR;               /* TX Buffer Status Register */
  QuadSPI_TBDR_tag TBDR;               /* TX Buffer Data Register */
  QuadSPI_TBCT_tag TBCT;               /* TX Buffer Control Register */
  QuadSPI_SR_tag SR;                   /* Status Register */
  QuadSPI_FR_tag FR;                   /* Flag Register */
  QuadSPI_RSER_tag RSER;               /* Interrupt and DMA Request Select and Enable Register */
  uint8_t QuadSPI_reserved7[4];
  QuadSPI_SPTRCLR_tag SPTRCLR;         /* Sequence Pointer Clear Register */
  uint8_t QuadSPI_reserved8[16];
  QuadSPI_SFA1AD_tag SFA1AD;           /* Serial Flash Memory A1 Top Address Register */
  QuadSPI_SFA2AD_tag SFA2AD;           /* Serial Flash Memory A2 Top Address Register */
  QuadSPI_SFB1AD_tag SFB1AD;           /* Serial Flash Memory B1 Top Address Register */
  QuadSPI_SFB2AD_tag SFB2AD;           /* Serial Flash Memory B2 Top Address Register */
  uint8_t QuadSPI_reserved9[112];
  QuadSPI_RBDR_tag RBDR[64];           /* RX Buffer Data Register */
  QuadSPI_LUTKEY_tag LUTKEY;           /* LUT Key Register */
  QuadSPI_LCKCR_tag LCKCR;             /* LUT Lock Configuration Register */
  uint8_t QuadSPI_reserved10[8];
  QuadSPI_LUT_tag LUT[20];             /* LUT Register */
};


/* ============================================================================
   =============================== Module: QuadSPI_ARDB =======================
   ============================================================================ */

typedef union QuadSPI_ARDB_ARDB_union_tag { /* AHB RX Data Buffer Register */
  vuint32_t R;
  struct {
    vuint32_t ARXD:32;                 /* ARDB provided RX buffer data */
  } B;
} QuadSPI_ARDB_ARDB_tag;

struct QuadSPI_ARDB_tag {
  QuadSPI_ARDB_ARDB_tag ARDB[128];     /* AHB RX Data Buffer Register */
};


/* ============================================================================
   =============================== Module: RTC ================================
   ============================================================================ */

typedef union RTC_RTCSUPV_union_tag {  /* RTC Supervisor control register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;            /* Reserved */
    vuint32_t SUPV:1;                  /* RTC Supervisor Bit. */
  } B;
} RTC_RTCSUPV_tag;

typedef union RTC_RTCC_union_tag {     /* RTC Control register */
  vuint32_t R;
  struct {
    vuint32_t TRIG_EN:1;               /* Trigger enable for Analog Comparator */
    vuint32_t _unused_1:9;             /* Reserved. */
    vuint32_t DIV32EN:1;               /* Divide by 32 enable. */
    vuint32_t DIV512EN:1;              /* Divide by 512 enable */
    vuint32_t CLKSEL:2;                /* Clock select */
    vuint32_t APIIE:1;                 /* API Interrupt Enable. */
    vuint32_t APIEN:1;                 /* Autonomous Periodic Interrupt Enable. */
    vuint32_t _unused_16:12;           /* Reserved. */
    vuint32_t ROVREN:1;                /* Counter Roll Over wakeup/Interrupt Enable. */
    vuint32_t FRZEN:1;                 /* Freeze Enable Bit */
    vuint32_t RTCIE:1;                 /* RTC Interrupt Enable. */
    vuint32_t CNTEN:1;                 /* Counter Enable */
  } B;
} RTC_RTCC_tag;

typedef union RTC_RTCS_union_tag {     /* RTC Status register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:10;            /* Reserved */
    vuint32_t ROVRF:1;                 /* Counter Roll Over Interrupt Flag. */
    vuint32_t _unused_11:2;            /* Reserved */
    vuint32_t APIF:1;                  /* API Interrupt Flag. */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t INV_API:1;               /* Invalid APIVAL write */
    vuint32_t INV_RTC:1;               /* Invalid RTC write */
    vuint32_t _unused_19:10;           /* Reserved */
    vuint32_t RTCF:1;                  /* RTC Interrupt Flag */
    vuint32_t _unused_30:2;            /* Reserved */
  } B;
} RTC_RTCS_tag;

typedef union RTC_RTCCNT_union_tag {   /* RTC Counter register */
  vuint32_t R;
  struct {
    vuint32_t RTCCNT:32;               /* RTC Counter Value */
  } B;
} RTC_RTCCNT_tag;

typedef union RTC_APIVAL_union_tag {   /* API Compare value register */
  vuint32_t R;
  struct {
    vuint32_t APIVAL:32;               /* API Compare Value. */
  } B;
} RTC_APIVAL_tag;

typedef union RTC_RTCVAL_union_tag {   /* RTC Compare value register */
  vuint32_t R;
  struct {
    vuint32_t RTCVAL:32;               /* RTC Compare Value. */
  } B;
} RTC_RTCVAL_tag;

struct RTC_tag {
  RTC_RTCSUPV_tag RTCSUPV;             /* RTC Supervisor control register */
  RTC_RTCC_tag RTCC;                   /* RTC Control register */
  RTC_RTCS_tag RTCS;                   /* RTC Status register */
  RTC_RTCCNT_tag RTCCNT;               /* RTC Counter register */
  RTC_APIVAL_tag APIVAL;               /* API Compare value register */
  RTC_RTCVAL_tag RTCVAL;               /* RTC Compare value register */
};


/* ============================================================================
   =============================== Module: SAI ================================
   ============================================================================ */

typedef union SAI_VERID_union_tag {    /* Version ID Register */
  vuint32_t R;
  struct {
    vuint32_t FEATURE:16;              /* Feature Specification Number */
    vuint32_t MINOR:8;                 /* Minor Version Number */
    vuint32_t MAJOR:8;                 /* Major Version Number */
  } B;
} SAI_VERID_tag;

typedef union SAI_PARAM_union_tag {    /* Parameter Register */
  vuint32_t R;
  struct {
    vuint32_t DATALINE:4;              /* Number of Datalines */
    vuint32_t _unused_4:4;             /* Reserved */
    vuint32_t FIFO:4;                  /* FIFO Size */
    vuint32_t _unused_12:4;            /* Reserved */
    vuint32_t FRAME:4;                 /* Frame Size */
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} SAI_PARAM_tag;

typedef union SAI_TCSR_union_tag {     /* SAI Transmit Control Register */
  vuint32_t R;
  struct {
    vuint32_t FRDE:1;                  /* FIFO Request DMA Enable */
    vuint32_t FWDE:1;                  /* FIFO Warning DMA Enable */
    vuint32_t _unused_2:3;             /* Reserved */
    vuint32_t _unused_5:3;             /* Reserved */
    vuint32_t FRIE:1;                  /* FIFO Request Interrupt Enable */
    vuint32_t FWIE:1;                  /* FIFO Warning Interrupt Enable */
    vuint32_t FEIE:1;                  /* FIFO Error Interrupt Enable */
    vuint32_t SEIE:1;                  /* Sync Error Interrupt Enable */
    vuint32_t WSIE:1;                  /* Word Start Interrupt Enable */
    vuint32_t _unused_13:3;            /* Reserved */
    vuint32_t FRF:1;                   /* FIFO Request Flag */
    vuint32_t FWF:1;                   /* FIFO Warning Flag */
    vuint32_t FEF:1;                   /* FIFO Error Flag */
    vuint32_t SEF:1;                   /* Sync Error Flag */
    vuint32_t WSF:1;                   /* Word Start Flag */
    vuint32_t _unused_21:3;            /* Reserved */
    vuint32_t SR:1;                    /* Software Reset */
    vuint32_t FR:1;                    /* FIFO Reset */
    vuint32_t _unused_26:2;            /* Reserved */
    vuint32_t BCE:1;                   /* Bit Clock Enable */
    vuint32_t DBGE:1;                  /* Debug Enable */
    vuint32_t _unused_30:1;            /* Reserved. Software should only write zero to this reserved bit. */
    vuint32_t TE:1;                    /* Transmitter Enable */
  } B;
} SAI_TCSR_tag;

typedef union SAI_TCR1_union_tag {     /* SAI Transmit Configuration 1 Register */
  vuint32_t R;
  struct {
    vuint32_t TFW:3;                   /* Transmit FIFO Watermark */
    vuint32_t _unused_3:29;            /* Reserved */
  } B;
} SAI_TCR1_tag;

typedef union SAI_TCR2_union_tag {     /* SAI Transmit Configuration 2 Register */
  vuint32_t R;
  struct {
    vuint32_t DIV:8;                   /* Bit Clock Divide */
    vuint32_t _unused_8:15;            /* Reserved */
    vuint32_t BYP:1;                   /* Bit Clock Bypass */
    vuint32_t BCD:1;                   /* Bit Clock Direction */
    vuint32_t BCP:1;                   /* Bit Clock Polarity */
    vuint32_t MSEL:2;                  /* MCLK Select */
    vuint32_t BCI:1;                   /* Bit Clock Input */
    vuint32_t BCS:1;                   /* Bit Clock Swap */
    vuint32_t SYNC:1;                  /* Synchronous Mode */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} SAI_TCR2_tag;

typedef union SAI_TCR3_union_tag {     /* SAI Transmit Configuration 3 Register */
  vuint32_t R;
  struct {
    vuint32_t WDFL:4;                  /* Word Flag Configuration */
    vuint32_t _unused_4:12;            /* Reserved */
    vuint32_t TCE:4;                   /* Transmit Channel Enable, merged from more bitFields with different positions or sizes */
    vuint32_t _unused_20:4;            /* Reserved */
    vuint32_t CFR:4;                   /* Channel FIFO Reset */
    vuint32_t _unused_28:4;            /* Reserved */
  } B;
} SAI_TCR3_tag;

typedef union SAI_TCR4_union_tag {     /* SAI Transmit Configuration 4 Register */
  vuint32_t R;
  struct {
    vuint32_t FSD:1;                   /* Frame Sync Direction */
    vuint32_t FSP:1;                   /* Frame Sync Polarity */
    vuint32_t ONDEM:1;                 /* On Demand Mode */
    vuint32_t FSE:1;                   /* Frame Sync Early */
    vuint32_t MF:1;                    /* MSB First */
    vuint32_t CHMOD:1;                 /* Channel Mode */
    vuint32_t _unused_6:2;             /* Reserved */
    vuint32_t SYWD:5;                  /* Sync Width */
    vuint32_t _unused_13:3;            /* Reserved */
    vuint32_t FRSZ:4;                  /* Frame size */
    vuint32_t _unused_20:4;            /* Reserved */
    vuint32_t FPACK:2;                 /* FIFO Packing Mode */
    vuint32_t FCOMB:2;                 /* FIFO Combine Mode */
    vuint32_t FCONT:1;                 /* FIFO Continue on Error */
    vuint32_t _unused_29:3;            /* Reserved */
  } B;
} SAI_TCR4_tag;

typedef union SAI_TCR5_union_tag {     /* SAI Transmit Configuration 5 Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:8;             /* Reserved */
    vuint32_t FBT:5;                   /* First Bit Shifted */
    vuint32_t _unused_13:3;            /* Reserved */
    vuint32_t W0W:5;                   /* Word 0 Width */
    vuint32_t _unused_21:3;            /* Reserved */
    vuint32_t WNW:5;                   /* Word N Width */
    vuint32_t _unused_29:3;            /* Reserved */
  } B;
} SAI_TCR5_tag;

typedef union SAI_TDR_union_tag {      /* SAI Transmit Data Register */
  vuint32_t R;
  struct {
    vuint32_t TDR:32;                  /* Transmit Data Register */
  } B;
} SAI_TDR_tag;

typedef union SAI_TFR_union_tag {      /* SAI Transmit FIFO Register */
  vuint32_t R;
  struct {
    vuint32_t RFP:4;                   /* Read FIFO Pointer */
    vuint32_t _unused_4:12;            /* Reserved */
    vuint32_t WFP:4;                   /* Write FIFO Pointer */
    vuint32_t _unused_20:11;           /* Reserved */
    vuint32_t WCP:1;                   /* Write Channel Pointer */
  } B;
} SAI_TFR_tag;

typedef union SAI_TMR_union_tag {      /* SAI Transmit Mask Register */
  vuint32_t R;
  struct {
    vuint32_t TWM:16;                  /* Transmit Word Mask */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} SAI_TMR_tag;

typedef union SAI_RCSR_union_tag {     /* SAI Receive Control Register */
  vuint32_t R;
  struct {
    vuint32_t FRDE:1;                  /* FIFO Request DMA Enable */
    vuint32_t FWDE:1;                  /* FIFO Warning DMA Enable */
    vuint32_t _unused_2:3;             /* Reserved */
    vuint32_t _unused_5:3;             /* Reserved */
    vuint32_t FRIE:1;                  /* FIFO Request Interrupt Enable */
    vuint32_t FWIE:1;                  /* FIFO Warning Interrupt Enable */
    vuint32_t FEIE:1;                  /* FIFO Error Interrupt Enable */
    vuint32_t SEIE:1;                  /* Sync Error Interrupt Enable */
    vuint32_t WSIE:1;                  /* Word Start Interrupt Enable */
    vuint32_t _unused_13:3;            /* Reserved */
    vuint32_t FRF:1;                   /* FIFO Request Flag */
    vuint32_t FWF:1;                   /* FIFO Warning Flag */
    vuint32_t FEF:1;                   /* FIFO Error Flag */
    vuint32_t SEF:1;                   /* Sync Error Flag */
    vuint32_t WSF:1;                   /* Word Start Flag */
    vuint32_t _unused_21:3;            /* Reserved */
    vuint32_t SR:1;                    /* Software Reset */
    vuint32_t FR:1;                    /* FIFO Reset */
    vuint32_t _unused_26:2;            /* Reserved */
    vuint32_t BCE:1;                   /* Bit Clock Enable */
    vuint32_t DBGE:1;                  /* Debug Enable */
    vuint32_t _unused_30:1;            /* Reserved. Software should only write zero to this reserved bit. */
    vuint32_t RE:1;                    /* Receiver Enable */
  } B;
} SAI_RCSR_tag;

typedef union SAI_RCR1_union_tag {     /* SAI Receive Configuration 1 Register */
  vuint32_t R;
  struct {
    vuint32_t RFW:3;                   /* Receive FIFO Watermark */
    vuint32_t _unused_3:29;            /* Reserved */
  } B;
} SAI_RCR1_tag;

typedef union SAI_RCR2_union_tag {     /* SAI Receive Configuration 2 Register */
  vuint32_t R;
  struct {
    vuint32_t DIV:8;                   /* Bit Clock Divide */
    vuint32_t _unused_8:15;            /* Reserved */
    vuint32_t BYP:1;                   /* Bit Clock Bypass */
    vuint32_t BCD:1;                   /* Bit Clock Direction */
    vuint32_t BCP:1;                   /* Bit Clock Polarity */
    vuint32_t MSEL:2;                  /* MCLK Select */
    vuint32_t BCI:1;                   /* Bit Clock Input */
    vuint32_t BCS:1;                   /* Bit Clock Swap */
    vuint32_t SYNC:1;                  /* Synchronous Mode */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} SAI_RCR2_tag;

typedef union SAI_RCR3_union_tag {     /* SAI Receive Configuration 3 Register */
  vuint32_t R;
  struct {
    vuint32_t WDFL:4;                  /* Word Flag Configuration */
    vuint32_t _unused_4:12;            /* Reserved */
    vuint32_t RCE:4;                   /* Receive Channel Enable, merged from more bitFields with different positions or sizes */
    vuint32_t _unused_20:4;            /* Reserved */
    vuint32_t CFR:4;                   /* Channel FIFO Reset */
    vuint32_t _unused_28:4;            /* Reserved */
  } B;
} SAI_RCR3_tag;

typedef union SAI_RCR4_union_tag {     /* SAI Receive Configuration 4 Register */
  vuint32_t R;
  struct {
    vuint32_t FSD:1;                   /* Frame Sync Direction */
    vuint32_t FSP:1;                   /* Frame Sync Polarity */
    vuint32_t ONDEM:1;                 /* On Demand Mode */
    vuint32_t FSE:1;                   /* Frame Sync Early */
    vuint32_t MF:1;                    /* MSB First */
    vuint32_t _unused_5:3;             /* Reserved. Software should only write zero to this bit. */
    vuint32_t SYWD:5;                  /* Sync Width */
    vuint32_t _unused_13:3;            /* Reserved */
    vuint32_t FRSZ:4;                  /* Frame Size */
    vuint32_t _unused_20:4;            /* Reserved */
    vuint32_t FPACK:2;                 /* FIFO Packing Mode */
    vuint32_t FCOMB:2;                 /* FIFO Combine Mode */
    vuint32_t FCONT:1;                 /* FIFO Continue on Error */
    vuint32_t _unused_29:3;            /* Reserved */
  } B;
} SAI_RCR4_tag;

typedef union SAI_RCR5_union_tag {     /* SAI Receive Configuration 5 Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:8;             /* Reserved */
    vuint32_t FBT:5;                   /* First Bit Shifted */
    vuint32_t _unused_13:3;            /* Reserved */
    vuint32_t W0W:5;                   /* Word 0 Width */
    vuint32_t _unused_21:3;            /* Reserved */
    vuint32_t WNW:5;                   /* Word N Width */
    vuint32_t _unused_29:3;            /* Reserved */
  } B;
} SAI_RCR5_tag;

typedef union SAI_RDR_union_tag {      /* SAI Receive Data Register */
  vuint32_t R;
  struct {
    vuint32_t RDR:32;                  /* Receive Data Register */
  } B;
} SAI_RDR_tag;

typedef union SAI_RFR_union_tag {      /* SAI Receive FIFO Register */
  vuint32_t R;
  struct {
    vuint32_t RFP:4;                   /* Read FIFO Pointer */
    vuint32_t _unused_4:11;            /* Reserved */
    vuint32_t RCP:1;                   /* Receive Channel Pointer */
    vuint32_t WFP:4;                   /* Write FIFO Pointer */
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} SAI_RFR_tag;

typedef union SAI_RMR_union_tag {      /* SAI Receive Mask Register */
  vuint32_t R;
  struct {
    vuint32_t RWM:16;                  /* Receive Word Mask */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} SAI_RMR_tag;

struct SAI_tag {
  SAI_VERID_tag VERID;                 /* Version ID Register */
  SAI_PARAM_tag PARAM;                 /* Parameter Register */
  SAI_TCSR_tag TCSR;                   /* SAI Transmit Control Register */
  SAI_TCR1_tag TCR1;                   /* SAI Transmit Configuration 1 Register */
  SAI_TCR2_tag TCR2;                   /* SAI Transmit Configuration 2 Register */
  SAI_TCR3_tag TCR3;                   /* SAI Transmit Configuration 3 Register */
  SAI_TCR4_tag TCR4;                   /* SAI Transmit Configuration 4 Register */
  SAI_TCR5_tag TCR5;                   /* SAI Transmit Configuration 5 Register */
  SAI_TDR_tag TDR[4];                  /* SAI Transmit Data Register */
  uint8_t SAI_reserved0[16];
  SAI_TFR_tag TFR[4];                  /* SAI Transmit FIFO Register */
  uint8_t SAI_reserved1[16];
  SAI_TMR_tag TMR;                     /* SAI Transmit Mask Register */
  uint8_t SAI_reserved2[36];
  SAI_RCSR_tag RCSR;                   /* SAI Receive Control Register */
  SAI_RCR1_tag RCR1;                   /* SAI Receive Configuration 1 Register */
  SAI_RCR2_tag RCR2;                   /* SAI Receive Configuration 2 Register */
  SAI_RCR3_tag RCR3;                   /* SAI Receive Configuration 3 Register */
  SAI_RCR4_tag RCR4;                   /* SAI Receive Configuration 4 Register */
  SAI_RCR5_tag RCR5;                   /* SAI Receive Configuration 5 Register */
  SAI_RDR_tag RDR[4];                  /* SAI Receive Data Register */
  uint8_t SAI_reserved3[16];
  SAI_RFR_tag RFR[4];                  /* SAI Receive FIFO Register */
  uint8_t SAI_reserved4[16];
  SAI_RMR_tag RMR;                     /* SAI Receive Mask Register */
};


/* ============================================================================
   =============================== Module: SDA_AP =============================
   ============================================================================ */

typedef union SDA_AP_AUTHSTTS_union_tag { /* Authentication Status */
  vuint32_t R;
  struct {
    vuint32_t CHALRDY:1;               /* Challenge Ready */
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t UIDSTATUS:1;             /* User Identification Status */
    vuint32_t SWAPPDBG:1;              /* Software Application Debug */
    vuint32_t _unused_4:26;            /* Reserved */
    vuint32_t APPDBGEN:1;              /* Application Debug Enabled or Disabled */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} SDA_AP_AUTHSTTS_tag;

typedef union SDA_AP_AUTHCTL_union_tag { /* Authentication Control */
  vuint32_t R;
  struct {
    vuint32_t HSEAUTHREQ:1;            /* Cortex-M0+ Authentication Request */
    vuint32_t HSENEWDATACTL:1;         /* Cortex-M0+ New Data Control */
    vuint32_t _unused_2:30;            /* Reserved */
  } B;
} SDA_AP_AUTHCTL_tag;

typedef union SDA_AP_KEYCHAL_union_tag { /* Key Challenge */
  vuint32_t R;
  struct {
    vuint32_t KEYCHAL:32;              /* Cortex-M0+ Key Challenge */
  } B;
} SDA_AP_KEYCHAL_tag;

typedef union SDA_AP_KEYRESP_union_tag { /* Key Response */
  vuint32_t R;
  struct {
    vuint32_t KEYRESP:32;              /* Cortex-M0+ Key Response */
  } B;
} SDA_AP_KEYRESP_tag;

typedef union SDA_AP_UID0_union_tag {  /* User Identification 0 */
  vuint32_t R;
  struct {
    vuint32_t UID0:32;                 /* User ID 0 */
  } B;
} SDA_AP_UID0_tag;

typedef union SDA_AP_UID1_union_tag {  /* User Identification 1 */
  vuint32_t R;
  struct {
    vuint32_t UID1:32;                 /* User ID 1 */
  } B;
} SDA_AP_UID1_tag;

typedef union SDA_AP_DBGENCTRL_union_tag { /* Debug Enable Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:4;             /* Reserved */
    vuint32_t GDBGEN:1;                /* Global Debug Enable */
    vuint32_t GNIDEN:1;                /* Global Non-Invasive Debug Enable */
    vuint32_t GSPIDEN:1;               /* Global Secure Privileged Debug Enable */
    vuint32_t GSPNIDEN:1;              /* Global Secure Privileged Non-Invasive Debug Enable */
    vuint32_t _unused_8:20;            /* Reserved */
    vuint32_t CDBGEN:1;                /* Core Debug Enable */
    vuint32_t CNIDEN:1;                /* Core Non-Invasive Debug Enable */
    vuint32_t _unused_30:2;            /* Reserved */
  } B;
} SDA_AP_DBGENCTRL_tag;

typedef union SDA_AP_SDAAPRSTCTRL_union_tag { /* Reset Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:25;            /* Reserved */
    vuint32_t RSTRELTLCM70:1;          /* Reset Release Cortex-M7_0 */
    vuint32_t RSTRELTLCM71:1;          /* Reset Release Cortex-M7_1 */
    vuint32_t _unused_27:5;            /* Reserved */
  } B;
} SDA_AP_SDAAPRSTCTRL_tag;

typedef union SDA_AP_SDAAPGENSTATUS0_union_tag { /* SDA_AP Generic Status */
  vuint32_t R;
  struct {
    vuint32_t SDAAPGENSTATUS:32;       /* DAP Generic Status */
  } B;
} SDA_AP_SDAAPGENSTATUS0_tag;

typedef union SDA_AP_SDAAPGENCTRL0_union_tag { /* Generic Control 0 */
  vuint32_t R;
  struct {
    vuint32_t JTAG_CR_EN:1;            /* JTAG CR Enable */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} SDA_AP_SDAAPGENCTRL0_tag;

typedef union SDA_AP_SDAAPGENSTATUS1_union_tag { /* SDA_AP Generic Status */
  vuint32_t R;
  struct {
    vuint32_t SDAAPGENSTATUS:32;       /* DAP Generic Status */
  } B;
} SDA_AP_SDAAPGENSTATUS1_tag;

typedef union SDA_AP_SDAAPGENSTATUS2_union_tag { /* SDA_AP Generic Status */
  vuint32_t R;
  struct {
    vuint32_t SDAAPGENSTATUS:32;       /* DAP Generic Status */
  } B;
} SDA_AP_SDAAPGENSTATUS2_tag;

typedef union SDA_AP_SDAAPGENSTATUS3_union_tag { /* SDA_AP Generic Status */
  vuint32_t R;
  struct {
    vuint32_t SDAAPGENSTATUS:32;       /* DAP Generic Status */
  } B;
} SDA_AP_SDAAPGENSTATUS3_tag;

typedef union SDA_AP_SDAAPGENSTATUS4_union_tag { /* SDA_AP Generic Status */
  vuint32_t R;
  struct {
    vuint32_t SDAAPGENSTATUS:32;       /* DAP Generic Status */
  } B;
} SDA_AP_SDAAPGENSTATUS4_tag;

typedef union SDA_AP_ID_union_tag {    /* Identity */
  vuint32_t R;
  struct {
    vuint32_t ID:32;                   /* Identity */
  } B;
} SDA_AP_ID_tag;

struct SDA_AP_tag {
  SDA_AP_AUTHSTTS_tag AUTHSTTS;        /* Authentication Status */
  SDA_AP_AUTHCTL_tag AUTHCTL;          /* Authentication Control */
  uint8_t SDA_AP_reserved0[8];
  SDA_AP_KEYCHAL_tag KEYCHAL[8];       /* Key Challenge */
  uint8_t SDA_AP_reserved1[16];
  SDA_AP_KEYRESP_tag KEYRESP[8];       /* Key Response */
  uint8_t SDA_AP_reserved2[16];
  SDA_AP_UID0_tag UID0;                /* User Identification 0 */
  SDA_AP_UID1_tag UID1;                /* User Identification 1 */
  uint8_t SDA_AP_reserved3[8];
  SDA_AP_DBGENCTRL_tag DBGENCTRL;      /* Debug Enable Control */
  uint8_t SDA_AP_reserved4[12];
  SDA_AP_SDAAPRSTCTRL_tag SDAAPRSTCTRL; /* Reset Control */
  uint8_t SDA_AP_reserved5[12];
  SDA_AP_SDAAPGENSTATUS0_tag SDAAPGENSTATUS0; /* SDA_AP Generic Status */
  SDA_AP_SDAAPGENCTRL0_tag SDAAPGENCTRL0; /* Generic Control 0 */
  uint8_t SDA_AP_reserved6[8];
  SDA_AP_SDAAPGENSTATUS1_tag SDAAPGENSTATUS1; /* SDA_AP Generic Status */
  uint8_t SDA_AP_reserved7[12];
  SDA_AP_SDAAPGENSTATUS2_tag SDAAPGENSTATUS2; /* SDA_AP Generic Status */
  uint8_t SDA_AP_reserved8[12];
  SDA_AP_SDAAPGENSTATUS3_tag SDAAPGENSTATUS3; /* SDA_AP Generic Status */
  uint8_t SDA_AP_reserved9[12];
  SDA_AP_SDAAPGENSTATUS4_tag SDAAPGENSTATUS4; /* SDA_AP Generic Status */
  uint8_t SDA_AP_reserved10[24];
  SDA_AP_ID_tag ID;                    /* Identity */
};


/* ============================================================================
   =============================== Module: SELFTEST_GPR =======================
   ============================================================================ */

typedef union SELFTEST_GPR_CONFIG_REG_union_tag { /* Configuration register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:4;             /* Reserved */
    vuint32_t PCS_STEP_SIZE:3;         /* PCS Step Size */
    vuint32_t PCS_ENABLE_START:1;      /* PCS Enable Start */
    vuint32_t PCS_ENABLE_END:1;        /* PCS Enable End */
    vuint32_t _unused_9:7;             /* Reserved */
    vuint32_t _unused_16:1;            /* Reserved */
    vuint32_t _unused_17:14;           /* Reserved */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} SELFTEST_GPR_CONFIG_REG_tag;

typedef union SELFTEST_GPR_LBIST_PROG_REG_union_tag { /* LBIST Program */
  vuint32_t R;
  struct {
    vuint32_t LBIST_SHIFT_COUNT:8;     /* LBIST Shift Count */
    vuint32_t _unused_8:24;
  } B;
} SELFTEST_GPR_LBIST_PROG_REG_tag;

struct SELFTEST_GPR_tag {
  SELFTEST_GPR_CONFIG_REG_tag CONFIG_REG; /* Configuration register */
  uint8_t SELFTEST_GPR_reserved0[16];
  SELFTEST_GPR_LBIST_PROG_REG_tag LBIST_PROG_REG; /* LBIST Program */
};


/* ============================================================================
   =============================== Module: SEMA42 =============================
   ============================================================================ */

typedef union SEMA42_GATE_union_tag {  /* Gate Register */
  vuint8_t R;
  struct {
    vuint8_t GTFSM:4;                  /* Gate finite state machine */
    vuint8_t _unused_4:4;              /* Reserved */
  } B;
} SEMA42_GATE_tag;

typedef union SEMA42_RSTGT_R_union_tag { /* Reset Gate Read */
  vuint16_t R;
  struct {
    vuint16_t RSTGTN:8;                /* Reset gate number */
    vuint16_t RSTGMS:4;                /* Reset gate domain */
    vuint16_t RSTGSM:2;                /* Reset gate finite state machine */
    vuint16_t ROZ:2;                   /* ROZ */
  } B;
} SEMA42_RSTGT_R_tag;

typedef union SEMA42_RSTGT_W_union_tag { /* Reset Gate Write */
  vuint16_t R;
  struct {
    vuint16_t RSTGTN:8;                /* Reset gate number */
    vuint16_t RSTGDP:8;                /* Reset gate data pattern */
  } B;
} SEMA42_RSTGT_W_tag;

typedef union SEMA42_RSTGT_union_tag {
  SEMA42_RSTGT_R_tag R;                /* Reset Gate Read */
  SEMA42_RSTGT_W_tag W;                /* Reset Gate Write */
} SEMA42_RSTGT_tag;

struct SEMA42_tag {
  SEMA42_GATE_tag GATE[16];            /* Gate Register */
  uint8_t SEMA42_reserved0[50];
  SEMA42_RSTGT_tag RSTGT;
};


/* ============================================================================
   =============================== Module: SIRC ===============================
   ============================================================================ */

typedef union SIRC_SR_union_tag {      /* Status Register */
  vuint32_t R;
  struct {
    vuint32_t STATUS:1;                /* Status bit for SIRC */
    vuint32_t _unused_1:31;
  } B;
} SIRC_SR_tag;

typedef union SIRC_MISCELLANEOUS_IN_union_tag { /* Miscellaneous input */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:4;
    vuint32_t _unused_4:4;
    vuint32_t STANDBY_ENABLE:1;        /* Standby Enable for SIRC */
    vuint32_t _unused_9:23;
  } B;
} SIRC_MISCELLANEOUS_IN_tag;

struct SIRC_tag {
  uint8_t SIRC_reserved0[4];
  SIRC_SR_tag SR;                      /* Status Register */
  uint8_t SIRC_reserved1[4];
  SIRC_MISCELLANEOUS_IN_tag MISCELLANEOUS_IN; /* Miscellaneous input */
};


/* ============================================================================
   =============================== Module: SIUL2 ==============================
   ============================================================================ */

typedef union SIUL2_MIDR1_union_tag {  /* SIUL2 MCU ID Register #1 */
  vuint32_t R;
  struct {
    vuint32_t MINOR_MASK:4;            /* Minor Mask Revision */
    vuint32_t MAJOR_MASK:4;            /* Major Mask Revision */
    vuint32_t CC_REVISION:8;           /* CC Revision */
    vuint32_t PART_NO:10;              /* MCU Part Number */
    vuint32_t PRODUCT_LINE_LETTER:6;   /* Product Line Letter */
  } B;
} SIUL2_MIDR1_tag;

typedef union SIUL2_MIDR2_union_tag {  /* SIUL2 MCU ID Register #2 */
  vuint32_t R;
  struct {
    vuint32_t FLASH_SIZE_CODE:8;       /* Flash Size Code */
    vuint32_t FLASH_SIZE_DATA:4;       /* Flash Size Data */
    vuint32_t FLASH_DATA:2;            /* Flash Data */
    vuint32_t FLASH_CODE:2;            /* Flash Code */
    vuint32_t FREQUENCY:4;             /* Frequency */
    vuint32_t PACKAGE:6;               /* Package */
    vuint32_t TEMPERATURE:3;           /* Temperature */
    vuint32_t TECHNOLOGY:3;            /* Technology */
  } B;
} SIUL2_MIDR2_tag;

typedef union SIUL2_DISR0_union_tag {  /* SIUL2 DMA/Interrupt Status Flag Register0 */
  vuint32_t R;
  struct {
    vuint32_t EIF0:1;                  /* External Interrupt Status Flag 0 */
    vuint32_t EIF1:1;                  /* External Interrupt Status Flag 1 */
    vuint32_t EIF2:1;                  /* External Interrupt Status Flag 2 */
    vuint32_t EIF3:1;                  /* External Interrupt Status Flag 3 */
    vuint32_t EIF4:1;                  /* External Interrupt Status Flag 4 */
    vuint32_t EIF5:1;                  /* External Interrupt Status Flag 5 */
    vuint32_t EIF6:1;                  /* External Interrupt Status Flag 6 */
    vuint32_t EIF7:1;                  /* External Interrupt Status Flag 7 */
    vuint32_t EIF8:1;                  /* External Interrupt Status Flag 8 */
    vuint32_t EIF9:1;                  /* External Interrupt Status Flag 9 */
    vuint32_t EIF10:1;                 /* External Interrupt Status Flag 10 */
    vuint32_t EIF11:1;                 /* External Interrupt Status Flag 11 */
    vuint32_t EIF12:1;                 /* External Interrupt Status Flag 12 */
    vuint32_t EIF13:1;                 /* External Interrupt Status Flag 13 */
    vuint32_t EIF14:1;                 /* External Interrupt Status Flag 14 */
    vuint32_t EIF15:1;                 /* External Interrupt Status Flag 15 */
    vuint32_t EIF16:1;                 /* External Interrupt Status Flag 16 */
    vuint32_t EIF17:1;                 /* External Interrupt Status Flag 17 */
    vuint32_t EIF18:1;                 /* External Interrupt Status Flag 18 */
    vuint32_t EIF19:1;                 /* External Interrupt Status Flag 19 */
    vuint32_t EIF20:1;                 /* External Interrupt Status Flag 20 */
    vuint32_t EIF21:1;                 /* External Interrupt Status Flag 21 */
    vuint32_t EIF22:1;                 /* External Interrupt Status Flag 22 */
    vuint32_t EIF23:1;                 /* External Interrupt Status Flag 23 */
    vuint32_t EIF24:1;                 /* External Interrupt Status Flag 24 */
    vuint32_t EIF25:1;                 /* External Interrupt Status Flag 25 */
    vuint32_t EIF26:1;                 /* External Interrupt Status Flag 26 */
    vuint32_t EIF27:1;                 /* External Interrupt Status Flag 27 */
    vuint32_t EIF28:1;                 /* External Interrupt Status Flag 28 */
    vuint32_t EIF29:1;                 /* External Interrupt Status Flag 29 */
    vuint32_t EIF30:1;                 /* External Interrupt Status Flag 30 */
    vuint32_t EIF31:1;                 /* External Interrupt Status Flag 31 */
  } B;
} SIUL2_DISR0_tag;

typedef union SIUL2_DIRER0_union_tag { /* SIUL2 DMA/Interrupt Request Enable Register0 */
  vuint32_t R;
  struct {
    vuint32_t EIRE0:1;                 /* External Interrupt Request Enable */
    vuint32_t EIRE1:1;                 /* External Interrupt Request Enable */
    vuint32_t EIRE2:1;                 /* External Interrupt Request Enable */
    vuint32_t EIRE3:1;                 /* External Interrupt Request Enable */
    vuint32_t EIRE4:1;                 /* External Interrupt Request Enable */
    vuint32_t EIRE5:1;                 /* External Interrupt Request Enable */
    vuint32_t EIRE6:1;                 /* External Interrupt Request Enable */
    vuint32_t EIRE7:1;                 /* External Interrupt Request Enable */
    vuint32_t EIRE8:1;                 /* External Interrupt Request Enable */
    vuint32_t EIRE9:1;                 /* External Interrupt Request Enable */
    vuint32_t EIRE10:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE11:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE12:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE13:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE14:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE15:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE16:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE17:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE18:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE19:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE20:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE21:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE22:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE23:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE24:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE25:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE26:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE27:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE28:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE29:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE30:1;                /* External Interrupt Request Enable */
    vuint32_t EIRE31:1;                /* External Interrupt Request Enable */
  } B;
} SIUL2_DIRER0_tag;

typedef union SIUL2_DIRSR0_union_tag { /* SIUL2 DMA/Interrupt Request Select Register0 */
  vuint32_t R;
  struct {
    vuint32_t DIRSR0:1;                /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR1:1;                /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR2:1;                /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR3:1;                /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR4:1;                /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR5:1;                /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR6:1;                /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR7:1;                /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR8:1;                /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR9:1;                /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR10:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR11:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR12:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR13:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR14:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR15:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR16:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR17:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR18:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR19:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR20:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR21:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR22:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR23:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR24:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR25:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR26:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR27:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR28:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR29:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR30:1;               /* DMA/Interrupt Request Select Register */
    vuint32_t DIRSR31:1;               /* DMA/Interrupt Request Select Register */
  } B;
} SIUL2_DIRSR0_tag;

typedef union SIUL2_IREER0_union_tag { /* SIUL2 Interrupt Rising-Edge Event Enable Register 0 */
  vuint32_t R;
  struct {
    vuint32_t IREE0:1;                 /* Enables rising-edge events to set DISR0[EIFR0]. */
    vuint32_t IREE1:1;                 /* Enables rising-edge events to set DISR0[EIFR1]. */
    vuint32_t IREE2:1;                 /* Enables rising-edge events to set DISR0[EIFR2]. */
    vuint32_t IREE3:1;                 /* Enables rising-edge events to set DISR0[EIFR3]. */
    vuint32_t IREE4:1;                 /* Enables rising-edge events to set DISR0[EIFR4]. */
    vuint32_t IREE5:1;                 /* Enables rising-edge events to set DISR0[EIFR5]. */
    vuint32_t IREE6:1;                 /* Enables rising-edge events to set DISR0[EIFR6]. */
    vuint32_t IREE7:1;                 /* Enables rising-edge events to set DISR0[EIFR7]. */
    vuint32_t IREE8:1;                 /* Enables rising-edge events to set DISR0[EIFR8]. */
    vuint32_t IREE9:1;                 /* Enables rising-edge events to set DISR0[EIFR9]. */
    vuint32_t IREE10:1;                /* Enables rising-edge events to set DISR0[EIFR10]. */
    vuint32_t IREE11:1;                /* Enables rising-edge events to set DISR0[EIFR11]. */
    vuint32_t IREE12:1;                /* Enables rising-edge events to set DISR0[EIFR12]. */
    vuint32_t IREE13:1;                /* Enables rising-edge events to set DISR0[EIFR13]. */
    vuint32_t IREE14:1;                /* Enables rising-edge events to set DISR0[EIFR14]. */
    vuint32_t IREE15:1;                /* Enables rising-edge events to set DISR0[EIFR15]. */
    vuint32_t IREE16:1;                /* Enables rising-edge events to set DISR0[EIFR16]. */
    vuint32_t IREE17:1;                /* Enables rising-edge events to set DISR0[EIFR17]. */
    vuint32_t IREE18:1;                /* Enables rising-edge events to set DISR0[EIFR18]. */
    vuint32_t IREE19:1;                /* Enables rising-edge events to set DISR0[EIFR19]. */
    vuint32_t IREE20:1;                /* Enables rising-edge events to set DISR0[EIFR20]. */
    vuint32_t IREE21:1;                /* Enables rising-edge events to set DISR0[EIFR21]. */
    vuint32_t IREE22:1;                /* Enables rising-edge events to set DISR0[EIFR22]. */
    vuint32_t IREE23:1;                /* Enables rising-edge events to set DISR0[EIFR23]. */
    vuint32_t IREE24:1;                /* Enables rising-edge events to set DISR0[EIFR24]. */
    vuint32_t IREE25:1;                /* Enables rising-edge events to set DISR0[EIFR25]. */
    vuint32_t IREE26:1;                /* Enables rising-edge events to set DISR0[EIFR26]. */
    vuint32_t IREE27:1;                /* Enables rising-edge events to set DISR0[EIFR27]. */
    vuint32_t IREE28:1;                /* Enables rising-edge events to set DISR0[EIFR28]. */
    vuint32_t IREE29:1;                /* Enables rising-edge events to set DISR0[EIFR29]. */
    vuint32_t IREE30:1;                /* Enables rising-edge events to set DISR0[EIFR30]. */
    vuint32_t IREE31:1;                /* Enables rising-edge events to set DISR0[EIFR31]. */
  } B;
} SIUL2_IREER0_tag;

typedef union SIUL2_IFEER0_union_tag { /* SIUL2 Interrupt Falling-Edge Event Enable Register 0 */
  vuint32_t R;
  struct {
    vuint32_t IFEE0:1;                 /* Enables falling-edge events to set DISR0[EIFR0]. */
    vuint32_t IFEE1:1;                 /* Enables falling-edge events to set DISR0[EIFR1]. */
    vuint32_t IFEE2:1;                 /* Enables falling-edge events to set DISR0[EIFR2]. */
    vuint32_t IFEE3:1;                 /* Enables falling-edge events to set DISR0[EIFR3]. */
    vuint32_t IFEE4:1;                 /* Enables falling-edge events to set DISR0[EIFR4]. */
    vuint32_t IFEE5:1;                 /* Enables falling-edge events to set DISR0[EIFR5]. */
    vuint32_t IFEE6:1;                 /* Enables falling-edge events to set DISR0[EIFR6]. */
    vuint32_t IFEE7:1;                 /* Enables falling-edge events to set DISR0[EIFR7]. */
    vuint32_t IFEE8:1;                 /* Enables falling-edge events to set DISR0[EIFR8]. */
    vuint32_t IFEE9:1;                 /* Enables falling-edge events to set DISR0[EIFR9]. */
    vuint32_t IFEE10:1;                /* Enables falling-edge events to set DISR0[EIFR10]. */
    vuint32_t IFEE11:1;                /* Enables falling-edge events to set DISR0[EIFR11]. */
    vuint32_t IFEE12:1;                /* Enables falling-edge events to set DISR0[EIFR12]. */
    vuint32_t IFEE13:1;                /* Enables falling-edge events to set DISR0[EIFR13]. */
    vuint32_t IFEE14:1;                /* Enables falling-edge events to set DISR0[EIFR14]. */
    vuint32_t IFEE15:1;                /* Enables falling-edge events to set DISR0[EIFR15]. */
    vuint32_t IFEE16:1;                /* Enables falling-edge events to set DISR0[EIFR16]. */
    vuint32_t IFEE17:1;                /* Enables falling-edge events to set DISR0[EIFR17]. */
    vuint32_t IFEE18:1;                /* Enables falling-edge events to set DISR0[EIFR18]. */
    vuint32_t IFEE19:1;                /* Enables falling-edge events to set DISR0[EIFR19]. */
    vuint32_t IFEE20:1;                /* Enables falling-edge events to set DISR0[EIFR20]. */
    vuint32_t IFEE21:1;                /* Enables falling-edge events to set DISR0[EIFR21]. */
    vuint32_t IFEE22:1;                /* Enables falling-edge events to set DISR0[EIFR22]. */
    vuint32_t IFEE23:1;                /* Enables falling-edge events to set DISR0[EIFR23]. */
    vuint32_t IFEE24:1;                /* Enables falling-edge events to set DISR0[EIFR24]. */
    vuint32_t IFEE25:1;                /* Enables falling-edge events to set DISR0[EIFR25]. */
    vuint32_t IFEE26:1;                /* Enables falling-edge events to set DISR0[EIFR26]. */
    vuint32_t IFEE27:1;                /* Enables falling-edge events to set DISR0[EIFR27]. */
    vuint32_t IFEE28:1;                /* Enables falling-edge events to set DISR0[EIFR28]. */
    vuint32_t IFEE29:1;                /* Enables falling-edge events to set DISR0[EIFR29]. */
    vuint32_t IFEE30:1;                /* Enables falling-edge events to set DISR0[EIFR30]. */
    vuint32_t IFEE31:1;                /* Enables falling-edge events to set DISR0[EIFR31]. */
  } B;
} SIUL2_IFEER0_tag;

typedef union SIUL2_IFER0_union_tag {  /* SIUL2 Interrupt Filter Enable Register 0 */
  vuint32_t R;
  struct {
    vuint32_t IFE0:1;                  /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE1:1;                  /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE2:1;                  /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE3:1;                  /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE4:1;                  /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE5:1;                  /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE6:1;                  /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE7:1;                  /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE8:1;                  /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE9:1;                  /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE10:1;                 /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE11:1;                 /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE12:1;                 /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE13:1;                 /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE14:1;                 /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE15:1;                 /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE16:1;                 /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE17:1;                 /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE18:1;                 /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE19:1;                 /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE20:1;                 /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE21:1;                 /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE22:1;                 /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE23:1;                 /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE24:1;                 /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE25:1;                 /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE26:1;                 /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE27:1;                 /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE28:1;                 /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE29:1;                 /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE30:1;                 /* Enables digital glitch filter on the interrupt pad input. */
    vuint32_t IFE31:1;                 /* Enables digital glitch filter on the interrupt pad input. */
  } B;
} SIUL2_IFER0_tag;

typedef union SIUL2_IFMCR_union_tag {  /* SIUL2 Interrupt Filter Maximum Counter Register */
  vuint32_t R;
  struct {
    vuint32_t MAXCNT:4;                /* Maximum Interrupt Filter Counter setting */
    vuint32_t _unused_4:28;            /* Reserved */
  } B;
} SIUL2_IFMCR_tag;

typedef union SIUL2_IFCPR_union_tag {  /* SIUL2 Interrupt Filter Clock Prescaler Register */
  vuint32_t R;
  struct {
    vuint32_t IFCP:4;                  /* Interrupt Filter Clock Prescaler setting */
    vuint32_t _unused_4:28;            /* Reserved */
  } B;
} SIUL2_IFCPR_tag;

typedef union SIUL2_MIDR3_union_tag {  /* SIUL2 MCU ID Register 3 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:32;            /* Reserved */
  } B;
} SIUL2_MIDR3_tag;

typedef union SIUL2_MIDR4_union_tag {  /* SIUL2 MCU ID Register 4 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:32;            /* Reserved */
  } B;
} SIUL2_MIDR4_tag;

typedef union SIUL2_MSCR_union_tag {   /* SIUL2 Multiplexed Signal Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t SSS_0:1;                 /* Source Signal Select_0 */
    vuint32_t SSS_1:1;                 /* Source Signal Select_1 */
    vuint32_t SSS_2:1;                 /* Source Signal Select_2 */
    vuint32_t _unused_3:2;             /* Reserved */
    vuint32_t SMC:1;                   /* Safe Mode Control */
    vuint32_t IFE:1;                   /* IFE */
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t DSE:1;                   /* DSE */
    vuint32_t _unused_9:2;             /* Reserved */
    vuint32_t PUS:1;                   /* Pull Select */
    vuint32_t _unused_12:1;            /* Reserved */
    vuint32_t PUE:1;                   /* Pull Enable */
    vuint32_t SRC:1;                   /* Slew Rate Control */
    vuint32_t _unused_15:1;            /* Reserved */
    vuint32_t PKE:1;                   /* Pad keeping enable */
    vuint32_t INV:1;                   /* Invert */
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t IBE:1;                   /* Input Buffer Enable */
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t OBE:1;                   /* GPIO Output Buffer Enable */
    vuint32_t _unused_22:10;           /* Reserved */
  } B;
} SIUL2_MSCR_tag;

typedef union SIUL2_IMCR_union_tag {   /* SIUL2 Input Multiplexed Signal Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t SSS:4;                   /* Source Signal Select */
    vuint32_t _unused_4:28;            /* Reserved */
  } B;
} SIUL2_IMCR_tag;

typedef union SIUL2_GPDO3_union_tag {  /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO3_tag;

typedef union SIUL2_GPDO2_union_tag {  /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO2_tag;

typedef union SIUL2_GPDO1_union_tag {  /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO1_tag;

typedef union SIUL2_GPDO0_union_tag {  /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO0_tag;

typedef union SIUL2_GPDO7_union_tag {  /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO7_tag;

typedef union SIUL2_GPDO6_union_tag {  /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO6_tag;

typedef union SIUL2_GPDO5_union_tag {  /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO5_tag;

typedef union SIUL2_GPDO4_union_tag {  /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO4_tag;

typedef union SIUL2_GPDO11_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO11_tag;

typedef union SIUL2_GPDO10_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO10_tag;

typedef union SIUL2_GPDO9_union_tag {  /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO9_tag;

typedef union SIUL2_GPDO8_union_tag {  /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO8_tag;

typedef union SIUL2_GPDO15_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO15_tag;

typedef union SIUL2_GPDO14_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO14_tag;

typedef union SIUL2_GPDO13_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO13_tag;

typedef union SIUL2_GPDO12_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO12_tag;

typedef union SIUL2_GPDO19_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO19_tag;

typedef union SIUL2_GPDO18_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO18_tag;

typedef union SIUL2_GPDO17_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO17_tag;

typedef union SIUL2_GPDO16_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO16_tag;

typedef union SIUL2_GPDO23_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO23_tag;

typedef union SIUL2_GPDO22_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO22_tag;

typedef union SIUL2_GPDO21_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO21_tag;

typedef union SIUL2_GPDO20_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO20_tag;

typedef union SIUL2_GPDO27_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO27_tag;

typedef union SIUL2_GPDO26_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO26_tag;

typedef union SIUL2_GPDO25_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO25_tag;

typedef union SIUL2_GPDO24_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO24_tag;

typedef union SIUL2_GPDO31_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO31_tag;

typedef union SIUL2_GPDO30_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO30_tag;

typedef union SIUL2_GPDO29_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO29_tag;

typedef union SIUL2_GPDO28_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO28_tag;

typedef union SIUL2_GPDO35_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO35_tag;

typedef union SIUL2_GPDO34_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO34_tag;

typedef union SIUL2_GPDO33_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO33_tag;

typedef union SIUL2_GPDO32_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO32_tag;

typedef union SIUL2_GPDO37_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO37_tag;

typedef union SIUL2_GPDO36_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO36_tag;

typedef union SIUL2_GPDO43_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO43_tag;

typedef union SIUL2_GPDO42_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO42_tag;

typedef union SIUL2_GPDO41_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO41_tag;

typedef union SIUL2_GPDO40_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO40_tag;

typedef union SIUL2_GPDO47_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO47_tag;

typedef union SIUL2_GPDO46_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO46_tag;

typedef union SIUL2_GPDO45_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO45_tag;

typedef union SIUL2_GPDO44_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO44_tag;

typedef union SIUL2_GPDO51_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO51_tag;

typedef union SIUL2_GPDO50_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO50_tag;

typedef union SIUL2_GPDO49_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO49_tag;

typedef union SIUL2_GPDO48_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO48_tag;

typedef union SIUL2_GPDO55_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO55_tag;

typedef union SIUL2_GPDO54_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO54_tag;

typedef union SIUL2_GPDO53_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO53_tag;

typedef union SIUL2_GPDO52_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO52_tag;

typedef union SIUL2_GPDO59_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO59_tag;

typedef union SIUL2_GPDO58_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO58_tag;

typedef union SIUL2_GPDO57_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO57_tag;

typedef union SIUL2_GPDO56_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO56_tag;

typedef union SIUL2_GPDO63_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO63_tag;

typedef union SIUL2_GPDO62_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO62_tag;

typedef union SIUL2_GPDO61_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO61_tag;

typedef union SIUL2_GPDO60_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO60_tag;

typedef union SIUL2_GPDO67_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO67_tag;

typedef union SIUL2_GPDO66_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO66_tag;

typedef union SIUL2_GPDO65_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO65_tag;

typedef union SIUL2_GPDO64_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO64_tag;

typedef union SIUL2_GPDO71_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO71_tag;

typedef union SIUL2_GPDO70_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO70_tag;

typedef union SIUL2_GPDO69_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO69_tag;

typedef union SIUL2_GPDO68_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO68_tag;

typedef union SIUL2_GPDO75_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO75_tag;

typedef union SIUL2_GPDO74_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO74_tag;

typedef union SIUL2_GPDO73_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO73_tag;

typedef union SIUL2_GPDO72_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO72_tag;

typedef union SIUL2_GPDO79_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO79_tag;

typedef union SIUL2_GPDO78_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO78_tag;

typedef union SIUL2_GPDO77_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO77_tag;

typedef union SIUL2_GPDO76_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO76_tag;

typedef union SIUL2_GPDO83_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO83_tag;

typedef union SIUL2_GPDO82_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO82_tag;

typedef union SIUL2_GPDO81_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO81_tag;

typedef union SIUL2_GPDO80_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO80_tag;

typedef union SIUL2_GPDO87_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO87_tag;

typedef union SIUL2_GPDO86_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO86_tag;

typedef union SIUL2_GPDO85_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO85_tag;

typedef union SIUL2_GPDO84_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO84_tag;

typedef union SIUL2_GPDO91_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO91_tag;

typedef union SIUL2_GPDO90_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO90_tag;

typedef union SIUL2_GPDO89_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO89_tag;

typedef union SIUL2_GPDO88_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO88_tag;

typedef union SIUL2_GPDO95_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO95_tag;

typedef union SIUL2_GPDO94_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO94_tag;

typedef union SIUL2_GPDO93_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO93_tag;

typedef union SIUL2_GPDO92_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO92_tag;

typedef union SIUL2_GPDO99_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO99_tag;

typedef union SIUL2_GPDO98_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO98_tag;

typedef union SIUL2_GPDO97_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO97_tag;

typedef union SIUL2_GPDO96_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO96_tag;

typedef union SIUL2_GPDO103_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO103_tag;

typedef union SIUL2_GPDO102_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO102_tag;

typedef union SIUL2_GPDO101_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO101_tag;

typedef union SIUL2_GPDO100_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO100_tag;

typedef union SIUL2_GPDO107_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO107_tag;

typedef union SIUL2_GPDO106_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO106_tag;

typedef union SIUL2_GPDO105_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO105_tag;

typedef union SIUL2_GPDO104_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO104_tag;

typedef union SIUL2_GPDO111_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO111_tag;

typedef union SIUL2_GPDO110_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO110_tag;

typedef union SIUL2_GPDO109_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO109_tag;

typedef union SIUL2_GPDO108_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO108_tag;

typedef union SIUL2_GPDO115_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO115_tag;

typedef union SIUL2_GPDO114_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO114_tag;

typedef union SIUL2_GPDO113_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO113_tag;

typedef union SIUL2_GPDO112_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO112_tag;

typedef union SIUL2_GPDO119_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO119_tag;

typedef union SIUL2_GPDO118_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO118_tag;

typedef union SIUL2_GPDO117_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO117_tag;

typedef union SIUL2_GPDO116_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO116_tag;

typedef union SIUL2_GPDO123_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO123_tag;

typedef union SIUL2_GPDO122_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO122_tag;

typedef union SIUL2_GPDO121_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO121_tag;

typedef union SIUL2_GPDO120_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO120_tag;

typedef union SIUL2_GPDO127_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO127_tag;

typedef union SIUL2_GPDO126_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO126_tag;

typedef union SIUL2_GPDO125_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO125_tag;

typedef union SIUL2_GPDO124_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO124_tag;

typedef union SIUL2_GPDO131_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO131_tag;

typedef union SIUL2_GPDO130_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO130_tag;

typedef union SIUL2_GPDO129_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO129_tag;

typedef union SIUL2_GPDO128_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO128_tag;

typedef union SIUL2_GPDO135_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO135_tag;

typedef union SIUL2_GPDO134_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO134_tag;

typedef union SIUL2_GPDO133_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO133_tag;

typedef union SIUL2_GPDO132_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO132_tag;

typedef union SIUL2_GPDO139_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO139_tag;

typedef union SIUL2_GPDO138_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO138_tag;

typedef union SIUL2_GPDO137_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO137_tag;

typedef union SIUL2_GPDO136_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO136_tag;

typedef union SIUL2_GPDO143_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO143_tag;

typedef union SIUL2_GPDO142_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO142_tag;

typedef union SIUL2_GPDO141_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO141_tag;

typedef union SIUL2_GPDO140_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO140_tag;

typedef union SIUL2_GPDO147_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO147_tag;

typedef union SIUL2_GPDO146_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO146_tag;

typedef union SIUL2_GPDO145_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO145_tag;

typedef union SIUL2_GPDO144_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO144_tag;

typedef union SIUL2_GPDO151_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO151_tag;

typedef union SIUL2_GPDO150_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO150_tag;

typedef union SIUL2_GPDO149_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO149_tag;

typedef union SIUL2_GPDO148_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO148_tag;

typedef union SIUL2_GPDO155_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO155_tag;

typedef union SIUL2_GPDO154_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO154_tag;

typedef union SIUL2_GPDO153_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO153_tag;

typedef union SIUL2_GPDO152_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO152_tag;

typedef union SIUL2_GPDO159_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO159_tag;

typedef union SIUL2_GPDO158_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO158_tag;

typedef union SIUL2_GPDO157_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO157_tag;

typedef union SIUL2_GPDO156_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO156_tag;

typedef union SIUL2_GPDO163_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO163_tag;

typedef union SIUL2_GPDO162_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO162_tag;

typedef union SIUL2_GPDO161_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO161_tag;

typedef union SIUL2_GPDO160_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO160_tag;

typedef union SIUL2_GPDO167_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO167_tag;

typedef union SIUL2_GPDO166_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO166_tag;

typedef union SIUL2_GPDO165_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO165_tag;

typedef union SIUL2_GPDO164_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO164_tag;

typedef union SIUL2_GPDO171_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO171_tag;

typedef union SIUL2_GPDO170_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO170_tag;

typedef union SIUL2_GPDO169_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO169_tag;

typedef union SIUL2_GPDO168_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO168_tag;

typedef union SIUL2_GPDO175_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO175_tag;

typedef union SIUL2_GPDO174_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO174_tag;

typedef union SIUL2_GPDO173_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO173_tag;

typedef union SIUL2_GPDO172_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO172_tag;

typedef union SIUL2_GPDO179_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO179_tag;

typedef union SIUL2_GPDO178_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO178_tag;

typedef union SIUL2_GPDO177_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO177_tag;

typedef union SIUL2_GPDO176_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO176_tag;

typedef union SIUL2_GPDO183_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO183_tag;

typedef union SIUL2_GPDO182_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO182_tag;

typedef union SIUL2_GPDO181_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO181_tag;

typedef union SIUL2_GPDO180_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO180_tag;

typedef union SIUL2_GPDO187_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO187_tag;

typedef union SIUL2_GPDO186_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO186_tag;

typedef union SIUL2_GPDO185_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO185_tag;

typedef union SIUL2_GPDO184_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO184_tag;

typedef union SIUL2_GPDO191_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO191_tag;

typedef union SIUL2_GPDO190_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO190_tag;

typedef union SIUL2_GPDO189_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO189_tag;

typedef union SIUL2_GPDO188_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO188_tag;

typedef union SIUL2_GPDO195_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO195_tag;

typedef union SIUL2_GPDO194_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO194_tag;

typedef union SIUL2_GPDO193_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO193_tag;

typedef union SIUL2_GPDO192_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO192_tag;

typedef union SIUL2_GPDO199_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO199_tag;

typedef union SIUL2_GPDO198_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO198_tag;

typedef union SIUL2_GPDO197_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO197_tag;

typedef union SIUL2_GPDO196_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO196_tag;

typedef union SIUL2_GPDO203_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO203_tag;

typedef union SIUL2_GPDO202_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO202_tag;

typedef union SIUL2_GPDO201_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO201_tag;

typedef union SIUL2_GPDO200_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO200_tag;

typedef union SIUL2_GPDO207_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO207_tag;

typedef union SIUL2_GPDO206_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO206_tag;

typedef union SIUL2_GPDO205_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO205_tag;

typedef union SIUL2_GPDO204_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO204_tag;

typedef union SIUL2_GPDO211_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO211_tag;

typedef union SIUL2_GPDO210_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO210_tag;

typedef union SIUL2_GPDO209_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO209_tag;

typedef union SIUL2_GPDO208_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO208_tag;

typedef union SIUL2_GPDO215_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO215_tag;

typedef union SIUL2_GPDO214_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO214_tag;

typedef union SIUL2_GPDO213_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO213_tag;

typedef union SIUL2_GPDO212_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO212_tag;

typedef union SIUL2_GPDO219_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO219_tag;

typedef union SIUL2_GPDO218_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO218_tag;

typedef union SIUL2_GPDO217_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO217_tag;

typedef union SIUL2_GPDO216_union_tag { /* SIUL2 GPIO Pad Data Output Register */
  vuint8_t R;
  struct {
    vuint8_t PDO_N:1;                  /* Pad Data Out */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDO216_tag;

typedef union SIUL2_GPDI3_union_tag {  /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI3_tag;

typedef union SIUL2_GPDI2_union_tag {  /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI2_tag;

typedef union SIUL2_GPDI1_union_tag {  /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI1_tag;

typedef union SIUL2_GPDI0_union_tag {  /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI0_tag;

typedef union SIUL2_GPDI7_union_tag {  /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI7_tag;

typedef union SIUL2_GPDI6_union_tag {  /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI6_tag;

typedef union SIUL2_GPDI5_union_tag {  /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI5_tag;

typedef union SIUL2_GPDI4_union_tag {  /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI4_tag;

typedef union SIUL2_GPDI11_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI11_tag;

typedef union SIUL2_GPDI10_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI10_tag;

typedef union SIUL2_GPDI9_union_tag {  /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI9_tag;

typedef union SIUL2_GPDI8_union_tag {  /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI8_tag;

typedef union SIUL2_GPDI15_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI15_tag;

typedef union SIUL2_GPDI14_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI14_tag;

typedef union SIUL2_GPDI13_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI13_tag;

typedef union SIUL2_GPDI12_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI12_tag;

typedef union SIUL2_GPDI19_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI19_tag;

typedef union SIUL2_GPDI18_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI18_tag;

typedef union SIUL2_GPDI17_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI17_tag;

typedef union SIUL2_GPDI16_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI16_tag;

typedef union SIUL2_GPDI23_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI23_tag;

typedef union SIUL2_GPDI22_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI22_tag;

typedef union SIUL2_GPDI21_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI21_tag;

typedef union SIUL2_GPDI20_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI20_tag;

typedef union SIUL2_GPDI27_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI27_tag;

typedef union SIUL2_GPDI26_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI26_tag;

typedef union SIUL2_GPDI25_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI25_tag;

typedef union SIUL2_GPDI24_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI24_tag;

typedef union SIUL2_GPDI31_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI31_tag;

typedef union SIUL2_GPDI30_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI30_tag;

typedef union SIUL2_GPDI29_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI29_tag;

typedef union SIUL2_GPDI28_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI28_tag;

typedef union SIUL2_GPDI35_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI35_tag;

typedef union SIUL2_GPDI34_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI34_tag;

typedef union SIUL2_GPDI33_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI33_tag;

typedef union SIUL2_GPDI32_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI32_tag;

typedef union SIUL2_GPDI37_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI37_tag;

typedef union SIUL2_GPDI36_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI36_tag;

typedef union SIUL2_GPDI43_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI43_tag;

typedef union SIUL2_GPDI42_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI42_tag;

typedef union SIUL2_GPDI41_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI41_tag;

typedef union SIUL2_GPDI40_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI40_tag;

typedef union SIUL2_GPDI47_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI47_tag;

typedef union SIUL2_GPDI46_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI46_tag;

typedef union SIUL2_GPDI45_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI45_tag;

typedef union SIUL2_GPDI44_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI44_tag;

typedef union SIUL2_GPDI51_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI51_tag;

typedef union SIUL2_GPDI50_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI50_tag;

typedef union SIUL2_GPDI49_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI49_tag;

typedef union SIUL2_GPDI48_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI48_tag;

typedef union SIUL2_GPDI55_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI55_tag;

typedef union SIUL2_GPDI54_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI54_tag;

typedef union SIUL2_GPDI53_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI53_tag;

typedef union SIUL2_GPDI52_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI52_tag;

typedef union SIUL2_GPDI59_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI59_tag;

typedef union SIUL2_GPDI58_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI58_tag;

typedef union SIUL2_GPDI57_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI57_tag;

typedef union SIUL2_GPDI56_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI56_tag;

typedef union SIUL2_GPDI63_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI63_tag;

typedef union SIUL2_GPDI62_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI62_tag;

typedef union SIUL2_GPDI61_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI61_tag;

typedef union SIUL2_GPDI60_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI60_tag;

typedef union SIUL2_GPDI67_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI67_tag;

typedef union SIUL2_GPDI66_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI66_tag;

typedef union SIUL2_GPDI65_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI65_tag;

typedef union SIUL2_GPDI64_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI64_tag;

typedef union SIUL2_GPDI71_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI71_tag;

typedef union SIUL2_GPDI70_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI70_tag;

typedef union SIUL2_GPDI69_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI69_tag;

typedef union SIUL2_GPDI68_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI68_tag;

typedef union SIUL2_GPDI75_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI75_tag;

typedef union SIUL2_GPDI74_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI74_tag;

typedef union SIUL2_GPDI73_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI73_tag;

typedef union SIUL2_GPDI72_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI72_tag;

typedef union SIUL2_GPDI79_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI79_tag;

typedef union SIUL2_GPDI78_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI78_tag;

typedef union SIUL2_GPDI77_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI77_tag;

typedef union SIUL2_GPDI76_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI76_tag;

typedef union SIUL2_GPDI83_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI83_tag;

typedef union SIUL2_GPDI82_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI82_tag;

typedef union SIUL2_GPDI81_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI81_tag;

typedef union SIUL2_GPDI80_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI80_tag;

typedef union SIUL2_GPDI87_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI87_tag;

typedef union SIUL2_GPDI86_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI86_tag;

typedef union SIUL2_GPDI85_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI85_tag;

typedef union SIUL2_GPDI84_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI84_tag;

typedef union SIUL2_GPDI91_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI91_tag;

typedef union SIUL2_GPDI90_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI90_tag;

typedef union SIUL2_GPDI89_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI89_tag;

typedef union SIUL2_GPDI88_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI88_tag;

typedef union SIUL2_GPDI95_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI95_tag;

typedef union SIUL2_GPDI94_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI94_tag;

typedef union SIUL2_GPDI93_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI93_tag;

typedef union SIUL2_GPDI92_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI92_tag;

typedef union SIUL2_GPDI99_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI99_tag;

typedef union SIUL2_GPDI98_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI98_tag;

typedef union SIUL2_GPDI97_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI97_tag;

typedef union SIUL2_GPDI96_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI96_tag;

typedef union SIUL2_GPDI103_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI103_tag;

typedef union SIUL2_GPDI102_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI102_tag;

typedef union SIUL2_GPDI101_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI101_tag;

typedef union SIUL2_GPDI100_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI100_tag;

typedef union SIUL2_GPDI107_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI107_tag;

typedef union SIUL2_GPDI106_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI106_tag;

typedef union SIUL2_GPDI105_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI105_tag;

typedef union SIUL2_GPDI104_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI104_tag;

typedef union SIUL2_GPDI111_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI111_tag;

typedef union SIUL2_GPDI110_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI110_tag;

typedef union SIUL2_GPDI109_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI109_tag;

typedef union SIUL2_GPDI108_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI108_tag;

typedef union SIUL2_GPDI115_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI115_tag;

typedef union SIUL2_GPDI114_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI114_tag;

typedef union SIUL2_GPDI113_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI113_tag;

typedef union SIUL2_GPDI112_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI112_tag;

typedef union SIUL2_GPDI119_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI119_tag;

typedef union SIUL2_GPDI118_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI118_tag;

typedef union SIUL2_GPDI117_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI117_tag;

typedef union SIUL2_GPDI116_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI116_tag;

typedef union SIUL2_GPDI123_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI123_tag;

typedef union SIUL2_GPDI122_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI122_tag;

typedef union SIUL2_GPDI121_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI121_tag;

typedef union SIUL2_GPDI120_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI120_tag;

typedef union SIUL2_GPDI127_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI127_tag;

typedef union SIUL2_GPDI126_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI126_tag;

typedef union SIUL2_GPDI125_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI125_tag;

typedef union SIUL2_GPDI124_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI124_tag;

typedef union SIUL2_GPDI131_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI131_tag;

typedef union SIUL2_GPDI130_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI130_tag;

typedef union SIUL2_GPDI129_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI129_tag;

typedef union SIUL2_GPDI128_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI128_tag;

typedef union SIUL2_GPDI135_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI135_tag;

typedef union SIUL2_GPDI134_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI134_tag;

typedef union SIUL2_GPDI133_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI133_tag;

typedef union SIUL2_GPDI132_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI132_tag;

typedef union SIUL2_GPDI139_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI139_tag;

typedef union SIUL2_GPDI138_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI138_tag;

typedef union SIUL2_GPDI137_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI137_tag;

typedef union SIUL2_GPDI136_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI136_tag;

typedef union SIUL2_GPDI143_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI143_tag;

typedef union SIUL2_GPDI142_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI142_tag;

typedef union SIUL2_GPDI141_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI141_tag;

typedef union SIUL2_GPDI140_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI140_tag;

typedef union SIUL2_GPDI147_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI147_tag;

typedef union SIUL2_GPDI146_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI146_tag;

typedef union SIUL2_GPDI145_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI145_tag;

typedef union SIUL2_GPDI144_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI144_tag;

typedef union SIUL2_GPDI151_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI151_tag;

typedef union SIUL2_GPDI150_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI150_tag;

typedef union SIUL2_GPDI149_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI149_tag;

typedef union SIUL2_GPDI148_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI148_tag;

typedef union SIUL2_GPDI155_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI155_tag;

typedef union SIUL2_GPDI154_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI154_tag;

typedef union SIUL2_GPDI153_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI153_tag;

typedef union SIUL2_GPDI152_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI152_tag;

typedef union SIUL2_GPDI159_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI159_tag;

typedef union SIUL2_GPDI158_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI158_tag;

typedef union SIUL2_GPDI157_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI157_tag;

typedef union SIUL2_GPDI156_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI156_tag;

typedef union SIUL2_GPDI163_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI163_tag;

typedef union SIUL2_GPDI162_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI162_tag;

typedef union SIUL2_GPDI161_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI161_tag;

typedef union SIUL2_GPDI160_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI160_tag;

typedef union SIUL2_GPDI167_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI167_tag;

typedef union SIUL2_GPDI166_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI166_tag;

typedef union SIUL2_GPDI165_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI165_tag;

typedef union SIUL2_GPDI164_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI164_tag;

typedef union SIUL2_GPDI171_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI171_tag;

typedef union SIUL2_GPDI170_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI170_tag;

typedef union SIUL2_GPDI169_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI169_tag;

typedef union SIUL2_GPDI168_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI168_tag;

typedef union SIUL2_GPDI175_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI175_tag;

typedef union SIUL2_GPDI174_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI174_tag;

typedef union SIUL2_GPDI173_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI173_tag;

typedef union SIUL2_GPDI172_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI172_tag;

typedef union SIUL2_GPDI179_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI179_tag;

typedef union SIUL2_GPDI178_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI178_tag;

typedef union SIUL2_GPDI177_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI177_tag;

typedef union SIUL2_GPDI176_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI176_tag;

typedef union SIUL2_GPDI183_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI183_tag;

typedef union SIUL2_GPDI182_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI182_tag;

typedef union SIUL2_GPDI181_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI181_tag;

typedef union SIUL2_GPDI180_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI180_tag;

typedef union SIUL2_GPDI187_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI187_tag;

typedef union SIUL2_GPDI186_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI186_tag;

typedef union SIUL2_GPDI185_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI185_tag;

typedef union SIUL2_GPDI184_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI184_tag;

typedef union SIUL2_GPDI191_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI191_tag;

typedef union SIUL2_GPDI190_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI190_tag;

typedef union SIUL2_GPDI189_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI189_tag;

typedef union SIUL2_GPDI188_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI188_tag;

typedef union SIUL2_GPDI195_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI195_tag;

typedef union SIUL2_GPDI194_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI194_tag;

typedef union SIUL2_GPDI193_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI193_tag;

typedef union SIUL2_GPDI192_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI192_tag;

typedef union SIUL2_GPDI199_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI199_tag;

typedef union SIUL2_GPDI198_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI198_tag;

typedef union SIUL2_GPDI197_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI197_tag;

typedef union SIUL2_GPDI196_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI196_tag;

typedef union SIUL2_GPDI203_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI203_tag;

typedef union SIUL2_GPDI202_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI202_tag;

typedef union SIUL2_GPDI201_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI201_tag;

typedef union SIUL2_GPDI200_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI200_tag;

typedef union SIUL2_GPDI207_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI207_tag;

typedef union SIUL2_GPDI206_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI206_tag;

typedef union SIUL2_GPDI205_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI205_tag;

typedef union SIUL2_GPDI204_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI204_tag;

typedef union SIUL2_GPDI211_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI211_tag;

typedef union SIUL2_GPDI210_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI210_tag;

typedef union SIUL2_GPDI209_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI209_tag;

typedef union SIUL2_GPDI208_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI208_tag;

typedef union SIUL2_GPDI215_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI215_tag;

typedef union SIUL2_GPDI214_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI214_tag;

typedef union SIUL2_GPDI213_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI213_tag;

typedef union SIUL2_GPDI212_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI212_tag;

typedef union SIUL2_GPDI219_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI219_tag;

typedef union SIUL2_GPDI218_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI218_tag;

typedef union SIUL2_GPDI217_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI217_tag;

typedef union SIUL2_GPDI216_union_tag { /* SIUL2 GPIO Pad Data Input Register */
  vuint8_t R;
  struct {
    vuint8_t PDI_N:1;                  /* Pad Data In */
    vuint8_t _unused_1:7;              /* Reserved */
  } B;
} SIUL2_GPDI216_tag;

typedef union SIUL2_PGPDO1_union_tag { /* SIUL2 Parallel GPIO Pad Data Out Register */
  vuint16_t R;
  struct {
    vuint16_t PPDO0:1;                 /* Parallel Pad Data Out 0 */
    vuint16_t PPDO1:1;                 /* Parallel Pad Data Out 1 */
    vuint16_t PPDO2:1;                 /* Parallel Pad Data Out 2 */
    vuint16_t PPDO3:1;                 /* Parallel Pad Data Out 3 */
    vuint16_t PPDO4:1;                 /* Parallel Pad Data Out 4 */
    vuint16_t PPDO5:1;                 /* Parallel Pad Data Out 5 */
    vuint16_t PPDO6:1;                 /* Parallel Pad Data Out 6 */
    vuint16_t PPDO7:1;                 /* Parallel Pad Data Out 7 */
    vuint16_t PPDO8:1;                 /* Parallel Pad Data Out 8 */
    vuint16_t PPDO9:1;                 /* Parallel Pad Data Out 9 */
    vuint16_t PPDO10:1;                /* Parallel Pad Data Out 10 */
    vuint16_t PPDO11:1;                /* Parallel Pad Data Out 11 */
    vuint16_t PPDO12:1;                /* Parallel Pad Data Out 12 */
    vuint16_t PPDO13:1;                /* Parallel Pad Data Out 13 */
    vuint16_t PPDO14:1;                /* Parallel Pad Data Out 14 */
    vuint16_t PPDO15:1;                /* Parallel Pad Data Out 15 */
  } B;
} SIUL2_PGPDO1_tag;

typedef union SIUL2_PGPDO0_union_tag { /* SIUL2 Parallel GPIO Pad Data Out Register */
  vuint16_t R;
  struct {
    vuint16_t PPDO0:1;                 /* Parallel Pad Data Out 0 */
    vuint16_t PPDO1:1;                 /* Parallel Pad Data Out 1 */
    vuint16_t PPDO2:1;                 /* Parallel Pad Data Out 2 */
    vuint16_t PPDO3:1;                 /* Parallel Pad Data Out 3 */
    vuint16_t PPDO4:1;                 /* Parallel Pad Data Out 4 */
    vuint16_t PPDO5:1;                 /* Parallel Pad Data Out 5 */
    vuint16_t PPDO6:1;                 /* Parallel Pad Data Out 6 */
    vuint16_t PPDO7:1;                 /* Parallel Pad Data Out 7 */
    vuint16_t PPDO8:1;                 /* Parallel Pad Data Out 8 */
    vuint16_t PPDO9:1;                 /* Parallel Pad Data Out 9 */
    vuint16_t PPDO10:1;                /* Parallel Pad Data Out 10 */
    vuint16_t PPDO11:1;                /* Parallel Pad Data Out 11 */
    vuint16_t PPDO12:1;                /* Parallel Pad Data Out 12 */
    vuint16_t PPDO13:1;                /* Parallel Pad Data Out 13 */
    vuint16_t PPDO14:1;                /* Parallel Pad Data Out 14 */
    vuint16_t PPDO15:1;                /* Parallel Pad Data Out 15 */
  } B;
} SIUL2_PGPDO0_tag;

typedef union SIUL2_PGPDO3_union_tag { /* SIUL2 Parallel GPIO Pad Data Out Register */
  vuint16_t R;
  struct {
    vuint16_t PPDO0:1;                 /* Parallel Pad Data Out 0 */
    vuint16_t PPDO1:1;                 /* Parallel Pad Data Out 1 */
    vuint16_t PPDO2:1;                 /* Parallel Pad Data Out 2 */
    vuint16_t PPDO3:1;                 /* Parallel Pad Data Out 3 */
    vuint16_t PPDO4:1;                 /* Parallel Pad Data Out 4 */
    vuint16_t PPDO5:1;                 /* Parallel Pad Data Out 5 */
    vuint16_t PPDO6:1;                 /* Parallel Pad Data Out 6 */
    vuint16_t PPDO7:1;                 /* Parallel Pad Data Out 7 */
    vuint16_t PPDO8:1;                 /* Parallel Pad Data Out 8 */
    vuint16_t PPDO9:1;                 /* Parallel Pad Data Out 9 */
    vuint16_t PPDO10:1;                /* Parallel Pad Data Out 10 */
    vuint16_t PPDO11:1;                /* Parallel Pad Data Out 11 */
    vuint16_t PPDO12:1;                /* Parallel Pad Data Out 12 */
    vuint16_t PPDO13:1;                /* Parallel Pad Data Out 13 */
    vuint16_t PPDO14:1;                /* Parallel Pad Data Out 14 */
    vuint16_t PPDO15:1;                /* Parallel Pad Data Out 15 */
  } B;
} SIUL2_PGPDO3_tag;

typedef union SIUL2_PGPDO2_union_tag { /* SIUL2 Parallel GPIO Pad Data Out Register */
  vuint16_t R;
  struct {
    vuint16_t PPDO0:1;                 /* Parallel Pad Data Out 0 */
    vuint16_t PPDO1:1;                 /* Parallel Pad Data Out 1 */
    vuint16_t PPDO2:1;                 /* Parallel Pad Data Out 2 */
    vuint16_t PPDO3:1;                 /* Parallel Pad Data Out 3 */
    vuint16_t PPDO4:1;                 /* Parallel Pad Data Out 4 */
    vuint16_t PPDO5:1;                 /* Parallel Pad Data Out 5 */
    vuint16_t PPDO6:1;                 /* Parallel Pad Data Out 6 */
    vuint16_t PPDO7:1;                 /* Parallel Pad Data Out 7 */
    vuint16_t _unused_8:1;             /* Reserved */
    vuint16_t _unused_9:1;             /* Reserved */
    vuint16_t PPDO10:1;                /* Parallel Pad Data Out 10 */
    vuint16_t PPDO11:1;                /* Parallel Pad Data Out 11 */
    vuint16_t PPDO12:1;                /* Parallel Pad Data Out 12 */
    vuint16_t PPDO13:1;                /* Parallel Pad Data Out 13 */
    vuint16_t PPDO14:1;                /* Parallel Pad Data Out 14 */
    vuint16_t PPDO15:1;                /* Parallel Pad Data Out 15 */
  } B;
} SIUL2_PGPDO2_tag;

typedef union SIUL2_PGPDO5_union_tag { /* SIUL2 Parallel GPIO Pad Data Out Register */
  vuint16_t R;
  struct {
    vuint16_t PPDO0:1;                 /* Parallel Pad Data Out 0 */
    vuint16_t PPDO1:1;                 /* Parallel Pad Data Out 1 */
    vuint16_t PPDO2:1;                 /* Parallel Pad Data Out 2 */
    vuint16_t PPDO3:1;                 /* Parallel Pad Data Out 3 */
    vuint16_t PPDO4:1;                 /* Parallel Pad Data Out 4 */
    vuint16_t PPDO5:1;                 /* Parallel Pad Data Out 5 */
    vuint16_t PPDO6:1;                 /* Parallel Pad Data Out 6 */
    vuint16_t PPDO7:1;                 /* Parallel Pad Data Out 7 */
    vuint16_t PPDO8:1;                 /* Parallel Pad Data Out 8 */
    vuint16_t PPDO9:1;                 /* Parallel Pad Data Out 9 */
    vuint16_t PPDO10:1;                /* Parallel Pad Data Out 10 */
    vuint16_t PPDO11:1;                /* Parallel Pad Data Out 11 */
    vuint16_t PPDO12:1;                /* Parallel Pad Data Out 12 */
    vuint16_t PPDO13:1;                /* Parallel Pad Data Out 13 */
    vuint16_t PPDO14:1;                /* Parallel Pad Data Out 14 */
    vuint16_t PPDO15:1;                /* Parallel Pad Data Out 15 */
  } B;
} SIUL2_PGPDO5_tag;

typedef union SIUL2_PGPDO4_union_tag { /* SIUL2 Parallel GPIO Pad Data Out Register */
  vuint16_t R;
  struct {
    vuint16_t PPDO0:1;                 /* Parallel Pad Data Out 0 */
    vuint16_t PPDO1:1;                 /* Parallel Pad Data Out 1 */
    vuint16_t PPDO2:1;                 /* Parallel Pad Data Out 2 */
    vuint16_t PPDO3:1;                 /* Parallel Pad Data Out 3 */
    vuint16_t PPDO4:1;                 /* Parallel Pad Data Out 4 */
    vuint16_t PPDO5:1;                 /* Parallel Pad Data Out 5 */
    vuint16_t PPDO6:1;                 /* Parallel Pad Data Out 6 */
    vuint16_t PPDO7:1;                 /* Parallel Pad Data Out 7 */
    vuint16_t PPDO8:1;                 /* Parallel Pad Data Out 8 */
    vuint16_t PPDO9:1;                 /* Parallel Pad Data Out 9 */
    vuint16_t PPDO10:1;                /* Parallel Pad Data Out 10 */
    vuint16_t PPDO11:1;                /* Parallel Pad Data Out 11 */
    vuint16_t PPDO12:1;                /* Parallel Pad Data Out 12 */
    vuint16_t PPDO13:1;                /* Parallel Pad Data Out 13 */
    vuint16_t PPDO14:1;                /* Parallel Pad Data Out 14 */
    vuint16_t PPDO15:1;                /* Parallel Pad Data Out 15 */
  } B;
} SIUL2_PGPDO4_tag;

typedef union SIUL2_PGPDO7_union_tag { /* SIUL2 Parallel GPIO Pad Data Out Register */
  vuint16_t R;
  struct {
    vuint16_t PPDO0:1;                 /* Parallel Pad Data Out 0 */
    vuint16_t PPDO1:1;                 /* Parallel Pad Data Out 1 */
    vuint16_t PPDO2:1;                 /* Parallel Pad Data Out 2 */
    vuint16_t PPDO3:1;                 /* Parallel Pad Data Out 3 */
    vuint16_t PPDO4:1;                 /* Parallel Pad Data Out 4 */
    vuint16_t PPDO5:1;                 /* Parallel Pad Data Out 5 */
    vuint16_t PPDO6:1;                 /* Parallel Pad Data Out 6 */
    vuint16_t PPDO7:1;                 /* Parallel Pad Data Out 7 */
    vuint16_t PPDO8:1;                 /* Parallel Pad Data Out 8 */
    vuint16_t PPDO9:1;                 /* Parallel Pad Data Out 9 */
    vuint16_t PPDO10:1;                /* Parallel Pad Data Out 10 */
    vuint16_t PPDO11:1;                /* Parallel Pad Data Out 11 */
    vuint16_t PPDO12:1;                /* Parallel Pad Data Out 12 */
    vuint16_t PPDO13:1;                /* Parallel Pad Data Out 13 */
    vuint16_t PPDO14:1;                /* Parallel Pad Data Out 14 */
    vuint16_t PPDO15:1;                /* Parallel Pad Data Out 15 */
  } B;
} SIUL2_PGPDO7_tag;

typedef union SIUL2_PGPDO6_union_tag { /* SIUL2 Parallel GPIO Pad Data Out Register */
  vuint16_t R;
  struct {
    vuint16_t PPDO0:1;                 /* Parallel Pad Data Out 0 */
    vuint16_t PPDO1:1;                 /* Parallel Pad Data Out 1 */
    vuint16_t PPDO2:1;                 /* Parallel Pad Data Out 2 */
    vuint16_t PPDO3:1;                 /* Parallel Pad Data Out 3 */
    vuint16_t PPDO4:1;                 /* Parallel Pad Data Out 4 */
    vuint16_t PPDO5:1;                 /* Parallel Pad Data Out 5 */
    vuint16_t PPDO6:1;                 /* Parallel Pad Data Out 6 */
    vuint16_t PPDO7:1;                 /* Parallel Pad Data Out 7 */
    vuint16_t PPDO8:1;                 /* Parallel Pad Data Out 8 */
    vuint16_t PPDO9:1;                 /* Parallel Pad Data Out 9 */
    vuint16_t PPDO10:1;                /* Parallel Pad Data Out 10 */
    vuint16_t PPDO11:1;                /* Parallel Pad Data Out 11 */
    vuint16_t PPDO12:1;                /* Parallel Pad Data Out 12 */
    vuint16_t PPDO13:1;                /* Parallel Pad Data Out 13 */
    vuint16_t PPDO14:1;                /* Parallel Pad Data Out 14 */
    vuint16_t PPDO15:1;                /* Parallel Pad Data Out 15 */
  } B;
} SIUL2_PGPDO6_tag;

typedef union SIUL2_PGPDO9_union_tag { /* SIUL2 Parallel GPIO Pad Data Out Register */
  vuint16_t R;
  struct {
    vuint16_t PPDO0:1;                 /* Parallel Pad Data Out 0 */
    vuint16_t PPDO1:1;                 /* Parallel Pad Data Out 1 */
    vuint16_t PPDO2:1;                 /* Parallel Pad Data Out 2 */
    vuint16_t PPDO3:1;                 /* Parallel Pad Data Out 3 */
    vuint16_t PPDO4:1;                 /* Parallel Pad Data Out 4 */
    vuint16_t PPDO5:1;                 /* Parallel Pad Data Out 5 */
    vuint16_t PPDO6:1;                 /* Parallel Pad Data Out 6 */
    vuint16_t PPDO7:1;                 /* Parallel Pad Data Out 7 */
    vuint16_t PPDO8:1;                 /* Parallel Pad Data Out 8 */
    vuint16_t PPDO9:1;                 /* Parallel Pad Data Out 9 */
    vuint16_t PPDO10:1;                /* Parallel Pad Data Out 10 */
    vuint16_t PPDO11:1;                /* Parallel Pad Data Out 11 */
    vuint16_t PPDO12:1;                /* Parallel Pad Data Out 12 */
    vuint16_t PPDO13:1;                /* Parallel Pad Data Out 13 */
    vuint16_t PPDO14:1;                /* Parallel Pad Data Out 14 */
    vuint16_t PPDO15:1;                /* Parallel Pad Data Out 15 */
  } B;
} SIUL2_PGPDO9_tag;

typedef union SIUL2_PGPDO8_union_tag { /* SIUL2 Parallel GPIO Pad Data Out Register */
  vuint16_t R;
  struct {
    vuint16_t PPDO0:1;                 /* Parallel Pad Data Out 0 */
    vuint16_t PPDO1:1;                 /* Parallel Pad Data Out 1 */
    vuint16_t PPDO2:1;                 /* Parallel Pad Data Out 2 */
    vuint16_t PPDO3:1;                 /* Parallel Pad Data Out 3 */
    vuint16_t PPDO4:1;                 /* Parallel Pad Data Out 4 */
    vuint16_t PPDO5:1;                 /* Parallel Pad Data Out 5 */
    vuint16_t PPDO6:1;                 /* Parallel Pad Data Out 6 */
    vuint16_t PPDO7:1;                 /* Parallel Pad Data Out 7 */
    vuint16_t PPDO8:1;                 /* Parallel Pad Data Out 8 */
    vuint16_t PPDO9:1;                 /* Parallel Pad Data Out 9 */
    vuint16_t PPDO10:1;                /* Parallel Pad Data Out 10 */
    vuint16_t PPDO11:1;                /* Parallel Pad Data Out 11 */
    vuint16_t PPDO12:1;                /* Parallel Pad Data Out 12 */
    vuint16_t PPDO13:1;                /* Parallel Pad Data Out 13 */
    vuint16_t PPDO14:1;                /* Parallel Pad Data Out 14 */
    vuint16_t PPDO15:1;                /* Parallel Pad Data Out 15 */
  } B;
} SIUL2_PGPDO8_tag;

typedef union SIUL2_PGPDO11_union_tag { /* SIUL2 Parallel GPIO Pad Data Out Register */
  vuint16_t R;
  struct {
    vuint16_t PPDO0:1;                 /* Parallel Pad Data Out 0 */
    vuint16_t PPDO1:1;                 /* Parallel Pad Data Out 1 */
    vuint16_t PPDO2:1;                 /* Parallel Pad Data Out 2 */
    vuint16_t PPDO3:1;                 /* Parallel Pad Data Out 3 */
    vuint16_t PPDO4:1;                 /* Parallel Pad Data Out 4 */
    vuint16_t PPDO5:1;                 /* Parallel Pad Data Out 5 */
    vuint16_t PPDO6:1;                 /* Parallel Pad Data Out 6 */
    vuint16_t PPDO7:1;                 /* Parallel Pad Data Out 7 */
    vuint16_t PPDO8:1;                 /* Parallel Pad Data Out 8 */
    vuint16_t PPDO9:1;                 /* Parallel Pad Data Out 9 */
    vuint16_t PPDO10:1;                /* Parallel Pad Data Out 10 */
    vuint16_t PPDO11:1;                /* Parallel Pad Data Out 11 */
    vuint16_t PPDO12:1;                /* Parallel Pad Data Out 12 */
    vuint16_t PPDO13:1;                /* Parallel Pad Data Out 13 */
    vuint16_t PPDO14:1;                /* Parallel Pad Data Out 14 */
    vuint16_t PPDO15:1;                /* Parallel Pad Data Out 15 */
  } B;
} SIUL2_PGPDO11_tag;

typedef union SIUL2_PGPDO10_union_tag { /* SIUL2 Parallel GPIO Pad Data Out Register */
  vuint16_t R;
  struct {
    vuint16_t PPDO0:1;                 /* Parallel Pad Data Out 0 */
    vuint16_t PPDO1:1;                 /* Parallel Pad Data Out 1 */
    vuint16_t PPDO2:1;                 /* Parallel Pad Data Out 2 */
    vuint16_t PPDO3:1;                 /* Parallel Pad Data Out 3 */
    vuint16_t PPDO4:1;                 /* Parallel Pad Data Out 4 */
    vuint16_t PPDO5:1;                 /* Parallel Pad Data Out 5 */
    vuint16_t PPDO6:1;                 /* Parallel Pad Data Out 6 */
    vuint16_t PPDO7:1;                 /* Parallel Pad Data Out 7 */
    vuint16_t PPDO8:1;                 /* Parallel Pad Data Out 8 */
    vuint16_t PPDO9:1;                 /* Parallel Pad Data Out 9 */
    vuint16_t PPDO10:1;                /* Parallel Pad Data Out 10 */
    vuint16_t PPDO11:1;                /* Parallel Pad Data Out 11 */
    vuint16_t PPDO12:1;                /* Parallel Pad Data Out 12 */
    vuint16_t PPDO13:1;                /* Parallel Pad Data Out 13 */
    vuint16_t PPDO14:1;                /* Parallel Pad Data Out 14 */
    vuint16_t PPDO15:1;                /* Parallel Pad Data Out 15 */
  } B;
} SIUL2_PGPDO10_tag;

typedef union SIUL2_PGPDO13_union_tag { /* SIUL2 Parallel GPIO Pad Data Out Register */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:1;             /* Reserved */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t _unused_2:1;             /* Reserved */
    vuint16_t _unused_3:1;             /* Reserved */
    vuint16_t PPDO4:1;                 /* Parallel Pad Data Out 4 */
    vuint16_t PPDO5:1;                 /* Parallel Pad Data Out 5 */
    vuint16_t PPDO6:1;                 /* Parallel Pad Data Out 6 */
    vuint16_t PPDO7:1;                 /* Parallel Pad Data Out 7 */
    vuint16_t PPDO8:1;                 /* Parallel Pad Data Out 8 */
    vuint16_t PPDO9:1;                 /* Parallel Pad Data Out 9 */
    vuint16_t PPDO10:1;                /* Parallel Pad Data Out 10 */
    vuint16_t PPDO11:1;                /* Parallel Pad Data Out 11 */
    vuint16_t PPDO12:1;                /* Parallel Pad Data Out 12 */
    vuint16_t PPDO13:1;                /* Parallel Pad Data Out 13 */
    vuint16_t PPDO14:1;                /* Parallel Pad Data Out 14 */
    vuint16_t PPDO15:1;                /* Parallel Pad Data Out 15 */
  } B;
} SIUL2_PGPDO13_tag;

typedef union SIUL2_PGPDO12_union_tag { /* SIUL2 Parallel GPIO Pad Data Out Register */
  vuint16_t R;
  struct {
    vuint16_t PPDO0:1;                 /* Parallel Pad Data Out 0 */
    vuint16_t PPDO1:1;                 /* Parallel Pad Data Out 1 */
    vuint16_t PPDO2:1;                 /* Parallel Pad Data Out 2 */
    vuint16_t PPDO3:1;                 /* Parallel Pad Data Out 3 */
    vuint16_t PPDO4:1;                 /* Parallel Pad Data Out 4 */
    vuint16_t PPDO5:1;                 /* Parallel Pad Data Out 5 */
    vuint16_t PPDO6:1;                 /* Parallel Pad Data Out 6 */
    vuint16_t PPDO7:1;                 /* Parallel Pad Data Out 7 */
    vuint16_t PPDO8:1;                 /* Parallel Pad Data Out 8 */
    vuint16_t PPDO9:1;                 /* Parallel Pad Data Out 9 */
    vuint16_t PPDO10:1;                /* Parallel Pad Data Out 10 */
    vuint16_t PPDO11:1;                /* Parallel Pad Data Out 11 */
    vuint16_t PPDO12:1;                /* Parallel Pad Data Out 12 */
    vuint16_t PPDO13:1;                /* Parallel Pad Data Out 13 */
    vuint16_t PPDO14:1;                /* Parallel Pad Data Out 14 */
    vuint16_t PPDO15:1;                /* Parallel Pad Data Out 15 */
  } B;
} SIUL2_PGPDO12_tag;

typedef union SIUL2_PGPDI1_union_tag { /* SIUL2 Parallel GPIO Pad Data In Register */
  vuint16_t R;
  struct {
    vuint16_t PPDI0:1;                 /* Parallel Pad Data In 0 */
    vuint16_t PPDI1:1;                 /* Parallel Pad Data In 1 */
    vuint16_t PPDI2:1;                 /* Parallel Pad Data In 2 */
    vuint16_t PPDI3:1;                 /* Parallel Pad Data In 3 */
    vuint16_t PPDI4:1;                 /* Parallel Pad Data In 4 */
    vuint16_t PPDI5:1;                 /* Parallel Pad Data In 5 */
    vuint16_t PPDI6:1;                 /* Parallel Pad Data In 6 */
    vuint16_t PPDI7:1;                 /* Parallel Pad Data In 7 */
    vuint16_t PPDI8:1;                 /* Parallel Pad Data In 8 */
    vuint16_t PPDI9:1;                 /* Parallel Pad Data In 9 */
    vuint16_t PPDI10:1;                /* Parallel Pad Data In 10 */
    vuint16_t PPDI11:1;                /* Parallel Pad Data In 11 */
    vuint16_t PPDI12:1;                /* Parallel Pad Data In 12 */
    vuint16_t PPDI13:1;                /* Parallel Pad Data In 13 */
    vuint16_t PPDI14:1;                /* Parallel Pad Data In 14 */
    vuint16_t PPDI15:1;                /* Parallel Pad Data In 15 */
  } B;
} SIUL2_PGPDI1_tag;

typedef union SIUL2_PGPDI0_union_tag { /* SIUL2 Parallel GPIO Pad Data In Register */
  vuint16_t R;
  struct {
    vuint16_t PPDI0:1;                 /* Parallel Pad Data In 0 */
    vuint16_t PPDI1:1;                 /* Parallel Pad Data In 1 */
    vuint16_t PPDI2:1;                 /* Parallel Pad Data In 2 */
    vuint16_t PPDI3:1;                 /* Parallel Pad Data In 3 */
    vuint16_t PPDI4:1;                 /* Parallel Pad Data In 4 */
    vuint16_t PPDI5:1;                 /* Parallel Pad Data In 5 */
    vuint16_t PPDI6:1;                 /* Parallel Pad Data In 6 */
    vuint16_t PPDI7:1;                 /* Parallel Pad Data In 7 */
    vuint16_t PPDI8:1;                 /* Parallel Pad Data In 8 */
    vuint16_t PPDI9:1;                 /* Parallel Pad Data In 9 */
    vuint16_t PPDI10:1;                /* Parallel Pad Data In 10 */
    vuint16_t PPDI11:1;                /* Parallel Pad Data In 11 */
    vuint16_t PPDI12:1;                /* Parallel Pad Data In 12 */
    vuint16_t PPDI13:1;                /* Parallel Pad Data In 13 */
    vuint16_t PPDI14:1;                /* Parallel Pad Data In 14 */
    vuint16_t PPDI15:1;                /* Parallel Pad Data In 15 */
  } B;
} SIUL2_PGPDI0_tag;

typedef union SIUL2_PGPDI3_union_tag { /* SIUL2 Parallel GPIO Pad Data In Register */
  vuint16_t R;
  struct {
    vuint16_t PPDI0:1;                 /* Parallel Pad Data In 0 */
    vuint16_t PPDI1:1;                 /* Parallel Pad Data In 1 */
    vuint16_t PPDI2:1;                 /* Parallel Pad Data In 2 */
    vuint16_t PPDI3:1;                 /* Parallel Pad Data In 3 */
    vuint16_t PPDI4:1;                 /* Parallel Pad Data In 4 */
    vuint16_t PPDI5:1;                 /* Parallel Pad Data In 5 */
    vuint16_t PPDI6:1;                 /* Parallel Pad Data In 6 */
    vuint16_t PPDI7:1;                 /* Parallel Pad Data In 7 */
    vuint16_t PPDI8:1;                 /* Parallel Pad Data In 8 */
    vuint16_t PPDI9:1;                 /* Parallel Pad Data In 9 */
    vuint16_t PPDI10:1;                /* Parallel Pad Data In 10 */
    vuint16_t PPDI11:1;                /* Parallel Pad Data In 11 */
    vuint16_t PPDI12:1;                /* Parallel Pad Data In 12 */
    vuint16_t PPDI13:1;                /* Parallel Pad Data In 13 */
    vuint16_t PPDI14:1;                /* Parallel Pad Data In 14 */
    vuint16_t PPDI15:1;                /* Parallel Pad Data In 15 */
  } B;
} SIUL2_PGPDI3_tag;

typedef union SIUL2_PGPDI2_union_tag { /* SIUL2 Parallel GPIO Pad Data In Register */
  vuint16_t R;
  struct {
    vuint16_t PPDI0:1;                 /* Parallel Pad Data In 0 */
    vuint16_t PPDI1:1;                 /* Parallel Pad Data In 1 */
    vuint16_t PPDI2:1;                 /* Parallel Pad Data In 2 */
    vuint16_t PPDI3:1;                 /* Parallel Pad Data In 3 */
    vuint16_t PPDI4:1;                 /* Parallel Pad Data In 4 */
    vuint16_t PPDI5:1;                 /* Parallel Pad Data In 5 */
    vuint16_t PPDI6:1;                 /* Parallel Pad Data In 6 */
    vuint16_t PPDI7:1;                 /* Parallel Pad Data In 7 */
    vuint16_t _unused_8:1;             /* Reserved */
    vuint16_t _unused_9:1;             /* Reserved */
    vuint16_t PPDI10:1;                /* Parallel Pad Data In 10 */
    vuint16_t PPDI11:1;                /* Parallel Pad Data In 11 */
    vuint16_t PPDI12:1;                /* Parallel Pad Data In 12 */
    vuint16_t PPDI13:1;                /* Parallel Pad Data In 13 */
    vuint16_t PPDI14:1;                /* Parallel Pad Data In 14 */
    vuint16_t PPDI15:1;                /* Parallel Pad Data In 15 */
  } B;
} SIUL2_PGPDI2_tag;

typedef union SIUL2_PGPDI5_union_tag { /* SIUL2 Parallel GPIO Pad Data In Register */
  vuint16_t R;
  struct {
    vuint16_t PPDI0:1;                 /* Parallel Pad Data In 0 */
    vuint16_t PPDI1:1;                 /* Parallel Pad Data In 1 */
    vuint16_t PPDI2:1;                 /* Parallel Pad Data In 2 */
    vuint16_t PPDI3:1;                 /* Parallel Pad Data In 3 */
    vuint16_t PPDI4:1;                 /* Parallel Pad Data In 4 */
    vuint16_t PPDI5:1;                 /* Parallel Pad Data In 5 */
    vuint16_t PPDI6:1;                 /* Parallel Pad Data In 6 */
    vuint16_t PPDI7:1;                 /* Parallel Pad Data In 7 */
    vuint16_t PPDI8:1;                 /* Parallel Pad Data In 8 */
    vuint16_t PPDI9:1;                 /* Parallel Pad Data In 9 */
    vuint16_t PPDI10:1;                /* Parallel Pad Data In 10 */
    vuint16_t PPDI11:1;                /* Parallel Pad Data In 11 */
    vuint16_t PPDI12:1;                /* Parallel Pad Data In 12 */
    vuint16_t PPDI13:1;                /* Parallel Pad Data In 13 */
    vuint16_t PPDI14:1;                /* Parallel Pad Data In 14 */
    vuint16_t PPDI15:1;                /* Parallel Pad Data In 15 */
  } B;
} SIUL2_PGPDI5_tag;

typedef union SIUL2_PGPDI4_union_tag { /* SIUL2 Parallel GPIO Pad Data In Register */
  vuint16_t R;
  struct {
    vuint16_t PPDI0:1;                 /* Parallel Pad Data In 0 */
    vuint16_t PPDI1:1;                 /* Parallel Pad Data In 1 */
    vuint16_t PPDI2:1;                 /* Parallel Pad Data In 2 */
    vuint16_t PPDI3:1;                 /* Parallel Pad Data In 3 */
    vuint16_t PPDI4:1;                 /* Parallel Pad Data In 4 */
    vuint16_t PPDI5:1;                 /* Parallel Pad Data In 5 */
    vuint16_t PPDI6:1;                 /* Parallel Pad Data In 6 */
    vuint16_t PPDI7:1;                 /* Parallel Pad Data In 7 */
    vuint16_t PPDI8:1;                 /* Parallel Pad Data In 8 */
    vuint16_t PPDI9:1;                 /* Parallel Pad Data In 9 */
    vuint16_t PPDI10:1;                /* Parallel Pad Data In 10 */
    vuint16_t PPDI11:1;                /* Parallel Pad Data In 11 */
    vuint16_t PPDI12:1;                /* Parallel Pad Data In 12 */
    vuint16_t PPDI13:1;                /* Parallel Pad Data In 13 */
    vuint16_t PPDI14:1;                /* Parallel Pad Data In 14 */
    vuint16_t PPDI15:1;                /* Parallel Pad Data In 15 */
  } B;
} SIUL2_PGPDI4_tag;

typedef union SIUL2_PGPDI7_union_tag { /* SIUL2 Parallel GPIO Pad Data In Register */
  vuint16_t R;
  struct {
    vuint16_t PPDI0:1;                 /* Parallel Pad Data In 0 */
    vuint16_t PPDI1:1;                 /* Parallel Pad Data In 1 */
    vuint16_t PPDI2:1;                 /* Parallel Pad Data In 2 */
    vuint16_t PPDI3:1;                 /* Parallel Pad Data In 3 */
    vuint16_t PPDI4:1;                 /* Parallel Pad Data In 4 */
    vuint16_t PPDI5:1;                 /* Parallel Pad Data In 5 */
    vuint16_t PPDI6:1;                 /* Parallel Pad Data In 6 */
    vuint16_t PPDI7:1;                 /* Parallel Pad Data In 7 */
    vuint16_t PPDI8:1;                 /* Parallel Pad Data In 8 */
    vuint16_t PPDI9:1;                 /* Parallel Pad Data In 9 */
    vuint16_t PPDI10:1;                /* Parallel Pad Data In 10 */
    vuint16_t PPDI11:1;                /* Parallel Pad Data In 11 */
    vuint16_t PPDI12:1;                /* Parallel Pad Data In 12 */
    vuint16_t PPDI13:1;                /* Parallel Pad Data In 13 */
    vuint16_t PPDI14:1;                /* Parallel Pad Data In 14 */
    vuint16_t PPDI15:1;                /* Parallel Pad Data In 15 */
  } B;
} SIUL2_PGPDI7_tag;

typedef union SIUL2_PGPDI6_union_tag { /* SIUL2 Parallel GPIO Pad Data In Register */
  vuint16_t R;
  struct {
    vuint16_t PPDI0:1;                 /* Parallel Pad Data In 0 */
    vuint16_t PPDI1:1;                 /* Parallel Pad Data In 1 */
    vuint16_t PPDI2:1;                 /* Parallel Pad Data In 2 */
    vuint16_t PPDI3:1;                 /* Parallel Pad Data In 3 */
    vuint16_t PPDI4:1;                 /* Parallel Pad Data In 4 */
    vuint16_t PPDI5:1;                 /* Parallel Pad Data In 5 */
    vuint16_t PPDI6:1;                 /* Parallel Pad Data In 6 */
    vuint16_t PPDI7:1;                 /* Parallel Pad Data In 7 */
    vuint16_t PPDI8:1;                 /* Parallel Pad Data In 8 */
    vuint16_t PPDI9:1;                 /* Parallel Pad Data In 9 */
    vuint16_t PPDI10:1;                /* Parallel Pad Data In 10 */
    vuint16_t PPDI11:1;                /* Parallel Pad Data In 11 */
    vuint16_t PPDI12:1;                /* Parallel Pad Data In 12 */
    vuint16_t PPDI13:1;                /* Parallel Pad Data In 13 */
    vuint16_t PPDI14:1;                /* Parallel Pad Data In 14 */
    vuint16_t PPDI15:1;                /* Parallel Pad Data In 15 */
  } B;
} SIUL2_PGPDI6_tag;

typedef union SIUL2_PGPDI9_union_tag { /* SIUL2 Parallel GPIO Pad Data In Register */
  vuint16_t R;
  struct {
    vuint16_t PPDI0:1;                 /* Parallel Pad Data In 0 */
    vuint16_t PPDI1:1;                 /* Parallel Pad Data In 1 */
    vuint16_t PPDI2:1;                 /* Parallel Pad Data In 2 */
    vuint16_t PPDI3:1;                 /* Parallel Pad Data In 3 */
    vuint16_t PPDI4:1;                 /* Parallel Pad Data In 4 */
    vuint16_t PPDI5:1;                 /* Parallel Pad Data In 5 */
    vuint16_t PPDI6:1;                 /* Parallel Pad Data In 6 */
    vuint16_t PPDI7:1;                 /* Parallel Pad Data In 7 */
    vuint16_t PPDI8:1;                 /* Parallel Pad Data In 8 */
    vuint16_t PPDI9:1;                 /* Parallel Pad Data In 9 */
    vuint16_t PPDI10:1;                /* Parallel Pad Data In 10 */
    vuint16_t PPDI11:1;                /* Parallel Pad Data In 11 */
    vuint16_t PPDI12:1;                /* Parallel Pad Data In 12 */
    vuint16_t PPDI13:1;                /* Parallel Pad Data In 13 */
    vuint16_t PPDI14:1;                /* Parallel Pad Data In 14 */
    vuint16_t PPDI15:1;                /* Parallel Pad Data In 15 */
  } B;
} SIUL2_PGPDI9_tag;

typedef union SIUL2_PGPDI8_union_tag { /* SIUL2 Parallel GPIO Pad Data In Register */
  vuint16_t R;
  struct {
    vuint16_t PPDI0:1;                 /* Parallel Pad Data In 0 */
    vuint16_t PPDI1:1;                 /* Parallel Pad Data In 1 */
    vuint16_t PPDI2:1;                 /* Parallel Pad Data In 2 */
    vuint16_t PPDI3:1;                 /* Parallel Pad Data In 3 */
    vuint16_t PPDI4:1;                 /* Parallel Pad Data In 4 */
    vuint16_t PPDI5:1;                 /* Parallel Pad Data In 5 */
    vuint16_t PPDI6:1;                 /* Parallel Pad Data In 6 */
    vuint16_t PPDI7:1;                 /* Parallel Pad Data In 7 */
    vuint16_t PPDI8:1;                 /* Parallel Pad Data In 8 */
    vuint16_t PPDI9:1;                 /* Parallel Pad Data In 9 */
    vuint16_t PPDI10:1;                /* Parallel Pad Data In 10 */
    vuint16_t PPDI11:1;                /* Parallel Pad Data In 11 */
    vuint16_t PPDI12:1;                /* Parallel Pad Data In 12 */
    vuint16_t PPDI13:1;                /* Parallel Pad Data In 13 */
    vuint16_t PPDI14:1;                /* Parallel Pad Data In 14 */
    vuint16_t PPDI15:1;                /* Parallel Pad Data In 15 */
  } B;
} SIUL2_PGPDI8_tag;

typedef union SIUL2_PGPDI11_union_tag { /* SIUL2 Parallel GPIO Pad Data In Register */
  vuint16_t R;
  struct {
    vuint16_t PPDI0:1;                 /* Parallel Pad Data In 0 */
    vuint16_t PPDI1:1;                 /* Parallel Pad Data In 1 */
    vuint16_t PPDI2:1;                 /* Parallel Pad Data In 2 */
    vuint16_t PPDI3:1;                 /* Parallel Pad Data In 3 */
    vuint16_t PPDI4:1;                 /* Parallel Pad Data In 4 */
    vuint16_t PPDI5:1;                 /* Parallel Pad Data In 5 */
    vuint16_t PPDI6:1;                 /* Parallel Pad Data In 6 */
    vuint16_t PPDI7:1;                 /* Parallel Pad Data In 7 */
    vuint16_t PPDI8:1;                 /* Parallel Pad Data In 8 */
    vuint16_t PPDI9:1;                 /* Parallel Pad Data In 9 */
    vuint16_t PPDI10:1;                /* Parallel Pad Data In 10 */
    vuint16_t PPDI11:1;                /* Parallel Pad Data In 11 */
    vuint16_t PPDI12:1;                /* Parallel Pad Data In 12 */
    vuint16_t PPDI13:1;                /* Parallel Pad Data In 13 */
    vuint16_t PPDI14:1;                /* Parallel Pad Data In 14 */
    vuint16_t PPDI15:1;                /* Parallel Pad Data In 15 */
  } B;
} SIUL2_PGPDI11_tag;

typedef union SIUL2_PGPDI10_union_tag { /* SIUL2 Parallel GPIO Pad Data In Register */
  vuint16_t R;
  struct {
    vuint16_t PPDI0:1;                 /* Parallel Pad Data In 0 */
    vuint16_t PPDI1:1;                 /* Parallel Pad Data In 1 */
    vuint16_t PPDI2:1;                 /* Parallel Pad Data In 2 */
    vuint16_t PPDI3:1;                 /* Parallel Pad Data In 3 */
    vuint16_t PPDI4:1;                 /* Parallel Pad Data In 4 */
    vuint16_t PPDI5:1;                 /* Parallel Pad Data In 5 */
    vuint16_t PPDI6:1;                 /* Parallel Pad Data In 6 */
    vuint16_t PPDI7:1;                 /* Parallel Pad Data In 7 */
    vuint16_t PPDI8:1;                 /* Parallel Pad Data In 8 */
    vuint16_t PPDI9:1;                 /* Parallel Pad Data In 9 */
    vuint16_t PPDI10:1;                /* Parallel Pad Data In 10 */
    vuint16_t PPDI11:1;                /* Parallel Pad Data In 11 */
    vuint16_t PPDI12:1;                /* Parallel Pad Data In 12 */
    vuint16_t PPDI13:1;                /* Parallel Pad Data In 13 */
    vuint16_t PPDI14:1;                /* Parallel Pad Data In 14 */
    vuint16_t PPDI15:1;                /* Parallel Pad Data In 15 */
  } B;
} SIUL2_PGPDI10_tag;

typedef union SIUL2_PGPDI13_union_tag { /* SIUL2 Parallel GPIO Pad Data In Register */
  vuint16_t R;
  struct {
    vuint16_t _unused_0:1;             /* Reserved */
    vuint16_t _unused_1:1;             /* Reserved */
    vuint16_t _unused_2:1;             /* Reserved */
    vuint16_t _unused_3:1;             /* Reserved */
    vuint16_t PPDI4:1;                 /* Parallel Pad Data In 4 */
    vuint16_t PPDI5:1;                 /* Parallel Pad Data In 5 */
    vuint16_t PPDI6:1;                 /* Parallel Pad Data In 6 */
    vuint16_t PPDI7:1;                 /* Parallel Pad Data In 7 */
    vuint16_t PPDI8:1;                 /* Parallel Pad Data In 8 */
    vuint16_t PPDI9:1;                 /* Parallel Pad Data In 9 */
    vuint16_t PPDI10:1;                /* Parallel Pad Data In 10 */
    vuint16_t PPDI11:1;                /* Parallel Pad Data In 11 */
    vuint16_t PPDI12:1;                /* Parallel Pad Data In 12 */
    vuint16_t PPDI13:1;                /* Parallel Pad Data In 13 */
    vuint16_t PPDI14:1;                /* Parallel Pad Data In 14 */
    vuint16_t PPDI15:1;                /* Parallel Pad Data In 15 */
  } B;
} SIUL2_PGPDI13_tag;

typedef union SIUL2_PGPDI12_union_tag { /* SIUL2 Parallel GPIO Pad Data In Register */
  vuint16_t R;
  struct {
    vuint16_t PPDI0:1;                 /* Parallel Pad Data In 0 */
    vuint16_t PPDI1:1;                 /* Parallel Pad Data In 1 */
    vuint16_t PPDI2:1;                 /* Parallel Pad Data In 2 */
    vuint16_t PPDI3:1;                 /* Parallel Pad Data In 3 */
    vuint16_t PPDI4:1;                 /* Parallel Pad Data In 4 */
    vuint16_t PPDI5:1;                 /* Parallel Pad Data In 5 */
    vuint16_t PPDI6:1;                 /* Parallel Pad Data In 6 */
    vuint16_t PPDI7:1;                 /* Parallel Pad Data In 7 */
    vuint16_t PPDI8:1;                 /* Parallel Pad Data In 8 */
    vuint16_t PPDI9:1;                 /* Parallel Pad Data In 9 */
    vuint16_t PPDI10:1;                /* Parallel Pad Data In 10 */
    vuint16_t PPDI11:1;                /* Parallel Pad Data In 11 */
    vuint16_t PPDI12:1;                /* Parallel Pad Data In 12 */
    vuint16_t PPDI13:1;                /* Parallel Pad Data In 13 */
    vuint16_t PPDI14:1;                /* Parallel Pad Data In 14 */
    vuint16_t PPDI15:1;                /* Parallel Pad Data In 15 */
  } B;
} SIUL2_PGPDI12_tag;

typedef union SIUL2_MPGPDO_union_tag { /* SIUL2 Masked Parallel GPIO Pad Data Out Register */
  vuint32_t R;
  struct {
    vuint32_t MPPDO0:1;                /* Masked Parallel Pad Data Out 0 */
    vuint32_t MPPDO1:1;                /* Masked Parallel Pad Data Out 1 */
    vuint32_t MPPDO2:1;                /* Masked Parallel Pad Data Out 2 */
    vuint32_t MPPDO3:1;                /* Masked Parallel Pad Data Out 3 */
    vuint32_t MPPDO4:1;                /* Masked Parallel Pad Data Out 4 */
    vuint32_t MPPDO5:1;                /* Masked Parallel Pad Data Out 5 */
    vuint32_t MPPDO6:1;                /* Masked Parallel Pad Data Out 6 */
    vuint32_t MPPDO7:1;                /* Masked Parallel Pad Data Out 7 */
    vuint32_t MPPDO8:1;                /* Masked Parallel Pad Data Out 8 */
    vuint32_t MPPDO9:1;                /* Masked Parallel Pad Data Out 9 */
    vuint32_t MPPDO10:1;               /* Masked Parallel Pad Data Out 10 */
    vuint32_t MPPDO11:1;               /* Masked Parallel Pad Data Out 11 */
    vuint32_t MPPDO12:1;               /* Masked Parallel Pad Data Out 12 */
    vuint32_t MPPDO13:1;               /* Masked Parallel Pad Data Out 13 */
    vuint32_t MPPDO14:1;               /* Masked Parallel Pad Data Out 14 */
    vuint32_t MPPDO15:1;               /* Masked Parallel Pad Data Out 15 */
    vuint32_t MASK0:1;                 /* Mask Field 0 */
    vuint32_t MASK1:1;                 /* Mask Field 1 */
    vuint32_t MASK2:1;                 /* Mask Field 2 */
    vuint32_t MASK3:1;                 /* Mask Field 3 */
    vuint32_t MASK4:1;                 /* Mask Field 4 */
    vuint32_t MASK5:1;                 /* Mask Field 5 */
    vuint32_t MASK6:1;                 /* Mask Field 6 */
    vuint32_t MASK7:1;                 /* Mask Field 7 */
    vuint32_t MASK8:1;                 /* Mask Field 8 */
    vuint32_t MASK9:1;                 /* Mask Field 9 */
    vuint32_t MASK10:1;                /* Mask Field 10 */
    vuint32_t MASK11:1;                /* Mask Field 11 */
    vuint32_t MASK12:1;                /* Mask Field 12 */
    vuint32_t MASK13:1;                /* Mask Field 13 */
    vuint32_t MASK14:1;                /* Mask Field 14 */
    vuint32_t MASK15:1;                /* Mask Field 15 */
  } B;
} SIUL2_MPGPDO_tag;

struct SIUL2_tag {
  uint8_t SIUL2_reserved0[4];
  SIUL2_MIDR1_tag MIDR1;               /* SIUL2 MCU ID Register #1 */
  SIUL2_MIDR2_tag MIDR2;               /* SIUL2 MCU ID Register #2 */
  uint8_t SIUL2_reserved1[4];
  SIUL2_DISR0_tag DISR0;               /* SIUL2 DMA/Interrupt Status Flag Register0 */
  uint8_t SIUL2_reserved2[4];
  SIUL2_DIRER0_tag DIRER0;             /* SIUL2 DMA/Interrupt Request Enable Register0 */
  uint8_t SIUL2_reserved3[4];
  SIUL2_DIRSR0_tag DIRSR0;             /* SIUL2 DMA/Interrupt Request Select Register0 */
  uint8_t SIUL2_reserved4[4];
  SIUL2_IREER0_tag IREER0;             /* SIUL2 Interrupt Rising-Edge Event Enable Register 0 */
  uint8_t SIUL2_reserved5[4];
  SIUL2_IFEER0_tag IFEER0;             /* SIUL2 Interrupt Falling-Edge Event Enable Register 0 */
  uint8_t SIUL2_reserved6[4];
  SIUL2_IFER0_tag IFER0;               /* SIUL2 Interrupt Filter Enable Register 0 */
  uint8_t SIUL2_reserved7[4];
  SIUL2_IFMCR_tag IFMCR[32];           /* SIUL2 Interrupt Filter Maximum Counter Register */
  SIUL2_IFCPR_tag IFCPR;               /* SIUL2 Interrupt Filter Clock Prescaler Register */
  uint8_t SIUL2_reserved8[316];
  SIUL2_MIDR3_tag MIDR3;               /* SIUL2 MCU ID Register 3 */
  SIUL2_MIDR4_tag MIDR4;               /* SIUL2 MCU ID Register 4 */
  uint8_t SIUL2_reserved9[56];
  SIUL2_MSCR_tag MSCR[220];            /* SIUL2 Multiplexed Signal Configuration Register; Valid array indices: 0-37, 40-219 */
  uint8_t SIUL2_reserved10[1168];
  SIUL2_IMCR_tag IMCR[409];            /* SIUL2 Input Multiplexed Signal Configuration Register; Valid array indices: 0-5, 16-71, 80-103, 112-135, 144-149, 152-202, 211-268, 289-309, 315-325, 343-385, 398-408 */
  uint8_t SIUL2_reserved11[604];
  SIUL2_GPDO3_tag GPDO3;               /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO2_tag GPDO2;               /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO1_tag GPDO1;               /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO0_tag GPDO0;               /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO7_tag GPDO7;               /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO6_tag GPDO6;               /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO5_tag GPDO5;               /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO4_tag GPDO4;               /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO11_tag GPDO11;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO10_tag GPDO10;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO9_tag GPDO9;               /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO8_tag GPDO8;               /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO15_tag GPDO15;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO14_tag GPDO14;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO13_tag GPDO13;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO12_tag GPDO12;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO19_tag GPDO19;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO18_tag GPDO18;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO17_tag GPDO17;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO16_tag GPDO16;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO23_tag GPDO23;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO22_tag GPDO22;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO21_tag GPDO21;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO20_tag GPDO20;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO27_tag GPDO27;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO26_tag GPDO26;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO25_tag GPDO25;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO24_tag GPDO24;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO31_tag GPDO31;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO30_tag GPDO30;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO29_tag GPDO29;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO28_tag GPDO28;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO35_tag GPDO35;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO34_tag GPDO34;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO33_tag GPDO33;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO32_tag GPDO32;             /* SIUL2 GPIO Pad Data Output Register */
  uint8_t SIUL2_reserved12[2];
  SIUL2_GPDO37_tag GPDO37;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO36_tag GPDO36;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO43_tag GPDO43;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO42_tag GPDO42;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO41_tag GPDO41;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO40_tag GPDO40;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO47_tag GPDO47;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO46_tag GPDO46;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO45_tag GPDO45;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO44_tag GPDO44;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO51_tag GPDO51;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO50_tag GPDO50;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO49_tag GPDO49;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO48_tag GPDO48;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO55_tag GPDO55;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO54_tag GPDO54;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO53_tag GPDO53;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO52_tag GPDO52;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO59_tag GPDO59;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO58_tag GPDO58;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO57_tag GPDO57;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO56_tag GPDO56;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO63_tag GPDO63;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO62_tag GPDO62;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO61_tag GPDO61;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO60_tag GPDO60;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO67_tag GPDO67;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO66_tag GPDO66;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO65_tag GPDO65;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO64_tag GPDO64;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO71_tag GPDO71;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO70_tag GPDO70;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO69_tag GPDO69;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO68_tag GPDO68;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO75_tag GPDO75;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO74_tag GPDO74;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO73_tag GPDO73;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO72_tag GPDO72;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO79_tag GPDO79;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO78_tag GPDO78;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO77_tag GPDO77;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO76_tag GPDO76;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO83_tag GPDO83;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO82_tag GPDO82;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO81_tag GPDO81;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO80_tag GPDO80;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO87_tag GPDO87;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO86_tag GPDO86;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO85_tag GPDO85;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO84_tag GPDO84;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO91_tag GPDO91;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO90_tag GPDO90;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO89_tag GPDO89;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO88_tag GPDO88;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO95_tag GPDO95;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO94_tag GPDO94;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO93_tag GPDO93;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO92_tag GPDO92;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO99_tag GPDO99;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO98_tag GPDO98;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO97_tag GPDO97;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO96_tag GPDO96;             /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO103_tag GPDO103;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO102_tag GPDO102;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO101_tag GPDO101;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO100_tag GPDO100;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO107_tag GPDO107;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO106_tag GPDO106;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO105_tag GPDO105;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO104_tag GPDO104;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO111_tag GPDO111;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO110_tag GPDO110;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO109_tag GPDO109;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO108_tag GPDO108;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO115_tag GPDO115;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO114_tag GPDO114;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO113_tag GPDO113;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO112_tag GPDO112;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO119_tag GPDO119;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO118_tag GPDO118;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO117_tag GPDO117;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO116_tag GPDO116;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO123_tag GPDO123;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO122_tag GPDO122;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO121_tag GPDO121;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO120_tag GPDO120;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO127_tag GPDO127;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO126_tag GPDO126;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO125_tag GPDO125;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO124_tag GPDO124;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO131_tag GPDO131;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO130_tag GPDO130;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO129_tag GPDO129;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO128_tag GPDO128;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO135_tag GPDO135;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO134_tag GPDO134;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO133_tag GPDO133;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO132_tag GPDO132;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO139_tag GPDO139;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO138_tag GPDO138;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO137_tag GPDO137;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO136_tag GPDO136;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO143_tag GPDO143;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO142_tag GPDO142;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO141_tag GPDO141;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO140_tag GPDO140;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO147_tag GPDO147;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO146_tag GPDO146;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO145_tag GPDO145;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO144_tag GPDO144;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO151_tag GPDO151;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO150_tag GPDO150;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO149_tag GPDO149;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO148_tag GPDO148;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO155_tag GPDO155;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO154_tag GPDO154;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO153_tag GPDO153;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO152_tag GPDO152;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO159_tag GPDO159;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO158_tag GPDO158;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO157_tag GPDO157;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO156_tag GPDO156;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO163_tag GPDO163;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO162_tag GPDO162;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO161_tag GPDO161;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO160_tag GPDO160;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO167_tag GPDO167;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO166_tag GPDO166;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO165_tag GPDO165;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO164_tag GPDO164;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO171_tag GPDO171;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO170_tag GPDO170;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO169_tag GPDO169;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO168_tag GPDO168;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO175_tag GPDO175;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO174_tag GPDO174;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO173_tag GPDO173;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO172_tag GPDO172;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO179_tag GPDO179;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO178_tag GPDO178;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO177_tag GPDO177;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO176_tag GPDO176;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO183_tag GPDO183;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO182_tag GPDO182;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO181_tag GPDO181;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO180_tag GPDO180;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO187_tag GPDO187;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO186_tag GPDO186;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO185_tag GPDO185;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO184_tag GPDO184;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO191_tag GPDO191;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO190_tag GPDO190;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO189_tag GPDO189;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO188_tag GPDO188;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO195_tag GPDO195;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO194_tag GPDO194;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO193_tag GPDO193;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO192_tag GPDO192;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO199_tag GPDO199;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO198_tag GPDO198;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO197_tag GPDO197;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO196_tag GPDO196;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO203_tag GPDO203;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO202_tag GPDO202;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO201_tag GPDO201;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO200_tag GPDO200;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO207_tag GPDO207;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO206_tag GPDO206;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO205_tag GPDO205;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO204_tag GPDO204;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO211_tag GPDO211;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO210_tag GPDO210;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO209_tag GPDO209;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO208_tag GPDO208;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO215_tag GPDO215;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO214_tag GPDO214;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO213_tag GPDO213;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO212_tag GPDO212;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO219_tag GPDO219;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO218_tag GPDO218;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO217_tag GPDO217;           /* SIUL2 GPIO Pad Data Output Register */
  SIUL2_GPDO216_tag GPDO216;           /* SIUL2 GPIO Pad Data Output Register */
  uint8_t SIUL2_reserved13[292];
  SIUL2_GPDI3_tag GPDI3;               /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI2_tag GPDI2;               /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI1_tag GPDI1;               /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI0_tag GPDI0;               /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI7_tag GPDI7;               /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI6_tag GPDI6;               /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI5_tag GPDI5;               /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI4_tag GPDI4;               /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI11_tag GPDI11;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI10_tag GPDI10;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI9_tag GPDI9;               /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI8_tag GPDI8;               /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI15_tag GPDI15;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI14_tag GPDI14;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI13_tag GPDI13;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI12_tag GPDI12;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI19_tag GPDI19;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI18_tag GPDI18;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI17_tag GPDI17;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI16_tag GPDI16;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI23_tag GPDI23;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI22_tag GPDI22;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI21_tag GPDI21;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI20_tag GPDI20;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI27_tag GPDI27;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI26_tag GPDI26;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI25_tag GPDI25;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI24_tag GPDI24;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI31_tag GPDI31;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI30_tag GPDI30;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI29_tag GPDI29;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI28_tag GPDI28;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI35_tag GPDI35;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI34_tag GPDI34;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI33_tag GPDI33;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI32_tag GPDI32;             /* SIUL2 GPIO Pad Data Input Register */
  uint8_t SIUL2_reserved14[2];
  SIUL2_GPDI37_tag GPDI37;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI36_tag GPDI36;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI43_tag GPDI43;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI42_tag GPDI42;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI41_tag GPDI41;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI40_tag GPDI40;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI47_tag GPDI47;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI46_tag GPDI46;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI45_tag GPDI45;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI44_tag GPDI44;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI51_tag GPDI51;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI50_tag GPDI50;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI49_tag GPDI49;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI48_tag GPDI48;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI55_tag GPDI55;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI54_tag GPDI54;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI53_tag GPDI53;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI52_tag GPDI52;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI59_tag GPDI59;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI58_tag GPDI58;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI57_tag GPDI57;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI56_tag GPDI56;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI63_tag GPDI63;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI62_tag GPDI62;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI61_tag GPDI61;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI60_tag GPDI60;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI67_tag GPDI67;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI66_tag GPDI66;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI65_tag GPDI65;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI64_tag GPDI64;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI71_tag GPDI71;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI70_tag GPDI70;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI69_tag GPDI69;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI68_tag GPDI68;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI75_tag GPDI75;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI74_tag GPDI74;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI73_tag GPDI73;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI72_tag GPDI72;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI79_tag GPDI79;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI78_tag GPDI78;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI77_tag GPDI77;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI76_tag GPDI76;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI83_tag GPDI83;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI82_tag GPDI82;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI81_tag GPDI81;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI80_tag GPDI80;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI87_tag GPDI87;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI86_tag GPDI86;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI85_tag GPDI85;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI84_tag GPDI84;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI91_tag GPDI91;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI90_tag GPDI90;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI89_tag GPDI89;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI88_tag GPDI88;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI95_tag GPDI95;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI94_tag GPDI94;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI93_tag GPDI93;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI92_tag GPDI92;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI99_tag GPDI99;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI98_tag GPDI98;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI97_tag GPDI97;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI96_tag GPDI96;             /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI103_tag GPDI103;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI102_tag GPDI102;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI101_tag GPDI101;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI100_tag GPDI100;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI107_tag GPDI107;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI106_tag GPDI106;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI105_tag GPDI105;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI104_tag GPDI104;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI111_tag GPDI111;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI110_tag GPDI110;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI109_tag GPDI109;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI108_tag GPDI108;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI115_tag GPDI115;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI114_tag GPDI114;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI113_tag GPDI113;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI112_tag GPDI112;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI119_tag GPDI119;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI118_tag GPDI118;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI117_tag GPDI117;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI116_tag GPDI116;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI123_tag GPDI123;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI122_tag GPDI122;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI121_tag GPDI121;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI120_tag GPDI120;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI127_tag GPDI127;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI126_tag GPDI126;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI125_tag GPDI125;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI124_tag GPDI124;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI131_tag GPDI131;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI130_tag GPDI130;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI129_tag GPDI129;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI128_tag GPDI128;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI135_tag GPDI135;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI134_tag GPDI134;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI133_tag GPDI133;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI132_tag GPDI132;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI139_tag GPDI139;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI138_tag GPDI138;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI137_tag GPDI137;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI136_tag GPDI136;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI143_tag GPDI143;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI142_tag GPDI142;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI141_tag GPDI141;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI140_tag GPDI140;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI147_tag GPDI147;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI146_tag GPDI146;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI145_tag GPDI145;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI144_tag GPDI144;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI151_tag GPDI151;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI150_tag GPDI150;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI149_tag GPDI149;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI148_tag GPDI148;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI155_tag GPDI155;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI154_tag GPDI154;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI153_tag GPDI153;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI152_tag GPDI152;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI159_tag GPDI159;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI158_tag GPDI158;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI157_tag GPDI157;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI156_tag GPDI156;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI163_tag GPDI163;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI162_tag GPDI162;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI161_tag GPDI161;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI160_tag GPDI160;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI167_tag GPDI167;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI166_tag GPDI166;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI165_tag GPDI165;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI164_tag GPDI164;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI171_tag GPDI171;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI170_tag GPDI170;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI169_tag GPDI169;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI168_tag GPDI168;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI175_tag GPDI175;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI174_tag GPDI174;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI173_tag GPDI173;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI172_tag GPDI172;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI179_tag GPDI179;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI178_tag GPDI178;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI177_tag GPDI177;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI176_tag GPDI176;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI183_tag GPDI183;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI182_tag GPDI182;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI181_tag GPDI181;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI180_tag GPDI180;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI187_tag GPDI187;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI186_tag GPDI186;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI185_tag GPDI185;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI184_tag GPDI184;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI191_tag GPDI191;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI190_tag GPDI190;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI189_tag GPDI189;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI188_tag GPDI188;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI195_tag GPDI195;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI194_tag GPDI194;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI193_tag GPDI193;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI192_tag GPDI192;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI199_tag GPDI199;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI198_tag GPDI198;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI197_tag GPDI197;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI196_tag GPDI196;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI203_tag GPDI203;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI202_tag GPDI202;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI201_tag GPDI201;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI200_tag GPDI200;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI207_tag GPDI207;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI206_tag GPDI206;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI205_tag GPDI205;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI204_tag GPDI204;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI211_tag GPDI211;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI210_tag GPDI210;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI209_tag GPDI209;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI208_tag GPDI208;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI215_tag GPDI215;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI214_tag GPDI214;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI213_tag GPDI213;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI212_tag GPDI212;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI219_tag GPDI219;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI218_tag GPDI218;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI217_tag GPDI217;           /* SIUL2 GPIO Pad Data Input Register */
  SIUL2_GPDI216_tag GPDI216;           /* SIUL2 GPIO Pad Data Input Register */
  uint8_t SIUL2_reserved15[292];
  SIUL2_PGPDO1_tag PGPDO1;             /* SIUL2 Parallel GPIO Pad Data Out Register */
  SIUL2_PGPDO0_tag PGPDO0;             /* SIUL2 Parallel GPIO Pad Data Out Register */
  SIUL2_PGPDO3_tag PGPDO3;             /* SIUL2 Parallel GPIO Pad Data Out Register */
  SIUL2_PGPDO2_tag PGPDO2;             /* SIUL2 Parallel GPIO Pad Data Out Register */
  SIUL2_PGPDO5_tag PGPDO5;             /* SIUL2 Parallel GPIO Pad Data Out Register */
  SIUL2_PGPDO4_tag PGPDO4;             /* SIUL2 Parallel GPIO Pad Data Out Register */
  SIUL2_PGPDO7_tag PGPDO7;             /* SIUL2 Parallel GPIO Pad Data Out Register */
  SIUL2_PGPDO6_tag PGPDO6;             /* SIUL2 Parallel GPIO Pad Data Out Register */
  SIUL2_PGPDO9_tag PGPDO9;             /* SIUL2 Parallel GPIO Pad Data Out Register */
  SIUL2_PGPDO8_tag PGPDO8;             /* SIUL2 Parallel GPIO Pad Data Out Register */
  SIUL2_PGPDO11_tag PGPDO11;           /* SIUL2 Parallel GPIO Pad Data Out Register */
  SIUL2_PGPDO10_tag PGPDO10;           /* SIUL2 Parallel GPIO Pad Data Out Register */
  SIUL2_PGPDO13_tag PGPDO13;           /* SIUL2 Parallel GPIO Pad Data Out Register */
  SIUL2_PGPDO12_tag PGPDO12;           /* SIUL2 Parallel GPIO Pad Data Out Register */
  uint8_t SIUL2_reserved16[36];
  SIUL2_PGPDI1_tag PGPDI1;             /* SIUL2 Parallel GPIO Pad Data In Register */
  SIUL2_PGPDI0_tag PGPDI0;             /* SIUL2 Parallel GPIO Pad Data In Register */
  SIUL2_PGPDI3_tag PGPDI3;             /* SIUL2 Parallel GPIO Pad Data In Register */
  SIUL2_PGPDI2_tag PGPDI2;             /* SIUL2 Parallel GPIO Pad Data In Register */
  SIUL2_PGPDI5_tag PGPDI5;             /* SIUL2 Parallel GPIO Pad Data In Register */
  SIUL2_PGPDI4_tag PGPDI4;             /* SIUL2 Parallel GPIO Pad Data In Register */
  SIUL2_PGPDI7_tag PGPDI7;             /* SIUL2 Parallel GPIO Pad Data In Register */
  SIUL2_PGPDI6_tag PGPDI6;             /* SIUL2 Parallel GPIO Pad Data In Register */
  SIUL2_PGPDI9_tag PGPDI9;             /* SIUL2 Parallel GPIO Pad Data In Register */
  SIUL2_PGPDI8_tag PGPDI8;             /* SIUL2 Parallel GPIO Pad Data In Register */
  SIUL2_PGPDI11_tag PGPDI11;           /* SIUL2 Parallel GPIO Pad Data In Register */
  SIUL2_PGPDI10_tag PGPDI10;           /* SIUL2 Parallel GPIO Pad Data In Register */
  SIUL2_PGPDI13_tag PGPDI13;           /* SIUL2 Parallel GPIO Pad Data In Register */
  SIUL2_PGPDI12_tag PGPDI12;           /* SIUL2 Parallel GPIO Pad Data In Register */
  uint8_t SIUL2_reserved17[36];
  SIUL2_MPGPDO_tag MPGPDO[14];         /* SIUL2 Masked Parallel GPIO Pad Data Out Register */
};


/* ============================================================================
   =============================== Module: STCU ===============================
   ============================================================================ */

typedef union STCU_RUNSW_union_tag {   /* STCU2 Run Software */
  vuint32_t R;
  struct {
    vuint32_t RUNSW:1;
    vuint32_t _unused_1:1;             /* Reserved */
    vuint32_t _unused_2:6;             /* Reserved */
    vuint32_t LBSWPLLEN:1;
    vuint32_t MBSWPLLEN:1;
    vuint32_t _unused_10:1;            /* Reserved */
    vuint32_t _unused_11:1;            /* Reserved */
    vuint32_t _unused_12:20;           /* Reserved */
  } B;
} STCU_RUNSW_tag;

typedef union STCU_SKC_union_tag {     /* STCU2 SK Code */
  vuint32_t R;
  struct {
    vuint32_t SKC:32;                  /* STCU2 SK Code */
  } B;
} STCU_SKC_tag;

typedef union STCU_CFG_union_tag {     /* STCU2 Configuration */
  vuint32_t R;
  struct {
    vuint32_t CLK_CFG:3;
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t _unused_4:1;             /* Reserved */
    vuint32_t _unused_5:1;             /* Reserved */
    vuint32_t _unused_6:2;             /* Reserved */
    vuint32_t WRP:1;
    vuint32_t _unused_9:4;             /* Reserved */
    vuint32_t LB_DELAY:8;
    vuint32_t PTR:10;
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} STCU_CFG_tag;

typedef union STCU_WDG_union_tag {     /* STCU2 Watchdog Granularity */
  vuint32_t R;
  struct {
    vuint32_t WDGEOC:32;
  } B;
} STCU_WDG_tag;

typedef union STCU_ERR_STAT_union_tag { /* STCU2 Error */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:5;             /* Reserved */
    vuint32_t _unused_5:3;             /* Reserved */
    vuint32_t RFSF:1;
    vuint32_t UFSF:1;
    vuint32_t _unused_10:6;            /* Reserved */
    vuint32_t INVPSW:1;
    vuint32_t ENGESW:1;
    vuint32_t _unused_18:1;            /* Reserved */
    vuint32_t WDTOSW:1;
    vuint32_t LOCKESW:1;
    vuint32_t _unused_21:3;            /* Reserved */
    vuint32_t _unused_24:1;            /* Reserved */
    vuint32_t _unused_25:1;            /* Reserved */
    vuint32_t _unused_26:6;            /* Reserved */
  } B;
} STCU_ERR_STAT_tag;

typedef union STCU_ERR_FM_union_tag {  /* STCU2 Error FM */
  vuint32_t R;
  struct {
    vuint32_t INVPUFM:1;
    vuint32_t ENGEUFM:1;
    vuint32_t _unused_2:1;             /* Reserved */
    vuint32_t WDTOUFM:1;
    vuint32_t LOCKEUFM:1;
    vuint32_t _unused_5:27;            /* Reserved */
  } B;
} STCU_ERR_FM_tag;

typedef union STCU_LBSSW0_union_tag {  /* STCU2 Online LBIST Status */
  vuint32_t R;
  struct {
    vuint32_t LBSSW0:1;                /* LBSSW0 */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} STCU_LBSSW0_tag;

typedef union STCU_LBESW0_union_tag {  /* STCU2 Online LBIST End Flag */
  vuint32_t R;
  struct {
    vuint32_t LBESW0:1;                /* LBESW */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} STCU_LBESW0_tag;

typedef union STCU_LBUFM0_union_tag {  /* STCU2 Online LBIST Unrecoverable FM */
  vuint32_t R;
  struct {
    vuint32_t LBUFM0:1;
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} STCU_LBUFM0_tag;

typedef union STCU_MBSSW0_union_tag {  /* STCU2 Online MBIST Status */
  vuint32_t R;
  struct {
    vuint32_t MBSSW0:1;                /* MBSSW */
    vuint32_t MBSSW1:1;                /* MBSSW */
    vuint32_t MBSSW2:1;                /* MBSSW */
    vuint32_t MBSSW3:1;                /* MBSSW */
    vuint32_t MBSSW4:1;                /* MBSSW */
    vuint32_t MBSSW5:1;                /* MBSSW */
    vuint32_t MBSSW6:1;                /* MBSSW */
    vuint32_t MBSSW7:1;                /* MBSSW */
    vuint32_t MBSSW8:1;                /* MBSSW */
    vuint32_t MBSSW9:1;                /* MBSSW */
    vuint32_t MBSSW10:1;               /* MBSSW */
    vuint32_t MBSSW11:1;               /* MBSSW */
    vuint32_t _unused_12:20;           /* Reserved */
  } B;
} STCU_MBSSW0_tag;

typedef union STCU_MBESW0_union_tag {  /* STCU2 Online MBIST End Flag */
  vuint32_t R;
  struct {
    vuint32_t MBESW0:1;
    vuint32_t MBESW1:1;
    vuint32_t MBESW2:1;
    vuint32_t MBESW3:1;
    vuint32_t MBESW4:1;
    vuint32_t MBESW5:1;
    vuint32_t MBESW6:1;
    vuint32_t MBESW7:1;
    vuint32_t MBESW8:1;
    vuint32_t MBESW9:1;
    vuint32_t MBESW10:1;
    vuint32_t MBESW11:1;
    vuint32_t _unused_12:20;           /* Reserved */
  } B;
} STCU_MBESW0_tag;

typedef union STCU_MBUFM0_union_tag {  /* STCU2 MBIST Unrecoverable FM */
  vuint32_t R;
  struct {
    vuint32_t MBUFM0:1;                /* MBESW */
    vuint32_t MBUFM1:1;                /* MBESW */
    vuint32_t MBUFM2:1;                /* MBESW */
    vuint32_t MBUFM3:1;                /* MBESW */
    vuint32_t MBUFM4:1;                /* MBESW */
    vuint32_t MBUFM5:1;                /* MBESW */
    vuint32_t MBUFM6:1;                /* MBESW */
    vuint32_t MBUFM7:1;                /* MBESW */
    vuint32_t MBUFM8:1;                /* MBESW */
    vuint32_t MBUFM9:1;                /* MBESW */
    vuint32_t MBUFM10:1;               /* MBESW */
    vuint32_t MBUFM11:1;               /* MBESW */
    vuint32_t _unused_12:20;           /* Reserved */
  } B;
} STCU_MBUFM0_tag;

typedef union STCU_LB_CTRL_union_tag { /* STCU2 LBIST Control */
  vuint32_t R;
  struct {
    vuint32_t CWS:6;
    vuint32_t PFT:1;                   /* PFT */
    vuint32_t _unused_7:1;             /* Reserved */
    vuint32_t SCEN_ON:4;
    vuint32_t SCEN_OFF:4;
    vuint32_t SHS:3;
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t _unused_20:1;            /* Reserved */
    vuint32_t PTR:10;
    vuint32_t CSM:1;
  } B;
} STCU_LB_CTRL_tag;

typedef union STCU_LB_PCS_union_tag {  /* STCU2 LBIST PC Stop */
  vuint32_t R;
  struct {
    vuint32_t PCS:26;                  /* PCS */
    vuint32_t _unused_26:6;            /* Reserved */
  } B;
} STCU_LB_PCS_tag;

typedef union STCU_LB_MISRELSW_union_tag { /* STCU2 Online LBIST MISR Expected Low */
  vuint32_t R;
  struct {
    vuint32_t MISRESWX:32;
  } B;
} STCU_LB_MISRELSW_tag;

typedef union STCU_LB_MISREHSW_union_tag { /* STCU2 Online LBIST MISR Expected High */
  vuint32_t R;
  struct {
    vuint32_t MISRESWX:32;
  } B;
} STCU_LB_MISREHSW_tag;

typedef union STCU_LB_MISRRLSW_union_tag { /* STCU2 Online LBIST MISR Read Low */
  vuint32_t R;
  struct {
    vuint32_t MISRRSWX:32;             /* MISRRSWx */
  } B;
} STCU_LB_MISRRLSW_tag;

typedef union STCU_LB_MISRRHSW_union_tag { /* STCU2 Online LBIST MISR Read High */
  vuint32_t R;
  struct {
    vuint32_t MISRRSWX:32;             /* MISRRSWx */
  } B;
} STCU_LB_MISRRHSW_tag;

typedef struct STCU_LB_struct_tag {
  STCU_LB_CTRL_tag CTRL;               /* STCU2 LBIST Control */
  STCU_LB_PCS_tag PCS;                 /* STCU2 LBIST PC Stop */
  uint8_t LB_reserved0[24];
  STCU_LB_MISRELSW_tag MISRELSW;       /* STCU2 Online LBIST MISR Expected Low */
  STCU_LB_MISREHSW_tag MISREHSW;       /* STCU2 Online LBIST MISR Expected High */
  STCU_LB_MISRRLSW_tag MISRRLSW;       /* STCU2 Online LBIST MISR Read Low */
  STCU_LB_MISRRHSW_tag MISRRHSW;       /* STCU2 Online LBIST MISR Read High */
} STCU_LB_tag;

typedef union STCU_ALGOSEL_union_tag { /* STCU2 Algorithm Select */
  vuint32_t R;
  struct {
    vuint32_t ALGOSEL0:1;              /* Algorithm Select */
    vuint32_t ALGOSEL1:1;              /* Algorithm Select */
    vuint32_t ALGOSEL2:1;              /* Algorithm Select */
    vuint32_t ALGOSEL3:1;              /* Algorithm Select */
    vuint32_t ALGOSEL4:1;              /* Algorithm Select */
    vuint32_t ALGOSEL5:1;              /* Algorithm Select */
    vuint32_t ALGOSEL6:1;              /* Algorithm Select */
    vuint32_t ALGOSEL7:1;              /* Algorithm Select */
    vuint32_t ALGOSEL8:1;              /* Algorithm Select */
    vuint32_t ALGOSEL9:1;              /* Algorithm Select */
    vuint32_t ALGOSEL10:1;             /* Algorithm Select */
    vuint32_t ALGOSEL11:1;             /* Algorithm Select */
    vuint32_t ALGOSEL12:1;             /* Algorithm Select */
    vuint32_t ALGOSEL13:1;             /* Algorithm Select */
    vuint32_t ALGOSEL14:1;             /* Algorithm Select */
    vuint32_t ALGOSEL15:1;             /* Algorithm Select */
    vuint32_t ALGOSEL16:1;             /* Algorithm Select */
    vuint32_t ALGOSEL17:1;             /* Algorithm Select */
    vuint32_t ALGOSEL18:1;             /* Algorithm Select */
    vuint32_t ALGOSEL19:1;             /* Algorithm Select */
    vuint32_t ALGOSEL20:1;             /* Algorithm Select */
    vuint32_t ALGOSEL21:1;             /* Algorithm Select */
    vuint32_t ALGOSEL22:1;             /* Algorithm Select */
    vuint32_t ALGOSEL23:1;             /* Algorithm Select */
    vuint32_t ALGOSEL24:1;             /* Algorithm Select */
    vuint32_t ALGOSEL25:1;             /* Algorithm Select */
    vuint32_t ALGOSEL26:1;             /* Algorithm Select */
    vuint32_t ALGOSEL27:1;             /* Algorithm Select */
    vuint32_t ALGOSEL28:1;             /* Algorithm Select */
    vuint32_t ALGOSEL29:1;             /* Algorithm Select */
    vuint32_t ALGOSEL30:1;             /* Algorithm Select */
    vuint32_t ALGOSEL31:1;             /* Algorithm Select */
  } B;
} STCU_ALGOSEL_tag;

typedef union STCU_STGGR_union_tag {   /* STCU2 MBIST Stagger */
  vuint32_t R;
  struct {
    vuint32_t STAG:32;                 /* STAG */
  } B;
} STCU_STGGR_tag;

typedef union STCU_BSTART_union_tag {  /* STCU2 BIST Start */
  vuint32_t R;
  struct {
    vuint32_t BSTART0:1;               /* BIST Start */
    vuint32_t BSTART1:1;               /* BIST Start */
    vuint32_t BSTART2:1;               /* BIST Start */
    vuint32_t BSTART3:1;               /* BIST Start */
    vuint32_t BSTART4:1;               /* BIST Start */
    vuint32_t BSTART5:1;               /* BIST Start */
    vuint32_t BSTART6:1;               /* BIST Start */
    vuint32_t BSTART7:1;               /* BIST Start */
    vuint32_t BSTART8:1;               /* BIST Start */
    vuint32_t BSTART9:1;               /* BIST Start */
    vuint32_t BSTART10:1;              /* BIST Start */
    vuint32_t BSTART11:1;              /* BIST Start */
    vuint32_t BSTART12:1;              /* BIST Start */
    vuint32_t BSTART13:1;              /* BIST Start */
    vuint32_t BSTART14:1;              /* BIST Start */
    vuint32_t BSTART15:1;              /* BIST Start */
    vuint32_t BSTART16:1;              /* BIST Start */
    vuint32_t BSTART17:1;              /* BIST Start */
    vuint32_t BSTART18:1;              /* BIST Start */
    vuint32_t BSTART19:1;              /* BIST Start */
    vuint32_t BSTART20:1;              /* BIST Start */
    vuint32_t BSTART21:1;              /* BIST Start */
    vuint32_t BSTART22:1;              /* BIST Start */
    vuint32_t BSTART23:1;              /* BIST Start */
    vuint32_t BSTART24:1;              /* BIST Start */
    vuint32_t BSTART25:1;              /* BIST Start */
    vuint32_t BSTART26:1;              /* BIST Start */
    vuint32_t BSTART27:1;              /* BIST Start */
    vuint32_t BSTART28:1;              /* BIST Start */
    vuint32_t BSTART29:1;              /* BIST Start */
    vuint32_t BSTART30:1;              /* BIST Start */
    vuint32_t BSTART31:1;              /* BIST Start */
  } B;
} STCU_BSTART_tag;

typedef union STCU_MB_CTRL_union_tag { /* STCU2 MBIST Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:20;            /* Reserved */
    vuint32_t BSEL:1;                  /* BSEL */
    vuint32_t PTR:10;                  /* PTR */
    vuint32_t CSM:1;                   /* CSM */
  } B;
} STCU_MB_CTRL_tag;

struct STCU_tag {
  uint8_t STCU_reserved0[4];
  STCU_RUNSW_tag RUNSW;                /* STCU2 Run Software */
  STCU_SKC_tag SKC;                    /* STCU2 SK Code */
  STCU_CFG_tag CFG;                    /* STCU2 Configuration */
  uint8_t STCU_reserved1[4];
  STCU_WDG_tag WDG;                    /* STCU2 Watchdog Granularity */
  uint8_t STCU_reserved2[12];
  STCU_ERR_STAT_tag ERR_STAT;          /* STCU2 Error */
  STCU_ERR_FM_tag ERR_FM;              /* STCU2 Error FM */
  uint8_t STCU_reserved3[32];
  STCU_LBSSW0_tag LBSSW0;              /* STCU2 Online LBIST Status */
  uint8_t STCU_reserved4[12];
  STCU_LBESW0_tag LBESW0;              /* STCU2 Online LBIST End Flag */
  uint8_t STCU_reserved5[28];
  STCU_LBUFM0_tag LBUFM0;              /* STCU2 Online LBIST Unrecoverable FM */
  uint8_t STCU_reserved6[140];
  STCU_MBSSW0_tag MBSSW0;              /* STCU2 Online MBIST Status */
  uint8_t STCU_reserved7[60];
  STCU_MBESW0_tag MBESW0;              /* STCU2 Online MBIST End Flag */
  uint8_t STCU_reserved8[60];
  STCU_MBUFM0_tag MBUFM0;              /* STCU2 MBIST Unrecoverable FM */
  uint8_t STCU_reserved9[112];
  STCU_LB_tag LB[1];
  uint8_t STCU_reserved10[8144];
  STCU_ALGOSEL_tag ALGOSEL;            /* STCU2 Algorithm Select */
  uint8_t STCU_reserved11[8];
  STCU_STGGR_tag STGGR;                /* STCU2 MBIST Stagger */
  STCU_BSTART_tag BSTART;              /* STCU2 BIST Start */
  STCU_MB_CTRL_tag MB_CTRL[12];        /* STCU2 MBIST Control */
};


/* ============================================================================
   =============================== Module: STM ================================
   ============================================================================ */

typedef union STM_CR_union_tag {       /* Control */
  vuint32_t R;
  struct {
    vuint32_t TEN:1;                   /* Timer Enable */
    vuint32_t FRZ:1;                   /* Freeze */
    vuint32_t _unused_2:6;             /* Reserved */
    vuint32_t CPS:8;                   /* Counter Prescaler */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} STM_CR_tag;

typedef union STM_CNT_union_tag {      /* Count */
  vuint32_t R;
  struct {
    vuint32_t CNT:32;                  /* Timer Count */
  } B;
} STM_CNT_tag;

typedef union STM_CHANNEL_CCR_union_tag { /* Channel Control */
  vuint32_t R;
  struct {
    vuint32_t CEN:1;                   /* Channel Enable */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} STM_CHANNEL_CCR_tag;

typedef union STM_CHANNEL_CIR_union_tag { /* Channel Interrupt */
  vuint32_t R;
  struct {
    vuint32_t CIF:1;                   /* Channel Interrupt Flag */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} STM_CHANNEL_CIR_tag;

typedef union STM_CHANNEL_CMP_union_tag { /* Channel Compare */
  vuint32_t R;
  struct {
    vuint32_t CMP:32;                  /* Channel Compare */
  } B;
} STM_CHANNEL_CMP_tag;

typedef struct STM_CHANNEL_struct_tag {
  STM_CHANNEL_CCR_tag CCR;             /* Channel Control */
  STM_CHANNEL_CIR_tag CIR;             /* Channel Interrupt */
  STM_CHANNEL_CMP_tag CMP;             /* Channel Compare */
  uint8_t CHANNEL_reserved0[4];
} STM_CHANNEL_tag;

struct STM_tag {
  STM_CR_tag CR;                       /* Control */
  STM_CNT_tag CNT;                     /* Count */
  uint8_t STM_reserved0[8];
  STM_CHANNEL_tag CHANNEL[4];
};


/* ============================================================================
   =============================== Module: SWT ================================
   ============================================================================ */

typedef union SWT_CR_union_tag {       /* Control */
  vuint32_t R;
  struct {
    vuint32_t WEN:1;                   /* Watchdog Enable */
    vuint32_t FRZ:1;                   /* Debug Mode Control */
    vuint32_t STP:1;                   /* Stop Mode Control */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t SLK:1;                   /* Soft Lock */
    vuint32_t HLK:1;                   /* Hard Lock */
    vuint32_t ITR:1;                   /* Interrupt Then Reset Request */
    vuint32_t WND:1;                   /* Window Mode */
    vuint32_t RIA:1;                   /* Reset on Invalid Access */
    vuint32_t SMD:2;                   /* Service Mode */
    vuint32_t _unused_11:13;           /* Reserved */
    vuint32_t MAP7:1;                  /* Master Access Protection 7 */
    vuint32_t MAP6:1;                  /* Master Access Protection 6 */
    vuint32_t MAP5:1;                  /* Master Access Protection 5 */
    vuint32_t MAP4:1;                  /* Master Access Protection 4 */
    vuint32_t MAP3:1;                  /* Master Access Protection 3 */
    vuint32_t MAP2:1;                  /* Master Access Protection 2 */
    vuint32_t MAP1:1;                  /* Master Access Protection 1 */
    vuint32_t MAP0:1;                  /* Master Access Protection 0 */
  } B;
} SWT_CR_tag;

typedef union SWT_IR_union_tag {       /* Interrupt */
  vuint32_t R;
  struct {
    vuint32_t TIF:1;                   /* Timeout Interrupt Flag */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} SWT_IR_tag;

typedef union SWT_TO_union_tag {       /* Timeout */
  vuint32_t R;
  struct {
    vuint32_t WTO:32;                  /* Watchdog Timeout */
  } B;
} SWT_TO_tag;

typedef union SWT_WN_union_tag {       /* Window */
  vuint32_t R;
  struct {
    vuint32_t WST:32;                  /* Window Start Value */
  } B;
} SWT_WN_tag;

typedef union SWT_SR_union_tag {       /* Service */
  vuint32_t R;
  struct {
    vuint32_t WSC:16;                  /* Watchdog Service Code */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} SWT_SR_tag;

typedef union SWT_CO_union_tag {       /* Counter Output */
  vuint32_t R;
  struct {
    vuint32_t CNT:32;                  /* Watchdog Count */
  } B;
} SWT_CO_tag;

typedef union SWT_SK_union_tag {       /* Service Key */
  vuint32_t R;
  struct {
    vuint32_t SK:16;                   /* Service Key */
    vuint32_t _unused_16:16;           /* Reserved */
  } B;
} SWT_SK_tag;

typedef union SWT_RRR_union_tag {      /* Reset Request */
  vuint32_t R;
  struct {
    vuint32_t RRF:1;                   /* Reset Request Flag */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} SWT_RRR_tag;

struct SWT_tag {
  SWT_CR_tag CR;                       /* Control */
  SWT_IR_tag IR;                       /* Interrupt */
  SWT_TO_tag TO;                       /* Timeout */
  SWT_WN_tag WN;                       /* Window */
  SWT_SR_tag SR;                       /* Service */
  SWT_CO_tag CO;                       /* Counter Output */
  SWT_SK_tag SK;                       /* Service Key */
  SWT_RRR_tag RRR;                     /* Reset Request */
};


/* ============================================================================
   =============================== Module: SXOSC ==============================
   ============================================================================ */

typedef union SXOSC_SXOSC_CTRL_union_tag { /* Oscillator Control */
  vuint32_t R;
  struct {
    vuint32_t OSCON:1;                 /* Crystal Oscillator Power-Down Control */
    vuint32_t _unused_1:5;
    vuint32_t _unused_6:2;
    vuint32_t _unused_8:8;
    vuint32_t EOCV:8;                  /* End Of Count Value */
    vuint32_t _unused_24:2;
    vuint32_t _unused_26:2;
    vuint32_t _unused_28:4;
  } B;
} SXOSC_SXOSC_CTRL_tag;

typedef union SXOSC_SXOSC_STAT_union_tag { /* Oscillator Status */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:31;
    vuint32_t OSC_STAT:1;              /* Crystal Oscillator Status */
  } B;
} SXOSC_SXOSC_STAT_tag;

struct SXOSC_tag {
  SXOSC_SXOSC_CTRL_tag SXOSC_CTRL;     /* Oscillator Control */
  SXOSC_SXOSC_STAT_tag SXOSC_STAT;     /* Oscillator Status */
};


/* ============================================================================
   =============================== Module: TCD ================================
   ============================================================================ */

typedef union TCD_CH0_CSR_union_tag {  /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ERQ:1;                   /* Enable DMA Request */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t _unused_4:26;            /* Reserved */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t ACTIVE:1;                /* Channel Active */
  } B;
} TCD_CH0_CSR_tag;

typedef union TCD_CH0_ES_union_tag {   /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t DBE:1;                   /* Destination Bus Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t _unused_8:23;            /* Reserved */
    vuint32_t ERR:1;                   /* Error In Channel */
  } B;
} TCD_CH0_ES_tag;

typedef union TCD_CH0_INT_union_tag {  /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t INT:1;                   /* Interrupt Request */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} TCD_CH0_INT_tag;

typedef union TCD_CH0_SBR_union_tag {  /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t MID:4;                   /* Master ID */
    vuint32_t _unused_4:11;            /* Reserved */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} TCD_CH0_SBR_tag;

typedef union TCD_CH0_PRI_union_tag {  /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t APL:3;                   /* Arbitration Priority Level */
    vuint32_t _unused_3:27;            /* Reserved */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
  } B;
} TCD_CH0_PRI_tag;

typedef union TCD_TCD0_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} TCD_TCD0_SADDR_tag;

typedef union TCD_TCD0_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} TCD_TCD0_SOFF_tag;

typedef union TCD_TCD0_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t SMOD:5;                  /* Source Address Modulo */
  } B;
} TCD_TCD0_ATTR_tag;

typedef union TCD_NBYTES0_TCD0_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES0_TCD0_NBYTES_MLOFFNO_tag;

typedef union TCD_NBYTES0_TCD0_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES0_TCD0_NBYTES_MLOFFYES_tag;

typedef union TCD_NBYTES0_union_tag {
  TCD_NBYTES0_TCD0_NBYTES_MLOFFNO_tag TCD0_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  TCD_NBYTES0_TCD0_NBYTES_MLOFFYES_tag TCD0_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} TCD_NBYTES0_tag;

typedef union TCD_TCD0_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} TCD_TCD0_SLAST_SDA_tag;

typedef union TCD_TCD0_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} TCD_TCD0_DADDR_tag;

typedef union TCD_TCD0_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} TCD_TCD0_DOFF_tag;

typedef union TCD_CITER0_TCD0_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:15;                /* Current Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER0_TCD0_CITER_ELINKNO_tag;

typedef union TCD_CITER0_TCD0_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER0_TCD0_CITER_ELINKYES_tag;

typedef union TCD_CITER0_union_tag {
  TCD_CITER0_TCD0_CITER_ELINKNO_tag TCD0_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_CITER0_TCD0_CITER_ELINKYES_tag TCD0_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_CITER0_tag;

typedef union TCD_TCD0_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} TCD_TCD0_DLAST_SGA_tag;

typedef union TCD_TCD0_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t START:1;                 /* Channel Start */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t _unused_13:1;            /* Reserved */
    vuint16_t BWC:2;                   /* Bandwidth Control */
  } B;
} TCD_TCD0_CSR_tag;

typedef union TCD_BITER0_TCD0_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enables Link */
  } B;
} TCD_BITER0_TCD0_BITER_ELINKNO_tag;

typedef union TCD_BITER0_TCD0_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_BITER0_TCD0_BITER_ELINKYES_tag;

typedef union TCD_BITER0_union_tag {
  TCD_BITER0_TCD0_BITER_ELINKNO_tag TCD0_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_BITER0_TCD0_BITER_ELINKYES_tag TCD0_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_BITER0_tag;

typedef union TCD_CH1_CSR_union_tag {  /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ERQ:1;                   /* Enable DMA Request */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t _unused_4:26;            /* Reserved */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t ACTIVE:1;                /* Channel Active */
  } B;
} TCD_CH1_CSR_tag;

typedef union TCD_CH1_ES_union_tag {   /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t DBE:1;                   /* Destination Bus Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t _unused_8:23;            /* Reserved */
    vuint32_t ERR:1;                   /* Error In Channel */
  } B;
} TCD_CH1_ES_tag;

typedef union TCD_CH1_INT_union_tag {  /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t INT:1;                   /* Interrupt Request */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} TCD_CH1_INT_tag;

typedef union TCD_CH1_SBR_union_tag {  /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t MID:4;                   /* Master ID */
    vuint32_t _unused_4:11;            /* Reserved */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} TCD_CH1_SBR_tag;

typedef union TCD_CH1_PRI_union_tag {  /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t APL:3;                   /* Arbitration Priority Level */
    vuint32_t _unused_3:27;            /* Reserved */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
  } B;
} TCD_CH1_PRI_tag;

typedef union TCD_TCD1_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} TCD_TCD1_SADDR_tag;

typedef union TCD_TCD1_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} TCD_TCD1_SOFF_tag;

typedef union TCD_TCD1_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t SMOD:5;                  /* Source Address Modulo */
  } B;
} TCD_TCD1_ATTR_tag;

typedef union TCD_NBYTES1_TCD1_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES1_TCD1_NBYTES_MLOFFNO_tag;

typedef union TCD_NBYTES1_TCD1_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES1_TCD1_NBYTES_MLOFFYES_tag;

typedef union TCD_NBYTES1_union_tag {
  TCD_NBYTES1_TCD1_NBYTES_MLOFFNO_tag TCD1_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  TCD_NBYTES1_TCD1_NBYTES_MLOFFYES_tag TCD1_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} TCD_NBYTES1_tag;

typedef union TCD_TCD1_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} TCD_TCD1_SLAST_SDA_tag;

typedef union TCD_TCD1_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} TCD_TCD1_DADDR_tag;

typedef union TCD_TCD1_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} TCD_TCD1_DOFF_tag;

typedef union TCD_CITER1_TCD1_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:15;                /* Current Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER1_TCD1_CITER_ELINKNO_tag;

typedef union TCD_CITER1_TCD1_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER1_TCD1_CITER_ELINKYES_tag;

typedef union TCD_CITER1_union_tag {
  TCD_CITER1_TCD1_CITER_ELINKNO_tag TCD1_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_CITER1_TCD1_CITER_ELINKYES_tag TCD1_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_CITER1_tag;

typedef union TCD_TCD1_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} TCD_TCD1_DLAST_SGA_tag;

typedef union TCD_TCD1_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t START:1;                 /* Channel Start */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t _unused_13:1;            /* Reserved */
    vuint16_t BWC:2;                   /* Bandwidth Control */
  } B;
} TCD_TCD1_CSR_tag;

typedef union TCD_BITER1_TCD1_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enables Link */
  } B;
} TCD_BITER1_TCD1_BITER_ELINKNO_tag;

typedef union TCD_BITER1_TCD1_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_BITER1_TCD1_BITER_ELINKYES_tag;

typedef union TCD_BITER1_union_tag {
  TCD_BITER1_TCD1_BITER_ELINKNO_tag TCD1_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_BITER1_TCD1_BITER_ELINKYES_tag TCD1_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_BITER1_tag;

typedef union TCD_CH2_CSR_union_tag {  /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ERQ:1;                   /* Enable DMA Request */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t _unused_4:26;            /* Reserved */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t ACTIVE:1;                /* Channel Active */
  } B;
} TCD_CH2_CSR_tag;

typedef union TCD_CH2_ES_union_tag {   /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t DBE:1;                   /* Destination Bus Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t _unused_8:23;            /* Reserved */
    vuint32_t ERR:1;                   /* Error In Channel */
  } B;
} TCD_CH2_ES_tag;

typedef union TCD_CH2_INT_union_tag {  /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t INT:1;                   /* Interrupt Request */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} TCD_CH2_INT_tag;

typedef union TCD_CH2_SBR_union_tag {  /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t MID:4;                   /* Master ID */
    vuint32_t _unused_4:11;            /* Reserved */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} TCD_CH2_SBR_tag;

typedef union TCD_CH2_PRI_union_tag {  /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t APL:3;                   /* Arbitration Priority Level */
    vuint32_t _unused_3:27;            /* Reserved */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
  } B;
} TCD_CH2_PRI_tag;

typedef union TCD_TCD2_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} TCD_TCD2_SADDR_tag;

typedef union TCD_TCD2_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} TCD_TCD2_SOFF_tag;

typedef union TCD_TCD2_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t SMOD:5;                  /* Source Address Modulo */
  } B;
} TCD_TCD2_ATTR_tag;

typedef union TCD_NBYTES2_TCD2_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES2_TCD2_NBYTES_MLOFFNO_tag;

typedef union TCD_NBYTES2_TCD2_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES2_TCD2_NBYTES_MLOFFYES_tag;

typedef union TCD_NBYTES2_union_tag {
  TCD_NBYTES2_TCD2_NBYTES_MLOFFNO_tag TCD2_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  TCD_NBYTES2_TCD2_NBYTES_MLOFFYES_tag TCD2_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} TCD_NBYTES2_tag;

typedef union TCD_TCD2_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} TCD_TCD2_SLAST_SDA_tag;

typedef union TCD_TCD2_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} TCD_TCD2_DADDR_tag;

typedef union TCD_TCD2_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} TCD_TCD2_DOFF_tag;

typedef union TCD_CITER2_TCD2_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:15;                /* Current Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER2_TCD2_CITER_ELINKNO_tag;

typedef union TCD_CITER2_TCD2_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER2_TCD2_CITER_ELINKYES_tag;

typedef union TCD_CITER2_union_tag {
  TCD_CITER2_TCD2_CITER_ELINKNO_tag TCD2_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_CITER2_TCD2_CITER_ELINKYES_tag TCD2_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_CITER2_tag;

typedef union TCD_TCD2_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} TCD_TCD2_DLAST_SGA_tag;

typedef union TCD_TCD2_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t START:1;                 /* Channel Start */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t _unused_13:1;            /* Reserved */
    vuint16_t BWC:2;                   /* Bandwidth Control */
  } B;
} TCD_TCD2_CSR_tag;

typedef union TCD_BITER2_TCD2_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enables Link */
  } B;
} TCD_BITER2_TCD2_BITER_ELINKNO_tag;

typedef union TCD_BITER2_TCD2_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_BITER2_TCD2_BITER_ELINKYES_tag;

typedef union TCD_BITER2_union_tag {
  TCD_BITER2_TCD2_BITER_ELINKNO_tag TCD2_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_BITER2_TCD2_BITER_ELINKYES_tag TCD2_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_BITER2_tag;

typedef union TCD_CH3_CSR_union_tag {  /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ERQ:1;                   /* Enable DMA Request */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t _unused_4:26;            /* Reserved */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t ACTIVE:1;                /* Channel Active */
  } B;
} TCD_CH3_CSR_tag;

typedef union TCD_CH3_ES_union_tag {   /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t DBE:1;                   /* Destination Bus Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t _unused_8:23;            /* Reserved */
    vuint32_t ERR:1;                   /* Error In Channel */
  } B;
} TCD_CH3_ES_tag;

typedef union TCD_CH3_INT_union_tag {  /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t INT:1;                   /* Interrupt Request */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} TCD_CH3_INT_tag;

typedef union TCD_CH3_SBR_union_tag {  /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t MID:4;                   /* Master ID */
    vuint32_t _unused_4:11;            /* Reserved */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} TCD_CH3_SBR_tag;

typedef union TCD_CH3_PRI_union_tag {  /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t APL:3;                   /* Arbitration Priority Level */
    vuint32_t _unused_3:27;            /* Reserved */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
  } B;
} TCD_CH3_PRI_tag;

typedef union TCD_TCD3_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} TCD_TCD3_SADDR_tag;

typedef union TCD_TCD3_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} TCD_TCD3_SOFF_tag;

typedef union TCD_TCD3_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t SMOD:5;                  /* Source Address Modulo */
  } B;
} TCD_TCD3_ATTR_tag;

typedef union TCD_NBYTES3_TCD3_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES3_TCD3_NBYTES_MLOFFNO_tag;

typedef union TCD_NBYTES3_TCD3_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES3_TCD3_NBYTES_MLOFFYES_tag;

typedef union TCD_NBYTES3_union_tag {
  TCD_NBYTES3_TCD3_NBYTES_MLOFFNO_tag TCD3_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  TCD_NBYTES3_TCD3_NBYTES_MLOFFYES_tag TCD3_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} TCD_NBYTES3_tag;

typedef union TCD_TCD3_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} TCD_TCD3_SLAST_SDA_tag;

typedef union TCD_TCD3_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} TCD_TCD3_DADDR_tag;

typedef union TCD_TCD3_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} TCD_TCD3_DOFF_tag;

typedef union TCD_CITER3_TCD3_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:15;                /* Current Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER3_TCD3_CITER_ELINKNO_tag;

typedef union TCD_CITER3_TCD3_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER3_TCD3_CITER_ELINKYES_tag;

typedef union TCD_CITER3_union_tag {
  TCD_CITER3_TCD3_CITER_ELINKNO_tag TCD3_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_CITER3_TCD3_CITER_ELINKYES_tag TCD3_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_CITER3_tag;

typedef union TCD_TCD3_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} TCD_TCD3_DLAST_SGA_tag;

typedef union TCD_TCD3_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t START:1;                 /* Channel Start */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t _unused_13:1;            /* Reserved */
    vuint16_t BWC:2;                   /* Bandwidth Control */
  } B;
} TCD_TCD3_CSR_tag;

typedef union TCD_BITER3_TCD3_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enables Link */
  } B;
} TCD_BITER3_TCD3_BITER_ELINKNO_tag;

typedef union TCD_BITER3_TCD3_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_BITER3_TCD3_BITER_ELINKYES_tag;

typedef union TCD_BITER3_union_tag {
  TCD_BITER3_TCD3_BITER_ELINKNO_tag TCD3_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_BITER3_TCD3_BITER_ELINKYES_tag TCD3_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_BITER3_tag;

typedef union TCD_CH4_CSR_union_tag {  /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ERQ:1;                   /* Enable DMA Request */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t _unused_4:26;            /* Reserved */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t ACTIVE:1;                /* Channel Active */
  } B;
} TCD_CH4_CSR_tag;

typedef union TCD_CH4_ES_union_tag {   /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t DBE:1;                   /* Destination Bus Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t _unused_8:23;            /* Reserved */
    vuint32_t ERR:1;                   /* Error In Channel */
  } B;
} TCD_CH4_ES_tag;

typedef union TCD_CH4_INT_union_tag {  /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t INT:1;                   /* Interrupt Request */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} TCD_CH4_INT_tag;

typedef union TCD_CH4_SBR_union_tag {  /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t MID:4;                   /* Master ID */
    vuint32_t _unused_4:11;            /* Reserved */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} TCD_CH4_SBR_tag;

typedef union TCD_CH4_PRI_union_tag {  /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t APL:3;                   /* Arbitration Priority Level */
    vuint32_t _unused_3:27;            /* Reserved */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
  } B;
} TCD_CH4_PRI_tag;

typedef union TCD_TCD4_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} TCD_TCD4_SADDR_tag;

typedef union TCD_TCD4_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} TCD_TCD4_SOFF_tag;

typedef union TCD_TCD4_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t SMOD:5;                  /* Source Address Modulo */
  } B;
} TCD_TCD4_ATTR_tag;

typedef union TCD_NBYTES4_TCD4_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES4_TCD4_NBYTES_MLOFFNO_tag;

typedef union TCD_NBYTES4_TCD4_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES4_TCD4_NBYTES_MLOFFYES_tag;

typedef union TCD_NBYTES4_union_tag {
  TCD_NBYTES4_TCD4_NBYTES_MLOFFNO_tag TCD4_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  TCD_NBYTES4_TCD4_NBYTES_MLOFFYES_tag TCD4_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} TCD_NBYTES4_tag;

typedef union TCD_TCD4_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} TCD_TCD4_SLAST_SDA_tag;

typedef union TCD_TCD4_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} TCD_TCD4_DADDR_tag;

typedef union TCD_TCD4_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} TCD_TCD4_DOFF_tag;

typedef union TCD_CITER4_TCD4_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:15;                /* Current Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER4_TCD4_CITER_ELINKNO_tag;

typedef union TCD_CITER4_TCD4_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER4_TCD4_CITER_ELINKYES_tag;

typedef union TCD_CITER4_union_tag {
  TCD_CITER4_TCD4_CITER_ELINKNO_tag TCD4_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_CITER4_TCD4_CITER_ELINKYES_tag TCD4_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_CITER4_tag;

typedef union TCD_TCD4_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} TCD_TCD4_DLAST_SGA_tag;

typedef union TCD_TCD4_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t START:1;                 /* Channel Start */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t _unused_13:1;            /* Reserved */
    vuint16_t BWC:2;                   /* Bandwidth Control */
  } B;
} TCD_TCD4_CSR_tag;

typedef union TCD_BITER4_TCD4_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enables Link */
  } B;
} TCD_BITER4_TCD4_BITER_ELINKNO_tag;

typedef union TCD_BITER4_TCD4_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_BITER4_TCD4_BITER_ELINKYES_tag;

typedef union TCD_BITER4_union_tag {
  TCD_BITER4_TCD4_BITER_ELINKNO_tag TCD4_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_BITER4_TCD4_BITER_ELINKYES_tag TCD4_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_BITER4_tag;

typedef union TCD_CH5_CSR_union_tag {  /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ERQ:1;                   /* Enable DMA Request */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t _unused_4:26;            /* Reserved */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t ACTIVE:1;                /* Channel Active */
  } B;
} TCD_CH5_CSR_tag;

typedef union TCD_CH5_ES_union_tag {   /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t DBE:1;                   /* Destination Bus Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t _unused_8:23;            /* Reserved */
    vuint32_t ERR:1;                   /* Error In Channel */
  } B;
} TCD_CH5_ES_tag;

typedef union TCD_CH5_INT_union_tag {  /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t INT:1;                   /* Interrupt Request */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} TCD_CH5_INT_tag;

typedef union TCD_CH5_SBR_union_tag {  /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t MID:4;                   /* Master ID */
    vuint32_t _unused_4:11;            /* Reserved */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} TCD_CH5_SBR_tag;

typedef union TCD_CH5_PRI_union_tag {  /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t APL:3;                   /* Arbitration Priority Level */
    vuint32_t _unused_3:27;            /* Reserved */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
  } B;
} TCD_CH5_PRI_tag;

typedef union TCD_TCD5_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} TCD_TCD5_SADDR_tag;

typedef union TCD_TCD5_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} TCD_TCD5_SOFF_tag;

typedef union TCD_TCD5_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t SMOD:5;                  /* Source Address Modulo */
  } B;
} TCD_TCD5_ATTR_tag;

typedef union TCD_NBYTES5_TCD5_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES5_TCD5_NBYTES_MLOFFNO_tag;

typedef union TCD_NBYTES5_TCD5_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES5_TCD5_NBYTES_MLOFFYES_tag;

typedef union TCD_NBYTES5_union_tag {
  TCD_NBYTES5_TCD5_NBYTES_MLOFFNO_tag TCD5_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  TCD_NBYTES5_TCD5_NBYTES_MLOFFYES_tag TCD5_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} TCD_NBYTES5_tag;

typedef union TCD_TCD5_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} TCD_TCD5_SLAST_SDA_tag;

typedef union TCD_TCD5_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} TCD_TCD5_DADDR_tag;

typedef union TCD_TCD5_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} TCD_TCD5_DOFF_tag;

typedef union TCD_CITER5_TCD5_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:15;                /* Current Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER5_TCD5_CITER_ELINKNO_tag;

typedef union TCD_CITER5_TCD5_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER5_TCD5_CITER_ELINKYES_tag;

typedef union TCD_CITER5_union_tag {
  TCD_CITER5_TCD5_CITER_ELINKNO_tag TCD5_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_CITER5_TCD5_CITER_ELINKYES_tag TCD5_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_CITER5_tag;

typedef union TCD_TCD5_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} TCD_TCD5_DLAST_SGA_tag;

typedef union TCD_TCD5_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t START:1;                 /* Channel Start */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t _unused_13:1;            /* Reserved */
    vuint16_t BWC:2;                   /* Bandwidth Control */
  } B;
} TCD_TCD5_CSR_tag;

typedef union TCD_BITER5_TCD5_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enables Link */
  } B;
} TCD_BITER5_TCD5_BITER_ELINKNO_tag;

typedef union TCD_BITER5_TCD5_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_BITER5_TCD5_BITER_ELINKYES_tag;

typedef union TCD_BITER5_union_tag {
  TCD_BITER5_TCD5_BITER_ELINKNO_tag TCD5_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_BITER5_TCD5_BITER_ELINKYES_tag TCD5_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_BITER5_tag;

typedef union TCD_CH6_CSR_union_tag {  /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ERQ:1;                   /* Enable DMA Request */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t _unused_4:26;            /* Reserved */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t ACTIVE:1;                /* Channel Active */
  } B;
} TCD_CH6_CSR_tag;

typedef union TCD_CH6_ES_union_tag {   /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t DBE:1;                   /* Destination Bus Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t _unused_8:23;            /* Reserved */
    vuint32_t ERR:1;                   /* Error In Channel */
  } B;
} TCD_CH6_ES_tag;

typedef union TCD_CH6_INT_union_tag {  /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t INT:1;                   /* Interrupt Request */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} TCD_CH6_INT_tag;

typedef union TCD_CH6_SBR_union_tag {  /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t MID:4;                   /* Master ID */
    vuint32_t _unused_4:11;            /* Reserved */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} TCD_CH6_SBR_tag;

typedef union TCD_CH6_PRI_union_tag {  /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t APL:3;                   /* Arbitration Priority Level */
    vuint32_t _unused_3:27;            /* Reserved */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
  } B;
} TCD_CH6_PRI_tag;

typedef union TCD_TCD6_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} TCD_TCD6_SADDR_tag;

typedef union TCD_TCD6_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} TCD_TCD6_SOFF_tag;

typedef union TCD_TCD6_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t SMOD:5;                  /* Source Address Modulo */
  } B;
} TCD_TCD6_ATTR_tag;

typedef union TCD_NBYTES6_TCD6_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES6_TCD6_NBYTES_MLOFFNO_tag;

typedef union TCD_NBYTES6_TCD6_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES6_TCD6_NBYTES_MLOFFYES_tag;

typedef union TCD_NBYTES6_union_tag {
  TCD_NBYTES6_TCD6_NBYTES_MLOFFNO_tag TCD6_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  TCD_NBYTES6_TCD6_NBYTES_MLOFFYES_tag TCD6_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} TCD_NBYTES6_tag;

typedef union TCD_TCD6_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} TCD_TCD6_SLAST_SDA_tag;

typedef union TCD_TCD6_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} TCD_TCD6_DADDR_tag;

typedef union TCD_TCD6_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} TCD_TCD6_DOFF_tag;

typedef union TCD_CITER6_TCD6_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:15;                /* Current Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER6_TCD6_CITER_ELINKNO_tag;

typedef union TCD_CITER6_TCD6_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER6_TCD6_CITER_ELINKYES_tag;

typedef union TCD_CITER6_union_tag {
  TCD_CITER6_TCD6_CITER_ELINKNO_tag TCD6_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_CITER6_TCD6_CITER_ELINKYES_tag TCD6_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_CITER6_tag;

typedef union TCD_TCD6_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} TCD_TCD6_DLAST_SGA_tag;

typedef union TCD_TCD6_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t START:1;                 /* Channel Start */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t _unused_13:1;            /* Reserved */
    vuint16_t BWC:2;                   /* Bandwidth Control */
  } B;
} TCD_TCD6_CSR_tag;

typedef union TCD_BITER6_TCD6_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enables Link */
  } B;
} TCD_BITER6_TCD6_BITER_ELINKNO_tag;

typedef union TCD_BITER6_TCD6_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_BITER6_TCD6_BITER_ELINKYES_tag;

typedef union TCD_BITER6_union_tag {
  TCD_BITER6_TCD6_BITER_ELINKNO_tag TCD6_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_BITER6_TCD6_BITER_ELINKYES_tag TCD6_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_BITER6_tag;

typedef union TCD_CH7_CSR_union_tag {  /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ERQ:1;                   /* Enable DMA Request */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t _unused_4:26;            /* Reserved */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t ACTIVE:1;                /* Channel Active */
  } B;
} TCD_CH7_CSR_tag;

typedef union TCD_CH7_ES_union_tag {   /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t DBE:1;                   /* Destination Bus Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t _unused_8:23;            /* Reserved */
    vuint32_t ERR:1;                   /* Error In Channel */
  } B;
} TCD_CH7_ES_tag;

typedef union TCD_CH7_INT_union_tag {  /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t INT:1;                   /* Interrupt Request */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} TCD_CH7_INT_tag;

typedef union TCD_CH7_SBR_union_tag {  /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t MID:4;                   /* Master ID */
    vuint32_t _unused_4:11;            /* Reserved */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} TCD_CH7_SBR_tag;

typedef union TCD_CH7_PRI_union_tag {  /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t APL:3;                   /* Arbitration Priority Level */
    vuint32_t _unused_3:27;            /* Reserved */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
  } B;
} TCD_CH7_PRI_tag;

typedef union TCD_TCD7_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} TCD_TCD7_SADDR_tag;

typedef union TCD_TCD7_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} TCD_TCD7_SOFF_tag;

typedef union TCD_TCD7_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t SMOD:5;                  /* Source Address Modulo */
  } B;
} TCD_TCD7_ATTR_tag;

typedef union TCD_NBYTES7_TCD7_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES7_TCD7_NBYTES_MLOFFNO_tag;

typedef union TCD_NBYTES7_TCD7_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES7_TCD7_NBYTES_MLOFFYES_tag;

typedef union TCD_NBYTES7_union_tag {
  TCD_NBYTES7_TCD7_NBYTES_MLOFFNO_tag TCD7_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  TCD_NBYTES7_TCD7_NBYTES_MLOFFYES_tag TCD7_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} TCD_NBYTES7_tag;

typedef union TCD_TCD7_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} TCD_TCD7_SLAST_SDA_tag;

typedef union TCD_TCD7_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} TCD_TCD7_DADDR_tag;

typedef union TCD_TCD7_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} TCD_TCD7_DOFF_tag;

typedef union TCD_CITER7_TCD7_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:15;                /* Current Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER7_TCD7_CITER_ELINKNO_tag;

typedef union TCD_CITER7_TCD7_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER7_TCD7_CITER_ELINKYES_tag;

typedef union TCD_CITER7_union_tag {
  TCD_CITER7_TCD7_CITER_ELINKNO_tag TCD7_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_CITER7_TCD7_CITER_ELINKYES_tag TCD7_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_CITER7_tag;

typedef union TCD_TCD7_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} TCD_TCD7_DLAST_SGA_tag;

typedef union TCD_TCD7_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t START:1;                 /* Channel Start */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t _unused_13:1;            /* Reserved */
    vuint16_t BWC:2;                   /* Bandwidth Control */
  } B;
} TCD_TCD7_CSR_tag;

typedef union TCD_BITER7_TCD7_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enables Link */
  } B;
} TCD_BITER7_TCD7_BITER_ELINKNO_tag;

typedef union TCD_BITER7_TCD7_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_BITER7_TCD7_BITER_ELINKYES_tag;

typedef union TCD_BITER7_union_tag {
  TCD_BITER7_TCD7_BITER_ELINKNO_tag TCD7_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_BITER7_TCD7_BITER_ELINKYES_tag TCD7_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_BITER7_tag;

typedef union TCD_CH8_CSR_union_tag {  /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ERQ:1;                   /* Enable DMA Request */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t _unused_4:26;            /* Reserved */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t ACTIVE:1;                /* Channel Active */
  } B;
} TCD_CH8_CSR_tag;

typedef union TCD_CH8_ES_union_tag {   /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t DBE:1;                   /* Destination Bus Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t _unused_8:23;            /* Reserved */
    vuint32_t ERR:1;                   /* Error In Channel */
  } B;
} TCD_CH8_ES_tag;

typedef union TCD_CH8_INT_union_tag {  /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t INT:1;                   /* Interrupt Request */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} TCD_CH8_INT_tag;

typedef union TCD_CH8_SBR_union_tag {  /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t MID:4;                   /* Master ID */
    vuint32_t _unused_4:11;            /* Reserved */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} TCD_CH8_SBR_tag;

typedef union TCD_CH8_PRI_union_tag {  /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t APL:3;                   /* Arbitration Priority Level */
    vuint32_t _unused_3:27;            /* Reserved */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
  } B;
} TCD_CH8_PRI_tag;

typedef union TCD_TCD8_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} TCD_TCD8_SADDR_tag;

typedef union TCD_TCD8_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} TCD_TCD8_SOFF_tag;

typedef union TCD_TCD8_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t SMOD:5;                  /* Source Address Modulo */
  } B;
} TCD_TCD8_ATTR_tag;

typedef union TCD_NBYTES8_TCD8_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES8_TCD8_NBYTES_MLOFFNO_tag;

typedef union TCD_NBYTES8_TCD8_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES8_TCD8_NBYTES_MLOFFYES_tag;

typedef union TCD_NBYTES8_union_tag {
  TCD_NBYTES8_TCD8_NBYTES_MLOFFNO_tag TCD8_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  TCD_NBYTES8_TCD8_NBYTES_MLOFFYES_tag TCD8_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} TCD_NBYTES8_tag;

typedef union TCD_TCD8_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} TCD_TCD8_SLAST_SDA_tag;

typedef union TCD_TCD8_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} TCD_TCD8_DADDR_tag;

typedef union TCD_TCD8_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} TCD_TCD8_DOFF_tag;

typedef union TCD_CITER8_TCD8_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:15;                /* Current Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER8_TCD8_CITER_ELINKNO_tag;

typedef union TCD_CITER8_TCD8_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER8_TCD8_CITER_ELINKYES_tag;

typedef union TCD_CITER8_union_tag {
  TCD_CITER8_TCD8_CITER_ELINKNO_tag TCD8_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_CITER8_TCD8_CITER_ELINKYES_tag TCD8_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_CITER8_tag;

typedef union TCD_TCD8_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} TCD_TCD8_DLAST_SGA_tag;

typedef union TCD_TCD8_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t START:1;                 /* Channel Start */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t _unused_13:1;            /* Reserved */
    vuint16_t BWC:2;                   /* Bandwidth Control */
  } B;
} TCD_TCD8_CSR_tag;

typedef union TCD_BITER8_TCD8_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enables Link */
  } B;
} TCD_BITER8_TCD8_BITER_ELINKNO_tag;

typedef union TCD_BITER8_TCD8_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_BITER8_TCD8_BITER_ELINKYES_tag;

typedef union TCD_BITER8_union_tag {
  TCD_BITER8_TCD8_BITER_ELINKNO_tag TCD8_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_BITER8_TCD8_BITER_ELINKYES_tag TCD8_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_BITER8_tag;

typedef union TCD_CH9_CSR_union_tag {  /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ERQ:1;                   /* Enable DMA Request */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t _unused_4:26;            /* Reserved */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t ACTIVE:1;                /* Channel Active */
  } B;
} TCD_CH9_CSR_tag;

typedef union TCD_CH9_ES_union_tag {   /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t DBE:1;                   /* Destination Bus Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t _unused_8:23;            /* Reserved */
    vuint32_t ERR:1;                   /* Error In Channel */
  } B;
} TCD_CH9_ES_tag;

typedef union TCD_CH9_INT_union_tag {  /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t INT:1;                   /* Interrupt Request */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} TCD_CH9_INT_tag;

typedef union TCD_CH9_SBR_union_tag {  /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t MID:4;                   /* Master ID */
    vuint32_t _unused_4:11;            /* Reserved */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} TCD_CH9_SBR_tag;

typedef union TCD_CH9_PRI_union_tag {  /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t APL:3;                   /* Arbitration Priority Level */
    vuint32_t _unused_3:27;            /* Reserved */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
  } B;
} TCD_CH9_PRI_tag;

typedef union TCD_TCD9_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} TCD_TCD9_SADDR_tag;

typedef union TCD_TCD9_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} TCD_TCD9_SOFF_tag;

typedef union TCD_TCD9_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t SMOD:5;                  /* Source Address Modulo */
  } B;
} TCD_TCD9_ATTR_tag;

typedef union TCD_NBYTES9_TCD9_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES9_TCD9_NBYTES_MLOFFNO_tag;

typedef union TCD_NBYTES9_TCD9_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES9_TCD9_NBYTES_MLOFFYES_tag;

typedef union TCD_NBYTES9_union_tag {
  TCD_NBYTES9_TCD9_NBYTES_MLOFFNO_tag TCD9_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  TCD_NBYTES9_TCD9_NBYTES_MLOFFYES_tag TCD9_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} TCD_NBYTES9_tag;

typedef union TCD_TCD9_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} TCD_TCD9_SLAST_SDA_tag;

typedef union TCD_TCD9_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} TCD_TCD9_DADDR_tag;

typedef union TCD_TCD9_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} TCD_TCD9_DOFF_tag;

typedef union TCD_CITER9_TCD9_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:15;                /* Current Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER9_TCD9_CITER_ELINKNO_tag;

typedef union TCD_CITER9_TCD9_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER9_TCD9_CITER_ELINKYES_tag;

typedef union TCD_CITER9_union_tag {
  TCD_CITER9_TCD9_CITER_ELINKNO_tag TCD9_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_CITER9_TCD9_CITER_ELINKYES_tag TCD9_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_CITER9_tag;

typedef union TCD_TCD9_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} TCD_TCD9_DLAST_SGA_tag;

typedef union TCD_TCD9_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t START:1;                 /* Channel Start */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t _unused_13:1;            /* Reserved */
    vuint16_t BWC:2;                   /* Bandwidth Control */
  } B;
} TCD_TCD9_CSR_tag;

typedef union TCD_BITER9_TCD9_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enables Link */
  } B;
} TCD_BITER9_TCD9_BITER_ELINKNO_tag;

typedef union TCD_BITER9_TCD9_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_BITER9_TCD9_BITER_ELINKYES_tag;

typedef union TCD_BITER9_union_tag {
  TCD_BITER9_TCD9_BITER_ELINKNO_tag TCD9_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_BITER9_TCD9_BITER_ELINKYES_tag TCD9_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_BITER9_tag;

typedef union TCD_CH10_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ERQ:1;                   /* Enable DMA Request */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t _unused_4:26;            /* Reserved */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t ACTIVE:1;                /* Channel Active */
  } B;
} TCD_CH10_CSR_tag;

typedef union TCD_CH10_ES_union_tag {  /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t DBE:1;                   /* Destination Bus Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t _unused_8:23;            /* Reserved */
    vuint32_t ERR:1;                   /* Error In Channel */
  } B;
} TCD_CH10_ES_tag;

typedef union TCD_CH10_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t INT:1;                   /* Interrupt Request */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} TCD_CH10_INT_tag;

typedef union TCD_CH10_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t MID:4;                   /* Master ID */
    vuint32_t _unused_4:11;            /* Reserved */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} TCD_CH10_SBR_tag;

typedef union TCD_CH10_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t APL:3;                   /* Arbitration Priority Level */
    vuint32_t _unused_3:27;            /* Reserved */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
  } B;
} TCD_CH10_PRI_tag;

typedef union TCD_TCD10_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} TCD_TCD10_SADDR_tag;

typedef union TCD_TCD10_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} TCD_TCD10_SOFF_tag;

typedef union TCD_TCD10_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t SMOD:5;                  /* Source Address Modulo */
  } B;
} TCD_TCD10_ATTR_tag;

typedef union TCD_NBYTES10_TCD10_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES10_TCD10_NBYTES_MLOFFNO_tag;

typedef union TCD_NBYTES10_TCD10_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES10_TCD10_NBYTES_MLOFFYES_tag;

typedef union TCD_NBYTES10_union_tag {
  TCD_NBYTES10_TCD10_NBYTES_MLOFFNO_tag TCD10_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  TCD_NBYTES10_TCD10_NBYTES_MLOFFYES_tag TCD10_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} TCD_NBYTES10_tag;

typedef union TCD_TCD10_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} TCD_TCD10_SLAST_SDA_tag;

typedef union TCD_TCD10_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} TCD_TCD10_DADDR_tag;

typedef union TCD_TCD10_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} TCD_TCD10_DOFF_tag;

typedef union TCD_CITER10_TCD10_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:15;                /* Current Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER10_TCD10_CITER_ELINKNO_tag;

typedef union TCD_CITER10_TCD10_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER10_TCD10_CITER_ELINKYES_tag;

typedef union TCD_CITER10_union_tag {
  TCD_CITER10_TCD10_CITER_ELINKNO_tag TCD10_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_CITER10_TCD10_CITER_ELINKYES_tag TCD10_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_CITER10_tag;

typedef union TCD_TCD10_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} TCD_TCD10_DLAST_SGA_tag;

typedef union TCD_TCD10_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t START:1;                 /* Channel Start */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t _unused_13:1;            /* Reserved */
    vuint16_t BWC:2;                   /* Bandwidth Control */
  } B;
} TCD_TCD10_CSR_tag;

typedef union TCD_BITER10_TCD10_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enables Link */
  } B;
} TCD_BITER10_TCD10_BITER_ELINKNO_tag;

typedef union TCD_BITER10_TCD10_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_BITER10_TCD10_BITER_ELINKYES_tag;

typedef union TCD_BITER10_union_tag {
  TCD_BITER10_TCD10_BITER_ELINKNO_tag TCD10_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_BITER10_TCD10_BITER_ELINKYES_tag TCD10_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_BITER10_tag;

typedef union TCD_CH11_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ERQ:1;                   /* Enable DMA Request */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t _unused_4:26;            /* Reserved */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t ACTIVE:1;                /* Channel Active */
  } B;
} TCD_CH11_CSR_tag;

typedef union TCD_CH11_ES_union_tag {  /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t DBE:1;                   /* Destination Bus Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t _unused_8:23;            /* Reserved */
    vuint32_t ERR:1;                   /* Error In Channel */
  } B;
} TCD_CH11_ES_tag;

typedef union TCD_CH11_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t INT:1;                   /* Interrupt Request */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} TCD_CH11_INT_tag;

typedef union TCD_CH11_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t MID:4;                   /* Master ID */
    vuint32_t _unused_4:11;            /* Reserved */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} TCD_CH11_SBR_tag;

typedef union TCD_CH11_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t APL:3;                   /* Arbitration Priority Level */
    vuint32_t _unused_3:27;            /* Reserved */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
  } B;
} TCD_CH11_PRI_tag;

typedef union TCD_TCD11_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} TCD_TCD11_SADDR_tag;

typedef union TCD_TCD11_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} TCD_TCD11_SOFF_tag;

typedef union TCD_TCD11_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t SMOD:5;                  /* Source Address Modulo */
  } B;
} TCD_TCD11_ATTR_tag;

typedef union TCD_NBYTES11_TCD11_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES11_TCD11_NBYTES_MLOFFNO_tag;

typedef union TCD_NBYTES11_TCD11_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES11_TCD11_NBYTES_MLOFFYES_tag;

typedef union TCD_NBYTES11_union_tag {
  TCD_NBYTES11_TCD11_NBYTES_MLOFFNO_tag TCD11_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  TCD_NBYTES11_TCD11_NBYTES_MLOFFYES_tag TCD11_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} TCD_NBYTES11_tag;

typedef union TCD_TCD11_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} TCD_TCD11_SLAST_SDA_tag;

typedef union TCD_TCD11_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} TCD_TCD11_DADDR_tag;

typedef union TCD_TCD11_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} TCD_TCD11_DOFF_tag;

typedef union TCD_CITER11_TCD11_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:15;                /* Current Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER11_TCD11_CITER_ELINKNO_tag;

typedef union TCD_CITER11_TCD11_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER11_TCD11_CITER_ELINKYES_tag;

typedef union TCD_CITER11_union_tag {
  TCD_CITER11_TCD11_CITER_ELINKNO_tag TCD11_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_CITER11_TCD11_CITER_ELINKYES_tag TCD11_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_CITER11_tag;

typedef union TCD_TCD11_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} TCD_TCD11_DLAST_SGA_tag;

typedef union TCD_TCD11_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t START:1;                 /* Channel Start */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t _unused_13:1;            /* Reserved */
    vuint16_t BWC:2;                   /* Bandwidth Control */
  } B;
} TCD_TCD11_CSR_tag;

typedef union TCD_BITER11_TCD11_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enables Link */
  } B;
} TCD_BITER11_TCD11_BITER_ELINKNO_tag;

typedef union TCD_BITER11_TCD11_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_BITER11_TCD11_BITER_ELINKYES_tag;

typedef union TCD_BITER11_union_tag {
  TCD_BITER11_TCD11_BITER_ELINKNO_tag TCD11_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_BITER11_TCD11_BITER_ELINKYES_tag TCD11_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_BITER11_tag;

typedef union TCD_CH12_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ERQ:1;                   /* Enable DMA Request */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t _unused_4:26;            /* Reserved */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t ACTIVE:1;                /* Channel Active */
  } B;
} TCD_CH12_CSR_tag;

typedef union TCD_CH12_ES_union_tag {  /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t DBE:1;                   /* Destination Bus Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t _unused_8:23;            /* Reserved */
    vuint32_t ERR:1;                   /* Error In Channel */
  } B;
} TCD_CH12_ES_tag;

typedef union TCD_CH12_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t INT:1;                   /* Interrupt Request */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} TCD_CH12_INT_tag;

typedef union TCD_CH12_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t MID:4;                   /* Master ID */
    vuint32_t _unused_4:11;            /* Reserved */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} TCD_CH12_SBR_tag;

typedef union TCD_CH12_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t APL:3;                   /* Arbitration Priority Level */
    vuint32_t _unused_3:27;            /* Reserved */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
  } B;
} TCD_CH12_PRI_tag;

typedef union TCD_TCD12_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} TCD_TCD12_SADDR_tag;

typedef union TCD_TCD12_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} TCD_TCD12_SOFF_tag;

typedef union TCD_TCD12_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t SMOD:5;                  /* Source Address Modulo */
  } B;
} TCD_TCD12_ATTR_tag;

typedef union TCD_NBYTES12_TCD12_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES12_TCD12_NBYTES_MLOFFNO_tag;

typedef union TCD_NBYTES12_TCD12_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES12_TCD12_NBYTES_MLOFFYES_tag;

typedef union TCD_NBYTES12_union_tag {
  TCD_NBYTES12_TCD12_NBYTES_MLOFFNO_tag TCD12_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  TCD_NBYTES12_TCD12_NBYTES_MLOFFYES_tag TCD12_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} TCD_NBYTES12_tag;

typedef union TCD_TCD12_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} TCD_TCD12_SLAST_SDA_tag;

typedef union TCD_TCD12_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} TCD_TCD12_DADDR_tag;

typedef union TCD_TCD12_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} TCD_TCD12_DOFF_tag;

typedef union TCD_CITER12_TCD12_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:15;                /* Current Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER12_TCD12_CITER_ELINKNO_tag;

typedef union TCD_CITER12_TCD12_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER12_TCD12_CITER_ELINKYES_tag;

typedef union TCD_CITER12_union_tag {
  TCD_CITER12_TCD12_CITER_ELINKNO_tag TCD12_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_CITER12_TCD12_CITER_ELINKYES_tag TCD12_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_CITER12_tag;

typedef union TCD_TCD12_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} TCD_TCD12_DLAST_SGA_tag;

typedef union TCD_TCD12_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t START:1;                 /* Channel Start */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t _unused_13:1;            /* Reserved */
    vuint16_t BWC:2;                   /* Bandwidth Control */
  } B;
} TCD_TCD12_CSR_tag;

typedef union TCD_BITER12_TCD12_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enables Link */
  } B;
} TCD_BITER12_TCD12_BITER_ELINKNO_tag;

typedef union TCD_BITER12_TCD12_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_BITER12_TCD12_BITER_ELINKYES_tag;

typedef union TCD_BITER12_union_tag {
  TCD_BITER12_TCD12_BITER_ELINKNO_tag TCD12_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_BITER12_TCD12_BITER_ELINKYES_tag TCD12_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_BITER12_tag;

typedef union TCD_CH13_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ERQ:1;                   /* Enable DMA Request */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t _unused_4:26;            /* Reserved */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t ACTIVE:1;                /* Channel Active */
  } B;
} TCD_CH13_CSR_tag;

typedef union TCD_CH13_ES_union_tag {  /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t DBE:1;                   /* Destination Bus Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t _unused_8:23;            /* Reserved */
    vuint32_t ERR:1;                   /* Error In Channel */
  } B;
} TCD_CH13_ES_tag;

typedef union TCD_CH13_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t INT:1;                   /* Interrupt Request */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} TCD_CH13_INT_tag;

typedef union TCD_CH13_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t MID:4;                   /* Master ID */
    vuint32_t _unused_4:11;            /* Reserved */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} TCD_CH13_SBR_tag;

typedef union TCD_CH13_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t APL:3;                   /* Arbitration Priority Level */
    vuint32_t _unused_3:27;            /* Reserved */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
  } B;
} TCD_CH13_PRI_tag;

typedef union TCD_TCD13_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} TCD_TCD13_SADDR_tag;

typedef union TCD_TCD13_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} TCD_TCD13_SOFF_tag;

typedef union TCD_TCD13_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t SMOD:5;                  /* Source Address Modulo */
  } B;
} TCD_TCD13_ATTR_tag;

typedef union TCD_NBYTES13_TCD13_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES13_TCD13_NBYTES_MLOFFNO_tag;

typedef union TCD_NBYTES13_TCD13_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES13_TCD13_NBYTES_MLOFFYES_tag;

typedef union TCD_NBYTES13_union_tag {
  TCD_NBYTES13_TCD13_NBYTES_MLOFFNO_tag TCD13_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  TCD_NBYTES13_TCD13_NBYTES_MLOFFYES_tag TCD13_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} TCD_NBYTES13_tag;

typedef union TCD_TCD13_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} TCD_TCD13_SLAST_SDA_tag;

typedef union TCD_TCD13_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} TCD_TCD13_DADDR_tag;

typedef union TCD_TCD13_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} TCD_TCD13_DOFF_tag;

typedef union TCD_CITER13_TCD13_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:15;                /* Current Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER13_TCD13_CITER_ELINKNO_tag;

typedef union TCD_CITER13_TCD13_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER13_TCD13_CITER_ELINKYES_tag;

typedef union TCD_CITER13_union_tag {
  TCD_CITER13_TCD13_CITER_ELINKNO_tag TCD13_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_CITER13_TCD13_CITER_ELINKYES_tag TCD13_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_CITER13_tag;

typedef union TCD_TCD13_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} TCD_TCD13_DLAST_SGA_tag;

typedef union TCD_TCD13_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t START:1;                 /* Channel Start */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t _unused_13:1;            /* Reserved */
    vuint16_t BWC:2;                   /* Bandwidth Control */
  } B;
} TCD_TCD13_CSR_tag;

typedef union TCD_BITER13_TCD13_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enables Link */
  } B;
} TCD_BITER13_TCD13_BITER_ELINKNO_tag;

typedef union TCD_BITER13_TCD13_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_BITER13_TCD13_BITER_ELINKYES_tag;

typedef union TCD_BITER13_union_tag {
  TCD_BITER13_TCD13_BITER_ELINKNO_tag TCD13_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_BITER13_TCD13_BITER_ELINKYES_tag TCD13_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_BITER13_tag;

typedef union TCD_CH14_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ERQ:1;                   /* Enable DMA Request */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t _unused_4:26;            /* Reserved */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t ACTIVE:1;                /* Channel Active */
  } B;
} TCD_CH14_CSR_tag;

typedef union TCD_CH14_ES_union_tag {  /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t DBE:1;                   /* Destination Bus Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t _unused_8:23;            /* Reserved */
    vuint32_t ERR:1;                   /* Error In Channel */
  } B;
} TCD_CH14_ES_tag;

typedef union TCD_CH14_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t INT:1;                   /* Interrupt Request */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} TCD_CH14_INT_tag;

typedef union TCD_CH14_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t MID:4;                   /* Master ID */
    vuint32_t _unused_4:11;            /* Reserved */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} TCD_CH14_SBR_tag;

typedef union TCD_CH14_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t APL:3;                   /* Arbitration Priority Level */
    vuint32_t _unused_3:27;            /* Reserved */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
  } B;
} TCD_CH14_PRI_tag;

typedef union TCD_TCD14_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} TCD_TCD14_SADDR_tag;

typedef union TCD_TCD14_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} TCD_TCD14_SOFF_tag;

typedef union TCD_TCD14_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t SMOD:5;                  /* Source Address Modulo */
  } B;
} TCD_TCD14_ATTR_tag;

typedef union TCD_NBYTES14_TCD14_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES14_TCD14_NBYTES_MLOFFNO_tag;

typedef union TCD_NBYTES14_TCD14_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES14_TCD14_NBYTES_MLOFFYES_tag;

typedef union TCD_NBYTES14_union_tag {
  TCD_NBYTES14_TCD14_NBYTES_MLOFFNO_tag TCD14_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  TCD_NBYTES14_TCD14_NBYTES_MLOFFYES_tag TCD14_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} TCD_NBYTES14_tag;

typedef union TCD_TCD14_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} TCD_TCD14_SLAST_SDA_tag;

typedef union TCD_TCD14_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} TCD_TCD14_DADDR_tag;

typedef union TCD_TCD14_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} TCD_TCD14_DOFF_tag;

typedef union TCD_CITER14_TCD14_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:15;                /* Current Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER14_TCD14_CITER_ELINKNO_tag;

typedef union TCD_CITER14_TCD14_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER14_TCD14_CITER_ELINKYES_tag;

typedef union TCD_CITER14_union_tag {
  TCD_CITER14_TCD14_CITER_ELINKNO_tag TCD14_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_CITER14_TCD14_CITER_ELINKYES_tag TCD14_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_CITER14_tag;

typedef union TCD_TCD14_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} TCD_TCD14_DLAST_SGA_tag;

typedef union TCD_TCD14_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t START:1;                 /* Channel Start */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t _unused_13:1;            /* Reserved */
    vuint16_t BWC:2;                   /* Bandwidth Control */
  } B;
} TCD_TCD14_CSR_tag;

typedef union TCD_BITER14_TCD14_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enables Link */
  } B;
} TCD_BITER14_TCD14_BITER_ELINKNO_tag;

typedef union TCD_BITER14_TCD14_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_BITER14_TCD14_BITER_ELINKYES_tag;

typedef union TCD_BITER14_union_tag {
  TCD_BITER14_TCD14_BITER_ELINKNO_tag TCD14_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_BITER14_TCD14_BITER_ELINKYES_tag TCD14_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_BITER14_tag;

typedef union TCD_CH15_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ERQ:1;                   /* Enable DMA Request */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t _unused_4:26;            /* Reserved */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t ACTIVE:1;                /* Channel Active */
  } B;
} TCD_CH15_CSR_tag;

typedef union TCD_CH15_ES_union_tag {  /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t DBE:1;                   /* Destination Bus Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t _unused_8:23;            /* Reserved */
    vuint32_t ERR:1;                   /* Error In Channel */
  } B;
} TCD_CH15_ES_tag;

typedef union TCD_CH15_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t INT:1;                   /* Interrupt Request */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} TCD_CH15_INT_tag;

typedef union TCD_CH15_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t MID:4;                   /* Master ID */
    vuint32_t _unused_4:11;            /* Reserved */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} TCD_CH15_SBR_tag;

typedef union TCD_CH15_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t APL:3;                   /* Arbitration Priority Level */
    vuint32_t _unused_3:27;            /* Reserved */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
  } B;
} TCD_CH15_PRI_tag;

typedef union TCD_TCD15_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} TCD_TCD15_SADDR_tag;

typedef union TCD_TCD15_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} TCD_TCD15_SOFF_tag;

typedef union TCD_TCD15_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t SMOD:5;                  /* Source Address Modulo */
  } B;
} TCD_TCD15_ATTR_tag;

typedef union TCD_NBYTES15_TCD15_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES15_TCD15_NBYTES_MLOFFNO_tag;

typedef union TCD_NBYTES15_TCD15_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES15_TCD15_NBYTES_MLOFFYES_tag;

typedef union TCD_NBYTES15_union_tag {
  TCD_NBYTES15_TCD15_NBYTES_MLOFFNO_tag TCD15_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  TCD_NBYTES15_TCD15_NBYTES_MLOFFYES_tag TCD15_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} TCD_NBYTES15_tag;

typedef union TCD_TCD15_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} TCD_TCD15_SLAST_SDA_tag;

typedef union TCD_TCD15_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} TCD_TCD15_DADDR_tag;

typedef union TCD_TCD15_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} TCD_TCD15_DOFF_tag;

typedef union TCD_CITER15_TCD15_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:15;                /* Current Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER15_TCD15_CITER_ELINKNO_tag;

typedef union TCD_CITER15_TCD15_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER15_TCD15_CITER_ELINKYES_tag;

typedef union TCD_CITER15_union_tag {
  TCD_CITER15_TCD15_CITER_ELINKNO_tag TCD15_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_CITER15_TCD15_CITER_ELINKYES_tag TCD15_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_CITER15_tag;

typedef union TCD_TCD15_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} TCD_TCD15_DLAST_SGA_tag;

typedef union TCD_TCD15_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t START:1;                 /* Channel Start */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t _unused_13:1;            /* Reserved */
    vuint16_t BWC:2;                   /* Bandwidth Control */
  } B;
} TCD_TCD15_CSR_tag;

typedef union TCD_BITER15_TCD15_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enables Link */
  } B;
} TCD_BITER15_TCD15_BITER_ELINKNO_tag;

typedef union TCD_BITER15_TCD15_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_BITER15_TCD15_BITER_ELINKYES_tag;

typedef union TCD_BITER15_union_tag {
  TCD_BITER15_TCD15_BITER_ELINKNO_tag TCD15_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_BITER15_TCD15_BITER_ELINKYES_tag TCD15_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_BITER15_tag;

typedef union TCD_CH16_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ERQ:1;                   /* Enable DMA Request */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t _unused_4:26;            /* Reserved */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t ACTIVE:1;                /* Channel Active */
  } B;
} TCD_CH16_CSR_tag;

typedef union TCD_CH16_ES_union_tag {  /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t DBE:1;                   /* Destination Bus Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t _unused_8:23;            /* Reserved */
    vuint32_t ERR:1;                   /* Error In Channel */
  } B;
} TCD_CH16_ES_tag;

typedef union TCD_CH16_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t INT:1;                   /* Interrupt Request */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} TCD_CH16_INT_tag;

typedef union TCD_CH16_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t MID:4;                   /* Master ID */
    vuint32_t _unused_4:11;            /* Reserved */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} TCD_CH16_SBR_tag;

typedef union TCD_CH16_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t APL:3;                   /* Arbitration Priority Level */
    vuint32_t _unused_3:27;            /* Reserved */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
  } B;
} TCD_CH16_PRI_tag;

typedef union TCD_TCD16_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} TCD_TCD16_SADDR_tag;

typedef union TCD_TCD16_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} TCD_TCD16_SOFF_tag;

typedef union TCD_TCD16_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t SMOD:5;                  /* Source Address Modulo */
  } B;
} TCD_TCD16_ATTR_tag;

typedef union TCD_NBYTES16_TCD16_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES16_TCD16_NBYTES_MLOFFNO_tag;

typedef union TCD_NBYTES16_TCD16_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES16_TCD16_NBYTES_MLOFFYES_tag;

typedef union TCD_NBYTES16_union_tag {
  TCD_NBYTES16_TCD16_NBYTES_MLOFFNO_tag TCD16_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  TCD_NBYTES16_TCD16_NBYTES_MLOFFYES_tag TCD16_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} TCD_NBYTES16_tag;

typedef union TCD_TCD16_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} TCD_TCD16_SLAST_SDA_tag;

typedef union TCD_TCD16_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} TCD_TCD16_DADDR_tag;

typedef union TCD_TCD16_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} TCD_TCD16_DOFF_tag;

typedef union TCD_CITER16_TCD16_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:15;                /* Current Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER16_TCD16_CITER_ELINKNO_tag;

typedef union TCD_CITER16_TCD16_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER16_TCD16_CITER_ELINKYES_tag;

typedef union TCD_CITER16_union_tag {
  TCD_CITER16_TCD16_CITER_ELINKNO_tag TCD16_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_CITER16_TCD16_CITER_ELINKYES_tag TCD16_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_CITER16_tag;

typedef union TCD_TCD16_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} TCD_TCD16_DLAST_SGA_tag;

typedef union TCD_TCD16_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t START:1;                 /* Channel Start */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t _unused_13:1;            /* Reserved */
    vuint16_t BWC:2;                   /* Bandwidth Control */
  } B;
} TCD_TCD16_CSR_tag;

typedef union TCD_BITER16_TCD16_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enables Link */
  } B;
} TCD_BITER16_TCD16_BITER_ELINKNO_tag;

typedef union TCD_BITER16_TCD16_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_BITER16_TCD16_BITER_ELINKYES_tag;

typedef union TCD_BITER16_union_tag {
  TCD_BITER16_TCD16_BITER_ELINKNO_tag TCD16_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_BITER16_TCD16_BITER_ELINKYES_tag TCD16_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_BITER16_tag;

typedef union TCD_CH17_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ERQ:1;                   /* Enable DMA Request */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t _unused_4:26;            /* Reserved */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t ACTIVE:1;                /* Channel Active */
  } B;
} TCD_CH17_CSR_tag;

typedef union TCD_CH17_ES_union_tag {  /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t DBE:1;                   /* Destination Bus Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t _unused_8:23;            /* Reserved */
    vuint32_t ERR:1;                   /* Error In Channel */
  } B;
} TCD_CH17_ES_tag;

typedef union TCD_CH17_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t INT:1;                   /* Interrupt Request */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} TCD_CH17_INT_tag;

typedef union TCD_CH17_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t MID:4;                   /* Master ID */
    vuint32_t _unused_4:11;            /* Reserved */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} TCD_CH17_SBR_tag;

typedef union TCD_CH17_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t APL:3;                   /* Arbitration Priority Level */
    vuint32_t _unused_3:27;            /* Reserved */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
  } B;
} TCD_CH17_PRI_tag;

typedef union TCD_TCD17_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} TCD_TCD17_SADDR_tag;

typedef union TCD_TCD17_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} TCD_TCD17_SOFF_tag;

typedef union TCD_TCD17_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t SMOD:5;                  /* Source Address Modulo */
  } B;
} TCD_TCD17_ATTR_tag;

typedef union TCD_NBYTES17_TCD17_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES17_TCD17_NBYTES_MLOFFNO_tag;

typedef union TCD_NBYTES17_TCD17_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES17_TCD17_NBYTES_MLOFFYES_tag;

typedef union TCD_NBYTES17_union_tag {
  TCD_NBYTES17_TCD17_NBYTES_MLOFFNO_tag TCD17_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  TCD_NBYTES17_TCD17_NBYTES_MLOFFYES_tag TCD17_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} TCD_NBYTES17_tag;

typedef union TCD_TCD17_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} TCD_TCD17_SLAST_SDA_tag;

typedef union TCD_TCD17_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} TCD_TCD17_DADDR_tag;

typedef union TCD_TCD17_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} TCD_TCD17_DOFF_tag;

typedef union TCD_CITER17_TCD17_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:15;                /* Current Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER17_TCD17_CITER_ELINKNO_tag;

typedef union TCD_CITER17_TCD17_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER17_TCD17_CITER_ELINKYES_tag;

typedef union TCD_CITER17_union_tag {
  TCD_CITER17_TCD17_CITER_ELINKNO_tag TCD17_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_CITER17_TCD17_CITER_ELINKYES_tag TCD17_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_CITER17_tag;

typedef union TCD_TCD17_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} TCD_TCD17_DLAST_SGA_tag;

typedef union TCD_TCD17_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t START:1;                 /* Channel Start */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t _unused_13:1;            /* Reserved */
    vuint16_t BWC:2;                   /* Bandwidth Control */
  } B;
} TCD_TCD17_CSR_tag;

typedef union TCD_BITER17_TCD17_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enables Link */
  } B;
} TCD_BITER17_TCD17_BITER_ELINKNO_tag;

typedef union TCD_BITER17_TCD17_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_BITER17_TCD17_BITER_ELINKYES_tag;

typedef union TCD_BITER17_union_tag {
  TCD_BITER17_TCD17_BITER_ELINKNO_tag TCD17_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_BITER17_TCD17_BITER_ELINKYES_tag TCD17_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_BITER17_tag;

typedef union TCD_CH18_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ERQ:1;                   /* Enable DMA Request */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t _unused_4:26;            /* Reserved */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t ACTIVE:1;                /* Channel Active */
  } B;
} TCD_CH18_CSR_tag;

typedef union TCD_CH18_ES_union_tag {  /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t DBE:1;                   /* Destination Bus Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t _unused_8:23;            /* Reserved */
    vuint32_t ERR:1;                   /* Error In Channel */
  } B;
} TCD_CH18_ES_tag;

typedef union TCD_CH18_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t INT:1;                   /* Interrupt Request */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} TCD_CH18_INT_tag;

typedef union TCD_CH18_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t MID:4;                   /* Master ID */
    vuint32_t _unused_4:11;            /* Reserved */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} TCD_CH18_SBR_tag;

typedef union TCD_CH18_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t APL:3;                   /* Arbitration Priority Level */
    vuint32_t _unused_3:27;            /* Reserved */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
  } B;
} TCD_CH18_PRI_tag;

typedef union TCD_TCD18_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} TCD_TCD18_SADDR_tag;

typedef union TCD_TCD18_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} TCD_TCD18_SOFF_tag;

typedef union TCD_TCD18_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t SMOD:5;                  /* Source Address Modulo */
  } B;
} TCD_TCD18_ATTR_tag;

typedef union TCD_NBYTES18_TCD18_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES18_TCD18_NBYTES_MLOFFNO_tag;

typedef union TCD_NBYTES18_TCD18_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES18_TCD18_NBYTES_MLOFFYES_tag;

typedef union TCD_NBYTES18_union_tag {
  TCD_NBYTES18_TCD18_NBYTES_MLOFFNO_tag TCD18_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  TCD_NBYTES18_TCD18_NBYTES_MLOFFYES_tag TCD18_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} TCD_NBYTES18_tag;

typedef union TCD_TCD18_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} TCD_TCD18_SLAST_SDA_tag;

typedef union TCD_TCD18_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} TCD_TCD18_DADDR_tag;

typedef union TCD_TCD18_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} TCD_TCD18_DOFF_tag;

typedef union TCD_CITER18_TCD18_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:15;                /* Current Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER18_TCD18_CITER_ELINKNO_tag;

typedef union TCD_CITER18_TCD18_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER18_TCD18_CITER_ELINKYES_tag;

typedef union TCD_CITER18_union_tag {
  TCD_CITER18_TCD18_CITER_ELINKNO_tag TCD18_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_CITER18_TCD18_CITER_ELINKYES_tag TCD18_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_CITER18_tag;

typedef union TCD_TCD18_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} TCD_TCD18_DLAST_SGA_tag;

typedef union TCD_TCD18_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t START:1;                 /* Channel Start */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t _unused_13:1;            /* Reserved */
    vuint16_t BWC:2;                   /* Bandwidth Control */
  } B;
} TCD_TCD18_CSR_tag;

typedef union TCD_BITER18_TCD18_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enables Link */
  } B;
} TCD_BITER18_TCD18_BITER_ELINKNO_tag;

typedef union TCD_BITER18_TCD18_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_BITER18_TCD18_BITER_ELINKYES_tag;

typedef union TCD_BITER18_union_tag {
  TCD_BITER18_TCD18_BITER_ELINKNO_tag TCD18_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_BITER18_TCD18_BITER_ELINKYES_tag TCD18_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_BITER18_tag;

typedef union TCD_CH19_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ERQ:1;                   /* Enable DMA Request */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t _unused_4:26;            /* Reserved */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t ACTIVE:1;                /* Channel Active */
  } B;
} TCD_CH19_CSR_tag;

typedef union TCD_CH19_ES_union_tag {  /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t DBE:1;                   /* Destination Bus Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t _unused_8:23;            /* Reserved */
    vuint32_t ERR:1;                   /* Error In Channel */
  } B;
} TCD_CH19_ES_tag;

typedef union TCD_CH19_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t INT:1;                   /* Interrupt Request */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} TCD_CH19_INT_tag;

typedef union TCD_CH19_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t MID:4;                   /* Master ID */
    vuint32_t _unused_4:11;            /* Reserved */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} TCD_CH19_SBR_tag;

typedef union TCD_CH19_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t APL:3;                   /* Arbitration Priority Level */
    vuint32_t _unused_3:27;            /* Reserved */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
  } B;
} TCD_CH19_PRI_tag;

typedef union TCD_TCD19_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} TCD_TCD19_SADDR_tag;

typedef union TCD_TCD19_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} TCD_TCD19_SOFF_tag;

typedef union TCD_TCD19_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t SMOD:5;                  /* Source Address Modulo */
  } B;
} TCD_TCD19_ATTR_tag;

typedef union TCD_NBYTES19_TCD19_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES19_TCD19_NBYTES_MLOFFNO_tag;

typedef union TCD_NBYTES19_TCD19_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES19_TCD19_NBYTES_MLOFFYES_tag;

typedef union TCD_NBYTES19_union_tag {
  TCD_NBYTES19_TCD19_NBYTES_MLOFFNO_tag TCD19_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  TCD_NBYTES19_TCD19_NBYTES_MLOFFYES_tag TCD19_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} TCD_NBYTES19_tag;

typedef union TCD_TCD19_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} TCD_TCD19_SLAST_SDA_tag;

typedef union TCD_TCD19_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} TCD_TCD19_DADDR_tag;

typedef union TCD_TCD19_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} TCD_TCD19_DOFF_tag;

typedef union TCD_CITER19_TCD19_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:15;                /* Current Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER19_TCD19_CITER_ELINKNO_tag;

typedef union TCD_CITER19_TCD19_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER19_TCD19_CITER_ELINKYES_tag;

typedef union TCD_CITER19_union_tag {
  TCD_CITER19_TCD19_CITER_ELINKNO_tag TCD19_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_CITER19_TCD19_CITER_ELINKYES_tag TCD19_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_CITER19_tag;

typedef union TCD_TCD19_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} TCD_TCD19_DLAST_SGA_tag;

typedef union TCD_TCD19_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t START:1;                 /* Channel Start */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t _unused_13:1;            /* Reserved */
    vuint16_t BWC:2;                   /* Bandwidth Control */
  } B;
} TCD_TCD19_CSR_tag;

typedef union TCD_BITER19_TCD19_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enables Link */
  } B;
} TCD_BITER19_TCD19_BITER_ELINKNO_tag;

typedef union TCD_BITER19_TCD19_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_BITER19_TCD19_BITER_ELINKYES_tag;

typedef union TCD_BITER19_union_tag {
  TCD_BITER19_TCD19_BITER_ELINKNO_tag TCD19_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_BITER19_TCD19_BITER_ELINKYES_tag TCD19_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_BITER19_tag;

typedef union TCD_CH20_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ERQ:1;                   /* Enable DMA Request */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t _unused_4:26;            /* Reserved */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t ACTIVE:1;                /* Channel Active */
  } B;
} TCD_CH20_CSR_tag;

typedef union TCD_CH20_ES_union_tag {  /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t DBE:1;                   /* Destination Bus Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t _unused_8:23;            /* Reserved */
    vuint32_t ERR:1;                   /* Error In Channel */
  } B;
} TCD_CH20_ES_tag;

typedef union TCD_CH20_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t INT:1;                   /* Interrupt Request */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} TCD_CH20_INT_tag;

typedef union TCD_CH20_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t MID:4;                   /* Master ID */
    vuint32_t _unused_4:11;            /* Reserved */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} TCD_CH20_SBR_tag;

typedef union TCD_CH20_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t APL:3;                   /* Arbitration Priority Level */
    vuint32_t _unused_3:27;            /* Reserved */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
  } B;
} TCD_CH20_PRI_tag;

typedef union TCD_TCD20_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} TCD_TCD20_SADDR_tag;

typedef union TCD_TCD20_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} TCD_TCD20_SOFF_tag;

typedef union TCD_TCD20_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t SMOD:5;                  /* Source Address Modulo */
  } B;
} TCD_TCD20_ATTR_tag;

typedef union TCD_NBYTES20_TCD20_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES20_TCD20_NBYTES_MLOFFNO_tag;

typedef union TCD_NBYTES20_TCD20_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES20_TCD20_NBYTES_MLOFFYES_tag;

typedef union TCD_NBYTES20_union_tag {
  TCD_NBYTES20_TCD20_NBYTES_MLOFFNO_tag TCD20_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  TCD_NBYTES20_TCD20_NBYTES_MLOFFYES_tag TCD20_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} TCD_NBYTES20_tag;

typedef union TCD_TCD20_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} TCD_TCD20_SLAST_SDA_tag;

typedef union TCD_TCD20_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} TCD_TCD20_DADDR_tag;

typedef union TCD_TCD20_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} TCD_TCD20_DOFF_tag;

typedef union TCD_CITER20_TCD20_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:15;                /* Current Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER20_TCD20_CITER_ELINKNO_tag;

typedef union TCD_CITER20_TCD20_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER20_TCD20_CITER_ELINKYES_tag;

typedef union TCD_CITER20_union_tag {
  TCD_CITER20_TCD20_CITER_ELINKNO_tag TCD20_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_CITER20_TCD20_CITER_ELINKYES_tag TCD20_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_CITER20_tag;

typedef union TCD_TCD20_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} TCD_TCD20_DLAST_SGA_tag;

typedef union TCD_TCD20_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t START:1;                 /* Channel Start */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t _unused_13:1;            /* Reserved */
    vuint16_t BWC:2;                   /* Bandwidth Control */
  } B;
} TCD_TCD20_CSR_tag;

typedef union TCD_BITER20_TCD20_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enables Link */
  } B;
} TCD_BITER20_TCD20_BITER_ELINKNO_tag;

typedef union TCD_BITER20_TCD20_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_BITER20_TCD20_BITER_ELINKYES_tag;

typedef union TCD_BITER20_union_tag {
  TCD_BITER20_TCD20_BITER_ELINKNO_tag TCD20_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_BITER20_TCD20_BITER_ELINKYES_tag TCD20_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_BITER20_tag;

typedef union TCD_CH21_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ERQ:1;                   /* Enable DMA Request */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t _unused_4:26;            /* Reserved */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t ACTIVE:1;                /* Channel Active */
  } B;
} TCD_CH21_CSR_tag;

typedef union TCD_CH21_ES_union_tag {  /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t DBE:1;                   /* Destination Bus Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t _unused_8:23;            /* Reserved */
    vuint32_t ERR:1;                   /* Error In Channel */
  } B;
} TCD_CH21_ES_tag;

typedef union TCD_CH21_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t INT:1;                   /* Interrupt Request */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} TCD_CH21_INT_tag;

typedef union TCD_CH21_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t MID:4;                   /* Master ID */
    vuint32_t _unused_4:11;            /* Reserved */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} TCD_CH21_SBR_tag;

typedef union TCD_CH21_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t APL:3;                   /* Arbitration Priority Level */
    vuint32_t _unused_3:27;            /* Reserved */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
  } B;
} TCD_CH21_PRI_tag;

typedef union TCD_TCD21_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} TCD_TCD21_SADDR_tag;

typedef union TCD_TCD21_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} TCD_TCD21_SOFF_tag;

typedef union TCD_TCD21_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t SMOD:5;                  /* Source Address Modulo */
  } B;
} TCD_TCD21_ATTR_tag;

typedef union TCD_NBYTES21_TCD21_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES21_TCD21_NBYTES_MLOFFNO_tag;

typedef union TCD_NBYTES21_TCD21_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES21_TCD21_NBYTES_MLOFFYES_tag;

typedef union TCD_NBYTES21_union_tag {
  TCD_NBYTES21_TCD21_NBYTES_MLOFFNO_tag TCD21_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  TCD_NBYTES21_TCD21_NBYTES_MLOFFYES_tag TCD21_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} TCD_NBYTES21_tag;

typedef union TCD_TCD21_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} TCD_TCD21_SLAST_SDA_tag;

typedef union TCD_TCD21_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} TCD_TCD21_DADDR_tag;

typedef union TCD_TCD21_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} TCD_TCD21_DOFF_tag;

typedef union TCD_CITER21_TCD21_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:15;                /* Current Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER21_TCD21_CITER_ELINKNO_tag;

typedef union TCD_CITER21_TCD21_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER21_TCD21_CITER_ELINKYES_tag;

typedef union TCD_CITER21_union_tag {
  TCD_CITER21_TCD21_CITER_ELINKNO_tag TCD21_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_CITER21_TCD21_CITER_ELINKYES_tag TCD21_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_CITER21_tag;

typedef union TCD_TCD21_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} TCD_TCD21_DLAST_SGA_tag;

typedef union TCD_TCD21_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t START:1;                 /* Channel Start */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t _unused_13:1;            /* Reserved */
    vuint16_t BWC:2;                   /* Bandwidth Control */
  } B;
} TCD_TCD21_CSR_tag;

typedef union TCD_BITER21_TCD21_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enables Link */
  } B;
} TCD_BITER21_TCD21_BITER_ELINKNO_tag;

typedef union TCD_BITER21_TCD21_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_BITER21_TCD21_BITER_ELINKYES_tag;

typedef union TCD_BITER21_union_tag {
  TCD_BITER21_TCD21_BITER_ELINKNO_tag TCD21_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_BITER21_TCD21_BITER_ELINKYES_tag TCD21_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_BITER21_tag;

typedef union TCD_CH22_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ERQ:1;                   /* Enable DMA Request */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t _unused_4:26;            /* Reserved */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t ACTIVE:1;                /* Channel Active */
  } B;
} TCD_CH22_CSR_tag;

typedef union TCD_CH22_ES_union_tag {  /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t DBE:1;                   /* Destination Bus Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t _unused_8:23;            /* Reserved */
    vuint32_t ERR:1;                   /* Error In Channel */
  } B;
} TCD_CH22_ES_tag;

typedef union TCD_CH22_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t INT:1;                   /* Interrupt Request */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} TCD_CH22_INT_tag;

typedef union TCD_CH22_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t MID:4;                   /* Master ID */
    vuint32_t _unused_4:11;            /* Reserved */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} TCD_CH22_SBR_tag;

typedef union TCD_CH22_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t APL:3;                   /* Arbitration Priority Level */
    vuint32_t _unused_3:27;            /* Reserved */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
  } B;
} TCD_CH22_PRI_tag;

typedef union TCD_TCD22_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} TCD_TCD22_SADDR_tag;

typedef union TCD_TCD22_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} TCD_TCD22_SOFF_tag;

typedef union TCD_TCD22_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t SMOD:5;                  /* Source Address Modulo */
  } B;
} TCD_TCD22_ATTR_tag;

typedef union TCD_NBYTES22_TCD22_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES22_TCD22_NBYTES_MLOFFNO_tag;

typedef union TCD_NBYTES22_TCD22_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES22_TCD22_NBYTES_MLOFFYES_tag;

typedef union TCD_NBYTES22_union_tag {
  TCD_NBYTES22_TCD22_NBYTES_MLOFFNO_tag TCD22_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  TCD_NBYTES22_TCD22_NBYTES_MLOFFYES_tag TCD22_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} TCD_NBYTES22_tag;

typedef union TCD_TCD22_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} TCD_TCD22_SLAST_SDA_tag;

typedef union TCD_TCD22_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} TCD_TCD22_DADDR_tag;

typedef union TCD_TCD22_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} TCD_TCD22_DOFF_tag;

typedef union TCD_CITER22_TCD22_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:15;                /* Current Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER22_TCD22_CITER_ELINKNO_tag;

typedef union TCD_CITER22_TCD22_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER22_TCD22_CITER_ELINKYES_tag;

typedef union TCD_CITER22_union_tag {
  TCD_CITER22_TCD22_CITER_ELINKNO_tag TCD22_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_CITER22_TCD22_CITER_ELINKYES_tag TCD22_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_CITER22_tag;

typedef union TCD_TCD22_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} TCD_TCD22_DLAST_SGA_tag;

typedef union TCD_TCD22_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t START:1;                 /* Channel Start */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t _unused_13:1;            /* Reserved */
    vuint16_t BWC:2;                   /* Bandwidth Control */
  } B;
} TCD_TCD22_CSR_tag;

typedef union TCD_BITER22_TCD22_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enables Link */
  } B;
} TCD_BITER22_TCD22_BITER_ELINKNO_tag;

typedef union TCD_BITER22_TCD22_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_BITER22_TCD22_BITER_ELINKYES_tag;

typedef union TCD_BITER22_union_tag {
  TCD_BITER22_TCD22_BITER_ELINKNO_tag TCD22_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_BITER22_TCD22_BITER_ELINKYES_tag TCD22_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_BITER22_tag;

typedef union TCD_CH23_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ERQ:1;                   /* Enable DMA Request */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t _unused_4:26;            /* Reserved */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t ACTIVE:1;                /* Channel Active */
  } B;
} TCD_CH23_CSR_tag;

typedef union TCD_CH23_ES_union_tag {  /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t DBE:1;                   /* Destination Bus Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t _unused_8:23;            /* Reserved */
    vuint32_t ERR:1;                   /* Error In Channel */
  } B;
} TCD_CH23_ES_tag;

typedef union TCD_CH23_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t INT:1;                   /* Interrupt Request */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} TCD_CH23_INT_tag;

typedef union TCD_CH23_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t MID:4;                   /* Master ID */
    vuint32_t _unused_4:11;            /* Reserved */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} TCD_CH23_SBR_tag;

typedef union TCD_CH23_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t APL:3;                   /* Arbitration Priority Level */
    vuint32_t _unused_3:27;            /* Reserved */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
  } B;
} TCD_CH23_PRI_tag;

typedef union TCD_TCD23_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} TCD_TCD23_SADDR_tag;

typedef union TCD_TCD23_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} TCD_TCD23_SOFF_tag;

typedef union TCD_TCD23_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t SMOD:5;                  /* Source Address Modulo */
  } B;
} TCD_TCD23_ATTR_tag;

typedef union TCD_NBYTES23_TCD23_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES23_TCD23_NBYTES_MLOFFNO_tag;

typedef union TCD_NBYTES23_TCD23_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES23_TCD23_NBYTES_MLOFFYES_tag;

typedef union TCD_NBYTES23_union_tag {
  TCD_NBYTES23_TCD23_NBYTES_MLOFFNO_tag TCD23_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  TCD_NBYTES23_TCD23_NBYTES_MLOFFYES_tag TCD23_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} TCD_NBYTES23_tag;

typedef union TCD_TCD23_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} TCD_TCD23_SLAST_SDA_tag;

typedef union TCD_TCD23_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} TCD_TCD23_DADDR_tag;

typedef union TCD_TCD23_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} TCD_TCD23_DOFF_tag;

typedef union TCD_CITER23_TCD23_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:15;                /* Current Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER23_TCD23_CITER_ELINKNO_tag;

typedef union TCD_CITER23_TCD23_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER23_TCD23_CITER_ELINKYES_tag;

typedef union TCD_CITER23_union_tag {
  TCD_CITER23_TCD23_CITER_ELINKNO_tag TCD23_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_CITER23_TCD23_CITER_ELINKYES_tag TCD23_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_CITER23_tag;

typedef union TCD_TCD23_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} TCD_TCD23_DLAST_SGA_tag;

typedef union TCD_TCD23_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t START:1;                 /* Channel Start */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t _unused_13:1;            /* Reserved */
    vuint16_t BWC:2;                   /* Bandwidth Control */
  } B;
} TCD_TCD23_CSR_tag;

typedef union TCD_BITER23_TCD23_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enables Link */
  } B;
} TCD_BITER23_TCD23_BITER_ELINKNO_tag;

typedef union TCD_BITER23_TCD23_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_BITER23_TCD23_BITER_ELINKYES_tag;

typedef union TCD_BITER23_union_tag {
  TCD_BITER23_TCD23_BITER_ELINKNO_tag TCD23_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_BITER23_TCD23_BITER_ELINKYES_tag TCD23_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_BITER23_tag;

typedef union TCD_CH24_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ERQ:1;                   /* Enable DMA Request */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t _unused_4:26;            /* Reserved */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t ACTIVE:1;                /* Channel Active */
  } B;
} TCD_CH24_CSR_tag;

typedef union TCD_CH24_ES_union_tag {  /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t DBE:1;                   /* Destination Bus Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t _unused_8:23;            /* Reserved */
    vuint32_t ERR:1;                   /* Error In Channel */
  } B;
} TCD_CH24_ES_tag;

typedef union TCD_CH24_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t INT:1;                   /* Interrupt Request */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} TCD_CH24_INT_tag;

typedef union TCD_CH24_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t MID:4;                   /* Master ID */
    vuint32_t _unused_4:11;            /* Reserved */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} TCD_CH24_SBR_tag;

typedef union TCD_CH24_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t APL:3;                   /* Arbitration Priority Level */
    vuint32_t _unused_3:27;            /* Reserved */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
  } B;
} TCD_CH24_PRI_tag;

typedef union TCD_TCD24_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} TCD_TCD24_SADDR_tag;

typedef union TCD_TCD24_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} TCD_TCD24_SOFF_tag;

typedef union TCD_TCD24_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t SMOD:5;                  /* Source Address Modulo */
  } B;
} TCD_TCD24_ATTR_tag;

typedef union TCD_NBYTES24_TCD24_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES24_TCD24_NBYTES_MLOFFNO_tag;

typedef union TCD_NBYTES24_TCD24_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES24_TCD24_NBYTES_MLOFFYES_tag;

typedef union TCD_NBYTES24_union_tag {
  TCD_NBYTES24_TCD24_NBYTES_MLOFFNO_tag TCD24_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  TCD_NBYTES24_TCD24_NBYTES_MLOFFYES_tag TCD24_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} TCD_NBYTES24_tag;

typedef union TCD_TCD24_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} TCD_TCD24_SLAST_SDA_tag;

typedef union TCD_TCD24_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} TCD_TCD24_DADDR_tag;

typedef union TCD_TCD24_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} TCD_TCD24_DOFF_tag;

typedef union TCD_CITER24_TCD24_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:15;                /* Current Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER24_TCD24_CITER_ELINKNO_tag;

typedef union TCD_CITER24_TCD24_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER24_TCD24_CITER_ELINKYES_tag;

typedef union TCD_CITER24_union_tag {
  TCD_CITER24_TCD24_CITER_ELINKNO_tag TCD24_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_CITER24_TCD24_CITER_ELINKYES_tag TCD24_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_CITER24_tag;

typedef union TCD_TCD24_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} TCD_TCD24_DLAST_SGA_tag;

typedef union TCD_TCD24_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t START:1;                 /* Channel Start */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t _unused_13:1;            /* Reserved */
    vuint16_t BWC:2;                   /* Bandwidth Control */
  } B;
} TCD_TCD24_CSR_tag;

typedef union TCD_BITER24_TCD24_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enables Link */
  } B;
} TCD_BITER24_TCD24_BITER_ELINKNO_tag;

typedef union TCD_BITER24_TCD24_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_BITER24_TCD24_BITER_ELINKYES_tag;

typedef union TCD_BITER24_union_tag {
  TCD_BITER24_TCD24_BITER_ELINKNO_tag TCD24_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_BITER24_TCD24_BITER_ELINKYES_tag TCD24_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_BITER24_tag;

typedef union TCD_CH25_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ERQ:1;                   /* Enable DMA Request */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t _unused_4:26;            /* Reserved */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t ACTIVE:1;                /* Channel Active */
  } B;
} TCD_CH25_CSR_tag;

typedef union TCD_CH25_ES_union_tag {  /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t DBE:1;                   /* Destination Bus Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t _unused_8:23;            /* Reserved */
    vuint32_t ERR:1;                   /* Error In Channel */
  } B;
} TCD_CH25_ES_tag;

typedef union TCD_CH25_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t INT:1;                   /* Interrupt Request */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} TCD_CH25_INT_tag;

typedef union TCD_CH25_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t MID:4;                   /* Master ID */
    vuint32_t _unused_4:11;            /* Reserved */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} TCD_CH25_SBR_tag;

typedef union TCD_CH25_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t APL:3;                   /* Arbitration Priority Level */
    vuint32_t _unused_3:27;            /* Reserved */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
  } B;
} TCD_CH25_PRI_tag;

typedef union TCD_TCD25_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} TCD_TCD25_SADDR_tag;

typedef union TCD_TCD25_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} TCD_TCD25_SOFF_tag;

typedef union TCD_TCD25_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t SMOD:5;                  /* Source Address Modulo */
  } B;
} TCD_TCD25_ATTR_tag;

typedef union TCD_NBYTES25_TCD25_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES25_TCD25_NBYTES_MLOFFNO_tag;

typedef union TCD_NBYTES25_TCD25_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES25_TCD25_NBYTES_MLOFFYES_tag;

typedef union TCD_NBYTES25_union_tag {
  TCD_NBYTES25_TCD25_NBYTES_MLOFFNO_tag TCD25_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  TCD_NBYTES25_TCD25_NBYTES_MLOFFYES_tag TCD25_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} TCD_NBYTES25_tag;

typedef union TCD_TCD25_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} TCD_TCD25_SLAST_SDA_tag;

typedef union TCD_TCD25_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} TCD_TCD25_DADDR_tag;

typedef union TCD_TCD25_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} TCD_TCD25_DOFF_tag;

typedef union TCD_CITER25_TCD25_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:15;                /* Current Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER25_TCD25_CITER_ELINKNO_tag;

typedef union TCD_CITER25_TCD25_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER25_TCD25_CITER_ELINKYES_tag;

typedef union TCD_CITER25_union_tag {
  TCD_CITER25_TCD25_CITER_ELINKNO_tag TCD25_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_CITER25_TCD25_CITER_ELINKYES_tag TCD25_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_CITER25_tag;

typedef union TCD_TCD25_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} TCD_TCD25_DLAST_SGA_tag;

typedef union TCD_TCD25_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t START:1;                 /* Channel Start */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t _unused_13:1;            /* Reserved */
    vuint16_t BWC:2;                   /* Bandwidth Control */
  } B;
} TCD_TCD25_CSR_tag;

typedef union TCD_BITER25_TCD25_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enables Link */
  } B;
} TCD_BITER25_TCD25_BITER_ELINKNO_tag;

typedef union TCD_BITER25_TCD25_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_BITER25_TCD25_BITER_ELINKYES_tag;

typedef union TCD_BITER25_union_tag {
  TCD_BITER25_TCD25_BITER_ELINKNO_tag TCD25_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_BITER25_TCD25_BITER_ELINKYES_tag TCD25_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_BITER25_tag;

typedef union TCD_CH26_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ERQ:1;                   /* Enable DMA Request */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t _unused_4:26;            /* Reserved */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t ACTIVE:1;                /* Channel Active */
  } B;
} TCD_CH26_CSR_tag;

typedef union TCD_CH26_ES_union_tag {  /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t DBE:1;                   /* Destination Bus Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t _unused_8:23;            /* Reserved */
    vuint32_t ERR:1;                   /* Error In Channel */
  } B;
} TCD_CH26_ES_tag;

typedef union TCD_CH26_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t INT:1;                   /* Interrupt Request */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} TCD_CH26_INT_tag;

typedef union TCD_CH26_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t MID:4;                   /* Master ID */
    vuint32_t _unused_4:11;            /* Reserved */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} TCD_CH26_SBR_tag;

typedef union TCD_CH26_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t APL:3;                   /* Arbitration Priority Level */
    vuint32_t _unused_3:27;            /* Reserved */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
  } B;
} TCD_CH26_PRI_tag;

typedef union TCD_TCD26_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} TCD_TCD26_SADDR_tag;

typedef union TCD_TCD26_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} TCD_TCD26_SOFF_tag;

typedef union TCD_TCD26_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t SMOD:5;                  /* Source Address Modulo */
  } B;
} TCD_TCD26_ATTR_tag;

typedef union TCD_NBYTES26_TCD26_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES26_TCD26_NBYTES_MLOFFNO_tag;

typedef union TCD_NBYTES26_TCD26_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES26_TCD26_NBYTES_MLOFFYES_tag;

typedef union TCD_NBYTES26_union_tag {
  TCD_NBYTES26_TCD26_NBYTES_MLOFFNO_tag TCD26_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  TCD_NBYTES26_TCD26_NBYTES_MLOFFYES_tag TCD26_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} TCD_NBYTES26_tag;

typedef union TCD_TCD26_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} TCD_TCD26_SLAST_SDA_tag;

typedef union TCD_TCD26_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} TCD_TCD26_DADDR_tag;

typedef union TCD_TCD26_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} TCD_TCD26_DOFF_tag;

typedef union TCD_CITER26_TCD26_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:15;                /* Current Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER26_TCD26_CITER_ELINKNO_tag;

typedef union TCD_CITER26_TCD26_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER26_TCD26_CITER_ELINKYES_tag;

typedef union TCD_CITER26_union_tag {
  TCD_CITER26_TCD26_CITER_ELINKNO_tag TCD26_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_CITER26_TCD26_CITER_ELINKYES_tag TCD26_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_CITER26_tag;

typedef union TCD_TCD26_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} TCD_TCD26_DLAST_SGA_tag;

typedef union TCD_TCD26_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t START:1;                 /* Channel Start */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t _unused_13:1;            /* Reserved */
    vuint16_t BWC:2;                   /* Bandwidth Control */
  } B;
} TCD_TCD26_CSR_tag;

typedef union TCD_BITER26_TCD26_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enables Link */
  } B;
} TCD_BITER26_TCD26_BITER_ELINKNO_tag;

typedef union TCD_BITER26_TCD26_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_BITER26_TCD26_BITER_ELINKYES_tag;

typedef union TCD_BITER26_union_tag {
  TCD_BITER26_TCD26_BITER_ELINKNO_tag TCD26_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_BITER26_TCD26_BITER_ELINKYES_tag TCD26_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_BITER26_tag;

typedef union TCD_CH27_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ERQ:1;                   /* Enable DMA Request */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t _unused_4:26;            /* Reserved */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t ACTIVE:1;                /* Channel Active */
  } B;
} TCD_CH27_CSR_tag;

typedef union TCD_CH27_ES_union_tag {  /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t DBE:1;                   /* Destination Bus Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t _unused_8:23;            /* Reserved */
    vuint32_t ERR:1;                   /* Error In Channel */
  } B;
} TCD_CH27_ES_tag;

typedef union TCD_CH27_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t INT:1;                   /* Interrupt Request */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} TCD_CH27_INT_tag;

typedef union TCD_CH27_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t MID:4;                   /* Master ID */
    vuint32_t _unused_4:11;            /* Reserved */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} TCD_CH27_SBR_tag;

typedef union TCD_CH27_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t APL:3;                   /* Arbitration Priority Level */
    vuint32_t _unused_3:27;            /* Reserved */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
  } B;
} TCD_CH27_PRI_tag;

typedef union TCD_TCD27_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} TCD_TCD27_SADDR_tag;

typedef union TCD_TCD27_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} TCD_TCD27_SOFF_tag;

typedef union TCD_TCD27_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t SMOD:5;                  /* Source Address Modulo */
  } B;
} TCD_TCD27_ATTR_tag;

typedef union TCD_NBYTES27_TCD27_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES27_TCD27_NBYTES_MLOFFNO_tag;

typedef union TCD_NBYTES27_TCD27_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES27_TCD27_NBYTES_MLOFFYES_tag;

typedef union TCD_NBYTES27_union_tag {
  TCD_NBYTES27_TCD27_NBYTES_MLOFFNO_tag TCD27_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  TCD_NBYTES27_TCD27_NBYTES_MLOFFYES_tag TCD27_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} TCD_NBYTES27_tag;

typedef union TCD_TCD27_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} TCD_TCD27_SLAST_SDA_tag;

typedef union TCD_TCD27_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} TCD_TCD27_DADDR_tag;

typedef union TCD_TCD27_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} TCD_TCD27_DOFF_tag;

typedef union TCD_CITER27_TCD27_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:15;                /* Current Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER27_TCD27_CITER_ELINKNO_tag;

typedef union TCD_CITER27_TCD27_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER27_TCD27_CITER_ELINKYES_tag;

typedef union TCD_CITER27_union_tag {
  TCD_CITER27_TCD27_CITER_ELINKNO_tag TCD27_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_CITER27_TCD27_CITER_ELINKYES_tag TCD27_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_CITER27_tag;

typedef union TCD_TCD27_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} TCD_TCD27_DLAST_SGA_tag;

typedef union TCD_TCD27_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t START:1;                 /* Channel Start */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t _unused_13:1;            /* Reserved */
    vuint16_t BWC:2;                   /* Bandwidth Control */
  } B;
} TCD_TCD27_CSR_tag;

typedef union TCD_BITER27_TCD27_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enables Link */
  } B;
} TCD_BITER27_TCD27_BITER_ELINKNO_tag;

typedef union TCD_BITER27_TCD27_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_BITER27_TCD27_BITER_ELINKYES_tag;

typedef union TCD_BITER27_union_tag {
  TCD_BITER27_TCD27_BITER_ELINKNO_tag TCD27_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_BITER27_TCD27_BITER_ELINKYES_tag TCD27_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_BITER27_tag;

typedef union TCD_CH28_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ERQ:1;                   /* Enable DMA Request */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t _unused_4:26;            /* Reserved */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t ACTIVE:1;                /* Channel Active */
  } B;
} TCD_CH28_CSR_tag;

typedef union TCD_CH28_ES_union_tag {  /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t DBE:1;                   /* Destination Bus Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t _unused_8:23;            /* Reserved */
    vuint32_t ERR:1;                   /* Error In Channel */
  } B;
} TCD_CH28_ES_tag;

typedef union TCD_CH28_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t INT:1;                   /* Interrupt Request */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} TCD_CH28_INT_tag;

typedef union TCD_CH28_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t MID:4;                   /* Master ID */
    vuint32_t _unused_4:11;            /* Reserved */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} TCD_CH28_SBR_tag;

typedef union TCD_CH28_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t APL:3;                   /* Arbitration Priority Level */
    vuint32_t _unused_3:27;            /* Reserved */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
  } B;
} TCD_CH28_PRI_tag;

typedef union TCD_TCD28_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} TCD_TCD28_SADDR_tag;

typedef union TCD_TCD28_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} TCD_TCD28_SOFF_tag;

typedef union TCD_TCD28_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t SMOD:5;                  /* Source Address Modulo */
  } B;
} TCD_TCD28_ATTR_tag;

typedef union TCD_NBYTES28_TCD28_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES28_TCD28_NBYTES_MLOFFNO_tag;

typedef union TCD_NBYTES28_TCD28_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES28_TCD28_NBYTES_MLOFFYES_tag;

typedef union TCD_NBYTES28_union_tag {
  TCD_NBYTES28_TCD28_NBYTES_MLOFFNO_tag TCD28_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  TCD_NBYTES28_TCD28_NBYTES_MLOFFYES_tag TCD28_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} TCD_NBYTES28_tag;

typedef union TCD_TCD28_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} TCD_TCD28_SLAST_SDA_tag;

typedef union TCD_TCD28_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} TCD_TCD28_DADDR_tag;

typedef union TCD_TCD28_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} TCD_TCD28_DOFF_tag;

typedef union TCD_CITER28_TCD28_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:15;                /* Current Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER28_TCD28_CITER_ELINKNO_tag;

typedef union TCD_CITER28_TCD28_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER28_TCD28_CITER_ELINKYES_tag;

typedef union TCD_CITER28_union_tag {
  TCD_CITER28_TCD28_CITER_ELINKNO_tag TCD28_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_CITER28_TCD28_CITER_ELINKYES_tag TCD28_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_CITER28_tag;

typedef union TCD_TCD28_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} TCD_TCD28_DLAST_SGA_tag;

typedef union TCD_TCD28_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t START:1;                 /* Channel Start */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t _unused_13:1;            /* Reserved */
    vuint16_t BWC:2;                   /* Bandwidth Control */
  } B;
} TCD_TCD28_CSR_tag;

typedef union TCD_BITER28_TCD28_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enables Link */
  } B;
} TCD_BITER28_TCD28_BITER_ELINKNO_tag;

typedef union TCD_BITER28_TCD28_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_BITER28_TCD28_BITER_ELINKYES_tag;

typedef union TCD_BITER28_union_tag {
  TCD_BITER28_TCD28_BITER_ELINKNO_tag TCD28_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_BITER28_TCD28_BITER_ELINKYES_tag TCD28_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_BITER28_tag;

typedef union TCD_CH29_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ERQ:1;                   /* Enable DMA Request */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t _unused_4:26;            /* Reserved */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t ACTIVE:1;                /* Channel Active */
  } B;
} TCD_CH29_CSR_tag;

typedef union TCD_CH29_ES_union_tag {  /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t DBE:1;                   /* Destination Bus Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t _unused_8:23;            /* Reserved */
    vuint32_t ERR:1;                   /* Error In Channel */
  } B;
} TCD_CH29_ES_tag;

typedef union TCD_CH29_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t INT:1;                   /* Interrupt Request */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} TCD_CH29_INT_tag;

typedef union TCD_CH29_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t MID:4;                   /* Master ID */
    vuint32_t _unused_4:11;            /* Reserved */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} TCD_CH29_SBR_tag;

typedef union TCD_CH29_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t APL:3;                   /* Arbitration Priority Level */
    vuint32_t _unused_3:27;            /* Reserved */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
  } B;
} TCD_CH29_PRI_tag;

typedef union TCD_TCD29_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} TCD_TCD29_SADDR_tag;

typedef union TCD_TCD29_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} TCD_TCD29_SOFF_tag;

typedef union TCD_TCD29_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t SMOD:5;                  /* Source Address Modulo */
  } B;
} TCD_TCD29_ATTR_tag;

typedef union TCD_NBYTES29_TCD29_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES29_TCD29_NBYTES_MLOFFNO_tag;

typedef union TCD_NBYTES29_TCD29_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES29_TCD29_NBYTES_MLOFFYES_tag;

typedef union TCD_NBYTES29_union_tag {
  TCD_NBYTES29_TCD29_NBYTES_MLOFFNO_tag TCD29_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  TCD_NBYTES29_TCD29_NBYTES_MLOFFYES_tag TCD29_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} TCD_NBYTES29_tag;

typedef union TCD_TCD29_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} TCD_TCD29_SLAST_SDA_tag;

typedef union TCD_TCD29_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} TCD_TCD29_DADDR_tag;

typedef union TCD_TCD29_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} TCD_TCD29_DOFF_tag;

typedef union TCD_CITER29_TCD29_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:15;                /* Current Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER29_TCD29_CITER_ELINKNO_tag;

typedef union TCD_CITER29_TCD29_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER29_TCD29_CITER_ELINKYES_tag;

typedef union TCD_CITER29_union_tag {
  TCD_CITER29_TCD29_CITER_ELINKNO_tag TCD29_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_CITER29_TCD29_CITER_ELINKYES_tag TCD29_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_CITER29_tag;

typedef union TCD_TCD29_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} TCD_TCD29_DLAST_SGA_tag;

typedef union TCD_TCD29_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t START:1;                 /* Channel Start */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t _unused_13:1;            /* Reserved */
    vuint16_t BWC:2;                   /* Bandwidth Control */
  } B;
} TCD_TCD29_CSR_tag;

typedef union TCD_BITER29_TCD29_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enables Link */
  } B;
} TCD_BITER29_TCD29_BITER_ELINKNO_tag;

typedef union TCD_BITER29_TCD29_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_BITER29_TCD29_BITER_ELINKYES_tag;

typedef union TCD_BITER29_union_tag {
  TCD_BITER29_TCD29_BITER_ELINKNO_tag TCD29_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_BITER29_TCD29_BITER_ELINKYES_tag TCD29_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_BITER29_tag;

typedef union TCD_CH30_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ERQ:1;                   /* Enable DMA Request */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t _unused_4:26;            /* Reserved */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t ACTIVE:1;                /* Channel Active */
  } B;
} TCD_CH30_CSR_tag;

typedef union TCD_CH30_ES_union_tag {  /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t DBE:1;                   /* Destination Bus Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t _unused_8:23;            /* Reserved */
    vuint32_t ERR:1;                   /* Error In Channel */
  } B;
} TCD_CH30_ES_tag;

typedef union TCD_CH30_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t INT:1;                   /* Interrupt Request */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} TCD_CH30_INT_tag;

typedef union TCD_CH30_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t MID:4;                   /* Master ID */
    vuint32_t _unused_4:11;            /* Reserved */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} TCD_CH30_SBR_tag;

typedef union TCD_CH30_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t APL:3;                   /* Arbitration Priority Level */
    vuint32_t _unused_3:27;            /* Reserved */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
  } B;
} TCD_CH30_PRI_tag;

typedef union TCD_TCD30_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} TCD_TCD30_SADDR_tag;

typedef union TCD_TCD30_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} TCD_TCD30_SOFF_tag;

typedef union TCD_TCD30_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t SMOD:5;                  /* Source Address Modulo */
  } B;
} TCD_TCD30_ATTR_tag;

typedef union TCD_NBYTES30_TCD30_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES30_TCD30_NBYTES_MLOFFNO_tag;

typedef union TCD_NBYTES30_TCD30_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES30_TCD30_NBYTES_MLOFFYES_tag;

typedef union TCD_NBYTES30_union_tag {
  TCD_NBYTES30_TCD30_NBYTES_MLOFFNO_tag TCD30_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  TCD_NBYTES30_TCD30_NBYTES_MLOFFYES_tag TCD30_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} TCD_NBYTES30_tag;

typedef union TCD_TCD30_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} TCD_TCD30_SLAST_SDA_tag;

typedef union TCD_TCD30_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} TCD_TCD30_DADDR_tag;

typedef union TCD_TCD30_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} TCD_TCD30_DOFF_tag;

typedef union TCD_CITER30_TCD30_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:15;                /* Current Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER30_TCD30_CITER_ELINKNO_tag;

typedef union TCD_CITER30_TCD30_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER30_TCD30_CITER_ELINKYES_tag;

typedef union TCD_CITER30_union_tag {
  TCD_CITER30_TCD30_CITER_ELINKNO_tag TCD30_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_CITER30_TCD30_CITER_ELINKYES_tag TCD30_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_CITER30_tag;

typedef union TCD_TCD30_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} TCD_TCD30_DLAST_SGA_tag;

typedef union TCD_TCD30_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t START:1;                 /* Channel Start */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t _unused_13:1;            /* Reserved */
    vuint16_t BWC:2;                   /* Bandwidth Control */
  } B;
} TCD_TCD30_CSR_tag;

typedef union TCD_BITER30_TCD30_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enables Link */
  } B;
} TCD_BITER30_TCD30_BITER_ELINKNO_tag;

typedef union TCD_BITER30_TCD30_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_BITER30_TCD30_BITER_ELINKYES_tag;

typedef union TCD_BITER30_union_tag {
  TCD_BITER30_TCD30_BITER_ELINKNO_tag TCD30_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_BITER30_TCD30_BITER_ELINKYES_tag TCD30_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_BITER30_tag;

typedef union TCD_CH31_CSR_union_tag { /* Channel Control and Status */
  vuint32_t R;
  struct {
    vuint32_t ERQ:1;                   /* Enable DMA Request */
    vuint32_t EARQ:1;                  /* Enable Asynchronous DMA Request In Stop Mode For Channel */
    vuint32_t EEI:1;                   /* Enable Error Interrupt */
    vuint32_t EBW:1;                   /* Enable Buffered Writes */
    vuint32_t _unused_4:26;            /* Reserved */
    vuint32_t DONE:1;                  /* Channel Done */
    vuint32_t ACTIVE:1;                /* Channel Active */
  } B;
} TCD_CH31_CSR_tag;

typedef union TCD_CH31_ES_union_tag {  /* Channel Error Status */
  vuint32_t R;
  struct {
    vuint32_t DBE:1;                   /* Destination Bus Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t _unused_8:23;            /* Reserved */
    vuint32_t ERR:1;                   /* Error In Channel */
  } B;
} TCD_CH31_ES_tag;

typedef union TCD_CH31_INT_union_tag { /* Channel Interrupt Status */
  vuint32_t R;
  struct {
    vuint32_t INT:1;                   /* Interrupt Request */
    vuint32_t _unused_1:31;            /* Reserved */
  } B;
} TCD_CH31_INT_tag;

typedef union TCD_CH31_SBR_union_tag { /* Channel System Bus */
  vuint32_t R;
  struct {
    vuint32_t MID:4;                   /* Master ID */
    vuint32_t _unused_4:11;            /* Reserved */
    vuint32_t PAL:1;                   /* Privileged Access Level */
    vuint32_t EMI:1;                   /* Enable Master ID Replication */
    vuint32_t ATTR:3;                  /* Attribute Output */
    vuint32_t _unused_20:12;           /* Reserved */
  } B;
} TCD_CH31_SBR_tag;

typedef union TCD_CH31_PRI_union_tag { /* Channel Priority */
  vuint32_t R;
  struct {
    vuint32_t APL:3;                   /* Arbitration Priority Level */
    vuint32_t _unused_3:27;            /* Reserved */
    vuint32_t DPA:1;                   /* Disable Preempt Ability */
    vuint32_t ECP:1;                   /* Enable Channel Preemption */
  } B;
} TCD_CH31_PRI_tag;

typedef union TCD_TCD31_SADDR_union_tag { /* TCD Source Address */
  vuint32_t R;
  struct {
    vuint32_t SADDR:32;                /* Source Address */
  } B;
} TCD_TCD31_SADDR_tag;

typedef union TCD_TCD31_SOFF_union_tag { /* TCD Signed Source Address Offset */
  vuint16_t R;
  struct {
    vuint16_t SOFF:16;                 /* Source Address Signed Offset */
  } B;
} TCD_TCD31_SOFF_tag;

typedef union TCD_TCD31_ATTR_union_tag { /* TCD Transfer Attributes */
  vuint16_t R;
  struct {
    vuint16_t DSIZE:3;                 /* Destination Data Transfer Size */
    vuint16_t DMOD:5;                  /* Destination Address Modulo */
    vuint16_t SSIZE:3;                 /* Source Data Transfer Size */
    vuint16_t SMOD:5;                  /* Source Address Modulo */
  } B;
} TCD_TCD31_ATTR_tag;

typedef union TCD_NBYTES31_TCD31_NBYTES_MLOFFNO_union_tag { /* TCD Transfer Size Without Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:30;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES31_TCD31_NBYTES_MLOFFNO_tag;

typedef union TCD_NBYTES31_TCD31_NBYTES_MLOFFYES_union_tag { /* TCD Transfer Size with Minor Loop Offsets */
  vuint32_t R;
  struct {
    vuint32_t NBYTES:10;               /* Number of Bytes To Transfer Per Service Request */
    vuint32_t MLOFF:20;                /* Minor Loop Offset */
    vuint32_t DMLOE:1;                 /* Destination Minor Loop Offset Enable */
    vuint32_t SMLOE:1;                 /* Source Minor Loop Offset Enable */
  } B;
} TCD_NBYTES31_TCD31_NBYTES_MLOFFYES_tag;

typedef union TCD_NBYTES31_union_tag {
  TCD_NBYTES31_TCD31_NBYTES_MLOFFNO_tag TCD31_NBYTES_MLOFFNO; /* TCD Transfer Size Without Minor Loop Offsets */
  TCD_NBYTES31_TCD31_NBYTES_MLOFFYES_tag TCD31_NBYTES_MLOFFYES; /* TCD Transfer Size with Minor Loop Offsets */
} TCD_NBYTES31_tag;

typedef union TCD_TCD31_SLAST_SDA_union_tag { /* TCD Last Source Address Adjustment / Store DADDR Address */
  vuint32_t R;
  struct {
    vuint32_t SLAST_SDA:32;            /* Last Source Address Adjustment / Store DADDR Address */
  } B;
} TCD_TCD31_SLAST_SDA_tag;

typedef union TCD_TCD31_DADDR_union_tag { /* TCD Destination Address */
  vuint32_t R;
  struct {
    vuint32_t DADDR:32;                /* Destination Address */
  } B;
} TCD_TCD31_DADDR_tag;

typedef union TCD_TCD31_DOFF_union_tag { /* TCD Signed Destination Address Offset */
  vuint16_t R;
  struct {
    vuint16_t DOFF:16;                 /* Destination Address Signed Offset */
  } B;
} TCD_TCD31_DOFF_tag;

typedef union TCD_CITER31_TCD31_CITER_ELINKNO_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:15;                /* Current Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER31_TCD31_CITER_ELINKNO_tag;

typedef union TCD_CITER31_TCD31_CITER_ELINKYES_union_tag { /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t CITER:9;                 /* Current Major Iteration Count */
    vuint16_t LINKCH:5;                /* Minor Loop Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_CITER31_TCD31_CITER_ELINKYES_tag;

typedef union TCD_CITER31_union_tag {
  TCD_CITER31_TCD31_CITER_ELINKNO_tag TCD31_CITER_ELINKNO; /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_CITER31_TCD31_CITER_ELINKYES_tag TCD31_CITER_ELINKYES; /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_CITER31_tag;

typedef union TCD_TCD31_DLAST_SGA_union_tag { /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  vuint32_t R;
  struct {
    vuint32_t DLAST_SGA:32;            /* Last Destination Address Adjustment / Scatter Gather Address */
  } B;
} TCD_TCD31_DLAST_SGA_tag;

typedef union TCD_TCD31_CSR_union_tag { /* TCD Control and Status */
  vuint16_t R;
  struct {
    vuint16_t START:1;                 /* Channel Start */
    vuint16_t INTMAJOR:1;              /* Enable Interrupt If Major count complete */
    vuint16_t INTHALF:1;               /* Enable Interrupt If Major Counter Half-complete */
    vuint16_t DREQ:1;                  /* Disable Request */
    vuint16_t ESG:1;                   /* Enable Scatter/Gather Processing */
    vuint16_t MAJORELINK:1;            /* Enable Link When Major Loop Complete */
    vuint16_t EEOP:1;                  /* Enable End-Of-Packet Processing */
    vuint16_t ESDA:1;                  /* Enable Store Destination Address */
    vuint16_t MAJORLINKCH:5;           /* Major Loop Link Channel Number */
    vuint16_t _unused_13:1;            /* Reserved */
    vuint16_t BWC:2;                   /* Bandwidth Control */
  } B;
} TCD_TCD31_CSR_tag;

typedef union TCD_BITER31_TCD31_BITER_ELINKNO_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:15;                /* Starting Major Iteration Count */
    vuint16_t ELINK:1;                 /* Enables Link */
  } B;
} TCD_BITER31_TCD31_BITER_ELINKNO_tag;

typedef union TCD_BITER31_TCD31_BITER_ELINKYES_union_tag { /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
  vuint16_t R;
  struct {
    vuint16_t BITER:9;                 /* Starting Major Iteration Count */
    vuint16_t LINKCH:5;                /* Link Channel Number */
    vuint16_t _unused_14:1;            /* Reserved */
    vuint16_t ELINK:1;                 /* Enable Link */
  } B;
} TCD_BITER31_TCD31_BITER_ELINKYES_tag;

typedef union TCD_BITER31_union_tag {
  TCD_BITER31_TCD31_BITER_ELINKNO_tag TCD31_BITER_ELINKNO; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
  TCD_BITER31_TCD31_BITER_ELINKYES_tag TCD31_BITER_ELINKYES; /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
} TCD_BITER31_tag;

struct TCD_tag {
  TCD_CH0_CSR_tag CH0_CSR;             /* Channel Control and Status */
  TCD_CH0_ES_tag CH0_ES;               /* Channel Error Status */
  TCD_CH0_INT_tag CH0_INT;             /* Channel Interrupt Status */
  TCD_CH0_SBR_tag CH0_SBR;             /* Channel System Bus */
  TCD_CH0_PRI_tag CH0_PRI;             /* Channel Priority */
  uint8_t TCD_reserved0[12];
  TCD_TCD0_SADDR_tag TCD0_SADDR;       /* TCD Source Address */
  TCD_TCD0_SOFF_tag TCD0_SOFF;         /* TCD Signed Source Address Offset */
  TCD_TCD0_ATTR_tag TCD0_ATTR;         /* TCD Transfer Attributes */
  TCD_NBYTES0_tag NBYTES0;
  TCD_TCD0_SLAST_SDA_tag TCD0_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  TCD_TCD0_DADDR_tag TCD0_DADDR;       /* TCD Destination Address */
  TCD_TCD0_DOFF_tag TCD0_DOFF;         /* TCD Signed Destination Address Offset */
  TCD_CITER0_tag CITER0;
  TCD_TCD0_DLAST_SGA_tag TCD0_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  TCD_TCD0_CSR_tag TCD0_CSR;           /* TCD Control and Status */
  TCD_BITER0_tag BITER0;
  uint8_t TCD_reserved1[16320];
  TCD_CH1_CSR_tag CH1_CSR;             /* Channel Control and Status */
  TCD_CH1_ES_tag CH1_ES;               /* Channel Error Status */
  TCD_CH1_INT_tag CH1_INT;             /* Channel Interrupt Status */
  TCD_CH1_SBR_tag CH1_SBR;             /* Channel System Bus */
  TCD_CH1_PRI_tag CH1_PRI;             /* Channel Priority */
  uint8_t TCD_reserved2[12];
  TCD_TCD1_SADDR_tag TCD1_SADDR;       /* TCD Source Address */
  TCD_TCD1_SOFF_tag TCD1_SOFF;         /* TCD Signed Source Address Offset */
  TCD_TCD1_ATTR_tag TCD1_ATTR;         /* TCD Transfer Attributes */
  TCD_NBYTES1_tag NBYTES1;
  TCD_TCD1_SLAST_SDA_tag TCD1_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  TCD_TCD1_DADDR_tag TCD1_DADDR;       /* TCD Destination Address */
  TCD_TCD1_DOFF_tag TCD1_DOFF;         /* TCD Signed Destination Address Offset */
  TCD_CITER1_tag CITER1;
  TCD_TCD1_DLAST_SGA_tag TCD1_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  TCD_TCD1_CSR_tag TCD1_CSR;           /* TCD Control and Status */
  TCD_BITER1_tag BITER1;
  uint8_t TCD_reserved3[16320];
  TCD_CH2_CSR_tag CH2_CSR;             /* Channel Control and Status */
  TCD_CH2_ES_tag CH2_ES;               /* Channel Error Status */
  TCD_CH2_INT_tag CH2_INT;             /* Channel Interrupt Status */
  TCD_CH2_SBR_tag CH2_SBR;             /* Channel System Bus */
  TCD_CH2_PRI_tag CH2_PRI;             /* Channel Priority */
  uint8_t TCD_reserved4[12];
  TCD_TCD2_SADDR_tag TCD2_SADDR;       /* TCD Source Address */
  TCD_TCD2_SOFF_tag TCD2_SOFF;         /* TCD Signed Source Address Offset */
  TCD_TCD2_ATTR_tag TCD2_ATTR;         /* TCD Transfer Attributes */
  TCD_NBYTES2_tag NBYTES2;
  TCD_TCD2_SLAST_SDA_tag TCD2_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  TCD_TCD2_DADDR_tag TCD2_DADDR;       /* TCD Destination Address */
  TCD_TCD2_DOFF_tag TCD2_DOFF;         /* TCD Signed Destination Address Offset */
  TCD_CITER2_tag CITER2;
  TCD_TCD2_DLAST_SGA_tag TCD2_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  TCD_TCD2_CSR_tag TCD2_CSR;           /* TCD Control and Status */
  TCD_BITER2_tag BITER2;
  uint8_t TCD_reserved5[16320];
  TCD_CH3_CSR_tag CH3_CSR;             /* Channel Control and Status */
  TCD_CH3_ES_tag CH3_ES;               /* Channel Error Status */
  TCD_CH3_INT_tag CH3_INT;             /* Channel Interrupt Status */
  TCD_CH3_SBR_tag CH3_SBR;             /* Channel System Bus */
  TCD_CH3_PRI_tag CH3_PRI;             /* Channel Priority */
  uint8_t TCD_reserved6[12];
  TCD_TCD3_SADDR_tag TCD3_SADDR;       /* TCD Source Address */
  TCD_TCD3_SOFF_tag TCD3_SOFF;         /* TCD Signed Source Address Offset */
  TCD_TCD3_ATTR_tag TCD3_ATTR;         /* TCD Transfer Attributes */
  TCD_NBYTES3_tag NBYTES3;
  TCD_TCD3_SLAST_SDA_tag TCD3_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  TCD_TCD3_DADDR_tag TCD3_DADDR;       /* TCD Destination Address */
  TCD_TCD3_DOFF_tag TCD3_DOFF;         /* TCD Signed Destination Address Offset */
  TCD_CITER3_tag CITER3;
  TCD_TCD3_DLAST_SGA_tag TCD3_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  TCD_TCD3_CSR_tag TCD3_CSR;           /* TCD Control and Status */
  TCD_BITER3_tag BITER3;
  uint8_t TCD_reserved7[16320];
  TCD_CH4_CSR_tag CH4_CSR;             /* Channel Control and Status */
  TCD_CH4_ES_tag CH4_ES;               /* Channel Error Status */
  TCD_CH4_INT_tag CH4_INT;             /* Channel Interrupt Status */
  TCD_CH4_SBR_tag CH4_SBR;             /* Channel System Bus */
  TCD_CH4_PRI_tag CH4_PRI;             /* Channel Priority */
  uint8_t TCD_reserved8[12];
  TCD_TCD4_SADDR_tag TCD4_SADDR;       /* TCD Source Address */
  TCD_TCD4_SOFF_tag TCD4_SOFF;         /* TCD Signed Source Address Offset */
  TCD_TCD4_ATTR_tag TCD4_ATTR;         /* TCD Transfer Attributes */
  TCD_NBYTES4_tag NBYTES4;
  TCD_TCD4_SLAST_SDA_tag TCD4_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  TCD_TCD4_DADDR_tag TCD4_DADDR;       /* TCD Destination Address */
  TCD_TCD4_DOFF_tag TCD4_DOFF;         /* TCD Signed Destination Address Offset */
  TCD_CITER4_tag CITER4;
  TCD_TCD4_DLAST_SGA_tag TCD4_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  TCD_TCD4_CSR_tag TCD4_CSR;           /* TCD Control and Status */
  TCD_BITER4_tag BITER4;
  uint8_t TCD_reserved9[16320];
  TCD_CH5_CSR_tag CH5_CSR;             /* Channel Control and Status */
  TCD_CH5_ES_tag CH5_ES;               /* Channel Error Status */
  TCD_CH5_INT_tag CH5_INT;             /* Channel Interrupt Status */
  TCD_CH5_SBR_tag CH5_SBR;             /* Channel System Bus */
  TCD_CH5_PRI_tag CH5_PRI;             /* Channel Priority */
  uint8_t TCD_reserved10[12];
  TCD_TCD5_SADDR_tag TCD5_SADDR;       /* TCD Source Address */
  TCD_TCD5_SOFF_tag TCD5_SOFF;         /* TCD Signed Source Address Offset */
  TCD_TCD5_ATTR_tag TCD5_ATTR;         /* TCD Transfer Attributes */
  TCD_NBYTES5_tag NBYTES5;
  TCD_TCD5_SLAST_SDA_tag TCD5_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  TCD_TCD5_DADDR_tag TCD5_DADDR;       /* TCD Destination Address */
  TCD_TCD5_DOFF_tag TCD5_DOFF;         /* TCD Signed Destination Address Offset */
  TCD_CITER5_tag CITER5;
  TCD_TCD5_DLAST_SGA_tag TCD5_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  TCD_TCD5_CSR_tag TCD5_CSR;           /* TCD Control and Status */
  TCD_BITER5_tag BITER5;
  uint8_t TCD_reserved11[16320];
  TCD_CH6_CSR_tag CH6_CSR;             /* Channel Control and Status */
  TCD_CH6_ES_tag CH6_ES;               /* Channel Error Status */
  TCD_CH6_INT_tag CH6_INT;             /* Channel Interrupt Status */
  TCD_CH6_SBR_tag CH6_SBR;             /* Channel System Bus */
  TCD_CH6_PRI_tag CH6_PRI;             /* Channel Priority */
  uint8_t TCD_reserved12[12];
  TCD_TCD6_SADDR_tag TCD6_SADDR;       /* TCD Source Address */
  TCD_TCD6_SOFF_tag TCD6_SOFF;         /* TCD Signed Source Address Offset */
  TCD_TCD6_ATTR_tag TCD6_ATTR;         /* TCD Transfer Attributes */
  TCD_NBYTES6_tag NBYTES6;
  TCD_TCD6_SLAST_SDA_tag TCD6_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  TCD_TCD6_DADDR_tag TCD6_DADDR;       /* TCD Destination Address */
  TCD_TCD6_DOFF_tag TCD6_DOFF;         /* TCD Signed Destination Address Offset */
  TCD_CITER6_tag CITER6;
  TCD_TCD6_DLAST_SGA_tag TCD6_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  TCD_TCD6_CSR_tag TCD6_CSR;           /* TCD Control and Status */
  TCD_BITER6_tag BITER6;
  uint8_t TCD_reserved13[16320];
  TCD_CH7_CSR_tag CH7_CSR;             /* Channel Control and Status */
  TCD_CH7_ES_tag CH7_ES;               /* Channel Error Status */
  TCD_CH7_INT_tag CH7_INT;             /* Channel Interrupt Status */
  TCD_CH7_SBR_tag CH7_SBR;             /* Channel System Bus */
  TCD_CH7_PRI_tag CH7_PRI;             /* Channel Priority */
  uint8_t TCD_reserved14[12];
  TCD_TCD7_SADDR_tag TCD7_SADDR;       /* TCD Source Address */
  TCD_TCD7_SOFF_tag TCD7_SOFF;         /* TCD Signed Source Address Offset */
  TCD_TCD7_ATTR_tag TCD7_ATTR;         /* TCD Transfer Attributes */
  TCD_NBYTES7_tag NBYTES7;
  TCD_TCD7_SLAST_SDA_tag TCD7_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  TCD_TCD7_DADDR_tag TCD7_DADDR;       /* TCD Destination Address */
  TCD_TCD7_DOFF_tag TCD7_DOFF;         /* TCD Signed Destination Address Offset */
  TCD_CITER7_tag CITER7;
  TCD_TCD7_DLAST_SGA_tag TCD7_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  TCD_TCD7_CSR_tag TCD7_CSR;           /* TCD Control and Status */
  TCD_BITER7_tag BITER7;
  uint8_t TCD_reserved15[16320];
  TCD_CH8_CSR_tag CH8_CSR;             /* Channel Control and Status */
  TCD_CH8_ES_tag CH8_ES;               /* Channel Error Status */
  TCD_CH8_INT_tag CH8_INT;             /* Channel Interrupt Status */
  TCD_CH8_SBR_tag CH8_SBR;             /* Channel System Bus */
  TCD_CH8_PRI_tag CH8_PRI;             /* Channel Priority */
  uint8_t TCD_reserved16[12];
  TCD_TCD8_SADDR_tag TCD8_SADDR;       /* TCD Source Address */
  TCD_TCD8_SOFF_tag TCD8_SOFF;         /* TCD Signed Source Address Offset */
  TCD_TCD8_ATTR_tag TCD8_ATTR;         /* TCD Transfer Attributes */
  TCD_NBYTES8_tag NBYTES8;
  TCD_TCD8_SLAST_SDA_tag TCD8_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  TCD_TCD8_DADDR_tag TCD8_DADDR;       /* TCD Destination Address */
  TCD_TCD8_DOFF_tag TCD8_DOFF;         /* TCD Signed Destination Address Offset */
  TCD_CITER8_tag CITER8;
  TCD_TCD8_DLAST_SGA_tag TCD8_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  TCD_TCD8_CSR_tag TCD8_CSR;           /* TCD Control and Status */
  TCD_BITER8_tag BITER8;
  uint8_t TCD_reserved17[16320];
  TCD_CH9_CSR_tag CH9_CSR;             /* Channel Control and Status */
  TCD_CH9_ES_tag CH9_ES;               /* Channel Error Status */
  TCD_CH9_INT_tag CH9_INT;             /* Channel Interrupt Status */
  TCD_CH9_SBR_tag CH9_SBR;             /* Channel System Bus */
  TCD_CH9_PRI_tag CH9_PRI;             /* Channel Priority */
  uint8_t TCD_reserved18[12];
  TCD_TCD9_SADDR_tag TCD9_SADDR;       /* TCD Source Address */
  TCD_TCD9_SOFF_tag TCD9_SOFF;         /* TCD Signed Source Address Offset */
  TCD_TCD9_ATTR_tag TCD9_ATTR;         /* TCD Transfer Attributes */
  TCD_NBYTES9_tag NBYTES9;
  TCD_TCD9_SLAST_SDA_tag TCD9_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  TCD_TCD9_DADDR_tag TCD9_DADDR;       /* TCD Destination Address */
  TCD_TCD9_DOFF_tag TCD9_DOFF;         /* TCD Signed Destination Address Offset */
  TCD_CITER9_tag CITER9;
  TCD_TCD9_DLAST_SGA_tag TCD9_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  TCD_TCD9_CSR_tag TCD9_CSR;           /* TCD Control and Status */
  TCD_BITER9_tag BITER9;
  uint8_t TCD_reserved19[16320];
  TCD_CH10_CSR_tag CH10_CSR;           /* Channel Control and Status */
  TCD_CH10_ES_tag CH10_ES;             /* Channel Error Status */
  TCD_CH10_INT_tag CH10_INT;           /* Channel Interrupt Status */
  TCD_CH10_SBR_tag CH10_SBR;           /* Channel System Bus */
  TCD_CH10_PRI_tag CH10_PRI;           /* Channel Priority */
  uint8_t TCD_reserved20[12];
  TCD_TCD10_SADDR_tag TCD10_SADDR;     /* TCD Source Address */
  TCD_TCD10_SOFF_tag TCD10_SOFF;       /* TCD Signed Source Address Offset */
  TCD_TCD10_ATTR_tag TCD10_ATTR;       /* TCD Transfer Attributes */
  TCD_NBYTES10_tag NBYTES10;
  TCD_TCD10_SLAST_SDA_tag TCD10_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  TCD_TCD10_DADDR_tag TCD10_DADDR;     /* TCD Destination Address */
  TCD_TCD10_DOFF_tag TCD10_DOFF;       /* TCD Signed Destination Address Offset */
  TCD_CITER10_tag CITER10;
  TCD_TCD10_DLAST_SGA_tag TCD10_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  TCD_TCD10_CSR_tag TCD10_CSR;         /* TCD Control and Status */
  TCD_BITER10_tag BITER10;
  uint8_t TCD_reserved21[16320];
  TCD_CH11_CSR_tag CH11_CSR;           /* Channel Control and Status */
  TCD_CH11_ES_tag CH11_ES;             /* Channel Error Status */
  TCD_CH11_INT_tag CH11_INT;           /* Channel Interrupt Status */
  TCD_CH11_SBR_tag CH11_SBR;           /* Channel System Bus */
  TCD_CH11_PRI_tag CH11_PRI;           /* Channel Priority */
  uint8_t TCD_reserved22[12];
  TCD_TCD11_SADDR_tag TCD11_SADDR;     /* TCD Source Address */
  TCD_TCD11_SOFF_tag TCD11_SOFF;       /* TCD Signed Source Address Offset */
  TCD_TCD11_ATTR_tag TCD11_ATTR;       /* TCD Transfer Attributes */
  TCD_NBYTES11_tag NBYTES11;
  TCD_TCD11_SLAST_SDA_tag TCD11_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  TCD_TCD11_DADDR_tag TCD11_DADDR;     /* TCD Destination Address */
  TCD_TCD11_DOFF_tag TCD11_DOFF;       /* TCD Signed Destination Address Offset */
  TCD_CITER11_tag CITER11;
  TCD_TCD11_DLAST_SGA_tag TCD11_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  TCD_TCD11_CSR_tag TCD11_CSR;         /* TCD Control and Status */
  TCD_BITER11_tag BITER11;
  uint8_t TCD_reserved23[1916864];
  TCD_CH12_CSR_tag CH12_CSR;           /* Channel Control and Status */
  TCD_CH12_ES_tag CH12_ES;             /* Channel Error Status */
  TCD_CH12_INT_tag CH12_INT;           /* Channel Interrupt Status */
  TCD_CH12_SBR_tag CH12_SBR;           /* Channel System Bus */
  TCD_CH12_PRI_tag CH12_PRI;           /* Channel Priority */
  uint8_t TCD_reserved24[12];
  TCD_TCD12_SADDR_tag TCD12_SADDR;     /* TCD Source Address */
  TCD_TCD12_SOFF_tag TCD12_SOFF;       /* TCD Signed Source Address Offset */
  TCD_TCD12_ATTR_tag TCD12_ATTR;       /* TCD Transfer Attributes */
  TCD_NBYTES12_tag NBYTES12;
  TCD_TCD12_SLAST_SDA_tag TCD12_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  TCD_TCD12_DADDR_tag TCD12_DADDR;     /* TCD Destination Address */
  TCD_TCD12_DOFF_tag TCD12_DOFF;       /* TCD Signed Destination Address Offset */
  TCD_CITER12_tag CITER12;
  TCD_TCD12_DLAST_SGA_tag TCD12_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  TCD_TCD12_CSR_tag TCD12_CSR;         /* TCD Control and Status */
  TCD_BITER12_tag BITER12;
  uint8_t TCD_reserved25[16320];
  TCD_CH13_CSR_tag CH13_CSR;           /* Channel Control and Status */
  TCD_CH13_ES_tag CH13_ES;             /* Channel Error Status */
  TCD_CH13_INT_tag CH13_INT;           /* Channel Interrupt Status */
  TCD_CH13_SBR_tag CH13_SBR;           /* Channel System Bus */
  TCD_CH13_PRI_tag CH13_PRI;           /* Channel Priority */
  uint8_t TCD_reserved26[12];
  TCD_TCD13_SADDR_tag TCD13_SADDR;     /* TCD Source Address */
  TCD_TCD13_SOFF_tag TCD13_SOFF;       /* TCD Signed Source Address Offset */
  TCD_TCD13_ATTR_tag TCD13_ATTR;       /* TCD Transfer Attributes */
  TCD_NBYTES13_tag NBYTES13;
  TCD_TCD13_SLAST_SDA_tag TCD13_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  TCD_TCD13_DADDR_tag TCD13_DADDR;     /* TCD Destination Address */
  TCD_TCD13_DOFF_tag TCD13_DOFF;       /* TCD Signed Destination Address Offset */
  TCD_CITER13_tag CITER13;
  TCD_TCD13_DLAST_SGA_tag TCD13_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  TCD_TCD13_CSR_tag TCD13_CSR;         /* TCD Control and Status */
  TCD_BITER13_tag BITER13;
  uint8_t TCD_reserved27[16320];
  TCD_CH14_CSR_tag CH14_CSR;           /* Channel Control and Status */
  TCD_CH14_ES_tag CH14_ES;             /* Channel Error Status */
  TCD_CH14_INT_tag CH14_INT;           /* Channel Interrupt Status */
  TCD_CH14_SBR_tag CH14_SBR;           /* Channel System Bus */
  TCD_CH14_PRI_tag CH14_PRI;           /* Channel Priority */
  uint8_t TCD_reserved28[12];
  TCD_TCD14_SADDR_tag TCD14_SADDR;     /* TCD Source Address */
  TCD_TCD14_SOFF_tag TCD14_SOFF;       /* TCD Signed Source Address Offset */
  TCD_TCD14_ATTR_tag TCD14_ATTR;       /* TCD Transfer Attributes */
  TCD_NBYTES14_tag NBYTES14;
  TCD_TCD14_SLAST_SDA_tag TCD14_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  TCD_TCD14_DADDR_tag TCD14_DADDR;     /* TCD Destination Address */
  TCD_TCD14_DOFF_tag TCD14_DOFF;       /* TCD Signed Destination Address Offset */
  TCD_CITER14_tag CITER14;
  TCD_TCD14_DLAST_SGA_tag TCD14_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  TCD_TCD14_CSR_tag TCD14_CSR;         /* TCD Control and Status */
  TCD_BITER14_tag BITER14;
  uint8_t TCD_reserved29[16320];
  TCD_CH15_CSR_tag CH15_CSR;           /* Channel Control and Status */
  TCD_CH15_ES_tag CH15_ES;             /* Channel Error Status */
  TCD_CH15_INT_tag CH15_INT;           /* Channel Interrupt Status */
  TCD_CH15_SBR_tag CH15_SBR;           /* Channel System Bus */
  TCD_CH15_PRI_tag CH15_PRI;           /* Channel Priority */
  uint8_t TCD_reserved30[12];
  TCD_TCD15_SADDR_tag TCD15_SADDR;     /* TCD Source Address */
  TCD_TCD15_SOFF_tag TCD15_SOFF;       /* TCD Signed Source Address Offset */
  TCD_TCD15_ATTR_tag TCD15_ATTR;       /* TCD Transfer Attributes */
  TCD_NBYTES15_tag NBYTES15;
  TCD_TCD15_SLAST_SDA_tag TCD15_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  TCD_TCD15_DADDR_tag TCD15_DADDR;     /* TCD Destination Address */
  TCD_TCD15_DOFF_tag TCD15_DOFF;       /* TCD Signed Destination Address Offset */
  TCD_CITER15_tag CITER15;
  TCD_TCD15_DLAST_SGA_tag TCD15_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  TCD_TCD15_CSR_tag TCD15_CSR;         /* TCD Control and Status */
  TCD_BITER15_tag BITER15;
  uint8_t TCD_reserved31[16320];
  TCD_CH16_CSR_tag CH16_CSR;           /* Channel Control and Status */
  TCD_CH16_ES_tag CH16_ES;             /* Channel Error Status */
  TCD_CH16_INT_tag CH16_INT;           /* Channel Interrupt Status */
  TCD_CH16_SBR_tag CH16_SBR;           /* Channel System Bus */
  TCD_CH16_PRI_tag CH16_PRI;           /* Channel Priority */
  uint8_t TCD_reserved32[12];
  TCD_TCD16_SADDR_tag TCD16_SADDR;     /* TCD Source Address */
  TCD_TCD16_SOFF_tag TCD16_SOFF;       /* TCD Signed Source Address Offset */
  TCD_TCD16_ATTR_tag TCD16_ATTR;       /* TCD Transfer Attributes */
  TCD_NBYTES16_tag NBYTES16;
  TCD_TCD16_SLAST_SDA_tag TCD16_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  TCD_TCD16_DADDR_tag TCD16_DADDR;     /* TCD Destination Address */
  TCD_TCD16_DOFF_tag TCD16_DOFF;       /* TCD Signed Destination Address Offset */
  TCD_CITER16_tag CITER16;
  TCD_TCD16_DLAST_SGA_tag TCD16_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  TCD_TCD16_CSR_tag TCD16_CSR;         /* TCD Control and Status */
  TCD_BITER16_tag BITER16;
  uint8_t TCD_reserved33[16320];
  TCD_CH17_CSR_tag CH17_CSR;           /* Channel Control and Status */
  TCD_CH17_ES_tag CH17_ES;             /* Channel Error Status */
  TCD_CH17_INT_tag CH17_INT;           /* Channel Interrupt Status */
  TCD_CH17_SBR_tag CH17_SBR;           /* Channel System Bus */
  TCD_CH17_PRI_tag CH17_PRI;           /* Channel Priority */
  uint8_t TCD_reserved34[12];
  TCD_TCD17_SADDR_tag TCD17_SADDR;     /* TCD Source Address */
  TCD_TCD17_SOFF_tag TCD17_SOFF;       /* TCD Signed Source Address Offset */
  TCD_TCD17_ATTR_tag TCD17_ATTR;       /* TCD Transfer Attributes */
  TCD_NBYTES17_tag NBYTES17;
  TCD_TCD17_SLAST_SDA_tag TCD17_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  TCD_TCD17_DADDR_tag TCD17_DADDR;     /* TCD Destination Address */
  TCD_TCD17_DOFF_tag TCD17_DOFF;       /* TCD Signed Destination Address Offset */
  TCD_CITER17_tag CITER17;
  TCD_TCD17_DLAST_SGA_tag TCD17_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  TCD_TCD17_CSR_tag TCD17_CSR;         /* TCD Control and Status */
  TCD_BITER17_tag BITER17;
  uint8_t TCD_reserved35[16320];
  TCD_CH18_CSR_tag CH18_CSR;           /* Channel Control and Status */
  TCD_CH18_ES_tag CH18_ES;             /* Channel Error Status */
  TCD_CH18_INT_tag CH18_INT;           /* Channel Interrupt Status */
  TCD_CH18_SBR_tag CH18_SBR;           /* Channel System Bus */
  TCD_CH18_PRI_tag CH18_PRI;           /* Channel Priority */
  uint8_t TCD_reserved36[12];
  TCD_TCD18_SADDR_tag TCD18_SADDR;     /* TCD Source Address */
  TCD_TCD18_SOFF_tag TCD18_SOFF;       /* TCD Signed Source Address Offset */
  TCD_TCD18_ATTR_tag TCD18_ATTR;       /* TCD Transfer Attributes */
  TCD_NBYTES18_tag NBYTES18;
  TCD_TCD18_SLAST_SDA_tag TCD18_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  TCD_TCD18_DADDR_tag TCD18_DADDR;     /* TCD Destination Address */
  TCD_TCD18_DOFF_tag TCD18_DOFF;       /* TCD Signed Destination Address Offset */
  TCD_CITER18_tag CITER18;
  TCD_TCD18_DLAST_SGA_tag TCD18_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  TCD_TCD18_CSR_tag TCD18_CSR;         /* TCD Control and Status */
  TCD_BITER18_tag BITER18;
  uint8_t TCD_reserved37[16320];
  TCD_CH19_CSR_tag CH19_CSR;           /* Channel Control and Status */
  TCD_CH19_ES_tag CH19_ES;             /* Channel Error Status */
  TCD_CH19_INT_tag CH19_INT;           /* Channel Interrupt Status */
  TCD_CH19_SBR_tag CH19_SBR;           /* Channel System Bus */
  TCD_CH19_PRI_tag CH19_PRI;           /* Channel Priority */
  uint8_t TCD_reserved38[12];
  TCD_TCD19_SADDR_tag TCD19_SADDR;     /* TCD Source Address */
  TCD_TCD19_SOFF_tag TCD19_SOFF;       /* TCD Signed Source Address Offset */
  TCD_TCD19_ATTR_tag TCD19_ATTR;       /* TCD Transfer Attributes */
  TCD_NBYTES19_tag NBYTES19;
  TCD_TCD19_SLAST_SDA_tag TCD19_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  TCD_TCD19_DADDR_tag TCD19_DADDR;     /* TCD Destination Address */
  TCD_TCD19_DOFF_tag TCD19_DOFF;       /* TCD Signed Destination Address Offset */
  TCD_CITER19_tag CITER19;
  TCD_TCD19_DLAST_SGA_tag TCD19_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  TCD_TCD19_CSR_tag TCD19_CSR;         /* TCD Control and Status */
  TCD_BITER19_tag BITER19;
  uint8_t TCD_reserved39[16320];
  TCD_CH20_CSR_tag CH20_CSR;           /* Channel Control and Status */
  TCD_CH20_ES_tag CH20_ES;             /* Channel Error Status */
  TCD_CH20_INT_tag CH20_INT;           /* Channel Interrupt Status */
  TCD_CH20_SBR_tag CH20_SBR;           /* Channel System Bus */
  TCD_CH20_PRI_tag CH20_PRI;           /* Channel Priority */
  uint8_t TCD_reserved40[12];
  TCD_TCD20_SADDR_tag TCD20_SADDR;     /* TCD Source Address */
  TCD_TCD20_SOFF_tag TCD20_SOFF;       /* TCD Signed Source Address Offset */
  TCD_TCD20_ATTR_tag TCD20_ATTR;       /* TCD Transfer Attributes */
  TCD_NBYTES20_tag NBYTES20;
  TCD_TCD20_SLAST_SDA_tag TCD20_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  TCD_TCD20_DADDR_tag TCD20_DADDR;     /* TCD Destination Address */
  TCD_TCD20_DOFF_tag TCD20_DOFF;       /* TCD Signed Destination Address Offset */
  TCD_CITER20_tag CITER20;
  TCD_TCD20_DLAST_SGA_tag TCD20_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  TCD_TCD20_CSR_tag TCD20_CSR;         /* TCD Control and Status */
  TCD_BITER20_tag BITER20;
  uint8_t TCD_reserved41[16320];
  TCD_CH21_CSR_tag CH21_CSR;           /* Channel Control and Status */
  TCD_CH21_ES_tag CH21_ES;             /* Channel Error Status */
  TCD_CH21_INT_tag CH21_INT;           /* Channel Interrupt Status */
  TCD_CH21_SBR_tag CH21_SBR;           /* Channel System Bus */
  TCD_CH21_PRI_tag CH21_PRI;           /* Channel Priority */
  uint8_t TCD_reserved42[12];
  TCD_TCD21_SADDR_tag TCD21_SADDR;     /* TCD Source Address */
  TCD_TCD21_SOFF_tag TCD21_SOFF;       /* TCD Signed Source Address Offset */
  TCD_TCD21_ATTR_tag TCD21_ATTR;       /* TCD Transfer Attributes */
  TCD_NBYTES21_tag NBYTES21;
  TCD_TCD21_SLAST_SDA_tag TCD21_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  TCD_TCD21_DADDR_tag TCD21_DADDR;     /* TCD Destination Address */
  TCD_TCD21_DOFF_tag TCD21_DOFF;       /* TCD Signed Destination Address Offset */
  TCD_CITER21_tag CITER21;
  TCD_TCD21_DLAST_SGA_tag TCD21_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  TCD_TCD21_CSR_tag TCD21_CSR;         /* TCD Control and Status */
  TCD_BITER21_tag BITER21;
  uint8_t TCD_reserved43[16320];
  TCD_CH22_CSR_tag CH22_CSR;           /* Channel Control and Status */
  TCD_CH22_ES_tag CH22_ES;             /* Channel Error Status */
  TCD_CH22_INT_tag CH22_INT;           /* Channel Interrupt Status */
  TCD_CH22_SBR_tag CH22_SBR;           /* Channel System Bus */
  TCD_CH22_PRI_tag CH22_PRI;           /* Channel Priority */
  uint8_t TCD_reserved44[12];
  TCD_TCD22_SADDR_tag TCD22_SADDR;     /* TCD Source Address */
  TCD_TCD22_SOFF_tag TCD22_SOFF;       /* TCD Signed Source Address Offset */
  TCD_TCD22_ATTR_tag TCD22_ATTR;       /* TCD Transfer Attributes */
  TCD_NBYTES22_tag NBYTES22;
  TCD_TCD22_SLAST_SDA_tag TCD22_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  TCD_TCD22_DADDR_tag TCD22_DADDR;     /* TCD Destination Address */
  TCD_TCD22_DOFF_tag TCD22_DOFF;       /* TCD Signed Destination Address Offset */
  TCD_CITER22_tag CITER22;
  TCD_TCD22_DLAST_SGA_tag TCD22_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  TCD_TCD22_CSR_tag TCD22_CSR;         /* TCD Control and Status */
  TCD_BITER22_tag BITER22;
  uint8_t TCD_reserved45[16320];
  TCD_CH23_CSR_tag CH23_CSR;           /* Channel Control and Status */
  TCD_CH23_ES_tag CH23_ES;             /* Channel Error Status */
  TCD_CH23_INT_tag CH23_INT;           /* Channel Interrupt Status */
  TCD_CH23_SBR_tag CH23_SBR;           /* Channel System Bus */
  TCD_CH23_PRI_tag CH23_PRI;           /* Channel Priority */
  uint8_t TCD_reserved46[12];
  TCD_TCD23_SADDR_tag TCD23_SADDR;     /* TCD Source Address */
  TCD_TCD23_SOFF_tag TCD23_SOFF;       /* TCD Signed Source Address Offset */
  TCD_TCD23_ATTR_tag TCD23_ATTR;       /* TCD Transfer Attributes */
  TCD_NBYTES23_tag NBYTES23;
  TCD_TCD23_SLAST_SDA_tag TCD23_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  TCD_TCD23_DADDR_tag TCD23_DADDR;     /* TCD Destination Address */
  TCD_TCD23_DOFF_tag TCD23_DOFF;       /* TCD Signed Destination Address Offset */
  TCD_CITER23_tag CITER23;
  TCD_TCD23_DLAST_SGA_tag TCD23_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  TCD_TCD23_CSR_tag TCD23_CSR;         /* TCD Control and Status */
  TCD_BITER23_tag BITER23;
  uint8_t TCD_reserved47[16320];
  TCD_CH24_CSR_tag CH24_CSR;           /* Channel Control and Status */
  TCD_CH24_ES_tag CH24_ES;             /* Channel Error Status */
  TCD_CH24_INT_tag CH24_INT;           /* Channel Interrupt Status */
  TCD_CH24_SBR_tag CH24_SBR;           /* Channel System Bus */
  TCD_CH24_PRI_tag CH24_PRI;           /* Channel Priority */
  uint8_t TCD_reserved48[12];
  TCD_TCD24_SADDR_tag TCD24_SADDR;     /* TCD Source Address */
  TCD_TCD24_SOFF_tag TCD24_SOFF;       /* TCD Signed Source Address Offset */
  TCD_TCD24_ATTR_tag TCD24_ATTR;       /* TCD Transfer Attributes */
  TCD_NBYTES24_tag NBYTES24;
  TCD_TCD24_SLAST_SDA_tag TCD24_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  TCD_TCD24_DADDR_tag TCD24_DADDR;     /* TCD Destination Address */
  TCD_TCD24_DOFF_tag TCD24_DOFF;       /* TCD Signed Destination Address Offset */
  TCD_CITER24_tag CITER24;
  TCD_TCD24_DLAST_SGA_tag TCD24_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  TCD_TCD24_CSR_tag TCD24_CSR;         /* TCD Control and Status */
  TCD_BITER24_tag BITER24;
  uint8_t TCD_reserved49[16320];
  TCD_CH25_CSR_tag CH25_CSR;           /* Channel Control and Status */
  TCD_CH25_ES_tag CH25_ES;             /* Channel Error Status */
  TCD_CH25_INT_tag CH25_INT;           /* Channel Interrupt Status */
  TCD_CH25_SBR_tag CH25_SBR;           /* Channel System Bus */
  TCD_CH25_PRI_tag CH25_PRI;           /* Channel Priority */
  uint8_t TCD_reserved50[12];
  TCD_TCD25_SADDR_tag TCD25_SADDR;     /* TCD Source Address */
  TCD_TCD25_SOFF_tag TCD25_SOFF;       /* TCD Signed Source Address Offset */
  TCD_TCD25_ATTR_tag TCD25_ATTR;       /* TCD Transfer Attributes */
  TCD_NBYTES25_tag NBYTES25;
  TCD_TCD25_SLAST_SDA_tag TCD25_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  TCD_TCD25_DADDR_tag TCD25_DADDR;     /* TCD Destination Address */
  TCD_TCD25_DOFF_tag TCD25_DOFF;       /* TCD Signed Destination Address Offset */
  TCD_CITER25_tag CITER25;
  TCD_TCD25_DLAST_SGA_tag TCD25_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  TCD_TCD25_CSR_tag TCD25_CSR;         /* TCD Control and Status */
  TCD_BITER25_tag BITER25;
  uint8_t TCD_reserved51[16320];
  TCD_CH26_CSR_tag CH26_CSR;           /* Channel Control and Status */
  TCD_CH26_ES_tag CH26_ES;             /* Channel Error Status */
  TCD_CH26_INT_tag CH26_INT;           /* Channel Interrupt Status */
  TCD_CH26_SBR_tag CH26_SBR;           /* Channel System Bus */
  TCD_CH26_PRI_tag CH26_PRI;           /* Channel Priority */
  uint8_t TCD_reserved52[12];
  TCD_TCD26_SADDR_tag TCD26_SADDR;     /* TCD Source Address */
  TCD_TCD26_SOFF_tag TCD26_SOFF;       /* TCD Signed Source Address Offset */
  TCD_TCD26_ATTR_tag TCD26_ATTR;       /* TCD Transfer Attributes */
  TCD_NBYTES26_tag NBYTES26;
  TCD_TCD26_SLAST_SDA_tag TCD26_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  TCD_TCD26_DADDR_tag TCD26_DADDR;     /* TCD Destination Address */
  TCD_TCD26_DOFF_tag TCD26_DOFF;       /* TCD Signed Destination Address Offset */
  TCD_CITER26_tag CITER26;
  TCD_TCD26_DLAST_SGA_tag TCD26_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  TCD_TCD26_CSR_tag TCD26_CSR;         /* TCD Control and Status */
  TCD_BITER26_tag BITER26;
  uint8_t TCD_reserved53[16320];
  TCD_CH27_CSR_tag CH27_CSR;           /* Channel Control and Status */
  TCD_CH27_ES_tag CH27_ES;             /* Channel Error Status */
  TCD_CH27_INT_tag CH27_INT;           /* Channel Interrupt Status */
  TCD_CH27_SBR_tag CH27_SBR;           /* Channel System Bus */
  TCD_CH27_PRI_tag CH27_PRI;           /* Channel Priority */
  uint8_t TCD_reserved54[12];
  TCD_TCD27_SADDR_tag TCD27_SADDR;     /* TCD Source Address */
  TCD_TCD27_SOFF_tag TCD27_SOFF;       /* TCD Signed Source Address Offset */
  TCD_TCD27_ATTR_tag TCD27_ATTR;       /* TCD Transfer Attributes */
  TCD_NBYTES27_tag NBYTES27;
  TCD_TCD27_SLAST_SDA_tag TCD27_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  TCD_TCD27_DADDR_tag TCD27_DADDR;     /* TCD Destination Address */
  TCD_TCD27_DOFF_tag TCD27_DOFF;       /* TCD Signed Destination Address Offset */
  TCD_CITER27_tag CITER27;
  TCD_TCD27_DLAST_SGA_tag TCD27_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  TCD_TCD27_CSR_tag TCD27_CSR;         /* TCD Control and Status */
  TCD_BITER27_tag BITER27;
  uint8_t TCD_reserved55[16320];
  TCD_CH28_CSR_tag CH28_CSR;           /* Channel Control and Status */
  TCD_CH28_ES_tag CH28_ES;             /* Channel Error Status */
  TCD_CH28_INT_tag CH28_INT;           /* Channel Interrupt Status */
  TCD_CH28_SBR_tag CH28_SBR;           /* Channel System Bus */
  TCD_CH28_PRI_tag CH28_PRI;           /* Channel Priority */
  uint8_t TCD_reserved56[12];
  TCD_TCD28_SADDR_tag TCD28_SADDR;     /* TCD Source Address */
  TCD_TCD28_SOFF_tag TCD28_SOFF;       /* TCD Signed Source Address Offset */
  TCD_TCD28_ATTR_tag TCD28_ATTR;       /* TCD Transfer Attributes */
  TCD_NBYTES28_tag NBYTES28;
  TCD_TCD28_SLAST_SDA_tag TCD28_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  TCD_TCD28_DADDR_tag TCD28_DADDR;     /* TCD Destination Address */
  TCD_TCD28_DOFF_tag TCD28_DOFF;       /* TCD Signed Destination Address Offset */
  TCD_CITER28_tag CITER28;
  TCD_TCD28_DLAST_SGA_tag TCD28_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  TCD_TCD28_CSR_tag TCD28_CSR;         /* TCD Control and Status */
  TCD_BITER28_tag BITER28;
  uint8_t TCD_reserved57[16320];
  TCD_CH29_CSR_tag CH29_CSR;           /* Channel Control and Status */
  TCD_CH29_ES_tag CH29_ES;             /* Channel Error Status */
  TCD_CH29_INT_tag CH29_INT;           /* Channel Interrupt Status */
  TCD_CH29_SBR_tag CH29_SBR;           /* Channel System Bus */
  TCD_CH29_PRI_tag CH29_PRI;           /* Channel Priority */
  uint8_t TCD_reserved58[12];
  TCD_TCD29_SADDR_tag TCD29_SADDR;     /* TCD Source Address */
  TCD_TCD29_SOFF_tag TCD29_SOFF;       /* TCD Signed Source Address Offset */
  TCD_TCD29_ATTR_tag TCD29_ATTR;       /* TCD Transfer Attributes */
  TCD_NBYTES29_tag NBYTES29;
  TCD_TCD29_SLAST_SDA_tag TCD29_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  TCD_TCD29_DADDR_tag TCD29_DADDR;     /* TCD Destination Address */
  TCD_TCD29_DOFF_tag TCD29_DOFF;       /* TCD Signed Destination Address Offset */
  TCD_CITER29_tag CITER29;
  TCD_TCD29_DLAST_SGA_tag TCD29_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  TCD_TCD29_CSR_tag TCD29_CSR;         /* TCD Control and Status */
  TCD_BITER29_tag BITER29;
  uint8_t TCD_reserved59[16320];
  TCD_CH30_CSR_tag CH30_CSR;           /* Channel Control and Status */
  TCD_CH30_ES_tag CH30_ES;             /* Channel Error Status */
  TCD_CH30_INT_tag CH30_INT;           /* Channel Interrupt Status */
  TCD_CH30_SBR_tag CH30_SBR;           /* Channel System Bus */
  TCD_CH30_PRI_tag CH30_PRI;           /* Channel Priority */
  uint8_t TCD_reserved60[12];
  TCD_TCD30_SADDR_tag TCD30_SADDR;     /* TCD Source Address */
  TCD_TCD30_SOFF_tag TCD30_SOFF;       /* TCD Signed Source Address Offset */
  TCD_TCD30_ATTR_tag TCD30_ATTR;       /* TCD Transfer Attributes */
  TCD_NBYTES30_tag NBYTES30;
  TCD_TCD30_SLAST_SDA_tag TCD30_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  TCD_TCD30_DADDR_tag TCD30_DADDR;     /* TCD Destination Address */
  TCD_TCD30_DOFF_tag TCD30_DOFF;       /* TCD Signed Destination Address Offset */
  TCD_CITER30_tag CITER30;
  TCD_TCD30_DLAST_SGA_tag TCD30_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  TCD_TCD30_CSR_tag TCD30_CSR;         /* TCD Control and Status */
  TCD_BITER30_tag BITER30;
  uint8_t TCD_reserved61[16320];
  TCD_CH31_CSR_tag CH31_CSR;           /* Channel Control and Status */
  TCD_CH31_ES_tag CH31_ES;             /* Channel Error Status */
  TCD_CH31_INT_tag CH31_INT;           /* Channel Interrupt Status */
  TCD_CH31_SBR_tag CH31_SBR;           /* Channel System Bus */
  TCD_CH31_PRI_tag CH31_PRI;           /* Channel Priority */
  uint8_t TCD_reserved62[12];
  TCD_TCD31_SADDR_tag TCD31_SADDR;     /* TCD Source Address */
  TCD_TCD31_SOFF_tag TCD31_SOFF;       /* TCD Signed Source Address Offset */
  TCD_TCD31_ATTR_tag TCD31_ATTR;       /* TCD Transfer Attributes */
  TCD_NBYTES31_tag NBYTES31;
  TCD_TCD31_SLAST_SDA_tag TCD31_SLAST_SDA; /* TCD Last Source Address Adjustment / Store DADDR Address */
  TCD_TCD31_DADDR_tag TCD31_DADDR;     /* TCD Destination Address */
  TCD_TCD31_DOFF_tag TCD31_DOFF;       /* TCD Signed Destination Address Offset */
  TCD_CITER31_tag CITER31;
  TCD_TCD31_DLAST_SGA_tag TCD31_DLAST_SGA; /* TCD Last Destination Address Adjustment / Scatter Gather Address */
  TCD_TCD31_CSR_tag TCD31_CSR;         /* TCD Control and Status */
  TCD_BITER31_tag BITER31;
};


/* ============================================================================
   =============================== Module: TEMPSENSE ==========================
   ============================================================================ */

typedef union TEMPSENSE_ETSCTL_union_tag { /* ETS Control */
  vuint32_t R;
  struct {
    vuint32_t ETS_EN:1;                /* Temperature Sensor enable */
    vuint32_t GNDSEL:1;                /* Ground selection */
    vuint32_t _unused_2:30;            /* Reserved */
  } B;
} TEMPSENSE_ETSCTL_tag;

typedef union TEMPSENSE_TCA0_union_tag { /* Temperature Coefficient */
  vuint32_t R;
  struct {
    vuint32_t TCA0:16;                 /* Temperature coefficient A0 */
    vuint32_t _unused_16:16;
  } B;
} TEMPSENSE_TCA0_tag;

typedef union TEMPSENSE_TCA1_union_tag { /* Temperature Coefficient */
  vuint32_t R;
  struct {
    vuint32_t TCA1:16;                 /* Temperature coefficient A1 */
    vuint32_t _unused_16:16;
  } B;
} TEMPSENSE_TCA1_tag;

typedef union TEMPSENSE_TCA2_union_tag { /* Temperature Coefficient */
  vuint32_t R;
  struct {
    vuint32_t TCA2:16;                 /* Temperature coefficient A2 */
    vuint32_t _unused_16:16;
  } B;
} TEMPSENSE_TCA2_tag;

struct TEMPSENSE_tag {
  TEMPSENSE_ETSCTL_tag ETSCTL;         /* ETS Control */
  uint8_t TEMPSENSE_reserved0[4];
  TEMPSENSE_TCA0_tag TCA0;             /* Temperature Coefficient */
  TEMPSENSE_TCA1_tag TCA1;             /* Temperature Coefficient */
  TEMPSENSE_TCA2_tag TCA2;             /* Temperature Coefficient */
};


/* ============================================================================
   =============================== Module: TRGMUX =============================
   ============================================================================ */

typedef union TRGMUX_ADC12_0_union_tag { /* TRGMUX ADC12_0 Register */
  vuint32_t R;
  struct {
    vuint32_t SEL0:7;                  /* Trigger MUX Input 0 Source Select */
    vuint32_t _unused_7:1;             /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL1:7;                  /* Trigger MUX Input 1 Source Select */
    vuint32_t _unused_15:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL2:7;                  /* Trigger MUX Input 2 Source Select */
    vuint32_t _unused_23:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_24:7;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t LK:1;                    /* TRGMUX register lock. */
  } B;
} TRGMUX_ADC12_0_tag;

typedef union TRGMUX_ADC12_1_union_tag { /* TRGMUX ADC12_1 Register */
  vuint32_t R;
  struct {
    vuint32_t SEL0:7;                  /* Trigger MUX Input 0 Source Select */
    vuint32_t _unused_7:1;             /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL1:7;                  /* Trigger MUX Input 1 Source Select */
    vuint32_t _unused_15:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL2:7;                  /* Trigger MUX Input 2 Source Select */
    vuint32_t _unused_23:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_24:7;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t LK:1;                    /* TRGMUX register lock. */
  } B;
} TRGMUX_ADC12_1_tag;

typedef union TRGMUX_ADC12_2_union_tag { /* TRGMUX ADC12_2 Register */
  vuint32_t R;
  struct {
    vuint32_t SEL0:7;                  /* Trigger MUX Input 0 Source Select */
    vuint32_t _unused_7:1;             /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL1:7;                  /* Trigger MUX Input 1 Source Select */
    vuint32_t _unused_15:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL2:7;                  /* Trigger MUX Input 2 Source Select */
    vuint32_t _unused_23:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_24:7;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t LK:1;                    /* TRGMUX register lock. */
  } B;
} TRGMUX_ADC12_2_tag;

typedef union TRGMUX_LPCMP_0_union_tag { /* TRGMUX LPCMP_0 Register */
  vuint32_t R;
  struct {
    vuint32_t SEL0:7;                  /* Trigger MUX Input 0 Source Select */
    vuint32_t _unused_7:1;             /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_8:7;             /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_15:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_16:7;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_23:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_24:7;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t LK:1;                    /* TRGMUX register lock. */
  } B;
} TRGMUX_LPCMP_0_tag;

typedef union TRGMUX_LPCMP_1_union_tag { /* TRGMUX LPCMP_1 Register */
  vuint32_t R;
  struct {
    vuint32_t SEL0:7;                  /* Trigger MUX Input 0 Source Select */
    vuint32_t _unused_7:1;             /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_8:7;             /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_15:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_16:7;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_23:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_24:7;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t LK:1;                    /* TRGMUX register lock. */
  } B;
} TRGMUX_LPCMP_1_tag;

typedef union TRGMUX_LPCMP_2_union_tag { /* TRGMUX LPCMP_2 Register */
  vuint32_t R;
  struct {
    vuint32_t SEL0:7;                  /* Trigger MUX Input 0 Source Select */
    vuint32_t _unused_7:1;             /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_8:7;             /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_15:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_16:7;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_23:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_24:7;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t LK:1;                    /* TRGMUX register lock. */
  } B;
} TRGMUX_LPCMP_2_tag;

typedef union TRGMUX_BCTU_union_tag {  /* TRGMUX BCTU Register */
  vuint32_t R;
  struct {
    vuint32_t SEL0:7;                  /* Trigger MUX Input 0 Source Select */
    vuint32_t _unused_7:1;             /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL1:7;                  /* Trigger MUX Input 1 Source Select */
    vuint32_t _unused_15:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL2:7;                  /* Trigger MUX Input 2 Source Select */
    vuint32_t _unused_23:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_24:7;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t LK:1;                    /* TRGMUX register lock. */
  } B;
} TRGMUX_BCTU_tag;

typedef union TRGMUX_EMIOS012_ODIS_union_tag { /* TRGMUX eMIOS012_ODIS Register */
  vuint32_t R;
  struct {
    vuint32_t SEL0:7;                  /* Trigger MUX Input 0 Source Select */
    vuint32_t _unused_7:1;             /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL1:7;                  /* Trigger MUX Input 1 Source Select */
    vuint32_t _unused_15:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL2:7;                  /* Trigger MUX Input 2 Source Select */
    vuint32_t _unused_23:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL3:7;                  /* Trigger MUX Input 3 Source Select */
    vuint32_t LK:1;                    /* TRGMUX register lock. */
  } B;
} TRGMUX_EMIOS012_ODIS_tag;

typedef union TRGMUX_EMIOS0_0_union_tag { /* TRGMUX eMIOS0_0 Register */
  vuint32_t R;
  struct {
    vuint32_t SEL0:7;                  /* Trigger MUX Input 0 Source Select */
    vuint32_t _unused_7:1;             /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL1:7;                  /* Trigger MUX Input 1 Source Select */
    vuint32_t _unused_15:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL2:7;                  /* Trigger MUX Input 2 Source Select */
    vuint32_t _unused_23:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL3:7;                  /* Trigger MUX Input 3 Source Select */
    vuint32_t LK:1;                    /* TRGMUX register lock. */
  } B;
} TRGMUX_EMIOS0_0_tag;

typedef union TRGMUX_EMIOS0_1_union_tag { /* TRGMUX eMIOS0_1 Register */
  vuint32_t R;
  struct {
    vuint32_t SEL0:7;                  /* Trigger MUX Input 0 Source Select */
    vuint32_t _unused_7:1;             /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL1:7;                  /* Trigger MUX Input 1 Source Select */
    vuint32_t _unused_15:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL2:7;                  /* Trigger MUX Input 2 Source Select */
    vuint32_t _unused_23:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL3:7;                  /* Trigger MUX Input 3 Source Select */
    vuint32_t LK:1;                    /* TRGMUX register lock. */
  } B;
} TRGMUX_EMIOS0_1_tag;

typedef union TRGMUX_EMIOS0_2_union_tag { /* TRGMUX eMIOS0_2 Register */
  vuint32_t R;
  struct {
    vuint32_t SEL0:7;                  /* Trigger MUX Input 0 Source Select */
    vuint32_t _unused_7:1;             /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL1:7;                  /* Trigger MUX Input 1 Source Select */
    vuint32_t _unused_15:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL2:7;                  /* Trigger MUX Input 2 Source Select */
    vuint32_t _unused_23:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL3:7;                  /* Trigger MUX Input 3 Source Select */
    vuint32_t LK:1;                    /* TRGMUX register lock. */
  } B;
} TRGMUX_EMIOS0_2_tag;

typedef union TRGMUX_EMIOS0_3_union_tag { /* TRGMUX eMIOS0_3 Register */
  vuint32_t R;
  struct {
    vuint32_t SEL0:7;                  /* Trigger MUX Input 0 Source Select */
    vuint32_t _unused_7:1;             /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL1:7;                  /* Trigger MUX Input 1 Source Select */
    vuint32_t _unused_15:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_16:7;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_23:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_24:7;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t LK:1;                    /* TRGMUX register lock. */
  } B;
} TRGMUX_EMIOS0_3_tag;

typedef union TRGMUX_EMIOS1_0_union_tag { /* TRGMUX eMIOS1_0 Register */
  vuint32_t R;
  struct {
    vuint32_t SEL0:7;                  /* Trigger MUX Input 0 Source Select */
    vuint32_t _unused_7:1;             /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL1:7;                  /* Trigger MUX Input 1 Source Select */
    vuint32_t _unused_15:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL2:7;                  /* Trigger MUX Input 2 Source Select */
    vuint32_t _unused_23:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL3:7;                  /* Trigger MUX Input 3 Source Select */
    vuint32_t LK:1;                    /* TRGMUX register lock. */
  } B;
} TRGMUX_EMIOS1_0_tag;

typedef union TRGMUX_EMIOS1_1_union_tag { /* TRGMUX eMIOS1_1 Register */
  vuint32_t R;
  struct {
    vuint32_t SEL0:7;                  /* Trigger MUX Input 0 Source Select */
    vuint32_t _unused_7:1;             /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL1:7;                  /* Trigger MUX Input 1 Source Select */
    vuint32_t _unused_15:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL2:7;                  /* Trigger MUX Input 2 Source Select */
    vuint32_t _unused_23:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL3:7;                  /* Trigger MUX Input 3 Source Select */
    vuint32_t LK:1;                    /* TRGMUX register lock. */
  } B;
} TRGMUX_EMIOS1_1_tag;

typedef union TRGMUX_EMIOS1_2_union_tag { /* TRGMUX eMIOS1_2 Register */
  vuint32_t R;
  struct {
    vuint32_t SEL0:7;                  /* Trigger MUX Input 0 Source Select */
    vuint32_t _unused_7:1;             /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL1:7;                  /* Trigger MUX Input 1 Source Select */
    vuint32_t _unused_15:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL2:7;                  /* Trigger MUX Input 2 Source Select */
    vuint32_t _unused_23:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL3:7;                  /* Trigger MUX Input 3 Source Select */
    vuint32_t LK:1;                    /* TRGMUX register lock. */
  } B;
} TRGMUX_EMIOS1_2_tag;

typedef union TRGMUX_EMIOS1_3_union_tag { /* TRGMUX eMIOS1_3 Register */
  vuint32_t R;
  struct {
    vuint32_t SEL0:7;                  /* Trigger MUX Input 0 Source Select */
    vuint32_t _unused_7:1;             /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL1:7;                  /* Trigger MUX Input 1 Source Select */
    vuint32_t _unused_15:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_16:7;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_23:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_24:7;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t LK:1;                    /* TRGMUX register lock. */
  } B;
} TRGMUX_EMIOS1_3_tag;

typedef union TRGMUX_FLEXIO_union_tag { /* TRGMUX FlexIO Register */
  vuint32_t R;
  struct {
    vuint32_t SEL0:7;                  /* Trigger MUX Input 0 Source Select */
    vuint32_t _unused_7:1;             /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL1:7;                  /* Trigger MUX Input 1 Source Select */
    vuint32_t _unused_15:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL2:7;                  /* Trigger MUX Input 2 Source Select */
    vuint32_t _unused_23:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL3:7;                  /* Trigger MUX Input 3 Source Select */
    vuint32_t LK:1;                    /* TRGMUX register lock. */
  } B;
} TRGMUX_FLEXIO_tag;

typedef union TRGMUX_SIUL_OUT0_union_tag { /* TRGMUX SIUL_OUT0 Register */
  vuint32_t R;
  struct {
    vuint32_t SEL0:7;                  /* Trigger MUX Input 0 Source Select */
    vuint32_t _unused_7:1;             /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL1:7;                  /* Trigger MUX Input 1 Source Select */
    vuint32_t _unused_15:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL2:7;                  /* Trigger MUX Input 2 Source Select */
    vuint32_t _unused_23:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL3:7;                  /* Trigger MUX Input 3 Source Select */
    vuint32_t LK:1;                    /* TRGMUX register lock. */
  } B;
} TRGMUX_SIUL_OUT0_tag;

typedef union TRGMUX_SIUL_OUT1_union_tag { /* TRGMUX SIUL_OUT1 Register */
  vuint32_t R;
  struct {
    vuint32_t SEL0:7;                  /* Trigger MUX Input 0 Source Select */
    vuint32_t _unused_7:1;             /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL1:7;                  /* Trigger MUX Input 1 Source Select */
    vuint32_t _unused_15:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL2:7;                  /* Trigger MUX Input 2 Source Select */
    vuint32_t _unused_23:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL3:7;                  /* Trigger MUX Input 3 Source Select */
    vuint32_t LK:1;                    /* TRGMUX register lock. */
  } B;
} TRGMUX_SIUL_OUT1_tag;

typedef union TRGMUX_SIUL_OUT2_union_tag { /* TRGMUX SIUL_OUT2 Register */
  vuint32_t R;
  struct {
    vuint32_t SEL0:7;                  /* Trigger MUX Input 0 Source Select */
    vuint32_t _unused_7:1;             /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL1:7;                  /* Trigger MUX Input 1 Source Select */
    vuint32_t _unused_15:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL2:7;                  /* Trigger MUX Input 2 Source Select */
    vuint32_t _unused_23:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL3:7;                  /* Trigger MUX Input 3 Source Select */
    vuint32_t LK:1;                    /* TRGMUX register lock. */
  } B;
} TRGMUX_SIUL_OUT2_tag;

typedef union TRGMUX_SIUL_OUT3_union_tag { /* TRGMUX SIUL_OUT3 Register */
  vuint32_t R;
  struct {
    vuint32_t SEL0:7;                  /* Trigger MUX Input 0 Source Select */
    vuint32_t _unused_7:1;             /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL1:7;                  /* Trigger MUX Input 1 Source Select */
    vuint32_t _unused_15:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL2:7;                  /* Trigger MUX Input 2 Source Select */
    vuint32_t _unused_23:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL3:7;                  /* Trigger MUX Input 3 Source Select */
    vuint32_t LK:1;                    /* TRGMUX register lock. */
  } B;
} TRGMUX_SIUL_OUT3_tag;

typedef union TRGMUX_LPI2C_0_union_tag { /* TRGMUX LPI2C_0 Register */
  vuint32_t R;
  struct {
    vuint32_t SEL0:7;                  /* Trigger MUX Input 0 Source Select */
    vuint32_t _unused_7:1;             /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_8:7;             /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_15:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_16:7;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_23:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_24:7;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t LK:1;                    /* TRGMUX register lock. */
  } B;
} TRGMUX_LPI2C_0_tag;

typedef union TRGMUX_LPSPI_0_union_tag { /* TRGMUX LPSPI_0 Register */
  vuint32_t R;
  struct {
    vuint32_t SEL0:7;                  /* Trigger MUX Input 0 Source Select */
    vuint32_t _unused_7:1;             /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_8:7;             /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_15:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_16:7;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_23:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_24:7;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t LK:1;                    /* TRGMUX register lock. */
  } B;
} TRGMUX_LPSPI_0_tag;

typedef union TRGMUX_LPSPI_1_union_tag { /* TRGMUX LPSPI_1 Register */
  vuint32_t R;
  struct {
    vuint32_t SEL0:7;                  /* Trigger MUX Input 0 Source Select */
    vuint32_t _unused_7:1;             /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_8:7;             /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_15:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_16:7;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_23:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_24:7;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t LK:1;                    /* TRGMUX register lock. */
  } B;
} TRGMUX_LPSPI_1_tag;

typedef union TRGMUX_LPSPI_2_union_tag { /* TRGMUX LPSPI_2 Register */
  vuint32_t R;
  struct {
    vuint32_t SEL0:7;                  /* Trigger MUX Input 0 Source Select */
    vuint32_t _unused_7:1;             /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_8:7;             /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_15:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_16:7;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_23:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_24:7;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t LK:1;                    /* TRGMUX register lock. */
  } B;
} TRGMUX_LPSPI_2_tag;

typedef union TRGMUX_LPUART_0_union_tag { /* TRGMUX LPUART_0 Register */
  vuint32_t R;
  struct {
    vuint32_t SEL0:7;                  /* Trigger MUX Input 0 Source Select */
    vuint32_t _unused_7:1;             /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_8:7;             /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_15:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_16:7;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_23:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_24:7;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t LK:1;                    /* TRGMUX register lock. */
  } B;
} TRGMUX_LPUART_0_tag;

typedef union TRGMUX_LPUART_1_union_tag { /* TRGMUX LPUART_1 Register */
  vuint32_t R;
  struct {
    vuint32_t SEL0:7;                  /* Trigger MUX Input 0 Source Select */
    vuint32_t _unused_7:1;             /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_8:7;             /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_15:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_16:7;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_23:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_24:7;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t LK:1;                    /* TRGMUX register lock. */
  } B;
} TRGMUX_LPUART_1_tag;

typedef union TRGMUX_LPUART_2_union_tag { /* TRGMUX LPUART_2 Register */
  vuint32_t R;
  struct {
    vuint32_t SEL0:7;                  /* Trigger MUX Input 0 Source Select */
    vuint32_t _unused_7:1;             /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_8:7;             /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_15:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_16:7;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_23:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_24:7;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t LK:1;                    /* TRGMUX register lock. */
  } B;
} TRGMUX_LPUART_2_tag;

typedef union TRGMUX_LPUART_3_union_tag { /* TRGMUX LPUART_3 Register */
  vuint32_t R;
  struct {
    vuint32_t SEL0:7;                  /* Trigger MUX Input 0 Source Select */
    vuint32_t _unused_7:1;             /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_8:7;             /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_15:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_16:7;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_23:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_24:7;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t LK:1;                    /* TRGMUX register lock. */
  } B;
} TRGMUX_LPUART_3_tag;

typedef union TRGMUX_LCU0_SYNC_union_tag { /* TRGMUX LCU0_SYNC Register */
  vuint32_t R;
  struct {
    vuint32_t SEL0:7;                  /* Trigger MUX Input 0 Source Select */
    vuint32_t _unused_7:1;             /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL1:7;                  /* Trigger MUX Input 1 Source Select */
    vuint32_t _unused_15:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_16:7;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_23:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_24:7;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t LK:1;                    /* TRGMUX register lock. */
  } B;
} TRGMUX_LCU0_SYNC_tag;

typedef union TRGMUX_LCU0_FORCE_union_tag { /* TRGMUX LCU0_FORCE Register */
  vuint32_t R;
  struct {
    vuint32_t SEL0:7;                  /* Trigger MUX Input 0 Source Select */
    vuint32_t _unused_7:1;             /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL1:7;                  /* Trigger MUX Input 1 Source Select */
    vuint32_t _unused_15:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL2:7;                  /* Trigger MUX Input 2 Source Select */
    vuint32_t _unused_23:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_24:7;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t LK:1;                    /* TRGMUX register lock. */
  } B;
} TRGMUX_LCU0_FORCE_tag;

typedef union TRGMUX_LCU0_0_union_tag { /* TRGMUX LCU0_0 Register */
  vuint32_t R;
  struct {
    vuint32_t SEL0:7;                  /* Trigger MUX Input 0 Source Select */
    vuint32_t _unused_7:1;             /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL1:7;                  /* Trigger MUX Input 1 Source Select */
    vuint32_t _unused_15:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL2:7;                  /* Trigger MUX Input 2 Source Select */
    vuint32_t _unused_23:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL3:7;                  /* Trigger MUX Input 3 Source Select */
    vuint32_t LK:1;                    /* TRGMUX register lock. */
  } B;
} TRGMUX_LCU0_0_tag;

typedef union TRGMUX_LCU0_1_union_tag { /* TRGMUX LCU0_1 Register */
  vuint32_t R;
  struct {
    vuint32_t SEL0:7;                  /* Trigger MUX Input 0 Source Select */
    vuint32_t _unused_7:1;             /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL1:7;                  /* Trigger MUX Input 1 Source Select */
    vuint32_t _unused_15:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL2:7;                  /* Trigger MUX Input 2 Source Select */
    vuint32_t _unused_23:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL3:7;                  /* Trigger MUX Input 3 Source Select */
    vuint32_t LK:1;                    /* TRGMUX register lock. */
  } B;
} TRGMUX_LCU0_1_tag;

typedef union TRGMUX_LCU0_2_union_tag { /* TRGMUX LCU0_2 Register */
  vuint32_t R;
  struct {
    vuint32_t SEL0:7;                  /* Trigger MUX Input 0 Source Select */
    vuint32_t _unused_7:1;             /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL1:7;                  /* Trigger MUX Input 1 Source Select */
    vuint32_t _unused_15:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL2:7;                  /* Trigger MUX Input 2 Source Select */
    vuint32_t _unused_23:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL3:7;                  /* Trigger MUX Input 3 Source Select */
    vuint32_t LK:1;                    /* TRGMUX register lock. */
  } B;
} TRGMUX_LCU0_2_tag;

typedef union TRGMUX_LCU1_SYNC_union_tag { /* TRGMUX LCU1_SYNC Register */
  vuint32_t R;
  struct {
    vuint32_t SEL0:7;                  /* Trigger MUX Input 0 Source Select */
    vuint32_t _unused_7:1;             /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL1:7;                  /* Trigger MUX Input 1 Source Select */
    vuint32_t _unused_15:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_16:7;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_23:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_24:7;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t LK:1;                    /* TRGMUX register lock. */
  } B;
} TRGMUX_LCU1_SYNC_tag;

typedef union TRGMUX_LCU1_FORCE_union_tag { /* TRGMUX LCU1_FORCE Register */
  vuint32_t R;
  struct {
    vuint32_t SEL0:7;                  /* Trigger MUX Input 0 Source Select */
    vuint32_t _unused_7:1;             /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL1:7;                  /* Trigger MUX Input 1 Source Select */
    vuint32_t _unused_15:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL2:7;                  /* Trigger MUX Input 2 Source Select */
    vuint32_t _unused_23:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_24:7;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t LK:1;                    /* TRGMUX register lock. */
  } B;
} TRGMUX_LCU1_FORCE_tag;

typedef union TRGMUX_LCU1_0_union_tag { /* TRGMUX LCU1_0 Register */
  vuint32_t R;
  struct {
    vuint32_t SEL0:7;                  /* Trigger MUX Input 0 Source Select */
    vuint32_t _unused_7:1;             /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL1:7;                  /* Trigger MUX Input 1 Source Select */
    vuint32_t _unused_15:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL2:7;                  /* Trigger MUX Input 2 Source Select */
    vuint32_t _unused_23:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL3:7;                  /* Trigger MUX Input 3 Source Select */
    vuint32_t LK:1;                    /* TRGMUX register lock. */
  } B;
} TRGMUX_LCU1_0_tag;

typedef union TRGMUX_LCU1_1_union_tag { /* TRGMUX LCU1_1 Register */
  vuint32_t R;
  struct {
    vuint32_t SEL0:7;                  /* Trigger MUX Input 0 Source Select */
    vuint32_t _unused_7:1;             /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL1:7;                  /* Trigger MUX Input 1 Source Select */
    vuint32_t _unused_15:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL2:7;                  /* Trigger MUX Input 2 Source Select */
    vuint32_t _unused_23:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL3:7;                  /* Trigger MUX Input 3 Source Select */
    vuint32_t LK:1;                    /* TRGMUX register lock. */
  } B;
} TRGMUX_LCU1_1_tag;

typedef union TRGMUX_LCU1_2_union_tag { /* TRGMUX LCU1_2 Register */
  vuint32_t R;
  struct {
    vuint32_t SEL0:7;                  /* Trigger MUX Input 0 Source Select */
    vuint32_t _unused_7:1;             /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL1:7;                  /* Trigger MUX Input 1 Source Select */
    vuint32_t _unused_15:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL2:7;                  /* Trigger MUX Input 2 Source Select */
    vuint32_t _unused_23:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL3:7;                  /* Trigger MUX Input 3 Source Select */
    vuint32_t LK:1;                    /* TRGMUX register lock. */
  } B;
} TRGMUX_LCU1_2_tag;

typedef union TRGMUX_CM7_RXEV_union_tag { /* TRGMUX CM7_RXEV Register */
  vuint32_t R;
  struct {
    vuint32_t SEL0:7;                  /* Trigger MUX Input 0 Source Select */
    vuint32_t _unused_7:1;             /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t SEL1:7;                  /* Trigger MUX Input 1 Source Select */
    vuint32_t _unused_15:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_16:7;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_23:1;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t _unused_24:7;            /* This read-only bit field is reserved and always has the value 0. */
    vuint32_t LK:1;                    /* TRGMUX register lock. */
  } B;
} TRGMUX_CM7_RXEV_tag;

struct TRGMUX_tag {
  TRGMUX_ADC12_0_tag ADC12_0;          /* TRGMUX ADC12_0 Register */
  TRGMUX_ADC12_1_tag ADC12_1;          /* TRGMUX ADC12_1 Register */
  TRGMUX_ADC12_2_tag ADC12_2;          /* TRGMUX ADC12_2 Register */
  TRGMUX_LPCMP_0_tag LPCMP_0r;         /* TRGMUX LPCMP_0 Register */
  TRGMUX_LPCMP_1_tag LPCMP_1r;         /* TRGMUX LPCMP_1 Register */
  TRGMUX_LPCMP_2_tag LPCMP_2r;         /* TRGMUX LPCMP_2 Register */
  TRGMUX_BCTU_tag BCTUr;               /* TRGMUX BCTU Register */
  TRGMUX_EMIOS012_ODIS_tag EMIOS012_ODIS; /* TRGMUX eMIOS012_ODIS Register */
  TRGMUX_EMIOS0_0_tag EMIOS0_0;        /* TRGMUX eMIOS0_0 Register */
  TRGMUX_EMIOS0_1_tag EMIOS0_1;        /* TRGMUX eMIOS0_1 Register */
  TRGMUX_EMIOS0_2_tag EMIOS0_2;        /* TRGMUX eMIOS0_2 Register */
  TRGMUX_EMIOS0_3_tag EMIOS0_3;        /* TRGMUX eMIOS0_3 Register */
  TRGMUX_EMIOS1_0_tag EMIOS1_0;        /* TRGMUX eMIOS1_0 Register */
  TRGMUX_EMIOS1_1_tag EMIOS1_1;        /* TRGMUX eMIOS1_1 Register */
  TRGMUX_EMIOS1_2_tag EMIOS1_2;        /* TRGMUX eMIOS1_2 Register */
  TRGMUX_EMIOS1_3_tag EMIOS1_3;        /* TRGMUX eMIOS1_3 Register */
  TRGMUX_FLEXIO_tag FLEXIOr;           /* TRGMUX FlexIO Register */
  TRGMUX_SIUL_OUT0_tag SIUL_OUT0;      /* TRGMUX SIUL_OUT0 Register */
  TRGMUX_SIUL_OUT1_tag SIUL_OUT1;      /* TRGMUX SIUL_OUT1 Register */
  TRGMUX_SIUL_OUT2_tag SIUL_OUT2;      /* TRGMUX SIUL_OUT2 Register */
  TRGMUX_SIUL_OUT3_tag SIUL_OUT3;      /* TRGMUX SIUL_OUT3 Register */
  TRGMUX_LPI2C_0_tag LPI2C_0r;         /* TRGMUX LPI2C_0 Register */
  TRGMUX_LPSPI_0_tag LPSPI_0r;         /* TRGMUX LPSPI_0 Register */
  TRGMUX_LPSPI_1_tag LPSPI_1r;         /* TRGMUX LPSPI_1 Register */
  TRGMUX_LPSPI_2_tag LPSPI_2r;         /* TRGMUX LPSPI_2 Register */
  TRGMUX_LPUART_0_tag LPUART_0r;       /* TRGMUX LPUART_0 Register */
  TRGMUX_LPUART_1_tag LPUART_1r;       /* TRGMUX LPUART_1 Register */
  TRGMUX_LPUART_2_tag LPUART_2r;       /* TRGMUX LPUART_2 Register */
  TRGMUX_LPUART_3_tag LPUART_3r;       /* TRGMUX LPUART_3 Register */
  TRGMUX_LCU0_SYNC_tag LCU0_SYNC;      /* TRGMUX LCU0_SYNC Register */
  TRGMUX_LCU0_FORCE_tag LCU0_FORCE;    /* TRGMUX LCU0_FORCE Register */
  TRGMUX_LCU0_0_tag LCU0_0;            /* TRGMUX LCU0_0 Register */
  TRGMUX_LCU0_1_tag LCU0_1;            /* TRGMUX LCU0_1 Register */
  TRGMUX_LCU0_2_tag LCU0_2;            /* TRGMUX LCU0_2 Register */
  TRGMUX_LCU1_SYNC_tag LCU1_SYNC;      /* TRGMUX LCU1_SYNC Register */
  TRGMUX_LCU1_FORCE_tag LCU1_FORCE;    /* TRGMUX LCU1_FORCE Register */
  TRGMUX_LCU1_0_tag LCU1_0;            /* TRGMUX LCU1_0 Register */
  TRGMUX_LCU1_1_tag LCU1_1;            /* TRGMUX LCU1_1 Register */
  TRGMUX_LCU1_2_tag LCU1_2;            /* TRGMUX LCU1_2 Register */
  TRGMUX_CM7_RXEV_tag CM7_RXEV;        /* TRGMUX CM7_RXEV Register */
};


/* ============================================================================
   =============================== Module: TSPC ===============================
   ============================================================================ */

typedef union TSPC_GRP_EN_union_tag {  /* Group Enable */
  vuint32_t R;
  struct {
    vuint32_t GRP1_EN:1;               /* Enable for GRP1_OBEn Register */
    vuint32_t GRP2_EN:1;               /* Enable for GRP2_OBEn Register */
    vuint32_t _unused_2:30;
  } B;
} TSPC_GRP_EN_tag;

typedef union TSPC_GROUP_GRP_OBE1_union_tag { /* Group OBE */
  vuint32_t R;
  struct {
    vuint32_t OBE0:1;                  /* Output Buffer Enable */
    vuint32_t OBE1:1;                  /* Output Buffer Enable */
    vuint32_t OBE2:1;                  /* Output Buffer Enable */
    vuint32_t OBE3:1;                  /* Output Buffer Enable */
    vuint32_t OBE4:1;                  /* Output Buffer Enable */
    vuint32_t OBE5:1;                  /* Output Buffer Enable */
    vuint32_t OBE6:1;                  /* Output Buffer Enable */
    vuint32_t OBE7:1;                  /* Output Buffer Enable */
    vuint32_t OBE8:1;                  /* Output Buffer Enable */
    vuint32_t OBE9:1;                  /* Output Buffer Enable */
    vuint32_t OBE10:1;                 /* Output Buffer Enable */
    vuint32_t OBE11:1;                 /* Output Buffer Enable */
    vuint32_t OBE12:1;                 /* Output Buffer Enable */
    vuint32_t OBE13:1;                 /* Output Buffer Enable */
    vuint32_t OBE14:1;                 /* Output Buffer Enable */
    vuint32_t OBE15:1;                 /* Output Buffer Enable */
    vuint32_t OBE16:1;                 /* Output Buffer Enable */
    vuint32_t OBE17:1;                 /* Output Buffer Enable */
    vuint32_t OBE18:1;                 /* Output Buffer Enable */
    vuint32_t OBE19:1;                 /* Output Buffer Enable */
    vuint32_t OBE20:1;                 /* Output Buffer Enable */
    vuint32_t OBE21:1;                 /* Output Buffer Enable */
    vuint32_t OBE22:1;                 /* Output Buffer Enable */
    vuint32_t OBE23:1;                 /* Output Buffer Enable */
    vuint32_t OBE24:1;                 /* Output Buffer Enable */
    vuint32_t OBE25:1;                 /* Output Buffer Enable */
    vuint32_t OBE26:1;                 /* Output Buffer Enable */
    vuint32_t OBE27:1;                 /* Output Buffer Enable */
    vuint32_t OBE28:1;                 /* Output Buffer Enable */
    vuint32_t OBE29:1;                 /* Output Buffer Enable */
    vuint32_t OBE30:1;                 /* Output Buffer Enable */
    vuint32_t OBE31:1;                 /* Output Buffer Enable */
  } B;
} TSPC_GROUP_GRP_OBE1_tag;

typedef union TSPC_GROUP_GRP_OBE2_union_tag { /* Group OBE */
  vuint32_t R;
  struct {
    vuint32_t OBE32:1;                 /* Output Buffer Enable */
    vuint32_t OBE33:1;                 /* Output Buffer Enable */
    vuint32_t OBE34:1;                 /* Output Buffer Enable */
    vuint32_t OBE35:1;                 /* Output Buffer Enable */
    vuint32_t OBE36:1;                 /* Output Buffer Enable */
    vuint32_t OBE37:1;                 /* Output Buffer Enable */
    vuint32_t OBE38:1;                 /* Output Buffer Enable */
    vuint32_t OBE39:1;                 /* Output Buffer Enable */
    vuint32_t OBE40:1;                 /* Output Buffer Enable */
    vuint32_t OBE41:1;                 /* Output Buffer Enable */
    vuint32_t OBE42:1;                 /* Output Buffer Enable */
    vuint32_t OBE43:1;                 /* Output Buffer Enable */
    vuint32_t OBE44:1;                 /* Output Buffer Enable */
    vuint32_t OBE45:1;                 /* Output Buffer Enable */
    vuint32_t _unused_14:18;
  } B;
} TSPC_GROUP_GRP_OBE2_tag;

typedef struct TSPC_GROUP_struct_tag {
  TSPC_GROUP_GRP_OBE1_tag GRP_OBE1;    /* Group OBE */
  TSPC_GROUP_GRP_OBE2_tag GRP_OBE2;    /* Group OBE */
  uint8_t GROUP_reserved0[72];
} TSPC_GROUP_tag;

struct TSPC_tag {
  TSPC_GRP_EN_tag GRP_EN;              /* Group Enable */
  uint8_t TSPC_reserved0[76];
  TSPC_GROUP_tag GROUP[2];
};


/* ============================================================================
   =============================== Module: VIRT_WRAPPER =======================
   ============================================================================ */

typedef union VIRT_WRAPPER_A_union_tag { /* Parameter_n Register */
  vuint32_t R;
  struct {
    vuint32_t PAD_0:2;                 /* PAD_0 */
    vuint32_t PAD_1:2;                 /* PAD_1 */
    vuint32_t PAD_2:2;                 /* PAD_2 */
    vuint32_t PAD_3:2;                 /* PAD_3 */
    vuint32_t PAD_4:2;                 /* PAD_4 */
    vuint32_t PAD_5:2;                 /* PAD_5 */
    vuint32_t PAD_6:2;                 /* PAD_6 */
    vuint32_t PAD_7:2;                 /* PAD_7 */
    vuint32_t PAD_8:2;                 /* PAD_8 */
    vuint32_t PAD_9:2;                 /* PAD_9 */
    vuint32_t PAD_10:2;                /* PAD_10 */
    vuint32_t PAD_11:2;                /* PAD_11 */
    vuint32_t PAD_12:2;                /* PAD_12 */
    vuint32_t PAD_13:2;                /* PAD_13 */
    vuint32_t PAD_14:2;                /* PAD_14 */
    vuint32_t PAD_15:2;                /* PAD_15 */
  } B;
} VIRT_WRAPPER_A_tag;

typedef union VIRT_WRAPPER_REG_B_union_tag { /* Parameter_n Register */
  vuint32_t R;
  struct {
    vuint32_t INMUX_0:2;               /* INMUX_0 */
    vuint32_t INMUX_1:2;               /* INMUX_1 */
    vuint32_t INMUX_2:2;               /* INMUX_2 */
    vuint32_t INMUX_3:2;               /* INMUX_3 */
    vuint32_t INMUX_4:2;               /* INMUX_4 */
    vuint32_t INMUX_5:2;               /* INMUX_5 */
    vuint32_t INMUX_6:2;               /* INMUX_6 */
    vuint32_t INMUX_7:2;               /* INMUX_7 */
    vuint32_t INMUX_8:2;               /* INMUX_8 */
    vuint32_t INMUX_9:2;               /* INMUX_9 */
    vuint32_t INMUX_10:2;              /* INMUX_10 */
    vuint32_t INMUX_11:2;              /* INMUX_11 */
    vuint32_t INMUX_12:2;              /* INMUX_12 */
    vuint32_t INMUX_13:2;              /* INMUX_13 */
    vuint32_t INMUX_14:2;              /* INMUX_14 */
    vuint32_t INMUX_15:2;              /* INMUX_15 */
  } B;
} VIRT_WRAPPER_REG_B_tag;

typedef union VIRT_WRAPPER_REG_C_union_tag { /* Parameter_n Register */
  vuint32_t R;
  struct {
    vuint32_t INTC_CTRL:2;             /* Interrupt register control */
    vuint32_t _unused_2:30;            /* Reserved */
  } B;
} VIRT_WRAPPER_REG_C_tag;

typedef union VIRT_WRAPPER_REG_D_union_tag { /* Parameter_n Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:30;            /* Reserved */
    vuint32_t REG_GCR:2;               /* GCR Register Of REG_PROT */
  } B;
} VIRT_WRAPPER_REG_D_tag;

struct VIRT_WRAPPER_tag {
  VIRT_WRAPPER_A_tag A[32];            /* Parameter_n Register */
  VIRT_WRAPPER_REG_B_tag REG_B[32];    /* Parameter_n Register */
  VIRT_WRAPPER_REG_C_tag REG_C[1];     /* Parameter_n Register */
  VIRT_WRAPPER_REG_D_tag REG_D[1];     /* Parameter_n Register */
};


/* ============================================================================
   =============================== Module: WKPU ===============================
   ============================================================================ */

typedef union WKPU_NSR_union_tag {     /* NMI Status Flag Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:6;             /* Reserved */
    vuint32_t _unused_6:2;             /* Reserved */
    vuint32_t _unused_8:6;             /* Reserved */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t _unused_16:6;            /* Reserved */
    vuint32_t NOVF1:1;                 /* NMI Overrun Status Flag 1 */
    vuint32_t NIF1:1;                  /* NMI Status Flag 1 */
    vuint32_t _unused_24:6;            /* Reserved */
    vuint32_t NOVF0:1;                 /* NMI Overrun Status Flag 0 */
    vuint32_t NIF0:1;                  /* NMI Status Flag 0 */
  } B;
} WKPU_NSR_tag;

typedef union WKPU_NCR_union_tag {     /* NMI Configuration Register */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:8;             /* Reserved */
    vuint32_t _unused_8:8;             /* Reserved */
    vuint32_t NFE1:1;                  /* NMI Filter Enable 1 */
    vuint32_t NFEE1:1;                 /* NMI Falling-Edge Events Enable 1 */
    vuint32_t NREE1:1;                 /* NMI Rising-Edge Events Enable 1 */
    vuint32_t _unused_19:1;            /* Reserved */
    vuint32_t NWRE1:1;                 /* NMI Wakeup Request Enable 1 */
    vuint32_t NDSS1:2;                 /* NMI Destination Source Select 1 */
    vuint32_t NLOCK1:1;                /* NMI Configuration Lock Register 1 */
    vuint32_t NFE0:1;                  /* NMI Filter Enable 0 */
    vuint32_t NFEE0:1;                 /* NMI Falling-edge Events Enable 0 */
    vuint32_t NREE0:1;                 /* NMI Rising-Edge Events Enable 0 */
    vuint32_t _unused_27:1;            /* Reserved */
    vuint32_t NWRE0:1;                 /* NMI Wakeup Request Enable 0 */
    vuint32_t NDSS0:2;                 /* NMI Destination Source Select 0 */
    vuint32_t NLOCK0:1;                /* NMI Configuration Lock Register 0 */
  } B;
} WKPU_NCR_tag;

typedef union WKPU_WISR_union_tag {    /* Wakeup/Interrupt Status Flag Register */
  vuint32_t R;
  struct {
    vuint32_t EIF:32;                  /* External Wakeup/Interrupt Status Flag x */
  } B;
} WKPU_WISR_tag;

typedef union WKPU_IRER_union_tag {    /* Interrupt Request Enable Register */
  vuint32_t R;
  struct {
    vuint32_t EIRE:32;                 /* External Interrupt Request Enable x */
  } B;
} WKPU_IRER_tag;

typedef union WKPU_WRER_union_tag {    /* Wakeup Request Enable Register */
  vuint32_t R;
  struct {
    vuint32_t WRE:32;                  /* External Wakeup Request Enable x */
  } B;
} WKPU_WRER_tag;

typedef union WKPU_WIREER_union_tag {  /* Wakeup/Interrupt Rising-Edge Event Enable Register */
  vuint32_t R;
  struct {
    vuint32_t IREE:32;                 /* External Interrupt Rising-edge Events Enable x */
  } B;
} WKPU_WIREER_tag;

typedef union WKPU_WIFEER_union_tag {  /* Wakeup/Interrupt Falling-Edge Event Enable Register */
  vuint32_t R;
  struct {
    vuint32_t IFEEX:32;                /* External Interrupt Falling-edge Events Enable x */
  } B;
} WKPU_WIFEER_tag;

typedef union WKPU_WIFER_union_tag {   /* Wakeup/Interrupt Filter Enable Register */
  vuint32_t R;
  struct {
    vuint32_t IFE:32;                  /* External Interrupt Filter Enable x */
  } B;
} WKPU_WIFER_tag;

typedef union WKPU_WISR_64_union_tag { /* Wakeup/Interrupt Status Flag Register */
  vuint32_t R;
  struct {
    vuint32_t EIF_1:32;                /* External Wakeup/Interrupt Status Flag x */
  } B;
} WKPU_WISR_64_tag;

typedef union WKPU_IRER_64_union_tag { /* Interrupt Request Enable Register */
  vuint32_t R;
  struct {
    vuint32_t EIRE_1:32;               /* External Interrupt Request Enable x */
  } B;
} WKPU_IRER_64_tag;

typedef union WKPU_WRER_64_union_tag { /* Wakeup Request Enable Register */
  vuint32_t R;
  struct {
    vuint32_t WRE_1:32;                /* External Wakeup Request Enable x */
  } B;
} WKPU_WRER_64_tag;

typedef union WKPU_WIREER_64_union_tag { /* Wakeup/Interrupt Rising-Edge Event Enable Register */
  vuint32_t R;
  struct {
    vuint32_t IREE_1:32;               /* External Interrupt Rising-edge Events Enable x */
  } B;
} WKPU_WIREER_64_tag;

typedef union WKPU_WIFEER_64_union_tag { /* Wakeup/Interrupt Falling-Edge Event Enable Register */
  vuint32_t R;
  struct {
    vuint32_t IFEEX_1:32;              /* External Interrupt Falling-edge Events Enable x */
  } B;
} WKPU_WIFEER_64_tag;

typedef union WKPU_WIFER_64_union_tag { /* Wakeup/Interrupt Filter Enable Register */
  vuint32_t R;
  struct {
    vuint32_t IFE_1:32;                /* External Interrupt Filter Enable x */
  } B;
} WKPU_WIFER_64_tag;

struct WKPU_tag {
  WKPU_NSR_tag NSR;                    /* NMI Status Flag Register */
  uint8_t WKPU_reserved0[4];
  WKPU_NCR_tag NCR;                    /* NMI Configuration Register */
  uint8_t WKPU_reserved1[8];
  WKPU_WISR_tag WISR;                  /* Wakeup/Interrupt Status Flag Register */
  WKPU_IRER_tag IRER;                  /* Interrupt Request Enable Register */
  WKPU_WRER_tag WRER;                  /* Wakeup Request Enable Register */
  uint8_t WKPU_reserved2[8];
  WKPU_WIREER_tag WIREER;              /* Wakeup/Interrupt Rising-Edge Event Enable Register */
  WKPU_WIFEER_tag WIFEER;              /* Wakeup/Interrupt Falling-Edge Event Enable Register */
  WKPU_WIFER_tag WIFER;                /* Wakeup/Interrupt Filter Enable Register */
  uint8_t WKPU_reserved3[32];
  WKPU_WISR_64_tag WISR_64;            /* Wakeup/Interrupt Status Flag Register */
  WKPU_IRER_64_tag IRER_64;            /* Interrupt Request Enable Register */
  WKPU_WRER_64_tag WRER_64;            /* Wakeup Request Enable Register */
  uint8_t WKPU_reserved4[8];
  WKPU_WIREER_64_tag WIREER_64;        /* Wakeup/Interrupt Rising-Edge Event Enable Register */
  WKPU_WIFEER_64_tag WIFEER_64;        /* Wakeup/Interrupt Falling-Edge Event Enable Register */
  WKPU_WIFER_64_tag WIFER_64;          /* Wakeup/Interrupt Filter Enable Register */
};


/* ============================================================================
   =============================== Module: XBIC ===============================
   ============================================================================ */

typedef union XBIC_MCR_union_tag {     /* XBIC Module Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:16;            /* Reserved */
    vuint32_t ME7:1;
    vuint32_t ME6:1;
    vuint32_t ME5:1;
    vuint32_t ME4:1;
    vuint32_t ME3:1;
    vuint32_t ME2:1;
    vuint32_t ME1:1;
    vuint32_t ME0:1;
    vuint32_t SE7:1;
    vuint32_t SE6:1;
    vuint32_t SE5:1;
    vuint32_t SE4:1;
    vuint32_t SE3:1;
    vuint32_t SE2:1;
    vuint32_t SE1:1;
    vuint32_t SE0:1;
  } B;
} XBIC_MCR_tag;

typedef union XBIC_EIR_union_tag {     /* XBIC Error Injection */
  vuint32_t R;
  struct {
    vuint32_t SYN:8;                   /* Syndrome */
    vuint32_t MST:4;                   /* Target Master ID */
    vuint32_t SLV:3;                   /* Target Slave Port */
    vuint32_t _unused_15:16;           /* Reserved */
    vuint32_t EIE:1;
  } B;
} XBIC_EIR_tag;

typedef union XBIC_ESR_union_tag {     /* XBIC Error Status */
  vuint32_t R;
  struct {
    vuint32_t SYN:8;                   /* Syndrome */
    vuint32_t MST:4;                   /* Master ID */
    vuint32_t SLV:3;                   /* Slave Port */
    vuint32_t DPME7:1;
    vuint32_t DPME6:1;
    vuint32_t DPME5:1;
    vuint32_t DPME4:1;
    vuint32_t DPME3:1;
    vuint32_t DPME2:1;
    vuint32_t DPME1:1;
    vuint32_t DPME0:1;
    vuint32_t DPSE7:1;
    vuint32_t DPSE6:1;
    vuint32_t DPSE5:1;
    vuint32_t DPSE4:1;
    vuint32_t DPSE3:1;
    vuint32_t DPSE2:1;
    vuint32_t DPSE1:1;
    vuint32_t DPSE0:1;
    vuint32_t VLD:1;
  } B;
} XBIC_ESR_tag;

typedef union XBIC_EAR_union_tag {     /* XBIC Error Address */
  vuint32_t R;
  struct {
    vuint32_t ADDR:32;                 /* Error Address */
  } B;
} XBIC_EAR_tag;

struct XBIC_tag {
  XBIC_MCR_tag MCR;                    /* XBIC Module Control */
  XBIC_EIR_tag EIR;                    /* XBIC Error Injection */
  XBIC_ESR_tag ESR;                    /* XBIC Error Status */
  XBIC_EAR_tag EAR;                    /* XBIC Error Address */
};


/* ============================================================================
   =============================== Module: XRDC ===============================
   ============================================================================ */

typedef union XRDC_CR_union_tag {      /* Control */
  vuint32_t R;
  struct {
    vuint32_t GVLD:1;                  /* Global Valid (XRDC Global Enable/Disable) */
    vuint32_t HRL:4;                   /* Hardware Revision Level */
    vuint32_t _unused_5:2;
    vuint32_t MRF:1;                   /* Memory Region Format */
    vuint32_t VAW:1;                   /* Virtualization Aware */
    vuint32_t _unused_9:21;
    vuint32_t LK1:1;                   /* Lock */
    vuint32_t _unused_31:1;
  } B;
} XRDC_CR_tag;

typedef union XRDC_HWCFG0_union_tag {  /* Hardware Configuration 0 */
  vuint32_t R;
  struct {
    vuint32_t NDID:8;                  /* Number Of Domains */
    vuint32_t NMSTR:8;                 /* Number Of Bus Masters */
    vuint32_t NMRC:8;                  /* Number Of MRCs */
    vuint32_t NPAC:4;                  /* Number Of PACs */
    vuint32_t MID:4;                   /* Module ID */
  } B;
} XRDC_HWCFG0_tag;

typedef union XRDC_HWCFG1_union_tag {  /* Hardware Configuration 1 */
  vuint32_t R;
  struct {
    vuint32_t DID:4;                   /* Domain Identifier Number */
    vuint32_t _unused_4:28;
  } B;
} XRDC_HWCFG1_tag;

typedef union XRDC_HWCFG2_union_tag {  /* Hardware Configuration 2 */
  vuint32_t R;
  struct {
    vuint32_t PIDP0:1;                 /* Process Identifier */
    vuint32_t PIDP1:1;                 /* Process Identifier */
    vuint32_t PIDP2:1;                 /* Process Identifier */
    vuint32_t PIDP3:1;                 /* Process Identifier */
    vuint32_t PIDP4:1;                 /* Process Identifier */
    vuint32_t PIDP5:1;                 /* Process Identifier */
    vuint32_t PIDP6:1;                 /* Process Identifier */
    vuint32_t PIDP7:1;                 /* Process Identifier */
    vuint32_t PIDP8:1;                 /* Process Identifier */
    vuint32_t PIDP9:1;                 /* Process Identifier */
    vuint32_t PIDP10:1;                /* Process Identifier */
    vuint32_t PIDP11:1;                /* Process Identifier */
    vuint32_t PIDP12:1;                /* Process Identifier */
    vuint32_t PIDP13:1;                /* Process Identifier */
    vuint32_t PIDP14:1;                /* Process Identifier */
    vuint32_t PIDP15:1;                /* Process Identifier */
    vuint32_t PIDP16:1;                /* Process Identifier */
    vuint32_t PIDP17:1;                /* Process Identifier */
    vuint32_t PIDP18:1;                /* Process Identifier */
    vuint32_t PIDP19:1;                /* Process Identifier */
    vuint32_t PIDP20:1;                /* Process Identifier */
    vuint32_t PIDP21:1;                /* Process Identifier */
    vuint32_t PIDP22:1;                /* Process Identifier */
    vuint32_t PIDP23:1;                /* Process Identifier */
    vuint32_t PIDP24:1;                /* Process Identifier */
    vuint32_t PIDP25:1;                /* Process Identifier */
    vuint32_t PIDP26:1;                /* Process Identifier */
    vuint32_t PIDP27:1;                /* Process Identifier */
    vuint32_t PIDP28:1;                /* Process Identifier */
    vuint32_t PIDP29:1;                /* Process Identifier */
    vuint32_t PIDP30:1;                /* Process Identifier */
    vuint32_t PIDP31:1;                /* Process Identifier */
  } B;
} XRDC_HWCFG2_tag;

typedef union XRDC_MDACFG_union_tag {  /* Master Domain Assignment Configuration */
  vuint8_t R;
  struct {
    vuint8_t NMDAR:4;
    vuint8_t _unused_4:3;
    vuint8_t NCM:1;                    /* Non-CPU Master */
  } B;
} XRDC_MDACFG_tag;

typedef union XRDC_MRCFG_union_tag {   /* Memory Region Configuration */
  vuint8_t R;
  struct {
    vuint8_t NMRGD:5;
    vuint8_t _unused_5:3;
  } B;
} XRDC_MRCFG_tag;

typedef union XRDC_DERRLOC_union_tag { /* Domain Error Location */
  vuint32_t R;
  struct {
    vuint32_t MRCINST:16;              /* MRC Instance */
    vuint32_t PACINST:4;               /* PAC Instance */
    vuint32_t _unused_20:12;
  } B;
} XRDC_DERRLOC_tag;

typedef union XRDC_DERRW0_DERR_W0_union_tag { /* Domain Error Word0 */
  vuint32_t R;
  struct {
    vuint32_t EADDR:32;                /* Error Address */
  } B;
} XRDC_DERRW0_DERR_W0_tag;

typedef union XRDC_DERRW0_DERR_W1_union_tag { /* Domain Error Word1 */
  vuint32_t R;
  struct {
    vuint32_t EDID:4;                  /* Error Domain Identifier */
    vuint32_t _unused_4:4;
    vuint32_t EATR:3;                  /* Error Attributes */
    vuint32_t ERW:1;                   /* Error Read/Write */
    vuint32_t _unused_12:12;
    vuint32_t EPORT:3;                 /* Error Port */
    vuint32_t _unused_27:3;
    vuint32_t EST:2;                   /* Error State */
  } B;
} XRDC_DERRW0_DERR_W1_tag;

typedef union XRDC_DERRW0_DERR_W3_union_tag { /* Domain Error Word3 */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:30;
    vuint32_t RECR:2;                  /* Rearm Error Capture Registers */
  } B;
} XRDC_DERRW0_DERR_W3_tag;

typedef struct XRDC_DERRW0_struct_tag {
  XRDC_DERRW0_DERR_W0_tag DERR_W0;     /* Domain Error Word0 */
  XRDC_DERRW0_DERR_W1_tag DERR_W1;     /* Domain Error Word1 */
  uint8_t DERRW0_reserved0[4];
  XRDC_DERRW0_DERR_W3_tag DERR_W3;     /* Domain Error Word3 */
} XRDC_DERRW0_tag;

typedef union XRDC_PID_union_tag {     /* Process Identifier */
  vuint32_t R;
  struct {
    vuint32_t PID:6;                   /* Process Identifier */
    vuint32_t _unused_6:10;
    vuint32_t LMNUM:6;                 /* Locked Master Number */
    vuint32_t _unused_22:2;
    vuint32_t ELK22H:1;                /* Enable (LK2 = 2) Special Handling */
    vuint32_t _unused_25:3;
    vuint32_t TSM:1;                   /* Three-State Model */
    vuint32_t LK2:2;                   /* Lock */
    vuint32_t _unused_31:1;
  } B;
} XRDC_PID_tag;

typedef union XRDC_MDA_W0_0_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:2;                   /* Domain Identifier */
    vuint32_t _unused_2:2;
    vuint32_t DIDS:2;                  /* DID Select */
    vuint32_t PE:2;                    /* Process Identifier Enable */
    vuint32_t PIDM:6;                  /* Process Identifier Mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process Identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain Format */
    vuint32_t LK1:1;                   /* Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_MDA_W0_0_DFMT0_tag;

typedef union XRDC_MDA_W0_1_DFMT1_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:2;                   /* Domain Identifier */
    vuint32_t _unused_2:2;
    vuint32_t PA:2;                    /* Privileged Attribute */
    vuint32_t SA:2;                    /* Secure Attribute */
    vuint32_t DIDB:1;                  /* DID Bypass */
    vuint32_t _unused_9:20;
    vuint32_t DFMT:1;                  /* Domain Format */
    vuint32_t LK1:1;                   /* Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_MDA_W0_1_DFMT1_tag;

typedef union XRDC_MDA_W0_2_DFMT1_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:2;                   /* Domain Identifier */
    vuint32_t _unused_2:2;
    vuint32_t PA:2;                    /* Privileged Attribute */
    vuint32_t SA:2;                    /* Secure Attribute */
    vuint32_t DIDB:1;                  /* DID Bypass */
    vuint32_t _unused_9:20;
    vuint32_t DFMT:1;                  /* Domain Format */
    vuint32_t LK1:1;                   /* Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_MDA_W0_2_DFMT1_tag;

typedef union XRDC_MDA_W0_3_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:2;                   /* Domain Identifier */
    vuint32_t _unused_2:2;
    vuint32_t DIDS:2;                  /* DID Select */
    vuint32_t PE:2;                    /* Process Identifier Enable */
    vuint32_t PIDM:6;                  /* Process Identifier Mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process Identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain Format */
    vuint32_t LK1:1;                   /* Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_MDA_W0_3_DFMT0_tag;

typedef union XRDC_MDA_W0_4_DFMT0_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:2;                   /* Domain Identifier */
    vuint32_t _unused_2:2;
    vuint32_t DIDS:2;                  /* DID Select */
    vuint32_t PE:2;                    /* Process Identifier Enable */
    vuint32_t PIDM:6;                  /* Process Identifier Mask */
    vuint32_t _unused_14:2;            /* Reserved */
    vuint32_t PID:6;                   /* Process Identifier */
    vuint32_t _unused_22:2;            /* Reserved */
    vuint32_t _unused_24:4;
    vuint32_t _unused_28:1;
    vuint32_t DFMT:1;                  /* Domain Format */
    vuint32_t LK1:1;                   /* Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_MDA_W0_4_DFMT0_tag;

typedef union XRDC_MDA_W0_5_DFMT1_union_tag { /* Master Domain Assignment */
  vuint32_t R;
  struct {
    vuint32_t DID:2;                   /* Domain Identifier */
    vuint32_t _unused_2:2;
    vuint32_t PA:2;                    /* Privileged Attribute */
    vuint32_t SA:2;                    /* Secure Attribute */
    vuint32_t DIDB:1;                  /* DID Bypass */
    vuint32_t _unused_9:20;
    vuint32_t DFMT:1;                  /* Domain Format */
    vuint32_t LK1:1;                   /* Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_MDA_W0_5_DFMT1_tag;

typedef union XRDC_PDAC_SLOT_PDACN_PDAC_W0_union_tag { /* Peripheral Domain Access Control */
  vuint32_t R;
  struct {
    vuint32_t D0ACP:3;
    vuint32_t D1ACP:3;
    vuint32_t D2ACP:3;
    vuint32_t _unused_9:15;
    vuint32_t SNUM:4;                  /* Semaphore Number */
    vuint32_t _unused_28:2;
    vuint32_t SE:1;                    /* Semaphore Enable */
    vuint32_t _unused_31:1;
  } B;
} XRDC_PDAC_SLOT_PDACN_PDAC_W0_tag;

typedef union XRDC_PDAC_SLOT_PDACN_PDAC_W1_union_tag { /* Peripheral Domain Access Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;
    vuint32_t _unused_24:5;
    vuint32_t LK2:2;                   /* Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_PDAC_SLOT_PDACN_PDAC_W1_tag;

typedef struct XRDC_PDAC_SLOT_PDACN_struct_tag {
  XRDC_PDAC_SLOT_PDACN_PDAC_W0_tag PDAC_W0; /* Peripheral Domain Access Control */
  XRDC_PDAC_SLOT_PDACN_PDAC_W1_tag PDAC_W1; /* Peripheral Domain Access Control */
} XRDC_PDAC_SLOT_PDACN_tag;

typedef struct XRDC_PDAC_SLOT_struct_tag {
  XRDC_PDAC_SLOT_PDACN_tag PDACN[48];  /* Valid array indices: 32-36, 38-42, 44-47 */
  uint8_t PDAC_SLOT_reserved0[640];
} XRDC_PDAC_SLOT_tag;

typedef union XRDC_MRGDN_XRDC_MRGD_W0_union_tag { /* Memory Region Descriptor */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:5;
    vuint32_t SRTADDR:27;              /* Start Address */
  } B;
} XRDC_MRGDN_XRDC_MRGD_W0_tag;

typedef union XRDC_MRGDN_XRDC_MRGD_W1_union_tag { /* Memory Region Descriptor */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:5;
    vuint32_t ENDADDR:27;              /* End Address */
  } B;
} XRDC_MRGDN_XRDC_MRGD_W1_tag;

typedef union XRDC_MRGDN_XRDC_MRGD_W2_union_tag { /* Memory Region Descriptor */
  vuint32_t R;
  struct {
    vuint32_t D0ACP:3;
    vuint32_t D1ACP:3;
    vuint32_t D2ACP:3;
    vuint32_t _unused_9:15;
    vuint32_t SNUM:4;                  /* Semaphore Number */
    vuint32_t _unused_28:2;
    vuint32_t SE:1;                    /* Semaphore Enable */
    vuint32_t _unused_31:1;
  } B;
} XRDC_MRGDN_XRDC_MRGD_W2_tag;

typedef union XRDC_MRGDN_XRDC_MRGD_W3_union_tag { /* Memory Region Descriptor */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:24;
    vuint32_t _unused_24:5;
    vuint32_t LK2:2;                   /* Lock */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} XRDC_MRGDN_XRDC_MRGD_W3_tag;

typedef struct XRDC_MRGDN_struct_tag {
  XRDC_MRGDN_XRDC_MRGD_W0_tag XRDC_MRGD_W0; /* Memory Region Descriptor */
  XRDC_MRGDN_XRDC_MRGD_W1_tag XRDC_MRGD_W1; /* Memory Region Descriptor */
  XRDC_MRGDN_XRDC_MRGD_W2_tag XRDC_MRGD_W2; /* Memory Region Descriptor */
  XRDC_MRGDN_XRDC_MRGD_W3_tag XRDC_MRGD_W3; /* Memory Region Descriptor */
  uint8_t MRGDN_reserved0[16];
} XRDC_MRGDN_tag;

struct XRDC_tag {
  XRDC_CR_tag CR;                      /* Control */
  uint8_t XRDC_reserved0[236];
  XRDC_HWCFG0_tag HWCFG0;              /* Hardware Configuration 0 */
  XRDC_HWCFG1_tag HWCFG1;              /* Hardware Configuration 1 */
  XRDC_HWCFG2_tag HWCFG2;              /* Hardware Configuration 2 */
  uint8_t XRDC_reserved1[4];
  XRDC_MDACFG_tag MDACFG[6];           /* Master Domain Assignment Configuration */
  uint8_t XRDC_reserved2[58];
  XRDC_MRCFG_tag MRCFG[3];             /* Memory Region Configuration */
  uint8_t XRDC_reserved3[189];
  XRDC_DERRLOC_tag DERRLOC[3];         /* Domain Error Location */
  uint8_t XRDC_reserved4[500];
  XRDC_DERRW0_tag DERRW0[19];          /* Valid array indices: 0-2, 16-18 */
  uint8_t XRDC_reserved5[464];
  XRDC_PID_tag PID[5];                 /* Process Identifier; Valid array indices: 0, 3-4 */
  uint8_t XRDC_reserved6[236];
  XRDC_MDA_W0_0_DFMT0_tag MDA_W0_0_DFMT0; /* Master Domain Assignment */
  uint8_t XRDC_reserved7[28];
  XRDC_MDA_W0_1_DFMT1_tag MDA_W0_1_DFMT1; /* Master Domain Assignment */
  uint8_t XRDC_reserved8[28];
  XRDC_MDA_W0_2_DFMT1_tag MDA_W0_2_DFMT1; /* Master Domain Assignment */
  uint8_t XRDC_reserved9[28];
  XRDC_MDA_W0_3_DFMT0_tag MDA_W0_3_DFMT0; /* Master Domain Assignment */
  uint8_t XRDC_reserved10[28];
  XRDC_MDA_W0_4_DFMT0_tag MDA_W0_4_DFMT0; /* Master Domain Assignment */
  uint8_t XRDC_reserved11[28];
  XRDC_MDA_W0_5_DFMT1_tag MDA_W0_5_DFMT1; /* Master Domain Assignment */
  uint8_t XRDC_reserved12[1884];
  XRDC_PDAC_SLOT_tag PDAC_SLOT[3];
  uint8_t XRDC_reserved13[1024];
  XRDC_MRGDN_tag MRGDN[3][16];
};


/* ============================================================================
   =============================== Module: eDMA ===============================
   ============================================================================ */

typedef union eDMA_CSR_union_tag {     /* Management Page Control */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:1;             /* Reserved */
    vuint32_t EDBG:1;                  /* Enable Debug */
    vuint32_t ERCA:1;                  /* Enable Round Robin Channel Arbitration */
    vuint32_t _unused_3:1;             /* Reserved */
    vuint32_t HAE:1;                   /* Halt After Error */
    vuint32_t HALT:1;                  /* Halt DMA Operations */
    vuint32_t GCLC:1;                  /* Global Channel Linking Control */
    vuint32_t GMRC:1;                  /* Global Master ID Replication Control */
    vuint32_t ECX:1;                   /* Cancel Transfer With Error */
    vuint32_t CX:1;                    /* Cancel Transfer */
    vuint32_t _unused_10:6;            /* Reserved */
    vuint32_t _unused_16:8;            /* Reserved */
    vuint32_t ACTIVE_ID:5;             /* Active Channel ID */
    vuint32_t _unused_29:2;            /* Reserved */
    vuint32_t ACTIVE:1;                /* DMA Active Status */
  } B;
} eDMA_CSR_tag;

typedef union eDMA_ES_union_tag {      /* Management Page Error Status */
  vuint32_t R;
  struct {
    vuint32_t DBE:1;                   /* Destination Bus Error */
    vuint32_t SBE:1;                   /* Source Bus Error */
    vuint32_t SGE:1;                   /* Scatter/Gather Configuration Error */
    vuint32_t NCE:1;                   /* NBYTES/CITER Configuration Error */
    vuint32_t DOE:1;                   /* Destination Offset Error */
    vuint32_t DAE:1;                   /* Destination Address Error */
    vuint32_t SOE:1;                   /* Source Offset Error */
    vuint32_t SAE:1;                   /* Source Address Error */
    vuint32_t ECX:1;                   /* Transfer Canceled */
    vuint32_t UCE:1;                   /* Uncorrectable TCD Error During Channel Execution */
    vuint32_t _unused_10:14;           /* Reserved */
    vuint32_t ERRCHN:5;                /* Error Channel Number or Canceled Channel Number */
    vuint32_t _unused_29:2;            /* Reserved */
    vuint32_t VLD:1;                   /* Valid */
  } B;
} eDMA_ES_tag;

typedef union eDMA_INT_union_tag {     /* Management Page Interrupt Request Status */
  vuint32_t R;
  struct {
    vuint32_t INT:32;                  /* Interrupt Request Status */
  } B;
} eDMA_INT_tag;

typedef union eDMA_HRS_union_tag {     /* Management Page Hardware Request Status */
  vuint32_t R;
  struct {
    vuint32_t HRS:32;                  /* Hardware Request Status */
  } B;
} eDMA_HRS_tag;

typedef union eDMA_CH_GRPRI_union_tag { /* Channel Arbitration Group */
  vuint32_t R;
  struct {
    vuint32_t GRPRI:5;                 /* Arbitration Group For Channel n */
    vuint32_t _unused_5:27;
  } B;
} eDMA_CH_GRPRI_tag;

struct eDMA_tag {
  eDMA_CSR_tag CSR;                    /* Management Page Control */
  eDMA_ES_tag ES;                      /* Management Page Error Status */
  eDMA_INT_tag INT;                    /* Management Page Interrupt Request Status */
  eDMA_HRS_tag HRS;                    /* Management Page Hardware Request Status */
  uint8_t eDMA_reserved0[240];
  eDMA_CH_GRPRI_tag CH_GRPRI[32];      /* Channel Arbitration Group */
};


/* ============================================================================
   =============================== Module: eMIOS_0 ============================
   ============================================================================ */

typedef union eMIOS_0_MCR_union_tag {  /* Module Configuration */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:8;
    vuint32_t GPRE:8;                  /* Global Prescaler */
    vuint32_t _unused_16:4;
    vuint32_t _unused_20:6;
    vuint32_t GPREN:1;                 /* Global Prescaler Enable */
    vuint32_t _unused_27:1;
    vuint32_t GTBE:1;                  /* Global Time Base Enable */
    vuint32_t FRZ:1;                   /* Freeze */
    vuint32_t MDIS:1;                  /* Module Disable */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} eMIOS_0_MCR_tag;

typedef union eMIOS_0_GFLAG_union_tag { /* Global FLAG */
  vuint32_t R;
  struct {
    vuint32_t F0:1;                    /* Channel 0 Mirrored FLAG */
    vuint32_t F1:1;                    /* Channel 1 Mirrored FLAG */
    vuint32_t F2:1;                    /* Channel 2 Mirrored FLAG */
    vuint32_t F3:1;                    /* Channel 3 Mirrored FLAG */
    vuint32_t F4:1;                    /* Channel 4 Mirrored FLAG */
    vuint32_t F5:1;                    /* Channel 5 Mirrored FLAG */
    vuint32_t F6:1;                    /* Channel 6 Mirrored FLAG */
    vuint32_t F7:1;                    /* Channel 7 Mirrored FLAG */
    vuint32_t F8:1;                    /* Channel 8 Mirrored FLAG */
    vuint32_t F9:1;                    /* Channel 9 Mirrored FLAG */
    vuint32_t F10:1;                   /* Channel 10 Mirrored FLAG */
    vuint32_t F11:1;                   /* Channel 11 Mirrored FLAG */
    vuint32_t F12:1;                   /* Channel 12 Mirrored FLAG */
    vuint32_t F13:1;                   /* Channel 13 Mirrored FLAG */
    vuint32_t F14:1;                   /* Channel 14 Mirrored FLAG */
    vuint32_t F15:1;                   /* Channel 15 Mirrored FLAG */
    vuint32_t F16:1;                   /* Channel 16 Mirrored FLAG */
    vuint32_t F17:1;                   /* Channel 17 Mirrored FLAG */
    vuint32_t F18:1;                   /* Channel 18 Mirrored FLAG */
    vuint32_t F19:1;                   /* Channel 19 Mirrored FLAG */
    vuint32_t F20:1;                   /* Channel 20 Mirrored FLAG */
    vuint32_t F21:1;                   /* Channel 21 Mirrored FLAG */
    vuint32_t F22:1;                   /* Channel 22 Mirrored FLAG */
    vuint32_t F23:1;                   /* Channel 23 Mirrored FLAG */
    vuint32_t _unused_24:1;
    vuint32_t _unused_25:1;
    vuint32_t _unused_26:1;
    vuint32_t _unused_27:1;
    vuint32_t _unused_28:1;
    vuint32_t _unused_29:1;
    vuint32_t _unused_30:1;
    vuint32_t _unused_31:1;
  } B;
} eMIOS_0_GFLAG_tag;

typedef union eMIOS_0_OUDIS_union_tag { /* Output Update Disable */
  vuint32_t R;
  struct {
    vuint32_t OU0:1;                   /* Channel 0 Output Update Disable */
    vuint32_t OU1:1;                   /* Channel 1 Output Update Disable */
    vuint32_t OU2:1;                   /* Channel 2 Output Update Disable */
    vuint32_t OU3:1;                   /* Channel 3 Output Update Disable */
    vuint32_t OU4:1;                   /* Channel 4 Output Update Disable */
    vuint32_t OU5:1;                   /* Channel 5 Output Update Disable */
    vuint32_t OU6:1;                   /* Channel 6 Output Update Disable */
    vuint32_t OU7:1;                   /* Channel 7 Output Update Disable */
    vuint32_t OU8:1;                   /* Channel 8 Output Update Disable */
    vuint32_t OU9:1;                   /* Channel 9 Output Update Disable */
    vuint32_t OU10:1;                  /* Channel 10 Output Update Disable */
    vuint32_t OU11:1;                  /* Channel 11 Output Update Disable */
    vuint32_t OU12:1;                  /* Channel 12 Output Update Disable */
    vuint32_t OU13:1;                  /* Channel 13 Output Update Disable */
    vuint32_t OU14:1;                  /* Channel 14 Output Update Disable */
    vuint32_t OU15:1;                  /* Channel 15 Output Update Disable */
    vuint32_t OU16:1;                  /* Channel 16 Output Update Disable */
    vuint32_t OU17:1;                  /* Channel 17 Output Update Disable */
    vuint32_t OU18:1;                  /* Channel 18 Output Update Disable */
    vuint32_t OU19:1;                  /* Channel 19 Output Update Disable */
    vuint32_t OU20:1;                  /* Channel 20 Output Update Disable */
    vuint32_t OU21:1;                  /* Channel 21 Output Update Disable */
    vuint32_t OU22:1;                  /* Channel 22 Output Update Disable */
    vuint32_t OU23:1;                  /* Channel 23 Output Update Disable */
    vuint32_t _unused_24:1;
    vuint32_t _unused_25:1;
    vuint32_t _unused_26:1;
    vuint32_t _unused_27:1;
    vuint32_t _unused_28:1;
    vuint32_t _unused_29:1;
    vuint32_t _unused_30:1;
    vuint32_t _unused_31:1;
  } B;
} eMIOS_0_OUDIS_tag;

typedef union eMIOS_0_UCDIS_union_tag { /* Disable Channel */
  vuint32_t R;
  struct {
    vuint32_t UCDIS0:1;                /* Enable Channel 0 */
    vuint32_t UCDIS1:1;                /* Enable Channel 1 */
    vuint32_t UCDIS2:1;                /* Enable Channel 2 */
    vuint32_t UCDIS3:1;                /* Enable Channel 3 */
    vuint32_t UCDIS4:1;                /* Enable Channel 4 */
    vuint32_t UCDIS5:1;                /* Enable Channel 5 */
    vuint32_t UCDIS6:1;                /* Enable Channel 6 */
    vuint32_t UCDIS7:1;                /* Enable Channel 7 */
    vuint32_t UCDIS8:1;                /* Enable Channel 8 */
    vuint32_t UCDIS9:1;                /* Enable Channel 9 */
    vuint32_t UCDIS10:1;               /* Enable Channel 10 */
    vuint32_t UCDIS11:1;               /* Enable Channel 11 */
    vuint32_t UCDIS12:1;               /* Enable Channel 12 */
    vuint32_t UCDIS13:1;               /* Enable Channel 13 */
    vuint32_t UCDIS14:1;               /* Enable Channel 14 */
    vuint32_t UCDIS15:1;               /* Enable Channel 15 */
    vuint32_t UCDIS16:1;               /* Enable Channel 16 */
    vuint32_t UCDIS17:1;               /* Enable Channel 17 */
    vuint32_t UCDIS18:1;               /* Enable Channel 18 */
    vuint32_t UCDIS19:1;               /* Enable Channel 19 */
    vuint32_t UCDIS20:1;               /* Enable Channel 20 */
    vuint32_t UCDIS21:1;               /* Enable Channel 21 */
    vuint32_t UCDIS22:1;               /* Enable Channel 22 */
    vuint32_t UCDIS23:1;               /* Enable Channel 23 */
    vuint32_t _unused_24:1;
    vuint32_t _unused_25:1;
    vuint32_t _unused_26:1;
    vuint32_t _unused_27:1;
    vuint32_t _unused_28:1;
    vuint32_t _unused_29:1;
    vuint32_t _unused_30:1;
    vuint32_t _unused_31:1;
  } B;
} eMIOS_0_UCDIS_tag;

typedef union eMIOS_0_UC_A_union_tag { /* UC A 0 */
  vuint32_t R;
  struct {
    vuint32_t A:16;                    /* A */
    vuint32_t _unused_16:16;
  } B;
} eMIOS_0_UC_A_tag;

typedef union eMIOS_0_UC_B_union_tag { /* UC B 0 */
  vuint32_t R;
  struct {
    vuint32_t B:16;                    /* See the register description. */
    vuint32_t _unused_16:16;
  } B;
} eMIOS_0_UC_B_tag;

typedef union eMIOS_0_UC_CNT_union_tag { /* UC Counter 0 */
  vuint32_t R;
  struct {
    vuint32_t C:16;                    /* Internal Counter Value */
    vuint32_t _unused_16:16;
  } B;
} eMIOS_0_UC_CNT_tag;

typedef union eMIOS_0_UC_C_union_tag { /* UC Control 0 */
  vuint32_t R;
  struct {
    vuint32_t MODE:7;                  /* Mode Selection */
    vuint32_t EDPOL:1;                 /* Edge Polarity */
    vuint32_t EDSEL:1;                 /* Edge Selection */
    vuint32_t BSL:2;                   /* Bus Select */
    vuint32_t _unused_11:1;
    vuint32_t FORCMB:1;                /* Force Match B */
    vuint32_t FORCMA:1;                /* Force Match A */
    vuint32_t _unused_14:3;
    vuint32_t FEN:1;                   /* FLAG Enable */
    vuint32_t FCK:1;                   /* Filter Clock Select */
    vuint32_t IF:4;                    /* Input Filter */
    vuint32_t _unused_23:1;
    vuint32_t DMA:1;                   /* Direct Memory Access */
    vuint32_t UCPREN:1;                /* Prescaler Enable */
    vuint32_t UCPRE:2;                 /* Prescaler */
    vuint32_t ODISSL:2;                /* Output Disable Select */
    vuint32_t ODIS:1;                  /* Output Disable */
    vuint32_t FREN:1;                  /* Freeze Enable */
  } B;
} eMIOS_0_UC_C_tag;

typedef union eMIOS_0_UC_S_union_tag { /* UC Status 0 */
  vuint32_t R;
  struct {
    vuint32_t FLAG:1;                  /* Flag */
    vuint32_t UCOUT:1;                 /* UC Output Pin */
    vuint32_t UCIN:1;                  /* UC Input Pin */
    vuint32_t _unused_3:12;
    vuint32_t OVFL:1;                  /* Overflow */
    vuint32_t _unused_16:15;
    vuint32_t OVR:1;                   /* Overrun */
  } B;
} eMIOS_0_UC_S_tag;

typedef union eMIOS_0_UC_ALTA_union_tag { /* Alternate Address 0 */
  vuint32_t R;
  struct {
    vuint32_t ALTA:16;                 /* Alternate Address */
    vuint32_t _unused_16:16;
  } B;
} eMIOS_0_UC_ALTA_tag;

typedef union eMIOS_0_UC_C2_union_tag { /* UC Control 2 0 */
  vuint32_t R;
  struct {
    vuint32_t UCRELDEL_INT:5;          /* Unified Channel Reload Signal Output Delay Interval. */
    vuint32_t _unused_5:9;             /* Reserved. */
    vuint32_t UCPRECLK:1;              /* Prescaler Clock select bit. */
    vuint32_t _unused_15:1;            /* Reserved. */
    vuint32_t UCEXTPRE:4;              /* Extended Prescaler bits [19:16]. */
    vuint32_t _unused_20:12;           /* Reserved. */
  } B;
} eMIOS_0_UC_C2_tag;

typedef struct eMIOS_0_UC_struct_tag {
  eMIOS_0_UC_A_tag A;                  /* UC A 0 */
  eMIOS_0_UC_B_tag B;                  /* UC B 0 */
  eMIOS_0_UC_CNT_tag CNT;              /* UC Counter 0 */
  eMIOS_0_UC_C_tag C;                  /* UC Control 0 */
  eMIOS_0_UC_S_tag S;                  /* UC Status 0 */
  eMIOS_0_UC_ALTA_tag ALTA;            /* Alternate Address 0 */
  eMIOS_0_UC_C2_tag C2;                /* UC Control 2 0 */
  uint8_t UC_reserved0[4];
} eMIOS_0_UC_tag;

struct eMIOS_0_tag {
  eMIOS_0_MCR_tag MCR;                 /* Module Configuration */
  eMIOS_0_GFLAG_tag GFLAG;             /* Global FLAG */
  eMIOS_0_OUDIS_tag OUDIS;             /* Output Update Disable */
  eMIOS_0_UCDIS_tag UCDIS;             /* Disable Channel */
  uint8_t eMIOS_0_reserved0[16];
  eMIOS_0_UC_tag UC[24];
};


/* ============================================================================
   =============================== Module: eMIOS_1 ============================
   ============================================================================ */

typedef union eMIOS_1_MCR_union_tag {  /* Module Configuration */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:8;
    vuint32_t GPRE:8;                  /* Global Prescaler */
    vuint32_t _unused_16:4;
    vuint32_t _unused_20:6;
    vuint32_t GPREN:1;                 /* Global Prescaler Enable */
    vuint32_t _unused_27:1;
    vuint32_t GTBE:1;                  /* Global Time Base Enable */
    vuint32_t FRZ:1;                   /* Freeze */
    vuint32_t MDIS:1;                  /* Module Disable */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} eMIOS_1_MCR_tag;

typedef union eMIOS_1_GFLAG_union_tag { /* Global FLAG */
  vuint32_t R;
  struct {
    vuint32_t F0:1;                    /* Channel 0 Mirrored FLAG */
    vuint32_t F1:1;                    /* Channel 1 Mirrored FLAG */
    vuint32_t F2:1;                    /* Channel 2 Mirrored FLAG */
    vuint32_t F3:1;                    /* Channel 3 Mirrored FLAG */
    vuint32_t F4:1;                    /* Channel 4 Mirrored FLAG */
    vuint32_t F5:1;                    /* Channel 5 Mirrored FLAG */
    vuint32_t F6:1;                    /* Channel 6 Mirrored FLAG */
    vuint32_t F7:1;                    /* Channel 7 Mirrored FLAG */
    vuint32_t F8:1;                    /* Channel 8 Mirrored FLAG */
    vuint32_t F9:1;                    /* Channel 9 Mirrored FLAG */
    vuint32_t F10:1;                   /* Channel 10 Mirrored FLAG */
    vuint32_t F11:1;                   /* Channel 11 Mirrored FLAG */
    vuint32_t F12:1;                   /* Channel 12 Mirrored FLAG */
    vuint32_t F13:1;                   /* Channel 13 Mirrored FLAG */
    vuint32_t F14:1;                   /* Channel 14 Mirrored FLAG */
    vuint32_t F15:1;                   /* Channel 15 Mirrored FLAG */
    vuint32_t F16:1;                   /* Channel 16 Mirrored FLAG */
    vuint32_t F17:1;                   /* Channel 17 Mirrored FLAG */
    vuint32_t F18:1;                   /* Channel 18 Mirrored FLAG */
    vuint32_t F19:1;                   /* Channel 19 Mirrored FLAG */
    vuint32_t F20:1;                   /* Channel 20 Mirrored FLAG */
    vuint32_t F21:1;                   /* Channel 21 Mirrored FLAG */
    vuint32_t F22:1;                   /* Channel 22 Mirrored FLAG */
    vuint32_t F23:1;                   /* Channel 23 Mirrored FLAG */
    vuint32_t _unused_24:1;
    vuint32_t _unused_25:1;
    vuint32_t _unused_26:1;
    vuint32_t _unused_27:1;
    vuint32_t _unused_28:1;
    vuint32_t _unused_29:1;
    vuint32_t _unused_30:1;
    vuint32_t _unused_31:1;
  } B;
} eMIOS_1_GFLAG_tag;

typedef union eMIOS_1_OUDIS_union_tag { /* Output Update Disable */
  vuint32_t R;
  struct {
    vuint32_t OU0:1;                   /* Channel 0 Output Update Disable */
    vuint32_t OU1:1;                   /* Channel 1 Output Update Disable */
    vuint32_t OU2:1;                   /* Channel 2 Output Update Disable */
    vuint32_t OU3:1;                   /* Channel 3 Output Update Disable */
    vuint32_t OU4:1;                   /* Channel 4 Output Update Disable */
    vuint32_t OU5:1;                   /* Channel 5 Output Update Disable */
    vuint32_t OU6:1;                   /* Channel 6 Output Update Disable */
    vuint32_t OU7:1;                   /* Channel 7 Output Update Disable */
    vuint32_t OU8:1;                   /* Channel 8 Output Update Disable */
    vuint32_t OU9:1;                   /* Channel 9 Output Update Disable */
    vuint32_t OU10:1;                  /* Channel 10 Output Update Disable */
    vuint32_t OU11:1;                  /* Channel 11 Output Update Disable */
    vuint32_t OU12:1;                  /* Channel 12 Output Update Disable */
    vuint32_t OU13:1;                  /* Channel 13 Output Update Disable */
    vuint32_t OU14:1;                  /* Channel 14 Output Update Disable */
    vuint32_t OU15:1;                  /* Channel 15 Output Update Disable */
    vuint32_t OU16:1;                  /* Channel 16 Output Update Disable */
    vuint32_t OU17:1;                  /* Channel 17 Output Update Disable */
    vuint32_t OU18:1;                  /* Channel 18 Output Update Disable */
    vuint32_t OU19:1;                  /* Channel 19 Output Update Disable */
    vuint32_t OU20:1;                  /* Channel 20 Output Update Disable */
    vuint32_t OU21:1;                  /* Channel 21 Output Update Disable */
    vuint32_t OU22:1;                  /* Channel 22 Output Update Disable */
    vuint32_t OU23:1;                  /* Channel 23 Output Update Disable */
    vuint32_t _unused_24:1;
    vuint32_t _unused_25:1;
    vuint32_t _unused_26:1;
    vuint32_t _unused_27:1;
    vuint32_t _unused_28:1;
    vuint32_t _unused_29:1;
    vuint32_t _unused_30:1;
    vuint32_t _unused_31:1;
  } B;
} eMIOS_1_OUDIS_tag;

typedef union eMIOS_1_UCDIS_union_tag { /* Disable Channel */
  vuint32_t R;
  struct {
    vuint32_t UCDIS0:1;                /* Enable Channel 0 */
    vuint32_t UCDIS1:1;                /* Enable Channel 1 */
    vuint32_t UCDIS2:1;                /* Enable Channel 2 */
    vuint32_t UCDIS3:1;                /* Enable Channel 3 */
    vuint32_t UCDIS4:1;                /* Enable Channel 4 */
    vuint32_t UCDIS5:1;                /* Enable Channel 5 */
    vuint32_t UCDIS6:1;                /* Enable Channel 6 */
    vuint32_t UCDIS7:1;                /* Enable Channel 7 */
    vuint32_t UCDIS8:1;                /* Enable Channel 8 */
    vuint32_t UCDIS9:1;                /* Enable Channel 9 */
    vuint32_t UCDIS10:1;               /* Enable Channel 10 */
    vuint32_t UCDIS11:1;               /* Enable Channel 11 */
    vuint32_t UCDIS12:1;               /* Enable Channel 12 */
    vuint32_t UCDIS13:1;               /* Enable Channel 13 */
    vuint32_t UCDIS14:1;               /* Enable Channel 14 */
    vuint32_t UCDIS15:1;               /* Enable Channel 15 */
    vuint32_t UCDIS16:1;               /* Enable Channel 16 */
    vuint32_t UCDIS17:1;               /* Enable Channel 17 */
    vuint32_t UCDIS18:1;               /* Enable Channel 18 */
    vuint32_t UCDIS19:1;               /* Enable Channel 19 */
    vuint32_t UCDIS20:1;               /* Enable Channel 20 */
    vuint32_t UCDIS21:1;               /* Enable Channel 21 */
    vuint32_t UCDIS22:1;               /* Enable Channel 22 */
    vuint32_t UCDIS23:1;               /* Enable Channel 23 */
    vuint32_t _unused_24:1;
    vuint32_t _unused_25:1;
    vuint32_t _unused_26:1;
    vuint32_t _unused_27:1;
    vuint32_t _unused_28:1;
    vuint32_t _unused_29:1;
    vuint32_t _unused_30:1;
    vuint32_t _unused_31:1;
  } B;
} eMIOS_1_UCDIS_tag;

typedef union eMIOS_1_UC_A_union_tag { /* UC A 0 */
  vuint32_t R;
  struct {
    vuint32_t A:16;                    /* A */
    vuint32_t _unused_16:16;
  } B;
} eMIOS_1_UC_A_tag;

typedef union eMIOS_1_UC_B_union_tag { /* UC B 0 */
  vuint32_t R;
  struct {
    vuint32_t B:16;                    /* See the register description. */
    vuint32_t _unused_16:16;
  } B;
} eMIOS_1_UC_B_tag;

typedef union eMIOS_1_UC_CNT_union_tag { /* UC Counter 0 */
  vuint32_t R;
  struct {
    vuint32_t C:16;                    /* Internal Counter Value */
    vuint32_t _unused_16:16;
  } B;
} eMIOS_1_UC_CNT_tag;

typedef union eMIOS_1_UC_C_union_tag { /* UC Control 0 */
  vuint32_t R;
  struct {
    vuint32_t MODE:7;                  /* Mode Selection */
    vuint32_t EDPOL:1;                 /* Edge Polarity */
    vuint32_t EDSEL:1;                 /* Edge Selection */
    vuint32_t BSL:2;                   /* Bus Select */
    vuint32_t _unused_11:1;
    vuint32_t FORCMB:1;                /* Force Match B */
    vuint32_t FORCMA:1;                /* Force Match A */
    vuint32_t _unused_14:3;
    vuint32_t FEN:1;                   /* FLAG Enable */
    vuint32_t FCK:1;                   /* Filter Clock Select */
    vuint32_t IF:4;                    /* Input Filter */
    vuint32_t _unused_23:1;
    vuint32_t DMA:1;                   /* Direct Memory Access */
    vuint32_t UCPREN:1;                /* Prescaler Enable */
    vuint32_t UCPRE:2;                 /* Prescaler */
    vuint32_t ODISSL:2;                /* Output Disable Select */
    vuint32_t ODIS:1;                  /* Output Disable */
    vuint32_t FREN:1;                  /* Freeze Enable */
  } B;
} eMIOS_1_UC_C_tag;

typedef union eMIOS_1_UC_S_union_tag { /* UC Status 0 */
  vuint32_t R;
  struct {
    vuint32_t FLAG:1;                  /* Flag */
    vuint32_t UCOUT:1;                 /* UC Output Pin */
    vuint32_t UCIN:1;                  /* UC Input Pin */
    vuint32_t _unused_3:12;
    vuint32_t OVFL:1;                  /* Overflow */
    vuint32_t _unused_16:15;
    vuint32_t OVR:1;                   /* Overrun */
  } B;
} eMIOS_1_UC_S_tag;

typedef union eMIOS_1_UC_ALTA_union_tag { /* Alternate Address 0 */
  vuint32_t R;
  struct {
    vuint32_t ALTA:16;                 /* Alternate Address */
    vuint32_t _unused_16:16;
  } B;
} eMIOS_1_UC_ALTA_tag;

typedef union eMIOS_1_UC_C2_union_tag { /* UC Control 2 0 */
  vuint32_t R;
  struct {
    vuint32_t UCRELDEL_INT:5;          /* Unified Channel Reload Signal Output Delay Interval. */
    vuint32_t _unused_5:9;             /* Reserved. */
    vuint32_t UCPRECLK:1;              /* Prescaler Clock select bit. */
    vuint32_t _unused_15:1;            /* Reserved. */
    vuint32_t UCEXTPRE:4;              /* Extended Prescaler bits [19:16]. */
    vuint32_t _unused_20:12;           /* Reserved. */
  } B;
} eMIOS_1_UC_C2_tag;

typedef struct eMIOS_1_UC_struct_tag {
  eMIOS_1_UC_A_tag A;                  /* UC A 0 */
  eMIOS_1_UC_B_tag B;                  /* UC B 0 */
  eMIOS_1_UC_CNT_tag CNT;              /* UC Counter 0 */
  eMIOS_1_UC_C_tag C;                  /* UC Control 0 */
  eMIOS_1_UC_S_tag S;                  /* UC Status 0 */
  eMIOS_1_UC_ALTA_tag ALTA;            /* Alternate Address 0 */
  eMIOS_1_UC_C2_tag C2;                /* UC Control 2 0 */
  uint8_t UC_reserved0[4];
} eMIOS_1_UC_tag;

struct eMIOS_1_tag {
  eMIOS_1_MCR_tag MCR;                 /* Module Configuration */
  eMIOS_1_GFLAG_tag GFLAG;             /* Global FLAG */
  eMIOS_1_OUDIS_tag OUDIS;             /* Output Update Disable */
  eMIOS_1_UCDIS_tag UCDIS;             /* Disable Channel */
  uint8_t eMIOS_1_reserved0[16];
  eMIOS_1_UC_tag UC[24];
};


/* ============================================================================
   =============================== Module: eMIOS_2 ============================
   ============================================================================ */

typedef union eMIOS_2_MCR_union_tag {  /* Module Configuration */
  vuint32_t R;
  struct {
    vuint32_t _unused_0:8;
    vuint32_t GPRE:8;                  /* Global Prescaler */
    vuint32_t _unused_16:4;
    vuint32_t _unused_20:6;
    vuint32_t GPREN:1;                 /* Global Prescaler Enable */
    vuint32_t _unused_27:1;
    vuint32_t GTBE:1;                  /* Global Time Base Enable */
    vuint32_t FRZ:1;                   /* Freeze */
    vuint32_t MDIS:1;                  /* Module Disable */
    vuint32_t _unused_31:1;            /* Reserved */
  } B;
} eMIOS_2_MCR_tag;

typedef union eMIOS_2_GFLAG_union_tag { /* Global FLAG */
  vuint32_t R;
  struct {
    vuint32_t F0:1;                    /* Channel 0 Mirrored FLAG */
    vuint32_t F1:1;                    /* Channel 1 Mirrored FLAG */
    vuint32_t F2:1;                    /* Channel 2 Mirrored FLAG */
    vuint32_t F3:1;                    /* Channel 3 Mirrored FLAG */
    vuint32_t F4:1;                    /* Channel 4 Mirrored FLAG */
    vuint32_t F5:1;                    /* Channel 5 Mirrored FLAG */
    vuint32_t F6:1;                    /* Channel 6 Mirrored FLAG */
    vuint32_t F7:1;                    /* Channel 7 Mirrored FLAG */
    vuint32_t F8:1;                    /* Channel 8 Mirrored FLAG */
    vuint32_t F9:1;                    /* Channel 9 Mirrored FLAG */
    vuint32_t F10:1;                   /* Channel 10 Mirrored FLAG */
    vuint32_t F11:1;                   /* Channel 11 Mirrored FLAG */
    vuint32_t F12:1;                   /* Channel 12 Mirrored FLAG */
    vuint32_t F13:1;                   /* Channel 13 Mirrored FLAG */
    vuint32_t F14:1;                   /* Channel 14 Mirrored FLAG */
    vuint32_t F15:1;                   /* Channel 15 Mirrored FLAG */
    vuint32_t F16:1;                   /* Channel 16 Mirrored FLAG */
    vuint32_t F17:1;                   /* Channel 17 Mirrored FLAG */
    vuint32_t F18:1;                   /* Channel 18 Mirrored FLAG */
    vuint32_t F19:1;                   /* Channel 19 Mirrored FLAG */
    vuint32_t F20:1;                   /* Channel 20 Mirrored FLAG */
    vuint32_t F21:1;                   /* Channel 21 Mirrored FLAG */
    vuint32_t F22:1;                   /* Channel 22 Mirrored FLAG */
    vuint32_t F23:1;                   /* Channel 23 Mirrored FLAG */
    vuint32_t _unused_24:1;
    vuint32_t _unused_25:1;
    vuint32_t _unused_26:1;
    vuint32_t _unused_27:1;
    vuint32_t _unused_28:1;
    vuint32_t _unused_29:1;
    vuint32_t _unused_30:1;
    vuint32_t _unused_31:1;
  } B;
} eMIOS_2_GFLAG_tag;

typedef union eMIOS_2_OUDIS_union_tag { /* Output Update Disable */
  vuint32_t R;
  struct {
    vuint32_t OU0:1;                   /* Channel 0 Output Update Disable */
    vuint32_t OU1:1;                   /* Channel 1 Output Update Disable */
    vuint32_t OU2:1;                   /* Channel 2 Output Update Disable */
    vuint32_t OU3:1;                   /* Channel 3 Output Update Disable */
    vuint32_t OU4:1;                   /* Channel 4 Output Update Disable */
    vuint32_t OU5:1;                   /* Channel 5 Output Update Disable */
    vuint32_t OU6:1;                   /* Channel 6 Output Update Disable */
    vuint32_t OU7:1;                   /* Channel 7 Output Update Disable */
    vuint32_t OU8:1;                   /* Channel 8 Output Update Disable */
    vuint32_t OU9:1;                   /* Channel 9 Output Update Disable */
    vuint32_t OU10:1;                  /* Channel 10 Output Update Disable */
    vuint32_t OU11:1;                  /* Channel 11 Output Update Disable */
    vuint32_t OU12:1;                  /* Channel 12 Output Update Disable */
    vuint32_t OU13:1;                  /* Channel 13 Output Update Disable */
    vuint32_t OU14:1;                  /* Channel 14 Output Update Disable */
    vuint32_t OU15:1;                  /* Channel 15 Output Update Disable */
    vuint32_t OU16:1;                  /* Channel 16 Output Update Disable */
    vuint32_t OU17:1;                  /* Channel 17 Output Update Disable */
    vuint32_t OU18:1;                  /* Channel 18 Output Update Disable */
    vuint32_t OU19:1;                  /* Channel 19 Output Update Disable */
    vuint32_t OU20:1;                  /* Channel 20 Output Update Disable */
    vuint32_t OU21:1;                  /* Channel 21 Output Update Disable */
    vuint32_t OU22:1;                  /* Channel 22 Output Update Disable */
    vuint32_t OU23:1;                  /* Channel 23 Output Update Disable */
    vuint32_t _unused_24:1;
    vuint32_t _unused_25:1;
    vuint32_t _unused_26:1;
    vuint32_t _unused_27:1;
    vuint32_t _unused_28:1;
    vuint32_t _unused_29:1;
    vuint32_t _unused_30:1;
    vuint32_t _unused_31:1;
  } B;
} eMIOS_2_OUDIS_tag;

typedef union eMIOS_2_UCDIS_union_tag { /* Disable Channel */
  vuint32_t R;
  struct {
    vuint32_t UCDIS0:1;                /* Enable Channel 0 */
    vuint32_t UCDIS1:1;                /* Enable Channel 1 */
    vuint32_t UCDIS2:1;                /* Enable Channel 2 */
    vuint32_t UCDIS3:1;                /* Enable Channel 3 */
    vuint32_t UCDIS4:1;                /* Enable Channel 4 */
    vuint32_t UCDIS5:1;                /* Enable Channel 5 */
    vuint32_t UCDIS6:1;                /* Enable Channel 6 */
    vuint32_t UCDIS7:1;                /* Enable Channel 7 */
    vuint32_t UCDIS8:1;                /* Enable Channel 8 */
    vuint32_t UCDIS9:1;                /* Enable Channel 9 */
    vuint32_t UCDIS10:1;               /* Enable Channel 10 */
    vuint32_t UCDIS11:1;               /* Enable Channel 11 */
    vuint32_t UCDIS12:1;               /* Enable Channel 12 */
    vuint32_t UCDIS13:1;               /* Enable Channel 13 */
    vuint32_t UCDIS14:1;               /* Enable Channel 14 */
    vuint32_t UCDIS15:1;               /* Enable Channel 15 */
    vuint32_t UCDIS16:1;               /* Enable Channel 16 */
    vuint32_t UCDIS17:1;               /* Enable Channel 17 */
    vuint32_t UCDIS18:1;               /* Enable Channel 18 */
    vuint32_t UCDIS19:1;               /* Enable Channel 19 */
    vuint32_t UCDIS20:1;               /* Enable Channel 20 */
    vuint32_t UCDIS21:1;               /* Enable Channel 21 */
    vuint32_t UCDIS22:1;               /* Enable Channel 22 */
    vuint32_t UCDIS23:1;               /* Enable Channel 23 */
    vuint32_t _unused_24:1;
    vuint32_t _unused_25:1;
    vuint32_t _unused_26:1;
    vuint32_t _unused_27:1;
    vuint32_t _unused_28:1;
    vuint32_t _unused_29:1;
    vuint32_t _unused_30:1;
    vuint32_t _unused_31:1;
  } B;
} eMIOS_2_UCDIS_tag;

typedef union eMIOS_2_UC_A_union_tag { /* UC A 0 */
  vuint32_t R;
  struct {
    vuint32_t A:16;                    /* A */
    vuint32_t _unused_16:16;
  } B;
} eMIOS_2_UC_A_tag;

typedef union eMIOS_2_UC_B_union_tag { /* UC B 0 */
  vuint32_t R;
  struct {
    vuint32_t B:16;                    /* See the register description. */
    vuint32_t _unused_16:16;
  } B;
} eMIOS_2_UC_B_tag;

typedef union eMIOS_2_UC_CNT_union_tag { /* UC Counter 0 */
  vuint32_t R;
  struct {
    vuint32_t C:16;                    /* Internal Counter Value */
    vuint32_t _unused_16:16;
  } B;
} eMIOS_2_UC_CNT_tag;

typedef union eMIOS_2_UC_C_union_tag { /* UC Control 0 */
  vuint32_t R;
  struct {
    vuint32_t MODE:7;                  /* Mode Selection */
    vuint32_t EDPOL:1;                 /* Edge Polarity */
    vuint32_t EDSEL:1;                 /* Edge Selection */
    vuint32_t BSL:2;                   /* Bus Select */
    vuint32_t _unused_11:1;
    vuint32_t FORCMB:1;                /* Force Match B */
    vuint32_t FORCMA:1;                /* Force Match A */
    vuint32_t _unused_14:3;
    vuint32_t FEN:1;                   /* FLAG Enable */
    vuint32_t FCK:1;                   /* Filter Clock Select */
    vuint32_t IF:4;                    /* Input Filter */
    vuint32_t _unused_23:1;
    vuint32_t DMA:1;                   /* Direct Memory Access */
    vuint32_t UCPREN:1;                /* Prescaler Enable */
    vuint32_t UCPRE:2;                 /* Prescaler */
    vuint32_t ODISSL:2;                /* Output Disable Select */
    vuint32_t ODIS:1;                  /* Output Disable */
    vuint32_t FREN:1;                  /* Freeze Enable */
  } B;
} eMIOS_2_UC_C_tag;

typedef union eMIOS_2_UC_S_union_tag { /* UC Status 0 */
  vuint32_t R;
  struct {
    vuint32_t FLAG:1;                  /* Flag */
    vuint32_t UCOUT:1;                 /* UC Output Pin */
    vuint32_t UCIN:1;                  /* UC Input Pin */
    vuint32_t _unused_3:12;
    vuint32_t OVFL:1;                  /* Overflow */
    vuint32_t _unused_16:15;
    vuint32_t OVR:1;                   /* Overrun */
  } B;
} eMIOS_2_UC_S_tag;

typedef union eMIOS_2_UC_ALTA_union_tag { /* Alternate Address 0 */
  vuint32_t R;
  struct {
    vuint32_t ALTA:16;                 /* Alternate Address */
    vuint32_t _unused_16:16;
  } B;
} eMIOS_2_UC_ALTA_tag;

typedef union eMIOS_2_UC_C2_union_tag { /* UC Control 2 0 */
  vuint32_t R;
  struct {
    vuint32_t UCRELDEL_INT:5;          /* Unified Channel Reload Signal Output Delay Interval. */
    vuint32_t _unused_5:9;             /* Reserved. */
    vuint32_t UCPRECLK:1;              /* Prescaler Clock select bit. */
    vuint32_t _unused_15:1;            /* Reserved. */
    vuint32_t UCEXTPRE:4;              /* Extended Prescaler bits [19:16]. */
    vuint32_t _unused_20:12;           /* Reserved. */
  } B;
} eMIOS_2_UC_C2_tag;

typedef struct eMIOS_2_UC_struct_tag {
  eMIOS_2_UC_A_tag A;                  /* UC A 0 */
  eMIOS_2_UC_B_tag B;                  /* UC B 0 */
  eMIOS_2_UC_CNT_tag CNT;              /* UC Counter 0 */
  eMIOS_2_UC_C_tag C;                  /* UC Control 0 */
  eMIOS_2_UC_S_tag S;                  /* UC Status 0 */
  eMIOS_2_UC_ALTA_tag ALTA;            /* Alternate Address 0 */
  eMIOS_2_UC_C2_tag C2;                /* UC Control 2 0 */
  uint8_t UC_reserved0[4];
} eMIOS_2_UC_tag;

struct eMIOS_2_tag {
  eMIOS_2_MCR_tag MCR;                 /* Module Configuration */
  eMIOS_2_GFLAG_tag GFLAG;             /* Global FLAG */
  eMIOS_2_OUDIS_tag OUDIS;             /* Output Update Disable */
  eMIOS_2_UCDIS_tag UCDIS;             /* Disable Channel */
  uint8_t eMIOS_2_reserved0[16];
  eMIOS_2_UC_tag UC[24];
};

#define ADC_0 (*(volatile struct ADC_tag *) 0x400A0000UL)
#define ADC_1 (*(volatile struct ADC_tag *) 0x400A4000UL)
#define ADC_2 (*(volatile struct ADC_tag *) 0x400A8000UL)
#define AXBS_LITE (*(volatile struct AXBS_LITE_tag *) 0x40200000UL)
#define BCTU (*(volatile struct BCTU_tag *) 0x40084000UL)
#define CMU_0 (*(volatile struct CMU_FC_tag *) 0x402BC000UL)
#define CMU_3 (*(volatile struct CMU_FC_tag *) 0x402BC060UL)
#define CMU_4 (*(volatile struct CMU_FC_tag *) 0x402BC080UL)
#define CMU_5 (*(volatile struct CMU_FC_tag *) 0x402BC0A0UL)
#define CMU_1 (*(volatile struct CMU_FM_tag *) 0x402BC020UL)
#define CMU_2 (*(volatile struct CMU_FM_tag *) 0x402BC040UL)
#define CONFIGURATION_GPR (*(volatile struct CONFIGURATION_GPR_tag *) 0x4039C000UL)
#define CRC (*(volatile struct CRC_tag *) 0x40380000UL)
#define DCM (*(volatile struct DCM_tag *) 0x402AC000UL)
#define DCM_GPR (*(volatile struct DCM_GPR_tag *) 0x402AC000UL)
#define DMAMUX_1 (*(volatile struct DMAMUX_tag *) 0x40284000UL)
#define DMAMUX_0 (*(volatile struct DMAMUX_tag *) 0x40280000UL)
#define EIM (*(volatile struct EIM_tag *) 0x40258000UL)
#define EMAC (*(volatile struct EMAC_tag *) 0x40480000UL)
#define ERM (*(volatile struct ERM_tag *) 0x4025C000UL)
#define FCCU (*(volatile struct FCCU_tag *) 0x40384000UL)
#define FIRC (*(volatile struct FIRC_tag *) 0x402D0000UL)
#define FLASH (*(volatile struct FLASH_tag *) 0x402EC000UL)
#define FLASH_ALT (*(volatile struct FLASH_tag *) 0x402F0000UL)
#define CAN_3 (*(volatile struct FLEXCAN_tag *) 0x40310000UL)
#define CAN_4 (*(volatile struct FLEXCAN_tag *) 0x40314000UL)
#define CAN_5 (*(volatile struct FLEXCAN_tag *) 0x40318000UL)
#define FLEXIO (*(volatile struct FLEXIO_tag *) 0x40324000UL)
#define FXOSC (*(volatile struct FXOSC_tag *) 0x402D4000UL)
#define CAN_0 (*(volatile struct FlexCAN_0_tag *) 0x40304000UL)
#define CAN_1 (*(volatile struct FlexCAN_1_tag *) 0x40308000UL)
#define CAN_2 (*(volatile struct FlexCAN_2_tag *) 0x4030C000UL)
#define INTM (*(volatile struct INTM_tag *) 0x4027C000UL)
#define JDC (*(volatile struct JDC_tag *) 0x40394000UL)
#define LCU_0 (*(volatile struct LCU_tag *) 0x40098000UL)
#define LCU_1 (*(volatile struct LCU_tag *) 0x4009C000UL)
#define LPCMP_0 (*(volatile struct LPCMP_tag *) 0x40370000UL)
#define LPCMP_1 (*(volatile struct LPCMP_tag *) 0x40374000UL)
#define LPCMP_2 (*(volatile struct LPCMP_tag *) 0x404E8000UL)
#define LPI2C_0 (*(volatile struct LPI2C_tag *) 0x40350000UL)
#define LPI2C_1 (*(volatile struct LPI2C_tag *) 0x40354000UL)
#define LPSPI_0 (*(volatile struct LPSPI_tag *) 0x40358000UL)
#define LPSPI_1 (*(volatile struct LPSPI_tag *) 0x4035C000UL)
#define LPSPI_2 (*(volatile struct LPSPI_tag *) 0x40360000UL)
#define LPSPI_3 (*(volatile struct LPSPI_tag *) 0x40364000UL)
#define LPSPI_4 (*(volatile struct LPSPI_tag *) 0x404BC000UL)
#define LPSPI_5 (*(volatile struct LPSPI_tag *) 0x404C0000UL)
#define LPUART_0 (*(volatile struct LPUART_tag *) 0x40328000UL)
#define LPUART_1 (*(volatile struct LPUART_tag *) 0x4032C000UL)
#define LPUART_10 (*(volatile struct LPUART_tag *) 0x40494000UL)
#define LPUART_11 (*(volatile struct LPUART_tag *) 0x40498000UL)
#define LPUART_12 (*(volatile struct LPUART_tag *) 0x4049C000UL)
#define LPUART_13 (*(volatile struct LPUART_tag *) 0x404A0000UL)
#define LPUART_14 (*(volatile struct LPUART_tag *) 0x404A4000UL)
#define LPUART_15 (*(volatile struct LPUART_tag *) 0x404A8000UL)
#define LPUART_2 (*(volatile struct LPUART_tag *) 0x40330000UL)
#define LPUART_3 (*(volatile struct LPUART_tag *) 0x40334000UL)
#define LPUART_4 (*(volatile struct LPUART_tag *) 0x40338000UL)
#define LPUART_5 (*(volatile struct LPUART_tag *) 0x4033C000UL)
#define LPUART_6 (*(volatile struct LPUART_tag *) 0x40340000UL)
#define LPUART_7 (*(volatile struct LPUART_tag *) 0x40344000UL)
#define LPUART_8 (*(volatile struct LPUART_tag *) 0x4048C000UL)
#define LPUART_9 (*(volatile struct LPUART_tag *) 0x40490000UL)
#define MCM_0_CM7 (*(volatile struct MCM_CM7_tag *) 0xE0080000UL)
#define MCM_1_CM7 (*(volatile struct MCM_CM7_tag *) 0xE0080000UL)
#define MC_CGM (*(volatile struct MC_CGM_tag *) 0x402D8000UL)
#define MC_ME (*(volatile struct MC_ME_tag *) 0x402DC000UL)
#define MC_RGM (*(volatile struct MC_RGM_tag *) 0x4028C000UL)
#define MDM_AP (*(volatile struct MDM_AP_tag *) 0x40250600UL)
#define MSCM (*(volatile struct MSCM_tag *) 0x40260000UL)
#define MU_2__MUA (*(volatile struct MU_tag *) 0x400B8000UL)
#define MU_0__MUB (*(volatile struct MU_tag *) 0x4038C000UL)
#define MU_1__MUB (*(volatile struct MU_tag *) 0x404EC000UL)
#define MU_2__MUB (*(volatile struct MU_tag *) 0x400BC000UL)
#define PFLASH (*(volatile struct PFLASH_tag *) 0x40268000UL)
#define PFLASH_ALT (*(volatile struct PFLASH_tag *) 0x4026C000UL)
#define PIT_1 (*(volatile struct PIT_tag *) 0x400B4000UL)
#define PIT_2 (*(volatile struct PIT_tag *) 0x402FC000UL)
#define PIT_0 (*(volatile struct PIT_tag *) 0x400B0000UL)
#define PLL (*(volatile struct PLL_tag *) 0x402E0000UL)
#define PMC (*(volatile struct PMC_tag *) 0x402E8000UL)
#define PRAMC_0 (*(volatile struct PRAMC_tag *) 0x40264000UL)
#define PRAMC_1 (*(volatile struct PRAMC_tag *) 0x40464000UL)
#define PERIPHERAL_DEBUG_FREEZE (*(volatile struct Peripheral_Debug_Freeze_tag *) 0x402AC000UL)
#define QUADSPI (*(volatile struct QuadSPI_tag *) 0x404CC000UL)
#define QUADSPI_ARDB (*(volatile struct QuadSPI_ARDB_tag *) 0x68000000UL)
#define RTC (*(volatile struct RTC_tag *) 0x40288000UL)
#define SAI_0 (*(volatile struct SAI_tag *) 0x4036C000UL)
#define SAI_1 (*(volatile struct SAI_tag *) 0x404DC000UL)
#define SDA_AP (*(volatile struct SDA_AP_tag *) 0x40254700UL)
#define SELFTEST_GPR (*(volatile struct SELFTEST_GPR_tag *) 0x403B0000UL)
#define SEMA42 (*(volatile struct SEMA42_tag *) 0x40460000UL)
#define SIRC (*(volatile struct SIRC_tag *) 0x402C8000UL)
#define SIUL2 (*(volatile struct SIUL2_tag *) 0x40290000UL)
#define STCU (*(volatile struct STCU_tag *) 0x403A0000UL)
#define STM_1 (*(volatile struct STM_tag *) 0x40474000UL)
#define STM_0 (*(volatile struct STM_tag *) 0x40274000UL)
#define SWT_1 (*(volatile struct SWT_tag *) 0x4046C000UL)
#define SWT_0 (*(volatile struct SWT_tag *) 0x40270000UL)
#define SXOSC (*(volatile struct SXOSC_tag *) 0x402CC000UL)
#define TCD (*(volatile struct TCD_tag *) 0x40210000UL)
#define TEMPSENSE (*(volatile struct TEMPSENSE_tag *) 0x4037C000UL)
#define TRGMUX (*(volatile struct TRGMUX_tag *) 0x40080000UL)
#define TSPC (*(volatile struct TSPC_tag *) 0x402C4000UL)
#define VIRT_WRAPPER (*(volatile struct VIRT_WRAPPER_tag *) 0x402A8000UL)
#define WKPU (*(volatile struct WKPU_tag *) 0x402B4000UL)
#define XBIC_AXBS (*(volatile struct XBIC_tag *) 0x40204000UL)
#define XBIC_AXBS_EDMA (*(volatile struct XBIC_tag *) 0x40404000UL)
#define XBIC_AXBS_PERI (*(volatile struct XBIC_tag *) 0x40208000UL)
#define XBIC_AXBS_TCM (*(volatile struct XBIC_tag *) 0x40400000UL)
#define XRDC (*(volatile struct XRDC_tag *) 0x40278000UL)
#define EDMA (*(volatile struct eDMA_tag *) 0x4020C000UL)
#define EMIOS_0 (*(volatile struct eMIOS_0_tag *) 0x40088000UL)
#define EMIOS_1 (*(volatile struct eMIOS_1_tag *) 0x4008C000UL)
#define EMIOS_2 (*(volatile struct eMIOS_2_tag *) 0x40090000UL)

/* ADC */
#define ADC_0_MCR            ADC_0.MCR.R                   /* Main Configuration */
#define ADC_0_MSR            ADC_0.MSR.R                   /* Main Status */
#define ADC_0_ISR            ADC_0.ISR.R                   /* Interrupt Status */
#define ADC_0_CEOCFR0        ADC_0.CEOCFR0.R               /* Channel End of Conversion Flag for Precision Inputs */
#define ADC_0_CEOCFR1        ADC_0.CEOCFR1.R               /* Channel End of Conversion Flag for Standard Inputs */
#define ADC_0_CEOCFR2        ADC_0.CEOCFR2.R               /* Channel End of Conversion Flag for External Inputs */
#define ADC_0_IMR            ADC_0.IMR.R                   /* Interrupt Mask */
#define ADC_0_CIMR0          ADC_0.CIMR0.R                 /* EOC Interrupt Enable for Precision Inputs */
#define ADC_0_CIMR1          ADC_0.CIMR1.R                 /* EOC Interrupt Enable for Standard Inputs */
#define ADC_0_CIMR2          ADC_0.CIMR2.R                 /* EOC Interrupt Enable for External Inputs */
#define ADC_0_WTISR          ADC_0.WTISR.R                 /* Analog Watchdog Threshold Interrupt Status */
#define ADC_0_WTIMR          ADC_0.WTIMR.R                 /* Analog Watchdog Threshold Interrupt Enable */
#define ADC_0_DMAE           ADC_0.DMAE.R                  /* Direct Memory Access Configuration */
#define ADC_0_DMAR0          ADC_0.DMAR0.R                 /* DMA Request Enable for Precision Inputs */
#define ADC_0_DMAR1          ADC_0.DMAR1.R                 /* DMA Request Enable for Standard Inputs */
#define ADC_0_DMAR2          ADC_0.DMAR2.R                 /* DMA Request Enable for External Inputs */
#define ADC_0_THRHLR0        ADC_0.THRHLR[0].R             /* Analog Watchdog Threshold Values */
#define ADC_0_THRHLR1        ADC_0.THRHLR[1].R             /* Analog Watchdog Threshold Values */
#define ADC_0_THRHLR2        ADC_0.THRHLR[2].R             /* Analog Watchdog Threshold Values */
#define ADC_0_THRHLR3        ADC_0.THRHLR[3].R             /* Analog Watchdog Threshold Values */
#define ADC_0_PSCR           ADC_0.PSCR.R                  /* Presampling Control */
#define ADC_0_PSR0           ADC_0.PSR0.R                  /* Presampling Enable for Precision Inputs */
#define ADC_0_PSR1           ADC_0.PSR1.R                  /* Presampling Enable for Standard Inputs */
#define ADC_0_PSR2           ADC_0.PSR2.R                  /* Presampling Enable for External Inputs */
#define ADC_0_CTR0           ADC_0.CTR0.R                  /* Conversion Timing for Precision Inputs */
#define ADC_0_CTR1           ADC_0.CTR1.R                  /* Conversion Timing for Standard Inputs */
#define ADC_0_CTR2           ADC_0.CTR2.R                  /* Conversion Timing for External Inputs */
#define ADC_0_NCMR0          ADC_0.NCMR0.R                 /* Normal Conversion Enable for Precision Inputs */
#define ADC_0_NCMR1          ADC_0.NCMR1.R                 /* Normal Conversion Enable for Standard Inputs */
#define ADC_0_NCMR2          ADC_0.NCMR2.R                 /* Normal Conversion Enable for External Inputs */
#define ADC_0_JCMR0          ADC_0.JCMR0.R                 /* Injected Conversion Enable for Precision Inputs */
#define ADC_0_JCMR1          ADC_0.JCMR1.R                 /* Injected Conversion Enable for Standard Inputs */
#define ADC_0_JCMR2          ADC_0.JCMR2.R                 /* Injected Conversion Enable for External Inputs */
#define ADC_0_DSDR           ADC_0.DSDR.R                  /* Delay Start of Data Conversion */
#define ADC_0_PDEDR          ADC_0.PDEDR.R                 /* Power Down Exit Delay */
#define ADC_0_PCDR0          ADC_0.PCDR[0].R               /* Precision Input n Conversion Data */
#define ADC_0_PCDR1          ADC_0.PCDR[1].R               /* Precision Input n Conversion Data */
#define ADC_0_PCDR2          ADC_0.PCDR[2].R               /* Precision Input n Conversion Data */
#define ADC_0_PCDR3          ADC_0.PCDR[3].R               /* Precision Input n Conversion Data */
#define ADC_0_PCDR4          ADC_0.PCDR[4].R               /* Precision Input n Conversion Data */
#define ADC_0_PCDR5          ADC_0.PCDR[5].R               /* Precision Input n Conversion Data */
#define ADC_0_PCDR6          ADC_0.PCDR[6].R               /* Precision Input n Conversion Data */
#define ADC_0_PCDR7          ADC_0.PCDR[7].R               /* Precision Input n Conversion Data */
#define ADC_0_PCDR8          ADC_0.PCDR[8].R               /* Precision Input n Conversion Data */
#define ADC_0_PCDR9          ADC_0.PCDR[9].R               /* Precision Input n Conversion Data */
#define ADC_0_ICDR0          ADC_0.ICDR[0].R               /* Standard Input n Conversion Data */
#define ADC_0_ICDR1          ADC_0.ICDR[1].R               /* Standard Input n Conversion Data */
#define ADC_0_ICDR2          ADC_0.ICDR[2].R               /* Standard Input n Conversion Data */
#define ADC_0_ICDR3          ADC_0.ICDR[3].R               /* Standard Input n Conversion Data */
#define ADC_0_ICDR4          ADC_0.ICDR[4].R               /* Standard Input n Conversion Data */
#define ADC_0_ICDR5          ADC_0.ICDR[5].R               /* Standard Input n Conversion Data */
#define ADC_0_ICDR6          ADC_0.ICDR[6].R               /* Standard Input n Conversion Data */
#define ADC_0_ICDR7          ADC_0.ICDR[7].R               /* Standard Input n Conversion Data */
#define ADC_0_ICDR8          ADC_0.ICDR[8].R               /* Standard Input n Conversion Data */
#define ADC_0_ICDR9          ADC_0.ICDR[9].R               /* Standard Input n Conversion Data */
#define ADC_0_ICDR10         ADC_0.ICDR[10].R              /* Standard Input n Conversion Data */
#define ADC_0_ICDR11         ADC_0.ICDR[11].R              /* Standard Input n Conversion Data */
#define ADC_0_ICDR12         ADC_0.ICDR[12].R              /* Standard Input n Conversion Data */
#define ADC_0_ICDR13         ADC_0.ICDR[13].R              /* Standard Input n Conversion Data */
#define ADC_0_ICDR14         ADC_0.ICDR[14].R              /* Standard Input n Conversion Data */
#define ADC_0_ICDR15         ADC_0.ICDR[15].R              /* Standard Input n Conversion Data */
#define ADC_0_ICDR16         ADC_0.ICDR[16].R              /* Standard Input n Conversion Data */
#define ADC_0_ICDR17         ADC_0.ICDR[17].R              /* Standard Input n Conversion Data */
#define ADC_0_ICDR18         ADC_0.ICDR[18].R              /* Standard Input n Conversion Data */
#define ADC_0_ICDR19         ADC_0.ICDR[19].R              /* Standard Input n Conversion Data */
#define ADC_0_ICDR20         ADC_0.ICDR[20].R              /* Standard Input n Conversion Data */
#define ADC_0_ICDR21         ADC_0.ICDR[21].R              /* Standard Input n Conversion Data */
#define ADC_0_ICDR22         ADC_0.ICDR[22].R              /* Standard Input n Conversion Data */
#define ADC_0_ICDR23         ADC_0.ICDR[23].R              /* Standard Input n Conversion Data */
#define ADC_0_ECDR0          ADC_0.ECDR[0].R               /* External Input n Conversion Data */
#define ADC_0_ECDR1          ADC_0.ECDR[1].R               /* External Input n Conversion Data */
#define ADC_0_ECDR2          ADC_0.ECDR[2].R               /* External Input n Conversion Data */
#define ADC_0_ECDR3          ADC_0.ECDR[3].R               /* External Input n Conversion Data */
#define ADC_0_ECDR4          ADC_0.ECDR[4].R               /* External Input n Conversion Data */
#define ADC_0_ECDR5          ADC_0.ECDR[5].R               /* External Input n Conversion Data */
#define ADC_0_ECDR6          ADC_0.ECDR[6].R               /* External Input n Conversion Data */
#define ADC_0_ECDR7          ADC_0.ECDR[7].R               /* External Input n Conversion Data */
#define ADC_0_ECDR8          ADC_0.ECDR[8].R               /* External Input n Conversion Data */
#define ADC_0_ECDR9          ADC_0.ECDR[9].R               /* External Input n Conversion Data */
#define ADC_0_ECDR10         ADC_0.ECDR[10].R              /* External Input n Conversion Data */
#define ADC_0_ECDR11         ADC_0.ECDR[11].R              /* External Input n Conversion Data */
#define ADC_0_ECDR12         ADC_0.ECDR[12].R              /* External Input n Conversion Data */
#define ADC_0_ECDR13         ADC_0.ECDR[13].R              /* External Input n Conversion Data */
#define ADC_0_ECDR14         ADC_0.ECDR[14].R              /* External Input n Conversion Data */
#define ADC_0_ECDR15         ADC_0.ECDR[15].R              /* External Input n Conversion Data */
#define ADC_0_ECDR16         ADC_0.ECDR[16].R              /* External Input n Conversion Data */
#define ADC_0_ECDR17         ADC_0.ECDR[17].R              /* External Input n Conversion Data */
#define ADC_0_ECDR18         ADC_0.ECDR[18].R              /* External Input n Conversion Data */
#define ADC_0_ECDR19         ADC_0.ECDR[19].R              /* External Input n Conversion Data */
#define ADC_0_ECDR20         ADC_0.ECDR[20].R              /* External Input n Conversion Data */
#define ADC_0_ECDR21         ADC_0.ECDR[21].R              /* External Input n Conversion Data */
#define ADC_0_ECDR22         ADC_0.ECDR[22].R              /* External Input n Conversion Data */
#define ADC_0_ECDR23         ADC_0.ECDR[23].R              /* External Input n Conversion Data */
#define ADC_0_ECDR24         ADC_0.ECDR[24].R              /* External Input n Conversion Data */
#define ADC_0_ECDR25         ADC_0.ECDR[25].R              /* External Input n Conversion Data */
#define ADC_0_ECDR26         ADC_0.ECDR[26].R              /* External Input n Conversion Data */
#define ADC_0_ECDR27         ADC_0.ECDR[27].R              /* External Input n Conversion Data */
#define ADC_0_ECDR28         ADC_0.ECDR[28].R              /* External Input n Conversion Data */
#define ADC_0_ECDR29         ADC_0.ECDR[29].R              /* External Input n Conversion Data */
#define ADC_0_ECDR30         ADC_0.ECDR[30].R              /* External Input n Conversion Data */
#define ADC_0_ECDR31         ADC_0.ECDR[31].R              /* External Input n Conversion Data */
#define ADC_0_CWSELRPI0      ADC_0.CWSELRPI[0].R           /* Channel Analog Watchdog Select for Precision Inputs */
#define ADC_0_CWSELRPI1      ADC_0.CWSELRPI[1].R           /* Channel Analog Watchdog Select for Precision Inputs */
#define ADC_0_CWSELRSI0      ADC_0.CWSELRSI[0].R           /* Channel Analog Watchdog Select for Standard Inputs */
#define ADC_0_CWSELRSI1      ADC_0.CWSELRSI[1].R           /* Channel Analog Watchdog Select for Standard Inputs */
#define ADC_0_CWSELRSI2      ADC_0.CWSELRSI[2].R           /* Channel Analog Watchdog Select for Standard Inputs */
#define ADC_0_CWSELREI0      ADC_0.CWSELREI[0].R           /* Channel Analog Watchdog Select for Standard Inputs */
#define ADC_0_CWSELREI1      ADC_0.CWSELREI[1].R           /* Channel Analog Watchdog Select for Standard Inputs */
#define ADC_0_CWSELREI2      ADC_0.CWSELREI[2].R           /* Channel Analog Watchdog Select for Standard Inputs */
#define ADC_0_CWSELREI3      ADC_0.CWSELREI[3].R           /* Channel Analog Watchdog Select for Standard Inputs */
#define ADC_0_CWENR0         ADC_0.CWENR0.R                /* Channel Watchdog Enable for Precision Inputs */
#define ADC_0_CWENR1         ADC_0.CWENR1.R                /* Channel Watchdog Enable for Standard Inputs */
#define ADC_0_CWENR2         ADC_0.CWENR2.R                /* Channel Watchdog Enable for External Inputs */
#define ADC_0_AWORR0         ADC_0.AWORR0.R                /* Analog Watchdog Out of Range for Precision Inputs */
#define ADC_0_AWORR1         ADC_0.AWORR1.R                /* Analog Watchdog Out of Range for Standard Inputs */
#define ADC_0_AWORR2         ADC_0.AWORR2.R                /* Analog Watchdog Out of Range for External Inputs */
#define ADC_0_STCR1          ADC_0.STCR1.R                 /* Self-Test Configuration 1 */
#define ADC_0_STCR2          ADC_0.STCR2.R                 /* Self-Test Configuration 2 */
#define ADC_0_STCR3          ADC_0.STCR3.R                 /* Self-Test Configuration 3 */
#define ADC_0_STBRR          ADC_0.STBRR.R                 /* Self-Test Baud Rate */
#define ADC_0_STSR1          ADC_0.STSR1.R                 /* Self-Test Status 1 */
#define ADC_0_STSR2          ADC_0.STSR2.R                 /* Self-Test Status 2 */
#define ADC_0_STSR3          ADC_0.STSR3.R                 /* Self-Test Status 3 */
#define ADC_0_STSR4          ADC_0.STSR4.R                 /* Self-Test Status 4 */
#define ADC_0_STDR1          ADC_0.STDR1.R                 /* Self-Test Conversion Data 1 */
#define ADC_0_STAW0R         ADC_0.STAW0R.R                /* Self-Test Analog Watchdog S0 */
#define ADC_0_STAW1R         ADC_0.STAW1R.R                /* Self Test Analog Watchdog S1 */
#define ADC_0_STAW2R         ADC_0.STAW2R.R                /* Self-Test Analog Watchdog S2 */
#define ADC_0_STAW4R         ADC_0.STAW4R.R                /* Self-Test Analog Watchdog C0 */
#define ADC_0_STAW5R         ADC_0.STAW5R.R                /* Self-Test Analog Watchdog C */
#define ADC_0_CALBISTREG     ADC_0.CALBISTREG.R            /* Control and Calibration Status */
#define ADC_0_OFSGNUSR       ADC_0.OFSGNUSR.R              /* Offset and Gain User */

#define ADC_1_MCR            ADC_1.MCR.R                   /* Main Configuration */
#define ADC_1_MSR            ADC_1.MSR.R                   /* Main Status */
#define ADC_1_ISR            ADC_1.ISR.R                   /* Interrupt Status */
#define ADC_1_CEOCFR0        ADC_1.CEOCFR0.R               /* Channel End of Conversion Flag for Precision Inputs */
#define ADC_1_CEOCFR1        ADC_1.CEOCFR1.R               /* Channel End of Conversion Flag for Standard Inputs */
#define ADC_1_CEOCFR2        ADC_1.CEOCFR2.R               /* Channel End of Conversion Flag for External Inputs */
#define ADC_1_IMR            ADC_1.IMR.R                   /* Interrupt Mask */
#define ADC_1_CIMR0          ADC_1.CIMR0.R                 /* EOC Interrupt Enable for Precision Inputs */
#define ADC_1_CIMR1          ADC_1.CIMR1.R                 /* EOC Interrupt Enable for Standard Inputs */
#define ADC_1_CIMR2          ADC_1.CIMR2.R                 /* EOC Interrupt Enable for External Inputs */
#define ADC_1_WTISR          ADC_1.WTISR.R                 /* Analog Watchdog Threshold Interrupt Status */
#define ADC_1_WTIMR          ADC_1.WTIMR.R                 /* Analog Watchdog Threshold Interrupt Enable */
#define ADC_1_DMAE           ADC_1.DMAE.R                  /* Direct Memory Access Configuration */
#define ADC_1_DMAR0          ADC_1.DMAR0.R                 /* DMA Request Enable for Precision Inputs */
#define ADC_1_DMAR1          ADC_1.DMAR1.R                 /* DMA Request Enable for Standard Inputs */
#define ADC_1_DMAR2          ADC_1.DMAR2.R                 /* DMA Request Enable for External Inputs */
#define ADC_1_THRHLR0        ADC_1.THRHLR[0].R             /* Analog Watchdog Threshold Values */
#define ADC_1_THRHLR1        ADC_1.THRHLR[1].R             /* Analog Watchdog Threshold Values */
#define ADC_1_THRHLR2        ADC_1.THRHLR[2].R             /* Analog Watchdog Threshold Values */
#define ADC_1_THRHLR3        ADC_1.THRHLR[3].R             /* Analog Watchdog Threshold Values */
#define ADC_1_PSCR           ADC_1.PSCR.R                  /* Presampling Control */
#define ADC_1_PSR0           ADC_1.PSR0.R                  /* Presampling Enable for Precision Inputs */
#define ADC_1_PSR1           ADC_1.PSR1.R                  /* Presampling Enable for Standard Inputs */
#define ADC_1_PSR2           ADC_1.PSR2.R                  /* Presampling Enable for External Inputs */
#define ADC_1_CTR0           ADC_1.CTR0.R                  /* Conversion Timing for Precision Inputs */
#define ADC_1_CTR1           ADC_1.CTR1.R                  /* Conversion Timing for Standard Inputs */
#define ADC_1_CTR2           ADC_1.CTR2.R                  /* Conversion Timing for External Inputs */
#define ADC_1_NCMR0          ADC_1.NCMR0.R                 /* Normal Conversion Enable for Precision Inputs */
#define ADC_1_NCMR1          ADC_1.NCMR1.R                 /* Normal Conversion Enable for Standard Inputs */
#define ADC_1_NCMR2          ADC_1.NCMR2.R                 /* Normal Conversion Enable for External Inputs */
#define ADC_1_JCMR0          ADC_1.JCMR0.R                 /* Injected Conversion Enable for Precision Inputs */
#define ADC_1_JCMR1          ADC_1.JCMR1.R                 /* Injected Conversion Enable for Standard Inputs */
#define ADC_1_JCMR2          ADC_1.JCMR2.R                 /* Injected Conversion Enable for External Inputs */
#define ADC_1_DSDR           ADC_1.DSDR.R                  /* Delay Start of Data Conversion */
#define ADC_1_PDEDR          ADC_1.PDEDR.R                 /* Power Down Exit Delay */
#define ADC_1_PCDR0          ADC_1.PCDR[0].R               /* Precision Input n Conversion Data */
#define ADC_1_PCDR1          ADC_1.PCDR[1].R               /* Precision Input n Conversion Data */
#define ADC_1_PCDR2          ADC_1.PCDR[2].R               /* Precision Input n Conversion Data */
#define ADC_1_PCDR3          ADC_1.PCDR[3].R               /* Precision Input n Conversion Data */
#define ADC_1_PCDR4          ADC_1.PCDR[4].R               /* Precision Input n Conversion Data */
#define ADC_1_PCDR5          ADC_1.PCDR[5].R               /* Precision Input n Conversion Data */
#define ADC_1_PCDR6          ADC_1.PCDR[6].R               /* Precision Input n Conversion Data */
#define ADC_1_PCDR7          ADC_1.PCDR[7].R               /* Precision Input n Conversion Data */
#define ADC_1_PCDR8          ADC_1.PCDR[8].R               /* Precision Input n Conversion Data */
#define ADC_1_PCDR9          ADC_1.PCDR[9].R               /* Precision Input n Conversion Data */
#define ADC_1_ICDR0          ADC_1.ICDR[0].R               /* Standard Input n Conversion Data */
#define ADC_1_ICDR1          ADC_1.ICDR[1].R               /* Standard Input n Conversion Data */
#define ADC_1_ICDR2          ADC_1.ICDR[2].R               /* Standard Input n Conversion Data */
#define ADC_1_ICDR3          ADC_1.ICDR[3].R               /* Standard Input n Conversion Data */
#define ADC_1_ICDR4          ADC_1.ICDR[4].R               /* Standard Input n Conversion Data */
#define ADC_1_ICDR5          ADC_1.ICDR[5].R               /* Standard Input n Conversion Data */
#define ADC_1_ICDR6          ADC_1.ICDR[6].R               /* Standard Input n Conversion Data */
#define ADC_1_ICDR7          ADC_1.ICDR[7].R               /* Standard Input n Conversion Data */
#define ADC_1_ICDR8          ADC_1.ICDR[8].R               /* Standard Input n Conversion Data */
#define ADC_1_ICDR9          ADC_1.ICDR[9].R               /* Standard Input n Conversion Data */
#define ADC_1_ICDR10         ADC_1.ICDR[10].R              /* Standard Input n Conversion Data */
#define ADC_1_ICDR11         ADC_1.ICDR[11].R              /* Standard Input n Conversion Data */
#define ADC_1_ICDR12         ADC_1.ICDR[12].R              /* Standard Input n Conversion Data */
#define ADC_1_ICDR13         ADC_1.ICDR[13].R              /* Standard Input n Conversion Data */
#define ADC_1_ICDR14         ADC_1.ICDR[14].R              /* Standard Input n Conversion Data */
#define ADC_1_ICDR15         ADC_1.ICDR[15].R              /* Standard Input n Conversion Data */
#define ADC_1_ICDR16         ADC_1.ICDR[16].R              /* Standard Input n Conversion Data */
#define ADC_1_ICDR17         ADC_1.ICDR[17].R              /* Standard Input n Conversion Data */
#define ADC_1_ICDR18         ADC_1.ICDR[18].R              /* Standard Input n Conversion Data */
#define ADC_1_ICDR19         ADC_1.ICDR[19].R              /* Standard Input n Conversion Data */
#define ADC_1_ICDR20         ADC_1.ICDR[20].R              /* Standard Input n Conversion Data */
#define ADC_1_ICDR21         ADC_1.ICDR[21].R              /* Standard Input n Conversion Data */
#define ADC_1_ICDR22         ADC_1.ICDR[22].R              /* Standard Input n Conversion Data */
#define ADC_1_ICDR23         ADC_1.ICDR[23].R              /* Standard Input n Conversion Data */
#define ADC_1_ECDR0          ADC_1.ECDR[0].R               /* External Input n Conversion Data */
#define ADC_1_ECDR1          ADC_1.ECDR[1].R               /* External Input n Conversion Data */
#define ADC_1_ECDR2          ADC_1.ECDR[2].R               /* External Input n Conversion Data */
#define ADC_1_ECDR3          ADC_1.ECDR[3].R               /* External Input n Conversion Data */
#define ADC_1_ECDR4          ADC_1.ECDR[4].R               /* External Input n Conversion Data */
#define ADC_1_ECDR5          ADC_1.ECDR[5].R               /* External Input n Conversion Data */
#define ADC_1_ECDR6          ADC_1.ECDR[6].R               /* External Input n Conversion Data */
#define ADC_1_ECDR7          ADC_1.ECDR[7].R               /* External Input n Conversion Data */
#define ADC_1_ECDR8          ADC_1.ECDR[8].R               /* External Input n Conversion Data */
#define ADC_1_ECDR9          ADC_1.ECDR[9].R               /* External Input n Conversion Data */
#define ADC_1_ECDR10         ADC_1.ECDR[10].R              /* External Input n Conversion Data */
#define ADC_1_ECDR11         ADC_1.ECDR[11].R              /* External Input n Conversion Data */
#define ADC_1_ECDR12         ADC_1.ECDR[12].R              /* External Input n Conversion Data */
#define ADC_1_ECDR13         ADC_1.ECDR[13].R              /* External Input n Conversion Data */
#define ADC_1_ECDR14         ADC_1.ECDR[14].R              /* External Input n Conversion Data */
#define ADC_1_ECDR15         ADC_1.ECDR[15].R              /* External Input n Conversion Data */
#define ADC_1_ECDR16         ADC_1.ECDR[16].R              /* External Input n Conversion Data */
#define ADC_1_ECDR17         ADC_1.ECDR[17].R              /* External Input n Conversion Data */
#define ADC_1_ECDR18         ADC_1.ECDR[18].R              /* External Input n Conversion Data */
#define ADC_1_ECDR19         ADC_1.ECDR[19].R              /* External Input n Conversion Data */
#define ADC_1_ECDR20         ADC_1.ECDR[20].R              /* External Input n Conversion Data */
#define ADC_1_ECDR21         ADC_1.ECDR[21].R              /* External Input n Conversion Data */
#define ADC_1_ECDR22         ADC_1.ECDR[22].R              /* External Input n Conversion Data */
#define ADC_1_ECDR23         ADC_1.ECDR[23].R              /* External Input n Conversion Data */
#define ADC_1_ECDR24         ADC_1.ECDR[24].R              /* External Input n Conversion Data */
#define ADC_1_ECDR25         ADC_1.ECDR[25].R              /* External Input n Conversion Data */
#define ADC_1_ECDR26         ADC_1.ECDR[26].R              /* External Input n Conversion Data */
#define ADC_1_ECDR27         ADC_1.ECDR[27].R              /* External Input n Conversion Data */
#define ADC_1_ECDR28         ADC_1.ECDR[28].R              /* External Input n Conversion Data */
#define ADC_1_ECDR29         ADC_1.ECDR[29].R              /* External Input n Conversion Data */
#define ADC_1_ECDR30         ADC_1.ECDR[30].R              /* External Input n Conversion Data */
#define ADC_1_ECDR31         ADC_1.ECDR[31].R              /* External Input n Conversion Data */
#define ADC_1_CWSELRPI0      ADC_1.CWSELRPI[0].R           /* Channel Analog Watchdog Select for Precision Inputs */
#define ADC_1_CWSELRPI1      ADC_1.CWSELRPI[1].R           /* Channel Analog Watchdog Select for Precision Inputs */
#define ADC_1_CWSELRSI0      ADC_1.CWSELRSI[0].R           /* Channel Analog Watchdog Select for Standard Inputs */
#define ADC_1_CWSELRSI1      ADC_1.CWSELRSI[1].R           /* Channel Analog Watchdog Select for Standard Inputs */
#define ADC_1_CWSELRSI2      ADC_1.CWSELRSI[2].R           /* Channel Analog Watchdog Select for Standard Inputs */
#define ADC_1_CWSELREI0      ADC_1.CWSELREI[0].R           /* Channel Analog Watchdog Select for Standard Inputs */
#define ADC_1_CWSELREI1      ADC_1.CWSELREI[1].R           /* Channel Analog Watchdog Select for Standard Inputs */
#define ADC_1_CWSELREI2      ADC_1.CWSELREI[2].R           /* Channel Analog Watchdog Select for Standard Inputs */
#define ADC_1_CWSELREI3      ADC_1.CWSELREI[3].R           /* Channel Analog Watchdog Select for Standard Inputs */
#define ADC_1_CWENR0         ADC_1.CWENR0.R                /* Channel Watchdog Enable for Precision Inputs */
#define ADC_1_CWENR1         ADC_1.CWENR1.R                /* Channel Watchdog Enable for Standard Inputs */
#define ADC_1_CWENR2         ADC_1.CWENR2.R                /* Channel Watchdog Enable for External Inputs */
#define ADC_1_AWORR0         ADC_1.AWORR0.R                /* Analog Watchdog Out of Range for Precision Inputs */
#define ADC_1_AWORR1         ADC_1.AWORR1.R                /* Analog Watchdog Out of Range for Standard Inputs */
#define ADC_1_AWORR2         ADC_1.AWORR2.R                /* Analog Watchdog Out of Range for External Inputs */
#define ADC_1_STCR1          ADC_1.STCR1.R                 /* Self-Test Configuration 1 */
#define ADC_1_STCR2          ADC_1.STCR2.R                 /* Self-Test Configuration 2 */
#define ADC_1_STCR3          ADC_1.STCR3.R                 /* Self-Test Configuration 3 */
#define ADC_1_STBRR          ADC_1.STBRR.R                 /* Self-Test Baud Rate */
#define ADC_1_STSR1          ADC_1.STSR1.R                 /* Self-Test Status 1 */
#define ADC_1_STSR2          ADC_1.STSR2.R                 /* Self-Test Status 2 */
#define ADC_1_STSR3          ADC_1.STSR3.R                 /* Self-Test Status 3 */
#define ADC_1_STSR4          ADC_1.STSR4.R                 /* Self-Test Status 4 */
#define ADC_1_STDR1          ADC_1.STDR1.R                 /* Self-Test Conversion Data 1 */
#define ADC_1_STAW0R         ADC_1.STAW0R.R                /* Self-Test Analog Watchdog S0 */
#define ADC_1_STAW1R         ADC_1.STAW1R.R                /* Self Test Analog Watchdog S1 */
#define ADC_1_STAW2R         ADC_1.STAW2R.R                /* Self-Test Analog Watchdog S2 */
#define ADC_1_STAW4R         ADC_1.STAW4R.R                /* Self-Test Analog Watchdog C0 */
#define ADC_1_STAW5R         ADC_1.STAW5R.R                /* Self-Test Analog Watchdog C */
#define ADC_1_CALBISTREG     ADC_1.CALBISTREG.R            /* Control and Calibration Status */
#define ADC_1_OFSGNUSR       ADC_1.OFSGNUSR.R              /* Offset and Gain User */

#define ADC_2_MCR            ADC_2.MCR.R                   /* Main Configuration */
#define ADC_2_MSR            ADC_2.MSR.R                   /* Main Status */
#define ADC_2_ISR            ADC_2.ISR.R                   /* Interrupt Status */
#define ADC_2_CEOCFR0        ADC_2.CEOCFR0.R               /* Channel End of Conversion Flag for Precision Inputs */
#define ADC_2_CEOCFR1        ADC_2.CEOCFR1.R               /* Channel End of Conversion Flag for Standard Inputs */
#define ADC_2_IMR            ADC_2.IMR.R                   /* Interrupt Mask */
#define ADC_2_CIMR0          ADC_2.CIMR0.R                 /* EOC Interrupt Enable for Precision Inputs */
#define ADC_2_CIMR1          ADC_2.CIMR1.R                 /* EOC Interrupt Enable for Standard Inputs */
#define ADC_2_WTISR          ADC_2.WTISR.R                 /* Analog Watchdog Threshold Interrupt Status */
#define ADC_2_WTIMR          ADC_2.WTIMR.R                 /* Analog Watchdog Threshold Interrupt Enable */
#define ADC_2_DMAE           ADC_2.DMAE.R                  /* Direct Memory Access Configuration */
#define ADC_2_DMAR0          ADC_2.DMAR0.R                 /* DMA Request Enable for Precision Inputs */
#define ADC_2_DMAR1          ADC_2.DMAR1.R                 /* DMA Request Enable for Standard Inputs */
#define ADC_2_THRHLR0        ADC_2.THRHLR[0].R             /* Analog Watchdog Threshold Values */
#define ADC_2_THRHLR1        ADC_2.THRHLR[1].R             /* Analog Watchdog Threshold Values */
#define ADC_2_THRHLR2        ADC_2.THRHLR[2].R             /* Analog Watchdog Threshold Values */
#define ADC_2_THRHLR3        ADC_2.THRHLR[3].R             /* Analog Watchdog Threshold Values */
#define ADC_2_PSCR           ADC_2.PSCR.R                  /* Presampling Control */
#define ADC_2_PSR0           ADC_2.PSR0.R                  /* Presampling Enable for Precision Inputs */
#define ADC_2_PSR1           ADC_2.PSR1.R                  /* Presampling Enable for Standard Inputs */
#define ADC_2_CTR0           ADC_2.CTR0.R                  /* Conversion Timing for Precision Inputs */
#define ADC_2_CTR1           ADC_2.CTR1.R                  /* Conversion Timing for Standard Inputs */
#define ADC_2_NCMR0          ADC_2.NCMR0.R                 /* Normal Conversion Enable for Precision Inputs */
#define ADC_2_NCMR1          ADC_2.NCMR1.R                 /* Normal Conversion Enable for Standard Inputs */
#define ADC_2_JCMR0          ADC_2.JCMR0.R                 /* Injected Conversion Enable for Precision Inputs */
#define ADC_2_JCMR1          ADC_2.JCMR1.R                 /* Injected Conversion Enable for Standard Inputs */
#define ADC_2_PDEDR          ADC_2.PDEDR.R                 /* Power Down Exit Delay */
#define ADC_2_PCDR0          ADC_2.PCDR[0].R               /* Precision Input n Conversion Data */
#define ADC_2_PCDR1          ADC_2.PCDR[1].R               /* Precision Input n Conversion Data */
#define ADC_2_PCDR2          ADC_2.PCDR[2].R               /* Precision Input n Conversion Data */
#define ADC_2_PCDR3          ADC_2.PCDR[3].R               /* Precision Input n Conversion Data */
#define ADC_2_PCDR4          ADC_2.PCDR[4].R               /* Precision Input n Conversion Data */
#define ADC_2_PCDR5          ADC_2.PCDR[5].R               /* Precision Input n Conversion Data */
#define ADC_2_PCDR6          ADC_2.PCDR[6].R               /* Precision Input n Conversion Data */
#define ADC_2_PCDR7          ADC_2.PCDR[7].R               /* Precision Input n Conversion Data */
#define ADC_2_PCDR8          ADC_2.PCDR[8].R               /* Precision Input n Conversion Data */
#define ADC_2_PCDR9          ADC_2.PCDR[9].R               /* Precision Input n Conversion Data */
#define ADC_2_ICDR0          ADC_2.ICDR[0].R               /* Standard Input n Conversion Data */
#define ADC_2_ICDR1          ADC_2.ICDR[1].R               /* Standard Input n Conversion Data */
#define ADC_2_ICDR2          ADC_2.ICDR[2].R               /* Standard Input n Conversion Data */
#define ADC_2_ICDR3          ADC_2.ICDR[3].R               /* Standard Input n Conversion Data */
#define ADC_2_ICDR4          ADC_2.ICDR[4].R               /* Standard Input n Conversion Data */
#define ADC_2_ICDR5          ADC_2.ICDR[5].R               /* Standard Input n Conversion Data */
#define ADC_2_ICDR6          ADC_2.ICDR[6].R               /* Standard Input n Conversion Data */
#define ADC_2_ICDR7          ADC_2.ICDR[7].R               /* Standard Input n Conversion Data */
#define ADC_2_ICDR8          ADC_2.ICDR[8].R               /* Standard Input n Conversion Data */
#define ADC_2_ICDR9          ADC_2.ICDR[9].R               /* Standard Input n Conversion Data */
#define ADC_2_ICDR10         ADC_2.ICDR[10].R              /* Standard Input n Conversion Data */
#define ADC_2_ICDR11         ADC_2.ICDR[11].R              /* Standard Input n Conversion Data */
#define ADC_2_ICDR12         ADC_2.ICDR[12].R              /* Standard Input n Conversion Data */
#define ADC_2_ICDR13         ADC_2.ICDR[13].R              /* Standard Input n Conversion Data */
#define ADC_2_ICDR14         ADC_2.ICDR[14].R              /* Standard Input n Conversion Data */
#define ADC_2_ICDR15         ADC_2.ICDR[15].R              /* Standard Input n Conversion Data */
#define ADC_2_ICDR16         ADC_2.ICDR[16].R              /* Standard Input n Conversion Data */
#define ADC_2_ICDR17         ADC_2.ICDR[17].R              /* Standard Input n Conversion Data */
#define ADC_2_ICDR18         ADC_2.ICDR[18].R              /* Standard Input n Conversion Data */
#define ADC_2_ICDR19         ADC_2.ICDR[19].R              /* Standard Input n Conversion Data */
#define ADC_2_ICDR20         ADC_2.ICDR[20].R              /* Standard Input n Conversion Data */
#define ADC_2_ICDR21         ADC_2.ICDR[21].R              /* Standard Input n Conversion Data */
#define ADC_2_ICDR22         ADC_2.ICDR[22].R              /* Standard Input n Conversion Data */
#define ADC_2_ICDR23         ADC_2.ICDR[23].R              /* Standard Input n Conversion Data */
#define ADC_2_CWSELRPI0      ADC_2.CWSELRPI[0].R           /* Channel Analog Watchdog Select for Precision Inputs */
#define ADC_2_CWSELRPI1      ADC_2.CWSELRPI[1].R           /* Channel Analog Watchdog Select for Precision Inputs */
#define ADC_2_CWSELRSI0      ADC_2.CWSELRSI[0].R           /* Channel Analog Watchdog Select for Standard Inputs */
#define ADC_2_CWSELRSI1      ADC_2.CWSELRSI[1].R           /* Channel Analog Watchdog Select for Standard Inputs */
#define ADC_2_CWSELRSI2      ADC_2.CWSELRSI[2].R           /* Channel Analog Watchdog Select for Standard Inputs */
#define ADC_2_CWENR0         ADC_2.CWENR0.R                /* Channel Watchdog Enable for Precision Inputs */
#define ADC_2_CWENR1         ADC_2.CWENR1.R                /* Channel Watchdog Enable for Standard Inputs */
#define ADC_2_AWORR0         ADC_2.AWORR0.R                /* Analog Watchdog Out of Range for Precision Inputs */
#define ADC_2_AWORR1         ADC_2.AWORR1.R                /* Analog Watchdog Out of Range for Standard Inputs */
#define ADC_2_STCR1          ADC_2.STCR1.R                 /* Self-Test Configuration 1 */
#define ADC_2_STCR2          ADC_2.STCR2.R                 /* Self-Test Configuration 2 */
#define ADC_2_STCR3          ADC_2.STCR3.R                 /* Self-Test Configuration 3 */
#define ADC_2_STBRR          ADC_2.STBRR.R                 /* Self-Test Baud Rate */
#define ADC_2_STSR1          ADC_2.STSR1.R                 /* Self-Test Status 1 */
#define ADC_2_STSR2          ADC_2.STSR2.R                 /* Self-Test Status 2 */
#define ADC_2_STSR3          ADC_2.STSR3.R                 /* Self-Test Status 3 */
#define ADC_2_STSR4          ADC_2.STSR4.R                 /* Self-Test Status 4 */
#define ADC_2_STDR1          ADC_2.STDR1.R                 /* Self-Test Conversion Data 1 */
#define ADC_2_STAW0R         ADC_2.STAW0R.R                /* Self-Test Analog Watchdog S0 */
#define ADC_2_STAW1R         ADC_2.STAW1R.R                /* Self Test Analog Watchdog S1 */
#define ADC_2_STAW2R         ADC_2.STAW2R.R                /* Self-Test Analog Watchdog S2 */
#define ADC_2_STAW4R         ADC_2.STAW4R.R                /* Self-Test Analog Watchdog C0 */
#define ADC_2_STAW5R         ADC_2.STAW5R.R                /* Self-Test Analog Watchdog C */
#define ADC_2_CALBISTREG     ADC_2.CALBISTREG.R            /* Control and Calibration Status */
#define ADC_2_OFSGNUSR       ADC_2.OFSGNUSR.R              /* Offset and Gain User */

/* AXBS_LITE */
#define AXBS_LITE_PRS0       AXBS_LITE.PRS0.R              /* Priority Slave Registers */
#define AXBS_LITE_CRS0       AXBS_LITE.CRS0.R              /* Control Register */
#define AXBS_LITE_PRS1       AXBS_LITE.PRS1.R              /* Priority Slave Registers */
#define AXBS_LITE_CRS1       AXBS_LITE.CRS1.R              /* Control Register */
#define AXBS_LITE_PRS2       AXBS_LITE.PRS2.R              /* Priority Slave Registers */
#define AXBS_LITE_CRS2       AXBS_LITE.CRS2.R              /* Control Register */
#define AXBS_LITE_PRS3       AXBS_LITE.PRS3.R              /* Priority Slave Registers */
#define AXBS_LITE_CRS3       AXBS_LITE.CRS3.R              /* Control Register */
#define AXBS_LITE_PRS4       AXBS_LITE.PRS4.R              /* Priority Slave Registers */
#define AXBS_LITE_CRS4       AXBS_LITE.CRS4.R              /* Control Register */
#define AXBS_LITE_PRS5       AXBS_LITE.PRS5.R              /* Priority Slave Registers */
#define AXBS_LITE_CRS5       AXBS_LITE.CRS5.R              /* Control Register */
#define AXBS_LITE_PRS6       AXBS_LITE.PRS6.R              /* Priority Slave Registers */
#define AXBS_LITE_CRS6       AXBS_LITE.CRS6.R              /* Control Register */

/* BCTU */
#define BCTU_MCR             BCTU.MCR.R                    /* Module Configuration */
#define BCTU_MSR             BCTU.MSR.R                    /* Module Status */
#define BCTU_TRGCFG_0        BCTU.TRGCFG[0].R              /* Trigger Configuration */
#define BCTU_TRGCFG_1        BCTU.TRGCFG[1].R              /* Trigger Configuration */
#define BCTU_TRGCFG_2        BCTU.TRGCFG[2].R              /* Trigger Configuration */
#define BCTU_TRGCFG_3        BCTU.TRGCFG[3].R              /* Trigger Configuration */
#define BCTU_TRGCFG_4        BCTU.TRGCFG[4].R              /* Trigger Configuration */
#define BCTU_TRGCFG_5        BCTU.TRGCFG[5].R              /* Trigger Configuration */
#define BCTU_TRGCFG_6        BCTU.TRGCFG[6].R              /* Trigger Configuration */
#define BCTU_TRGCFG_7        BCTU.TRGCFG[7].R              /* Trigger Configuration */
#define BCTU_TRGCFG_8        BCTU.TRGCFG[8].R              /* Trigger Configuration */
#define BCTU_TRGCFG_9        BCTU.TRGCFG[9].R              /* Trigger Configuration */
#define BCTU_TRGCFG_10       BCTU.TRGCFG[10].R             /* Trigger Configuration */
#define BCTU_TRGCFG_11       BCTU.TRGCFG[11].R             /* Trigger Configuration */
#define BCTU_TRGCFG_12       BCTU.TRGCFG[12].R             /* Trigger Configuration */
#define BCTU_TRGCFG_13       BCTU.TRGCFG[13].R             /* Trigger Configuration */
#define BCTU_TRGCFG_14       BCTU.TRGCFG[14].R             /* Trigger Configuration */
#define BCTU_TRGCFG_15       BCTU.TRGCFG[15].R             /* Trigger Configuration */
#define BCTU_TRGCFG_16       BCTU.TRGCFG[16].R             /* Trigger Configuration */
#define BCTU_TRGCFG_17       BCTU.TRGCFG[17].R             /* Trigger Configuration */
#define BCTU_TRGCFG_18       BCTU.TRGCFG[18].R             /* Trigger Configuration */
#define BCTU_TRGCFG_19       BCTU.TRGCFG[19].R             /* Trigger Configuration */
#define BCTU_TRGCFG_20       BCTU.TRGCFG[20].R             /* Trigger Configuration */
#define BCTU_TRGCFG_21       BCTU.TRGCFG[21].R             /* Trigger Configuration */
#define BCTU_TRGCFG_22       BCTU.TRGCFG[22].R             /* Trigger Configuration */
#define BCTU_TRGCFG_23       BCTU.TRGCFG[23].R             /* Trigger Configuration */
#define BCTU_TRGCFG_24       BCTU.TRGCFG[24].R             /* Trigger Configuration */
#define BCTU_TRGCFG_25       BCTU.TRGCFG[25].R             /* Trigger Configuration */
#define BCTU_TRGCFG_26       BCTU.TRGCFG[26].R             /* Trigger Configuration */
#define BCTU_TRGCFG_27       BCTU.TRGCFG[27].R             /* Trigger Configuration */
#define BCTU_TRGCFG_28       BCTU.TRGCFG[28].R             /* Trigger Configuration */
#define BCTU_TRGCFG_29       BCTU.TRGCFG[29].R             /* Trigger Configuration */
#define BCTU_TRGCFG_30       BCTU.TRGCFG[30].R             /* Trigger Configuration */
#define BCTU_TRGCFG_31       BCTU.TRGCFG[31].R             /* Trigger Configuration */
#define BCTU_TRGCFG_32       BCTU.TRGCFG[32].R             /* Trigger Configuration */
#define BCTU_TRGCFG_33       BCTU.TRGCFG[33].R             /* Trigger Configuration */
#define BCTU_TRGCFG_34       BCTU.TRGCFG[34].R             /* Trigger Configuration */
#define BCTU_TRGCFG_35       BCTU.TRGCFG[35].R             /* Trigger Configuration */
#define BCTU_TRGCFG_36       BCTU.TRGCFG[36].R             /* Trigger Configuration */
#define BCTU_TRGCFG_37       BCTU.TRGCFG[37].R             /* Trigger Configuration */
#define BCTU_TRGCFG_38       BCTU.TRGCFG[38].R             /* Trigger Configuration */
#define BCTU_TRGCFG_39       BCTU.TRGCFG[39].R             /* Trigger Configuration */
#define BCTU_TRGCFG_40       BCTU.TRGCFG[40].R             /* Trigger Configuration */
#define BCTU_TRGCFG_41       BCTU.TRGCFG[41].R             /* Trigger Configuration */
#define BCTU_TRGCFG_42       BCTU.TRGCFG[42].R             /* Trigger Configuration */
#define BCTU_TRGCFG_43       BCTU.TRGCFG[43].R             /* Trigger Configuration */
#define BCTU_TRGCFG_44       BCTU.TRGCFG[44].R             /* Trigger Configuration */
#define BCTU_TRGCFG_45       BCTU.TRGCFG[45].R             /* Trigger Configuration */
#define BCTU_TRGCFG_46       BCTU.TRGCFG[46].R             /* Trigger Configuration */
#define BCTU_TRGCFG_47       BCTU.TRGCFG[47].R             /* Trigger Configuration */
#define BCTU_TRGCFG_48       BCTU.TRGCFG[48].R             /* Trigger Configuration */
#define BCTU_TRGCFG_49       BCTU.TRGCFG[49].R             /* Trigger Configuration */
#define BCTU_TRGCFG_50       BCTU.TRGCFG[50].R             /* Trigger Configuration */
#define BCTU_TRGCFG_51       BCTU.TRGCFG[51].R             /* Trigger Configuration */
#define BCTU_TRGCFG_52       BCTU.TRGCFG[52].R             /* Trigger Configuration */
#define BCTU_TRGCFG_53       BCTU.TRGCFG[53].R             /* Trigger Configuration */
#define BCTU_TRGCFG_54       BCTU.TRGCFG[54].R             /* Trigger Configuration */
#define BCTU_TRGCFG_55       BCTU.TRGCFG[55].R             /* Trigger Configuration */
#define BCTU_TRGCFG_56       BCTU.TRGCFG[56].R             /* Trigger Configuration */
#define BCTU_TRGCFG_57       BCTU.TRGCFG[57].R             /* Trigger Configuration */
#define BCTU_TRGCFG_58       BCTU.TRGCFG[58].R             /* Trigger Configuration */
#define BCTU_TRGCFG_59       BCTU.TRGCFG[59].R             /* Trigger Configuration */
#define BCTU_TRGCFG_60       BCTU.TRGCFG[60].R             /* Trigger Configuration */
#define BCTU_TRGCFG_61       BCTU.TRGCFG[61].R             /* Trigger Configuration */
#define BCTU_TRGCFG_62       BCTU.TRGCFG[62].R             /* Trigger Configuration */
#define BCTU_TRGCFG_63       BCTU.TRGCFG[63].R             /* Trigger Configuration */
#define BCTU_TRGCFG_64       BCTU.TRGCFG[64].R             /* Trigger Configuration */
#define BCTU_TRGCFG_65       BCTU.TRGCFG[65].R             /* Trigger Configuration */
#define BCTU_TRGCFG_66       BCTU.TRGCFG[66].R             /* Trigger Configuration */
#define BCTU_TRGCFG_67       BCTU.TRGCFG[67].R             /* Trigger Configuration */
#define BCTU_TRGCFG_68       BCTU.TRGCFG[68].R             /* Trigger Configuration */
#define BCTU_TRGCFG_69       BCTU.TRGCFG[69].R             /* Trigger Configuration */
#define BCTU_TRGCFG_70       BCTU.TRGCFG[70].R             /* Trigger Configuration */
#define BCTU_TRGCFG_71       BCTU.TRGCFG[71].R             /* Trigger Configuration */
#define BCTU_WRPROT          BCTU.WRPROT.R                 /* Write Protection */
#define BCTU_SFTRGR1         BCTU.SFTRGR1.R                /* Software Trigger 1 */
#define BCTU_SFTRGR2         BCTU.SFTRGR2.R                /* Software Trigger 2 */
#define BCTU_SFTRGR3         BCTU.SFTRGR3.R                /* Software Trigger 3 */
#define BCTU_ADC0DR          BCTU.ADCDR[0].R               /* ADC0 Result Data */
#define BCTU_ADC1DR          BCTU.ADCDR[1].R               /* ADC1 Result Data */
#define BCTU_ADC2DR          BCTU.ADCDR[2].R               /* ADC2 Result Data */
#define BCTU_LISTSTAR        BCTU.LISTSTAR.R               /* CL Size Status */
#define BCTU_LISTCHR_0       BCTU.LISTCHR[0].R             /* CL Channel Address */
#define BCTU_LISTCHR_1       BCTU.LISTCHR[1].R             /* CL Channel Address */
#define BCTU_LISTCHR_2       BCTU.LISTCHR[2].R             /* CL Channel Address */
#define BCTU_LISTCHR_3       BCTU.LISTCHR[3].R             /* CL Channel Address */
#define BCTU_LISTCHR_4       BCTU.LISTCHR[4].R             /* CL Channel Address */
#define BCTU_LISTCHR_5       BCTU.LISTCHR[5].R             /* CL Channel Address */
#define BCTU_LISTCHR_6       BCTU.LISTCHR[6].R             /* CL Channel Address */
#define BCTU_LISTCHR_7       BCTU.LISTCHR[7].R             /* CL Channel Address */
#define BCTU_LISTCHR_8       BCTU.LISTCHR[8].R             /* CL Channel Address */
#define BCTU_LISTCHR_9       BCTU.LISTCHR[9].R             /* CL Channel Address */
#define BCTU_LISTCHR_10      BCTU.LISTCHR[10].R            /* CL Channel Address */
#define BCTU_LISTCHR_11      BCTU.LISTCHR[11].R            /* CL Channel Address */
#define BCTU_LISTCHR_12      BCTU.LISTCHR[12].R            /* CL Channel Address */
#define BCTU_LISTCHR_13      BCTU.LISTCHR[13].R            /* CL Channel Address */
#define BCTU_LISTCHR_14      BCTU.LISTCHR[14].R            /* CL Channel Address */
#define BCTU_LISTCHR_15      BCTU.LISTCHR[15].R            /* CL Channel Address */
#define BCTU_FIFO1DR         BCTU.FIFO1DR.R                /* FIFO1 Result Data */
#define BCTU_FIFO2DR         BCTU.FIFO2DR.R                /* FIFO1 Result Data */
#define BCTU_FIFOCR          BCTU.FIFOCR.R                 /* FIFO Control */
#define BCTU_FIFOWM          BCTU.FIFOWM.R                 /* FIFO Watermark Configuration */
#define BCTU_FIFOERR         BCTU.FIFOERR.R                /* FIFO Error/Status */
#define BCTU_FIFOSR          BCTU.FIFOSR.R                 /* FIFO Status */
#define BCTU_FIFOCNTR        BCTU.FIFOCNTR.R               /* FIFO Counter */

/* CMU_FC */
#define CMU_0_GCR            CMU_0.GCR.R                   /* Global Configuration Register */
#define CMU_0_RCCR           CMU_0.RCCR.R                  /* Reference Count Configuration Register */
#define CMU_0_HTCR           CMU_0.HTCR.R                  /* High Threshold Configuration Register */
#define CMU_0_LTCR           CMU_0.LTCR.R                  /* Low Threshold Configuration Register */
#define CMU_0_SR             CMU_0.SR.R                    /* Status Register */
#define CMU_0_IER            CMU_0.IER.R                   /* Interrupt Enable Register */

#define CMU_3_GCR            CMU_3.GCR.R                   /* Global Configuration Register */
#define CMU_3_RCCR           CMU_3.RCCR.R                  /* Reference Count Configuration Register */
#define CMU_3_HTCR           CMU_3.HTCR.R                  /* High Threshold Configuration Register */
#define CMU_3_LTCR           CMU_3.LTCR.R                  /* Low Threshold Configuration Register */
#define CMU_3_SR             CMU_3.SR.R                    /* Status Register */
#define CMU_3_IER            CMU_3.IER.R                   /* Interrupt Enable Register */

#define CMU_4_GCR            CMU_4.GCR.R                   /* Global Configuration Register */
#define CMU_4_RCCR           CMU_4.RCCR.R                  /* Reference Count Configuration Register */
#define CMU_4_HTCR           CMU_4.HTCR.R                  /* High Threshold Configuration Register */
#define CMU_4_LTCR           CMU_4.LTCR.R                  /* Low Threshold Configuration Register */
#define CMU_4_SR             CMU_4.SR.R                    /* Status Register */
#define CMU_4_IER            CMU_4.IER.R                   /* Interrupt Enable Register */

#define CMU_5_GCR            CMU_5.GCR.R                   /* Global Configuration Register */
#define CMU_5_RCCR           CMU_5.RCCR.R                  /* Reference Count Configuration Register */
#define CMU_5_HTCR           CMU_5.HTCR.R                  /* High Threshold Configuration Register */
#define CMU_5_LTCR           CMU_5.LTCR.R                  /* Low Threshold Configuration Register */
#define CMU_5_SR             CMU_5.SR.R                    /* Status Register */
#define CMU_5_IER            CMU_5.IER.R                   /* Interrupt Enable Register */

/* CMU_FM */
#define CMU_1_GCR            CMU_1.GCR.R                   /* Global Configuration Register */
#define CMU_1_RCCR           CMU_1.RCCR.R                  /* Reference Count Configuration Register */
#define CMU_1_SR             CMU_1.SR.R                    /* Status Register */
#define CMU_1_IER            CMU_1.IER.R                   /* Interrupt Enable Register */

#define CMU_2_GCR            CMU_2.GCR.R                   /* Global Configuration Register */
#define CMU_2_RCCR           CMU_2.RCCR.R                  /* Reference Count Configuration Register */
#define CMU_2_SR             CMU_2.SR.R                    /* Status Register */
#define CMU_2_IER            CMU_2.IER.R                   /* Interrupt Enable Register */

/* CONFIGURATION_GPR */
#define CONFIGURATION_GPR_CONFIG_REG0 CONFIGURATION_GPR.CONFIG_REG0.R /* General Purpose Configuration 0 */
#define CONFIGURATION_GPR_CONFIG_REG6 CONFIGURATION_GPR.CONFIG_REG6.R /* General Purpose Configuration 6 */
#define CONFIGURATION_GPR_CONFIG_RAMPR CONFIGURATION_GPR.CONFIG_RAMPR.R /* Configuration RAM Protected Region */
#define CONFIGURATION_GPR_CONFIG_CFPRL CONFIGURATION_GPR.CONFIG_CFPRL.R /* Configuration Code Flash Memory Active Block */
#define CONFIGURATION_GPR_CONFIG_CFPRH CONFIGURATION_GPR.CONFIG_CFPRH.R /* Configuration Code Flash Memory Passive Block */
#define CONFIGURATION_GPR_CONFIG_DFPR CONFIGURATION_GPR.CONFIG_DFPR.R /* Configuration Data Flash Memory Protected Region */
#define CONFIGURATION_GPR_CONFIG_PE_LOCK CONFIGURATION_GPR.CONFIG_PE_LOCK.R /* Configuration Program and Erase Lock */
#define CONFIGURATION_GPR_CONFIG_RAMPR_ALT CONFIGURATION_GPR.CONFIG_RAMPR_ALT.R /* Configuration RAM Protected Region Alternate */
#define CONFIGURATION_GPR_CONFIG_CFPRL_ALT CONFIGURATION_GPR.CONFIG_CFPRL_ALT.R /* Configuration Code Flash Memory Active Block Alternate */
#define CONFIGURATION_GPR_CONFIG_CFPRH_ALT CONFIGURATION_GPR.CONFIG_CFPRH_ALT.R /* Configuration Code Flash Memory Passive Block Alternate */
#define CONFIGURATION_GPR_CONFIG_DFPR_ALT CONFIGURATION_GPR.CONFIG_DFPR_ALT.R /* Configuration Data Flash Memory Protected Region Alternate */
#define CONFIGURATION_GPR_CONFIG_REG_GPR CONFIGURATION_GPR.CONFIG_REG_GPR.R /* Configuration REG_GPR */

/* CRC */
#define CRC_DATA             CRC.DATA.R                    /* CRC DATA register */
#define CRC_GPOLY            CRC.GPOLY.R                   /* CRC Polynomial register */
#define CRC_CTRL             CRC.CTRL.R                    /* CRC Control register */

/* DCM */
#define DCM_DCMSTAT          DCM.DCMSTAT.R                 /* DCM Status */
#define DCM_DCMLCC           DCM.DCMLCC.R                  /* LC and LC Control */
#define DCM_DCMLCS           DCM.DCMLCS.R                  /* LC Scan Status */
#define DCM_DCMMISC          DCM.DCMMISC.R                 /* DCM Miscellaneous */
#define DCM_DCMDEB           DCM.DCMDEB.R                  /* Debug Status and Configuration */
#define DCM_DCMEC            DCM.DCMEC.R                   /* DCF Error Count */
#define DCM_DCMSRR1          DCM.DCMSRR[0].R               /* DCF Scan Report */
#define DCM_DCMLCS_2         DCM.DCMLCS_2.R                /* LC Scan Status 2 */

/* DCM_GPR */
#define DCM_GPR_DCMROD1      DCM_GPR.DCMROD1.R             /* Read Only GPR On Destructive Reset Register */
#define DCM_GPR_DCMROD3      DCM_GPR.DCMROD3.R             /* Read Only GPR On Destructive Reset Register */
#define DCM_GPR_DCMROD4      DCM_GPR.DCMROD4.R             /* Read Only GPR On Destructive Reset Register */
#define DCM_GPR_DCMROD5      DCM_GPR.DCMROD5.R             /* Read Only GPR On Destructive Reset Register */
#define DCM_GPR_DCMROF1      DCM_GPR.DCMROF1.R             /* Read Only GPR On Functional Reset Register */
#define DCM_GPR_DCMROF2      DCM_GPR.DCMROF2.R             /* Read Only GPR On Functional Reset Register */
#define DCM_GPR_DCMROF3      DCM_GPR.DCMROF3.R             /* Read Only GPR On Functional Reset Register */
#define DCM_GPR_DCMROF4      DCM_GPR.DCMROF4.R             /* Read Only GPR On Functional Reset Register */
#define DCM_GPR_DCMROF5      DCM_GPR.DCMROF5.R             /* Read Only GPR On Functional Reset Register */
#define DCM_GPR_DCMROF6      DCM_GPR.DCMROF6.R             /* Read Only GPR On Functional Reset Register */
#define DCM_GPR_DCMROF7      DCM_GPR.DCMROF7.R             /* Read Only GPR On Functional Reset Register */
#define DCM_GPR_DCMROF8      DCM_GPR.DCMROF8.R             /* Read Only GPR On Functional Reset Register */
#define DCM_GPR_DCMROF9      DCM_GPR.DCMROF9.R             /* Read Only GPR On Functional Reset Register */
#define DCM_GPR_DCMROF10     DCM_GPR.DCMROF10.R            /* Read Only GPR On Functional Reset Register */
#define DCM_GPR_DCMROF11     DCM_GPR.DCMROF11.R            /* Read Only GPR On Functional Reset Register */
#define DCM_GPR_DCMROF12     DCM_GPR.DCMROF12.R            /* Read Only GPR On Functional Reset Register */
#define DCM_GPR_DCMROF13     DCM_GPR.DCMROF13.R            /* Read Only GPR On Functional Reset Register */
#define DCM_GPR_DCMROF14     DCM_GPR.DCMROF14.R            /* Read Only GPR On Functional Reset Register */
#define DCM_GPR_DCMROF15     DCM_GPR.DCMROF15.R            /* Read Only GPR On Functional Reset Register */
#define DCM_GPR_DCMROF16     DCM_GPR.DCMROF16.R            /* Read Only GPR On Functional Reset Register */
#define DCM_GPR_DCMROF17     DCM_GPR.DCMROF17.R            /* Read Only GPR On Functional Reset Register */
#define DCM_GPR_DCMROF19     DCM_GPR.DCMROF19.R            /* Read Only GPR On Functional Reset Register */
#define DCM_GPR_DCMROF20     DCM_GPR.DCMROF20.R            /* Read Only GPR On Functional Reset Register */
#define DCM_GPR_DCMROF21     DCM_GPR.DCMROF21.R            /* Read Only GPR On Functional Reset Register */
#define DCM_GPR_DCMRWP1      DCM_GPR.DCMRWP1.R             /* Read Write GPR On Power On Reset Register */
#define DCM_GPR_DCMRWP3      DCM_GPR.DCMRWP3.R             /* Read Write GPR On Power On Reset Register */
#define DCM_GPR_DCMRWD2      DCM_GPR.DCMRWD2.R             /* Read Write GPR On Destructive Reset Register */
#define DCM_GPR_DCMRWD3      DCM_GPR.DCMRWD3.R             /* Read Write GPR On Destructive Reset Register */
#define DCM_GPR_DCMRWD4      DCM_GPR.DCMRWD4.R             /* Read Write GPR On Destructive Reset Register */
#define DCM_GPR_DCMRWD5      DCM_GPR.DCMRWD5.R             /* Read Write GPR On Destructive Reset Register */
#define DCM_GPR_DCMRWD6      DCM_GPR.DCMRWD6.R             /* Read Write GPR On Destructive Reset Register */
#define DCM_GPR_DCMRWD7      DCM_GPR.DCMRWD7.R             /* Read Write GPR On Destructive Reset Register */
#define DCM_GPR_DCMRWD8      DCM_GPR.DCMRWD8.R             /* Read Write GPR On Destructive Reset Register */
#define DCM_GPR_DCMRWD9      DCM_GPR.DCMRWD9.R             /* Read Write GPR On Destructive Reset Register */
#define DCM_GPR_DCMRWF1      DCM_GPR.DCMRWF1.R             /* Read Write GPR On Functional Reset Register */
#define DCM_GPR_DCMRWF2      DCM_GPR.DCMRWF2.R             /* Read Write GPR On Functional Reset Register */
#define DCM_GPR_DCMRWF4      DCM_GPR.DCMRWF4.R             /* Read Write GPR On Functional Reset Register */
#define DCM_GPR_DCMRWF5      DCM_GPR.DCMRWF5.R             /* Read Write GPR On Functional Reset Register */
#define DCM_GPR_DCMROPP1     DCM_GPR.DCMROPP1.R            /* Read Only GPR On PMCPOR Reset */
#define DCM_GPR_DCMROPP2     DCM_GPR.DCMROPP2.R            /* Read Only GPR On PMCPOR Reset */
#define DCM_GPR_DCMROPP3     DCM_GPR.DCMROPP3.R            /* Read Only GPR On PMCPOR Reset */
#define DCM_GPR_DCMROPP4     DCM_GPR.DCMROPP4.R            /* Read Only GPR On PMCPOR Reset */

/* DMAMUX */
#define DMAMUX_1_CHCFG3      DMAMUX_1.CHCFG[0].R           /* Channel Configuration register */
#define DMAMUX_1_CHCFG2      DMAMUX_1.CHCFG[1].R           /* Channel Configuration register */
#define DMAMUX_1_CHCFG1      DMAMUX_1.CHCFG[2].R           /* Channel Configuration register */
#define DMAMUX_1_CHCFG0      DMAMUX_1.CHCFG[3].R           /* Channel Configuration register */
#define DMAMUX_1_CHCFG7      DMAMUX_1.CHCFG[4].R           /* Channel Configuration register */
#define DMAMUX_1_CHCFG6      DMAMUX_1.CHCFG[5].R           /* Channel Configuration register */
#define DMAMUX_1_CHCFG5      DMAMUX_1.CHCFG[6].R           /* Channel Configuration register */
#define DMAMUX_1_CHCFG4      DMAMUX_1.CHCFG[7].R           /* Channel Configuration register */
#define DMAMUX_1_CHCFG11     DMAMUX_1.CHCFG[8].R           /* Channel Configuration register */
#define DMAMUX_1_CHCFG10     DMAMUX_1.CHCFG[9].R           /* Channel Configuration register */
#define DMAMUX_1_CHCFG9      DMAMUX_1.CHCFG[10].R          /* Channel Configuration register */
#define DMAMUX_1_CHCFG8      DMAMUX_1.CHCFG[11].R          /* Channel Configuration register */
#define DMAMUX_1_CHCFG15     DMAMUX_1.CHCFG[12].R          /* Channel Configuration register */
#define DMAMUX_1_CHCFG14     DMAMUX_1.CHCFG[13].R          /* Channel Configuration register */
#define DMAMUX_1_CHCFG13     DMAMUX_1.CHCFG[14].R          /* Channel Configuration register */
#define DMAMUX_1_CHCFG12     DMAMUX_1.CHCFG[15].R          /* Channel Configuration register */

#define DMAMUX_0_CHCFG3      DMAMUX_0.CHCFG[0].R           /* Channel Configuration register */
#define DMAMUX_0_CHCFG2      DMAMUX_0.CHCFG[1].R           /* Channel Configuration register */
#define DMAMUX_0_CHCFG1      DMAMUX_0.CHCFG[2].R           /* Channel Configuration register */
#define DMAMUX_0_CHCFG0      DMAMUX_0.CHCFG[3].R           /* Channel Configuration register */
#define DMAMUX_0_CHCFG7      DMAMUX_0.CHCFG[4].R           /* Channel Configuration register */
#define DMAMUX_0_CHCFG6      DMAMUX_0.CHCFG[5].R           /* Channel Configuration register */
#define DMAMUX_0_CHCFG5      DMAMUX_0.CHCFG[6].R           /* Channel Configuration register */
#define DMAMUX_0_CHCFG4      DMAMUX_0.CHCFG[7].R           /* Channel Configuration register */
#define DMAMUX_0_CHCFG11     DMAMUX_0.CHCFG[8].R           /* Channel Configuration register */
#define DMAMUX_0_CHCFG10     DMAMUX_0.CHCFG[9].R           /* Channel Configuration register */
#define DMAMUX_0_CHCFG9      DMAMUX_0.CHCFG[10].R          /* Channel Configuration register */
#define DMAMUX_0_CHCFG8      DMAMUX_0.CHCFG[11].R          /* Channel Configuration register */
#define DMAMUX_0_CHCFG15     DMAMUX_0.CHCFG[12].R          /* Channel Configuration register */
#define DMAMUX_0_CHCFG14     DMAMUX_0.CHCFG[13].R          /* Channel Configuration register */
#define DMAMUX_0_CHCFG13     DMAMUX_0.CHCFG[14].R          /* Channel Configuration register */
#define DMAMUX_0_CHCFG12     DMAMUX_0.CHCFG[15].R          /* Channel Configuration register */

/* EIM */
#define EIM_EIMCR            EIM.EIMCR.R                   /* Error Injection Module Configuration Register */
#define EIM_EICHEN           EIM.EICHEN.R                  /* Error Injection Channel Enable register */
#define EIM_EICHD0_WORD0     EIM.EICHD0_WORD0.R            /* Error Injection Channel Descriptor n, Word0 */
#define EIM_EICHD0_WORD1     EIM.EICHD0_WORD1.R            /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD0_WORD2     EIM.EICHD0_WORD2.R            /* Error Injection Channel Descriptor n, Word2 */
#define EIM_EICHD1_WORD0     EIM.EICHD1_WORD0.R            /* Error Injection Channel Descriptor n, Word0 */
#define EIM_EICHD1_WORD1     EIM.EICHD1_WORD1.R            /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD1_WORD2     EIM.EICHD1_WORD2.R            /* Error Injection Channel Descriptor n, Word2 */
#define EIM_EICHD2_WORD0     EIM.EICHD2_WORD0.R            /* Error Injection Channel Descriptor n, Word0 */
#define EIM_EICHD2_WORD1     EIM.EICHD2_WORD1.R            /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD2_WORD2     EIM.EICHD2_WORD2.R            /* Error Injection Channel Descriptor n, Word2 */
#define EIM_EICHD3_WORD0     EIM.EICHD3_WORD0.R            /* Error Injection Channel Descriptor n, Word0 */
#define EIM_EICHD3_WORD1     EIM.EICHD3_WORD1.R            /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD3_WORD2     EIM.EICHD3_WORD2.R            /* Error Injection Channel Descriptor n, Word2 */
#define EIM_EICHD4_WORD0     EIM.EICHD4_WORD0.R            /* Error Injection Channel Descriptor n, Word0 */
#define EIM_EICHD4_WORD1     EIM.EICHD4_WORD1.R            /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD4_WORD2     EIM.EICHD4_WORD2.R            /* Error Injection Channel Descriptor n, Word2 */
#define EIM_EICHD4_WORD3     EIM.EICHD4_WORD3.R            /* Error Injection Channel Descriptor n, Word3 */
#define EIM_EICHD4_WORD4     EIM.EICHD4_WORD4.R            /* Error Injection Channel Descriptor n, Word4 */
#define EIM_EICHD5_WORD0     EIM.EICHD5_WORD0.R            /* Error Injection Channel Descriptor n, Word0 */
#define EIM_EICHD5_WORD1     EIM.EICHD5_WORD1.R            /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD5_WORD2     EIM.EICHD5_WORD2.R            /* Error Injection Channel Descriptor n, Word2 */
#define EIM_EICHD5_WORD3     EIM.EICHD5_WORD3.R            /* Error Injection Channel Descriptor n, Word3 */
#define EIM_EICHD5_WORD4     EIM.EICHD5_WORD4.R            /* Error Injection Channel Descriptor n, Word4 */
#define EIM_EICHD6_WORD0     EIM.EICHD6_WORD0.R            /* Error Injection Channel Descriptor n, Word0 */
#define EIM_EICHD6_WORD1     EIM.EICHD6_WORD1.R            /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD6_WORD2     EIM.EICHD6_WORD2.R            /* Error Injection Channel Descriptor n, Word2 */
#define EIM_EICHD6_WORD3     EIM.EICHD6_WORD3.R            /* Error Injection Channel Descriptor n, Word3 */
#define EIM_EICHD6_WORD4     EIM.EICHD6_WORD4.R            /* Error Injection Channel Descriptor n, Word4 */
#define EIM_EICHD7_WORD0     EIM.EICHD7_WORD0.R            /* Error Injection Channel Descriptor n, Word0 */
#define EIM_EICHD7_WORD1     EIM.EICHD7_WORD1.R            /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD7_WORD2     EIM.EICHD7_WORD2.R            /* Error Injection Channel Descriptor n, Word2 */
#define EIM_EICHD7_WORD3     EIM.EICHD7_WORD3.R            /* Error Injection Channel Descriptor n, Word3 */
#define EIM_EICHD7_WORD4     EIM.EICHD7_WORD4.R            /* Error Injection Channel Descriptor n, Word4 */
#define EIM_EICHD8_WORD0     EIM.EICHD8_WORD0.R            /* Error Injection Channel Descriptor n, Word0 */
#define EIM_EICHD8_WORD1     EIM.EICHD8_WORD1.R            /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD8_WORD2     EIM.EICHD8_WORD2.R            /* Error Injection Channel Descriptor n, Word2 */
#define EIM_EICHD9_WORD0     EIM.EICHD9_WORD0.R            /* Error Injection Channel Descriptor n, Word0 */
#define EIM_EICHD9_WORD1     EIM.EICHD9_WORD1.R            /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD9_WORD2     EIM.EICHD9_WORD2.R            /* Error Injection Channel Descriptor n, Word2 */
#define EIM_EICHD9_WORD3     EIM.EICHD9_WORD3.R            /* Error Injection Channel Descriptor n, Word3 */
#define EIM_EICHD9_WORD4     EIM.EICHD9_WORD4.R            /* Error Injection Channel Descriptor n, Word4 */
#define EIM_EICHD10_WORD0    EIM.EICHD10_WORD0.R           /* Error Injection Channel Descriptor n, Word0 */
#define EIM_EICHD10_WORD1    EIM.EICHD10_WORD1.R           /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD10_WORD2    EIM.EICHD10_WORD2.R           /* Error Injection Channel Descriptor n, Word2 */
#define EIM_EICHD10_WORD3    EIM.EICHD10_WORD3.R           /* Error Injection Channel Descriptor n, Word3 */
#define EIM_EICHD10_WORD4    EIM.EICHD10_WORD4.R           /* Error Injection Channel Descriptor n, Word4 */
#define EIM_EICHD11_WORD0    EIM.EICHD11_WORD0.R           /* Error Injection Channel Descriptor n, Word0 */
#define EIM_EICHD11_WORD1    EIM.EICHD11_WORD1.R           /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD11_WORD2    EIM.EICHD11_WORD2.R           /* Error Injection Channel Descriptor n, Word2 */
#define EIM_EICHD11_WORD3    EIM.EICHD11_WORD3.R           /* Error Injection Channel Descriptor n, Word3 */
#define EIM_EICHD11_WORD4    EIM.EICHD11_WORD4.R           /* Error Injection Channel Descriptor n, Word4 */
#define EIM_EICHD12_WORD0    EIM.EICHD12_WORD0.R           /* Error Injection Channel Descriptor n, Word0 */
#define EIM_EICHD12_WORD1    EIM.EICHD12_WORD1.R           /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD12_WORD2    EIM.EICHD12_WORD2.R           /* Error Injection Channel Descriptor n, Word2 */
#define EIM_EICHD12_WORD3    EIM.EICHD12_WORD3.R           /* Error Injection Channel Descriptor n, Word3 */
#define EIM_EICHD12_WORD4    EIM.EICHD12_WORD4.R           /* Error Injection Channel Descriptor n, Word4 */
#define EIM_EICHD13_WORD0    EIM.EICHD13_WORD0.R           /* Error Injection Channel Descriptor n, Word0 */
#define EIM_EICHD13_WORD1    EIM.EICHD13_WORD1.R           /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD13_WORD2    EIM.EICHD13_WORD2.R           /* Error Injection Channel Descriptor n, Word2 */
#define EIM_EICHD14_WORD0    EIM.EICHD14_WORD0.R           /* Error Injection Channel Descriptor n, Word0 */
#define EIM_EICHD14_WORD1    EIM.EICHD14_WORD1.R           /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD15_WORD0    EIM.EICHD15_WORD0.R           /* Error Injection Channel Descriptor n, Word0 */
#define EIM_EICHD15_WORD1    EIM.EICHD15_WORD1.R           /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD16_WORD0    EIM.EICHD16_WORD0.R           /* Error Injection Channel Descriptor n, Word0 */
#define EIM_EICHD16_WORD1    EIM.EICHD16_WORD1.R           /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD16_WORD2    EIM.EICHD16_WORD2.R           /* Error Injection Channel Descriptor n, Word2 */
#define EIM_EICHD17_WORD0    EIM.EICHD17_WORD0.R           /* Error Injection Channel Descriptor n, Word0 */
#define EIM_EICHD17_WORD1    EIM.EICHD17_WORD1.R           /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD18_WORD0    EIM.EICHD18_WORD0.R           /* Error Injection Channel Descriptor n, Word0 */
#define EIM_EICHD18_WORD1    EIM.EICHD18_WORD1.R           /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD19_WORD1    EIM.EICHD19_WORD1.R           /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD19_WORD2    EIM.EICHD19_WORD2.R           /* Error Injection Channel Descriptor n, Word2 */
#define EIM_EICHD19_WORD3    EIM.EICHD19_WORD3.R           /* Error Injection Channel Descriptor n, Word3 */
#define EIM_EICHD19_WORD4    EIM.EICHD19_WORD4.R           /* Error Injection Channel Descriptor n, Word4 */
#define EIM_EICHD19_WORD5    EIM.EICHD19_WORD5.R           /* Error Injection Channel Descriptor n, Word5 */
#define EIM_EICHD19_WORD6    EIM.EICHD19_WORD6.R           /* Error Injection Channel Descriptor n, Word6 */
#define EIM_EICHD20_WORD1    EIM.EICHD20_WORD1.R           /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD20_WORD2    EIM.EICHD20_WORD2.R           /* Error Injection Channel Descriptor n, Word2 */
#define EIM_EICHD20_WORD3    EIM.EICHD20_WORD3.R           /* Error Injection Channel Descriptor n, Word3 */
#define EIM_EICHD20_WORD4    EIM.EICHD20_WORD4.R           /* Error Injection Channel Descriptor n, Word4 */
#define EIM_EICHD20_WORD5    EIM.EICHD20_WORD5.R           /* Error Injection Channel Descriptor n, Word5 */
#define EIM_EICHD20_WORD6    EIM.EICHD20_WORD6.R           /* Error Injection Channel Descriptor n, Word6 */
#define EIM_EICHD21_WORD1    EIM.EICHD21_WORD1.R           /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD21_WORD2    EIM.EICHD21_WORD2.R           /* Error Injection Channel Descriptor n, Word2 */
#define EIM_EICHD22_WORD1    EIM.EICHD22_WORD1.R           /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD22_WORD2    EIM.EICHD22_WORD2.R           /* Error Injection Channel Descriptor n, Word2 */
#define EIM_EICHD23_WORD1    EIM.EICHD23_WORD1.R           /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD23_WORD2    EIM.EICHD23_WORD2.R           /* Error Injection Channel Descriptor n, Word2 */
#define EIM_EICHD24_WORD1    EIM.EICHD24_WORD1.R           /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD24_WORD2    EIM.EICHD24_WORD2.R           /* Error Injection Channel Descriptor n, Word2 */
#define EIM_EICHD25_WORD1    EIM.EICHD25_WORD1.R           /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD25_WORD2    EIM.EICHD25_WORD2.R           /* Error Injection Channel Descriptor n, Word2 */
#define EIM_EICHD26_WORD1    EIM.EICHD26_WORD1.R           /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD26_WORD2    EIM.EICHD26_WORD2.R           /* Error Injection Channel Descriptor n, Word2 */
#define EIM_EICHD27_WORD1    EIM.EICHD27_WORD1.R           /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD28_WORD1    EIM.EICHD28_WORD1.R           /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD29_WORD1    EIM.EICHD29_WORD1.R           /* Error Injection Channel Descriptor n, Word1 */
#define EIM_EICHD30_WORD1    EIM.EICHD30_WORD1.R           /* Error Injection Channel Descriptor n, Word1 */

/* EMAC */
#define EMAC_MAC_Configuration EMAC.MAC_CONFIGURATION.R    /*  */
#define EMAC_MAC_Ext_Configuration EMAC.MAC_EXT_CONFIGURATION.R /* MAC Extended Configuration */
#define EMAC_MAC_Packet_Filter EMAC.MAC_PACKET_FILTER.R    /* MAC Packet Filter */
#define EMAC_MAC_Watchdog_Timeout EMAC.MAC_WATCHDOG_TIMEOUT.R /* MAC Watchdog Timeout */
#define EMAC_MAC_Hash_Table_Reg0 EMAC.MAC_HASH_TABLE_REG0.R /*  */
#define EMAC_MAC_Hash_Table_Reg1 EMAC.MAC_HASH_TABLE_REG1.R /*  */
#define EMAC_MAC_VLAN_Tag_Ctrl EMAC.MAC_VLAN_TAG_CTRL.R    /*  */
#define EMAC_MAC_VLAN_Tag_Data EMAC.MAC_VLAN_TAG_DATA.R    /*  */
#define EMAC_MAC_VLAN_Hash_Table EMAC.MAC_VLAN_HASH_TABLE.R /*  */
#define EMAC_MAC_VLAN_Incl   EMAC.MAC_VLAN_INCL.R          /*  */
#define EMAC_MAC_Inner_VLAN_Incl EMAC.MAC_INNER_VLAN_INCL.R /*  */
#define EMAC_MAC_Q0_Tx_Flow_Ctrl EMAC.MAC_Q0_TX_FLOW_CTRL.R /*  */
#define EMAC_MAC_Rx_Flow_Ctrl EMAC.MAC_RX_FLOW_CTRL.R      /*  */
#define EMAC_MAC_RxQ_Ctrl4   EMAC.MAC_RXQ_CTRL4.R          /*  */
#define EMAC_MAC_RxQ_Ctrl0   EMAC.MAC_RXQ_CTRL0.R          /*  */
#define EMAC_MAC_RxQ_Ctrl1   EMAC.MAC_RXQ_CTRL1.R          /*  */
#define EMAC_MAC_RxQ_Ctrl2   EMAC.MAC_RXQ_CTRL2.R          /*  */
#define EMAC_MAC_Interrupt_Status EMAC.MAC_INTERRUPT_STATUS.R /*  */
#define EMAC_MAC_Interrupt_Enable EMAC.MAC_INTERRUPT_ENABLE.R /*  */
#define EMAC_MAC_Rx_Tx_Status EMAC.MAC_RX_TX_STATUS.R      /*  */
#define EMAC_MAC_Version     EMAC.MAC_VERSION.R            /*  */
#define EMAC_MAC_Debug       EMAC.MAC_DEBUG.R              /*  */
#define EMAC_MAC_HW_Feature0 EMAC.MAC_HW_FEATURE0.R        /*  */
#define EMAC_MAC_HW_Feature1 EMAC.MAC_HW_FEATURE1.R        /*  */
#define EMAC_MAC_HW_Feature2 EMAC.MAC_HW_FEATURE2.R        /*  */
#define EMAC_MAC_HW_Feature3 EMAC.MAC_HW_FEATURE3.R        /*  */
#define EMAC_MAC_DPP_FSM_Interrupt_Status EMAC.MAC_DPP_FSM_INTERRUPT_STATUS.R /*  */
#define EMAC_MAC_FSM_Control EMAC.MAC_FSM_CONTROL.R        /*  */
#define EMAC_MAC_FSM_ACT_Timer EMAC.MAC_FSM_ACT_TIMER.R    /*  */
#define EMAC_SCS_REG1        EMAC.SCS_REG1.R               /*  */
#define EMAC_MAC_MDIO_Address EMAC.MAC_MDIO_ADDRESS.R      /*  */
#define EMAC_MAC_MDIO_Data   EMAC.MAC_MDIO_DATA.R          /*  */
#define EMAC_MAC_CSR_SW_Ctrl EMAC.MAC_CSR_SW_CTRL.R        /*  */
#define EMAC_MAC_FPE_CTRL_STS EMAC.MAC_FPE_CTRL_STS.R      /*  */
#define EMAC_MAC_Presn_Time_ns EMAC.MAC_PRESN_TIME_NS.R    /*  */
#define EMAC_MAC_Presn_Time_Updt EMAC.MAC_PRESN_TIME_UPDT.R /*  */
#define EMAC_MAC_Address0_High EMAC.MAC_ADDRESS0_HIGH.R    /*  */
#define EMAC_MAC_Address0_Low EMAC.MAC_ADDRESS0_LOW.R      /*  */
#define EMAC_MAC_Address1_High EMAC.MAC_ADDRESS1_HIGH.R    /*  */
#define EMAC_MAC_Address1_Low EMAC.MAC_ADDRESS1_LOW.R      /*  */
#define EMAC_MAC_Address2_High EMAC.MAC_ADDRESS2_HIGH.R    /*  */
#define EMAC_MAC_Address2_Low EMAC.MAC_ADDRESS2_LOW.R      /*  */
#define EMAC_MMC_Control     EMAC.MMC_CONTROL.R            /*  */
#define EMAC_MMC_Rx_Interrupt EMAC.MMC_RX_INTERRUPT.R      /*  */
#define EMAC_MMC_Tx_Interrupt EMAC.MMC_TX_INTERRUPT.R      /*  */
#define EMAC_MMC_Rx_Interrupt_Mask EMAC.MMC_RX_INTERRUPT_MASK.R /*  */
#define EMAC_MMC_Tx_Interrupt_Mask EMAC.MMC_TX_INTERRUPT_MASK.R /*  */
#define EMAC_Tx_Octet_Count_Good_Bad EMAC.TX_OCTET_COUNT_GOOD_BAD.R /*  */
#define EMAC_Tx_Packet_Count_Good_Bad EMAC.TX_PACKET_COUNT_GOOD_BAD.R /*  */
#define EMAC_Tx_Broadcast_Packets_Good EMAC.TX_BROADCAST_PACKETS_GOOD.R /*  */
#define EMAC_Tx_Multicast_Packets_Good EMAC.TX_MULTICAST_PACKETS_GOOD.R /*  */
#define EMAC_Tx_64Octets_Packets_Good_Bad EMAC.TX_64OCTETS_PACKETS_GOOD_BAD.R /*  */
#define EMAC_Tx_65To127Octets_Packets_Good_Bad EMAC.TX_65TO127OCTETS_PACKETS_GOOD_BAD.R /*  */
#define EMAC_Tx_128To255Octets_Packets_Good_Bad EMAC.TX_128TO255OCTETS_PACKETS_GOOD_BAD.R /*  */
#define EMAC_Tx_256To511Octets_Packets_Good_Bad EMAC.TX_256TO511OCTETS_PACKETS_GOOD_BAD.R /*  */
#define EMAC_Tx_512To1023Octets_Packets_Good_Bad EMAC.TX_512TO1023OCTETS_PACKETS_GOOD_BAD.R /*  */
#define EMAC_Tx_1024ToMaxOctets_Packets_Good_Bad EMAC.TX_1024TOMAXOCTETS_PACKETS_GOOD_BAD.R /*  */
#define EMAC_Tx_Unicast_Packets_Good_Bad EMAC.TX_UNICAST_PACKETS_GOOD_BAD.R /*  */
#define EMAC_Tx_Multicast_Packets_Good_Bad EMAC.TX_MULTICAST_PACKETS_GOOD_BAD.R /*  */
#define EMAC_Tx_Broadcast_Packets_Good_Bad EMAC.TX_BROADCAST_PACKETS_GOOD_BAD.R /*  */
#define EMAC_Tx_Underflow_Error_Packets EMAC.TX_UNDERFLOW_ERROR_PACKETS.R /*  */
#define EMAC_Tx_Single_Collision_Good_Packets EMAC.TX_SINGLE_COLLISION_GOOD_PACKETS.R /*  */
#define EMAC_Tx_Multiple_Collision_Good_Packets EMAC.TX_MULTIPLE_COLLISION_GOOD_PACKETS.R /*  */
#define EMAC_Tx_Deferred_Packets EMAC.TX_DEFERRED_PACKETS.R /*  */
#define EMAC_Tx_Late_Collision_Packets EMAC.TX_LATE_COLLISION_PACKETS.R /*  */
#define EMAC_Tx_Excessive_Collision_Packets EMAC.TX_EXCESSIVE_COLLISION_PACKETS.R /*  */
#define EMAC_Tx_Carrier_Error_Packets EMAC.TX_CARRIER_ERROR_PACKETS.R /*  */
#define EMAC_Tx_Octet_Count_Good EMAC.TX_OCTET_COUNT_GOOD.R /*  */
#define EMAC_Tx_Packet_Count_Good EMAC.TX_PACKET_COUNT_GOOD.R /*  */
#define EMAC_Tx_Excessive_Deferral_Error EMAC.TX_EXCESSIVE_DEFERRAL_ERROR.R /*  */
#define EMAC_Tx_Pause_Packets EMAC.TX_PAUSE_PACKETS.R      /*  */
#define EMAC_Tx_VLAN_Packets_Good EMAC.TX_VLAN_PACKETS_GOOD.R /*  */
#define EMAC_Tx_OSize_Packets_Good EMAC.TX_OSIZE_PACKETS_GOOD.R /*  */
#define EMAC_Rx_Packets_Count_Good_Bad EMAC.RX_PACKETS_COUNT_GOOD_BAD.R /*  */
#define EMAC_Rx_Octet_Count_Good_Bad EMAC.RX_OCTET_COUNT_GOOD_BAD.R /*  */
#define EMAC_Rx_Octet_Count_Good EMAC.RX_OCTET_COUNT_GOOD.R /*  */
#define EMAC_Rx_Broadcast_Packets_Good EMAC.RX_BROADCAST_PACKETS_GOOD.R /*  */
#define EMAC_Rx_Multicast_Packets_Good EMAC.RX_MULTICAST_PACKETS_GOOD.R /*  */
#define EMAC_Rx_CRC_Error_Packets EMAC.RX_CRC_ERROR_PACKETS.R /*  */
#define EMAC_Rx_Alignment_Error_Packets EMAC.RX_ALIGNMENT_ERROR_PACKETS.R /*  */
#define EMAC_Rx_Runt_Error_Packets EMAC.RX_RUNT_ERROR_PACKETS.R /*  */
#define EMAC_Rx_Jabber_Error_Packets EMAC.RX_JABBER_ERROR_PACKETS.R /*  */
#define EMAC_Rx_Undersize_Packets_Good EMAC.RX_UNDERSIZE_PACKETS_GOOD.R /*  */
#define EMAC_Rx_Oversize_Packets_Good EMAC.RX_OVERSIZE_PACKETS_GOOD.R /*  */
#define EMAC_Rx_64Octets_Packets_Good_Bad EMAC.RX_64OCTETS_PACKETS_GOOD_BAD.R /*  */
#define EMAC_Rx_65To127Octets_Packets_Good_Bad EMAC.RX_65TO127OCTETS_PACKETS_GOOD_BAD.R /*  */
#define EMAC_Rx_128To255Octets_Packets_Good_Bad EMAC.RX_128TO255OCTETS_PACKETS_GOOD_BAD.R /*  */
#define EMAC_Rx_256To511Octets_Packets_Good_Bad EMAC.RX_256TO511OCTETS_PACKETS_GOOD_BAD.R /*  */
#define EMAC_Rx_512To1023Octets_Packets_Good_Bad EMAC.RX_512TO1023OCTETS_PACKETS_GOOD_BAD.R /*  */
#define EMAC_Rx_1024ToMaxOctets_Packets_Good_Bad EMAC.RX_1024TOMAXOCTETS_PACKETS_GOOD_BAD.R /*  */
#define EMAC_Rx_Unicast_Packets_Good EMAC.RX_UNICAST_PACKETS_GOOD.R /*  */
#define EMAC_Rx_Length_Error_Packets EMAC.RX_LENGTH_ERROR_PACKETS.R /*  */
#define EMAC_Rx_Out_Of_Range_Type_Packets EMAC.RX_OUT_OF_RANGE_TYPE_PACKETS.R /*  */
#define EMAC_Rx_Pause_Packets EMAC.RX_PAUSE_PACKETS.R      /*  */
#define EMAC_Rx_FIFO_Overflow_Packets EMAC.RX_FIFO_OVERFLOW_PACKETS.R /*  */
#define EMAC_Rx_VLAN_Packets_Good_Bad EMAC.RX_VLAN_PACKETS_GOOD_BAD.R /*  */
#define EMAC_Rx_Watchdog_Error_Packets EMAC.RX_WATCHDOG_ERROR_PACKETS.R /*  */
#define EMAC_Rx_Receive_Error_Packets EMAC.RX_RECEIVE_ERROR_PACKETS.R /*  */
#define EMAC_Rx_Control_Packets_Good EMAC.RX_CONTROL_PACKETS_GOOD.R /*  */
#define EMAC_MMC_FPE_Tx_Interrupt EMAC.MMC_FPE_TX_INTERRUPT.R /*  */
#define EMAC_MMC_FPE_Tx_Interrupt_Mask EMAC.MMC_FPE_TX_INTERRUPT_MASK.R /*  */
#define EMAC_MMC_Tx_FPE_Fragment_Cntr EMAC.MMC_TX_FPE_FRAGMENT_CNTR.R /*  */
#define EMAC_MMC_Tx_Hold_Req_Cntr EMAC.MMC_TX_HOLD_REQ_CNTR.R /*  */
#define EMAC_MMC_FPE_Rx_Interrupt EMAC.MMC_FPE_RX_INTERRUPT.R /*  */
#define EMAC_MMC_FPE_Rx_Interrupt_Mask EMAC.MMC_FPE_RX_INTERRUPT_MASK.R /*  */
#define EMAC_MMC_Rx_Packet_Assembly_Err_Cntr EMAC.MMC_RX_PACKET_ASSEMBLY_ERR_CNTR.R /*  */
#define EMAC_MMC_Rx_Packet_SMD_Err_Cntr EMAC.MMC_RX_PACKET_SMD_ERR_CNTR.R /*  */
#define EMAC_MMC_Rx_Packet_Assembly_OK_Cntr EMAC.MMC_RX_PACKET_ASSEMBLY_OK_CNTR.R /*  */
#define EMAC_MMC_Rx_FPE_Fragment_Cntr EMAC.MMC_RX_FPE_FRAGMENT_CNTR.R /*  */
#define EMAC_MAC_L3_L4_Control0 EMAC.MAC_L3_L4_CONTROL0.R  /*  */
#define EMAC_MAC_Layer4_Address0 EMAC.MAC_LAYER4_ADDRESS0.R /*  */
#define EMAC_MAC_Layer3_Addr0_Reg0 EMAC.MAC_LAYER3_ADDR0_REG0.R /*  */
#define EMAC_MAC_Layer3_Addr1_Reg0 EMAC.MAC_LAYER3_ADDR1_REG0.R /*  */
#define EMAC_MAC_Layer3_Addr2_Reg0 EMAC.MAC_LAYER3_ADDR2_REG0.R /*  */
#define EMAC_MAC_Layer3_Addr3_Reg0 EMAC.MAC_LAYER3_ADDR3_REG0.R /*  */
#define EMAC_MAC_L3_L4_Control1 EMAC.MAC_L3_L4_CONTROL1.R  /*  */
#define EMAC_MAC_Layer4_Address1 EMAC.MAC_LAYER4_ADDRESS1.R /*  */
#define EMAC_MAC_Layer3_Addr0_Reg1 EMAC.MAC_LAYER3_ADDR0_REG1.R /*  */
#define EMAC_MAC_Layer3_Addr1_Reg1 EMAC.MAC_LAYER3_ADDR1_REG1.R /*  */
#define EMAC_MAC_Layer3_Addr2_Reg1 EMAC.MAC_LAYER3_ADDR2_REG1.R /*  */
#define EMAC_MAC_Layer3_Addr3_Reg1 EMAC.MAC_LAYER3_ADDR3_REG1.R /*  */
#define EMAC_MAC_L3_L4_Control2 EMAC.MAC_L3_L4_CONTROL2.R  /*  */
#define EMAC_MAC_Layer4_Address2 EMAC.MAC_LAYER4_ADDRESS2.R /*  */
#define EMAC_MAC_Layer3_Addr0_Reg2 EMAC.MAC_LAYER3_ADDR0_REG2.R /*  */
#define EMAC_MAC_Layer3_Addr1_Reg2 EMAC.MAC_LAYER3_ADDR1_REG2.R /*  */
#define EMAC_MAC_Layer3_Addr2_Reg2 EMAC.MAC_LAYER3_ADDR2_REG2.R /*  */
#define EMAC_MAC_Layer3_Addr3_Reg2 EMAC.MAC_LAYER3_ADDR3_REG2.R /*  */
#define EMAC_MAC_L3_L4_Control3 EMAC.MAC_L3_L4_CONTROL3.R  /*  */
#define EMAC_MAC_Layer4_Address3 EMAC.MAC_LAYER4_ADDRESS3.R /*  */
#define EMAC_MAC_Layer3_Addr0_Reg3 EMAC.MAC_LAYER3_ADDR0_REG3.R /*  */
#define EMAC_MAC_Layer3_Addr1_Reg3 EMAC.MAC_LAYER3_ADDR1_REG3.R /*  */
#define EMAC_MAC_Layer3_Addr2_Reg3 EMAC.MAC_LAYER3_ADDR2_REG3.R /*  */
#define EMAC_MAC_Layer3_Addr3_Reg3 EMAC.MAC_LAYER3_ADDR3_REG3.R /*  */
#define EMAC_MAC_Timestamp_Control EMAC.MAC_TIMESTAMP_CONTROL.R /*  */
#define EMAC_MAC_Sub_Second_Increment EMAC.MAC_SUB_SECOND_INCREMENT.R /*  */
#define EMAC_MAC_System_Time_Seconds EMAC.MAC_SYSTEM_TIME_SECONDS.R /*  */
#define EMAC_MAC_System_Time_Nanoseconds EMAC.MAC_SYSTEM_TIME_NANOSECONDS.R /*  */
#define EMAC_MAC_System_Time_Seconds_Update EMAC.MAC_SYSTEM_TIME_SECONDS_UPDATE.R /*  */
#define EMAC_MAC_System_Time_Nanoseconds_Update EMAC.MAC_SYSTEM_TIME_NANOSECONDS_UPDATE.R /*  */
#define EMAC_MAC_Timestamp_Addend EMAC.MAC_TIMESTAMP_ADDEND.R /*  */
#define EMAC_MAC_System_Time_Higher_Word_Seconds EMAC.MAC_SYSTEM_TIME_HIGHER_WORD_SECONDS.R /*  */
#define EMAC_MAC_Timestamp_Status EMAC.MAC_TIMESTAMP_STATUS.R /*  */
#define EMAC_MAC_Tx_Timestamp_Status_Nanoseconds EMAC.MAC_TX_TIMESTAMP_STATUS_NANOSECONDS.R /*  */
#define EMAC_MAC_Tx_Timestamp_Status_Seconds EMAC.MAC_TX_TIMESTAMP_STATUS_SECONDS.R /*  */
#define EMAC_MAC_Timestamp_Ingress_Asym_Corr EMAC.MAC_TIMESTAMP_INGRESS_ASYM_CORR.R /*  */
#define EMAC_MAC_Timestamp_Egress_Asym_Corr EMAC.MAC_TIMESTAMP_EGRESS_ASYM_CORR.R /*  */
#define EMAC_MAC_Timestamp_Ingress_Corr_Nanosecond EMAC.MAC_TIMESTAMP_INGRESS_CORR_NANOSECOND.R /*  */
#define EMAC_MAC_Timestamp_Egress_Corr_Nanosecond EMAC.MAC_TIMESTAMP_EGRESS_CORR_NANOSECOND.R /*  */
#define EMAC_MAC_Timestamp_Ingress_Corr_Subnanosec EMAC.MAC_TIMESTAMP_INGRESS_CORR_SUBNANOSEC.R /*  */
#define EMAC_MAC_Timestamp_Egress_Corr_Subnanosec EMAC.MAC_TIMESTAMP_EGRESS_CORR_SUBNANOSEC.R /*  */
#define EMAC_MAC_Timestamp_Ingress_Latency EMAC.MAC_TIMESTAMP_INGRESS_LATENCY.R /*  */
#define EMAC_MAC_Timestamp_Egress_Latency EMAC.MAC_TIMESTAMP_EGRESS_LATENCY.R /*  */
#define EMAC_MAC_PPS_Control EMAC.MAC_PPS_CONTROL.R        /*  */
#define EMAC_MAC_PPS0_Target_Time_Seconds EMAC.MAC_PPS0_TARGET_TIME_SECONDS.R /*  */
#define EMAC_MAC_PPS0_Target_Time_Nanoseconds EMAC.MAC_PPS0_TARGET_TIME_NANOSECONDS.R /*  */
#define EMAC_MAC_PPS0_Interval EMAC.MAC_PPS0_INTERVAL.R    /*  */
#define EMAC_MAC_PPS0_Width  EMAC.MAC_PPS0_WIDTH.R         /*  */
#define EMAC_MAC_PPS1_Target_Time_Seconds EMAC.MAC_PPS1_TARGET_TIME_SECONDS.R /*  */
#define EMAC_MAC_PPS1_Target_Time_Nanoseconds EMAC.MAC_PPS1_TARGET_TIME_NANOSECONDS.R /*  */
#define EMAC_MAC_PPS1_Interval EMAC.MAC_PPS1_INTERVAL.R    /*  */
#define EMAC_MAC_PPS1_Width  EMAC.MAC_PPS1_WIDTH.R         /*  */
#define EMAC_MAC_PPS2_Target_Time_Seconds EMAC.MAC_PPS2_TARGET_TIME_SECONDS.R /*  */
#define EMAC_MAC_PPS2_Target_Time_Nanoseconds EMAC.MAC_PPS2_TARGET_TIME_NANOSECONDS.R /*  */
#define EMAC_MAC_PPS2_Interval EMAC.MAC_PPS2_INTERVAL.R    /*  */
#define EMAC_MAC_PPS2_Width  EMAC.MAC_PPS2_WIDTH.R         /*  */
#define EMAC_MAC_PPS3_Target_Time_Seconds EMAC.MAC_PPS3_TARGET_TIME_SECONDS.R /*  */
#define EMAC_MAC_PPS3_Target_Time_Nanoseconds EMAC.MAC_PPS3_TARGET_TIME_NANOSECONDS.R /*  */
#define EMAC_MAC_PPS3_Interval EMAC.MAC_PPS3_INTERVAL.R    /*  */
#define EMAC_MAC_PPS3_Width  EMAC.MAC_PPS3_WIDTH.R         /*  */
#define EMAC_MTL_Operation_Mode EMAC.MTL_OPERATION_MODE.R  /*  */
#define EMAC_MTL_DBG_CTL     EMAC.MTL_DBG_CTL.R            /*  */
#define EMAC_MTL_DBG_STS     EMAC.MTL_DBG_STS.R            /*  */
#define EMAC_MTL_FIFO_Debug_Data EMAC.MTL_FIFO_DEBUG_DATA.R /*  */
#define EMAC_MTL_Interrupt_Status EMAC.MTL_INTERRUPT_STATUS.R /*  */
#define EMAC_MTL_RxQ_DMA_Map0 EMAC.MTL_RXQ_DMA_MAP0.R      /*  */
#define EMAC_MTL_TBS_CTRL    EMAC.MTL_TBS_CTRL.R           /*  */
#define EMAC_MTL_EST_Control EMAC.MTL_EST_CONTROL.R        /*  */
#define EMAC_MTL_EST_Status  EMAC.MTL_EST_STATUS.R         /*  */
#define EMAC_MTL_EST_Sch_Error EMAC.MTL_EST_SCH_ERROR.R    /*  */
#define EMAC_MTL_EST_Frm_Size_Error EMAC.MTL_EST_FRM_SIZE_ERROR.R /*  */
#define EMAC_MTL_EST_Frm_Size_Capture EMAC.MTL_EST_FRM_SIZE_CAPTURE.R /*  */
#define EMAC_MTL_EST_Intr_Enable EMAC.MTL_EST_INTR_ENABLE.R /*  */
#define EMAC_MTL_EST_GCL_Control EMAC.MTL_EST_GCL_CONTROL.R /*  */
#define EMAC_MTL_EST_GCL_Data EMAC.MTL_EST_GCL_DATA.R      /*  */
#define EMAC_MTL_FPE_CTRL_STS EMAC.MTL_FPE_CTRL_STS.R      /*  */
#define EMAC_MTL_FPE_Advance EMAC.MTL_FPE_ADVANCE.R        /*  */
#define EMAC_MTL_RXP_Control_Status EMAC.MTL_RXP_CONTROL_STATUS.R /*  */
#define EMAC_MTL_RXP_Interrupt_Control_Status EMAC.MTL_RXP_INTERRUPT_CONTROL_STATUS.R /*  */
#define EMAC_MTL_RXP_Drop_Cnt EMAC.MTL_RXP_DROP_CNT.R      /*  */
#define EMAC_MTL_RXP_Error_Cnt EMAC.MTL_RXP_ERROR_CNT.R    /*  */
#define EMAC_MTL_RXP_Indirect_Acc_Control_Status EMAC.MTL_RXP_INDIRECT_ACC_CONTROL_STATUS.R /*  */
#define EMAC_MTL_RXP_Indirect_Acc_Data EMAC.MTL_RXP_INDIRECT_ACC_DATA.R /*  */
#define EMAC_MTL_ECC_Control EMAC.MTL_ECC_CONTROL.R        /*  */
#define EMAC_MTL_Safety_Interrupt_Status EMAC.MTL_SAFETY_INTERRUPT_STATUS.R /*  */
#define EMAC_MTL_ECC_Interrupt_Enable EMAC.MTL_ECC_INTERRUPT_ENABLE.R /*  */
#define EMAC_MTL_ECC_Interrupt_Status EMAC.MTL_ECC_INTERRUPT_STATUS.R /*  */
#define EMAC_MTL_ECC_Err_Sts_Rctl EMAC.MTL_ECC_ERR_STS_RCTL.R /*  */
#define EMAC_MTL_ECC_Err_Addr_Status EMAC.MTL_ECC_ERR_ADDR_STATUS.R /*  */
#define EMAC_MTL_ECC_Err_Cntr_Status EMAC.MTL_ECC_ERR_CNTR_STATUS.R /*  */
#define EMAC_MTL_DPP_Control EMAC.MTL_DPP_CONTROL.R        /*  */
#define EMAC_MTL_TxQ0_Operation_Mode EMAC.MTL_TXQ0_OPERATION_MODE.R /*  */
#define EMAC_MTL_TxQ0_Underflow EMAC.MTL_TXQ0_UNDERFLOW.R  /*  */
#define EMAC_MTL_TxQ0_Debug  EMAC.MTL_TXQ0_DEBUG.R         /*  */
#define EMAC_MTL_TxQ0_ETS_Status EMAC.MTL_TXQ0_ETS_STATUS.R /*  */
#define EMAC_MTL_TxQ0_Quantum_Weight EMAC.MTL_TXQ0_QUANTUM_WEIGHT.R /*  */
#define EMAC_MTL_Q0_Interrupt_Control_Status EMAC.MTL_Q0_INTERRUPT_CONTROL_STATUS.R /*  */
#define EMAC_MTL_RxQ0_Operation_Mode EMAC.MTL_RXQ0_OPERATION_MODE.R /*  */
#define EMAC_MTL_RxQ0_Missed_Packet_Overflow_Cnt EMAC.MTL_RXQ0_MISSED_PACKET_OVERFLOW_CNT.R /*  */
#define EMAC_MTL_RxQ0_Debug  EMAC.MTL_RXQ0_DEBUG.R         /*  */
#define EMAC_MTL_RxQ0_Control EMAC.MTL_RXQ0_CONTROL.R      /*  */
#define EMAC_MTL_TxQ1_Operation_Mode EMAC.MTL_TXQ1_OPERATION_MODE.R /*  */
#define EMAC_MTL_TxQ1_Underflow EMAC.MTL_TXQ1_UNDERFLOW.R  /*  */
#define EMAC_MTL_TxQ1_Debug  EMAC.MTL_TXQ1_DEBUG.R         /*  */
#define EMAC_MTL_TxQ1_ETS_Control EMAC.MTL_TXQ1_ETS_CONTROL.R /*  */
#define EMAC_MTL_TxQ1_ETS_Status EMAC.MTL_TXQ1_ETS_STATUS.R /*  */
#define EMAC_MTL_TxQ1_Quantum_Weight EMAC.MTL_TXQ1_QUANTUM_WEIGHT.R /*  */
#define EMAC_MTL_TxQ1_SendSlopeCredit EMAC.MTL_TXQ1_SENDSLOPECREDIT.R /*  */
#define EMAC_MTL_TxQ1_HiCredit EMAC.MTL_TXQ1_HICREDIT.R    /*  */
#define EMAC_MTL_TxQ1_LoCredit EMAC.MTL_TXQ1_LOCREDIT.R    /*  */
#define EMAC_MTL_Q1_Interrupt_Control_Status EMAC.MTL_Q1_INTERRUPT_CONTROL_STATUS.R /*  */
#define EMAC_MTL_RxQ1_Operation_Mode EMAC.MTL_RXQ1_OPERATION_MODE.R /*  */
#define EMAC_MTL_RxQ1_Missed_Packet_Overflow_Cnt EMAC.MTL_RXQ1_MISSED_PACKET_OVERFLOW_CNT.R /*  */
#define EMAC_MTL_RxQ1_Debug  EMAC.MTL_RXQ1_DEBUG.R         /*  */
#define EMAC_MTL_RxQ1_Control EMAC.MTL_RXQ1_CONTROL.R      /*  */
#define EMAC_DMA_Mode        EMAC.DMA_MODE.R               /*  */
#define EMAC_DMA_SysBus_Mode EMAC.DMA_SYSBUS_MODE.R        /*  */
#define EMAC_DMA_Interrupt_Status EMAC.DMA_INTERRUPT_STATUS.R /*  */
#define EMAC_DMA_Debug_Status0 EMAC.DMA_DEBUG_STATUS0.R    /*  */
#define EMAC_DMA_TBS_CTRL    EMAC.DMA_TBS_CTRL.R           /*  */
#define EMAC_DMA_Safety_Interrupt_Status EMAC.DMA_SAFETY_INTERRUPT_STATUS.R /*  */
#define EMAC_DMA_CH0_Control EMAC.DMA_CH0_CONTROL.R        /*  */
#define EMAC_DMA_CH0_Tx_Control EMAC.DMA_CH0_TX_CONTROL.R  /*  */
#define EMAC_DMA_CH0_Rx_Control EMAC.DMA_CH0_RX_CONTROL.R  /*  */
#define EMAC_DMA_CH0_TxDesc_List_Address EMAC.DMA_CH0_TXDESC_LIST_ADDRESS.R /*  */
#define EMAC_DMA_CH0_RxDesc_List_Address EMAC.DMA_CH0_RXDESC_LIST_ADDRESS.R /*  */
#define EMAC_DMA_CH0_TxDesc_Tail_Pointer EMAC.DMA_CH0_TXDESC_TAIL_POINTER.R /*  */
#define EMAC_DMA_CH0_RxDesc_Tail_Pointer EMAC.DMA_CH0_RXDESC_TAIL_POINTER.R /*  */
#define EMAC_DMA_CH0_TxDesc_Ring_Length EMAC.DMA_CH0_TXDESC_RING_LENGTH.R /*  */
#define EMAC_DMA_CH0_RxDesc_Ring_Length EMAC.DMA_CH0_RXDESC_RING_LENGTH.R /*  */
#define EMAC_DMA_CH0_Interrupt_Enable EMAC.DMA_CH0_INTERRUPT_ENABLE.R /*  */
#define EMAC_DMA_CH0_Rx_Interrupt_Watchdog_Timer EMAC.DMA_CH0_RX_INTERRUPT_WATCHDOG_TIMER.R /*  */
#define EMAC_DMA_CH0_Slot_Function_Control_Status EMAC.DMA_CH0_SLOT_FUNCTION_CONTROL_STATUS.R /*  */
#define EMAC_DMA_CH0_Current_App_TxDesc EMAC.DMA_CH0_CURRENT_APP_TXDESC.R /*  */
#define EMAC_DMA_CH0_Current_App_RxDesc EMAC.DMA_CH0_CURRENT_APP_RXDESC.R /*  */
#define EMAC_DMA_CH0_Current_App_TxBuffer EMAC.DMA_CH0_CURRENT_APP_TXBUFFER.R /*  */
#define EMAC_DMA_CH0_Current_App_RxBuffer EMAC.DMA_CH0_CURRENT_APP_RXBUFFER.R /*  */
#define EMAC_DMA_CH0_Status  EMAC.DMA_CH0_STATUS.R         /*  */
#define EMAC_DMA_CH0_Miss_Frame_Cnt EMAC.DMA_CH0_MISS_FRAME_CNT.R /*  */
#define EMAC_DMA_CH0_RXP_Accept_Cnt EMAC.DMA_CH0_RXP_ACCEPT_CNT.R /*  */
#define EMAC_DMA_CH0_RX_ERI_Cnt EMAC.DMA_CH0_RX_ERI_CNT.R  /*  */
#define EMAC_DMA_CH1_Control EMAC.DMA_CH1_CONTROL.R        /*  */
#define EMAC_DMA_CH1_Tx_Control EMAC.DMA_CH1_TX_CONTROL.R  /*  */
#define EMAC_DMA_CH1_Rx_Control EMAC.DMA_CH1_RX_CONTROL.R  /*  */
#define EMAC_DMA_CH1_TxDesc_List_Address EMAC.DMA_CH1_TXDESC_LIST_ADDRESS.R /*  */
#define EMAC_DMA_CH1_RxDesc_List_Address EMAC.DMA_CH1_RXDESC_LIST_ADDRESS.R /*  */
#define EMAC_DMA_CH1_TxDesc_Tail_Pointer EMAC.DMA_CH1_TXDESC_TAIL_POINTER.R /*  */
#define EMAC_DMA_CH1_RxDesc_Tail_Pointer EMAC.DMA_CH1_RXDESC_TAIL_POINTER.R /*  */
#define EMAC_DMA_CH1_TxDesc_Ring_Length EMAC.DMA_CH1_TXDESC_RING_LENGTH.R /*  */
#define EMAC_DMA_CH1_RxDesc_Ring_Length EMAC.DMA_CH1_RXDESC_RING_LENGTH.R /*  */
#define EMAC_DMA_CH1_Interrupt_Enable EMAC.DMA_CH1_INTERRUPT_ENABLE.R /*  */
#define EMAC_DMA_CH1_Rx_Interrupt_Watchdog_Timer EMAC.DMA_CH1_RX_INTERRUPT_WATCHDOG_TIMER.R /*  */
#define EMAC_DMA_CH1_Slot_Function_Control_Status EMAC.DMA_CH1_SLOT_FUNCTION_CONTROL_STATUS.R /*  */
#define EMAC_DMA_CH1_Current_App_TxDesc EMAC.DMA_CH1_CURRENT_APP_TXDESC.R /*  */
#define EMAC_DMA_CH1_Current_App_RxDesc EMAC.DMA_CH1_CURRENT_APP_RXDESC.R /*  */
#define EMAC_DMA_CH1_Current_App_TxBuffer EMAC.DMA_CH1_CURRENT_APP_TXBUFFER.R /*  */
#define EMAC_DMA_CH1_Current_App_RxBuffer EMAC.DMA_CH1_CURRENT_APP_RXBUFFER.R /*  */
#define EMAC_DMA_CH1_Status  EMAC.DMA_CH1_STATUS.R         /*  */
#define EMAC_DMA_CH1_Miss_Frame_Cnt EMAC.DMA_CH1_MISS_FRAME_CNT.R /*  */
#define EMAC_DMA_CH1_RXP_Accept_Cnt EMAC.DMA_CH1_RXP_ACCEPT_CNT.R /*  */
#define EMAC_DMA_CH1_RX_ERI_Cnt EMAC.DMA_CH1_RX_ERI_CNT.R  /*  */

/* ERM */
#define ERM_CR0              ERM.CR0.R                     /* ERM Configuration Register 0 */
#define ERM_CR1              ERM.CR1.R                     /* ERM Configuration Register 1 */
#define ERM_CR2              ERM.CR2.R                     /* ERM Configuration Register 2 */
#define ERM_SR0              ERM.SR0.R                     /* ERM Status Register 0 */
#define ERM_SR1              ERM.SR1.R                     /* ERM Status Register 1 */
#define ERM_SR2              ERM.SR2.R                     /* ERM Status Register 2 */
#define ERM_EAR0             ERM.EAR0.R                    /* ERM Memory 0 Error Address Register */
#define ERM_SYN0             ERM.SYN0.R                    /* ERM Memory 0 Syndrome Register */
#define ERM_CORR_ERR_CNT0    ERM.CORR_ERR_CNT0.R           /* ERM Memory 0 Correctable Error Count Register */
#define ERM_EAR1             ERM.EAR1.R                    /* ERM Memory 1 Error Address Register */
#define ERM_SYN1             ERM.SYN1.R                    /* ERM Memory 1 Syndrome Register */
#define ERM_CORR_ERR_CNT1    ERM.CORR_ERR_CNT1.R           /* ERM Memory 1 Correctable Error Count Register */
#define ERM_CORR_ERR_CNT2    ERM.CORR_ERR_CNT2.R           /* ERM Memory 2 Correctable Error Count Register */
#define ERM_CORR_ERR_CNT3    ERM.CORR_ERR_CNT3.R           /* ERM Memory 3 Correctable Error Count Register */
#define ERM_CORR_ERR_CNT4    ERM.CORR_ERR_CNT4.R           /* ERM Memory 4 Correctable Error Count Register */
#define ERM_CORR_ERR_CNT5    ERM.CORR_ERR_CNT5.R           /* ERM Memory 5 Correctable Error Count Register */
#define ERM_CORR_ERR_CNT6    ERM.CORR_ERR_CNT6.R           /* ERM Memory 6 Correctable Error Count Register */
#define ERM_CORR_ERR_CNT7    ERM.CORR_ERR_CNT7.R           /* ERM Memory 7 Correctable Error Count Register */
#define ERM_CORR_ERR_CNT8    ERM.CORR_ERR_CNT8.R           /* ERM Memory 8 Correctable Error Count Register */
#define ERM_CORR_ERR_CNT9    ERM.CORR_ERR_CNT9.R           /* ERM Memory 9 Correctable Error Count Register */
#define ERM_EAR10            ERM.EAR10.R                   /* ERM Memory 10 Error Address Register */
#define ERM_SYN10            ERM.SYN10.R                   /* ERM Memory 10 Syndrome Register */
#define ERM_CORR_ERR_CNT10   ERM.CORR_ERR_CNT10.R          /* ERM Memory 10 Correctable Error Count Register */
#define ERM_EAR11            ERM.EAR11.R                   /* ERM Memory 11 Error Address Register */
#define ERM_SYN11            ERM.SYN11.R                   /* ERM Memory 11 Syndrome Register */
#define ERM_CORR_ERR_CNT11   ERM.CORR_ERR_CNT11.R          /* ERM Memory 11 Correctable Error Count Register */
#define ERM_EAR12            ERM.EAR12.R                   /* ERM Memory 12 Error Address Register */
#define ERM_SYN12            ERM.SYN12.R                   /* ERM Memory 12 Syndrome Register */
#define ERM_CORR_ERR_CNT12   ERM.CORR_ERR_CNT12.R          /* ERM Memory 12 Correctable Error Count Register */
#define ERM_EAR13            ERM.EAR13.R                   /* ERM Memory 13 Error Address Register */
#define ERM_SYN13            ERM.SYN13.R                   /* ERM Memory 13 Syndrome Register */
#define ERM_CORR_ERR_CNT13   ERM.CORR_ERR_CNT13.R          /* ERM Memory 13 Correctable Error Count Register */
#define ERM_EAR14            ERM.EAR14.R                   /* ERM Memory 14 Error Address Register */
#define ERM_SYN14            ERM.SYN14.R                   /* ERM Memory 14 Syndrome Register */
#define ERM_CORR_ERR_CNT14   ERM.CORR_ERR_CNT14.R          /* ERM Memory 14 Correctable Error Count Register */
#define ERM_EAR15            ERM.EAR15.R                   /* ERM Memory 15 Error Address Register */
#define ERM_SYN15            ERM.SYN15.R                   /* ERM Memory 15 Syndrome Register */
#define ERM_CORR_ERR_CNT15   ERM.CORR_ERR_CNT15.R          /* ERM Memory 15 Correctable Error Count Register */
#define ERM_EAR16            ERM.EAR16.R                   /* ERM Memory 16 Error Address Register */
#define ERM_SYN16            ERM.SYN16.R                   /* ERM Memory 16 Syndrome Register */
#define ERM_CORR_ERR_CNT16   ERM.CORR_ERR_CNT16.R          /* ERM Memory 16 Correctable Error Count Register */
#define ERM_EAR17            ERM.EAR17.R                   /* ERM Memory 17 Error Address Register */
#define ERM_CORR_ERR_CNT17   ERM.CORR_ERR_CNT17.R          /* ERM Memory 17 Correctable Error Count Register */
#define ERM_EAR18            ERM.EAR18.R                   /* ERM Memory 18 Error Address Register */
#define ERM_CORR_ERR_CNT18   ERM.CORR_ERR_CNT18.R          /* ERM Memory 18 Correctable Error Count Register */
#define ERM_EAR19            ERM.EAR19.R                   /* ERM Memory 19 Error Address Register */
#define ERM_CORR_ERR_CNT19   ERM.CORR_ERR_CNT19.R          /* ERM Memory 19 Correctable Error Count Register */

/* FCCU */
#define FCCU_CTRL            FCCU.CTRL.R                   /* Control */
#define FCCU_CTRLK           FCCU.CTRLK.R                  /* Control Key */
#define FCCU_CFG             FCCU.CFG.R                    /* Configuration */
#define FCCU_NCF_CFG0        FCCU.NCF_CFG[0].R             /* Non-critical Fault Configuration */
#define FCCU_NCFS_CFG0       FCCU.NCFS_CFG[0].R            /* Non-critical Fault-State Configuration */
#define FCCU_NCF_S0          FCCU.NCF_S[0].R               /* Non-critical Fault Status */
#define FCCU_NCFK            FCCU.NCFK.R                   /* Non-critical Fault Key */
#define FCCU_NCF_E0          FCCU.NCF_E[0].R               /* Non-critical Fault Enable */
#define FCCU_NCF_TOE0        FCCU.NCF_TOE[0].R             /* Non-critical-Fault Alarm-State Timeout Enable */
#define FCCU_NCF_TO          FCCU.NCF_TO.R                 /* Non-critical-Fault Alarm-State Timeout Interval */
#define FCCU_CFG_TO          FCCU.CFG_TO.R                 /* Configuration-State Timeout Interval */
#define FCCU_EINOUT          FCCU.EINOUT.R                 /* IO Control */
#define FCCU_STAT            FCCU.STAT.R                   /* Status */
#define FCCU_N2AF_STATUS     FCCU.N2AF_STATUS.R            /* Normal-to-Alarm Freeze Status */
#define FCCU_A2FF_STATUS     FCCU.A2FF_STATUS.R            /* Alarm-to-Fault Freeze Status */
#define FCCU_N2FF_STATUS     FCCU.N2FF_STATUS.R            /* Normal-to-Fault Freeze Status */
#define FCCU_F2AF_STATUS     FCCU.F2AF_STATUS.R            /* Fault-to-Alarm Freeze Status */
#define FCCU_NCFF            FCCU.NCFF.R                   /* Non-critical Fault Fake */
#define FCCU_IRQ_STAT        FCCU.IRQ_STAT.R               /* IRQ Status */
#define FCCU_IRQ_EN          FCCU.IRQ_EN.R                 /* IRQ Enable */
#define FCCU_TRANS_LOCK      FCCU.TRANS_LOCK.R             /* Transient Configuration Lock */
#define FCCU_PERMNT_LOCK     FCCU.PERMNT_LOCK.R            /* Permanent Configuration Lock */
#define FCCU_DELTA_T         FCCU.DELTA_T.R                /* Delta T */
#define FCCU_IRQ_ALARM_EN0   FCCU.IRQ_ALARM_EN[0].R        /* Non-critical Alarm-State Interrupt-Request Enable */
#define FCCU_NMI_EN0         FCCU.NMI_EN[0].R              /* Non-critical Fault-State Non-maskable-Interrupt-Request Enable */
#define FCCU_EOUT_SIG_EN0    FCCU.EOUT_SIG_EN[0].R         /* Non-critical Fault-State EOUT Signaling Enable */
#define FCCU_TMR_ALARM       FCCU.TMR_ALARM.R              /* Alarm-State Timer */
#define FCCU_TMR_CFG         FCCU.TMR_CFG.R                /* Configuration-State Timer */
#define FCCU_TMR_ETMR        FCCU.TMR_ETMR.R               /* Fault-Output Timer */

/* FIRC */
#define FIRC_Status_Register FIRC.STATUS_REGISTER.R        /* Status Register */
#define FIRC_STDBY_ENABLE    FIRC.STDBY_ENABLE.R           /* Standby Enable Register */

/* FLASH */
#define FLASH_MCR            FLASH.MCR.R                   /* Module Configuration Register */
#define FLASH_MCRS           FLASH.MCRS.R                  /* Module Configuration Status Register */
#define FLASH_MCRE           FLASH.MCRE.R                  /* Extended Module Configuration Register */
#define FLASH_CTL            FLASH.CTL.R                   /* Module Control Register */
#define FLASH_ADR            FLASH.ADR.R                   /* Address register */
#define FLASH_PEADR          FLASH.PEADR.R                 /* Program and Erase Address register */
#define FLASH_AMCR           FLASH.AMCR.R                  /* Alternate Module Configuration Register */
#define FLASH_AMCRS          FLASH.AMCRS.R                 /* Alternate Module Configuration Status Register */
#define FLASH_APEADR         FLASH.APEADR.R                /* Alternate Program and Erase Address register */
#define FLASH_ADATA0         FLASH.ADATA[0].R              /* Alternate Program Data Register */
#define FLASH_ADATA1         FLASH.ADATA[1].R              /* Alternate Program Data Register */
#define FLASH_ADATA2         FLASH.ADATA[2].R              /* Alternate Program Data Register */
#define FLASH_ADATA3         FLASH.ADATA[3].R              /* Alternate Program Data Register */
#define FLASH_ADATA4         FLASH.ADATA[4].R              /* Alternate Program Data Register */
#define FLASH_ADATA5         FLASH.ADATA[5].R              /* Alternate Program Data Register */
#define FLASH_ADATA6         FLASH.ADATA[6].R              /* Alternate Program Data Register */
#define FLASH_ADATA7         FLASH.ADATA[7].R              /* Alternate Program Data Register */
#define FLASH_SPELOCK        FLASH.SPELOCK.R               /* Sector Program and Erase Hardware Lock register */
#define FLASH_SSPELOCK       FLASH.SSPELOCK.R              /* Super Sector Program and Erase Hardware Lock register */
#define FLASH_ASPELOCK       FLASH.ASPELOCK.R              /* Alternate Sector Program and Erase Hardware Lock register */
#define FLASH_ASSPELOCK      FLASH.ASSPELOCK.R             /* Alternate Super Sector Program and Erase Hardware Lock register */
#define FLASH_XSPELOCK       FLASH.XSPELOCK.R              /* Express Sector Program and Erase Hardware Lock register */
#define FLASH_XSSPELOCK      FLASH.XSSPELOCK.R             /* Express Super Sector Program and Erase Hardware Lock register */
#define FLASH_TMD            FLASH.TMD.R                   /* Test Mode Disable Password Check register */
#define FLASH_UT0            FLASH.UT0.R                   /* UTest 0 register */
#define FLASH_UM0            FLASH.UM[0].R                 /* UMISRn register */
#define FLASH_UM1            FLASH.UM[1].R                 /* UMISRn register */
#define FLASH_UM2            FLASH.UM[2].R                 /* UMISRn register */
#define FLASH_UM3            FLASH.UM[3].R                 /* UMISRn register */
#define FLASH_UM4            FLASH.UM[4].R                 /* UMISRn register */
#define FLASH_UM5            FLASH.UM[5].R                 /* UMISRn register */
#define FLASH_UM6            FLASH.UM[6].R                 /* UMISRn register */
#define FLASH_UM7            FLASH.UM[7].R                 /* UMISRn register */
#define FLASH_UM8            FLASH.UM[8].R                 /* UMISRn register */
#define FLASH_UM9            FLASH.UM9.R                   /* UMISR9 register */
#define FLASH_UD0            FLASH.UD0.R                   /* UTest Data 0 Register */
#define FLASH_UD1            FLASH.UD1.R                   /* UTest Data 1 Register */
#define FLASH_UD2            FLASH.UD2.R                   /* UTest Data 2 Register */
#define FLASH_UD3            FLASH.UD3.R                   /* UTest Data 3 Register */
#define FLASH_UD4            FLASH.UD4.R                   /* UTest Data 4 Register */
#define FLASH_UD5            FLASH.UD5.R                   /* UTest Data 5 Register */
#define FLASH_UA0            FLASH.UA0.R                   /* UTest Address 0 Register */
#define FLASH_UA1            FLASH.UA1.R                   /* UTest Address 1 Register */
#define FLASH_XMCR           FLASH.XMCR.R                  /* Express Module Configuration Register */
#define FLASH_XPEADR         FLASH.XPEADR.R                /* Express Program Address register */
#define FLASH_DATA0          FLASH.DATA[0].R               /* Program Data Register */
#define FLASH_DATA1          FLASH.DATA[1].R               /* Program Data Register */
#define FLASH_DATA2          FLASH.DATA[2].R               /* Program Data Register */
#define FLASH_DATA3          FLASH.DATA[3].R               /* Program Data Register */
#define FLASH_DATA4          FLASH.DATA[4].R               /* Program Data Register */
#define FLASH_DATA5          FLASH.DATA[5].R               /* Program Data Register */
#define FLASH_DATA6          FLASH.DATA[6].R               /* Program Data Register */
#define FLASH_DATA7          FLASH.DATA[7].R               /* Program Data Register */
#define FLASH_DATA8          FLASH.DATA[8].R               /* Program Data Register */
#define FLASH_DATA9          FLASH.DATA[9].R               /* Program Data Register */
#define FLASH_DATA10         FLASH.DATA[10].R              /* Program Data Register */
#define FLASH_DATA11         FLASH.DATA[11].R              /* Program Data Register */
#define FLASH_DATA12         FLASH.DATA[12].R              /* Program Data Register */
#define FLASH_DATA13         FLASH.DATA[13].R              /* Program Data Register */
#define FLASH_DATA14         FLASH.DATA[14].R              /* Program Data Register */
#define FLASH_DATA15         FLASH.DATA[15].R              /* Program Data Register */
#define FLASH_DATA16         FLASH.DATA[16].R              /* Program Data Register */
#define FLASH_DATA17         FLASH.DATA[17].R              /* Program Data Register */
#define FLASH_DATA18         FLASH.DATA[18].R              /* Program Data Register */
#define FLASH_DATA19         FLASH.DATA[19].R              /* Program Data Register */
#define FLASH_DATA20         FLASH.DATA[20].R              /* Program Data Register */
#define FLASH_DATA21         FLASH.DATA[21].R              /* Program Data Register */
#define FLASH_DATA22         FLASH.DATA[22].R              /* Program Data Register */
#define FLASH_DATA23         FLASH.DATA[23].R              /* Program Data Register */
#define FLASH_DATA24         FLASH.DATA[24].R              /* Program Data Register */
#define FLASH_DATA25         FLASH.DATA[25].R              /* Program Data Register */
#define FLASH_DATA26         FLASH.DATA[26].R              /* Program Data Register */
#define FLASH_DATA27         FLASH.DATA[27].R              /* Program Data Register */
#define FLASH_DATA28         FLASH.DATA[28].R              /* Program Data Register */
#define FLASH_DATA29         FLASH.DATA[29].R              /* Program Data Register */
#define FLASH_DATA30         FLASH.DATA[30].R              /* Program Data Register */
#define FLASH_DATA31         FLASH.DATA[31].R              /* Program Data Register */

#define FLASH_ALT_MCR        FLASH_ALT.MCR.R               /* Module Configuration Register */
#define FLASH_ALT_MCRS       FLASH_ALT.MCRS.R              /* Module Configuration Status Register */
#define FLASH_ALT_MCRE       FLASH_ALT.MCRE.R              /* Extended Module Configuration Register */
#define FLASH_ALT_CTL        FLASH_ALT.CTL.R               /* Module Control Register */
#define FLASH_ALT_ADR        FLASH_ALT.ADR.R               /* Address register */
#define FLASH_ALT_PEADR      FLASH_ALT.PEADR.R             /* Program and Erase Address register */
#define FLASH_ALT_AMCR       FLASH_ALT.AMCR.R              /* Alternate Module Configuration Register */
#define FLASH_ALT_AMCRS      FLASH_ALT.AMCRS.R             /* Alternate Module Configuration Status Register */
#define FLASH_ALT_APEADR     FLASH_ALT.APEADR.R            /* Alternate Program and Erase Address register */
#define FLASH_ALT_ADATA0     FLASH_ALT.ADATA[0].R          /* Alternate Program Data Register */
#define FLASH_ALT_ADATA1     FLASH_ALT.ADATA[1].R          /* Alternate Program Data Register */
#define FLASH_ALT_ADATA2     FLASH_ALT.ADATA[2].R          /* Alternate Program Data Register */
#define FLASH_ALT_ADATA3     FLASH_ALT.ADATA[3].R          /* Alternate Program Data Register */
#define FLASH_ALT_ADATA4     FLASH_ALT.ADATA[4].R          /* Alternate Program Data Register */
#define FLASH_ALT_ADATA5     FLASH_ALT.ADATA[5].R          /* Alternate Program Data Register */
#define FLASH_ALT_ADATA6     FLASH_ALT.ADATA[6].R          /* Alternate Program Data Register */
#define FLASH_ALT_ADATA7     FLASH_ALT.ADATA[7].R          /* Alternate Program Data Register */
#define FLASH_ALT_SPELOCK    FLASH_ALT.SPELOCK.R           /* Sector Program and Erase Hardware Lock register */
#define FLASH_ALT_SSPELOCK   FLASH_ALT.SSPELOCK.R          /* Super Sector Program and Erase Hardware Lock register */
#define FLASH_ALT_ASPELOCK   FLASH_ALT.ASPELOCK.R          /* Alternate Sector Program and Erase Hardware Lock register */
#define FLASH_ALT_ASSPELOCK  FLASH_ALT.ASSPELOCK.R         /* Alternate Super Sector Program and Erase Hardware Lock register */
#define FLASH_ALT_XSPELOCK   FLASH_ALT.XSPELOCK.R          /* Express Sector Program and Erase Hardware Lock register */
#define FLASH_ALT_XSSPELOCK  FLASH_ALT.XSSPELOCK.R         /* Express Super Sector Program and Erase Hardware Lock register */
#define FLASH_ALT_TMD        FLASH_ALT.TMD.R               /* Test Mode Disable Password Check register */
#define FLASH_ALT_UT0        FLASH_ALT.UT0.R               /* UTest 0 register */
#define FLASH_ALT_UM0        FLASH_ALT.UM[0].R             /* UMISRn register */
#define FLASH_ALT_UM1        FLASH_ALT.UM[1].R             /* UMISRn register */
#define FLASH_ALT_UM2        FLASH_ALT.UM[2].R             /* UMISRn register */
#define FLASH_ALT_UM3        FLASH_ALT.UM[3].R             /* UMISRn register */
#define FLASH_ALT_UM4        FLASH_ALT.UM[4].R             /* UMISRn register */
#define FLASH_ALT_UM5        FLASH_ALT.UM[5].R             /* UMISRn register */
#define FLASH_ALT_UM6        FLASH_ALT.UM[6].R             /* UMISRn register */
#define FLASH_ALT_UM7        FLASH_ALT.UM[7].R             /* UMISRn register */
#define FLASH_ALT_UM8        FLASH_ALT.UM[8].R             /* UMISRn register */
#define FLASH_ALT_UM9        FLASH_ALT.UM9.R               /* UMISR9 register */
#define FLASH_ALT_UD0        FLASH_ALT.UD0.R               /* UTest Data 0 Register */
#define FLASH_ALT_UD1        FLASH_ALT.UD1.R               /* UTest Data 1 Register */
#define FLASH_ALT_UD2        FLASH_ALT.UD2.R               /* UTest Data 2 Register */
#define FLASH_ALT_UD3        FLASH_ALT.UD3.R               /* UTest Data 3 Register */
#define FLASH_ALT_UD4        FLASH_ALT.UD4.R               /* UTest Data 4 Register */
#define FLASH_ALT_UD5        FLASH_ALT.UD5.R               /* UTest Data 5 Register */
#define FLASH_ALT_UA0        FLASH_ALT.UA0.R               /* UTest Address 0 Register */
#define FLASH_ALT_UA1        FLASH_ALT.UA1.R               /* UTest Address 1 Register */
#define FLASH_ALT_XMCR       FLASH_ALT.XMCR.R              /* Express Module Configuration Register */
#define FLASH_ALT_XPEADR     FLASH_ALT.XPEADR.R            /* Express Program Address register */
#define FLASH_ALT_DATA0      FLASH_ALT.DATA[0].R           /* Program Data Register */
#define FLASH_ALT_DATA1      FLASH_ALT.DATA[1].R           /* Program Data Register */
#define FLASH_ALT_DATA2      FLASH_ALT.DATA[2].R           /* Program Data Register */
#define FLASH_ALT_DATA3      FLASH_ALT.DATA[3].R           /* Program Data Register */
#define FLASH_ALT_DATA4      FLASH_ALT.DATA[4].R           /* Program Data Register */
#define FLASH_ALT_DATA5      FLASH_ALT.DATA[5].R           /* Program Data Register */
#define FLASH_ALT_DATA6      FLASH_ALT.DATA[6].R           /* Program Data Register */
#define FLASH_ALT_DATA7      FLASH_ALT.DATA[7].R           /* Program Data Register */
#define FLASH_ALT_DATA8      FLASH_ALT.DATA[8].R           /* Program Data Register */
#define FLASH_ALT_DATA9      FLASH_ALT.DATA[9].R           /* Program Data Register */
#define FLASH_ALT_DATA10     FLASH_ALT.DATA[10].R          /* Program Data Register */
#define FLASH_ALT_DATA11     FLASH_ALT.DATA[11].R          /* Program Data Register */
#define FLASH_ALT_DATA12     FLASH_ALT.DATA[12].R          /* Program Data Register */
#define FLASH_ALT_DATA13     FLASH_ALT.DATA[13].R          /* Program Data Register */
#define FLASH_ALT_DATA14     FLASH_ALT.DATA[14].R          /* Program Data Register */
#define FLASH_ALT_DATA15     FLASH_ALT.DATA[15].R          /* Program Data Register */
#define FLASH_ALT_DATA16     FLASH_ALT.DATA[16].R          /* Program Data Register */
#define FLASH_ALT_DATA17     FLASH_ALT.DATA[17].R          /* Program Data Register */
#define FLASH_ALT_DATA18     FLASH_ALT.DATA[18].R          /* Program Data Register */
#define FLASH_ALT_DATA19     FLASH_ALT.DATA[19].R          /* Program Data Register */
#define FLASH_ALT_DATA20     FLASH_ALT.DATA[20].R          /* Program Data Register */
#define FLASH_ALT_DATA21     FLASH_ALT.DATA[21].R          /* Program Data Register */
#define FLASH_ALT_DATA22     FLASH_ALT.DATA[22].R          /* Program Data Register */
#define FLASH_ALT_DATA23     FLASH_ALT.DATA[23].R          /* Program Data Register */
#define FLASH_ALT_DATA24     FLASH_ALT.DATA[24].R          /* Program Data Register */
#define FLASH_ALT_DATA25     FLASH_ALT.DATA[25].R          /* Program Data Register */
#define FLASH_ALT_DATA26     FLASH_ALT.DATA[26].R          /* Program Data Register */
#define FLASH_ALT_DATA27     FLASH_ALT.DATA[27].R          /* Program Data Register */
#define FLASH_ALT_DATA28     FLASH_ALT.DATA[28].R          /* Program Data Register */
#define FLASH_ALT_DATA29     FLASH_ALT.DATA[29].R          /* Program Data Register */
#define FLASH_ALT_DATA30     FLASH_ALT.DATA[30].R          /* Program Data Register */
#define FLASH_ALT_DATA31     FLASH_ALT.DATA[31].R          /* Program Data Register */

/* FLEXCAN */
#define CAN_3_MCR            CAN_3.MCR.R                   /* Module Configuration register */
#define CAN_3_CTRL1          CAN_3.CTRL1.R                 /* Control 1 register */
#define CAN_3_TIMER          CAN_3.TIMER.R                 /* Free Running Timer */
#define CAN_3_RXMGMASK       CAN_3.RXMGMASK.R              /* Rx Mailboxes Global Mask register */
#define CAN_3_RX14MASK       CAN_3.RX14MASK.R              /* Rx 14 Mask register */
#define CAN_3_RX15MASK       CAN_3.RX15MASK.R              /* Rx 15 Mask register */
#define CAN_3_ECR            CAN_3.ECR.R                   /* Error Counter */
#define CAN_3_ESR1           CAN_3.ESR1.R                  /* Error and Status 1 register */
#define CAN_3_IMASK1         CAN_3.IMASK1.R                /* Interrupt Masks 1 register */
#define CAN_3_IFLAG1         CAN_3.IFLAG1.R                /* Interrupt Flags 1 register */
#define CAN_3_CTRL2          CAN_3.CTRL2.R                 /* Control 2 register */
#define CAN_3_ESR2           CAN_3.ESR2.R                  /* Error and Status 2 register */
#define CAN_3_CRCR           CAN_3.CRCR.R                  /* CRC register */
#define CAN_3_RXFGMASK       CAN_3.RXFGMASK.R              /* Rx FIFO Global Mask register */
#define CAN_3_RXFIR          CAN_3.RXFIR.R                 /* Rx FIFO Information register */
#define CAN_3_CBT            CAN_3.CBT.R                   /* CAN Bit Timing register */
#define CAN_3_CS0            CAN_3.MB[0].CS.R              /* Message Buffer 0 CS Register */
#define CAN_3_ID0            CAN_3.MB[0].ID.R              /* Message Buffer 0 ID Register */
#define CAN_3_B0             CAN_3.MB[0].DATA.B            /* Message Buffer 0 B Register */
#define CAN_3_H0             CAN_3.MB[0].DATA.H            /* Message Buffer 0 H Register */
#define CAN_3_W0             CAN_3.MB[0].DATA.W            /* Message Buffer 0 W Register */
#define CAN_3_CS1            CAN_3.MB[1].CS.R              /* Message Buffer 1 CS Register */
#define CAN_3_ID1            CAN_3.MB[1].ID.R              /* Message Buffer 1 ID Register */
#define CAN_3_B1             CAN_3.MB[1].DATA.B            /* Message Buffer 1 B Register */
#define CAN_3_H1             CAN_3.MB[1].DATA.H            /* Message Buffer 1 H Register */
#define CAN_3_W1             CAN_3.MB[1].DATA.W            /* Message Buffer 1 W Register */
#define CAN_3_CS2            CAN_3.MB[2].CS.R              /* Message Buffer 2 CS Register */
#define CAN_3_ID2            CAN_3.MB[2].ID.R              /* Message Buffer 2 ID Register */
#define CAN_3_B2             CAN_3.MB[2].DATA.B            /* Message Buffer 2 B Register */
#define CAN_3_H2             CAN_3.MB[2].DATA.H            /* Message Buffer 2 H Register */
#define CAN_3_W2             CAN_3.MB[2].DATA.W            /* Message Buffer 2 W Register */
#define CAN_3_CS3            CAN_3.MB[3].CS.R              /* Message Buffer 3 CS Register */
#define CAN_3_ID3            CAN_3.MB[3].ID.R              /* Message Buffer 3 ID Register */
#define CAN_3_B3             CAN_3.MB[3].DATA.B            /* Message Buffer 3 B Register */
#define CAN_3_H3             CAN_3.MB[3].DATA.H            /* Message Buffer 3 H Register */
#define CAN_3_W3             CAN_3.MB[3].DATA.W            /* Message Buffer 3 W Register */
#define CAN_3_CS4            CAN_3.MB[4].CS.R              /* Message Buffer 4 CS Register */
#define CAN_3_ID4            CAN_3.MB[4].ID.R              /* Message Buffer 4 ID Register */
#define CAN_3_B4             CAN_3.MB[4].DATA.B            /* Message Buffer 4 B Register */
#define CAN_3_H4             CAN_3.MB[4].DATA.H            /* Message Buffer 4 H Register */
#define CAN_3_W4             CAN_3.MB[4].DATA.W            /* Message Buffer 4 W Register */
#define CAN_3_CS5            CAN_3.MB[5].CS.R              /* Message Buffer 5 CS Register */
#define CAN_3_ID5            CAN_3.MB[5].ID.R              /* Message Buffer 5 ID Register */
#define CAN_3_B5             CAN_3.MB[5].DATA.B            /* Message Buffer 5 B Register */
#define CAN_3_H5             CAN_3.MB[5].DATA.H            /* Message Buffer 5 H Register */
#define CAN_3_W5             CAN_3.MB[5].DATA.W            /* Message Buffer 5 W Register */
#define CAN_3_CS6            CAN_3.MB[6].CS.R              /* Message Buffer 6 CS Register */
#define CAN_3_ID6            CAN_3.MB[6].ID.R              /* Message Buffer 6 ID Register */
#define CAN_3_B6             CAN_3.MB[6].DATA.B            /* Message Buffer 6 B Register */
#define CAN_3_H6             CAN_3.MB[6].DATA.H            /* Message Buffer 6 H Register */
#define CAN_3_W6             CAN_3.MB[6].DATA.W            /* Message Buffer 6 W Register */
#define CAN_3_CS7            CAN_3.MB[7].CS.R              /* Message Buffer 7 CS Register */
#define CAN_3_ID7            CAN_3.MB[7].ID.R              /* Message Buffer 7 ID Register */
#define CAN_3_B7             CAN_3.MB[7].DATA.B            /* Message Buffer 7 B Register */
#define CAN_3_H7             CAN_3.MB[7].DATA.H            /* Message Buffer 7 H Register */
#define CAN_3_W7             CAN_3.MB[7].DATA.W            /* Message Buffer 7 W Register */
#define CAN_3_CS8            CAN_3.MB[8].CS.R              /* Message Buffer 8 CS Register */
#define CAN_3_ID8            CAN_3.MB[8].ID.R              /* Message Buffer 8 ID Register */
#define CAN_3_B8             CAN_3.MB[8].DATA.B            /* Message Buffer 8 B Register */
#define CAN_3_H8             CAN_3.MB[8].DATA.H            /* Message Buffer 8 H Register */
#define CAN_3_W8             CAN_3.MB[8].DATA.W            /* Message Buffer 8 W Register */
#define CAN_3_CS9            CAN_3.MB[9].CS.R              /* Message Buffer 9 CS Register */
#define CAN_3_ID9            CAN_3.MB[9].ID.R              /* Message Buffer 9 ID Register */
#define CAN_3_B9             CAN_3.MB[9].DATA.B            /* Message Buffer 9 B Register */
#define CAN_3_H9             CAN_3.MB[9].DATA.H            /* Message Buffer 9 H Register */
#define CAN_3_W9             CAN_3.MB[9].DATA.W            /* Message Buffer 9 W Register */
#define CAN_3_CS10           CAN_3.MB[10].CS.R             /* Message Buffer 10 CS Register */
#define CAN_3_ID10           CAN_3.MB[10].ID.R             /* Message Buffer 10 ID Register */
#define CAN_3_B10            CAN_3.MB[10].DATA.B           /* Message Buffer 10 B Register */
#define CAN_3_H10            CAN_3.MB[10].DATA.H           /* Message Buffer 10 H Register */
#define CAN_3_W10            CAN_3.MB[10].DATA.W           /* Message Buffer 10 W Register */
#define CAN_3_CS11           CAN_3.MB[11].CS.R             /* Message Buffer 11 CS Register */
#define CAN_3_ID11           CAN_3.MB[11].ID.R             /* Message Buffer 11 ID Register */
#define CAN_3_B11            CAN_3.MB[11].DATA.B           /* Message Buffer 11 B Register */
#define CAN_3_H11            CAN_3.MB[11].DATA.H           /* Message Buffer 11 H Register */
#define CAN_3_W11            CAN_3.MB[11].DATA.W           /* Message Buffer 11 W Register */
#define CAN_3_CS12           CAN_3.MB[12].CS.R             /* Message Buffer 12 CS Register */
#define CAN_3_ID12           CAN_3.MB[12].ID.R             /* Message Buffer 12 ID Register */
#define CAN_3_B12            CAN_3.MB[12].DATA.B           /* Message Buffer 12 B Register */
#define CAN_3_H12            CAN_3.MB[12].DATA.H           /* Message Buffer 12 H Register */
#define CAN_3_W12            CAN_3.MB[12].DATA.W           /* Message Buffer 12 W Register */
#define CAN_3_CS13           CAN_3.MB[13].CS.R             /* Message Buffer 13 CS Register */
#define CAN_3_ID13           CAN_3.MB[13].ID.R             /* Message Buffer 13 ID Register */
#define CAN_3_B13            CAN_3.MB[13].DATA.B           /* Message Buffer 13 B Register */
#define CAN_3_H13            CAN_3.MB[13].DATA.H           /* Message Buffer 13 H Register */
#define CAN_3_W13            CAN_3.MB[13].DATA.W           /* Message Buffer 13 W Register */
#define CAN_3_CS14           CAN_3.MB[14].CS.R             /* Message Buffer 14 CS Register */
#define CAN_3_ID14           CAN_3.MB[14].ID.R             /* Message Buffer 14 ID Register */
#define CAN_3_B14            CAN_3.MB[14].DATA.B           /* Message Buffer 14 B Register */
#define CAN_3_H14            CAN_3.MB[14].DATA.H           /* Message Buffer 14 H Register */
#define CAN_3_W14            CAN_3.MB[14].DATA.W           /* Message Buffer 14 W Register */
#define CAN_3_CS15           CAN_3.MB[15].CS.R             /* Message Buffer 15 CS Register */
#define CAN_3_ID15           CAN_3.MB[15].ID.R             /* Message Buffer 15 ID Register */
#define CAN_3_B15            CAN_3.MB[15].DATA.B           /* Message Buffer 15 B Register */
#define CAN_3_H15            CAN_3.MB[15].DATA.H           /* Message Buffer 15 H Register */
#define CAN_3_W15            CAN_3.MB[15].DATA.W           /* Message Buffer 15 W Register */
#define CAN_3_CS16           CAN_3.MB[16].CS.R             /* Message Buffer 16 CS Register */
#define CAN_3_ID16           CAN_3.MB[16].ID.R             /* Message Buffer 16 ID Register */
#define CAN_3_B16            CAN_3.MB[16].DATA.B           /* Message Buffer 16 B Register */
#define CAN_3_H16            CAN_3.MB[16].DATA.H           /* Message Buffer 16 H Register */
#define CAN_3_W16            CAN_3.MB[16].DATA.W           /* Message Buffer 16 W Register */
#define CAN_3_CS17           CAN_3.MB[17].CS.R             /* Message Buffer 17 CS Register */
#define CAN_3_ID17           CAN_3.MB[17].ID.R             /* Message Buffer 17 ID Register */
#define CAN_3_B17            CAN_3.MB[17].DATA.B           /* Message Buffer 17 B Register */
#define CAN_3_H17            CAN_3.MB[17].DATA.H           /* Message Buffer 17 H Register */
#define CAN_3_W17            CAN_3.MB[17].DATA.W           /* Message Buffer 17 W Register */
#define CAN_3_CS18           CAN_3.MB[18].CS.R             /* Message Buffer 18 CS Register */
#define CAN_3_ID18           CAN_3.MB[18].ID.R             /* Message Buffer 18 ID Register */
#define CAN_3_B18            CAN_3.MB[18].DATA.B           /* Message Buffer 18 B Register */
#define CAN_3_H18            CAN_3.MB[18].DATA.H           /* Message Buffer 18 H Register */
#define CAN_3_W18            CAN_3.MB[18].DATA.W           /* Message Buffer 18 W Register */
#define CAN_3_CS19           CAN_3.MB[19].CS.R             /* Message Buffer 19 CS Register */
#define CAN_3_ID19           CAN_3.MB[19].ID.R             /* Message Buffer 19 ID Register */
#define CAN_3_B19            CAN_3.MB[19].DATA.B           /* Message Buffer 19 B Register */
#define CAN_3_H19            CAN_3.MB[19].DATA.H           /* Message Buffer 19 H Register */
#define CAN_3_W19            CAN_3.MB[19].DATA.W           /* Message Buffer 19 W Register */
#define CAN_3_CS20           CAN_3.MB[20].CS.R             /* Message Buffer 20 CS Register */
#define CAN_3_ID20           CAN_3.MB[20].ID.R             /* Message Buffer 20 ID Register */
#define CAN_3_B20            CAN_3.MB[20].DATA.B           /* Message Buffer 20 B Register */
#define CAN_3_H20            CAN_3.MB[20].DATA.H           /* Message Buffer 20 H Register */
#define CAN_3_W20            CAN_3.MB[20].DATA.W           /* Message Buffer 20 W Register */
#define CAN_3_CS21           CAN_3.MB[21].CS.R             /* Message Buffer 21 CS Register */
#define CAN_3_ID21           CAN_3.MB[21].ID.R             /* Message Buffer 21 ID Register */
#define CAN_3_B21            CAN_3.MB[21].DATA.B           /* Message Buffer 21 B Register */
#define CAN_3_H21            CAN_3.MB[21].DATA.H           /* Message Buffer 21 H Register */
#define CAN_3_W21            CAN_3.MB[21].DATA.W           /* Message Buffer 21 W Register */
#define CAN_3_CS22           CAN_3.MB[22].CS.R             /* Message Buffer 22 CS Register */
#define CAN_3_ID22           CAN_3.MB[22].ID.R             /* Message Buffer 22 ID Register */
#define CAN_3_B22            CAN_3.MB[22].DATA.B           /* Message Buffer 22 B Register */
#define CAN_3_H22            CAN_3.MB[22].DATA.H           /* Message Buffer 22 H Register */
#define CAN_3_W22            CAN_3.MB[22].DATA.W           /* Message Buffer 22 W Register */
#define CAN_3_CS23           CAN_3.MB[23].CS.R             /* Message Buffer 23 CS Register */
#define CAN_3_ID23           CAN_3.MB[23].ID.R             /* Message Buffer 23 ID Register */
#define CAN_3_B23            CAN_3.MB[23].DATA.B           /* Message Buffer 23 B Register */
#define CAN_3_H23            CAN_3.MB[23].DATA.H           /* Message Buffer 23 H Register */
#define CAN_3_W23            CAN_3.MB[23].DATA.W           /* Message Buffer 23 W Register */
#define CAN_3_CS24           CAN_3.MB[24].CS.R             /* Message Buffer 24 CS Register */
#define CAN_3_ID24           CAN_3.MB[24].ID.R             /* Message Buffer 24 ID Register */
#define CAN_3_B24            CAN_3.MB[24].DATA.B           /* Message Buffer 24 B Register */
#define CAN_3_H24            CAN_3.MB[24].DATA.H           /* Message Buffer 24 H Register */
#define CAN_3_W24            CAN_3.MB[24].DATA.W           /* Message Buffer 24 W Register */
#define CAN_3_CS25           CAN_3.MB[25].CS.R             /* Message Buffer 25 CS Register */
#define CAN_3_ID25           CAN_3.MB[25].ID.R             /* Message Buffer 25 ID Register */
#define CAN_3_B25            CAN_3.MB[25].DATA.B           /* Message Buffer 25 B Register */
#define CAN_3_H25            CAN_3.MB[25].DATA.H           /* Message Buffer 25 H Register */
#define CAN_3_W25            CAN_3.MB[25].DATA.W           /* Message Buffer 25 W Register */
#define CAN_3_CS26           CAN_3.MB[26].CS.R             /* Message Buffer 26 CS Register */
#define CAN_3_ID26           CAN_3.MB[26].ID.R             /* Message Buffer 26 ID Register */
#define CAN_3_B26            CAN_3.MB[26].DATA.B           /* Message Buffer 26 B Register */
#define CAN_3_H26            CAN_3.MB[26].DATA.H           /* Message Buffer 26 H Register */
#define CAN_3_W26            CAN_3.MB[26].DATA.W           /* Message Buffer 26 W Register */
#define CAN_3_CS27           CAN_3.MB[27].CS.R             /* Message Buffer 27 CS Register */
#define CAN_3_ID27           CAN_3.MB[27].ID.R             /* Message Buffer 27 ID Register */
#define CAN_3_B27            CAN_3.MB[27].DATA.B           /* Message Buffer 27 B Register */
#define CAN_3_H27            CAN_3.MB[27].DATA.H           /* Message Buffer 27 H Register */
#define CAN_3_W27            CAN_3.MB[27].DATA.W           /* Message Buffer 27 W Register */
#define CAN_3_CS28           CAN_3.MB[28].CS.R             /* Message Buffer 28 CS Register */
#define CAN_3_ID28           CAN_3.MB[28].ID.R             /* Message Buffer 28 ID Register */
#define CAN_3_B28            CAN_3.MB[28].DATA.B           /* Message Buffer 28 B Register */
#define CAN_3_H28            CAN_3.MB[28].DATA.H           /* Message Buffer 28 H Register */
#define CAN_3_W28            CAN_3.MB[28].DATA.W           /* Message Buffer 28 W Register */
#define CAN_3_CS29           CAN_3.MB[29].CS.R             /* Message Buffer 29 CS Register */
#define CAN_3_ID29           CAN_3.MB[29].ID.R             /* Message Buffer 29 ID Register */
#define CAN_3_B29            CAN_3.MB[29].DATA.B           /* Message Buffer 29 B Register */
#define CAN_3_H29            CAN_3.MB[29].DATA.H           /* Message Buffer 29 H Register */
#define CAN_3_W29            CAN_3.MB[29].DATA.W           /* Message Buffer 29 W Register */
#define CAN_3_CS30           CAN_3.MB[30].CS.R             /* Message Buffer 30 CS Register */
#define CAN_3_ID30           CAN_3.MB[30].ID.R             /* Message Buffer 30 ID Register */
#define CAN_3_B30            CAN_3.MB[30].DATA.B           /* Message Buffer 30 B Register */
#define CAN_3_H30            CAN_3.MB[30].DATA.H           /* Message Buffer 30 H Register */
#define CAN_3_W30            CAN_3.MB[30].DATA.W           /* Message Buffer 30 W Register */
#define CAN_3_CS31           CAN_3.MB[31].CS.R             /* Message Buffer 31 CS Register */
#define CAN_3_ID31           CAN_3.MB[31].ID.R             /* Message Buffer 31 ID Register */
#define CAN_3_B31            CAN_3.MB[31].DATA.B           /* Message Buffer 31 B Register */
#define CAN_3_H31            CAN_3.MB[31].DATA.H           /* Message Buffer 31 H Register */
#define CAN_3_W31            CAN_3.MB[31].DATA.W           /* Message Buffer 31 W Register */
#define CAN_3_RXIMR0         CAN_3.RXIMR[0].R              /* Rx Individual Mask registers */
#define CAN_3_RXIMR1         CAN_3.RXIMR[1].R              /* Rx Individual Mask registers */
#define CAN_3_RXIMR2         CAN_3.RXIMR[2].R              /* Rx Individual Mask registers */
#define CAN_3_RXIMR3         CAN_3.RXIMR[3].R              /* Rx Individual Mask registers */
#define CAN_3_RXIMR4         CAN_3.RXIMR[4].R              /* Rx Individual Mask registers */
#define CAN_3_RXIMR5         CAN_3.RXIMR[5].R              /* Rx Individual Mask registers */
#define CAN_3_RXIMR6         CAN_3.RXIMR[6].R              /* Rx Individual Mask registers */
#define CAN_3_RXIMR7         CAN_3.RXIMR[7].R              /* Rx Individual Mask registers */
#define CAN_3_RXIMR8         CAN_3.RXIMR[8].R              /* Rx Individual Mask registers */
#define CAN_3_RXIMR9         CAN_3.RXIMR[9].R              /* Rx Individual Mask registers */
#define CAN_3_RXIMR10        CAN_3.RXIMR[10].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR11        CAN_3.RXIMR[11].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR12        CAN_3.RXIMR[12].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR13        CAN_3.RXIMR[13].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR14        CAN_3.RXIMR[14].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR15        CAN_3.RXIMR[15].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR16        CAN_3.RXIMR[16].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR17        CAN_3.RXIMR[17].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR18        CAN_3.RXIMR[18].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR19        CAN_3.RXIMR[19].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR20        CAN_3.RXIMR[20].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR21        CAN_3.RXIMR[21].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR22        CAN_3.RXIMR[22].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR23        CAN_3.RXIMR[23].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR24        CAN_3.RXIMR[24].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR25        CAN_3.RXIMR[25].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR26        CAN_3.RXIMR[26].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR27        CAN_3.RXIMR[27].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR28        CAN_3.RXIMR[28].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR29        CAN_3.RXIMR[29].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR30        CAN_3.RXIMR[30].R             /* Rx Individual Mask registers */
#define CAN_3_RXIMR31        CAN_3.RXIMR[31].R             /* Rx Individual Mask registers */
#define CAN_3_MECR           CAN_3.MECR.R                  /* Memory Error Control register */
#define CAN_3_ERRIAR         CAN_3.ERRIAR.R                /* Error Injection Address register */
#define CAN_3_ERRIDPR        CAN_3.ERRIDPR.R               /* Error Injection Data Pattern register */
#define CAN_3_ERRIPPR        CAN_3.ERRIPPR.R               /* Error Injection Parity Pattern register */
#define CAN_3_RERRAR         CAN_3.RERRAR.R                /* Error Report Address register */
#define CAN_3_RERRDR         CAN_3.RERRDR.R                /* Error Report Data register */
#define CAN_3_RERRSYNR       CAN_3.RERRSYNR.R              /* Error Report Syndrome register */
#define CAN_3_ERRSR          CAN_3.ERRSR.R                 /* Error Status register */
#define CAN_3_EPRS           CAN_3.EPRS.R                  /* Enhanced CAN Bit Timing Prescalers */
#define CAN_3_ENCBT          CAN_3.ENCBT.R                 /* Enhanced Nominal CAN Bit Timing */
#define CAN_3_EDCBT          CAN_3.EDCBT.R                 /* Enhanced Data Phase CAN bit Timing */
#define CAN_3_ETDC           CAN_3.ETDC.R                  /* Enhanced Transceiver Delay Compensation */
#define CAN_3_FDCTRL         CAN_3.FDCTRL.R                /* CAN FD Control register */
#define CAN_3_FDCBT          CAN_3.FDCBT.R                 /* CAN FD Bit Timing register */
#define CAN_3_FDCRC          CAN_3.FDCRC.R                 /* CAN FD CRC register */
#define CAN_3_HR_TIME_STAMP0 CAN_3.HR_TIME_STAMP[0].R      /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP1 CAN_3.HR_TIME_STAMP[1].R      /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP2 CAN_3.HR_TIME_STAMP[2].R      /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP3 CAN_3.HR_TIME_STAMP[3].R      /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP4 CAN_3.HR_TIME_STAMP[4].R      /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP5 CAN_3.HR_TIME_STAMP[5].R      /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP6 CAN_3.HR_TIME_STAMP[6].R      /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP7 CAN_3.HR_TIME_STAMP[7].R      /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP8 CAN_3.HR_TIME_STAMP[8].R      /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP9 CAN_3.HR_TIME_STAMP[9].R      /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP10 CAN_3.HR_TIME_STAMP[10].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP11 CAN_3.HR_TIME_STAMP[11].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP12 CAN_3.HR_TIME_STAMP[12].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP13 CAN_3.HR_TIME_STAMP[13].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP14 CAN_3.HR_TIME_STAMP[14].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP15 CAN_3.HR_TIME_STAMP[15].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP16 CAN_3.HR_TIME_STAMP[16].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP17 CAN_3.HR_TIME_STAMP[17].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP18 CAN_3.HR_TIME_STAMP[18].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP19 CAN_3.HR_TIME_STAMP[19].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP20 CAN_3.HR_TIME_STAMP[20].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP21 CAN_3.HR_TIME_STAMP[21].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP22 CAN_3.HR_TIME_STAMP[22].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP23 CAN_3.HR_TIME_STAMP[23].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP24 CAN_3.HR_TIME_STAMP[24].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP25 CAN_3.HR_TIME_STAMP[25].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP26 CAN_3.HR_TIME_STAMP[26].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP27 CAN_3.HR_TIME_STAMP[27].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP28 CAN_3.HR_TIME_STAMP[28].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP29 CAN_3.HR_TIME_STAMP[29].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP30 CAN_3.HR_TIME_STAMP[30].R    /* High Resolution Time Stamp */
#define CAN_3_HR_TIME_STAMP31 CAN_3.HR_TIME_STAMP[31].R    /* High Resolution Time Stamp */

#define CAN_4_MCR            CAN_4.MCR.R                   /* Module Configuration register */
#define CAN_4_CTRL1          CAN_4.CTRL1.R                 /* Control 1 register */
#define CAN_4_TIMER          CAN_4.TIMER.R                 /* Free Running Timer */
#define CAN_4_RXMGMASK       CAN_4.RXMGMASK.R              /* Rx Mailboxes Global Mask register */
#define CAN_4_RX14MASK       CAN_4.RX14MASK.R              /* Rx 14 Mask register */
#define CAN_4_RX15MASK       CAN_4.RX15MASK.R              /* Rx 15 Mask register */
#define CAN_4_ECR            CAN_4.ECR.R                   /* Error Counter */
#define CAN_4_ESR1           CAN_4.ESR1.R                  /* Error and Status 1 register */
#define CAN_4_IMASK1         CAN_4.IMASK1.R                /* Interrupt Masks 1 register */
#define CAN_4_IFLAG1         CAN_4.IFLAG1.R                /* Interrupt Flags 1 register */
#define CAN_4_CTRL2          CAN_4.CTRL2.R                 /* Control 2 register */
#define CAN_4_ESR2           CAN_4.ESR2.R                  /* Error and Status 2 register */
#define CAN_4_CRCR           CAN_4.CRCR.R                  /* CRC register */
#define CAN_4_RXFGMASK       CAN_4.RXFGMASK.R              /* Rx FIFO Global Mask register */
#define CAN_4_RXFIR          CAN_4.RXFIR.R                 /* Rx FIFO Information register */
#define CAN_4_CBT            CAN_4.CBT.R                   /* CAN Bit Timing register */
#define CAN_4_CS0            CAN_4.MB[0].CS.R              /* Message Buffer 0 CS Register */
#define CAN_4_ID0            CAN_4.MB[0].ID.R              /* Message Buffer 0 ID Register */
#define CAN_4_B0             CAN_4.MB[0].DATA.B            /* Message Buffer 0 B Register */
#define CAN_4_H0             CAN_4.MB[0].DATA.H            /* Message Buffer 0 H Register */
#define CAN_4_W0             CAN_4.MB[0].DATA.W            /* Message Buffer 0 W Register */
#define CAN_4_CS1            CAN_4.MB[1].CS.R              /* Message Buffer 1 CS Register */
#define CAN_4_ID1            CAN_4.MB[1].ID.R              /* Message Buffer 1 ID Register */
#define CAN_4_B1             CAN_4.MB[1].DATA.B            /* Message Buffer 1 B Register */
#define CAN_4_H1             CAN_4.MB[1].DATA.H            /* Message Buffer 1 H Register */
#define CAN_4_W1             CAN_4.MB[1].DATA.W            /* Message Buffer 1 W Register */
#define CAN_4_CS2            CAN_4.MB[2].CS.R              /* Message Buffer 2 CS Register */
#define CAN_4_ID2            CAN_4.MB[2].ID.R              /* Message Buffer 2 ID Register */
#define CAN_4_B2             CAN_4.MB[2].DATA.B            /* Message Buffer 2 B Register */
#define CAN_4_H2             CAN_4.MB[2].DATA.H            /* Message Buffer 2 H Register */
#define CAN_4_W2             CAN_4.MB[2].DATA.W            /* Message Buffer 2 W Register */
#define CAN_4_CS3            CAN_4.MB[3].CS.R              /* Message Buffer 3 CS Register */
#define CAN_4_ID3            CAN_4.MB[3].ID.R              /* Message Buffer 3 ID Register */
#define CAN_4_B3             CAN_4.MB[3].DATA.B            /* Message Buffer 3 B Register */
#define CAN_4_H3             CAN_4.MB[3].DATA.H            /* Message Buffer 3 H Register */
#define CAN_4_W3             CAN_4.MB[3].DATA.W            /* Message Buffer 3 W Register */
#define CAN_4_CS4            CAN_4.MB[4].CS.R              /* Message Buffer 4 CS Register */
#define CAN_4_ID4            CAN_4.MB[4].ID.R              /* Message Buffer 4 ID Register */
#define CAN_4_B4             CAN_4.MB[4].DATA.B            /* Message Buffer 4 B Register */
#define CAN_4_H4             CAN_4.MB[4].DATA.H            /* Message Buffer 4 H Register */
#define CAN_4_W4             CAN_4.MB[4].DATA.W            /* Message Buffer 4 W Register */
#define CAN_4_CS5            CAN_4.MB[5].CS.R              /* Message Buffer 5 CS Register */
#define CAN_4_ID5            CAN_4.MB[5].ID.R              /* Message Buffer 5 ID Register */
#define CAN_4_B5             CAN_4.MB[5].DATA.B            /* Message Buffer 5 B Register */
#define CAN_4_H5             CAN_4.MB[5].DATA.H            /* Message Buffer 5 H Register */
#define CAN_4_W5             CAN_4.MB[5].DATA.W            /* Message Buffer 5 W Register */
#define CAN_4_CS6            CAN_4.MB[6].CS.R              /* Message Buffer 6 CS Register */
#define CAN_4_ID6            CAN_4.MB[6].ID.R              /* Message Buffer 6 ID Register */
#define CAN_4_B6             CAN_4.MB[6].DATA.B            /* Message Buffer 6 B Register */
#define CAN_4_H6             CAN_4.MB[6].DATA.H            /* Message Buffer 6 H Register */
#define CAN_4_W6             CAN_4.MB[6].DATA.W            /* Message Buffer 6 W Register */
#define CAN_4_CS7            CAN_4.MB[7].CS.R              /* Message Buffer 7 CS Register */
#define CAN_4_ID7            CAN_4.MB[7].ID.R              /* Message Buffer 7 ID Register */
#define CAN_4_B7             CAN_4.MB[7].DATA.B            /* Message Buffer 7 B Register */
#define CAN_4_H7             CAN_4.MB[7].DATA.H            /* Message Buffer 7 H Register */
#define CAN_4_W7             CAN_4.MB[7].DATA.W            /* Message Buffer 7 W Register */
#define CAN_4_CS8            CAN_4.MB[8].CS.R              /* Message Buffer 8 CS Register */
#define CAN_4_ID8            CAN_4.MB[8].ID.R              /* Message Buffer 8 ID Register */
#define CAN_4_B8             CAN_4.MB[8].DATA.B            /* Message Buffer 8 B Register */
#define CAN_4_H8             CAN_4.MB[8].DATA.H            /* Message Buffer 8 H Register */
#define CAN_4_W8             CAN_4.MB[8].DATA.W            /* Message Buffer 8 W Register */
#define CAN_4_CS9            CAN_4.MB[9].CS.R              /* Message Buffer 9 CS Register */
#define CAN_4_ID9            CAN_4.MB[9].ID.R              /* Message Buffer 9 ID Register */
#define CAN_4_B9             CAN_4.MB[9].DATA.B            /* Message Buffer 9 B Register */
#define CAN_4_H9             CAN_4.MB[9].DATA.H            /* Message Buffer 9 H Register */
#define CAN_4_W9             CAN_4.MB[9].DATA.W            /* Message Buffer 9 W Register */
#define CAN_4_CS10           CAN_4.MB[10].CS.R             /* Message Buffer 10 CS Register */
#define CAN_4_ID10           CAN_4.MB[10].ID.R             /* Message Buffer 10 ID Register */
#define CAN_4_B10            CAN_4.MB[10].DATA.B           /* Message Buffer 10 B Register */
#define CAN_4_H10            CAN_4.MB[10].DATA.H           /* Message Buffer 10 H Register */
#define CAN_4_W10            CAN_4.MB[10].DATA.W           /* Message Buffer 10 W Register */
#define CAN_4_CS11           CAN_4.MB[11].CS.R             /* Message Buffer 11 CS Register */
#define CAN_4_ID11           CAN_4.MB[11].ID.R             /* Message Buffer 11 ID Register */
#define CAN_4_B11            CAN_4.MB[11].DATA.B           /* Message Buffer 11 B Register */
#define CAN_4_H11            CAN_4.MB[11].DATA.H           /* Message Buffer 11 H Register */
#define CAN_4_W11            CAN_4.MB[11].DATA.W           /* Message Buffer 11 W Register */
#define CAN_4_CS12           CAN_4.MB[12].CS.R             /* Message Buffer 12 CS Register */
#define CAN_4_ID12           CAN_4.MB[12].ID.R             /* Message Buffer 12 ID Register */
#define CAN_4_B12            CAN_4.MB[12].DATA.B           /* Message Buffer 12 B Register */
#define CAN_4_H12            CAN_4.MB[12].DATA.H           /* Message Buffer 12 H Register */
#define CAN_4_W12            CAN_4.MB[12].DATA.W           /* Message Buffer 12 W Register */
#define CAN_4_CS13           CAN_4.MB[13].CS.R             /* Message Buffer 13 CS Register */
#define CAN_4_ID13           CAN_4.MB[13].ID.R             /* Message Buffer 13 ID Register */
#define CAN_4_B13            CAN_4.MB[13].DATA.B           /* Message Buffer 13 B Register */
#define CAN_4_H13            CAN_4.MB[13].DATA.H           /* Message Buffer 13 H Register */
#define CAN_4_W13            CAN_4.MB[13].DATA.W           /* Message Buffer 13 W Register */
#define CAN_4_CS14           CAN_4.MB[14].CS.R             /* Message Buffer 14 CS Register */
#define CAN_4_ID14           CAN_4.MB[14].ID.R             /* Message Buffer 14 ID Register */
#define CAN_4_B14            CAN_4.MB[14].DATA.B           /* Message Buffer 14 B Register */
#define CAN_4_H14            CAN_4.MB[14].DATA.H           /* Message Buffer 14 H Register */
#define CAN_4_W14            CAN_4.MB[14].DATA.W           /* Message Buffer 14 W Register */
#define CAN_4_CS15           CAN_4.MB[15].CS.R             /* Message Buffer 15 CS Register */
#define CAN_4_ID15           CAN_4.MB[15].ID.R             /* Message Buffer 15 ID Register */
#define CAN_4_B15            CAN_4.MB[15].DATA.B           /* Message Buffer 15 B Register */
#define CAN_4_H15            CAN_4.MB[15].DATA.H           /* Message Buffer 15 H Register */
#define CAN_4_W15            CAN_4.MB[15].DATA.W           /* Message Buffer 15 W Register */
#define CAN_4_CS16           CAN_4.MB[16].CS.R             /* Message Buffer 16 CS Register */
#define CAN_4_ID16           CAN_4.MB[16].ID.R             /* Message Buffer 16 ID Register */
#define CAN_4_B16            CAN_4.MB[16].DATA.B           /* Message Buffer 16 B Register */
#define CAN_4_H16            CAN_4.MB[16].DATA.H           /* Message Buffer 16 H Register */
#define CAN_4_W16            CAN_4.MB[16].DATA.W           /* Message Buffer 16 W Register */
#define CAN_4_CS17           CAN_4.MB[17].CS.R             /* Message Buffer 17 CS Register */
#define CAN_4_ID17           CAN_4.MB[17].ID.R             /* Message Buffer 17 ID Register */
#define CAN_4_B17            CAN_4.MB[17].DATA.B           /* Message Buffer 17 B Register */
#define CAN_4_H17            CAN_4.MB[17].DATA.H           /* Message Buffer 17 H Register */
#define CAN_4_W17            CAN_4.MB[17].DATA.W           /* Message Buffer 17 W Register */
#define CAN_4_CS18           CAN_4.MB[18].CS.R             /* Message Buffer 18 CS Register */
#define CAN_4_ID18           CAN_4.MB[18].ID.R             /* Message Buffer 18 ID Register */
#define CAN_4_B18            CAN_4.MB[18].DATA.B           /* Message Buffer 18 B Register */
#define CAN_4_H18            CAN_4.MB[18].DATA.H           /* Message Buffer 18 H Register */
#define CAN_4_W18            CAN_4.MB[18].DATA.W           /* Message Buffer 18 W Register */
#define CAN_4_CS19           CAN_4.MB[19].CS.R             /* Message Buffer 19 CS Register */
#define CAN_4_ID19           CAN_4.MB[19].ID.R             /* Message Buffer 19 ID Register */
#define CAN_4_B19            CAN_4.MB[19].DATA.B           /* Message Buffer 19 B Register */
#define CAN_4_H19            CAN_4.MB[19].DATA.H           /* Message Buffer 19 H Register */
#define CAN_4_W19            CAN_4.MB[19].DATA.W           /* Message Buffer 19 W Register */
#define CAN_4_CS20           CAN_4.MB[20].CS.R             /* Message Buffer 20 CS Register */
#define CAN_4_ID20           CAN_4.MB[20].ID.R             /* Message Buffer 20 ID Register */
#define CAN_4_B20            CAN_4.MB[20].DATA.B           /* Message Buffer 20 B Register */
#define CAN_4_H20            CAN_4.MB[20].DATA.H           /* Message Buffer 20 H Register */
#define CAN_4_W20            CAN_4.MB[20].DATA.W           /* Message Buffer 20 W Register */
#define CAN_4_CS21           CAN_4.MB[21].CS.R             /* Message Buffer 21 CS Register */
#define CAN_4_ID21           CAN_4.MB[21].ID.R             /* Message Buffer 21 ID Register */
#define CAN_4_B21            CAN_4.MB[21].DATA.B           /* Message Buffer 21 B Register */
#define CAN_4_H21            CAN_4.MB[21].DATA.H           /* Message Buffer 21 H Register */
#define CAN_4_W21            CAN_4.MB[21].DATA.W           /* Message Buffer 21 W Register */
#define CAN_4_CS22           CAN_4.MB[22].CS.R             /* Message Buffer 22 CS Register */
#define CAN_4_ID22           CAN_4.MB[22].ID.R             /* Message Buffer 22 ID Register */
#define CAN_4_B22            CAN_4.MB[22].DATA.B           /* Message Buffer 22 B Register */
#define CAN_4_H22            CAN_4.MB[22].DATA.H           /* Message Buffer 22 H Register */
#define CAN_4_W22            CAN_4.MB[22].DATA.W           /* Message Buffer 22 W Register */
#define CAN_4_CS23           CAN_4.MB[23].CS.R             /* Message Buffer 23 CS Register */
#define CAN_4_ID23           CAN_4.MB[23].ID.R             /* Message Buffer 23 ID Register */
#define CAN_4_B23            CAN_4.MB[23].DATA.B           /* Message Buffer 23 B Register */
#define CAN_4_H23            CAN_4.MB[23].DATA.H           /* Message Buffer 23 H Register */
#define CAN_4_W23            CAN_4.MB[23].DATA.W           /* Message Buffer 23 W Register */
#define CAN_4_CS24           CAN_4.MB[24].CS.R             /* Message Buffer 24 CS Register */
#define CAN_4_ID24           CAN_4.MB[24].ID.R             /* Message Buffer 24 ID Register */
#define CAN_4_B24            CAN_4.MB[24].DATA.B           /* Message Buffer 24 B Register */
#define CAN_4_H24            CAN_4.MB[24].DATA.H           /* Message Buffer 24 H Register */
#define CAN_4_W24            CAN_4.MB[24].DATA.W           /* Message Buffer 24 W Register */
#define CAN_4_CS25           CAN_4.MB[25].CS.R             /* Message Buffer 25 CS Register */
#define CAN_4_ID25           CAN_4.MB[25].ID.R             /* Message Buffer 25 ID Register */
#define CAN_4_B25            CAN_4.MB[25].DATA.B           /* Message Buffer 25 B Register */
#define CAN_4_H25            CAN_4.MB[25].DATA.H           /* Message Buffer 25 H Register */
#define CAN_4_W25            CAN_4.MB[25].DATA.W           /* Message Buffer 25 W Register */
#define CAN_4_CS26           CAN_4.MB[26].CS.R             /* Message Buffer 26 CS Register */
#define CAN_4_ID26           CAN_4.MB[26].ID.R             /* Message Buffer 26 ID Register */
#define CAN_4_B26            CAN_4.MB[26].DATA.B           /* Message Buffer 26 B Register */
#define CAN_4_H26            CAN_4.MB[26].DATA.H           /* Message Buffer 26 H Register */
#define CAN_4_W26            CAN_4.MB[26].DATA.W           /* Message Buffer 26 W Register */
#define CAN_4_CS27           CAN_4.MB[27].CS.R             /* Message Buffer 27 CS Register */
#define CAN_4_ID27           CAN_4.MB[27].ID.R             /* Message Buffer 27 ID Register */
#define CAN_4_B27            CAN_4.MB[27].DATA.B           /* Message Buffer 27 B Register */
#define CAN_4_H27            CAN_4.MB[27].DATA.H           /* Message Buffer 27 H Register */
#define CAN_4_W27            CAN_4.MB[27].DATA.W           /* Message Buffer 27 W Register */
#define CAN_4_CS28           CAN_4.MB[28].CS.R             /* Message Buffer 28 CS Register */
#define CAN_4_ID28           CAN_4.MB[28].ID.R             /* Message Buffer 28 ID Register */
#define CAN_4_B28            CAN_4.MB[28].DATA.B           /* Message Buffer 28 B Register */
#define CAN_4_H28            CAN_4.MB[28].DATA.H           /* Message Buffer 28 H Register */
#define CAN_4_W28            CAN_4.MB[28].DATA.W           /* Message Buffer 28 W Register */
#define CAN_4_CS29           CAN_4.MB[29].CS.R             /* Message Buffer 29 CS Register */
#define CAN_4_ID29           CAN_4.MB[29].ID.R             /* Message Buffer 29 ID Register */
#define CAN_4_B29            CAN_4.MB[29].DATA.B           /* Message Buffer 29 B Register */
#define CAN_4_H29            CAN_4.MB[29].DATA.H           /* Message Buffer 29 H Register */
#define CAN_4_W29            CAN_4.MB[29].DATA.W           /* Message Buffer 29 W Register */
#define CAN_4_CS30           CAN_4.MB[30].CS.R             /* Message Buffer 30 CS Register */
#define CAN_4_ID30           CAN_4.MB[30].ID.R             /* Message Buffer 30 ID Register */
#define CAN_4_B30            CAN_4.MB[30].DATA.B           /* Message Buffer 30 B Register */
#define CAN_4_H30            CAN_4.MB[30].DATA.H           /* Message Buffer 30 H Register */
#define CAN_4_W30            CAN_4.MB[30].DATA.W           /* Message Buffer 30 W Register */
#define CAN_4_CS31           CAN_4.MB[31].CS.R             /* Message Buffer 31 CS Register */
#define CAN_4_ID31           CAN_4.MB[31].ID.R             /* Message Buffer 31 ID Register */
#define CAN_4_B31            CAN_4.MB[31].DATA.B           /* Message Buffer 31 B Register */
#define CAN_4_H31            CAN_4.MB[31].DATA.H           /* Message Buffer 31 H Register */
#define CAN_4_W31            CAN_4.MB[31].DATA.W           /* Message Buffer 31 W Register */
#define CAN_4_RXIMR0         CAN_4.RXIMR[0].R              /* Rx Individual Mask registers */
#define CAN_4_RXIMR1         CAN_4.RXIMR[1].R              /* Rx Individual Mask registers */
#define CAN_4_RXIMR2         CAN_4.RXIMR[2].R              /* Rx Individual Mask registers */
#define CAN_4_RXIMR3         CAN_4.RXIMR[3].R              /* Rx Individual Mask registers */
#define CAN_4_RXIMR4         CAN_4.RXIMR[4].R              /* Rx Individual Mask registers */
#define CAN_4_RXIMR5         CAN_4.RXIMR[5].R              /* Rx Individual Mask registers */
#define CAN_4_RXIMR6         CAN_4.RXIMR[6].R              /* Rx Individual Mask registers */
#define CAN_4_RXIMR7         CAN_4.RXIMR[7].R              /* Rx Individual Mask registers */
#define CAN_4_RXIMR8         CAN_4.RXIMR[8].R              /* Rx Individual Mask registers */
#define CAN_4_RXIMR9         CAN_4.RXIMR[9].R              /* Rx Individual Mask registers */
#define CAN_4_RXIMR10        CAN_4.RXIMR[10].R             /* Rx Individual Mask registers */
#define CAN_4_RXIMR11        CAN_4.RXIMR[11].R             /* Rx Individual Mask registers */
#define CAN_4_RXIMR12        CAN_4.RXIMR[12].R             /* Rx Individual Mask registers */
#define CAN_4_RXIMR13        CAN_4.RXIMR[13].R             /* Rx Individual Mask registers */
#define CAN_4_RXIMR14        CAN_4.RXIMR[14].R             /* Rx Individual Mask registers */
#define CAN_4_RXIMR15        CAN_4.RXIMR[15].R             /* Rx Individual Mask registers */
#define CAN_4_RXIMR16        CAN_4.RXIMR[16].R             /* Rx Individual Mask registers */
#define CAN_4_RXIMR17        CAN_4.RXIMR[17].R             /* Rx Individual Mask registers */
#define CAN_4_RXIMR18        CAN_4.RXIMR[18].R             /* Rx Individual Mask registers */
#define CAN_4_RXIMR19        CAN_4.RXIMR[19].R             /* Rx Individual Mask registers */
#define CAN_4_RXIMR20        CAN_4.RXIMR[20].R             /* Rx Individual Mask registers */
#define CAN_4_RXIMR21        CAN_4.RXIMR[21].R             /* Rx Individual Mask registers */
#define CAN_4_RXIMR22        CAN_4.RXIMR[22].R             /* Rx Individual Mask registers */
#define CAN_4_RXIMR23        CAN_4.RXIMR[23].R             /* Rx Individual Mask registers */
#define CAN_4_RXIMR24        CAN_4.RXIMR[24].R             /* Rx Individual Mask registers */
#define CAN_4_RXIMR25        CAN_4.RXIMR[25].R             /* Rx Individual Mask registers */
#define CAN_4_RXIMR26        CAN_4.RXIMR[26].R             /* Rx Individual Mask registers */
#define CAN_4_RXIMR27        CAN_4.RXIMR[27].R             /* Rx Individual Mask registers */
#define CAN_4_RXIMR28        CAN_4.RXIMR[28].R             /* Rx Individual Mask registers */
#define CAN_4_RXIMR29        CAN_4.RXIMR[29].R             /* Rx Individual Mask registers */
#define CAN_4_RXIMR30        CAN_4.RXIMR[30].R             /* Rx Individual Mask registers */
#define CAN_4_RXIMR31        CAN_4.RXIMR[31].R             /* Rx Individual Mask registers */
#define CAN_4_MECR           CAN_4.MECR.R                  /* Memory Error Control register */
#define CAN_4_ERRIAR         CAN_4.ERRIAR.R                /* Error Injection Address register */
#define CAN_4_ERRIDPR        CAN_4.ERRIDPR.R               /* Error Injection Data Pattern register */
#define CAN_4_ERRIPPR        CAN_4.ERRIPPR.R               /* Error Injection Parity Pattern register */
#define CAN_4_RERRAR         CAN_4.RERRAR.R                /* Error Report Address register */
#define CAN_4_RERRDR         CAN_4.RERRDR.R                /* Error Report Data register */
#define CAN_4_RERRSYNR       CAN_4.RERRSYNR.R              /* Error Report Syndrome register */
#define CAN_4_ERRSR          CAN_4.ERRSR.R                 /* Error Status register */
#define CAN_4_EPRS           CAN_4.EPRS.R                  /* Enhanced CAN Bit Timing Prescalers */
#define CAN_4_ENCBT          CAN_4.ENCBT.R                 /* Enhanced Nominal CAN Bit Timing */
#define CAN_4_EDCBT          CAN_4.EDCBT.R                 /* Enhanced Data Phase CAN bit Timing */
#define CAN_4_ETDC           CAN_4.ETDC.R                  /* Enhanced Transceiver Delay Compensation */
#define CAN_4_FDCTRL         CAN_4.FDCTRL.R                /* CAN FD Control register */
#define CAN_4_FDCBT          CAN_4.FDCBT.R                 /* CAN FD Bit Timing register */
#define CAN_4_FDCRC          CAN_4.FDCRC.R                 /* CAN FD CRC register */
#define CAN_4_HR_TIME_STAMP0 CAN_4.HR_TIME_STAMP[0].R      /* High Resolution Time Stamp */
#define CAN_4_HR_TIME_STAMP1 CAN_4.HR_TIME_STAMP[1].R      /* High Resolution Time Stamp */
#define CAN_4_HR_TIME_STAMP2 CAN_4.HR_TIME_STAMP[2].R      /* High Resolution Time Stamp */
#define CAN_4_HR_TIME_STAMP3 CAN_4.HR_TIME_STAMP[3].R      /* High Resolution Time Stamp */
#define CAN_4_HR_TIME_STAMP4 CAN_4.HR_TIME_STAMP[4].R      /* High Resolution Time Stamp */
#define CAN_4_HR_TIME_STAMP5 CAN_4.HR_TIME_STAMP[5].R      /* High Resolution Time Stamp */
#define CAN_4_HR_TIME_STAMP6 CAN_4.HR_TIME_STAMP[6].R      /* High Resolution Time Stamp */
#define CAN_4_HR_TIME_STAMP7 CAN_4.HR_TIME_STAMP[7].R      /* High Resolution Time Stamp */
#define CAN_4_HR_TIME_STAMP8 CAN_4.HR_TIME_STAMP[8].R      /* High Resolution Time Stamp */
#define CAN_4_HR_TIME_STAMP9 CAN_4.HR_TIME_STAMP[9].R      /* High Resolution Time Stamp */
#define CAN_4_HR_TIME_STAMP10 CAN_4.HR_TIME_STAMP[10].R    /* High Resolution Time Stamp */
#define CAN_4_HR_TIME_STAMP11 CAN_4.HR_TIME_STAMP[11].R    /* High Resolution Time Stamp */
#define CAN_4_HR_TIME_STAMP12 CAN_4.HR_TIME_STAMP[12].R    /* High Resolution Time Stamp */
#define CAN_4_HR_TIME_STAMP13 CAN_4.HR_TIME_STAMP[13].R    /* High Resolution Time Stamp */
#define CAN_4_HR_TIME_STAMP14 CAN_4.HR_TIME_STAMP[14].R    /* High Resolution Time Stamp */
#define CAN_4_HR_TIME_STAMP15 CAN_4.HR_TIME_STAMP[15].R    /* High Resolution Time Stamp */
#define CAN_4_HR_TIME_STAMP16 CAN_4.HR_TIME_STAMP[16].R    /* High Resolution Time Stamp */
#define CAN_4_HR_TIME_STAMP17 CAN_4.HR_TIME_STAMP[17].R    /* High Resolution Time Stamp */
#define CAN_4_HR_TIME_STAMP18 CAN_4.HR_TIME_STAMP[18].R    /* High Resolution Time Stamp */
#define CAN_4_HR_TIME_STAMP19 CAN_4.HR_TIME_STAMP[19].R    /* High Resolution Time Stamp */
#define CAN_4_HR_TIME_STAMP20 CAN_4.HR_TIME_STAMP[20].R    /* High Resolution Time Stamp */
#define CAN_4_HR_TIME_STAMP21 CAN_4.HR_TIME_STAMP[21].R    /* High Resolution Time Stamp */
#define CAN_4_HR_TIME_STAMP22 CAN_4.HR_TIME_STAMP[22].R    /* High Resolution Time Stamp */
#define CAN_4_HR_TIME_STAMP23 CAN_4.HR_TIME_STAMP[23].R    /* High Resolution Time Stamp */
#define CAN_4_HR_TIME_STAMP24 CAN_4.HR_TIME_STAMP[24].R    /* High Resolution Time Stamp */
#define CAN_4_HR_TIME_STAMP25 CAN_4.HR_TIME_STAMP[25].R    /* High Resolution Time Stamp */
#define CAN_4_HR_TIME_STAMP26 CAN_4.HR_TIME_STAMP[26].R    /* High Resolution Time Stamp */
#define CAN_4_HR_TIME_STAMP27 CAN_4.HR_TIME_STAMP[27].R    /* High Resolution Time Stamp */
#define CAN_4_HR_TIME_STAMP28 CAN_4.HR_TIME_STAMP[28].R    /* High Resolution Time Stamp */
#define CAN_4_HR_TIME_STAMP29 CAN_4.HR_TIME_STAMP[29].R    /* High Resolution Time Stamp */
#define CAN_4_HR_TIME_STAMP30 CAN_4.HR_TIME_STAMP[30].R    /* High Resolution Time Stamp */
#define CAN_4_HR_TIME_STAMP31 CAN_4.HR_TIME_STAMP[31].R    /* High Resolution Time Stamp */

#define CAN_5_MCR            CAN_5.MCR.R                   /* Module Configuration register */
#define CAN_5_CTRL1          CAN_5.CTRL1.R                 /* Control 1 register */
#define CAN_5_TIMER          CAN_5.TIMER.R                 /* Free Running Timer */
#define CAN_5_RXMGMASK       CAN_5.RXMGMASK.R              /* Rx Mailboxes Global Mask register */
#define CAN_5_RX14MASK       CAN_5.RX14MASK.R              /* Rx 14 Mask register */
#define CAN_5_RX15MASK       CAN_5.RX15MASK.R              /* Rx 15 Mask register */
#define CAN_5_ECR            CAN_5.ECR.R                   /* Error Counter */
#define CAN_5_ESR1           CAN_5.ESR1.R                  /* Error and Status 1 register */
#define CAN_5_IMASK1         CAN_5.IMASK1.R                /* Interrupt Masks 1 register */
#define CAN_5_IFLAG1         CAN_5.IFLAG1.R                /* Interrupt Flags 1 register */
#define CAN_5_CTRL2          CAN_5.CTRL2.R                 /* Control 2 register */
#define CAN_5_ESR2           CAN_5.ESR2.R                  /* Error and Status 2 register */
#define CAN_5_CRCR           CAN_5.CRCR.R                  /* CRC register */
#define CAN_5_RXFGMASK       CAN_5.RXFGMASK.R              /* Rx FIFO Global Mask register */
#define CAN_5_RXFIR          CAN_5.RXFIR.R                 /* Rx FIFO Information register */
#define CAN_5_CBT            CAN_5.CBT.R                   /* CAN Bit Timing register */
#define CAN_5_CS0            CAN_5.MB[0].CS.R              /* Message Buffer 0 CS Register */
#define CAN_5_ID0            CAN_5.MB[0].ID.R              /* Message Buffer 0 ID Register */
#define CAN_5_B0             CAN_5.MB[0].DATA.B            /* Message Buffer 0 B Register */
#define CAN_5_H0             CAN_5.MB[0].DATA.H            /* Message Buffer 0 H Register */
#define CAN_5_W0             CAN_5.MB[0].DATA.W            /* Message Buffer 0 W Register */
#define CAN_5_CS1            CAN_5.MB[1].CS.R              /* Message Buffer 1 CS Register */
#define CAN_5_ID1            CAN_5.MB[1].ID.R              /* Message Buffer 1 ID Register */
#define CAN_5_B1             CAN_5.MB[1].DATA.B            /* Message Buffer 1 B Register */
#define CAN_5_H1             CAN_5.MB[1].DATA.H            /* Message Buffer 1 H Register */
#define CAN_5_W1             CAN_5.MB[1].DATA.W            /* Message Buffer 1 W Register */
#define CAN_5_CS2            CAN_5.MB[2].CS.R              /* Message Buffer 2 CS Register */
#define CAN_5_ID2            CAN_5.MB[2].ID.R              /* Message Buffer 2 ID Register */
#define CAN_5_B2             CAN_5.MB[2].DATA.B            /* Message Buffer 2 B Register */
#define CAN_5_H2             CAN_5.MB[2].DATA.H            /* Message Buffer 2 H Register */
#define CAN_5_W2             CAN_5.MB[2].DATA.W            /* Message Buffer 2 W Register */
#define CAN_5_CS3            CAN_5.MB[3].CS.R              /* Message Buffer 3 CS Register */
#define CAN_5_ID3            CAN_5.MB[3].ID.R              /* Message Buffer 3 ID Register */
#define CAN_5_B3             CAN_5.MB[3].DATA.B            /* Message Buffer 3 B Register */
#define CAN_5_H3             CAN_5.MB[3].DATA.H            /* Message Buffer 3 H Register */
#define CAN_5_W3             CAN_5.MB[3].DATA.W            /* Message Buffer 3 W Register */
#define CAN_5_CS4            CAN_5.MB[4].CS.R              /* Message Buffer 4 CS Register */
#define CAN_5_ID4            CAN_5.MB[4].ID.R              /* Message Buffer 4 ID Register */
#define CAN_5_B4             CAN_5.MB[4].DATA.B            /* Message Buffer 4 B Register */
#define CAN_5_H4             CAN_5.MB[4].DATA.H            /* Message Buffer 4 H Register */
#define CAN_5_W4             CAN_5.MB[4].DATA.W            /* Message Buffer 4 W Register */
#define CAN_5_CS5            CAN_5.MB[5].CS.R              /* Message Buffer 5 CS Register */
#define CAN_5_ID5            CAN_5.MB[5].ID.R              /* Message Buffer 5 ID Register */
#define CAN_5_B5             CAN_5.MB[5].DATA.B            /* Message Buffer 5 B Register */
#define CAN_5_H5             CAN_5.MB[5].DATA.H            /* Message Buffer 5 H Register */
#define CAN_5_W5             CAN_5.MB[5].DATA.W            /* Message Buffer 5 W Register */
#define CAN_5_CS6            CAN_5.MB[6].CS.R              /* Message Buffer 6 CS Register */
#define CAN_5_ID6            CAN_5.MB[6].ID.R              /* Message Buffer 6 ID Register */
#define CAN_5_B6             CAN_5.MB[6].DATA.B            /* Message Buffer 6 B Register */
#define CAN_5_H6             CAN_5.MB[6].DATA.H            /* Message Buffer 6 H Register */
#define CAN_5_W6             CAN_5.MB[6].DATA.W            /* Message Buffer 6 W Register */
#define CAN_5_CS7            CAN_5.MB[7].CS.R              /* Message Buffer 7 CS Register */
#define CAN_5_ID7            CAN_5.MB[7].ID.R              /* Message Buffer 7 ID Register */
#define CAN_5_B7             CAN_5.MB[7].DATA.B            /* Message Buffer 7 B Register */
#define CAN_5_H7             CAN_5.MB[7].DATA.H            /* Message Buffer 7 H Register */
#define CAN_5_W7             CAN_5.MB[7].DATA.W            /* Message Buffer 7 W Register */
#define CAN_5_CS8            CAN_5.MB[8].CS.R              /* Message Buffer 8 CS Register */
#define CAN_5_ID8            CAN_5.MB[8].ID.R              /* Message Buffer 8 ID Register */
#define CAN_5_B8             CAN_5.MB[8].DATA.B            /* Message Buffer 8 B Register */
#define CAN_5_H8             CAN_5.MB[8].DATA.H            /* Message Buffer 8 H Register */
#define CAN_5_W8             CAN_5.MB[8].DATA.W            /* Message Buffer 8 W Register */
#define CAN_5_CS9            CAN_5.MB[9].CS.R              /* Message Buffer 9 CS Register */
#define CAN_5_ID9            CAN_5.MB[9].ID.R              /* Message Buffer 9 ID Register */
#define CAN_5_B9             CAN_5.MB[9].DATA.B            /* Message Buffer 9 B Register */
#define CAN_5_H9             CAN_5.MB[9].DATA.H            /* Message Buffer 9 H Register */
#define CAN_5_W9             CAN_5.MB[9].DATA.W            /* Message Buffer 9 W Register */
#define CAN_5_CS10           CAN_5.MB[10].CS.R             /* Message Buffer 10 CS Register */
#define CAN_5_ID10           CAN_5.MB[10].ID.R             /* Message Buffer 10 ID Register */
#define CAN_5_B10            CAN_5.MB[10].DATA.B           /* Message Buffer 10 B Register */
#define CAN_5_H10            CAN_5.MB[10].DATA.H           /* Message Buffer 10 H Register */
#define CAN_5_W10            CAN_5.MB[10].DATA.W           /* Message Buffer 10 W Register */
#define CAN_5_CS11           CAN_5.MB[11].CS.R             /* Message Buffer 11 CS Register */
#define CAN_5_ID11           CAN_5.MB[11].ID.R             /* Message Buffer 11 ID Register */
#define CAN_5_B11            CAN_5.MB[11].DATA.B           /* Message Buffer 11 B Register */
#define CAN_5_H11            CAN_5.MB[11].DATA.H           /* Message Buffer 11 H Register */
#define CAN_5_W11            CAN_5.MB[11].DATA.W           /* Message Buffer 11 W Register */
#define CAN_5_CS12           CAN_5.MB[12].CS.R             /* Message Buffer 12 CS Register */
#define CAN_5_ID12           CAN_5.MB[12].ID.R             /* Message Buffer 12 ID Register */
#define CAN_5_B12            CAN_5.MB[12].DATA.B           /* Message Buffer 12 B Register */
#define CAN_5_H12            CAN_5.MB[12].DATA.H           /* Message Buffer 12 H Register */
#define CAN_5_W12            CAN_5.MB[12].DATA.W           /* Message Buffer 12 W Register */
#define CAN_5_CS13           CAN_5.MB[13].CS.R             /* Message Buffer 13 CS Register */
#define CAN_5_ID13           CAN_5.MB[13].ID.R             /* Message Buffer 13 ID Register */
#define CAN_5_B13            CAN_5.MB[13].DATA.B           /* Message Buffer 13 B Register */
#define CAN_5_H13            CAN_5.MB[13].DATA.H           /* Message Buffer 13 H Register */
#define CAN_5_W13            CAN_5.MB[13].DATA.W           /* Message Buffer 13 W Register */
#define CAN_5_CS14           CAN_5.MB[14].CS.R             /* Message Buffer 14 CS Register */
#define CAN_5_ID14           CAN_5.MB[14].ID.R             /* Message Buffer 14 ID Register */
#define CAN_5_B14            CAN_5.MB[14].DATA.B           /* Message Buffer 14 B Register */
#define CAN_5_H14            CAN_5.MB[14].DATA.H           /* Message Buffer 14 H Register */
#define CAN_5_W14            CAN_5.MB[14].DATA.W           /* Message Buffer 14 W Register */
#define CAN_5_CS15           CAN_5.MB[15].CS.R             /* Message Buffer 15 CS Register */
#define CAN_5_ID15           CAN_5.MB[15].ID.R             /* Message Buffer 15 ID Register */
#define CAN_5_B15            CAN_5.MB[15].DATA.B           /* Message Buffer 15 B Register */
#define CAN_5_H15            CAN_5.MB[15].DATA.H           /* Message Buffer 15 H Register */
#define CAN_5_W15            CAN_5.MB[15].DATA.W           /* Message Buffer 15 W Register */
#define CAN_5_CS16           CAN_5.MB[16].CS.R             /* Message Buffer 16 CS Register */
#define CAN_5_ID16           CAN_5.MB[16].ID.R             /* Message Buffer 16 ID Register */
#define CAN_5_B16            CAN_5.MB[16].DATA.B           /* Message Buffer 16 B Register */
#define CAN_5_H16            CAN_5.MB[16].DATA.H           /* Message Buffer 16 H Register */
#define CAN_5_W16            CAN_5.MB[16].DATA.W           /* Message Buffer 16 W Register */
#define CAN_5_CS17           CAN_5.MB[17].CS.R             /* Message Buffer 17 CS Register */
#define CAN_5_ID17           CAN_5.MB[17].ID.R             /* Message Buffer 17 ID Register */
#define CAN_5_B17            CAN_5.MB[17].DATA.B           /* Message Buffer 17 B Register */
#define CAN_5_H17            CAN_5.MB[17].DATA.H           /* Message Buffer 17 H Register */
#define CAN_5_W17            CAN_5.MB[17].DATA.W           /* Message Buffer 17 W Register */
#define CAN_5_CS18           CAN_5.MB[18].CS.R             /* Message Buffer 18 CS Register */
#define CAN_5_ID18           CAN_5.MB[18].ID.R             /* Message Buffer 18 ID Register */
#define CAN_5_B18            CAN_5.MB[18].DATA.B           /* Message Buffer 18 B Register */
#define CAN_5_H18            CAN_5.MB[18].DATA.H           /* Message Buffer 18 H Register */
#define CAN_5_W18            CAN_5.MB[18].DATA.W           /* Message Buffer 18 W Register */
#define CAN_5_CS19           CAN_5.MB[19].CS.R             /* Message Buffer 19 CS Register */
#define CAN_5_ID19           CAN_5.MB[19].ID.R             /* Message Buffer 19 ID Register */
#define CAN_5_B19            CAN_5.MB[19].DATA.B           /* Message Buffer 19 B Register */
#define CAN_5_H19            CAN_5.MB[19].DATA.H           /* Message Buffer 19 H Register */
#define CAN_5_W19            CAN_5.MB[19].DATA.W           /* Message Buffer 19 W Register */
#define CAN_5_CS20           CAN_5.MB[20].CS.R             /* Message Buffer 20 CS Register */
#define CAN_5_ID20           CAN_5.MB[20].ID.R             /* Message Buffer 20 ID Register */
#define CAN_5_B20            CAN_5.MB[20].DATA.B           /* Message Buffer 20 B Register */
#define CAN_5_H20            CAN_5.MB[20].DATA.H           /* Message Buffer 20 H Register */
#define CAN_5_W20            CAN_5.MB[20].DATA.W           /* Message Buffer 20 W Register */
#define CAN_5_CS21           CAN_5.MB[21].CS.R             /* Message Buffer 21 CS Register */
#define CAN_5_ID21           CAN_5.MB[21].ID.R             /* Message Buffer 21 ID Register */
#define CAN_5_B21            CAN_5.MB[21].DATA.B           /* Message Buffer 21 B Register */
#define CAN_5_H21            CAN_5.MB[21].DATA.H           /* Message Buffer 21 H Register */
#define CAN_5_W21            CAN_5.MB[21].DATA.W           /* Message Buffer 21 W Register */
#define CAN_5_CS22           CAN_5.MB[22].CS.R             /* Message Buffer 22 CS Register */
#define CAN_5_ID22           CAN_5.MB[22].ID.R             /* Message Buffer 22 ID Register */
#define CAN_5_B22            CAN_5.MB[22].DATA.B           /* Message Buffer 22 B Register */
#define CAN_5_H22            CAN_5.MB[22].DATA.H           /* Message Buffer 22 H Register */
#define CAN_5_W22            CAN_5.MB[22].DATA.W           /* Message Buffer 22 W Register */
#define CAN_5_CS23           CAN_5.MB[23].CS.R             /* Message Buffer 23 CS Register */
#define CAN_5_ID23           CAN_5.MB[23].ID.R             /* Message Buffer 23 ID Register */
#define CAN_5_B23            CAN_5.MB[23].DATA.B           /* Message Buffer 23 B Register */
#define CAN_5_H23            CAN_5.MB[23].DATA.H           /* Message Buffer 23 H Register */
#define CAN_5_W23            CAN_5.MB[23].DATA.W           /* Message Buffer 23 W Register */
#define CAN_5_CS24           CAN_5.MB[24].CS.R             /* Message Buffer 24 CS Register */
#define CAN_5_ID24           CAN_5.MB[24].ID.R             /* Message Buffer 24 ID Register */
#define CAN_5_B24            CAN_5.MB[24].DATA.B           /* Message Buffer 24 B Register */
#define CAN_5_H24            CAN_5.MB[24].DATA.H           /* Message Buffer 24 H Register */
#define CAN_5_W24            CAN_5.MB[24].DATA.W           /* Message Buffer 24 W Register */
#define CAN_5_CS25           CAN_5.MB[25].CS.R             /* Message Buffer 25 CS Register */
#define CAN_5_ID25           CAN_5.MB[25].ID.R             /* Message Buffer 25 ID Register */
#define CAN_5_B25            CAN_5.MB[25].DATA.B           /* Message Buffer 25 B Register */
#define CAN_5_H25            CAN_5.MB[25].DATA.H           /* Message Buffer 25 H Register */
#define CAN_5_W25            CAN_5.MB[25].DATA.W           /* Message Buffer 25 W Register */
#define CAN_5_CS26           CAN_5.MB[26].CS.R             /* Message Buffer 26 CS Register */
#define CAN_5_ID26           CAN_5.MB[26].ID.R             /* Message Buffer 26 ID Register */
#define CAN_5_B26            CAN_5.MB[26].DATA.B           /* Message Buffer 26 B Register */
#define CAN_5_H26            CAN_5.MB[26].DATA.H           /* Message Buffer 26 H Register */
#define CAN_5_W26            CAN_5.MB[26].DATA.W           /* Message Buffer 26 W Register */
#define CAN_5_CS27           CAN_5.MB[27].CS.R             /* Message Buffer 27 CS Register */
#define CAN_5_ID27           CAN_5.MB[27].ID.R             /* Message Buffer 27 ID Register */
#define CAN_5_B27            CAN_5.MB[27].DATA.B           /* Message Buffer 27 B Register */
#define CAN_5_H27            CAN_5.MB[27].DATA.H           /* Message Buffer 27 H Register */
#define CAN_5_W27            CAN_5.MB[27].DATA.W           /* Message Buffer 27 W Register */
#define CAN_5_CS28           CAN_5.MB[28].CS.R             /* Message Buffer 28 CS Register */
#define CAN_5_ID28           CAN_5.MB[28].ID.R             /* Message Buffer 28 ID Register */
#define CAN_5_B28            CAN_5.MB[28].DATA.B           /* Message Buffer 28 B Register */
#define CAN_5_H28            CAN_5.MB[28].DATA.H           /* Message Buffer 28 H Register */
#define CAN_5_W28            CAN_5.MB[28].DATA.W           /* Message Buffer 28 W Register */
#define CAN_5_CS29           CAN_5.MB[29].CS.R             /* Message Buffer 29 CS Register */
#define CAN_5_ID29           CAN_5.MB[29].ID.R             /* Message Buffer 29 ID Register */
#define CAN_5_B29            CAN_5.MB[29].DATA.B           /* Message Buffer 29 B Register */
#define CAN_5_H29            CAN_5.MB[29].DATA.H           /* Message Buffer 29 H Register */
#define CAN_5_W29            CAN_5.MB[29].DATA.W           /* Message Buffer 29 W Register */
#define CAN_5_CS30           CAN_5.MB[30].CS.R             /* Message Buffer 30 CS Register */
#define CAN_5_ID30           CAN_5.MB[30].ID.R             /* Message Buffer 30 ID Register */
#define CAN_5_B30            CAN_5.MB[30].DATA.B           /* Message Buffer 30 B Register */
#define CAN_5_H30            CAN_5.MB[30].DATA.H           /* Message Buffer 30 H Register */
#define CAN_5_W30            CAN_5.MB[30].DATA.W           /* Message Buffer 30 W Register */
#define CAN_5_CS31           CAN_5.MB[31].CS.R             /* Message Buffer 31 CS Register */
#define CAN_5_ID31           CAN_5.MB[31].ID.R             /* Message Buffer 31 ID Register */
#define CAN_5_B31            CAN_5.MB[31].DATA.B           /* Message Buffer 31 B Register */
#define CAN_5_H31            CAN_5.MB[31].DATA.H           /* Message Buffer 31 H Register */
#define CAN_5_W31            CAN_5.MB[31].DATA.W           /* Message Buffer 31 W Register */
#define CAN_5_RXIMR0         CAN_5.RXIMR[0].R              /* Rx Individual Mask registers */
#define CAN_5_RXIMR1         CAN_5.RXIMR[1].R              /* Rx Individual Mask registers */
#define CAN_5_RXIMR2         CAN_5.RXIMR[2].R              /* Rx Individual Mask registers */
#define CAN_5_RXIMR3         CAN_5.RXIMR[3].R              /* Rx Individual Mask registers */
#define CAN_5_RXIMR4         CAN_5.RXIMR[4].R              /* Rx Individual Mask registers */
#define CAN_5_RXIMR5         CAN_5.RXIMR[5].R              /* Rx Individual Mask registers */
#define CAN_5_RXIMR6         CAN_5.RXIMR[6].R              /* Rx Individual Mask registers */
#define CAN_5_RXIMR7         CAN_5.RXIMR[7].R              /* Rx Individual Mask registers */
#define CAN_5_RXIMR8         CAN_5.RXIMR[8].R              /* Rx Individual Mask registers */
#define CAN_5_RXIMR9         CAN_5.RXIMR[9].R              /* Rx Individual Mask registers */
#define CAN_5_RXIMR10        CAN_5.RXIMR[10].R             /* Rx Individual Mask registers */
#define CAN_5_RXIMR11        CAN_5.RXIMR[11].R             /* Rx Individual Mask registers */
#define CAN_5_RXIMR12        CAN_5.RXIMR[12].R             /* Rx Individual Mask registers */
#define CAN_5_RXIMR13        CAN_5.RXIMR[13].R             /* Rx Individual Mask registers */
#define CAN_5_RXIMR14        CAN_5.RXIMR[14].R             /* Rx Individual Mask registers */
#define CAN_5_RXIMR15        CAN_5.RXIMR[15].R             /* Rx Individual Mask registers */
#define CAN_5_RXIMR16        CAN_5.RXIMR[16].R             /* Rx Individual Mask registers */
#define CAN_5_RXIMR17        CAN_5.RXIMR[17].R             /* Rx Individual Mask registers */
#define CAN_5_RXIMR18        CAN_5.RXIMR[18].R             /* Rx Individual Mask registers */
#define CAN_5_RXIMR19        CAN_5.RXIMR[19].R             /* Rx Individual Mask registers */
#define CAN_5_RXIMR20        CAN_5.RXIMR[20].R             /* Rx Individual Mask registers */
#define CAN_5_RXIMR21        CAN_5.RXIMR[21].R             /* Rx Individual Mask registers */
#define CAN_5_RXIMR22        CAN_5.RXIMR[22].R             /* Rx Individual Mask registers */
#define CAN_5_RXIMR23        CAN_5.RXIMR[23].R             /* Rx Individual Mask registers */
#define CAN_5_RXIMR24        CAN_5.RXIMR[24].R             /* Rx Individual Mask registers */
#define CAN_5_RXIMR25        CAN_5.RXIMR[25].R             /* Rx Individual Mask registers */
#define CAN_5_RXIMR26        CAN_5.RXIMR[26].R             /* Rx Individual Mask registers */
#define CAN_5_RXIMR27        CAN_5.RXIMR[27].R             /* Rx Individual Mask registers */
#define CAN_5_RXIMR28        CAN_5.RXIMR[28].R             /* Rx Individual Mask registers */
#define CAN_5_RXIMR29        CAN_5.RXIMR[29].R             /* Rx Individual Mask registers */
#define CAN_5_RXIMR30        CAN_5.RXIMR[30].R             /* Rx Individual Mask registers */
#define CAN_5_RXIMR31        CAN_5.RXIMR[31].R             /* Rx Individual Mask registers */
#define CAN_5_MECR           CAN_5.MECR.R                  /* Memory Error Control register */
#define CAN_5_ERRIAR         CAN_5.ERRIAR.R                /* Error Injection Address register */
#define CAN_5_ERRIDPR        CAN_5.ERRIDPR.R               /* Error Injection Data Pattern register */
#define CAN_5_ERRIPPR        CAN_5.ERRIPPR.R               /* Error Injection Parity Pattern register */
#define CAN_5_RERRAR         CAN_5.RERRAR.R                /* Error Report Address register */
#define CAN_5_RERRDR         CAN_5.RERRDR.R                /* Error Report Data register */
#define CAN_5_RERRSYNR       CAN_5.RERRSYNR.R              /* Error Report Syndrome register */
#define CAN_5_ERRSR          CAN_5.ERRSR.R                 /* Error Status register */
#define CAN_5_EPRS           CAN_5.EPRS.R                  /* Enhanced CAN Bit Timing Prescalers */
#define CAN_5_ENCBT          CAN_5.ENCBT.R                 /* Enhanced Nominal CAN Bit Timing */
#define CAN_5_EDCBT          CAN_5.EDCBT.R                 /* Enhanced Data Phase CAN bit Timing */
#define CAN_5_ETDC           CAN_5.ETDC.R                  /* Enhanced Transceiver Delay Compensation */
#define CAN_5_FDCTRL         CAN_5.FDCTRL.R                /* CAN FD Control register */
#define CAN_5_FDCBT          CAN_5.FDCBT.R                 /* CAN FD Bit Timing register */
#define CAN_5_FDCRC          CAN_5.FDCRC.R                 /* CAN FD CRC register */
#define CAN_5_HR_TIME_STAMP0 CAN_5.HR_TIME_STAMP[0].R      /* High Resolution Time Stamp */
#define CAN_5_HR_TIME_STAMP1 CAN_5.HR_TIME_STAMP[1].R      /* High Resolution Time Stamp */
#define CAN_5_HR_TIME_STAMP2 CAN_5.HR_TIME_STAMP[2].R      /* High Resolution Time Stamp */
#define CAN_5_HR_TIME_STAMP3 CAN_5.HR_TIME_STAMP[3].R      /* High Resolution Time Stamp */
#define CAN_5_HR_TIME_STAMP4 CAN_5.HR_TIME_STAMP[4].R      /* High Resolution Time Stamp */
#define CAN_5_HR_TIME_STAMP5 CAN_5.HR_TIME_STAMP[5].R      /* High Resolution Time Stamp */
#define CAN_5_HR_TIME_STAMP6 CAN_5.HR_TIME_STAMP[6].R      /* High Resolution Time Stamp */
#define CAN_5_HR_TIME_STAMP7 CAN_5.HR_TIME_STAMP[7].R      /* High Resolution Time Stamp */
#define CAN_5_HR_TIME_STAMP8 CAN_5.HR_TIME_STAMP[8].R      /* High Resolution Time Stamp */
#define CAN_5_HR_TIME_STAMP9 CAN_5.HR_TIME_STAMP[9].R      /* High Resolution Time Stamp */
#define CAN_5_HR_TIME_STAMP10 CAN_5.HR_TIME_STAMP[10].R    /* High Resolution Time Stamp */
#define CAN_5_HR_TIME_STAMP11 CAN_5.HR_TIME_STAMP[11].R    /* High Resolution Time Stamp */
#define CAN_5_HR_TIME_STAMP12 CAN_5.HR_TIME_STAMP[12].R    /* High Resolution Time Stamp */
#define CAN_5_HR_TIME_STAMP13 CAN_5.HR_TIME_STAMP[13].R    /* High Resolution Time Stamp */
#define CAN_5_HR_TIME_STAMP14 CAN_5.HR_TIME_STAMP[14].R    /* High Resolution Time Stamp */
#define CAN_5_HR_TIME_STAMP15 CAN_5.HR_TIME_STAMP[15].R    /* High Resolution Time Stamp */
#define CAN_5_HR_TIME_STAMP16 CAN_5.HR_TIME_STAMP[16].R    /* High Resolution Time Stamp */
#define CAN_5_HR_TIME_STAMP17 CAN_5.HR_TIME_STAMP[17].R    /* High Resolution Time Stamp */
#define CAN_5_HR_TIME_STAMP18 CAN_5.HR_TIME_STAMP[18].R    /* High Resolution Time Stamp */
#define CAN_5_HR_TIME_STAMP19 CAN_5.HR_TIME_STAMP[19].R    /* High Resolution Time Stamp */
#define CAN_5_HR_TIME_STAMP20 CAN_5.HR_TIME_STAMP[20].R    /* High Resolution Time Stamp */
#define CAN_5_HR_TIME_STAMP21 CAN_5.HR_TIME_STAMP[21].R    /* High Resolution Time Stamp */
#define CAN_5_HR_TIME_STAMP22 CAN_5.HR_TIME_STAMP[22].R    /* High Resolution Time Stamp */
#define CAN_5_HR_TIME_STAMP23 CAN_5.HR_TIME_STAMP[23].R    /* High Resolution Time Stamp */
#define CAN_5_HR_TIME_STAMP24 CAN_5.HR_TIME_STAMP[24].R    /* High Resolution Time Stamp */
#define CAN_5_HR_TIME_STAMP25 CAN_5.HR_TIME_STAMP[25].R    /* High Resolution Time Stamp */
#define CAN_5_HR_TIME_STAMP26 CAN_5.HR_TIME_STAMP[26].R    /* High Resolution Time Stamp */
#define CAN_5_HR_TIME_STAMP27 CAN_5.HR_TIME_STAMP[27].R    /* High Resolution Time Stamp */
#define CAN_5_HR_TIME_STAMP28 CAN_5.HR_TIME_STAMP[28].R    /* High Resolution Time Stamp */
#define CAN_5_HR_TIME_STAMP29 CAN_5.HR_TIME_STAMP[29].R    /* High Resolution Time Stamp */
#define CAN_5_HR_TIME_STAMP30 CAN_5.HR_TIME_STAMP[30].R    /* High Resolution Time Stamp */
#define CAN_5_HR_TIME_STAMP31 CAN_5.HR_TIME_STAMP[31].R    /* High Resolution Time Stamp */

/* FLEXIO */
#define FLEXIO_VERID         FLEXIO.VERID.R                /* Version ID Register */
#define FLEXIO_PARAM         FLEXIO.PARAM.R                /* Parameter Register */
#define FLEXIO_CTRL          FLEXIO.CTRL.R                 /* FlexIO Control Register */
#define FLEXIO_PIN           FLEXIO.PIN.R                  /* Pin State Register */
#define FLEXIO_SHIFTSTAT     FLEXIO.SHIFTSTAT.R            /* Shifter Status Register */
#define FLEXIO_SHIFTERR      FLEXIO.SHIFTERR.R             /* Shifter Error Register */
#define FLEXIO_TIMSTAT       FLEXIO.TIMSTAT.R              /* Timer Status Register */
#define FLEXIO_SHIFTSIEN     FLEXIO.SHIFTSIEN.R            /* Shifter Status Interrupt Enable */
#define FLEXIO_SHIFTEIEN     FLEXIO.SHIFTEIEN.R            /* Shifter Error Interrupt Enable */
#define FLEXIO_TIMIEN        FLEXIO.TIMIEN.R               /* Timer Interrupt Enable Register */
#define FLEXIO_SHIFTSDEN     FLEXIO.SHIFTSDEN.R            /* Shifter Status DMA Enable */
#define FLEXIO_TIMERSDEN     FLEXIO.TIMERSDEN.R            /* Timer Status DMA Enable */
#define FLEXIO_SHIFTSTATE    FLEXIO.SHIFTSTATE.R           /* Shifter State Register */
#define FLEXIO_TRGSTAT       FLEXIO.TRGSTAT.R              /* Trigger Status Register */
#define FLEXIO_TRIGIEN       FLEXIO.TRIGIEN.R              /* External Trigger Interrupt Enable Register */
#define FLEXIO_PINSTAT       FLEXIO.PINSTAT.R              /* Pin Status Register */
#define FLEXIO_PINIEN        FLEXIO.PINIEN.R               /* Pin Interrupt Enable Register */
#define FLEXIO_PINREN        FLEXIO.PINREN.R               /* Pin Rising Edge Enable Register */
#define FLEXIO_PINFEN        FLEXIO.PINFEN.R               /* Pin Falling Edge Enable Register */
#define FLEXIO_PINOUTD       FLEXIO.PINOUTD.R              /* Pin Output Data Register */
#define FLEXIO_PINOUTE       FLEXIO.PINOUTE.R              /* Pin Output Enable Register */
#define FLEXIO_PINOUTDIS     FLEXIO.PINOUTDIS.R            /* Pin Output Disable Register */
#define FLEXIO_PINOUTCLR     FLEXIO.PINOUTCLR.R            /* Pin Output Clear Register */
#define FLEXIO_PINOUTSET     FLEXIO.PINOUTSET.R            /* Pin Output Set Register */
#define FLEXIO_PINOUTTOG     FLEXIO.PINOUTTOG.R            /* Pin Output Toggle Register */
#define FLEXIO_SHIFTCTL0     FLEXIO.SHIFTCTL[0].R          /* Shifter Control N Register */
#define FLEXIO_SHIFTCTL1     FLEXIO.SHIFTCTL[1].R          /* Shifter Control N Register */
#define FLEXIO_SHIFTCTL2     FLEXIO.SHIFTCTL[2].R          /* Shifter Control N Register */
#define FLEXIO_SHIFTCTL3     FLEXIO.SHIFTCTL[3].R          /* Shifter Control N Register */
#define FLEXIO_SHIFTCTL4     FLEXIO.SHIFTCTL[4].R          /* Shifter Control N Register */
#define FLEXIO_SHIFTCTL5     FLEXIO.SHIFTCTL[5].R          /* Shifter Control N Register */
#define FLEXIO_SHIFTCTL6     FLEXIO.SHIFTCTL[6].R          /* Shifter Control N Register */
#define FLEXIO_SHIFTCTL7     FLEXIO.SHIFTCTL[7].R          /* Shifter Control N Register */
#define FLEXIO_SHIFTCFG0     FLEXIO.SHIFTCFG[0].R          /* Shifter Configuration N Register */
#define FLEXIO_SHIFTCFG1     FLEXIO.SHIFTCFG[1].R          /* Shifter Configuration N Register */
#define FLEXIO_SHIFTCFG2     FLEXIO.SHIFTCFG[2].R          /* Shifter Configuration N Register */
#define FLEXIO_SHIFTCFG3     FLEXIO.SHIFTCFG[3].R          /* Shifter Configuration N Register */
#define FLEXIO_SHIFTCFG4     FLEXIO.SHIFTCFG[4].R          /* Shifter Configuration N Register */
#define FLEXIO_SHIFTCFG5     FLEXIO.SHIFTCFG[5].R          /* Shifter Configuration N Register */
#define FLEXIO_SHIFTCFG6     FLEXIO.SHIFTCFG[6].R          /* Shifter Configuration N Register */
#define FLEXIO_SHIFTCFG7     FLEXIO.SHIFTCFG[7].R          /* Shifter Configuration N Register */
#define FLEXIO_SHIFTBUF0     FLEXIO.SHIFTBUF[0].R          /* Shifter Buffer N Register */
#define FLEXIO_SHIFTBUF1     FLEXIO.SHIFTBUF[1].R          /* Shifter Buffer N Register */
#define FLEXIO_SHIFTBUF2     FLEXIO.SHIFTBUF[2].R          /* Shifter Buffer N Register */
#define FLEXIO_SHIFTBUF3     FLEXIO.SHIFTBUF[3].R          /* Shifter Buffer N Register */
#define FLEXIO_SHIFTBUF4     FLEXIO.SHIFTBUF[4].R          /* Shifter Buffer N Register */
#define FLEXIO_SHIFTBUF5     FLEXIO.SHIFTBUF[5].R          /* Shifter Buffer N Register */
#define FLEXIO_SHIFTBUF6     FLEXIO.SHIFTBUF[6].R          /* Shifter Buffer N Register */
#define FLEXIO_SHIFTBUF7     FLEXIO.SHIFTBUF[7].R          /* Shifter Buffer N Register */
#define FLEXIO_SHIFTBUFBIS0  FLEXIO.SHIFTBUFBIS[0].R       /* Shifter Buffer N Bit Swapped Register */
#define FLEXIO_SHIFTBUFBIS1  FLEXIO.SHIFTBUFBIS[1].R       /* Shifter Buffer N Bit Swapped Register */
#define FLEXIO_SHIFTBUFBIS2  FLEXIO.SHIFTBUFBIS[2].R       /* Shifter Buffer N Bit Swapped Register */
#define FLEXIO_SHIFTBUFBIS3  FLEXIO.SHIFTBUFBIS[3].R       /* Shifter Buffer N Bit Swapped Register */
#define FLEXIO_SHIFTBUFBIS4  FLEXIO.SHIFTBUFBIS[4].R       /* Shifter Buffer N Bit Swapped Register */
#define FLEXIO_SHIFTBUFBIS5  FLEXIO.SHIFTBUFBIS[5].R       /* Shifter Buffer N Bit Swapped Register */
#define FLEXIO_SHIFTBUFBIS6  FLEXIO.SHIFTBUFBIS[6].R       /* Shifter Buffer N Bit Swapped Register */
#define FLEXIO_SHIFTBUFBIS7  FLEXIO.SHIFTBUFBIS[7].R       /* Shifter Buffer N Bit Swapped Register */
#define FLEXIO_SHIFTBUFBYS0  FLEXIO.SHIFTBUFBYS[0].R       /* Shifter Buffer N Byte Swapped Register */
#define FLEXIO_SHIFTBUFBYS1  FLEXIO.SHIFTBUFBYS[1].R       /* Shifter Buffer N Byte Swapped Register */
#define FLEXIO_SHIFTBUFBYS2  FLEXIO.SHIFTBUFBYS[2].R       /* Shifter Buffer N Byte Swapped Register */
#define FLEXIO_SHIFTBUFBYS3  FLEXIO.SHIFTBUFBYS[3].R       /* Shifter Buffer N Byte Swapped Register */
#define FLEXIO_SHIFTBUFBYS4  FLEXIO.SHIFTBUFBYS[4].R       /* Shifter Buffer N Byte Swapped Register */
#define FLEXIO_SHIFTBUFBYS5  FLEXIO.SHIFTBUFBYS[5].R       /* Shifter Buffer N Byte Swapped Register */
#define FLEXIO_SHIFTBUFBYS6  FLEXIO.SHIFTBUFBYS[6].R       /* Shifter Buffer N Byte Swapped Register */
#define FLEXIO_SHIFTBUFBYS7  FLEXIO.SHIFTBUFBYS[7].R       /* Shifter Buffer N Byte Swapped Register */
#define FLEXIO_SHIFTBUFBBS0  FLEXIO.SHIFTBUFBBS[0].R       /* Shifter Buffer N Bit Byte Swapped Register */
#define FLEXIO_SHIFTBUFBBS1  FLEXIO.SHIFTBUFBBS[1].R       /* Shifter Buffer N Bit Byte Swapped Register */
#define FLEXIO_SHIFTBUFBBS2  FLEXIO.SHIFTBUFBBS[2].R       /* Shifter Buffer N Bit Byte Swapped Register */
#define FLEXIO_SHIFTBUFBBS3  FLEXIO.SHIFTBUFBBS[3].R       /* Shifter Buffer N Bit Byte Swapped Register */
#define FLEXIO_SHIFTBUFBBS4  FLEXIO.SHIFTBUFBBS[4].R       /* Shifter Buffer N Bit Byte Swapped Register */
#define FLEXIO_SHIFTBUFBBS5  FLEXIO.SHIFTBUFBBS[5].R       /* Shifter Buffer N Bit Byte Swapped Register */
#define FLEXIO_SHIFTBUFBBS6  FLEXIO.SHIFTBUFBBS[6].R       /* Shifter Buffer N Bit Byte Swapped Register */
#define FLEXIO_SHIFTBUFBBS7  FLEXIO.SHIFTBUFBBS[7].R       /* Shifter Buffer N Bit Byte Swapped Register */
#define FLEXIO_TIMCTL0       FLEXIO.TIMCTL[0].R            /* Timer Control N Register */
#define FLEXIO_TIMCTL1       FLEXIO.TIMCTL[1].R            /* Timer Control N Register */
#define FLEXIO_TIMCTL2       FLEXIO.TIMCTL[2].R            /* Timer Control N Register */
#define FLEXIO_TIMCTL3       FLEXIO.TIMCTL[3].R            /* Timer Control N Register */
#define FLEXIO_TIMCTL4       FLEXIO.TIMCTL[4].R            /* Timer Control N Register */
#define FLEXIO_TIMCTL5       FLEXIO.TIMCTL[5].R            /* Timer Control N Register */
#define FLEXIO_TIMCTL6       FLEXIO.TIMCTL[6].R            /* Timer Control N Register */
#define FLEXIO_TIMCTL7       FLEXIO.TIMCTL[7].R            /* Timer Control N Register */
#define FLEXIO_TIMCFG0       FLEXIO.TIMCFG[0].R            /* Timer Configuration N Register */
#define FLEXIO_TIMCFG1       FLEXIO.TIMCFG[1].R            /* Timer Configuration N Register */
#define FLEXIO_TIMCFG2       FLEXIO.TIMCFG[2].R            /* Timer Configuration N Register */
#define FLEXIO_TIMCFG3       FLEXIO.TIMCFG[3].R            /* Timer Configuration N Register */
#define FLEXIO_TIMCFG4       FLEXIO.TIMCFG[4].R            /* Timer Configuration N Register */
#define FLEXIO_TIMCFG5       FLEXIO.TIMCFG[5].R            /* Timer Configuration N Register */
#define FLEXIO_TIMCFG6       FLEXIO.TIMCFG[6].R            /* Timer Configuration N Register */
#define FLEXIO_TIMCFG7       FLEXIO.TIMCFG[7].R            /* Timer Configuration N Register */
#define FLEXIO_TIMCMP0       FLEXIO.TIMCMP[0].R            /* Timer Compare N Register */
#define FLEXIO_TIMCMP1       FLEXIO.TIMCMP[1].R            /* Timer Compare N Register */
#define FLEXIO_TIMCMP2       FLEXIO.TIMCMP[2].R            /* Timer Compare N Register */
#define FLEXIO_TIMCMP3       FLEXIO.TIMCMP[3].R            /* Timer Compare N Register */
#define FLEXIO_TIMCMP4       FLEXIO.TIMCMP[4].R            /* Timer Compare N Register */
#define FLEXIO_TIMCMP5       FLEXIO.TIMCMP[5].R            /* Timer Compare N Register */
#define FLEXIO_TIMCMP6       FLEXIO.TIMCMP[6].R            /* Timer Compare N Register */
#define FLEXIO_TIMCMP7       FLEXIO.TIMCMP[7].R            /* Timer Compare N Register */
#define FLEXIO_SHIFTBUFNBS0  FLEXIO.SHIFTBUFNBS[0].R       /* Shifter Buffer N Nibble Byte Swapped Register */
#define FLEXIO_SHIFTBUFNBS1  FLEXIO.SHIFTBUFNBS[1].R       /* Shifter Buffer N Nibble Byte Swapped Register */
#define FLEXIO_SHIFTBUFNBS2  FLEXIO.SHIFTBUFNBS[2].R       /* Shifter Buffer N Nibble Byte Swapped Register */
#define FLEXIO_SHIFTBUFNBS3  FLEXIO.SHIFTBUFNBS[3].R       /* Shifter Buffer N Nibble Byte Swapped Register */
#define FLEXIO_SHIFTBUFNBS4  FLEXIO.SHIFTBUFNBS[4].R       /* Shifter Buffer N Nibble Byte Swapped Register */
#define FLEXIO_SHIFTBUFNBS5  FLEXIO.SHIFTBUFNBS[5].R       /* Shifter Buffer N Nibble Byte Swapped Register */
#define FLEXIO_SHIFTBUFNBS6  FLEXIO.SHIFTBUFNBS[6].R       /* Shifter Buffer N Nibble Byte Swapped Register */
#define FLEXIO_SHIFTBUFNBS7  FLEXIO.SHIFTBUFNBS[7].R       /* Shifter Buffer N Nibble Byte Swapped Register */
#define FLEXIO_SHIFTBUFHWS0  FLEXIO.SHIFTBUFHWS[0].R       /* Shifter Buffer N Half Word Swapped Register */
#define FLEXIO_SHIFTBUFHWS1  FLEXIO.SHIFTBUFHWS[1].R       /* Shifter Buffer N Half Word Swapped Register */
#define FLEXIO_SHIFTBUFHWS2  FLEXIO.SHIFTBUFHWS[2].R       /* Shifter Buffer N Half Word Swapped Register */
#define FLEXIO_SHIFTBUFHWS3  FLEXIO.SHIFTBUFHWS[3].R       /* Shifter Buffer N Half Word Swapped Register */
#define FLEXIO_SHIFTBUFHWS4  FLEXIO.SHIFTBUFHWS[4].R       /* Shifter Buffer N Half Word Swapped Register */
#define FLEXIO_SHIFTBUFHWS5  FLEXIO.SHIFTBUFHWS[5].R       /* Shifter Buffer N Half Word Swapped Register */
#define FLEXIO_SHIFTBUFHWS6  FLEXIO.SHIFTBUFHWS[6].R       /* Shifter Buffer N Half Word Swapped Register */
#define FLEXIO_SHIFTBUFHWS7  FLEXIO.SHIFTBUFHWS[7].R       /* Shifter Buffer N Half Word Swapped Register */
#define FLEXIO_SHIFTBUFNIS0  FLEXIO.SHIFTBUFNIS[0].R       /* Shifter Buffer N Nibble Swapped Register */
#define FLEXIO_SHIFTBUFNIS1  FLEXIO.SHIFTBUFNIS[1].R       /* Shifter Buffer N Nibble Swapped Register */
#define FLEXIO_SHIFTBUFNIS2  FLEXIO.SHIFTBUFNIS[2].R       /* Shifter Buffer N Nibble Swapped Register */
#define FLEXIO_SHIFTBUFNIS3  FLEXIO.SHIFTBUFNIS[3].R       /* Shifter Buffer N Nibble Swapped Register */
#define FLEXIO_SHIFTBUFNIS4  FLEXIO.SHIFTBUFNIS[4].R       /* Shifter Buffer N Nibble Swapped Register */
#define FLEXIO_SHIFTBUFNIS5  FLEXIO.SHIFTBUFNIS[5].R       /* Shifter Buffer N Nibble Swapped Register */
#define FLEXIO_SHIFTBUFNIS6  FLEXIO.SHIFTBUFNIS[6].R       /* Shifter Buffer N Nibble Swapped Register */
#define FLEXIO_SHIFTBUFNIS7  FLEXIO.SHIFTBUFNIS[7].R       /* Shifter Buffer N Nibble Swapped Register */
#define FLEXIO_SHIFTBUFOES0  FLEXIO.SHIFTBUFOES[0].R       /* Shifter Buffer N Odd Even Swapped Register */
#define FLEXIO_SHIFTBUFOES1  FLEXIO.SHIFTBUFOES[1].R       /* Shifter Buffer N Odd Even Swapped Register */
#define FLEXIO_SHIFTBUFOES2  FLEXIO.SHIFTBUFOES[2].R       /* Shifter Buffer N Odd Even Swapped Register */
#define FLEXIO_SHIFTBUFOES3  FLEXIO.SHIFTBUFOES[3].R       /* Shifter Buffer N Odd Even Swapped Register */
#define FLEXIO_SHIFTBUFOES4  FLEXIO.SHIFTBUFOES[4].R       /* Shifter Buffer N Odd Even Swapped Register */
#define FLEXIO_SHIFTBUFOES5  FLEXIO.SHIFTBUFOES[5].R       /* Shifter Buffer N Odd Even Swapped Register */
#define FLEXIO_SHIFTBUFOES6  FLEXIO.SHIFTBUFOES[6].R       /* Shifter Buffer N Odd Even Swapped Register */
#define FLEXIO_SHIFTBUFOES7  FLEXIO.SHIFTBUFOES[7].R       /* Shifter Buffer N Odd Even Swapped Register */
#define FLEXIO_SHIFTBUFEOS0  FLEXIO.SHIFTBUFEOS[0].R       /* Shifter Buffer N Even Odd Swapped Register */
#define FLEXIO_SHIFTBUFEOS1  FLEXIO.SHIFTBUFEOS[1].R       /* Shifter Buffer N Even Odd Swapped Register */
#define FLEXIO_SHIFTBUFEOS2  FLEXIO.SHIFTBUFEOS[2].R       /* Shifter Buffer N Even Odd Swapped Register */
#define FLEXIO_SHIFTBUFEOS3  FLEXIO.SHIFTBUFEOS[3].R       /* Shifter Buffer N Even Odd Swapped Register */
#define FLEXIO_SHIFTBUFEOS4  FLEXIO.SHIFTBUFEOS[4].R       /* Shifter Buffer N Even Odd Swapped Register */
#define FLEXIO_SHIFTBUFEOS5  FLEXIO.SHIFTBUFEOS[5].R       /* Shifter Buffer N Even Odd Swapped Register */
#define FLEXIO_SHIFTBUFEOS6  FLEXIO.SHIFTBUFEOS[6].R       /* Shifter Buffer N Even Odd Swapped Register */
#define FLEXIO_SHIFTBUFEOS7  FLEXIO.SHIFTBUFEOS[7].R       /* Shifter Buffer N Even Odd Swapped Register */
#define FLEXIO_SHIFTBUFHBS0  FLEXIO.SHIFTBUFHBS[0].R       /* Shifter Buffer N Halfword Byte Swapped Register */
#define FLEXIO_SHIFTBUFHBS1  FLEXIO.SHIFTBUFHBS[1].R       /* Shifter Buffer N Halfword Byte Swapped Register */
#define FLEXIO_SHIFTBUFHBS2  FLEXIO.SHIFTBUFHBS[2].R       /* Shifter Buffer N Halfword Byte Swapped Register */
#define FLEXIO_SHIFTBUFHBS3  FLEXIO.SHIFTBUFHBS[3].R       /* Shifter Buffer N Halfword Byte Swapped Register */
#define FLEXIO_SHIFTBUFHBS4  FLEXIO.SHIFTBUFHBS[4].R       /* Shifter Buffer N Halfword Byte Swapped Register */
#define FLEXIO_SHIFTBUFHBS5  FLEXIO.SHIFTBUFHBS[5].R       /* Shifter Buffer N Halfword Byte Swapped Register */
#define FLEXIO_SHIFTBUFHBS6  FLEXIO.SHIFTBUFHBS[6].R       /* Shifter Buffer N Halfword Byte Swapped Register */
#define FLEXIO_SHIFTBUFHBS7  FLEXIO.SHIFTBUFHBS[7].R       /* Shifter Buffer N Halfword Byte Swapped Register */

/* FXOSC */
#define FXOSC_CTRL           FXOSC.CTRL.R                  /* FXOSC Control Register */
#define FXOSC_STAT           FXOSC.STAT.R                  /* Oscillator Status Register */

/* FlexCAN_0 */
#define CAN_0_MCR            CAN_0.MCR.R                   /* Module Configuration register */
#define CAN_0_CTRL1          CAN_0.CTRL1.R                 /* Control 1 register */
#define CAN_0_TIMER          CAN_0.TIMER.R                 /* Free Running Timer */
#define CAN_0_RXMGMASK       CAN_0.RXMGMASK.R              /* Rx Mailboxes Global Mask register */
#define CAN_0_RX14MASK       CAN_0.RX14MASK.R              /* Rx 14 Mask register */
#define CAN_0_RX15MASK       CAN_0.RX15MASK.R              /* Rx 15 Mask register */
#define CAN_0_ECR            CAN_0.ECR.R                   /* Error Counter */
#define CAN_0_ESR1           CAN_0.ESR1.R                  /* Error and Status 1 register */
#define CAN_0_IMASK2         CAN_0.IMASK2.R                /* Interrupt Masks 2 register */
#define CAN_0_IMASK1         CAN_0.IMASK1.R                /* Interrupt Masks 1 register */
#define CAN_0_IFLAG2         CAN_0.IFLAG2.R                /* Interrupt Flags 2 register */
#define CAN_0_IFLAG1         CAN_0.IFLAG1.R                /* Interrupt Flags 1 register */
#define CAN_0_CTRL2          CAN_0.CTRL2.R                 /* Control 2 register */
#define CAN_0_ESR2           CAN_0.ESR2.R                  /* Error and Status 2 register */
#define CAN_0_CRCR           CAN_0.CRCR.R                  /* CRC register */
#define CAN_0_RXFGMASK       CAN_0.RXFGMASK.R              /* Legacy Rx FIFO Global Mask register */
#define CAN_0_RXFIR          CAN_0.RXFIR.R                 /* Legacy Rx FIFO Information register */
#define CAN_0_CBT            CAN_0.CBT.R                   /* CAN Bit Timing register */
#define CAN_0_IMASK3         CAN_0.IMASK3.R                /* Interrupt Masks 3 register */
#define CAN_0_IFLAG3         CAN_0.IFLAG3.R                /* Interrupt Flags 3 register */
#define CAN_0_CS0            CAN_0.MB[0].CS.R              /* Message Buffer 0 CS Register */
#define CAN_0_ID0            CAN_0.MB[0].ID.R              /* Message Buffer 0 ID Register */
#define CAN_0_B0             CAN_0.MB[0].DATA.B            /* Message Buffer 0 B Register */
#define CAN_0_H0             CAN_0.MB[0].DATA.H            /* Message Buffer 0 H Register */
#define CAN_0_W0             CAN_0.MB[0].DATA.W            /* Message Buffer 0 W Register */
#define CAN_0_CS1            CAN_0.MB[1].CS.R              /* Message Buffer 1 CS Register */
#define CAN_0_ID1            CAN_0.MB[1].ID.R              /* Message Buffer 1 ID Register */
#define CAN_0_B1             CAN_0.MB[1].DATA.B            /* Message Buffer 1 B Register */
#define CAN_0_H1             CAN_0.MB[1].DATA.H            /* Message Buffer 1 H Register */
#define CAN_0_W1             CAN_0.MB[1].DATA.W            /* Message Buffer 1 W Register */
#define CAN_0_CS2            CAN_0.MB[2].CS.R              /* Message Buffer 2 CS Register */
#define CAN_0_ID2            CAN_0.MB[2].ID.R              /* Message Buffer 2 ID Register */
#define CAN_0_B2             CAN_0.MB[2].DATA.B            /* Message Buffer 2 B Register */
#define CAN_0_H2             CAN_0.MB[2].DATA.H            /* Message Buffer 2 H Register */
#define CAN_0_W2             CAN_0.MB[2].DATA.W            /* Message Buffer 2 W Register */
#define CAN_0_CS3            CAN_0.MB[3].CS.R              /* Message Buffer 3 CS Register */
#define CAN_0_ID3            CAN_0.MB[3].ID.R              /* Message Buffer 3 ID Register */
#define CAN_0_B3             CAN_0.MB[3].DATA.B            /* Message Buffer 3 B Register */
#define CAN_0_H3             CAN_0.MB[3].DATA.H            /* Message Buffer 3 H Register */
#define CAN_0_W3             CAN_0.MB[3].DATA.W            /* Message Buffer 3 W Register */
#define CAN_0_CS4            CAN_0.MB[4].CS.R              /* Message Buffer 4 CS Register */
#define CAN_0_ID4            CAN_0.MB[4].ID.R              /* Message Buffer 4 ID Register */
#define CAN_0_B4             CAN_0.MB[4].DATA.B            /* Message Buffer 4 B Register */
#define CAN_0_H4             CAN_0.MB[4].DATA.H            /* Message Buffer 4 H Register */
#define CAN_0_W4             CAN_0.MB[4].DATA.W            /* Message Buffer 4 W Register */
#define CAN_0_CS5            CAN_0.MB[5].CS.R              /* Message Buffer 5 CS Register */
#define CAN_0_ID5            CAN_0.MB[5].ID.R              /* Message Buffer 5 ID Register */
#define CAN_0_B5             CAN_0.MB[5].DATA.B            /* Message Buffer 5 B Register */
#define CAN_0_H5             CAN_0.MB[5].DATA.H            /* Message Buffer 5 H Register */
#define CAN_0_W5             CAN_0.MB[5].DATA.W            /* Message Buffer 5 W Register */
#define CAN_0_CS6            CAN_0.MB[6].CS.R              /* Message Buffer 6 CS Register */
#define CAN_0_ID6            CAN_0.MB[6].ID.R              /* Message Buffer 6 ID Register */
#define CAN_0_B6             CAN_0.MB[6].DATA.B            /* Message Buffer 6 B Register */
#define CAN_0_H6             CAN_0.MB[6].DATA.H            /* Message Buffer 6 H Register */
#define CAN_0_W6             CAN_0.MB[6].DATA.W            /* Message Buffer 6 W Register */
#define CAN_0_CS7            CAN_0.MB[7].CS.R              /* Message Buffer 7 CS Register */
#define CAN_0_ID7            CAN_0.MB[7].ID.R              /* Message Buffer 7 ID Register */
#define CAN_0_B7             CAN_0.MB[7].DATA.B            /* Message Buffer 7 B Register */
#define CAN_0_H7             CAN_0.MB[7].DATA.H            /* Message Buffer 7 H Register */
#define CAN_0_W7             CAN_0.MB[7].DATA.W            /* Message Buffer 7 W Register */
#define CAN_0_CS8            CAN_0.MB[8].CS.R              /* Message Buffer 8 CS Register */
#define CAN_0_ID8            CAN_0.MB[8].ID.R              /* Message Buffer 8 ID Register */
#define CAN_0_B8             CAN_0.MB[8].DATA.B            /* Message Buffer 8 B Register */
#define CAN_0_H8             CAN_0.MB[8].DATA.H            /* Message Buffer 8 H Register */
#define CAN_0_W8             CAN_0.MB[8].DATA.W            /* Message Buffer 8 W Register */
#define CAN_0_CS9            CAN_0.MB[9].CS.R              /* Message Buffer 9 CS Register */
#define CAN_0_ID9            CAN_0.MB[9].ID.R              /* Message Buffer 9 ID Register */
#define CAN_0_B9             CAN_0.MB[9].DATA.B            /* Message Buffer 9 B Register */
#define CAN_0_H9             CAN_0.MB[9].DATA.H            /* Message Buffer 9 H Register */
#define CAN_0_W9             CAN_0.MB[9].DATA.W            /* Message Buffer 9 W Register */
#define CAN_0_CS10           CAN_0.MB[10].CS.R             /* Message Buffer 10 CS Register */
#define CAN_0_ID10           CAN_0.MB[10].ID.R             /* Message Buffer 10 ID Register */
#define CAN_0_B10            CAN_0.MB[10].DATA.B           /* Message Buffer 10 B Register */
#define CAN_0_H10            CAN_0.MB[10].DATA.H           /* Message Buffer 10 H Register */
#define CAN_0_W10            CAN_0.MB[10].DATA.W           /* Message Buffer 10 W Register */
#define CAN_0_CS11           CAN_0.MB[11].CS.R             /* Message Buffer 11 CS Register */
#define CAN_0_ID11           CAN_0.MB[11].ID.R             /* Message Buffer 11 ID Register */
#define CAN_0_B11            CAN_0.MB[11].DATA.B           /* Message Buffer 11 B Register */
#define CAN_0_H11            CAN_0.MB[11].DATA.H           /* Message Buffer 11 H Register */
#define CAN_0_W11            CAN_0.MB[11].DATA.W           /* Message Buffer 11 W Register */
#define CAN_0_CS12           CAN_0.MB[12].CS.R             /* Message Buffer 12 CS Register */
#define CAN_0_ID12           CAN_0.MB[12].ID.R             /* Message Buffer 12 ID Register */
#define CAN_0_B12            CAN_0.MB[12].DATA.B           /* Message Buffer 12 B Register */
#define CAN_0_H12            CAN_0.MB[12].DATA.H           /* Message Buffer 12 H Register */
#define CAN_0_W12            CAN_0.MB[12].DATA.W           /* Message Buffer 12 W Register */
#define CAN_0_CS13           CAN_0.MB[13].CS.R             /* Message Buffer 13 CS Register */
#define CAN_0_ID13           CAN_0.MB[13].ID.R             /* Message Buffer 13 ID Register */
#define CAN_0_B13            CAN_0.MB[13].DATA.B           /* Message Buffer 13 B Register */
#define CAN_0_H13            CAN_0.MB[13].DATA.H           /* Message Buffer 13 H Register */
#define CAN_0_W13            CAN_0.MB[13].DATA.W           /* Message Buffer 13 W Register */
#define CAN_0_CS14           CAN_0.MB[14].CS.R             /* Message Buffer 14 CS Register */
#define CAN_0_ID14           CAN_0.MB[14].ID.R             /* Message Buffer 14 ID Register */
#define CAN_0_B14            CAN_0.MB[14].DATA.B           /* Message Buffer 14 B Register */
#define CAN_0_H14            CAN_0.MB[14].DATA.H           /* Message Buffer 14 H Register */
#define CAN_0_W14            CAN_0.MB[14].DATA.W           /* Message Buffer 14 W Register */
#define CAN_0_CS15           CAN_0.MB[15].CS.R             /* Message Buffer 15 CS Register */
#define CAN_0_ID15           CAN_0.MB[15].ID.R             /* Message Buffer 15 ID Register */
#define CAN_0_B15            CAN_0.MB[15].DATA.B           /* Message Buffer 15 B Register */
#define CAN_0_H15            CAN_0.MB[15].DATA.H           /* Message Buffer 15 H Register */
#define CAN_0_W15            CAN_0.MB[15].DATA.W           /* Message Buffer 15 W Register */
#define CAN_0_CS16           CAN_0.MB[16].CS.R             /* Message Buffer 16 CS Register */
#define CAN_0_ID16           CAN_0.MB[16].ID.R             /* Message Buffer 16 ID Register */
#define CAN_0_B16            CAN_0.MB[16].DATA.B           /* Message Buffer 16 B Register */
#define CAN_0_H16            CAN_0.MB[16].DATA.H           /* Message Buffer 16 H Register */
#define CAN_0_W16            CAN_0.MB[16].DATA.W           /* Message Buffer 16 W Register */
#define CAN_0_CS17           CAN_0.MB[17].CS.R             /* Message Buffer 17 CS Register */
#define CAN_0_ID17           CAN_0.MB[17].ID.R             /* Message Buffer 17 ID Register */
#define CAN_0_B17            CAN_0.MB[17].DATA.B           /* Message Buffer 17 B Register */
#define CAN_0_H17            CAN_0.MB[17].DATA.H           /* Message Buffer 17 H Register */
#define CAN_0_W17            CAN_0.MB[17].DATA.W           /* Message Buffer 17 W Register */
#define CAN_0_CS18           CAN_0.MB[18].CS.R             /* Message Buffer 18 CS Register */
#define CAN_0_ID18           CAN_0.MB[18].ID.R             /* Message Buffer 18 ID Register */
#define CAN_0_B18            CAN_0.MB[18].DATA.B           /* Message Buffer 18 B Register */
#define CAN_0_H18            CAN_0.MB[18].DATA.H           /* Message Buffer 18 H Register */
#define CAN_0_W18            CAN_0.MB[18].DATA.W           /* Message Buffer 18 W Register */
#define CAN_0_CS19           CAN_0.MB[19].CS.R             /* Message Buffer 19 CS Register */
#define CAN_0_ID19           CAN_0.MB[19].ID.R             /* Message Buffer 19 ID Register */
#define CAN_0_B19            CAN_0.MB[19].DATA.B           /* Message Buffer 19 B Register */
#define CAN_0_H19            CAN_0.MB[19].DATA.H           /* Message Buffer 19 H Register */
#define CAN_0_W19            CAN_0.MB[19].DATA.W           /* Message Buffer 19 W Register */
#define CAN_0_CS20           CAN_0.MB[20].CS.R             /* Message Buffer 20 CS Register */
#define CAN_0_ID20           CAN_0.MB[20].ID.R             /* Message Buffer 20 ID Register */
#define CAN_0_B20            CAN_0.MB[20].DATA.B           /* Message Buffer 20 B Register */
#define CAN_0_H20            CAN_0.MB[20].DATA.H           /* Message Buffer 20 H Register */
#define CAN_0_W20            CAN_0.MB[20].DATA.W           /* Message Buffer 20 W Register */
#define CAN_0_CS21           CAN_0.MB[21].CS.R             /* Message Buffer 21 CS Register */
#define CAN_0_ID21           CAN_0.MB[21].ID.R             /* Message Buffer 21 ID Register */
#define CAN_0_B21            CAN_0.MB[21].DATA.B           /* Message Buffer 21 B Register */
#define CAN_0_H21            CAN_0.MB[21].DATA.H           /* Message Buffer 21 H Register */
#define CAN_0_W21            CAN_0.MB[21].DATA.W           /* Message Buffer 21 W Register */
#define CAN_0_CS22           CAN_0.MB[22].CS.R             /* Message Buffer 22 CS Register */
#define CAN_0_ID22           CAN_0.MB[22].ID.R             /* Message Buffer 22 ID Register */
#define CAN_0_B22            CAN_0.MB[22].DATA.B           /* Message Buffer 22 B Register */
#define CAN_0_H22            CAN_0.MB[22].DATA.H           /* Message Buffer 22 H Register */
#define CAN_0_W22            CAN_0.MB[22].DATA.W           /* Message Buffer 22 W Register */
#define CAN_0_CS23           CAN_0.MB[23].CS.R             /* Message Buffer 23 CS Register */
#define CAN_0_ID23           CAN_0.MB[23].ID.R             /* Message Buffer 23 ID Register */
#define CAN_0_B23            CAN_0.MB[23].DATA.B           /* Message Buffer 23 B Register */
#define CAN_0_H23            CAN_0.MB[23].DATA.H           /* Message Buffer 23 H Register */
#define CAN_0_W23            CAN_0.MB[23].DATA.W           /* Message Buffer 23 W Register */
#define CAN_0_CS24           CAN_0.MB[24].CS.R             /* Message Buffer 24 CS Register */
#define CAN_0_ID24           CAN_0.MB[24].ID.R             /* Message Buffer 24 ID Register */
#define CAN_0_B24            CAN_0.MB[24].DATA.B           /* Message Buffer 24 B Register */
#define CAN_0_H24            CAN_0.MB[24].DATA.H           /* Message Buffer 24 H Register */
#define CAN_0_W24            CAN_0.MB[24].DATA.W           /* Message Buffer 24 W Register */
#define CAN_0_CS25           CAN_0.MB[25].CS.R             /* Message Buffer 25 CS Register */
#define CAN_0_ID25           CAN_0.MB[25].ID.R             /* Message Buffer 25 ID Register */
#define CAN_0_B25            CAN_0.MB[25].DATA.B           /* Message Buffer 25 B Register */
#define CAN_0_H25            CAN_0.MB[25].DATA.H           /* Message Buffer 25 H Register */
#define CAN_0_W25            CAN_0.MB[25].DATA.W           /* Message Buffer 25 W Register */
#define CAN_0_CS26           CAN_0.MB[26].CS.R             /* Message Buffer 26 CS Register */
#define CAN_0_ID26           CAN_0.MB[26].ID.R             /* Message Buffer 26 ID Register */
#define CAN_0_B26            CAN_0.MB[26].DATA.B           /* Message Buffer 26 B Register */
#define CAN_0_H26            CAN_0.MB[26].DATA.H           /* Message Buffer 26 H Register */
#define CAN_0_W26            CAN_0.MB[26].DATA.W           /* Message Buffer 26 W Register */
#define CAN_0_CS27           CAN_0.MB[27].CS.R             /* Message Buffer 27 CS Register */
#define CAN_0_ID27           CAN_0.MB[27].ID.R             /* Message Buffer 27 ID Register */
#define CAN_0_B27            CAN_0.MB[27].DATA.B           /* Message Buffer 27 B Register */
#define CAN_0_H27            CAN_0.MB[27].DATA.H           /* Message Buffer 27 H Register */
#define CAN_0_W27            CAN_0.MB[27].DATA.W           /* Message Buffer 27 W Register */
#define CAN_0_CS28           CAN_0.MB[28].CS.R             /* Message Buffer 28 CS Register */
#define CAN_0_ID28           CAN_0.MB[28].ID.R             /* Message Buffer 28 ID Register */
#define CAN_0_B28            CAN_0.MB[28].DATA.B           /* Message Buffer 28 B Register */
#define CAN_0_H28            CAN_0.MB[28].DATA.H           /* Message Buffer 28 H Register */
#define CAN_0_W28            CAN_0.MB[28].DATA.W           /* Message Buffer 28 W Register */
#define CAN_0_CS29           CAN_0.MB[29].CS.R             /* Message Buffer 29 CS Register */
#define CAN_0_ID29           CAN_0.MB[29].ID.R             /* Message Buffer 29 ID Register */
#define CAN_0_B29            CAN_0.MB[29].DATA.B           /* Message Buffer 29 B Register */
#define CAN_0_H29            CAN_0.MB[29].DATA.H           /* Message Buffer 29 H Register */
#define CAN_0_W29            CAN_0.MB[29].DATA.W           /* Message Buffer 29 W Register */
#define CAN_0_CS30           CAN_0.MB[30].CS.R             /* Message Buffer 30 CS Register */
#define CAN_0_ID30           CAN_0.MB[30].ID.R             /* Message Buffer 30 ID Register */
#define CAN_0_B30            CAN_0.MB[30].DATA.B           /* Message Buffer 30 B Register */
#define CAN_0_H30            CAN_0.MB[30].DATA.H           /* Message Buffer 30 H Register */
#define CAN_0_W30            CAN_0.MB[30].DATA.W           /* Message Buffer 30 W Register */
#define CAN_0_CS31           CAN_0.MB[31].CS.R             /* Message Buffer 31 CS Register */
#define CAN_0_ID31           CAN_0.MB[31].ID.R             /* Message Buffer 31 ID Register */
#define CAN_0_B31            CAN_0.MB[31].DATA.B           /* Message Buffer 31 B Register */
#define CAN_0_H31            CAN_0.MB[31].DATA.H           /* Message Buffer 31 H Register */
#define CAN_0_W31            CAN_0.MB[31].DATA.W           /* Message Buffer 31 W Register */
#define CAN_0_CS32           CAN_0.MB[32].CS.R             /* Message Buffer 32 CS Register */
#define CAN_0_ID32           CAN_0.MB[32].ID.R             /* Message Buffer 32 ID Register */
#define CAN_0_B32            CAN_0.MB[32].DATA.B           /* Message Buffer 32 B Register */
#define CAN_0_H32            CAN_0.MB[32].DATA.H           /* Message Buffer 32 H Register */
#define CAN_0_W32            CAN_0.MB[32].DATA.W           /* Message Buffer 32 W Register */
#define CAN_0_CS33           CAN_0.MB[33].CS.R             /* Message Buffer 33 CS Register */
#define CAN_0_ID33           CAN_0.MB[33].ID.R             /* Message Buffer 33 ID Register */
#define CAN_0_B33            CAN_0.MB[33].DATA.B           /* Message Buffer 33 B Register */
#define CAN_0_H33            CAN_0.MB[33].DATA.H           /* Message Buffer 33 H Register */
#define CAN_0_W33            CAN_0.MB[33].DATA.W           /* Message Buffer 33 W Register */
#define CAN_0_CS34           CAN_0.MB[34].CS.R             /* Message Buffer 34 CS Register */
#define CAN_0_ID34           CAN_0.MB[34].ID.R             /* Message Buffer 34 ID Register */
#define CAN_0_B34            CAN_0.MB[34].DATA.B           /* Message Buffer 34 B Register */
#define CAN_0_H34            CAN_0.MB[34].DATA.H           /* Message Buffer 34 H Register */
#define CAN_0_W34            CAN_0.MB[34].DATA.W           /* Message Buffer 34 W Register */
#define CAN_0_CS35           CAN_0.MB[35].CS.R             /* Message Buffer 35 CS Register */
#define CAN_0_ID35           CAN_0.MB[35].ID.R             /* Message Buffer 35 ID Register */
#define CAN_0_B35            CAN_0.MB[35].DATA.B           /* Message Buffer 35 B Register */
#define CAN_0_H35            CAN_0.MB[35].DATA.H           /* Message Buffer 35 H Register */
#define CAN_0_W35            CAN_0.MB[35].DATA.W           /* Message Buffer 35 W Register */
#define CAN_0_CS36           CAN_0.MB[36].CS.R             /* Message Buffer 36 CS Register */
#define CAN_0_ID36           CAN_0.MB[36].ID.R             /* Message Buffer 36 ID Register */
#define CAN_0_B36            CAN_0.MB[36].DATA.B           /* Message Buffer 36 B Register */
#define CAN_0_H36            CAN_0.MB[36].DATA.H           /* Message Buffer 36 H Register */
#define CAN_0_W36            CAN_0.MB[36].DATA.W           /* Message Buffer 36 W Register */
#define CAN_0_CS37           CAN_0.MB[37].CS.R             /* Message Buffer 37 CS Register */
#define CAN_0_ID37           CAN_0.MB[37].ID.R             /* Message Buffer 37 ID Register */
#define CAN_0_B37            CAN_0.MB[37].DATA.B           /* Message Buffer 37 B Register */
#define CAN_0_H37            CAN_0.MB[37].DATA.H           /* Message Buffer 37 H Register */
#define CAN_0_W37            CAN_0.MB[37].DATA.W           /* Message Buffer 37 W Register */
#define CAN_0_CS38           CAN_0.MB[38].CS.R             /* Message Buffer 38 CS Register */
#define CAN_0_ID38           CAN_0.MB[38].ID.R             /* Message Buffer 38 ID Register */
#define CAN_0_B38            CAN_0.MB[38].DATA.B           /* Message Buffer 38 B Register */
#define CAN_0_H38            CAN_0.MB[38].DATA.H           /* Message Buffer 38 H Register */
#define CAN_0_W38            CAN_0.MB[38].DATA.W           /* Message Buffer 38 W Register */
#define CAN_0_CS39           CAN_0.MB[39].CS.R             /* Message Buffer 39 CS Register */
#define CAN_0_ID39           CAN_0.MB[39].ID.R             /* Message Buffer 39 ID Register */
#define CAN_0_B39            CAN_0.MB[39].DATA.B           /* Message Buffer 39 B Register */
#define CAN_0_H39            CAN_0.MB[39].DATA.H           /* Message Buffer 39 H Register */
#define CAN_0_W39            CAN_0.MB[39].DATA.W           /* Message Buffer 39 W Register */
#define CAN_0_CS40           CAN_0.MB[40].CS.R             /* Message Buffer 40 CS Register */
#define CAN_0_ID40           CAN_0.MB[40].ID.R             /* Message Buffer 40 ID Register */
#define CAN_0_B40            CAN_0.MB[40].DATA.B           /* Message Buffer 40 B Register */
#define CAN_0_H40            CAN_0.MB[40].DATA.H           /* Message Buffer 40 H Register */
#define CAN_0_W40            CAN_0.MB[40].DATA.W           /* Message Buffer 40 W Register */
#define CAN_0_CS41           CAN_0.MB[41].CS.R             /* Message Buffer 41 CS Register */
#define CAN_0_ID41           CAN_0.MB[41].ID.R             /* Message Buffer 41 ID Register */
#define CAN_0_B41            CAN_0.MB[41].DATA.B           /* Message Buffer 41 B Register */
#define CAN_0_H41            CAN_0.MB[41].DATA.H           /* Message Buffer 41 H Register */
#define CAN_0_W41            CAN_0.MB[41].DATA.W           /* Message Buffer 41 W Register */
#define CAN_0_CS42           CAN_0.MB[42].CS.R             /* Message Buffer 42 CS Register */
#define CAN_0_ID42           CAN_0.MB[42].ID.R             /* Message Buffer 42 ID Register */
#define CAN_0_B42            CAN_0.MB[42].DATA.B           /* Message Buffer 42 B Register */
#define CAN_0_H42            CAN_0.MB[42].DATA.H           /* Message Buffer 42 H Register */
#define CAN_0_W42            CAN_0.MB[42].DATA.W           /* Message Buffer 42 W Register */
#define CAN_0_CS43           CAN_0.MB[43].CS.R             /* Message Buffer 43 CS Register */
#define CAN_0_ID43           CAN_0.MB[43].ID.R             /* Message Buffer 43 ID Register */
#define CAN_0_B43            CAN_0.MB[43].DATA.B           /* Message Buffer 43 B Register */
#define CAN_0_H43            CAN_0.MB[43].DATA.H           /* Message Buffer 43 H Register */
#define CAN_0_W43            CAN_0.MB[43].DATA.W           /* Message Buffer 43 W Register */
#define CAN_0_CS44           CAN_0.MB[44].CS.R             /* Message Buffer 44 CS Register */
#define CAN_0_ID44           CAN_0.MB[44].ID.R             /* Message Buffer 44 ID Register */
#define CAN_0_B44            CAN_0.MB[44].DATA.B           /* Message Buffer 44 B Register */
#define CAN_0_H44            CAN_0.MB[44].DATA.H           /* Message Buffer 44 H Register */
#define CAN_0_W44            CAN_0.MB[44].DATA.W           /* Message Buffer 44 W Register */
#define CAN_0_CS45           CAN_0.MB[45].CS.R             /* Message Buffer 45 CS Register */
#define CAN_0_ID45           CAN_0.MB[45].ID.R             /* Message Buffer 45 ID Register */
#define CAN_0_B45            CAN_0.MB[45].DATA.B           /* Message Buffer 45 B Register */
#define CAN_0_H45            CAN_0.MB[45].DATA.H           /* Message Buffer 45 H Register */
#define CAN_0_W45            CAN_0.MB[45].DATA.W           /* Message Buffer 45 W Register */
#define CAN_0_CS46           CAN_0.MB[46].CS.R             /* Message Buffer 46 CS Register */
#define CAN_0_ID46           CAN_0.MB[46].ID.R             /* Message Buffer 46 ID Register */
#define CAN_0_B46            CAN_0.MB[46].DATA.B           /* Message Buffer 46 B Register */
#define CAN_0_H46            CAN_0.MB[46].DATA.H           /* Message Buffer 46 H Register */
#define CAN_0_W46            CAN_0.MB[46].DATA.W           /* Message Buffer 46 W Register */
#define CAN_0_CS47           CAN_0.MB[47].CS.R             /* Message Buffer 47 CS Register */
#define CAN_0_ID47           CAN_0.MB[47].ID.R             /* Message Buffer 47 ID Register */
#define CAN_0_B47            CAN_0.MB[47].DATA.B           /* Message Buffer 47 B Register */
#define CAN_0_H47            CAN_0.MB[47].DATA.H           /* Message Buffer 47 H Register */
#define CAN_0_W47            CAN_0.MB[47].DATA.W           /* Message Buffer 47 W Register */
#define CAN_0_CS48           CAN_0.MB[48].CS.R             /* Message Buffer 48 CS Register */
#define CAN_0_ID48           CAN_0.MB[48].ID.R             /* Message Buffer 48 ID Register */
#define CAN_0_B48            CAN_0.MB[48].DATA.B           /* Message Buffer 48 B Register */
#define CAN_0_H48            CAN_0.MB[48].DATA.H           /* Message Buffer 48 H Register */
#define CAN_0_W48            CAN_0.MB[48].DATA.W           /* Message Buffer 48 W Register */
#define CAN_0_CS49           CAN_0.MB[49].CS.R             /* Message Buffer 49 CS Register */
#define CAN_0_ID49           CAN_0.MB[49].ID.R             /* Message Buffer 49 ID Register */
#define CAN_0_B49            CAN_0.MB[49].DATA.B           /* Message Buffer 49 B Register */
#define CAN_0_H49            CAN_0.MB[49].DATA.H           /* Message Buffer 49 H Register */
#define CAN_0_W49            CAN_0.MB[49].DATA.W           /* Message Buffer 49 W Register */
#define CAN_0_CS50           CAN_0.MB[50].CS.R             /* Message Buffer 50 CS Register */
#define CAN_0_ID50           CAN_0.MB[50].ID.R             /* Message Buffer 50 ID Register */
#define CAN_0_B50            CAN_0.MB[50].DATA.B           /* Message Buffer 50 B Register */
#define CAN_0_H50            CAN_0.MB[50].DATA.H           /* Message Buffer 50 H Register */
#define CAN_0_W50            CAN_0.MB[50].DATA.W           /* Message Buffer 50 W Register */
#define CAN_0_CS51           CAN_0.MB[51].CS.R             /* Message Buffer 51 CS Register */
#define CAN_0_ID51           CAN_0.MB[51].ID.R             /* Message Buffer 51 ID Register */
#define CAN_0_B51            CAN_0.MB[51].DATA.B           /* Message Buffer 51 B Register */
#define CAN_0_H51            CAN_0.MB[51].DATA.H           /* Message Buffer 51 H Register */
#define CAN_0_W51            CAN_0.MB[51].DATA.W           /* Message Buffer 51 W Register */
#define CAN_0_CS52           CAN_0.MB[52].CS.R             /* Message Buffer 52 CS Register */
#define CAN_0_ID52           CAN_0.MB[52].ID.R             /* Message Buffer 52 ID Register */
#define CAN_0_B52            CAN_0.MB[52].DATA.B           /* Message Buffer 52 B Register */
#define CAN_0_H52            CAN_0.MB[52].DATA.H           /* Message Buffer 52 H Register */
#define CAN_0_W52            CAN_0.MB[52].DATA.W           /* Message Buffer 52 W Register */
#define CAN_0_CS53           CAN_0.MB[53].CS.R             /* Message Buffer 53 CS Register */
#define CAN_0_ID53           CAN_0.MB[53].ID.R             /* Message Buffer 53 ID Register */
#define CAN_0_B53            CAN_0.MB[53].DATA.B           /* Message Buffer 53 B Register */
#define CAN_0_H53            CAN_0.MB[53].DATA.H           /* Message Buffer 53 H Register */
#define CAN_0_W53            CAN_0.MB[53].DATA.W           /* Message Buffer 53 W Register */
#define CAN_0_CS54           CAN_0.MB[54].CS.R             /* Message Buffer 54 CS Register */
#define CAN_0_ID54           CAN_0.MB[54].ID.R             /* Message Buffer 54 ID Register */
#define CAN_0_B54            CAN_0.MB[54].DATA.B           /* Message Buffer 54 B Register */
#define CAN_0_H54            CAN_0.MB[54].DATA.H           /* Message Buffer 54 H Register */
#define CAN_0_W54            CAN_0.MB[54].DATA.W           /* Message Buffer 54 W Register */
#define CAN_0_CS55           CAN_0.MB[55].CS.R             /* Message Buffer 55 CS Register */
#define CAN_0_ID55           CAN_0.MB[55].ID.R             /* Message Buffer 55 ID Register */
#define CAN_0_B55            CAN_0.MB[55].DATA.B           /* Message Buffer 55 B Register */
#define CAN_0_H55            CAN_0.MB[55].DATA.H           /* Message Buffer 55 H Register */
#define CAN_0_W55            CAN_0.MB[55].DATA.W           /* Message Buffer 55 W Register */
#define CAN_0_CS56           CAN_0.MB[56].CS.R             /* Message Buffer 56 CS Register */
#define CAN_0_ID56           CAN_0.MB[56].ID.R             /* Message Buffer 56 ID Register */
#define CAN_0_B56            CAN_0.MB[56].DATA.B           /* Message Buffer 56 B Register */
#define CAN_0_H56            CAN_0.MB[56].DATA.H           /* Message Buffer 56 H Register */
#define CAN_0_W56            CAN_0.MB[56].DATA.W           /* Message Buffer 56 W Register */
#define CAN_0_CS57           CAN_0.MB[57].CS.R             /* Message Buffer 57 CS Register */
#define CAN_0_ID57           CAN_0.MB[57].ID.R             /* Message Buffer 57 ID Register */
#define CAN_0_B57            CAN_0.MB[57].DATA.B           /* Message Buffer 57 B Register */
#define CAN_0_H57            CAN_0.MB[57].DATA.H           /* Message Buffer 57 H Register */
#define CAN_0_W57            CAN_0.MB[57].DATA.W           /* Message Buffer 57 W Register */
#define CAN_0_CS58           CAN_0.MB[58].CS.R             /* Message Buffer 58 CS Register */
#define CAN_0_ID58           CAN_0.MB[58].ID.R             /* Message Buffer 58 ID Register */
#define CAN_0_B58            CAN_0.MB[58].DATA.B           /* Message Buffer 58 B Register */
#define CAN_0_H58            CAN_0.MB[58].DATA.H           /* Message Buffer 58 H Register */
#define CAN_0_W58            CAN_0.MB[58].DATA.W           /* Message Buffer 58 W Register */
#define CAN_0_CS59           CAN_0.MB[59].CS.R             /* Message Buffer 59 CS Register */
#define CAN_0_ID59           CAN_0.MB[59].ID.R             /* Message Buffer 59 ID Register */
#define CAN_0_B59            CAN_0.MB[59].DATA.B           /* Message Buffer 59 B Register */
#define CAN_0_H59            CAN_0.MB[59].DATA.H           /* Message Buffer 59 H Register */
#define CAN_0_W59            CAN_0.MB[59].DATA.W           /* Message Buffer 59 W Register */
#define CAN_0_CS60           CAN_0.MB[60].CS.R             /* Message Buffer 60 CS Register */
#define CAN_0_ID60           CAN_0.MB[60].ID.R             /* Message Buffer 60 ID Register */
#define CAN_0_B60            CAN_0.MB[60].DATA.B           /* Message Buffer 60 B Register */
#define CAN_0_H60            CAN_0.MB[60].DATA.H           /* Message Buffer 60 H Register */
#define CAN_0_W60            CAN_0.MB[60].DATA.W           /* Message Buffer 60 W Register */
#define CAN_0_CS61           CAN_0.MB[61].CS.R             /* Message Buffer 61 CS Register */
#define CAN_0_ID61           CAN_0.MB[61].ID.R             /* Message Buffer 61 ID Register */
#define CAN_0_B61            CAN_0.MB[61].DATA.B           /* Message Buffer 61 B Register */
#define CAN_0_H61            CAN_0.MB[61].DATA.H           /* Message Buffer 61 H Register */
#define CAN_0_W61            CAN_0.MB[61].DATA.W           /* Message Buffer 61 W Register */
#define CAN_0_CS62           CAN_0.MB[62].CS.R             /* Message Buffer 62 CS Register */
#define CAN_0_ID62           CAN_0.MB[62].ID.R             /* Message Buffer 62 ID Register */
#define CAN_0_B62            CAN_0.MB[62].DATA.B           /* Message Buffer 62 B Register */
#define CAN_0_H62            CAN_0.MB[62].DATA.H           /* Message Buffer 62 H Register */
#define CAN_0_W62            CAN_0.MB[62].DATA.W           /* Message Buffer 62 W Register */
#define CAN_0_CS63           CAN_0.MB[63].CS.R             /* Message Buffer 63 CS Register */
#define CAN_0_ID63           CAN_0.MB[63].ID.R             /* Message Buffer 63 ID Register */
#define CAN_0_B63            CAN_0.MB[63].DATA.B           /* Message Buffer 63 B Register */
#define CAN_0_H63            CAN_0.MB[63].DATA.H           /* Message Buffer 63 H Register */
#define CAN_0_W63            CAN_0.MB[63].DATA.W           /* Message Buffer 63 W Register */
#define CAN_0_CS64           CAN_0.MB[64].CS.R             /* Message Buffer 64 CS Register */
#define CAN_0_ID64           CAN_0.MB[64].ID.R             /* Message Buffer 64 ID Register */
#define CAN_0_B64            CAN_0.MB[64].DATA.B           /* Message Buffer 64 B Register */
#define CAN_0_H64            CAN_0.MB[64].DATA.H           /* Message Buffer 64 H Register */
#define CAN_0_W64            CAN_0.MB[64].DATA.W           /* Message Buffer 64 W Register */
#define CAN_0_CS65           CAN_0.MB[65].CS.R             /* Message Buffer 65 CS Register */
#define CAN_0_ID65           CAN_0.MB[65].ID.R             /* Message Buffer 65 ID Register */
#define CAN_0_B65            CAN_0.MB[65].DATA.B           /* Message Buffer 65 B Register */
#define CAN_0_H65            CAN_0.MB[65].DATA.H           /* Message Buffer 65 H Register */
#define CAN_0_W65            CAN_0.MB[65].DATA.W           /* Message Buffer 65 W Register */
#define CAN_0_CS66           CAN_0.MB[66].CS.R             /* Message Buffer 66 CS Register */
#define CAN_0_ID66           CAN_0.MB[66].ID.R             /* Message Buffer 66 ID Register */
#define CAN_0_B66            CAN_0.MB[66].DATA.B           /* Message Buffer 66 B Register */
#define CAN_0_H66            CAN_0.MB[66].DATA.H           /* Message Buffer 66 H Register */
#define CAN_0_W66            CAN_0.MB[66].DATA.W           /* Message Buffer 66 W Register */
#define CAN_0_CS67           CAN_0.MB[67].CS.R             /* Message Buffer 67 CS Register */
#define CAN_0_ID67           CAN_0.MB[67].ID.R             /* Message Buffer 67 ID Register */
#define CAN_0_B67            CAN_0.MB[67].DATA.B           /* Message Buffer 67 B Register */
#define CAN_0_H67            CAN_0.MB[67].DATA.H           /* Message Buffer 67 H Register */
#define CAN_0_W67            CAN_0.MB[67].DATA.W           /* Message Buffer 67 W Register */
#define CAN_0_CS68           CAN_0.MB[68].CS.R             /* Message Buffer 68 CS Register */
#define CAN_0_ID68           CAN_0.MB[68].ID.R             /* Message Buffer 68 ID Register */
#define CAN_0_B68            CAN_0.MB[68].DATA.B           /* Message Buffer 68 B Register */
#define CAN_0_H68            CAN_0.MB[68].DATA.H           /* Message Buffer 68 H Register */
#define CAN_0_W68            CAN_0.MB[68].DATA.W           /* Message Buffer 68 W Register */
#define CAN_0_CS69           CAN_0.MB[69].CS.R             /* Message Buffer 69 CS Register */
#define CAN_0_ID69           CAN_0.MB[69].ID.R             /* Message Buffer 69 ID Register */
#define CAN_0_B69            CAN_0.MB[69].DATA.B           /* Message Buffer 69 B Register */
#define CAN_0_H69            CAN_0.MB[69].DATA.H           /* Message Buffer 69 H Register */
#define CAN_0_W69            CAN_0.MB[69].DATA.W           /* Message Buffer 69 W Register */
#define CAN_0_CS70           CAN_0.MB[70].CS.R             /* Message Buffer 70 CS Register */
#define CAN_0_ID70           CAN_0.MB[70].ID.R             /* Message Buffer 70 ID Register */
#define CAN_0_B70            CAN_0.MB[70].DATA.B           /* Message Buffer 70 B Register */
#define CAN_0_H70            CAN_0.MB[70].DATA.H           /* Message Buffer 70 H Register */
#define CAN_0_W70            CAN_0.MB[70].DATA.W           /* Message Buffer 70 W Register */
#define CAN_0_CS71           CAN_0.MB[71].CS.R             /* Message Buffer 71 CS Register */
#define CAN_0_ID71           CAN_0.MB[71].ID.R             /* Message Buffer 71 ID Register */
#define CAN_0_B71            CAN_0.MB[71].DATA.B           /* Message Buffer 71 B Register */
#define CAN_0_H71            CAN_0.MB[71].DATA.H           /* Message Buffer 71 H Register */
#define CAN_0_W71            CAN_0.MB[71].DATA.W           /* Message Buffer 71 W Register */
#define CAN_0_CS72           CAN_0.MB[72].CS.R             /* Message Buffer 72 CS Register */
#define CAN_0_ID72           CAN_0.MB[72].ID.R             /* Message Buffer 72 ID Register */
#define CAN_0_B72            CAN_0.MB[72].DATA.B           /* Message Buffer 72 B Register */
#define CAN_0_H72            CAN_0.MB[72].DATA.H           /* Message Buffer 72 H Register */
#define CAN_0_W72            CAN_0.MB[72].DATA.W           /* Message Buffer 72 W Register */
#define CAN_0_CS73           CAN_0.MB[73].CS.R             /* Message Buffer 73 CS Register */
#define CAN_0_ID73           CAN_0.MB[73].ID.R             /* Message Buffer 73 ID Register */
#define CAN_0_B73            CAN_0.MB[73].DATA.B           /* Message Buffer 73 B Register */
#define CAN_0_H73            CAN_0.MB[73].DATA.H           /* Message Buffer 73 H Register */
#define CAN_0_W73            CAN_0.MB[73].DATA.W           /* Message Buffer 73 W Register */
#define CAN_0_CS74           CAN_0.MB[74].CS.R             /* Message Buffer 74 CS Register */
#define CAN_0_ID74           CAN_0.MB[74].ID.R             /* Message Buffer 74 ID Register */
#define CAN_0_B74            CAN_0.MB[74].DATA.B           /* Message Buffer 74 B Register */
#define CAN_0_H74            CAN_0.MB[74].DATA.H           /* Message Buffer 74 H Register */
#define CAN_0_W74            CAN_0.MB[74].DATA.W           /* Message Buffer 74 W Register */
#define CAN_0_CS75           CAN_0.MB[75].CS.R             /* Message Buffer 75 CS Register */
#define CAN_0_ID75           CAN_0.MB[75].ID.R             /* Message Buffer 75 ID Register */
#define CAN_0_B75            CAN_0.MB[75].DATA.B           /* Message Buffer 75 B Register */
#define CAN_0_H75            CAN_0.MB[75].DATA.H           /* Message Buffer 75 H Register */
#define CAN_0_W75            CAN_0.MB[75].DATA.W           /* Message Buffer 75 W Register */
#define CAN_0_CS76           CAN_0.MB[76].CS.R             /* Message Buffer 76 CS Register */
#define CAN_0_ID76           CAN_0.MB[76].ID.R             /* Message Buffer 76 ID Register */
#define CAN_0_B76            CAN_0.MB[76].DATA.B           /* Message Buffer 76 B Register */
#define CAN_0_H76            CAN_0.MB[76].DATA.H           /* Message Buffer 76 H Register */
#define CAN_0_W76            CAN_0.MB[76].DATA.W           /* Message Buffer 76 W Register */
#define CAN_0_CS77           CAN_0.MB[77].CS.R             /* Message Buffer 77 CS Register */
#define CAN_0_ID77           CAN_0.MB[77].ID.R             /* Message Buffer 77 ID Register */
#define CAN_0_B77            CAN_0.MB[77].DATA.B           /* Message Buffer 77 B Register */
#define CAN_0_H77            CAN_0.MB[77].DATA.H           /* Message Buffer 77 H Register */
#define CAN_0_W77            CAN_0.MB[77].DATA.W           /* Message Buffer 77 W Register */
#define CAN_0_CS78           CAN_0.MB[78].CS.R             /* Message Buffer 78 CS Register */
#define CAN_0_ID78           CAN_0.MB[78].ID.R             /* Message Buffer 78 ID Register */
#define CAN_0_B78            CAN_0.MB[78].DATA.B           /* Message Buffer 78 B Register */
#define CAN_0_H78            CAN_0.MB[78].DATA.H           /* Message Buffer 78 H Register */
#define CAN_0_W78            CAN_0.MB[78].DATA.W           /* Message Buffer 78 W Register */
#define CAN_0_CS79           CAN_0.MB[79].CS.R             /* Message Buffer 79 CS Register */
#define CAN_0_ID79           CAN_0.MB[79].ID.R             /* Message Buffer 79 ID Register */
#define CAN_0_B79            CAN_0.MB[79].DATA.B           /* Message Buffer 79 B Register */
#define CAN_0_H79            CAN_0.MB[79].DATA.H           /* Message Buffer 79 H Register */
#define CAN_0_W79            CAN_0.MB[79].DATA.W           /* Message Buffer 79 W Register */
#define CAN_0_CS80           CAN_0.MB[80].CS.R             /* Message Buffer 80 CS Register */
#define CAN_0_ID80           CAN_0.MB[80].ID.R             /* Message Buffer 80 ID Register */
#define CAN_0_B80            CAN_0.MB[80].DATA.B           /* Message Buffer 80 B Register */
#define CAN_0_H80            CAN_0.MB[80].DATA.H           /* Message Buffer 80 H Register */
#define CAN_0_W80            CAN_0.MB[80].DATA.W           /* Message Buffer 80 W Register */
#define CAN_0_CS81           CAN_0.MB[81].CS.R             /* Message Buffer 81 CS Register */
#define CAN_0_ID81           CAN_0.MB[81].ID.R             /* Message Buffer 81 ID Register */
#define CAN_0_B81            CAN_0.MB[81].DATA.B           /* Message Buffer 81 B Register */
#define CAN_0_H81            CAN_0.MB[81].DATA.H           /* Message Buffer 81 H Register */
#define CAN_0_W81            CAN_0.MB[81].DATA.W           /* Message Buffer 81 W Register */
#define CAN_0_CS82           CAN_0.MB[82].CS.R             /* Message Buffer 82 CS Register */
#define CAN_0_ID82           CAN_0.MB[82].ID.R             /* Message Buffer 82 ID Register */
#define CAN_0_B82            CAN_0.MB[82].DATA.B           /* Message Buffer 82 B Register */
#define CAN_0_H82            CAN_0.MB[82].DATA.H           /* Message Buffer 82 H Register */
#define CAN_0_W82            CAN_0.MB[82].DATA.W           /* Message Buffer 82 W Register */
#define CAN_0_CS83           CAN_0.MB[83].CS.R             /* Message Buffer 83 CS Register */
#define CAN_0_ID83           CAN_0.MB[83].ID.R             /* Message Buffer 83 ID Register */
#define CAN_0_B83            CAN_0.MB[83].DATA.B           /* Message Buffer 83 B Register */
#define CAN_0_H83            CAN_0.MB[83].DATA.H           /* Message Buffer 83 H Register */
#define CAN_0_W83            CAN_0.MB[83].DATA.W           /* Message Buffer 83 W Register */
#define CAN_0_CS84           CAN_0.MB[84].CS.R             /* Message Buffer 84 CS Register */
#define CAN_0_ID84           CAN_0.MB[84].ID.R             /* Message Buffer 84 ID Register */
#define CAN_0_B84            CAN_0.MB[84].DATA.B           /* Message Buffer 84 B Register */
#define CAN_0_H84            CAN_0.MB[84].DATA.H           /* Message Buffer 84 H Register */
#define CAN_0_W84            CAN_0.MB[84].DATA.W           /* Message Buffer 84 W Register */
#define CAN_0_CS85           CAN_0.MB[85].CS.R             /* Message Buffer 85 CS Register */
#define CAN_0_ID85           CAN_0.MB[85].ID.R             /* Message Buffer 85 ID Register */
#define CAN_0_B85            CAN_0.MB[85].DATA.B           /* Message Buffer 85 B Register */
#define CAN_0_H85            CAN_0.MB[85].DATA.H           /* Message Buffer 85 H Register */
#define CAN_0_W85            CAN_0.MB[85].DATA.W           /* Message Buffer 85 W Register */
#define CAN_0_CS86           CAN_0.MB[86].CS.R             /* Message Buffer 86 CS Register */
#define CAN_0_ID86           CAN_0.MB[86].ID.R             /* Message Buffer 86 ID Register */
#define CAN_0_B86            CAN_0.MB[86].DATA.B           /* Message Buffer 86 B Register */
#define CAN_0_H86            CAN_0.MB[86].DATA.H           /* Message Buffer 86 H Register */
#define CAN_0_W86            CAN_0.MB[86].DATA.W           /* Message Buffer 86 W Register */
#define CAN_0_CS87           CAN_0.MB[87].CS.R             /* Message Buffer 87 CS Register */
#define CAN_0_ID87           CAN_0.MB[87].ID.R             /* Message Buffer 87 ID Register */
#define CAN_0_B87            CAN_0.MB[87].DATA.B           /* Message Buffer 87 B Register */
#define CAN_0_H87            CAN_0.MB[87].DATA.H           /* Message Buffer 87 H Register */
#define CAN_0_W87            CAN_0.MB[87].DATA.W           /* Message Buffer 87 W Register */
#define CAN_0_CS88           CAN_0.MB[88].CS.R             /* Message Buffer 88 CS Register */
#define CAN_0_ID88           CAN_0.MB[88].ID.R             /* Message Buffer 88 ID Register */
#define CAN_0_B88            CAN_0.MB[88].DATA.B           /* Message Buffer 88 B Register */
#define CAN_0_H88            CAN_0.MB[88].DATA.H           /* Message Buffer 88 H Register */
#define CAN_0_W848           CAN_0.MB[88].DATA.W           /* Message Buffer 88 W Register */
#define CAN_0_CS89           CAN_0.MB[89].CS.R             /* Message Buffer 89 CS Register */
#define CAN_0_ID89           CAN_0.MB[89].ID.R             /* Message Buffer 89 ID Register */
#define CAN_0_B89            CAN_0.MB[89].DATA.B           /* Message Buffer 89 B Register */
#define CAN_0_H89            CAN_0.MB[89].DATA.H           /* Message Buffer 89 H Register */
#define CAN_0_W89            CAN_0.MB[89].DATA.W           /* Message Buffer 89 W Register */
#define CAN_0_CS90           CAN_0.MB[90].CS.R             /* Message Buffer 90 CS Register */
#define CAN_0_ID90           CAN_0.MB[90].ID.R             /* Message Buffer 90 ID Register */
#define CAN_0_B90            CAN_0.MB[90].DATA.B           /* Message Buffer 90 B Register */
#define CAN_0_H90            CAN_0.MB[90].DATA.H           /* Message Buffer 90 H Register */
#define CAN_0_W90            CAN_0.MB[90].DATA.W           /* Message Buffer 90 W Register */
#define CAN_0_CS91           CAN_0.MB[91].CS.R             /* Message Buffer 91 CS Register */
#define CAN_0_ID91           CAN_0.MB[91].ID.R             /* Message Buffer 91 ID Register */
#define CAN_0_B91            CAN_0.MB[91].DATA.B           /* Message Buffer 91 B Register */
#define CAN_0_H91            CAN_0.MB[91].DATA.H           /* Message Buffer 91 H Register */
#define CAN_0_W91            CAN_0.MB[91].DATA.W           /* Message Buffer 91 W Register */
#define CAN_0_CS92           CAN_0.MB[92].CS.R             /* Message Buffer 92 CS Register */
#define CAN_0_ID92           CAN_0.MB[92].ID.R             /* Message Buffer 92 ID Register */
#define CAN_0_B92            CAN_0.MB[92].DATA.B           /* Message Buffer 92 B Register */
#define CAN_0_H92            CAN_0.MB[92].DATA.H           /* Message Buffer 92 H Register */
#define CAN_0_W92            CAN_0.MB[92].DATA.W           /* Message Buffer 92 W Register */
#define CAN_0_CS93           CAN_0.MB[93].CS.R             /* Message Buffer 93 CS Register */
#define CAN_0_ID93           CAN_0.MB[93].ID.R             /* Message Buffer 93 ID Register */
#define CAN_0_B93            CAN_0.MB[93].DATA.B           /* Message Buffer 93 B Register */
#define CAN_0_H93            CAN_0.MB[93].DATA.H           /* Message Buffer 93 H Register */
#define CAN_0_W93            CAN_0.MB[93].DATA.W           /* Message Buffer 93 W Register */
#define CAN_0_CS94           CAN_0.MB[94].CS.R             /* Message Buffer 94 CS Register */
#define CAN_0_ID94           CAN_0.MB[94].ID.R             /* Message Buffer 94 ID Register */
#define CAN_0_B94            CAN_0.MB[94].DATA.B           /* Message Buffer 94 B Register */
#define CAN_0_H94            CAN_0.MB[94].DATA.H           /* Message Buffer 94 H Register */
#define CAN_0_W94            CAN_0.MB[94].DATA.W           /* Message Buffer 94 W Register */
#define CAN_0_CS95           CAN_0.MB[95].CS.R             /* Message Buffer 95 CS Register */
#define CAN_0_ID95           CAN_0.MB[95].ID.R             /* Message Buffer 95 ID Register */
#define CAN_0_B95            CAN_0.MB[95].DATA.B           /* Message Buffer 95 B Register */
#define CAN_0_H95            CAN_0.MB[95].DATA.H           /* Message Buffer 95 H Register */
#define CAN_0_W95            CAN_0.MB[95].DATA.W           /* Message Buffer 95 W Register */
#define CAN_0_RXIMR0         CAN_0.RXIMR[0].R              /* Rx Individual Mask registers */
#define CAN_0_RXIMR1         CAN_0.RXIMR[1].R              /* Rx Individual Mask registers */
#define CAN_0_RXIMR2         CAN_0.RXIMR[2].R              /* Rx Individual Mask registers */
#define CAN_0_RXIMR3         CAN_0.RXIMR[3].R              /* Rx Individual Mask registers */
#define CAN_0_RXIMR4         CAN_0.RXIMR[4].R              /* Rx Individual Mask registers */
#define CAN_0_RXIMR5         CAN_0.RXIMR[5].R              /* Rx Individual Mask registers */
#define CAN_0_RXIMR6         CAN_0.RXIMR[6].R              /* Rx Individual Mask registers */
#define CAN_0_RXIMR7         CAN_0.RXIMR[7].R              /* Rx Individual Mask registers */
#define CAN_0_RXIMR8         CAN_0.RXIMR[8].R              /* Rx Individual Mask registers */
#define CAN_0_RXIMR9         CAN_0.RXIMR[9].R              /* Rx Individual Mask registers */
#define CAN_0_RXIMR10        CAN_0.RXIMR[10].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR11        CAN_0.RXIMR[11].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR12        CAN_0.RXIMR[12].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR13        CAN_0.RXIMR[13].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR14        CAN_0.RXIMR[14].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR15        CAN_0.RXIMR[15].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR16        CAN_0.RXIMR[16].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR17        CAN_0.RXIMR[17].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR18        CAN_0.RXIMR[18].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR19        CAN_0.RXIMR[19].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR20        CAN_0.RXIMR[20].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR21        CAN_0.RXIMR[21].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR22        CAN_0.RXIMR[22].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR23        CAN_0.RXIMR[23].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR24        CAN_0.RXIMR[24].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR25        CAN_0.RXIMR[25].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR26        CAN_0.RXIMR[26].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR27        CAN_0.RXIMR[27].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR28        CAN_0.RXIMR[28].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR29        CAN_0.RXIMR[29].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR30        CAN_0.RXIMR[30].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR31        CAN_0.RXIMR[31].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR32        CAN_0.RXIMR[32].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR33        CAN_0.RXIMR[33].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR34        CAN_0.RXIMR[34].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR35        CAN_0.RXIMR[35].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR36        CAN_0.RXIMR[36].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR37        CAN_0.RXIMR[37].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR38        CAN_0.RXIMR[38].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR39        CAN_0.RXIMR[39].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR40        CAN_0.RXIMR[40].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR41        CAN_0.RXIMR[41].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR42        CAN_0.RXIMR[42].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR43        CAN_0.RXIMR[43].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR44        CAN_0.RXIMR[44].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR45        CAN_0.RXIMR[45].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR46        CAN_0.RXIMR[46].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR47        CAN_0.RXIMR[47].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR48        CAN_0.RXIMR[48].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR49        CAN_0.RXIMR[49].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR50        CAN_0.RXIMR[50].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR51        CAN_0.RXIMR[51].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR52        CAN_0.RXIMR[52].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR53        CAN_0.RXIMR[53].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR54        CAN_0.RXIMR[54].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR55        CAN_0.RXIMR[55].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR56        CAN_0.RXIMR[56].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR57        CAN_0.RXIMR[57].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR58        CAN_0.RXIMR[58].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR59        CAN_0.RXIMR[59].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR60        CAN_0.RXIMR[60].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR61        CAN_0.RXIMR[61].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR62        CAN_0.RXIMR[62].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR63        CAN_0.RXIMR[63].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR64        CAN_0.RXIMR[64].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR65        CAN_0.RXIMR[65].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR66        CAN_0.RXIMR[66].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR67        CAN_0.RXIMR[67].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR68        CAN_0.RXIMR[68].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR69        CAN_0.RXIMR[69].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR70        CAN_0.RXIMR[70].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR71        CAN_0.RXIMR[71].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR72        CAN_0.RXIMR[72].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR73        CAN_0.RXIMR[73].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR74        CAN_0.RXIMR[74].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR75        CAN_0.RXIMR[75].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR76        CAN_0.RXIMR[76].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR77        CAN_0.RXIMR[77].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR78        CAN_0.RXIMR[78].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR79        CAN_0.RXIMR[79].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR80        CAN_0.RXIMR[80].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR81        CAN_0.RXIMR[81].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR82        CAN_0.RXIMR[82].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR83        CAN_0.RXIMR[83].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR84        CAN_0.RXIMR[84].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR85        CAN_0.RXIMR[85].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR86        CAN_0.RXIMR[86].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR87        CAN_0.RXIMR[87].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR88        CAN_0.RXIMR[88].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR89        CAN_0.RXIMR[89].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR90        CAN_0.RXIMR[90].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR91        CAN_0.RXIMR[91].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR92        CAN_0.RXIMR[92].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR93        CAN_0.RXIMR[93].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR94        CAN_0.RXIMR[94].R             /* Rx Individual Mask registers */
#define CAN_0_RXIMR95        CAN_0.RXIMR[95].R             /* Rx Individual Mask registers */
#define CAN_0_MECR           CAN_0.MECR.R                  /* Memory Error Control register */
#define CAN_0_ERRIAR         CAN_0.ERRIAR.R                /* Error Injection Address register */
#define CAN_0_ERRIDPR        CAN_0.ERRIDPR.R               /* Error Injection Data Pattern register */
#define CAN_0_ERRIPPR        CAN_0.ERRIPPR.R               /* Error Injection Parity Pattern register */
#define CAN_0_RERRAR         CAN_0.RERRAR.R                /* Error Report Address register */
#define CAN_0_RERRDR         CAN_0.RERRDR.R                /* Error Report Data register */
#define CAN_0_RERRSYNR       CAN_0.RERRSYNR.R              /* Error Report Syndrome register */
#define CAN_0_ERRSR          CAN_0.ERRSR.R                 /* Error Status register */
#define CAN_0_EPRS           CAN_0.EPRS.R                  /* Enhanced CAN Bit Timing Prescalers */
#define CAN_0_ENCBT          CAN_0.ENCBT.R                 /* Enhanced Nominal CAN Bit Timing */
#define CAN_0_EDCBT          CAN_0.EDCBT.R                 /* Enhanced Data Phase CAN bit Timing */
#define CAN_0_ETDC           CAN_0.ETDC.R                  /* Enhanced Transceiver Delay Compensation */
#define CAN_0_FDCTRL         CAN_0.FDCTRL.R                /* CAN FD Control register */
#define CAN_0_FDCBT          CAN_0.FDCBT.R                 /* CAN FD Bit Timing register */
#define CAN_0_FDCRC          CAN_0.FDCRC.R                 /* CAN FD CRC register */
#define CAN_0_ERFCR          CAN_0.ERFCR.R                 /* Enhanced Rx FIFO Control register */
#define CAN_0_ERFIER         CAN_0.ERFIER.R                /* Enhanced Rx FIFO Interrupt Enable register */
#define CAN_0_ERFSR          CAN_0.ERFSR.R                 /* Enhanced Rx FIFO Status register */
#define CAN_0_HR_TIME_STAMP0 CAN_0.HR_TIME_STAMP[0].R      /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP1 CAN_0.HR_TIME_STAMP[1].R      /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP2 CAN_0.HR_TIME_STAMP[2].R      /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP3 CAN_0.HR_TIME_STAMP[3].R      /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP4 CAN_0.HR_TIME_STAMP[4].R      /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP5 CAN_0.HR_TIME_STAMP[5].R      /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP6 CAN_0.HR_TIME_STAMP[6].R      /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP7 CAN_0.HR_TIME_STAMP[7].R      /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP8 CAN_0.HR_TIME_STAMP[8].R      /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP9 CAN_0.HR_TIME_STAMP[9].R      /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP10 CAN_0.HR_TIME_STAMP[10].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP11 CAN_0.HR_TIME_STAMP[11].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP12 CAN_0.HR_TIME_STAMP[12].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP13 CAN_0.HR_TIME_STAMP[13].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP14 CAN_0.HR_TIME_STAMP[14].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP15 CAN_0.HR_TIME_STAMP[15].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP16 CAN_0.HR_TIME_STAMP[16].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP17 CAN_0.HR_TIME_STAMP[17].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP18 CAN_0.HR_TIME_STAMP[18].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP19 CAN_0.HR_TIME_STAMP[19].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP20 CAN_0.HR_TIME_STAMP[20].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP21 CAN_0.HR_TIME_STAMP[21].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP22 CAN_0.HR_TIME_STAMP[22].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP23 CAN_0.HR_TIME_STAMP[23].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP24 CAN_0.HR_TIME_STAMP[24].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP25 CAN_0.HR_TIME_STAMP[25].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP26 CAN_0.HR_TIME_STAMP[26].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP27 CAN_0.HR_TIME_STAMP[27].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP28 CAN_0.HR_TIME_STAMP[28].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP29 CAN_0.HR_TIME_STAMP[29].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP30 CAN_0.HR_TIME_STAMP[30].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP31 CAN_0.HR_TIME_STAMP[31].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP32 CAN_0.HR_TIME_STAMP[32].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP33 CAN_0.HR_TIME_STAMP[33].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP34 CAN_0.HR_TIME_STAMP[34].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP35 CAN_0.HR_TIME_STAMP[35].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP36 CAN_0.HR_TIME_STAMP[36].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP37 CAN_0.HR_TIME_STAMP[37].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP38 CAN_0.HR_TIME_STAMP[38].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP39 CAN_0.HR_TIME_STAMP[39].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP40 CAN_0.HR_TIME_STAMP[40].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP41 CAN_0.HR_TIME_STAMP[41].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP42 CAN_0.HR_TIME_STAMP[42].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP43 CAN_0.HR_TIME_STAMP[43].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP44 CAN_0.HR_TIME_STAMP[44].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP45 CAN_0.HR_TIME_STAMP[45].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP46 CAN_0.HR_TIME_STAMP[46].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP47 CAN_0.HR_TIME_STAMP[47].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP48 CAN_0.HR_TIME_STAMP[48].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP49 CAN_0.HR_TIME_STAMP[49].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP50 CAN_0.HR_TIME_STAMP[50].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP51 CAN_0.HR_TIME_STAMP[51].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP52 CAN_0.HR_TIME_STAMP[52].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP53 CAN_0.HR_TIME_STAMP[53].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP54 CAN_0.HR_TIME_STAMP[54].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP55 CAN_0.HR_TIME_STAMP[55].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP56 CAN_0.HR_TIME_STAMP[56].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP57 CAN_0.HR_TIME_STAMP[57].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP58 CAN_0.HR_TIME_STAMP[58].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP59 CAN_0.HR_TIME_STAMP[59].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP60 CAN_0.HR_TIME_STAMP[60].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP61 CAN_0.HR_TIME_STAMP[61].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP62 CAN_0.HR_TIME_STAMP[62].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP63 CAN_0.HR_TIME_STAMP[63].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP64 CAN_0.HR_TIME_STAMP[64].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP65 CAN_0.HR_TIME_STAMP[65].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP66 CAN_0.HR_TIME_STAMP[66].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP67 CAN_0.HR_TIME_STAMP[67].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP68 CAN_0.HR_TIME_STAMP[68].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP69 CAN_0.HR_TIME_STAMP[69].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP70 CAN_0.HR_TIME_STAMP[70].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP71 CAN_0.HR_TIME_STAMP[71].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP72 CAN_0.HR_TIME_STAMP[72].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP73 CAN_0.HR_TIME_STAMP[73].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP74 CAN_0.HR_TIME_STAMP[74].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP75 CAN_0.HR_TIME_STAMP[75].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP76 CAN_0.HR_TIME_STAMP[76].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP77 CAN_0.HR_TIME_STAMP[77].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP78 CAN_0.HR_TIME_STAMP[78].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP79 CAN_0.HR_TIME_STAMP[79].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP80 CAN_0.HR_TIME_STAMP[80].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP81 CAN_0.HR_TIME_STAMP[81].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP82 CAN_0.HR_TIME_STAMP[82].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP83 CAN_0.HR_TIME_STAMP[83].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP84 CAN_0.HR_TIME_STAMP[84].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP85 CAN_0.HR_TIME_STAMP[85].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP86 CAN_0.HR_TIME_STAMP[86].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP87 CAN_0.HR_TIME_STAMP[87].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP88 CAN_0.HR_TIME_STAMP[88].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP89 CAN_0.HR_TIME_STAMP[89].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP90 CAN_0.HR_TIME_STAMP[90].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP91 CAN_0.HR_TIME_STAMP[91].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP92 CAN_0.HR_TIME_STAMP[92].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP93 CAN_0.HR_TIME_STAMP[93].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP94 CAN_0.HR_TIME_STAMP[94].R    /* High Resolution Time Stamp */
#define CAN_0_HR_TIME_STAMP95 CAN_0.HR_TIME_STAMP[95].R    /* High Resolution Time Stamp */
#define CAN_0_ERFFEL0        CAN_0.ERFFEL[0].R             /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL1        CAN_0.ERFFEL[1].R             /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL2        CAN_0.ERFFEL[2].R             /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL3        CAN_0.ERFFEL[3].R             /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL4        CAN_0.ERFFEL[4].R             /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL5        CAN_0.ERFFEL[5].R             /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL6        CAN_0.ERFFEL[6].R             /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL7        CAN_0.ERFFEL[7].R             /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL8        CAN_0.ERFFEL[8].R             /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL9        CAN_0.ERFFEL[9].R             /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL10       CAN_0.ERFFEL[10].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL11       CAN_0.ERFFEL[11].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL12       CAN_0.ERFFEL[12].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL13       CAN_0.ERFFEL[13].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL14       CAN_0.ERFFEL[14].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL15       CAN_0.ERFFEL[15].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL16       CAN_0.ERFFEL[16].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL17       CAN_0.ERFFEL[17].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL18       CAN_0.ERFFEL[18].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL19       CAN_0.ERFFEL[19].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL20       CAN_0.ERFFEL[20].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL21       CAN_0.ERFFEL[21].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL22       CAN_0.ERFFEL[22].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL23       CAN_0.ERFFEL[23].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL24       CAN_0.ERFFEL[24].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL25       CAN_0.ERFFEL[25].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL26       CAN_0.ERFFEL[26].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL27       CAN_0.ERFFEL[27].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL28       CAN_0.ERFFEL[28].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL29       CAN_0.ERFFEL[29].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL30       CAN_0.ERFFEL[30].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL31       CAN_0.ERFFEL[31].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL32       CAN_0.ERFFEL[32].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL33       CAN_0.ERFFEL[33].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL34       CAN_0.ERFFEL[34].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL35       CAN_0.ERFFEL[35].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL36       CAN_0.ERFFEL[36].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL37       CAN_0.ERFFEL[37].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL38       CAN_0.ERFFEL[38].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL39       CAN_0.ERFFEL[39].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL40       CAN_0.ERFFEL[40].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL41       CAN_0.ERFFEL[41].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL42       CAN_0.ERFFEL[42].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL43       CAN_0.ERFFEL[43].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL44       CAN_0.ERFFEL[44].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL45       CAN_0.ERFFEL[45].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL46       CAN_0.ERFFEL[46].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL47       CAN_0.ERFFEL[47].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL48       CAN_0.ERFFEL[48].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL49       CAN_0.ERFFEL[49].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL50       CAN_0.ERFFEL[50].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL51       CAN_0.ERFFEL[51].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL52       CAN_0.ERFFEL[52].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL53       CAN_0.ERFFEL[53].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL54       CAN_0.ERFFEL[54].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL55       CAN_0.ERFFEL[55].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL56       CAN_0.ERFFEL[56].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL57       CAN_0.ERFFEL[57].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL58       CAN_0.ERFFEL[58].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL59       CAN_0.ERFFEL[59].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL60       CAN_0.ERFFEL[60].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL61       CAN_0.ERFFEL[61].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL62       CAN_0.ERFFEL[62].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL63       CAN_0.ERFFEL[63].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL64       CAN_0.ERFFEL[64].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL65       CAN_0.ERFFEL[65].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL66       CAN_0.ERFFEL[66].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL67       CAN_0.ERFFEL[67].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL68       CAN_0.ERFFEL[68].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL69       CAN_0.ERFFEL[69].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL70       CAN_0.ERFFEL[70].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL71       CAN_0.ERFFEL[71].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL72       CAN_0.ERFFEL[72].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL73       CAN_0.ERFFEL[73].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL74       CAN_0.ERFFEL[74].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL75       CAN_0.ERFFEL[75].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL76       CAN_0.ERFFEL[76].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL77       CAN_0.ERFFEL[77].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL78       CAN_0.ERFFEL[78].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL79       CAN_0.ERFFEL[79].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL80       CAN_0.ERFFEL[80].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL81       CAN_0.ERFFEL[81].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL82       CAN_0.ERFFEL[82].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL83       CAN_0.ERFFEL[83].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL84       CAN_0.ERFFEL[84].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL85       CAN_0.ERFFEL[85].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL86       CAN_0.ERFFEL[86].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL87       CAN_0.ERFFEL[87].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL88       CAN_0.ERFFEL[88].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL89       CAN_0.ERFFEL[89].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL90       CAN_0.ERFFEL[90].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL91       CAN_0.ERFFEL[91].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL92       CAN_0.ERFFEL[92].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL93       CAN_0.ERFFEL[93].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL94       CAN_0.ERFFEL[94].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL95       CAN_0.ERFFEL[95].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL96       CAN_0.ERFFEL[96].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL97       CAN_0.ERFFEL[97].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL98       CAN_0.ERFFEL[98].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL99       CAN_0.ERFFEL[99].R            /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL100      CAN_0.ERFFEL[100].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL101      CAN_0.ERFFEL[101].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL102      CAN_0.ERFFEL[102].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL103      CAN_0.ERFFEL[103].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL104      CAN_0.ERFFEL[104].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL105      CAN_0.ERFFEL[105].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL106      CAN_0.ERFFEL[106].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL107      CAN_0.ERFFEL[107].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL108      CAN_0.ERFFEL[108].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL109      CAN_0.ERFFEL[109].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL110      CAN_0.ERFFEL[110].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL111      CAN_0.ERFFEL[111].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL112      CAN_0.ERFFEL[112].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL113      CAN_0.ERFFEL[113].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL114      CAN_0.ERFFEL[114].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL115      CAN_0.ERFFEL[115].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL116      CAN_0.ERFFEL[116].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL117      CAN_0.ERFFEL[117].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL118      CAN_0.ERFFEL[118].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL119      CAN_0.ERFFEL[119].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL120      CAN_0.ERFFEL[120].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL121      CAN_0.ERFFEL[121].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL122      CAN_0.ERFFEL[122].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL123      CAN_0.ERFFEL[123].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL124      CAN_0.ERFFEL[124].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL125      CAN_0.ERFFEL[125].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL126      CAN_0.ERFFEL[126].R           /* Enhanced Rx FIFO Filter Element */
#define CAN_0_ERFFEL127      CAN_0.ERFFEL[127].R           /* Enhanced Rx FIFO Filter Element */

/* FlexCAN_1 */
#define CAN_1_MCR            CAN_1.MCR.R                   /* Module Configuration register */
#define CAN_1_CTRL1          CAN_1.CTRL1.R                 /* Control 1 register */
#define CAN_1_TIMER          CAN_1.TIMER.R                 /* Free Running Timer */
#define CAN_1_RXMGMASK       CAN_1.RXMGMASK.R              /* Rx Mailboxes Global Mask register */
#define CAN_1_RX14MASK       CAN_1.RX14MASK.R              /* Rx 14 Mask register */
#define CAN_1_RX15MASK       CAN_1.RX15MASK.R              /* Rx 15 Mask register */
#define CAN_1_ECR            CAN_1.ECR.R                   /* Error Counter */
#define CAN_1_ESR1           CAN_1.ESR1.R                  /* Error and Status 1 register */
#define CAN_1_IMASK2         CAN_1.IMASK2.R                /* Interrupt Masks 2 register */
#define CAN_1_IMASK1         CAN_1.IMASK1.R                /* Interrupt Masks 1 register */
#define CAN_1_IFLAG2         CAN_1.IFLAG2.R                /* Interrupt Flags 2 register */
#define CAN_1_IFLAG1         CAN_1.IFLAG1.R                /* Interrupt Flags 1 register */
#define CAN_1_CTRL2          CAN_1.CTRL2.R                 /* Control 2 register */
#define CAN_1_ESR2           CAN_1.ESR2.R                  /* Error and Status 2 register */
#define CAN_1_CRCR           CAN_1.CRCR.R                  /* CRC register */
#define CAN_1_RXFGMASK       CAN_1.RXFGMASK.R              /* Rx FIFO Global Mask register */
#define CAN_1_RXFIR          CAN_1.RXFIR.R                 /* Rx FIFO Information register */
#define CAN_1_CBT            CAN_1.CBT.R                   /* CAN Bit Timing register */
#define CAN_1_CS0            CAN_1.MB[0].CS.R              /* Message Buffer 0 CS Register */
#define CAN_1_ID0            CAN_1.MB[0].ID.R              /* Message Buffer 0 ID Register */
#define CAN_1_B0             CAN_1.MB[0].DATA.B            /* Message Buffer 0 B Register */
#define CAN_1_H0             CAN_1.MB[0].DATA.H            /* Message Buffer 0 H Register */
#define CAN_1_W0             CAN_1.MB[0].DATA.W            /* Message Buffer 0 W Register */
#define CAN_1_CS1            CAN_1.MB[1].CS.R              /* Message Buffer 1 CS Register */
#define CAN_1_ID1            CAN_1.MB[1].ID.R              /* Message Buffer 1 ID Register */
#define CAN_1_B1             CAN_1.MB[1].DATA.B            /* Message Buffer 1 B Register */
#define CAN_1_H1             CAN_1.MB[1].DATA.H            /* Message Buffer 1 H Register */
#define CAN_1_W1             CAN_1.MB[1].DATA.W            /* Message Buffer 1 W Register */
#define CAN_1_CS2            CAN_1.MB[2].CS.R              /* Message Buffer 2 CS Register */
#define CAN_1_ID2            CAN_1.MB[2].ID.R              /* Message Buffer 2 ID Register */
#define CAN_1_B2             CAN_1.MB[2].DATA.B            /* Message Buffer 2 B Register */
#define CAN_1_H2             CAN_1.MB[2].DATA.H            /* Message Buffer 2 H Register */
#define CAN_1_W2             CAN_1.MB[2].DATA.W            /* Message Buffer 2 W Register */
#define CAN_1_CS3            CAN_1.MB[3].CS.R              /* Message Buffer 3 CS Register */
#define CAN_1_ID3            CAN_1.MB[3].ID.R              /* Message Buffer 3 ID Register */
#define CAN_1_B3             CAN_1.MB[3].DATA.B            /* Message Buffer 3 B Register */
#define CAN_1_H3             CAN_1.MB[3].DATA.H            /* Message Buffer 3 H Register */
#define CAN_1_W3             CAN_1.MB[3].DATA.W            /* Message Buffer 3 W Register */
#define CAN_1_CS4            CAN_1.MB[4].CS.R              /* Message Buffer 4 CS Register */
#define CAN_1_ID4            CAN_1.MB[4].ID.R              /* Message Buffer 4 ID Register */
#define CAN_1_B4             CAN_1.MB[4].DATA.B            /* Message Buffer 4 B Register */
#define CAN_1_H4             CAN_1.MB[4].DATA.H            /* Message Buffer 4 H Register */
#define CAN_1_W4             CAN_1.MB[4].DATA.W            /* Message Buffer 4 W Register */
#define CAN_1_CS5            CAN_1.MB[5].CS.R              /* Message Buffer 5 CS Register */
#define CAN_1_ID5            CAN_1.MB[5].ID.R              /* Message Buffer 5 ID Register */
#define CAN_1_B5             CAN_1.MB[5].DATA.B            /* Message Buffer 5 B Register */
#define CAN_1_H5             CAN_1.MB[5].DATA.H            /* Message Buffer 5 H Register */
#define CAN_1_W5             CAN_1.MB[5].DATA.W            /* Message Buffer 5 W Register */
#define CAN_1_CS6            CAN_1.MB[6].CS.R              /* Message Buffer 6 CS Register */
#define CAN_1_ID6            CAN_1.MB[6].ID.R              /* Message Buffer 6 ID Register */
#define CAN_1_B6             CAN_1.MB[6].DATA.B            /* Message Buffer 6 B Register */
#define CAN_1_H6             CAN_1.MB[6].DATA.H            /* Message Buffer 6 H Register */
#define CAN_1_W6             CAN_1.MB[6].DATA.W            /* Message Buffer 6 W Register */
#define CAN_1_CS7            CAN_1.MB[7].CS.R              /* Message Buffer 7 CS Register */
#define CAN_1_ID7            CAN_1.MB[7].ID.R              /* Message Buffer 7 ID Register */
#define CAN_1_B7             CAN_1.MB[7].DATA.B            /* Message Buffer 7 B Register */
#define CAN_1_H7             CAN_1.MB[7].DATA.H            /* Message Buffer 7 H Register */
#define CAN_1_W7             CAN_1.MB[7].DATA.W            /* Message Buffer 7 W Register */
#define CAN_1_CS8            CAN_1.MB[8].CS.R              /* Message Buffer 8 CS Register */
#define CAN_1_ID8            CAN_1.MB[8].ID.R              /* Message Buffer 8 ID Register */
#define CAN_1_B8             CAN_1.MB[8].DATA.B            /* Message Buffer 8 B Register */
#define CAN_1_H8             CAN_1.MB[8].DATA.H            /* Message Buffer 8 H Register */
#define CAN_1_W8             CAN_1.MB[8].DATA.W            /* Message Buffer 8 W Register */
#define CAN_1_CS9            CAN_1.MB[9].CS.R              /* Message Buffer 9 CS Register */
#define CAN_1_ID9            CAN_1.MB[9].ID.R              /* Message Buffer 9 ID Register */
#define CAN_1_B9             CAN_1.MB[9].DATA.B            /* Message Buffer 9 B Register */
#define CAN_1_H9             CAN_1.MB[9].DATA.H            /* Message Buffer 9 H Register */
#define CAN_1_W9             CAN_1.MB[9].DATA.W            /* Message Buffer 9 W Register */
#define CAN_1_CS10           CAN_1.MB[10].CS.R             /* Message Buffer 10 CS Register */
#define CAN_1_ID10           CAN_1.MB[10].ID.R             /* Message Buffer 10 ID Register */
#define CAN_1_B10            CAN_1.MB[10].DATA.B           /* Message Buffer 10 B Register */
#define CAN_1_H10            CAN_1.MB[10].DATA.H           /* Message Buffer 10 H Register */
#define CAN_1_W10            CAN_1.MB[10].DATA.W           /* Message Buffer 10 W Register */
#define CAN_1_CS11           CAN_1.MB[11].CS.R             /* Message Buffer 11 CS Register */
#define CAN_1_ID11           CAN_1.MB[11].ID.R             /* Message Buffer 11 ID Register */
#define CAN_1_B11            CAN_1.MB[11].DATA.B           /* Message Buffer 11 B Register */
#define CAN_1_H11            CAN_1.MB[11].DATA.H           /* Message Buffer 11 H Register */
#define CAN_1_W11            CAN_1.MB[11].DATA.W           /* Message Buffer 11 W Register */
#define CAN_1_CS12           CAN_1.MB[12].CS.R             /* Message Buffer 12 CS Register */
#define CAN_1_ID12           CAN_1.MB[12].ID.R             /* Message Buffer 12 ID Register */
#define CAN_1_B12            CAN_1.MB[12].DATA.B           /* Message Buffer 12 B Register */
#define CAN_1_H12            CAN_1.MB[12].DATA.H           /* Message Buffer 12 H Register */
#define CAN_1_W12            CAN_1.MB[12].DATA.W           /* Message Buffer 12 W Register */
#define CAN_1_CS13           CAN_1.MB[13].CS.R             /* Message Buffer 13 CS Register */
#define CAN_1_ID13           CAN_1.MB[13].ID.R             /* Message Buffer 13 ID Register */
#define CAN_1_B13            CAN_1.MB[13].DATA.B           /* Message Buffer 13 B Register */
#define CAN_1_H13            CAN_1.MB[13].DATA.H           /* Message Buffer 13 H Register */
#define CAN_1_W13            CAN_1.MB[13].DATA.W           /* Message Buffer 13 W Register */
#define CAN_1_CS14           CAN_1.MB[14].CS.R             /* Message Buffer 14 CS Register */
#define CAN_1_ID14           CAN_1.MB[14].ID.R             /* Message Buffer 14 ID Register */
#define CAN_1_B14            CAN_1.MB[14].DATA.B           /* Message Buffer 14 B Register */
#define CAN_1_H14            CAN_1.MB[14].DATA.H           /* Message Buffer 14 H Register */
#define CAN_1_W14            CAN_1.MB[14].DATA.W           /* Message Buffer 14 W Register */
#define CAN_1_CS15           CAN_1.MB[15].CS.R             /* Message Buffer 15 CS Register */
#define CAN_1_ID15           CAN_1.MB[15].ID.R             /* Message Buffer 15 ID Register */
#define CAN_1_B15            CAN_1.MB[15].DATA.B           /* Message Buffer 15 B Register */
#define CAN_1_H15            CAN_1.MB[15].DATA.H           /* Message Buffer 15 H Register */
#define CAN_1_W15            CAN_1.MB[15].DATA.W           /* Message Buffer 15 W Register */
#define CAN_1_CS16           CAN_1.MB[16].CS.R             /* Message Buffer 16 CS Register */
#define CAN_1_ID16           CAN_1.MB[16].ID.R             /* Message Buffer 16 ID Register */
#define CAN_1_B16            CAN_1.MB[16].DATA.B           /* Message Buffer 16 B Register */
#define CAN_1_H16            CAN_1.MB[16].DATA.H           /* Message Buffer 16 H Register */
#define CAN_1_W16            CAN_1.MB[16].DATA.W           /* Message Buffer 16 W Register */
#define CAN_1_CS17           CAN_1.MB[17].CS.R             /* Message Buffer 17 CS Register */
#define CAN_1_ID17           CAN_1.MB[17].ID.R             /* Message Buffer 17 ID Register */
#define CAN_1_B17            CAN_1.MB[17].DATA.B           /* Message Buffer 17 B Register */
#define CAN_1_H17            CAN_1.MB[17].DATA.H           /* Message Buffer 17 H Register */
#define CAN_1_W17            CAN_1.MB[17].DATA.W           /* Message Buffer 17 W Register */
#define CAN_1_CS18           CAN_1.MB[18].CS.R             /* Message Buffer 18 CS Register */
#define CAN_1_ID18           CAN_1.MB[18].ID.R             /* Message Buffer 18 ID Register */
#define CAN_1_B18            CAN_1.MB[18].DATA.B           /* Message Buffer 18 B Register */
#define CAN_1_H18            CAN_1.MB[18].DATA.H           /* Message Buffer 18 H Register */
#define CAN_1_W18            CAN_1.MB[18].DATA.W           /* Message Buffer 18 W Register */
#define CAN_1_CS19           CAN_1.MB[19].CS.R             /* Message Buffer 19 CS Register */
#define CAN_1_ID19           CAN_1.MB[19].ID.R             /* Message Buffer 19 ID Register */
#define CAN_1_B19            CAN_1.MB[19].DATA.B           /* Message Buffer 19 B Register */
#define CAN_1_H19            CAN_1.MB[19].DATA.H           /* Message Buffer 19 H Register */
#define CAN_1_W19            CAN_1.MB[19].DATA.W           /* Message Buffer 19 W Register */
#define CAN_1_CS20           CAN_1.MB[20].CS.R             /* Message Buffer 20 CS Register */
#define CAN_1_ID20           CAN_1.MB[20].ID.R             /* Message Buffer 20 ID Register */
#define CAN_1_B20            CAN_1.MB[20].DATA.B           /* Message Buffer 20 B Register */
#define CAN_1_H20            CAN_1.MB[20].DATA.H           /* Message Buffer 20 H Register */
#define CAN_1_W20            CAN_1.MB[20].DATA.W           /* Message Buffer 20 W Register */
#define CAN_1_CS21           CAN_1.MB[21].CS.R             /* Message Buffer 21 CS Register */
#define CAN_1_ID21           CAN_1.MB[21].ID.R             /* Message Buffer 21 ID Register */
#define CAN_1_B21            CAN_1.MB[21].DATA.B           /* Message Buffer 21 B Register */
#define CAN_1_H21            CAN_1.MB[21].DATA.H           /* Message Buffer 21 H Register */
#define CAN_1_W21            CAN_1.MB[21].DATA.W           /* Message Buffer 21 W Register */
#define CAN_1_CS22           CAN_1.MB[22].CS.R             /* Message Buffer 22 CS Register */
#define CAN_1_ID22           CAN_1.MB[22].ID.R             /* Message Buffer 22 ID Register */
#define CAN_1_B22            CAN_1.MB[22].DATA.B           /* Message Buffer 22 B Register */
#define CAN_1_H22            CAN_1.MB[22].DATA.H           /* Message Buffer 22 H Register */
#define CAN_1_W22            CAN_1.MB[22].DATA.W           /* Message Buffer 22 W Register */
#define CAN_1_CS23           CAN_1.MB[23].CS.R             /* Message Buffer 23 CS Register */
#define CAN_1_ID23           CAN_1.MB[23].ID.R             /* Message Buffer 23 ID Register */
#define CAN_1_B23            CAN_1.MB[23].DATA.B           /* Message Buffer 23 B Register */
#define CAN_1_H23            CAN_1.MB[23].DATA.H           /* Message Buffer 23 H Register */
#define CAN_1_W23            CAN_1.MB[23].DATA.W           /* Message Buffer 23 W Register */
#define CAN_1_CS24           CAN_1.MB[24].CS.R             /* Message Buffer 24 CS Register */
#define CAN_1_ID24           CAN_1.MB[24].ID.R             /* Message Buffer 24 ID Register */
#define CAN_1_B24            CAN_1.MB[24].DATA.B           /* Message Buffer 24 B Register */
#define CAN_1_H24            CAN_1.MB[24].DATA.H           /* Message Buffer 24 H Register */
#define CAN_1_W24            CAN_1.MB[24].DATA.W           /* Message Buffer 24 W Register */
#define CAN_1_CS25           CAN_1.MB[25].CS.R             /* Message Buffer 25 CS Register */
#define CAN_1_ID25           CAN_1.MB[25].ID.R             /* Message Buffer 25 ID Register */
#define CAN_1_B25            CAN_1.MB[25].DATA.B           /* Message Buffer 25 B Register */
#define CAN_1_H25            CAN_1.MB[25].DATA.H           /* Message Buffer 25 H Register */
#define CAN_1_W25            CAN_1.MB[25].DATA.W           /* Message Buffer 25 W Register */
#define CAN_1_CS26           CAN_1.MB[26].CS.R             /* Message Buffer 26 CS Register */
#define CAN_1_ID26           CAN_1.MB[26].ID.R             /* Message Buffer 26 ID Register */
#define CAN_1_B26            CAN_1.MB[26].DATA.B           /* Message Buffer 26 B Register */
#define CAN_1_H26            CAN_1.MB[26].DATA.H           /* Message Buffer 26 H Register */
#define CAN_1_W26            CAN_1.MB[26].DATA.W           /* Message Buffer 26 W Register */
#define CAN_1_CS27           CAN_1.MB[27].CS.R             /* Message Buffer 27 CS Register */
#define CAN_1_ID27           CAN_1.MB[27].ID.R             /* Message Buffer 27 ID Register */
#define CAN_1_B27            CAN_1.MB[27].DATA.B           /* Message Buffer 27 B Register */
#define CAN_1_H27            CAN_1.MB[27].DATA.H           /* Message Buffer 27 H Register */
#define CAN_1_W27            CAN_1.MB[27].DATA.W           /* Message Buffer 27 W Register */
#define CAN_1_CS28           CAN_1.MB[28].CS.R             /* Message Buffer 28 CS Register */
#define CAN_1_ID28           CAN_1.MB[28].ID.R             /* Message Buffer 28 ID Register */
#define CAN_1_B28            CAN_1.MB[28].DATA.B           /* Message Buffer 28 B Register */
#define CAN_1_H28            CAN_1.MB[28].DATA.H           /* Message Buffer 28 H Register */
#define CAN_1_W28            CAN_1.MB[28].DATA.W           /* Message Buffer 28 W Register */
#define CAN_1_CS29           CAN_1.MB[29].CS.R             /* Message Buffer 29 CS Register */
#define CAN_1_ID29           CAN_1.MB[29].ID.R             /* Message Buffer 29 ID Register */
#define CAN_1_B29            CAN_1.MB[29].DATA.B           /* Message Buffer 29 B Register */
#define CAN_1_H29            CAN_1.MB[29].DATA.H           /* Message Buffer 29 H Register */
#define CAN_1_W29            CAN_1.MB[29].DATA.W           /* Message Buffer 29 W Register */
#define CAN_1_CS30           CAN_1.MB[30].CS.R             /* Message Buffer 30 CS Register */
#define CAN_1_ID30           CAN_1.MB[30].ID.R             /* Message Buffer 30 ID Register */
#define CAN_1_B30            CAN_1.MB[30].DATA.B           /* Message Buffer 30 B Register */
#define CAN_1_H30            CAN_1.MB[30].DATA.H           /* Message Buffer 30 H Register */
#define CAN_1_W30            CAN_1.MB[30].DATA.W           /* Message Buffer 30 W Register */
#define CAN_1_CS31           CAN_1.MB[31].CS.R             /* Message Buffer 31 CS Register */
#define CAN_1_ID31           CAN_1.MB[31].ID.R             /* Message Buffer 31 ID Register */
#define CAN_1_B31            CAN_1.MB[31].DATA.B           /* Message Buffer 31 B Register */
#define CAN_1_H31            CAN_1.MB[31].DATA.H           /* Message Buffer 31 H Register */
#define CAN_1_W31            CAN_1.MB[31].DATA.W           /* Message Buffer 31 W Register */
#define CAN_1_CS32           CAN_1.MB[32].CS.R             /* Message Buffer 32 CS Register */
#define CAN_1_ID32           CAN_1.MB[32].ID.R             /* Message Buffer 32 ID Register */
#define CAN_1_B32            CAN_1.MB[32].DATA.B           /* Message Buffer 32 B Register */
#define CAN_1_H32            CAN_1.MB[32].DATA.H           /* Message Buffer 32 H Register */
#define CAN_1_W32            CAN_1.MB[32].DATA.W           /* Message Buffer 32 W Register */
#define CAN_1_CS33           CAN_1.MB[33].CS.R             /* Message Buffer 33 CS Register */
#define CAN_1_ID33           CAN_1.MB[33].ID.R             /* Message Buffer 33 ID Register */
#define CAN_1_B33            CAN_1.MB[33].DATA.B           /* Message Buffer 33 B Register */
#define CAN_1_H33            CAN_1.MB[33].DATA.H           /* Message Buffer 33 H Register */
#define CAN_1_W33            CAN_1.MB[33].DATA.W           /* Message Buffer 33 W Register */
#define CAN_1_CS34           CAN_1.MB[34].CS.R             /* Message Buffer 34 CS Register */
#define CAN_1_ID34           CAN_1.MB[34].ID.R             /* Message Buffer 34 ID Register */
#define CAN_1_B34            CAN_1.MB[34].DATA.B           /* Message Buffer 34 B Register */
#define CAN_1_H34            CAN_1.MB[34].DATA.H           /* Message Buffer 34 H Register */
#define CAN_1_W34            CAN_1.MB[34].DATA.W           /* Message Buffer 34 W Register */
#define CAN_1_CS35           CAN_1.MB[35].CS.R             /* Message Buffer 35 CS Register */
#define CAN_1_ID35           CAN_1.MB[35].ID.R             /* Message Buffer 35 ID Register */
#define CAN_1_B35            CAN_1.MB[35].DATA.B           /* Message Buffer 35 B Register */
#define CAN_1_H35            CAN_1.MB[35].DATA.H           /* Message Buffer 35 H Register */
#define CAN_1_W35            CAN_1.MB[35].DATA.W           /* Message Buffer 35 W Register */
#define CAN_1_CS36           CAN_1.MB[36].CS.R             /* Message Buffer 36 CS Register */
#define CAN_1_ID36           CAN_1.MB[36].ID.R             /* Message Buffer 36 ID Register */
#define CAN_1_B36            CAN_1.MB[36].DATA.B           /* Message Buffer 36 B Register */
#define CAN_1_H36            CAN_1.MB[36].DATA.H           /* Message Buffer 36 H Register */
#define CAN_1_W36            CAN_1.MB[36].DATA.W           /* Message Buffer 36 W Register */
#define CAN_1_CS37           CAN_1.MB[37].CS.R             /* Message Buffer 37 CS Register */
#define CAN_1_ID37           CAN_1.MB[37].ID.R             /* Message Buffer 37 ID Register */
#define CAN_1_B37            CAN_1.MB[37].DATA.B           /* Message Buffer 37 B Register */
#define CAN_1_H37            CAN_1.MB[37].DATA.H           /* Message Buffer 37 H Register */
#define CAN_1_W37            CAN_1.MB[37].DATA.W           /* Message Buffer 37 W Register */
#define CAN_1_CS38           CAN_1.MB[38].CS.R             /* Message Buffer 38 CS Register */
#define CAN_1_ID38           CAN_1.MB[38].ID.R             /* Message Buffer 38 ID Register */
#define CAN_1_B38            CAN_1.MB[38].DATA.B           /* Message Buffer 38 B Register */
#define CAN_1_H38            CAN_1.MB[38].DATA.H           /* Message Buffer 38 H Register */
#define CAN_1_W38            CAN_1.MB[38].DATA.W           /* Message Buffer 38 W Register */
#define CAN_1_CS39           CAN_1.MB[39].CS.R             /* Message Buffer 39 CS Register */
#define CAN_1_ID39           CAN_1.MB[39].ID.R             /* Message Buffer 39 ID Register */
#define CAN_1_B39            CAN_1.MB[39].DATA.B           /* Message Buffer 39 B Register */
#define CAN_1_H39            CAN_1.MB[39].DATA.H           /* Message Buffer 39 H Register */
#define CAN_1_W39            CAN_1.MB[39].DATA.W           /* Message Buffer 39 W Register */
#define CAN_1_CS40           CAN_1.MB[40].CS.R             /* Message Buffer 40 CS Register */
#define CAN_1_ID40           CAN_1.MB[40].ID.R             /* Message Buffer 40 ID Register */
#define CAN_1_B40            CAN_1.MB[40].DATA.B           /* Message Buffer 40 B Register */
#define CAN_1_H40            CAN_1.MB[40].DATA.H           /* Message Buffer 40 H Register */
#define CAN_1_W40            CAN_1.MB[40].DATA.W           /* Message Buffer 40 W Register */
#define CAN_1_CS41           CAN_1.MB[41].CS.R             /* Message Buffer 41 CS Register */
#define CAN_1_ID41           CAN_1.MB[41].ID.R             /* Message Buffer 41 ID Register */
#define CAN_1_B41            CAN_1.MB[41].DATA.B           /* Message Buffer 41 B Register */
#define CAN_1_H41            CAN_1.MB[41].DATA.H           /* Message Buffer 41 H Register */
#define CAN_1_W41            CAN_1.MB[41].DATA.W           /* Message Buffer 41 W Register */
#define CAN_1_CS42           CAN_1.MB[42].CS.R             /* Message Buffer 42 CS Register */
#define CAN_1_ID42           CAN_1.MB[42].ID.R             /* Message Buffer 42 ID Register */
#define CAN_1_B42            CAN_1.MB[42].DATA.B           /* Message Buffer 42 B Register */
#define CAN_1_H42            CAN_1.MB[42].DATA.H           /* Message Buffer 42 H Register */
#define CAN_1_W42            CAN_1.MB[42].DATA.W           /* Message Buffer 42 W Register */
#define CAN_1_CS43           CAN_1.MB[43].CS.R             /* Message Buffer 43 CS Register */
#define CAN_1_ID43           CAN_1.MB[43].ID.R             /* Message Buffer 43 ID Register */
#define CAN_1_B43            CAN_1.MB[43].DATA.B           /* Message Buffer 43 B Register */
#define CAN_1_H43            CAN_1.MB[43].DATA.H           /* Message Buffer 43 H Register */
#define CAN_1_W43            CAN_1.MB[43].DATA.W           /* Message Buffer 43 W Register */
#define CAN_1_CS44           CAN_1.MB[44].CS.R             /* Message Buffer 44 CS Register */
#define CAN_1_ID44           CAN_1.MB[44].ID.R             /* Message Buffer 44 ID Register */
#define CAN_1_B44            CAN_1.MB[44].DATA.B           /* Message Buffer 44 B Register */
#define CAN_1_H44            CAN_1.MB[44].DATA.H           /* Message Buffer 44 H Register */
#define CAN_1_W44            CAN_1.MB[44].DATA.W           /* Message Buffer 44 W Register */
#define CAN_1_CS45           CAN_1.MB[45].CS.R             /* Message Buffer 45 CS Register */
#define CAN_1_ID45           CAN_1.MB[45].ID.R             /* Message Buffer 45 ID Register */
#define CAN_1_B45            CAN_1.MB[45].DATA.B           /* Message Buffer 45 B Register */
#define CAN_1_H45            CAN_1.MB[45].DATA.H           /* Message Buffer 45 H Register */
#define CAN_1_W45            CAN_1.MB[45].DATA.W           /* Message Buffer 45 W Register */
#define CAN_1_CS46           CAN_1.MB[46].CS.R             /* Message Buffer 46 CS Register */
#define CAN_1_ID46           CAN_1.MB[46].ID.R             /* Message Buffer 46 ID Register */
#define CAN_1_B46            CAN_1.MB[46].DATA.B           /* Message Buffer 46 B Register */
#define CAN_1_H46            CAN_1.MB[46].DATA.H           /* Message Buffer 46 H Register */
#define CAN_1_W46            CAN_1.MB[46].DATA.W           /* Message Buffer 46 W Register */
#define CAN_1_CS47           CAN_1.MB[47].CS.R             /* Message Buffer 47 CS Register */
#define CAN_1_ID47           CAN_1.MB[47].ID.R             /* Message Buffer 47 ID Register */
#define CAN_1_B47            CAN_1.MB[47].DATA.B           /* Message Buffer 47 B Register */
#define CAN_1_H47            CAN_1.MB[47].DATA.H           /* Message Buffer 47 H Register */
#define CAN_1_W47            CAN_1.MB[47].DATA.W           /* Message Buffer 47 W Register */
#define CAN_1_CS48           CAN_1.MB[48].CS.R             /* Message Buffer 48 CS Register */
#define CAN_1_ID48           CAN_1.MB[48].ID.R             /* Message Buffer 48 ID Register */
#define CAN_1_B48            CAN_1.MB[48].DATA.B           /* Message Buffer 48 B Register */
#define CAN_1_H48            CAN_1.MB[48].DATA.H           /* Message Buffer 48 H Register */
#define CAN_1_W48            CAN_1.MB[48].DATA.W           /* Message Buffer 48 W Register */
#define CAN_1_CS49           CAN_1.MB[49].CS.R             /* Message Buffer 49 CS Register */
#define CAN_1_ID49           CAN_1.MB[49].ID.R             /* Message Buffer 49 ID Register */
#define CAN_1_B49            CAN_1.MB[49].DATA.B           /* Message Buffer 49 B Register */
#define CAN_1_H49            CAN_1.MB[49].DATA.H           /* Message Buffer 49 H Register */
#define CAN_1_W49            CAN_1.MB[49].DATA.W           /* Message Buffer 49 W Register */
#define CAN_1_CS50           CAN_1.MB[50].CS.R             /* Message Buffer 50 CS Register */
#define CAN_1_ID50           CAN_1.MB[50].ID.R             /* Message Buffer 50 ID Register */
#define CAN_1_B50            CAN_1.MB[50].DATA.B           /* Message Buffer 50 B Register */
#define CAN_1_H50            CAN_1.MB[50].DATA.H           /* Message Buffer 50 H Register */
#define CAN_1_W50            CAN_1.MB[50].DATA.W           /* Message Buffer 50 W Register */
#define CAN_1_CS51           CAN_1.MB[51].CS.R             /* Message Buffer 51 CS Register */
#define CAN_1_ID51           CAN_1.MB[51].ID.R             /* Message Buffer 51 ID Register */
#define CAN_1_B51            CAN_1.MB[51].DATA.B           /* Message Buffer 51 B Register */
#define CAN_1_H51            CAN_1.MB[51].DATA.H           /* Message Buffer 51 H Register */
#define CAN_1_W51            CAN_1.MB[51].DATA.W           /* Message Buffer 51 W Register */
#define CAN_1_CS52           CAN_1.MB[52].CS.R             /* Message Buffer 52 CS Register */
#define CAN_1_ID52           CAN_1.MB[52].ID.R             /* Message Buffer 52 ID Register */
#define CAN_1_B52            CAN_1.MB[52].DATA.B           /* Message Buffer 52 B Register */
#define CAN_1_H52            CAN_1.MB[52].DATA.H           /* Message Buffer 52 H Register */
#define CAN_1_W52            CAN_1.MB[52].DATA.W           /* Message Buffer 52 W Register */
#define CAN_1_CS53           CAN_1.MB[53].CS.R             /* Message Buffer 53 CS Register */
#define CAN_1_ID53           CAN_1.MB[53].ID.R             /* Message Buffer 53 ID Register */
#define CAN_1_B53            CAN_1.MB[53].DATA.B           /* Message Buffer 53 B Register */
#define CAN_1_H53            CAN_1.MB[53].DATA.H           /* Message Buffer 53 H Register */
#define CAN_1_W53            CAN_1.MB[53].DATA.W           /* Message Buffer 53 W Register */
#define CAN_1_CS54           CAN_1.MB[54].CS.R             /* Message Buffer 54 CS Register */
#define CAN_1_ID54           CAN_1.MB[54].ID.R             /* Message Buffer 54 ID Register */
#define CAN_1_B54            CAN_1.MB[54].DATA.B           /* Message Buffer 54 B Register */
#define CAN_1_H54            CAN_1.MB[54].DATA.H           /* Message Buffer 54 H Register */
#define CAN_1_W54            CAN_1.MB[54].DATA.W           /* Message Buffer 54 W Register */
#define CAN_1_CS55           CAN_1.MB[55].CS.R             /* Message Buffer 55 CS Register */
#define CAN_1_ID55           CAN_1.MB[55].ID.R             /* Message Buffer 55 ID Register */
#define CAN_1_B55            CAN_1.MB[55].DATA.B           /* Message Buffer 55 B Register */
#define CAN_1_H55            CAN_1.MB[55].DATA.H           /* Message Buffer 55 H Register */
#define CAN_1_W55            CAN_1.MB[55].DATA.W           /* Message Buffer 55 W Register */
#define CAN_1_CS56           CAN_1.MB[56].CS.R             /* Message Buffer 56 CS Register */
#define CAN_1_ID56           CAN_1.MB[56].ID.R             /* Message Buffer 56 ID Register */
#define CAN_1_B56            CAN_1.MB[56].DATA.B           /* Message Buffer 56 B Register */
#define CAN_1_H56            CAN_1.MB[56].DATA.H           /* Message Buffer 56 H Register */
#define CAN_1_W56            CAN_1.MB[56].DATA.W           /* Message Buffer 56 W Register */
#define CAN_1_CS57           CAN_1.MB[57].CS.R             /* Message Buffer 57 CS Register */
#define CAN_1_ID57           CAN_1.MB[57].ID.R             /* Message Buffer 57 ID Register */
#define CAN_1_B57            CAN_1.MB[57].DATA.B           /* Message Buffer 57 B Register */
#define CAN_1_H57            CAN_1.MB[57].DATA.H           /* Message Buffer 57 H Register */
#define CAN_1_W57            CAN_1.MB[57].DATA.W           /* Message Buffer 57 W Register */
#define CAN_1_CS58           CAN_1.MB[58].CS.R             /* Message Buffer 58 CS Register */
#define CAN_1_ID58           CAN_1.MB[58].ID.R             /* Message Buffer 58 ID Register */
#define CAN_1_B58            CAN_1.MB[58].DATA.B           /* Message Buffer 58 B Register */
#define CAN_1_H58            CAN_1.MB[58].DATA.H           /* Message Buffer 58 H Register */
#define CAN_1_W58            CAN_1.MB[58].DATA.W           /* Message Buffer 58 W Register */
#define CAN_1_CS59           CAN_1.MB[59].CS.R             /* Message Buffer 59 CS Register */
#define CAN_1_ID59           CAN_1.MB[59].ID.R             /* Message Buffer 59 ID Register */
#define CAN_1_B59            CAN_1.MB[59].DATA.B           /* Message Buffer 59 B Register */
#define CAN_1_H59            CAN_1.MB[59].DATA.H           /* Message Buffer 59 H Register */
#define CAN_1_W59            CAN_1.MB[59].DATA.W           /* Message Buffer 59 W Register */
#define CAN_1_CS60           CAN_1.MB[60].CS.R             /* Message Buffer 60 CS Register */
#define CAN_1_ID60           CAN_1.MB[60].ID.R             /* Message Buffer 60 ID Register */
#define CAN_1_B60            CAN_1.MB[60].DATA.B           /* Message Buffer 60 B Register */
#define CAN_1_H60            CAN_1.MB[60].DATA.H           /* Message Buffer 60 H Register */
#define CAN_1_W60            CAN_1.MB[60].DATA.W           /* Message Buffer 60 W Register */
#define CAN_1_CS61           CAN_1.MB[61].CS.R             /* Message Buffer 61 CS Register */
#define CAN_1_ID61           CAN_1.MB[61].ID.R             /* Message Buffer 61 ID Register */
#define CAN_1_B61            CAN_1.MB[61].DATA.B           /* Message Buffer 61 B Register */
#define CAN_1_H61            CAN_1.MB[61].DATA.H           /* Message Buffer 61 H Register */
#define CAN_1_W61            CAN_1.MB[61].DATA.W           /* Message Buffer 61 W Register */
#define CAN_1_CS62           CAN_1.MB[62].CS.R             /* Message Buffer 62 CS Register */
#define CAN_1_ID62           CAN_1.MB[62].ID.R             /* Message Buffer 62 ID Register */
#define CAN_1_B62            CAN_1.MB[62].DATA.B           /* Message Buffer 62 B Register */
#define CAN_1_H62            CAN_1.MB[62].DATA.H           /* Message Buffer 62 H Register */
#define CAN_1_W62            CAN_1.MB[62].DATA.W           /* Message Buffer 62 W Register */
#define CAN_1_CS63           CAN_1.MB[63].CS.R             /* Message Buffer 63 CS Register */
#define CAN_1_ID63           CAN_1.MB[63].ID.R             /* Message Buffer 63 ID Register */
#define CAN_1_B63            CAN_1.MB[63].DATA.B           /* Message Buffer 63 B Register */
#define CAN_1_H63            CAN_1.MB[63].DATA.H           /* Message Buffer 63 H Register */
#define CAN_1_W63            CAN_1.MB[63].DATA.W           /* Message Buffer 63 W Register */
#define CAN_1_RXIMR0         CAN_1.RXIMR[0].R              /* Rx Individual Mask registers */
#define CAN_1_RXIMR1         CAN_1.RXIMR[1].R              /* Rx Individual Mask registers */
#define CAN_1_RXIMR2         CAN_1.RXIMR[2].R              /* Rx Individual Mask registers */
#define CAN_1_RXIMR3         CAN_1.RXIMR[3].R              /* Rx Individual Mask registers */
#define CAN_1_RXIMR4         CAN_1.RXIMR[4].R              /* Rx Individual Mask registers */
#define CAN_1_RXIMR5         CAN_1.RXIMR[5].R              /* Rx Individual Mask registers */
#define CAN_1_RXIMR6         CAN_1.RXIMR[6].R              /* Rx Individual Mask registers */
#define CAN_1_RXIMR7         CAN_1.RXIMR[7].R              /* Rx Individual Mask registers */
#define CAN_1_RXIMR8         CAN_1.RXIMR[8].R              /* Rx Individual Mask registers */
#define CAN_1_RXIMR9         CAN_1.RXIMR[9].R              /* Rx Individual Mask registers */
#define CAN_1_RXIMR10        CAN_1.RXIMR[10].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR11        CAN_1.RXIMR[11].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR12        CAN_1.RXIMR[12].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR13        CAN_1.RXIMR[13].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR14        CAN_1.RXIMR[14].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR15        CAN_1.RXIMR[15].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR16        CAN_1.RXIMR[16].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR17        CAN_1.RXIMR[17].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR18        CAN_1.RXIMR[18].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR19        CAN_1.RXIMR[19].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR20        CAN_1.RXIMR[20].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR21        CAN_1.RXIMR[21].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR22        CAN_1.RXIMR[22].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR23        CAN_1.RXIMR[23].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR24        CAN_1.RXIMR[24].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR25        CAN_1.RXIMR[25].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR26        CAN_1.RXIMR[26].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR27        CAN_1.RXIMR[27].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR28        CAN_1.RXIMR[28].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR29        CAN_1.RXIMR[29].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR30        CAN_1.RXIMR[30].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR31        CAN_1.RXIMR[31].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR32        CAN_1.RXIMR[32].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR33        CAN_1.RXIMR[33].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR34        CAN_1.RXIMR[34].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR35        CAN_1.RXIMR[35].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR36        CAN_1.RXIMR[36].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR37        CAN_1.RXIMR[37].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR38        CAN_1.RXIMR[38].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR39        CAN_1.RXIMR[39].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR40        CAN_1.RXIMR[40].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR41        CAN_1.RXIMR[41].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR42        CAN_1.RXIMR[42].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR43        CAN_1.RXIMR[43].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR44        CAN_1.RXIMR[44].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR45        CAN_1.RXIMR[45].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR46        CAN_1.RXIMR[46].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR47        CAN_1.RXIMR[47].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR48        CAN_1.RXIMR[48].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR49        CAN_1.RXIMR[49].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR50        CAN_1.RXIMR[50].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR51        CAN_1.RXIMR[51].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR52        CAN_1.RXIMR[52].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR53        CAN_1.RXIMR[53].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR54        CAN_1.RXIMR[54].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR55        CAN_1.RXIMR[55].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR56        CAN_1.RXIMR[56].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR57        CAN_1.RXIMR[57].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR58        CAN_1.RXIMR[58].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR59        CAN_1.RXIMR[59].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR60        CAN_1.RXIMR[60].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR61        CAN_1.RXIMR[61].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR62        CAN_1.RXIMR[62].R             /* Rx Individual Mask registers */
#define CAN_1_RXIMR63        CAN_1.RXIMR[63].R             /* Rx Individual Mask registers */
#define CAN_1_MECR           CAN_1.MECR.R                  /* Memory Error Control register */
#define CAN_1_ERRIAR         CAN_1.ERRIAR.R                /* Error Injection Address register */
#define CAN_1_ERRIDPR        CAN_1.ERRIDPR.R               /* Error Injection Data Pattern register */
#define CAN_1_ERRIPPR        CAN_1.ERRIPPR.R               /* Error Injection Parity Pattern register */
#define CAN_1_RERRAR         CAN_1.RERRAR.R                /* Error Report Address register */
#define CAN_1_RERRDR         CAN_1.RERRDR.R                /* Error Report Data register */
#define CAN_1_RERRSYNR       CAN_1.RERRSYNR.R              /* Error Report Syndrome register */
#define CAN_1_ERRSR          CAN_1.ERRSR.R                 /* Error Status register */
#define CAN_1_EPRS           CAN_1.EPRS.R                  /* Enhanced CAN Bit Timing Prescalers */
#define CAN_1_ENCBT          CAN_1.ENCBT.R                 /* Enhanced Nominal CAN Bit Timing */
#define CAN_1_EDCBT          CAN_1.EDCBT.R                 /* Enhanced Data Phase CAN bit Timing */
#define CAN_1_ETDC           CAN_1.ETDC.R                  /* Enhanced Transceiver Delay Compensation */
#define CAN_1_FDCTRL         CAN_1.FDCTRL.R                /* CAN FD Control register */
#define CAN_1_FDCBT          CAN_1.FDCBT.R                 /* CAN FD Bit Timing register */
#define CAN_1_FDCRC          CAN_1.FDCRC.R                 /* CAN FD CRC register */
#define CAN_1_HR_TIME_STAMP0 CAN_1.HR_TIME_STAMP[0].R      /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP1 CAN_1.HR_TIME_STAMP[1].R      /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP2 CAN_1.HR_TIME_STAMP[2].R      /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP3 CAN_1.HR_TIME_STAMP[3].R      /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP4 CAN_1.HR_TIME_STAMP[4].R      /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP5 CAN_1.HR_TIME_STAMP[5].R      /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP6 CAN_1.HR_TIME_STAMP[6].R      /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP7 CAN_1.HR_TIME_STAMP[7].R      /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP8 CAN_1.HR_TIME_STAMP[8].R      /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP9 CAN_1.HR_TIME_STAMP[9].R      /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP10 CAN_1.HR_TIME_STAMP[10].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP11 CAN_1.HR_TIME_STAMP[11].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP12 CAN_1.HR_TIME_STAMP[12].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP13 CAN_1.HR_TIME_STAMP[13].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP14 CAN_1.HR_TIME_STAMP[14].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP15 CAN_1.HR_TIME_STAMP[15].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP16 CAN_1.HR_TIME_STAMP[16].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP17 CAN_1.HR_TIME_STAMP[17].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP18 CAN_1.HR_TIME_STAMP[18].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP19 CAN_1.HR_TIME_STAMP[19].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP20 CAN_1.HR_TIME_STAMP[20].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP21 CAN_1.HR_TIME_STAMP[21].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP22 CAN_1.HR_TIME_STAMP[22].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP23 CAN_1.HR_TIME_STAMP[23].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP24 CAN_1.HR_TIME_STAMP[24].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP25 CAN_1.HR_TIME_STAMP[25].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP26 CAN_1.HR_TIME_STAMP[26].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP27 CAN_1.HR_TIME_STAMP[27].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP28 CAN_1.HR_TIME_STAMP[28].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP29 CAN_1.HR_TIME_STAMP[29].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP30 CAN_1.HR_TIME_STAMP[30].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP31 CAN_1.HR_TIME_STAMP[31].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP32 CAN_1.HR_TIME_STAMP[32].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP33 CAN_1.HR_TIME_STAMP[33].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP34 CAN_1.HR_TIME_STAMP[34].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP35 CAN_1.HR_TIME_STAMP[35].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP36 CAN_1.HR_TIME_STAMP[36].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP37 CAN_1.HR_TIME_STAMP[37].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP38 CAN_1.HR_TIME_STAMP[38].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP39 CAN_1.HR_TIME_STAMP[39].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP40 CAN_1.HR_TIME_STAMP[40].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP41 CAN_1.HR_TIME_STAMP[41].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP42 CAN_1.HR_TIME_STAMP[42].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP43 CAN_1.HR_TIME_STAMP[43].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP44 CAN_1.HR_TIME_STAMP[44].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP45 CAN_1.HR_TIME_STAMP[45].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP46 CAN_1.HR_TIME_STAMP[46].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP47 CAN_1.HR_TIME_STAMP[47].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP48 CAN_1.HR_TIME_STAMP[48].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP49 CAN_1.HR_TIME_STAMP[49].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP50 CAN_1.HR_TIME_STAMP[50].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP51 CAN_1.HR_TIME_STAMP[51].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP52 CAN_1.HR_TIME_STAMP[52].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP53 CAN_1.HR_TIME_STAMP[53].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP54 CAN_1.HR_TIME_STAMP[54].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP55 CAN_1.HR_TIME_STAMP[55].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP56 CAN_1.HR_TIME_STAMP[56].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP57 CAN_1.HR_TIME_STAMP[57].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP58 CAN_1.HR_TIME_STAMP[58].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP59 CAN_1.HR_TIME_STAMP[59].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP60 CAN_1.HR_TIME_STAMP[60].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP61 CAN_1.HR_TIME_STAMP[61].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP62 CAN_1.HR_TIME_STAMP[62].R    /* High Resolution Time Stamp */
#define CAN_1_HR_TIME_STAMP63 CAN_1.HR_TIME_STAMP[63].R    /* High Resolution Time Stamp */

/* FlexCAN_2 */
#define CAN_2_MCR            CAN_2.MCR.R                   /* Module Configuration register */
#define CAN_2_CTRL1          CAN_2.CTRL1.R                 /* Control 1 register */
#define CAN_2_TIMER          CAN_2.TIMER.R                 /* Free Running Timer */
#define CAN_2_RXMGMASK       CAN_2.RXMGMASK.R              /* Rx Mailboxes Global Mask register */
#define CAN_2_RX14MASK       CAN_2.RX14MASK.R              /* Rx 14 Mask register */
#define CAN_2_RX15MASK       CAN_2.RX15MASK.R              /* Rx 15 Mask register */
#define CAN_2_ECR            CAN_2.ECR.R                   /* Error Counter */
#define CAN_2_ESR1           CAN_2.ESR1.R                  /* Error and Status 1 register */
#define CAN_2_IMASK2         CAN_2.IMASK2.R                /* Interrupt Masks 2 register */
#define CAN_2_IMASK1         CAN_2.IMASK1.R                /* Interrupt Masks 1 register */
#define CAN_2_IFLAG2         CAN_2.IFLAG2.R                /* Interrupt Flags 2 register */
#define CAN_2_IFLAG1         CAN_2.IFLAG1.R                /* Interrupt Flags 1 register */
#define CAN_2_CTRL2          CAN_2.CTRL2.R                 /* Control 2 register */
#define CAN_2_ESR2           CAN_2.ESR2.R                  /* Error and Status 2 register */
#define CAN_2_CRCR           CAN_2.CRCR.R                  /* CRC register */
#define CAN_2_RXFGMASK       CAN_2.RXFGMASK.R              /* Rx FIFO Global Mask register */
#define CAN_2_RXFIR          CAN_2.RXFIR.R                 /* Rx FIFO Information register */
#define CAN_2_CBT            CAN_2.CBT.R                   /* CAN Bit Timing register */
#define CAN_2_CS0            CAN_2.MB[0].CS.R              /* Message Buffer 0 CS Register */
#define CAN_2_ID0            CAN_2.MB[0].ID.R              /* Message Buffer 0 ID Register */
#define CAN_2_B0             CAN_2.MB[0].DATA.B            /* Message Buffer 0 B Register */
#define CAN_2_H0             CAN_2.MB[0].DATA.H            /* Message Buffer 0 H Register */
#define CAN_2_W0             CAN_2.MB[0].DATA.W            /* Message Buffer 0 W Register */
#define CAN_2_CS1            CAN_2.MB[1].CS.R              /* Message Buffer 1 CS Register */
#define CAN_2_ID1            CAN_2.MB[1].ID.R              /* Message Buffer 1 ID Register */
#define CAN_2_B1             CAN_2.MB[1].DATA.B            /* Message Buffer 1 B Register */
#define CAN_2_H1             CAN_2.MB[1].DATA.H            /* Message Buffer 1 H Register */
#define CAN_2_W1             CAN_2.MB[1].DATA.W            /* Message Buffer 1 W Register */
#define CAN_2_CS2            CAN_2.MB[2].CS.R              /* Message Buffer 2 CS Register */
#define CAN_2_ID2            CAN_2.MB[2].ID.R              /* Message Buffer 2 ID Register */
#define CAN_2_B2             CAN_2.MB[2].DATA.B            /* Message Buffer 2 B Register */
#define CAN_2_H2             CAN_2.MB[2].DATA.H            /* Message Buffer 2 H Register */
#define CAN_2_W2             CAN_2.MB[2].DATA.W            /* Message Buffer 2 W Register */
#define CAN_2_CS3            CAN_2.MB[3].CS.R              /* Message Buffer 3 CS Register */
#define CAN_2_ID3            CAN_2.MB[3].ID.R              /* Message Buffer 3 ID Register */
#define CAN_2_B3             CAN_2.MB[3].DATA.B            /* Message Buffer 3 B Register */
#define CAN_2_H3             CAN_2.MB[3].DATA.H            /* Message Buffer 3 H Register */
#define CAN_2_W3             CAN_2.MB[3].DATA.W            /* Message Buffer 3 W Register */
#define CAN_2_CS4            CAN_2.MB[4].CS.R              /* Message Buffer 4 CS Register */
#define CAN_2_ID4            CAN_2.MB[4].ID.R              /* Message Buffer 4 ID Register */
#define CAN_2_B4             CAN_2.MB[4].DATA.B            /* Message Buffer 4 B Register */
#define CAN_2_H4             CAN_2.MB[4].DATA.H            /* Message Buffer 4 H Register */
#define CAN_2_W4             CAN_2.MB[4].DATA.W            /* Message Buffer 4 W Register */
#define CAN_2_CS5            CAN_2.MB[5].CS.R              /* Message Buffer 5 CS Register */
#define CAN_2_ID5            CAN_2.MB[5].ID.R              /* Message Buffer 5 ID Register */
#define CAN_2_B5             CAN_2.MB[5].DATA.B            /* Message Buffer 5 B Register */
#define CAN_2_H5             CAN_2.MB[5].DATA.H            /* Message Buffer 5 H Register */
#define CAN_2_W5             CAN_2.MB[5].DATA.W            /* Message Buffer 5 W Register */
#define CAN_2_CS6            CAN_2.MB[6].CS.R              /* Message Buffer 6 CS Register */
#define CAN_2_ID6            CAN_2.MB[6].ID.R              /* Message Buffer 6 ID Register */
#define CAN_2_B6             CAN_2.MB[6].DATA.B            /* Message Buffer 6 B Register */
#define CAN_2_H6             CAN_2.MB[6].DATA.H            /* Message Buffer 6 H Register */
#define CAN_2_W6             CAN_2.MB[6].DATA.W            /* Message Buffer 6 W Register */
#define CAN_2_CS7            CAN_2.MB[7].CS.R              /* Message Buffer 7 CS Register */
#define CAN_2_ID7            CAN_2.MB[7].ID.R              /* Message Buffer 7 ID Register */
#define CAN_2_B7             CAN_2.MB[7].DATA.B            /* Message Buffer 7 B Register */
#define CAN_2_H7             CAN_2.MB[7].DATA.H            /* Message Buffer 7 H Register */
#define CAN_2_W7             CAN_2.MB[7].DATA.W            /* Message Buffer 7 W Register */
#define CAN_2_CS8            CAN_2.MB[8].CS.R              /* Message Buffer 8 CS Register */
#define CAN_2_ID8            CAN_2.MB[8].ID.R              /* Message Buffer 8 ID Register */
#define CAN_2_B8             CAN_2.MB[8].DATA.B            /* Message Buffer 8 B Register */
#define CAN_2_H8             CAN_2.MB[8].DATA.H            /* Message Buffer 8 H Register */
#define CAN_2_W8             CAN_2.MB[8].DATA.W            /* Message Buffer 8 W Register */
#define CAN_2_CS9            CAN_2.MB[9].CS.R              /* Message Buffer 9 CS Register */
#define CAN_2_ID9            CAN_2.MB[9].ID.R              /* Message Buffer 9 ID Register */
#define CAN_2_B9             CAN_2.MB[9].DATA.B            /* Message Buffer 9 B Register */
#define CAN_2_H9             CAN_2.MB[9].DATA.H            /* Message Buffer 9 H Register */
#define CAN_2_W9             CAN_2.MB[9].DATA.W            /* Message Buffer 9 W Register */
#define CAN_2_CS10           CAN_2.MB[10].CS.R             /* Message Buffer 10 CS Register */
#define CAN_2_ID10           CAN_2.MB[10].ID.R             /* Message Buffer 10 ID Register */
#define CAN_2_B10            CAN_2.MB[10].DATA.B           /* Message Buffer 10 B Register */
#define CAN_2_H10            CAN_2.MB[10].DATA.H           /* Message Buffer 10 H Register */
#define CAN_2_W10            CAN_2.MB[10].DATA.W           /* Message Buffer 10 W Register */
#define CAN_2_CS11           CAN_2.MB[11].CS.R             /* Message Buffer 11 CS Register */
#define CAN_2_ID11           CAN_2.MB[11].ID.R             /* Message Buffer 11 ID Register */
#define CAN_2_B11            CAN_2.MB[11].DATA.B           /* Message Buffer 11 B Register */
#define CAN_2_H11            CAN_2.MB[11].DATA.H           /* Message Buffer 11 H Register */
#define CAN_2_W11            CAN_2.MB[11].DATA.W           /* Message Buffer 11 W Register */
#define CAN_2_CS12           CAN_2.MB[12].CS.R             /* Message Buffer 12 CS Register */
#define CAN_2_ID12           CAN_2.MB[12].ID.R             /* Message Buffer 12 ID Register */
#define CAN_2_B12            CAN_2.MB[12].DATA.B           /* Message Buffer 12 B Register */
#define CAN_2_H12            CAN_2.MB[12].DATA.H           /* Message Buffer 12 H Register */
#define CAN_2_W12            CAN_2.MB[12].DATA.W           /* Message Buffer 12 W Register */
#define CAN_2_CS13           CAN_2.MB[13].CS.R             /* Message Buffer 13 CS Register */
#define CAN_2_ID13           CAN_2.MB[13].ID.R             /* Message Buffer 13 ID Register */
#define CAN_2_B13            CAN_2.MB[13].DATA.B           /* Message Buffer 13 B Register */
#define CAN_2_H13            CAN_2.MB[13].DATA.H           /* Message Buffer 13 H Register */
#define CAN_2_W13            CAN_2.MB[13].DATA.W           /* Message Buffer 13 W Register */
#define CAN_2_CS14           CAN_2.MB[14].CS.R             /* Message Buffer 14 CS Register */
#define CAN_2_ID14           CAN_2.MB[14].ID.R             /* Message Buffer 14 ID Register */
#define CAN_2_B14            CAN_2.MB[14].DATA.B           /* Message Buffer 14 B Register */
#define CAN_2_H14            CAN_2.MB[14].DATA.H           /* Message Buffer 14 H Register */
#define CAN_2_W14            CAN_2.MB[14].DATA.W           /* Message Buffer 14 W Register */
#define CAN_2_CS15           CAN_2.MB[15].CS.R             /* Message Buffer 15 CS Register */
#define CAN_2_ID15           CAN_2.MB[15].ID.R             /* Message Buffer 15 ID Register */
#define CAN_2_B15            CAN_2.MB[15].DATA.B           /* Message Buffer 15 B Register */
#define CAN_2_H15            CAN_2.MB[15].DATA.H           /* Message Buffer 15 H Register */
#define CAN_2_W15            CAN_2.MB[15].DATA.W           /* Message Buffer 15 W Register */
#define CAN_2_CS16           CAN_2.MB[16].CS.R             /* Message Buffer 16 CS Register */
#define CAN_2_ID16           CAN_2.MB[16].ID.R             /* Message Buffer 16 ID Register */
#define CAN_2_B16            CAN_2.MB[16].DATA.B           /* Message Buffer 16 B Register */
#define CAN_2_H16            CAN_2.MB[16].DATA.H           /* Message Buffer 16 H Register */
#define CAN_2_W16            CAN_2.MB[16].DATA.W           /* Message Buffer 16 W Register */
#define CAN_2_CS17           CAN_2.MB[17].CS.R             /* Message Buffer 17 CS Register */
#define CAN_2_ID17           CAN_2.MB[17].ID.R             /* Message Buffer 17 ID Register */
#define CAN_2_B17            CAN_2.MB[17].DATA.B           /* Message Buffer 17 B Register */
#define CAN_2_H17            CAN_2.MB[17].DATA.H           /* Message Buffer 17 H Register */
#define CAN_2_W17            CAN_2.MB[17].DATA.W           /* Message Buffer 17 W Register */
#define CAN_2_CS18           CAN_2.MB[18].CS.R             /* Message Buffer 18 CS Register */
#define CAN_2_ID18           CAN_2.MB[18].ID.R             /* Message Buffer 18 ID Register */
#define CAN_2_B18            CAN_2.MB[18].DATA.B           /* Message Buffer 18 B Register */
#define CAN_2_H18            CAN_2.MB[18].DATA.H           /* Message Buffer 18 H Register */
#define CAN_2_W18            CAN_2.MB[18].DATA.W           /* Message Buffer 18 W Register */
#define CAN_2_CS19           CAN_2.MB[19].CS.R             /* Message Buffer 19 CS Register */
#define CAN_2_ID19           CAN_2.MB[19].ID.R             /* Message Buffer 19 ID Register */
#define CAN_2_B19            CAN_2.MB[19].DATA.B           /* Message Buffer 19 B Register */
#define CAN_2_H19            CAN_2.MB[19].DATA.H           /* Message Buffer 19 H Register */
#define CAN_2_W19            CAN_2.MB[19].DATA.W           /* Message Buffer 19 W Register */
#define CAN_2_CS20           CAN_2.MB[20].CS.R             /* Message Buffer 20 CS Register */
#define CAN_2_ID20           CAN_2.MB[20].ID.R             /* Message Buffer 20 ID Register */
#define CAN_2_B20            CAN_2.MB[20].DATA.B           /* Message Buffer 20 B Register */
#define CAN_2_H20            CAN_2.MB[20].DATA.H           /* Message Buffer 20 H Register */
#define CAN_2_W20            CAN_2.MB[20].DATA.W           /* Message Buffer 20 W Register */
#define CAN_2_CS21           CAN_2.MB[21].CS.R             /* Message Buffer 21 CS Register */
#define CAN_2_ID21           CAN_2.MB[21].ID.R             /* Message Buffer 21 ID Register */
#define CAN_2_B21            CAN_2.MB[21].DATA.B           /* Message Buffer 21 B Register */
#define CAN_2_H21            CAN_2.MB[21].DATA.H           /* Message Buffer 21 H Register */
#define CAN_2_W21            CAN_2.MB[21].DATA.W           /* Message Buffer 21 W Register */
#define CAN_2_CS22           CAN_2.MB[22].CS.R             /* Message Buffer 22 CS Register */
#define CAN_2_ID22           CAN_2.MB[22].ID.R             /* Message Buffer 22 ID Register */
#define CAN_2_B22            CAN_2.MB[22].DATA.B           /* Message Buffer 22 B Register */
#define CAN_2_H22            CAN_2.MB[22].DATA.H           /* Message Buffer 22 H Register */
#define CAN_2_W22            CAN_2.MB[22].DATA.W           /* Message Buffer 22 W Register */
#define CAN_2_CS23           CAN_2.MB[23].CS.R             /* Message Buffer 23 CS Register */
#define CAN_2_ID23           CAN_2.MB[23].ID.R             /* Message Buffer 23 ID Register */
#define CAN_2_B23            CAN_2.MB[23].DATA.B           /* Message Buffer 23 B Register */
#define CAN_2_H23            CAN_2.MB[23].DATA.H           /* Message Buffer 23 H Register */
#define CAN_2_W23            CAN_2.MB[23].DATA.W           /* Message Buffer 23 W Register */
#define CAN_2_CS24           CAN_2.MB[24].CS.R             /* Message Buffer 24 CS Register */
#define CAN_2_ID24           CAN_2.MB[24].ID.R             /* Message Buffer 24 ID Register */
#define CAN_2_B24            CAN_2.MB[24].DATA.B           /* Message Buffer 24 B Register */
#define CAN_2_H24            CAN_2.MB[24].DATA.H           /* Message Buffer 24 H Register */
#define CAN_2_W24            CAN_2.MB[24].DATA.W           /* Message Buffer 24 W Register */
#define CAN_2_CS25           CAN_2.MB[25].CS.R             /* Message Buffer 25 CS Register */
#define CAN_2_ID25           CAN_2.MB[25].ID.R             /* Message Buffer 25 ID Register */
#define CAN_2_B25            CAN_2.MB[25].DATA.B           /* Message Buffer 25 B Register */
#define CAN_2_H25            CAN_2.MB[25].DATA.H           /* Message Buffer 25 H Register */
#define CAN_2_W25            CAN_2.MB[25].DATA.W           /* Message Buffer 25 W Register */
#define CAN_2_CS26           CAN_2.MB[26].CS.R             /* Message Buffer 26 CS Register */
#define CAN_2_ID26           CAN_2.MB[26].ID.R             /* Message Buffer 26 ID Register */
#define CAN_2_B26            CAN_2.MB[26].DATA.B           /* Message Buffer 26 B Register */
#define CAN_2_H26            CAN_2.MB[26].DATA.H           /* Message Buffer 26 H Register */
#define CAN_2_W26            CAN_2.MB[26].DATA.W           /* Message Buffer 26 W Register */
#define CAN_2_CS27           CAN_2.MB[27].CS.R             /* Message Buffer 27 CS Register */
#define CAN_2_ID27           CAN_2.MB[27].ID.R             /* Message Buffer 27 ID Register */
#define CAN_2_B27            CAN_2.MB[27].DATA.B           /* Message Buffer 27 B Register */
#define CAN_2_H27            CAN_2.MB[27].DATA.H           /* Message Buffer 27 H Register */
#define CAN_2_W27            CAN_2.MB[27].DATA.W           /* Message Buffer 27 W Register */
#define CAN_2_CS28           CAN_2.MB[28].CS.R             /* Message Buffer 28 CS Register */
#define CAN_2_ID28           CAN_2.MB[28].ID.R             /* Message Buffer 28 ID Register */
#define CAN_2_B28            CAN_2.MB[28].DATA.B           /* Message Buffer 28 B Register */
#define CAN_2_H28            CAN_2.MB[28].DATA.H           /* Message Buffer 28 H Register */
#define CAN_2_W28            CAN_2.MB[28].DATA.W           /* Message Buffer 28 W Register */
#define CAN_2_CS29           CAN_2.MB[29].CS.R             /* Message Buffer 29 CS Register */
#define CAN_2_ID29           CAN_2.MB[29].ID.R             /* Message Buffer 29 ID Register */
#define CAN_2_B29            CAN_2.MB[29].DATA.B           /* Message Buffer 29 B Register */
#define CAN_2_H29            CAN_2.MB[29].DATA.H           /* Message Buffer 29 H Register */
#define CAN_2_W29            CAN_2.MB[29].DATA.W           /* Message Buffer 29 W Register */
#define CAN_2_CS30           CAN_2.MB[30].CS.R             /* Message Buffer 30 CS Register */
#define CAN_2_ID30           CAN_2.MB[30].ID.R             /* Message Buffer 30 ID Register */
#define CAN_2_B30            CAN_2.MB[30].DATA.B           /* Message Buffer 30 B Register */
#define CAN_2_H30            CAN_2.MB[30].DATA.H           /* Message Buffer 30 H Register */
#define CAN_2_W30            CAN_2.MB[30].DATA.W           /* Message Buffer 30 W Register */
#define CAN_2_CS31           CAN_2.MB[31].CS.R             /* Message Buffer 31 CS Register */
#define CAN_2_ID31           CAN_2.MB[31].ID.R             /* Message Buffer 31 ID Register */
#define CAN_2_B31            CAN_2.MB[31].DATA.B           /* Message Buffer 31 B Register */
#define CAN_2_H31            CAN_2.MB[31].DATA.H           /* Message Buffer 31 H Register */
#define CAN_2_W31            CAN_2.MB[31].DATA.W           /* Message Buffer 31 W Register */
#define CAN_2_CS32           CAN_2.MB[32].CS.R             /* Message Buffer 32 CS Register */
#define CAN_2_ID32           CAN_2.MB[32].ID.R             /* Message Buffer 32 ID Register */
#define CAN_2_B32            CAN_2.MB[32].DATA.B           /* Message Buffer 32 B Register */
#define CAN_2_H32            CAN_2.MB[32].DATA.H           /* Message Buffer 32 H Register */
#define CAN_2_W32            CAN_2.MB[32].DATA.W           /* Message Buffer 32 W Register */
#define CAN_2_CS33           CAN_2.MB[33].CS.R             /* Message Buffer 33 CS Register */
#define CAN_2_ID33           CAN_2.MB[33].ID.R             /* Message Buffer 33 ID Register */
#define CAN_2_B33            CAN_2.MB[33].DATA.B           /* Message Buffer 33 B Register */
#define CAN_2_H33            CAN_2.MB[33].DATA.H           /* Message Buffer 33 H Register */
#define CAN_2_W33            CAN_2.MB[33].DATA.W           /* Message Buffer 33 W Register */
#define CAN_2_CS34           CAN_2.MB[34].CS.R             /* Message Buffer 34 CS Register */
#define CAN_2_ID34           CAN_2.MB[34].ID.R             /* Message Buffer 34 ID Register */
#define CAN_2_B34            CAN_2.MB[34].DATA.B           /* Message Buffer 34 B Register */
#define CAN_2_H34            CAN_2.MB[34].DATA.H           /* Message Buffer 34 H Register */
#define CAN_2_W34            CAN_2.MB[34].DATA.W           /* Message Buffer 34 W Register */
#define CAN_2_CS35           CAN_2.MB[35].CS.R             /* Message Buffer 35 CS Register */
#define CAN_2_ID35           CAN_2.MB[35].ID.R             /* Message Buffer 35 ID Register */
#define CAN_2_B35            CAN_2.MB[35].DATA.B           /* Message Buffer 35 B Register */
#define CAN_2_H35            CAN_2.MB[35].DATA.H           /* Message Buffer 35 H Register */
#define CAN_2_W35            CAN_2.MB[35].DATA.W           /* Message Buffer 35 W Register */
#define CAN_2_CS36           CAN_2.MB[36].CS.R             /* Message Buffer 36 CS Register */
#define CAN_2_ID36           CAN_2.MB[36].ID.R             /* Message Buffer 36 ID Register */
#define CAN_2_B36            CAN_2.MB[36].DATA.B           /* Message Buffer 36 B Register */
#define CAN_2_H36            CAN_2.MB[36].DATA.H           /* Message Buffer 36 H Register */
#define CAN_2_W36            CAN_2.MB[36].DATA.W           /* Message Buffer 36 W Register */
#define CAN_2_CS37           CAN_2.MB[37].CS.R             /* Message Buffer 37 CS Register */
#define CAN_2_ID37           CAN_2.MB[37].ID.R             /* Message Buffer 37 ID Register */
#define CAN_2_B37            CAN_2.MB[37].DATA.B           /* Message Buffer 37 B Register */
#define CAN_2_H37            CAN_2.MB[37].DATA.H           /* Message Buffer 37 H Register */
#define CAN_2_W37            CAN_2.MB[37].DATA.W           /* Message Buffer 37 W Register */
#define CAN_2_CS38           CAN_2.MB[38].CS.R             /* Message Buffer 38 CS Register */
#define CAN_2_ID38           CAN_2.MB[38].ID.R             /* Message Buffer 38 ID Register */
#define CAN_2_B38            CAN_2.MB[38].DATA.B           /* Message Buffer 38 B Register */
#define CAN_2_H38            CAN_2.MB[38].DATA.H           /* Message Buffer 38 H Register */
#define CAN_2_W38            CAN_2.MB[38].DATA.W           /* Message Buffer 38 W Register */
#define CAN_2_CS39           CAN_2.MB[39].CS.R             /* Message Buffer 39 CS Register */
#define CAN_2_ID39           CAN_2.MB[39].ID.R             /* Message Buffer 39 ID Register */
#define CAN_2_B39            CAN_2.MB[39].DATA.B           /* Message Buffer 39 B Register */
#define CAN_2_H39            CAN_2.MB[39].DATA.H           /* Message Buffer 39 H Register */
#define CAN_2_W39            CAN_2.MB[39].DATA.W           /* Message Buffer 39 W Register */
#define CAN_2_CS40           CAN_2.MB[40].CS.R             /* Message Buffer 40 CS Register */
#define CAN_2_ID40           CAN_2.MB[40].ID.R             /* Message Buffer 40 ID Register */
#define CAN_2_B40            CAN_2.MB[40].DATA.B           /* Message Buffer 40 B Register */
#define CAN_2_H40            CAN_2.MB[40].DATA.H           /* Message Buffer 40 H Register */
#define CAN_2_W40            CAN_2.MB[40].DATA.W           /* Message Buffer 40 W Register */
#define CAN_2_CS41           CAN_2.MB[41].CS.R             /* Message Buffer 41 CS Register */
#define CAN_2_ID41           CAN_2.MB[41].ID.R             /* Message Buffer 41 ID Register */
#define CAN_2_B41            CAN_2.MB[41].DATA.B           /* Message Buffer 41 B Register */
#define CAN_2_H41            CAN_2.MB[41].DATA.H           /* Message Buffer 41 H Register */
#define CAN_2_W41            CAN_2.MB[41].DATA.W           /* Message Buffer 41 W Register */
#define CAN_2_CS42           CAN_2.MB[42].CS.R             /* Message Buffer 42 CS Register */
#define CAN_2_ID42           CAN_2.MB[42].ID.R             /* Message Buffer 42 ID Register */
#define CAN_2_B42            CAN_2.MB[42].DATA.B           /* Message Buffer 42 B Register */
#define CAN_2_H42            CAN_2.MB[42].DATA.H           /* Message Buffer 42 H Register */
#define CAN_2_W42            CAN_2.MB[42].DATA.W           /* Message Buffer 42 W Register */
#define CAN_2_CS43           CAN_2.MB[43].CS.R             /* Message Buffer 43 CS Register */
#define CAN_2_ID43           CAN_2.MB[43].ID.R             /* Message Buffer 43 ID Register */
#define CAN_2_B43            CAN_2.MB[43].DATA.B           /* Message Buffer 43 B Register */
#define CAN_2_H43            CAN_2.MB[43].DATA.H           /* Message Buffer 43 H Register */
#define CAN_2_W43            CAN_2.MB[43].DATA.W           /* Message Buffer 43 W Register */
#define CAN_2_CS44           CAN_2.MB[44].CS.R             /* Message Buffer 44 CS Register */
#define CAN_2_ID44           CAN_2.MB[44].ID.R             /* Message Buffer 44 ID Register */
#define CAN_2_B44            CAN_2.MB[44].DATA.B           /* Message Buffer 44 B Register */
#define CAN_2_H44            CAN_2.MB[44].DATA.H           /* Message Buffer 44 H Register */
#define CAN_2_W44            CAN_2.MB[44].DATA.W           /* Message Buffer 44 W Register */
#define CAN_2_CS45           CAN_2.MB[45].CS.R             /* Message Buffer 45 CS Register */
#define CAN_2_ID45           CAN_2.MB[45].ID.R             /* Message Buffer 45 ID Register */
#define CAN_2_B45            CAN_2.MB[45].DATA.B           /* Message Buffer 45 B Register */
#define CAN_2_H45            CAN_2.MB[45].DATA.H           /* Message Buffer 45 H Register */
#define CAN_2_W45            CAN_2.MB[45].DATA.W           /* Message Buffer 45 W Register */
#define CAN_2_CS46           CAN_2.MB[46].CS.R             /* Message Buffer 46 CS Register */
#define CAN_2_ID46           CAN_2.MB[46].ID.R             /* Message Buffer 46 ID Register */
#define CAN_2_B46            CAN_2.MB[46].DATA.B           /* Message Buffer 46 B Register */
#define CAN_2_H46            CAN_2.MB[46].DATA.H           /* Message Buffer 46 H Register */
#define CAN_2_W46            CAN_2.MB[46].DATA.W           /* Message Buffer 46 W Register */
#define CAN_2_CS47           CAN_2.MB[47].CS.R             /* Message Buffer 47 CS Register */
#define CAN_2_ID47           CAN_2.MB[47].ID.R             /* Message Buffer 47 ID Register */
#define CAN_2_B47            CAN_2.MB[47].DATA.B           /* Message Buffer 47 B Register */
#define CAN_2_H47            CAN_2.MB[47].DATA.H           /* Message Buffer 47 H Register */
#define CAN_2_W47            CAN_2.MB[47].DATA.W           /* Message Buffer 47 W Register */
#define CAN_2_CS48           CAN_2.MB[48].CS.R             /* Message Buffer 48 CS Register */
#define CAN_2_ID48           CAN_2.MB[48].ID.R             /* Message Buffer 48 ID Register */
#define CAN_2_B48            CAN_2.MB[48].DATA.B           /* Message Buffer 48 B Register */
#define CAN_2_H48            CAN_2.MB[48].DATA.H           /* Message Buffer 48 H Register */
#define CAN_2_W48            CAN_2.MB[48].DATA.W           /* Message Buffer 48 W Register */
#define CAN_2_CS49           CAN_2.MB[49].CS.R             /* Message Buffer 49 CS Register */
#define CAN_2_ID49           CAN_2.MB[49].ID.R             /* Message Buffer 49 ID Register */
#define CAN_2_B49            CAN_2.MB[49].DATA.B           /* Message Buffer 49 B Register */
#define CAN_2_H49            CAN_2.MB[49].DATA.H           /* Message Buffer 49 H Register */
#define CAN_2_W49            CAN_2.MB[49].DATA.W           /* Message Buffer 49 W Register */
#define CAN_2_CS50           CAN_2.MB[50].CS.R             /* Message Buffer 50 CS Register */
#define CAN_2_ID50           CAN_2.MB[50].ID.R             /* Message Buffer 50 ID Register */
#define CAN_2_B50            CAN_2.MB[50].DATA.B           /* Message Buffer 50 B Register */
#define CAN_2_H50            CAN_2.MB[50].DATA.H           /* Message Buffer 50 H Register */
#define CAN_2_W50            CAN_2.MB[50].DATA.W           /* Message Buffer 50 W Register */
#define CAN_2_CS51           CAN_2.MB[51].CS.R             /* Message Buffer 51 CS Register */
#define CAN_2_ID51           CAN_2.MB[51].ID.R             /* Message Buffer 51 ID Register */
#define CAN_2_B51            CAN_2.MB[51].DATA.B           /* Message Buffer 51 B Register */
#define CAN_2_H51            CAN_2.MB[51].DATA.H           /* Message Buffer 51 H Register */
#define CAN_2_W51            CAN_2.MB[51].DATA.W           /* Message Buffer 51 W Register */
#define CAN_2_CS52           CAN_2.MB[52].CS.R             /* Message Buffer 52 CS Register */
#define CAN_2_ID52           CAN_2.MB[52].ID.R             /* Message Buffer 52 ID Register */
#define CAN_2_B52            CAN_2.MB[52].DATA.B           /* Message Buffer 52 B Register */
#define CAN_2_H52            CAN_2.MB[52].DATA.H           /* Message Buffer 52 H Register */
#define CAN_2_W52            CAN_2.MB[52].DATA.W           /* Message Buffer 52 W Register */
#define CAN_2_CS53           CAN_2.MB[53].CS.R             /* Message Buffer 53 CS Register */
#define CAN_2_ID53           CAN_2.MB[53].ID.R             /* Message Buffer 53 ID Register */
#define CAN_2_B53            CAN_2.MB[53].DATA.B           /* Message Buffer 53 B Register */
#define CAN_2_H53            CAN_2.MB[53].DATA.H           /* Message Buffer 53 H Register */
#define CAN_2_W53            CAN_2.MB[53].DATA.W           /* Message Buffer 53 W Register */
#define CAN_2_CS54           CAN_2.MB[54].CS.R             /* Message Buffer 54 CS Register */
#define CAN_2_ID54           CAN_2.MB[54].ID.R             /* Message Buffer 54 ID Register */
#define CAN_2_B54            CAN_2.MB[54].DATA.B           /* Message Buffer 54 B Register */
#define CAN_2_H54            CAN_2.MB[54].DATA.H           /* Message Buffer 54 H Register */
#define CAN_2_W54            CAN_2.MB[54].DATA.W           /* Message Buffer 54 W Register */
#define CAN_2_CS55           CAN_2.MB[55].CS.R             /* Message Buffer 55 CS Register */
#define CAN_2_ID55           CAN_2.MB[55].ID.R             /* Message Buffer 55 ID Register */
#define CAN_2_B55            CAN_2.MB[55].DATA.B           /* Message Buffer 55 B Register */
#define CAN_2_H55            CAN_2.MB[55].DATA.H           /* Message Buffer 55 H Register */
#define CAN_2_W55            CAN_2.MB[55].DATA.W           /* Message Buffer 55 W Register */
#define CAN_2_CS56           CAN_2.MB[56].CS.R             /* Message Buffer 56 CS Register */
#define CAN_2_ID56           CAN_2.MB[56].ID.R             /* Message Buffer 56 ID Register */
#define CAN_2_B56            CAN_2.MB[56].DATA.B           /* Message Buffer 56 B Register */
#define CAN_2_H56            CAN_2.MB[56].DATA.H           /* Message Buffer 56 H Register */
#define CAN_2_W56            CAN_2.MB[56].DATA.W           /* Message Buffer 56 W Register */
#define CAN_2_CS57           CAN_2.MB[57].CS.R             /* Message Buffer 57 CS Register */
#define CAN_2_ID57           CAN_2.MB[57].ID.R             /* Message Buffer 57 ID Register */
#define CAN_2_B57            CAN_2.MB[57].DATA.B           /* Message Buffer 57 B Register */
#define CAN_2_H57            CAN_2.MB[57].DATA.H           /* Message Buffer 57 H Register */
#define CAN_2_W57            CAN_2.MB[57].DATA.W           /* Message Buffer 57 W Register */
#define CAN_2_CS58           CAN_2.MB[58].CS.R             /* Message Buffer 58 CS Register */
#define CAN_2_ID58           CAN_2.MB[58].ID.R             /* Message Buffer 58 ID Register */
#define CAN_2_B58            CAN_2.MB[58].DATA.B           /* Message Buffer 58 B Register */
#define CAN_2_H58            CAN_2.MB[58].DATA.H           /* Message Buffer 58 H Register */
#define CAN_2_W58            CAN_2.MB[58].DATA.W           /* Message Buffer 58 W Register */
#define CAN_2_CS59           CAN_2.MB[59].CS.R             /* Message Buffer 59 CS Register */
#define CAN_2_ID59           CAN_2.MB[59].ID.R             /* Message Buffer 59 ID Register */
#define CAN_2_B59            CAN_2.MB[59].DATA.B           /* Message Buffer 59 B Register */
#define CAN_2_H59            CAN_2.MB[59].DATA.H           /* Message Buffer 59 H Register */
#define CAN_2_W59            CAN_2.MB[59].DATA.W           /* Message Buffer 59 W Register */
#define CAN_2_CS60           CAN_2.MB[60].CS.R             /* Message Buffer 60 CS Register */
#define CAN_2_ID60           CAN_2.MB[60].ID.R             /* Message Buffer 60 ID Register */
#define CAN_2_B60            CAN_2.MB[60].DATA.B           /* Message Buffer 60 B Register */
#define CAN_2_H60            CAN_2.MB[60].DATA.H           /* Message Buffer 60 H Register */
#define CAN_2_W60            CAN_2.MB[60].DATA.W           /* Message Buffer 60 W Register */
#define CAN_2_CS61           CAN_2.MB[61].CS.R             /* Message Buffer 61 CS Register */
#define CAN_2_ID61           CAN_2.MB[61].ID.R             /* Message Buffer 61 ID Register */
#define CAN_2_B61            CAN_2.MB[61].DATA.B           /* Message Buffer 61 B Register */
#define CAN_2_H61            CAN_2.MB[61].DATA.H           /* Message Buffer 61 H Register */
#define CAN_2_W61            CAN_2.MB[61].DATA.W           /* Message Buffer 61 W Register */
#define CAN_2_CS62           CAN_2.MB[62].CS.R             /* Message Buffer 62 CS Register */
#define CAN_2_ID62           CAN_2.MB[62].ID.R             /* Message Buffer 62 ID Register */
#define CAN_2_B62            CAN_2.MB[62].DATA.B           /* Message Buffer 62 B Register */
#define CAN_2_H62            CAN_2.MB[62].DATA.H           /* Message Buffer 62 H Register */
#define CAN_2_W62            CAN_2.MB[62].DATA.W           /* Message Buffer 62 W Register */
#define CAN_2_CS63           CAN_2.MB[63].CS.R             /* Message Buffer 63 CS Register */
#define CAN_2_ID63           CAN_2.MB[63].ID.R             /* Message Buffer 63 ID Register */
#define CAN_2_B63            CAN_2.MB[63].DATA.B           /* Message Buffer 63 B Register */
#define CAN_2_H63            CAN_2.MB[63].DATA.H           /* Message Buffer 63 H Register */
#define CAN_2_W63            CAN_2.MB[63].DATA.W           /* Message Buffer 63 W Register */
#define CAN_2_RXIMR0         CAN_2.RXIMR[0].R              /* Rx Individual Mask registers */
#define CAN_2_RXIMR1         CAN_2.RXIMR[1].R              /* Rx Individual Mask registers */
#define CAN_2_RXIMR2         CAN_2.RXIMR[2].R              /* Rx Individual Mask registers */
#define CAN_2_RXIMR3         CAN_2.RXIMR[3].R              /* Rx Individual Mask registers */
#define CAN_2_RXIMR4         CAN_2.RXIMR[4].R              /* Rx Individual Mask registers */
#define CAN_2_RXIMR5         CAN_2.RXIMR[5].R              /* Rx Individual Mask registers */
#define CAN_2_RXIMR6         CAN_2.RXIMR[6].R              /* Rx Individual Mask registers */
#define CAN_2_RXIMR7         CAN_2.RXIMR[7].R              /* Rx Individual Mask registers */
#define CAN_2_RXIMR8         CAN_2.RXIMR[8].R              /* Rx Individual Mask registers */
#define CAN_2_RXIMR9         CAN_2.RXIMR[9].R              /* Rx Individual Mask registers */
#define CAN_2_RXIMR10        CAN_2.RXIMR[10].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR11        CAN_2.RXIMR[11].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR12        CAN_2.RXIMR[12].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR13        CAN_2.RXIMR[13].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR14        CAN_2.RXIMR[14].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR15        CAN_2.RXIMR[15].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR16        CAN_2.RXIMR[16].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR17        CAN_2.RXIMR[17].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR18        CAN_2.RXIMR[18].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR19        CAN_2.RXIMR[19].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR20        CAN_2.RXIMR[20].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR21        CAN_2.RXIMR[21].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR22        CAN_2.RXIMR[22].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR23        CAN_2.RXIMR[23].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR24        CAN_2.RXIMR[24].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR25        CAN_2.RXIMR[25].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR26        CAN_2.RXIMR[26].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR27        CAN_2.RXIMR[27].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR28        CAN_2.RXIMR[28].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR29        CAN_2.RXIMR[29].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR30        CAN_2.RXIMR[30].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR31        CAN_2.RXIMR[31].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR32        CAN_2.RXIMR[32].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR33        CAN_2.RXIMR[33].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR34        CAN_2.RXIMR[34].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR35        CAN_2.RXIMR[35].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR36        CAN_2.RXIMR[36].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR37        CAN_2.RXIMR[37].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR38        CAN_2.RXIMR[38].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR39        CAN_2.RXIMR[39].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR40        CAN_2.RXIMR[40].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR41        CAN_2.RXIMR[41].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR42        CAN_2.RXIMR[42].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR43        CAN_2.RXIMR[43].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR44        CAN_2.RXIMR[44].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR45        CAN_2.RXIMR[45].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR46        CAN_2.RXIMR[46].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR47        CAN_2.RXIMR[47].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR48        CAN_2.RXIMR[48].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR49        CAN_2.RXIMR[49].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR50        CAN_2.RXIMR[50].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR51        CAN_2.RXIMR[51].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR52        CAN_2.RXIMR[52].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR53        CAN_2.RXIMR[53].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR54        CAN_2.RXIMR[54].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR55        CAN_2.RXIMR[55].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR56        CAN_2.RXIMR[56].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR57        CAN_2.RXIMR[57].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR58        CAN_2.RXIMR[58].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR59        CAN_2.RXIMR[59].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR60        CAN_2.RXIMR[60].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR61        CAN_2.RXIMR[61].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR62        CAN_2.RXIMR[62].R             /* Rx Individual Mask registers */
#define CAN_2_RXIMR63        CAN_2.RXIMR[63].R             /* Rx Individual Mask registers */
#define CAN_2_MECR           CAN_2.MECR.R                  /* Memory Error Control register */
#define CAN_2_ERRIAR         CAN_2.ERRIAR.R                /* Error Injection Address register */
#define CAN_2_ERRIDPR        CAN_2.ERRIDPR.R               /* Error Injection Data Pattern register */
#define CAN_2_ERRIPPR        CAN_2.ERRIPPR.R               /* Error Injection Parity Pattern register */
#define CAN_2_RERRAR         CAN_2.RERRAR.R                /* Error Report Address register */
#define CAN_2_RERRDR         CAN_2.RERRDR.R                /* Error Report Data register */
#define CAN_2_RERRSYNR       CAN_2.RERRSYNR.R              /* Error Report Syndrome register */
#define CAN_2_ERRSR          CAN_2.ERRSR.R                 /* Error Status register */
#define CAN_2_EPRS           CAN_2.EPRS.R                  /* Enhanced CAN Bit Timing Prescalers */
#define CAN_2_ENCBT          CAN_2.ENCBT.R                 /* Enhanced Nominal CAN Bit Timing */
#define CAN_2_EDCBT          CAN_2.EDCBT.R                 /* Enhanced Data Phase CAN bit Timing */
#define CAN_2_ETDC           CAN_2.ETDC.R                  /* Enhanced Transceiver Delay Compensation */
#define CAN_2_FDCTRL         CAN_2.FDCTRL.R                /* CAN FD Control register */
#define CAN_2_FDCBT          CAN_2.FDCBT.R                 /* CAN FD Bit Timing register */
#define CAN_2_FDCRC          CAN_2.FDCRC.R                 /* CAN FD CRC register */
#define CAN_2_HR_TIME_STAMP0 CAN_2.HR_TIME_STAMP[0].R      /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP1 CAN_2.HR_TIME_STAMP[1].R      /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP2 CAN_2.HR_TIME_STAMP[2].R      /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP3 CAN_2.HR_TIME_STAMP[3].R      /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP4 CAN_2.HR_TIME_STAMP[4].R      /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP5 CAN_2.HR_TIME_STAMP[5].R      /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP6 CAN_2.HR_TIME_STAMP[6].R      /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP7 CAN_2.HR_TIME_STAMP[7].R      /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP8 CAN_2.HR_TIME_STAMP[8].R      /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP9 CAN_2.HR_TIME_STAMP[9].R      /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP10 CAN_2.HR_TIME_STAMP[10].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP11 CAN_2.HR_TIME_STAMP[11].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP12 CAN_2.HR_TIME_STAMP[12].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP13 CAN_2.HR_TIME_STAMP[13].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP14 CAN_2.HR_TIME_STAMP[14].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP15 CAN_2.HR_TIME_STAMP[15].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP16 CAN_2.HR_TIME_STAMP[16].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP17 CAN_2.HR_TIME_STAMP[17].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP18 CAN_2.HR_TIME_STAMP[18].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP19 CAN_2.HR_TIME_STAMP[19].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP20 CAN_2.HR_TIME_STAMP[20].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP21 CAN_2.HR_TIME_STAMP[21].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP22 CAN_2.HR_TIME_STAMP[22].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP23 CAN_2.HR_TIME_STAMP[23].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP24 CAN_2.HR_TIME_STAMP[24].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP25 CAN_2.HR_TIME_STAMP[25].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP26 CAN_2.HR_TIME_STAMP[26].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP27 CAN_2.HR_TIME_STAMP[27].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP28 CAN_2.HR_TIME_STAMP[28].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP29 CAN_2.HR_TIME_STAMP[29].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP30 CAN_2.HR_TIME_STAMP[30].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP31 CAN_2.HR_TIME_STAMP[31].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP32 CAN_2.HR_TIME_STAMP[32].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP33 CAN_2.HR_TIME_STAMP[33].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP34 CAN_2.HR_TIME_STAMP[34].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP35 CAN_2.HR_TIME_STAMP[35].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP36 CAN_2.HR_TIME_STAMP[36].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP37 CAN_2.HR_TIME_STAMP[37].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP38 CAN_2.HR_TIME_STAMP[38].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP39 CAN_2.HR_TIME_STAMP[39].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP40 CAN_2.HR_TIME_STAMP[40].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP41 CAN_2.HR_TIME_STAMP[41].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP42 CAN_2.HR_TIME_STAMP[42].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP43 CAN_2.HR_TIME_STAMP[43].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP44 CAN_2.HR_TIME_STAMP[44].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP45 CAN_2.HR_TIME_STAMP[45].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP46 CAN_2.HR_TIME_STAMP[46].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP47 CAN_2.HR_TIME_STAMP[47].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP48 CAN_2.HR_TIME_STAMP[48].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP49 CAN_2.HR_TIME_STAMP[49].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP50 CAN_2.HR_TIME_STAMP[50].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP51 CAN_2.HR_TIME_STAMP[51].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP52 CAN_2.HR_TIME_STAMP[52].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP53 CAN_2.HR_TIME_STAMP[53].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP54 CAN_2.HR_TIME_STAMP[54].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP55 CAN_2.HR_TIME_STAMP[55].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP56 CAN_2.HR_TIME_STAMP[56].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP57 CAN_2.HR_TIME_STAMP[57].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP58 CAN_2.HR_TIME_STAMP[58].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP59 CAN_2.HR_TIME_STAMP[59].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP60 CAN_2.HR_TIME_STAMP[60].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP61 CAN_2.HR_TIME_STAMP[61].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP62 CAN_2.HR_TIME_STAMP[62].R    /* High Resolution Time Stamp */
#define CAN_2_HR_TIME_STAMP63 CAN_2.HR_TIME_STAMP[63].R    /* High Resolution Time Stamp */

/* INTM */
#define INTM_INTM_MM         INTM.INTM_MM.R                /* Monitor Mode */
#define INTM_INTM_IACK       INTM.INTM_IACK.R              /* Interrupt Acknowledge */
#define INTM_INTM_IRQSEL0    INTM.MON[0].INTM_IRQSEL.R     /* Interrupt Request Select 0 */
#define INTM_INTM_LATENCY0   INTM.MON[0].INTM_LATENCY.R    /* INTM_LATENCY0 */
#define INTM_INTM_TIMER0     INTM.MON[0].INTM_TIMER.R      /* Timer 0 */
#define INTM_INTM_STATUS0    INTM.MON[0].INTM_STATUS.R     /* Status 0 */
#define INTM_INTM_IRQSEL1    INTM.MON[1].INTM_IRQSEL.R     /* Interrupt Request Select 1 */
#define INTM_INTM_LATENCY1   INTM.MON[1].INTM_LATENCY.R    /* INTM_LATENCY1 */
#define INTM_INTM_TIMER1     INTM.MON[1].INTM_TIMER.R      /* Timer 1 */
#define INTM_INTM_STATUS1    INTM.MON[1].INTM_STATUS.R     /* Status 1 */
#define INTM_INTM_IRQSEL2    INTM.MON[2].INTM_IRQSEL.R     /* Interrupt Request Select 2 */
#define INTM_INTM_LATENCY2   INTM.MON[2].INTM_LATENCY.R    /* INTM_LATENCY2 */
#define INTM_INTM_TIMER2     INTM.MON[2].INTM_TIMER.R      /* Timer 2 */
#define INTM_INTM_STATUS2    INTM.MON[2].INTM_STATUS.R     /* Status 2 */
#define INTM_INTM_IRQSEL3    INTM.MON[3].INTM_IRQSEL.R     /* Interrupt Request Select 3 */
#define INTM_INTM_LATENCY3   INTM.MON[3].INTM_LATENCY.R    /* INTM_LATENCY3 */
#define INTM_INTM_TIMER3     INTM.MON[3].INTM_TIMER.R      /* Timer 3 */
#define INTM_INTM_STATUS3    INTM.MON[3].INTM_STATUS.R     /* Status 3 */

/* JDC */
#define JDC_MCR              JDC.MCR.R                     /* Module Configuration Register */
#define JDC_MSR              JDC.MSR.R                     /* Module Status Register */
#define JDC_JOUT_IPS         JDC.JOUT_IPS.R                /* JTAG Output Data Register */
#define JDC_JIN_IPS          JDC.JIN_IPS.R                 /* JTAG Input Data Register */

/* LCU */
#define LCU_0_LC0_LUTCTRL0   LCU_0.LC[0].LUTCTRL0.R        /* LC 0 Output 0 LUT Control */
#define LCU_0_LC0_LUTCTRL1   LCU_0.LC[0].LUTCTRL1.R        /* LC 0 Output 1 LUT Control */
#define LCU_0_LC0_LUTCTRL2   LCU_0.LC[0].LUTCTRL2.R        /* LC 0 Output 2 LUT Control */
#define LCU_0_LC0_LUTCTRL3   LCU_0.LC[0].LUTCTRL3.R        /* LC 0 Output 3 LUT Control */
#define LCU_0_LC0_FILT0      LCU_0.LC[0].FILT0.R           /* LC 0 Output 0 Filter */
#define LCU_0_LC0_FILT1      LCU_0.LC[0].FILT1.R           /* LC 0 Output 1 Filter */
#define LCU_0_LC0_FILT2      LCU_0.LC[0].FILT2.R           /* LC 0 Output 2 Filter */
#define LCU_0_LC0_FILT3      LCU_0.LC[0].FILT3.R           /* LC 0 Output 3 Filter */
#define LCU_0_LC0_INTDMAEN   LCU_0.LC[0].INTDMAEN.R        /* LC 0 Interrupt and DMA Enable */
#define LCU_0_LC0_STS        LCU_0.LC[0].STS.R             /* LC 0 Status */
#define LCU_0_LC0_OUTPOL     LCU_0.LC[0].OUTPOL.R          /* LC 0 Output Polarity Control */
#define LCU_0_LC0_FFILT      LCU_0.LC[0].FFILT.R           /* LC 0 Force Filter */
#define LCU_0_LC0_FCTRL      LCU_0.LC[0].FCTRL.R           /* LC 0 Force Control */
#define LCU_0_LC0_SCTRL      LCU_0.LC[0].SCTRL.R           /* LC 0 Sync Control */
#define LCU_0_LC1_LUTCTRL0   LCU_0.LC[1].LUTCTRL0.R        /* LC 1 Output 0 LUT Control */
#define LCU_0_LC1_LUTCTRL1   LCU_0.LC[1].LUTCTRL1.R        /* LC 1 Output 1 LUT Control */
#define LCU_0_LC1_LUTCTRL2   LCU_0.LC[1].LUTCTRL2.R        /* LC 1 Output 2 LUT Control */
#define LCU_0_LC1_LUTCTRL3   LCU_0.LC[1].LUTCTRL3.R        /* LC 1 Output 3 LUT Control */
#define LCU_0_LC1_FILT0      LCU_0.LC[1].FILT0.R           /* LC 1 Output 0 Filter */
#define LCU_0_LC1_FILT1      LCU_0.LC[1].FILT1.R           /* LC 1 Output 1 Filter */
#define LCU_0_LC1_FILT2      LCU_0.LC[1].FILT2.R           /* LC 1 Output 2 Filter */
#define LCU_0_LC1_FILT3      LCU_0.LC[1].FILT3.R           /* LC 1 Output 3 Filter */
#define LCU_0_LC1_INTDMAEN   LCU_0.LC[1].INTDMAEN.R        /* LC 1 Interrupt and DMA Enable */
#define LCU_0_LC1_STS        LCU_0.LC[1].STS.R             /* LC 1 Status */
#define LCU_0_LC1_OUTPOL     LCU_0.LC[1].OUTPOL.R          /* LC 1 Output Polarity Control */
#define LCU_0_LC1_FFILT      LCU_0.LC[1].FFILT.R           /* LC 1 Force Filter */
#define LCU_0_LC1_FCTRL      LCU_0.LC[1].FCTRL.R           /* LC 1 Force Control */
#define LCU_0_LC1_SCTRL      LCU_0.LC[1].SCTRL.R           /* LC 1 Sync Control */
#define LCU_0_LC2_LUTCTRL0   LCU_0.LC[2].LUTCTRL0.R        /* LC 2 Output 0 LUT Control */
#define LCU_0_LC2_LUTCTRL1   LCU_0.LC[2].LUTCTRL1.R        /* LC 2 Output 1 LUT Control */
#define LCU_0_LC2_LUTCTRL2   LCU_0.LC[2].LUTCTRL2.R        /* LC 2 Output 2 LUT Control */
#define LCU_0_LC2_LUTCTRL3   LCU_0.LC[2].LUTCTRL3.R        /* LC 2 Output 3 LUT Control */
#define LCU_0_LC2_FILT0      LCU_0.LC[2].FILT0.R           /* LC 2 Output 0 Filter */
#define LCU_0_LC2_FILT1      LCU_0.LC[2].FILT1.R           /* LC 2 Output 1 Filter */
#define LCU_0_LC2_FILT2      LCU_0.LC[2].FILT2.R           /* LC 2 Output 2 Filter */
#define LCU_0_LC2_FILT3      LCU_0.LC[2].FILT3.R           /* LC 2 Output 3 Filter */
#define LCU_0_LC2_INTDMAEN   LCU_0.LC[2].INTDMAEN.R        /* LC 2 Interrupt and DMA Enable */
#define LCU_0_LC2_STS        LCU_0.LC[2].STS.R             /* LC 2 Status */
#define LCU_0_LC2_OUTPOL     LCU_0.LC[2].OUTPOL.R          /* LC 2 Output Polarity Control */
#define LCU_0_LC2_FFILT      LCU_0.LC[2].FFILT.R           /* LC 2 Force Filter */
#define LCU_0_LC2_FCTRL      LCU_0.LC[2].FCTRL.R           /* LC 2 Force Control */
#define LCU_0_LC2_SCTRL      LCU_0.LC[2].SCTRL.R           /* LC 2 Sync Control */
#define LCU_0_MUXSEL0        LCU_0.MUXSEL[0].R             /* Mux Select */
#define LCU_0_MUXSEL1        LCU_0.MUXSEL[1].R             /* Mux Select */
#define LCU_0_MUXSEL2        LCU_0.MUXSEL[2].R             /* Mux Select */
#define LCU_0_MUXSEL3        LCU_0.MUXSEL[3].R             /* Mux Select */
#define LCU_0_MUXSEL4        LCU_0.MUXSEL[4].R             /* Mux Select */
#define LCU_0_MUXSEL5        LCU_0.MUXSEL[5].R             /* Mux Select */
#define LCU_0_MUXSEL6        LCU_0.MUXSEL[6].R             /* Mux Select */
#define LCU_0_MUXSEL7        LCU_0.MUXSEL[7].R             /* Mux Select */
#define LCU_0_MUXSEL8        LCU_0.MUXSEL[8].R             /* Mux Select */
#define LCU_0_MUXSEL9        LCU_0.MUXSEL[9].R             /* Mux Select */
#define LCU_0_MUXSEL10       LCU_0.MUXSEL[10].R            /* Mux Select */
#define LCU_0_MUXSEL11       LCU_0.MUXSEL[11].R            /* Mux Select */
#define LCU_0_CFG            LCU_0.CFG.R                   /* Configuration */
#define LCU_0_SWEN           LCU_0.SWEN.R                  /* Software Override Enable */
#define LCU_0_SWVALUE        LCU_0.SWVALUE.R               /* Software Override Value */
#define LCU_0_OUTEN          LCU_0.OUTEN.R                 /* Output Enable */
#define LCU_0_LCIN           LCU_0.LCIN.R                  /* Logic Inputs */
#define LCU_0_SWOUT          LCU_0.SWOUT.R                 /* Overridden Inputs */
#define LCU_0_LCOUT          LCU_0.LCOUT.R                 /* Logic Outputs */
#define LCU_0_FORCEOUT       LCU_0.FORCEOUT.R              /* Forced Outputs */
#define LCU_0_FORCESTS       LCU_0.FORCESTS.R              /* Force Status */
#define LCU_0_DBGEN          LCU_0.DBGEN.R                 /* Debug Mode Enable */

#define LCU_1_LC0_LUTCTRL0   LCU_1.LC[0].LUTCTRL0.R        /* LC 0 Output 0 LUT Control */
#define LCU_1_LC0_LUTCTRL1   LCU_1.LC[0].LUTCTRL1.R        /* LC 0 Output 1 LUT Control */
#define LCU_1_LC0_LUTCTRL2   LCU_1.LC[0].LUTCTRL2.R        /* LC 0 Output 2 LUT Control */
#define LCU_1_LC0_LUTCTRL3   LCU_1.LC[0].LUTCTRL3.R        /* LC 0 Output 3 LUT Control */
#define LCU_1_LC0_FILT0      LCU_1.LC[0].FILT0.R           /* LC 0 Output 0 Filter */
#define LCU_1_LC0_FILT1      LCU_1.LC[0].FILT1.R           /* LC 0 Output 1 Filter */
#define LCU_1_LC0_FILT2      LCU_1.LC[0].FILT2.R           /* LC 0 Output 2 Filter */
#define LCU_1_LC0_FILT3      LCU_1.LC[0].FILT3.R           /* LC 0 Output 3 Filter */
#define LCU_1_LC0_INTDMAEN   LCU_1.LC[0].INTDMAEN.R        /* LC 0 Interrupt and DMA Enable */
#define LCU_1_LC0_STS        LCU_1.LC[0].STS.R             /* LC 0 Status */
#define LCU_1_LC0_OUTPOL     LCU_1.LC[0].OUTPOL.R          /* LC 0 Output Polarity Control */
#define LCU_1_LC0_FFILT      LCU_1.LC[0].FFILT.R           /* LC 0 Force Filter */
#define LCU_1_LC0_FCTRL      LCU_1.LC[0].FCTRL.R           /* LC 0 Force Control */
#define LCU_1_LC0_SCTRL      LCU_1.LC[0].SCTRL.R           /* LC 0 Sync Control */
#define LCU_1_LC1_LUTCTRL0   LCU_1.LC[1].LUTCTRL0.R        /* LC 1 Output 0 LUT Control */
#define LCU_1_LC1_LUTCTRL1   LCU_1.LC[1].LUTCTRL1.R        /* LC 1 Output 1 LUT Control */
#define LCU_1_LC1_LUTCTRL2   LCU_1.LC[1].LUTCTRL2.R        /* LC 1 Output 2 LUT Control */
#define LCU_1_LC1_LUTCTRL3   LCU_1.LC[1].LUTCTRL3.R        /* LC 1 Output 3 LUT Control */
#define LCU_1_LC1_FILT0      LCU_1.LC[1].FILT0.R           /* LC 1 Output 0 Filter */
#define LCU_1_LC1_FILT1      LCU_1.LC[1].FILT1.R           /* LC 1 Output 1 Filter */
#define LCU_1_LC1_FILT2      LCU_1.LC[1].FILT2.R           /* LC 1 Output 2 Filter */
#define LCU_1_LC1_FILT3      LCU_1.LC[1].FILT3.R           /* LC 1 Output 3 Filter */
#define LCU_1_LC1_INTDMAEN   LCU_1.LC[1].INTDMAEN.R        /* LC 1 Interrupt and DMA Enable */
#define LCU_1_LC1_STS        LCU_1.LC[1].STS.R             /* LC 1 Status */
#define LCU_1_LC1_OUTPOL     LCU_1.LC[1].OUTPOL.R          /* LC 1 Output Polarity Control */
#define LCU_1_LC1_FFILT      LCU_1.LC[1].FFILT.R           /* LC 1 Force Filter */
#define LCU_1_LC1_FCTRL      LCU_1.LC[1].FCTRL.R           /* LC 1 Force Control */
#define LCU_1_LC1_SCTRL      LCU_1.LC[1].SCTRL.R           /* LC 1 Sync Control */
#define LCU_1_LC2_LUTCTRL0   LCU_1.LC[2].LUTCTRL0.R        /* LC 2 Output 0 LUT Control */
#define LCU_1_LC2_LUTCTRL1   LCU_1.LC[2].LUTCTRL1.R        /* LC 2 Output 1 LUT Control */
#define LCU_1_LC2_LUTCTRL2   LCU_1.LC[2].LUTCTRL2.R        /* LC 2 Output 2 LUT Control */
#define LCU_1_LC2_LUTCTRL3   LCU_1.LC[2].LUTCTRL3.R        /* LC 2 Output 3 LUT Control */
#define LCU_1_LC2_FILT0      LCU_1.LC[2].FILT0.R           /* LC 2 Output 0 Filter */
#define LCU_1_LC2_FILT1      LCU_1.LC[2].FILT1.R           /* LC 2 Output 1 Filter */
#define LCU_1_LC2_FILT2      LCU_1.LC[2].FILT2.R           /* LC 2 Output 2 Filter */
#define LCU_1_LC2_FILT3      LCU_1.LC[2].FILT3.R           /* LC 2 Output 3 Filter */
#define LCU_1_LC2_INTDMAEN   LCU_1.LC[2].INTDMAEN.R        /* LC 2 Interrupt and DMA Enable */
#define LCU_1_LC2_STS        LCU_1.LC[2].STS.R             /* LC 2 Status */
#define LCU_1_LC2_OUTPOL     LCU_1.LC[2].OUTPOL.R          /* LC 2 Output Polarity Control */
#define LCU_1_LC2_FFILT      LCU_1.LC[2].FFILT.R           /* LC 2 Force Filter */
#define LCU_1_LC2_FCTRL      LCU_1.LC[2].FCTRL.R           /* LC 2 Force Control */
#define LCU_1_LC2_SCTRL      LCU_1.LC[2].SCTRL.R           /* LC 2 Sync Control */
#define LCU_1_MUXSEL0        LCU_1.MUXSEL[0].R             /* Mux Select */
#define LCU_1_MUXSEL1        LCU_1.MUXSEL[1].R             /* Mux Select */
#define LCU_1_MUXSEL2        LCU_1.MUXSEL[2].R             /* Mux Select */
#define LCU_1_MUXSEL3        LCU_1.MUXSEL[3].R             /* Mux Select */
#define LCU_1_MUXSEL4        LCU_1.MUXSEL[4].R             /* Mux Select */
#define LCU_1_MUXSEL5        LCU_1.MUXSEL[5].R             /* Mux Select */
#define LCU_1_MUXSEL6        LCU_1.MUXSEL[6].R             /* Mux Select */
#define LCU_1_MUXSEL7        LCU_1.MUXSEL[7].R             /* Mux Select */
#define LCU_1_MUXSEL8        LCU_1.MUXSEL[8].R             /* Mux Select */
#define LCU_1_MUXSEL9        LCU_1.MUXSEL[9].R             /* Mux Select */
#define LCU_1_MUXSEL10       LCU_1.MUXSEL[10].R            /* Mux Select */
#define LCU_1_MUXSEL11       LCU_1.MUXSEL[11].R            /* Mux Select */
#define LCU_1_CFG            LCU_1.CFG.R                   /* Configuration */
#define LCU_1_SWEN           LCU_1.SWEN.R                  /* Software Override Enable */
#define LCU_1_SWVALUE        LCU_1.SWVALUE.R               /* Software Override Value */
#define LCU_1_OUTEN          LCU_1.OUTEN.R                 /* Output Enable */
#define LCU_1_LCIN           LCU_1.LCIN.R                  /* Logic Inputs */
#define LCU_1_SWOUT          LCU_1.SWOUT.R                 /* Overridden Inputs */
#define LCU_1_LCOUT          LCU_1.LCOUT.R                 /* Logic Outputs */
#define LCU_1_FORCEOUT       LCU_1.FORCEOUT.R              /* Forced Outputs */
#define LCU_1_FORCESTS       LCU_1.FORCESTS.R              /* Force Status */
#define LCU_1_DBGEN          LCU_1.DBGEN.R                 /* Debug Mode Enable */

/* LPCMP */
#define LPCMP_0_VERID        LPCMP_0.VERID.R               /* Version ID Register */
#define LPCMP_0_PARAM        LPCMP_0.PARAM.R               /* Parameter Register */
#define LPCMP_0_CCR0         LPCMP_0.CCR0.R                /* Comparator Control Register 0 */
#define LPCMP_0_CCR1         LPCMP_0.CCR1.R                /* Comparator Control Register 1 */
#define LPCMP_0_CCR2         LPCMP_0.CCR2.R                /* Comparator Control Register 2 */
#define LPCMP_0_DCR          LPCMP_0.DCR.R                 /* DAC Control Register */
#define LPCMP_0_IER          LPCMP_0.IER.R                 /* Interrupt Enable Register */
#define LPCMP_0_CSR          LPCMP_0.CSR.R                 /* Comparator Status Register */
#define LPCMP_0_RRCR0        LPCMP_0.RRCR0.R               /* Round Robin Control Register 0 */
#define LPCMP_0_RRCR1        LPCMP_0.RRCR1.R               /* Round Robin Control Register 1 */
#define LPCMP_0_RRCSR        LPCMP_0.RRCSR.R               /* Round Robin Control and Status Register */
#define LPCMP_0_RRSR         LPCMP_0.RRSR.R                /* Round Robin Status Register */

#define LPCMP_1_VERID        LPCMP_1.VERID.R               /* Version ID Register */
#define LPCMP_1_PARAM        LPCMP_1.PARAM.R               /* Parameter Register */
#define LPCMP_1_CCR0         LPCMP_1.CCR0.R                /* Comparator Control Register 0 */
#define LPCMP_1_CCR1         LPCMP_1.CCR1.R                /* Comparator Control Register 1 */
#define LPCMP_1_CCR2         LPCMP_1.CCR2.R                /* Comparator Control Register 2 */
#define LPCMP_1_DCR          LPCMP_1.DCR.R                 /* DAC Control Register */
#define LPCMP_1_IER          LPCMP_1.IER.R                 /* Interrupt Enable Register */
#define LPCMP_1_CSR          LPCMP_1.CSR.R                 /* Comparator Status Register */
#define LPCMP_1_RRCR0        LPCMP_1.RRCR0.R               /* Round Robin Control Register 0 */
#define LPCMP_1_RRCR1        LPCMP_1.RRCR1.R               /* Round Robin Control Register 1 */
#define LPCMP_1_RRCSR        LPCMP_1.RRCSR.R               /* Round Robin Control and Status Register */
#define LPCMP_1_RRSR         LPCMP_1.RRSR.R                /* Round Robin Status Register */

#define LPCMP_2_VERID        LPCMP_2.VERID.R               /* Version ID Register */
#define LPCMP_2_PARAM        LPCMP_2.PARAM.R               /* Parameter Register */
#define LPCMP_2_CCR0         LPCMP_2.CCR0.R                /* Comparator Control Register 0 */
#define LPCMP_2_CCR1         LPCMP_2.CCR1.R                /* Comparator Control Register 1 */
#define LPCMP_2_CCR2         LPCMP_2.CCR2.R                /* Comparator Control Register 2 */
#define LPCMP_2_DCR          LPCMP_2.DCR.R                 /* DAC Control Register */
#define LPCMP_2_IER          LPCMP_2.IER.R                 /* Interrupt Enable Register */
#define LPCMP_2_CSR          LPCMP_2.CSR.R                 /* Comparator Status Register */
#define LPCMP_2_RRCR0        LPCMP_2.RRCR0.R               /* Round Robin Control Register 0 */
#define LPCMP_2_RRCR1        LPCMP_2.RRCR1.R               /* Round Robin Control Register 1 */
#define LPCMP_2_RRCSR        LPCMP_2.RRCSR.R               /* Round Robin Control and Status Register */
#define LPCMP_2_RRSR         LPCMP_2.RRSR.R                /* Round Robin Status Register */

/* LPI2C */
#define LPI2C_0_VERID        LPI2C_0.VERID.R               /* Version ID Register */
#define LPI2C_0_PARAM        LPI2C_0.PARAM.R               /* Parameter Register */
#define LPI2C_0_MCR          LPI2C_0.MCR.R                 /* Master Control Register */
#define LPI2C_0_MSR          LPI2C_0.MSR.R                 /* Master Status Register */
#define LPI2C_0_MIER         LPI2C_0.MIER.R                /* Master Interrupt Enable Register */
#define LPI2C_0_MDER         LPI2C_0.MDER.R                /* Master DMA Enable Register */
#define LPI2C_0_MCFGR0       LPI2C_0.MCFGR0.R              /* Master Configuration Register 0 */
#define LPI2C_0_MCFGR1       LPI2C_0.MCFGR1.R              /* Master Configuration Register 1 */
#define LPI2C_0_MCFGR2       LPI2C_0.MCFGR2.R              /* Master Configuration Register 2 */
#define LPI2C_0_MCFGR3       LPI2C_0.MCFGR3.R              /* Master Configuration Register 3 */
#define LPI2C_0_MDMR         LPI2C_0.MDMR.R                /* Master Data Match Register */
#define LPI2C_0_MCCR0        LPI2C_0.MCCR0.R               /* Master Clock Configuration Register 0 */
#define LPI2C_0_MCCR1        LPI2C_0.MCCR1.R               /* Master Clock Configuration Register 1 */
#define LPI2C_0_MFCR         LPI2C_0.MFCR.R                /* Master FIFO Control Register */
#define LPI2C_0_MFSR         LPI2C_0.MFSR.R                /* Master FIFO Status Register */
#define LPI2C_0_MTDR         LPI2C_0.MTDR.R                /* Master Transmit Data Register */
#define LPI2C_0_MRDR         LPI2C_0.MRDR.R                /* Master Receive Data Register */
#define LPI2C_0_SCR          LPI2C_0.SCR.R                 /* Slave Control Register */
#define LPI2C_0_SSR          LPI2C_0.SSR.R                 /* Slave Status Register */
#define LPI2C_0_SIER         LPI2C_0.SIER.R                /* Slave Interrupt Enable Register */
#define LPI2C_0_SDER         LPI2C_0.SDER.R                /* Slave DMA Enable Register */
#define LPI2C_0_SCFGR1       LPI2C_0.SCFGR1.R              /* Slave Configuration Register 1 */
#define LPI2C_0_SCFGR2       LPI2C_0.SCFGR2.R              /* Slave Configuration Register 2 */
#define LPI2C_0_SAMR         LPI2C_0.SAMR.R                /* Slave Address Match Register */
#define LPI2C_0_SASR         LPI2C_0.SASR.R                /* Slave Address Status Register */
#define LPI2C_0_STAR         LPI2C_0.STAR.R                /* Slave Transmit ACK Register */
#define LPI2C_0_STDR         LPI2C_0.STDR.R                /* Slave Transmit Data Register */
#define LPI2C_0_SRDR         LPI2C_0.SRDR.R                /* Slave Receive Data Register */

#define LPI2C_1_VERID        LPI2C_1.VERID.R               /* Version ID Register */
#define LPI2C_1_PARAM        LPI2C_1.PARAM.R               /* Parameter Register */
#define LPI2C_1_MCR          LPI2C_1.MCR.R                 /* Master Control Register */
#define LPI2C_1_MSR          LPI2C_1.MSR.R                 /* Master Status Register */
#define LPI2C_1_MIER         LPI2C_1.MIER.R                /* Master Interrupt Enable Register */
#define LPI2C_1_MDER         LPI2C_1.MDER.R                /* Master DMA Enable Register */
#define LPI2C_1_MCFGR0       LPI2C_1.MCFGR0.R              /* Master Configuration Register 0 */
#define LPI2C_1_MCFGR1       LPI2C_1.MCFGR1.R              /* Master Configuration Register 1 */
#define LPI2C_1_MCFGR2       LPI2C_1.MCFGR2.R              /* Master Configuration Register 2 */
#define LPI2C_1_MCFGR3       LPI2C_1.MCFGR3.R              /* Master Configuration Register 3 */
#define LPI2C_1_MDMR         LPI2C_1.MDMR.R                /* Master Data Match Register */
#define LPI2C_1_MCCR0        LPI2C_1.MCCR0.R               /* Master Clock Configuration Register 0 */
#define LPI2C_1_MCCR1        LPI2C_1.MCCR1.R               /* Master Clock Configuration Register 1 */
#define LPI2C_1_MFCR         LPI2C_1.MFCR.R                /* Master FIFO Control Register */
#define LPI2C_1_MFSR         LPI2C_1.MFSR.R                /* Master FIFO Status Register */
#define LPI2C_1_MTDR         LPI2C_1.MTDR.R                /* Master Transmit Data Register */
#define LPI2C_1_MRDR         LPI2C_1.MRDR.R                /* Master Receive Data Register */
#define LPI2C_1_SCR          LPI2C_1.SCR.R                 /* Slave Control Register */
#define LPI2C_1_SSR          LPI2C_1.SSR.R                 /* Slave Status Register */
#define LPI2C_1_SIER         LPI2C_1.SIER.R                /* Slave Interrupt Enable Register */
#define LPI2C_1_SDER         LPI2C_1.SDER.R                /* Slave DMA Enable Register */
#define LPI2C_1_SCFGR1       LPI2C_1.SCFGR1.R              /* Slave Configuration Register 1 */
#define LPI2C_1_SCFGR2       LPI2C_1.SCFGR2.R              /* Slave Configuration Register 2 */
#define LPI2C_1_SAMR         LPI2C_1.SAMR.R                /* Slave Address Match Register */
#define LPI2C_1_SASR         LPI2C_1.SASR.R                /* Slave Address Status Register */
#define LPI2C_1_STAR         LPI2C_1.STAR.R                /* Slave Transmit ACK Register */
#define LPI2C_1_STDR         LPI2C_1.STDR.R                /* Slave Transmit Data Register */
#define LPI2C_1_SRDR         LPI2C_1.SRDR.R                /* Slave Receive Data Register */

/* LPSPI */
#define LPSPI_0_VERID        LPSPI_0.VERID.R               /* Version ID Register */
#define LPSPI_0_PARAM        LPSPI_0.PARAM.R               /* Parameter Register */
#define LPSPI_0_CR           LPSPI_0.CR.R                  /* Control Register */
#define LPSPI_0_SR           LPSPI_0.SR.R                  /* Status Register */
#define LPSPI_0_IER          LPSPI_0.IER.R                 /* Interrupt Enable Register */
#define LPSPI_0_DER          LPSPI_0.DER.R                 /* DMA Enable Register */
#define LPSPI_0_CFGR0        LPSPI_0.CFGR0.R               /* Configuration Register 0 */
#define LPSPI_0_CFGR1        LPSPI_0.CFGR1.R               /* Configuration Register 1 */
#define LPSPI_0_DMR0         LPSPI_0.DMR0.R                /* Data Match Register 0 */
#define LPSPI_0_DMR1         LPSPI_0.DMR1.R                /* Data Match Register 1 */
#define LPSPI_0_CCR          LPSPI_0.CCR.R                 /* Clock Configuration Register */
#define LPSPI_0_CCR1         LPSPI_0.CCR1.R                /* Clock Configuration Register 1 */
#define LPSPI_0_FCR          LPSPI_0.FCR.R                 /* The FIFO Control register contains the RXWATER and TXWATER control fields. */
#define LPSPI_0_FSR          LPSPI_0.FSR.R                 /* FIFO Status Register */
#define LPSPI_0_TCR          LPSPI_0.TCR.R                 /* Transmit Command Register */
#define LPSPI_0_TDR          LPSPI_0.TDR.R                 /* Transmit Data Register */
#define LPSPI_0_RSR          LPSPI_0.RSR.R                 /* Receive Status Register */
#define LPSPI_0_RDR          LPSPI_0.RDR.R                 /* Receive Data Register */
#define LPSPI_0_RDROR        LPSPI_0.RDROR.R               /* Receive Data Read Only Register */
#define LPSPI_0_TCBR         LPSPI_0.TCBR.R                /* Transmit Command Burst Register */
#define LPSPI_0_TDBR         LPSPI_0.TDBR.R                /* Transmit Data Burst Register */
#define LPSPI_0_RDBR         LPSPI_0.RDBR.R                /* Receive Data Burst Register */

#define LPSPI_1_VERID        LPSPI_1.VERID.R               /* Version ID Register */
#define LPSPI_1_PARAM        LPSPI_1.PARAM.R               /* Parameter Register */
#define LPSPI_1_CR           LPSPI_1.CR.R                  /* Control Register */
#define LPSPI_1_SR           LPSPI_1.SR.R                  /* Status Register */
#define LPSPI_1_IER          LPSPI_1.IER.R                 /* Interrupt Enable Register */
#define LPSPI_1_DER          LPSPI_1.DER.R                 /* DMA Enable Register */
#define LPSPI_1_CFGR0        LPSPI_1.CFGR0.R               /* Configuration Register 0 */
#define LPSPI_1_CFGR1        LPSPI_1.CFGR1.R               /* Configuration Register 1 */
#define LPSPI_1_DMR0         LPSPI_1.DMR0.R                /* Data Match Register 0 */
#define LPSPI_1_DMR1         LPSPI_1.DMR1.R                /* Data Match Register 1 */
#define LPSPI_1_CCR          LPSPI_1.CCR.R                 /* Clock Configuration Register */
#define LPSPI_1_CCR1         LPSPI_1.CCR1.R                /* Clock Configuration Register 1 */
#define LPSPI_1_FCR          LPSPI_1.FCR.R                 /* The FIFO Control register contains the RXWATER and TXWATER control fields. */
#define LPSPI_1_FSR          LPSPI_1.FSR.R                 /* FIFO Status Register */
#define LPSPI_1_TCR          LPSPI_1.TCR.R                 /* Transmit Command Register */
#define LPSPI_1_TDR          LPSPI_1.TDR.R                 /* Transmit Data Register */
#define LPSPI_1_RSR          LPSPI_1.RSR.R                 /* Receive Status Register */
#define LPSPI_1_RDR          LPSPI_1.RDR.R                 /* Receive Data Register */
#define LPSPI_1_RDROR        LPSPI_1.RDROR.R               /* Receive Data Read Only Register */
#define LPSPI_1_TCBR         LPSPI_1.TCBR.R                /* Transmit Command Burst Register */
#define LPSPI_1_TDBR         LPSPI_1.TDBR.R                /* Transmit Data Burst Register */
#define LPSPI_1_RDBR         LPSPI_1.RDBR.R                /* Receive Data Burst Register */

#define LPSPI_2_VERID        LPSPI_2.VERID.R               /* Version ID Register */
#define LPSPI_2_PARAM        LPSPI_2.PARAM.R               /* Parameter Register */
#define LPSPI_2_CR           LPSPI_2.CR.R                  /* Control Register */
#define LPSPI_2_SR           LPSPI_2.SR.R                  /* Status Register */
#define LPSPI_2_IER          LPSPI_2.IER.R                 /* Interrupt Enable Register */
#define LPSPI_2_DER          LPSPI_2.DER.R                 /* DMA Enable Register */
#define LPSPI_2_CFGR0        LPSPI_2.CFGR0.R               /* Configuration Register 0 */
#define LPSPI_2_CFGR1        LPSPI_2.CFGR1.R               /* Configuration Register 1 */
#define LPSPI_2_DMR0         LPSPI_2.DMR0.R                /* Data Match Register 0 */
#define LPSPI_2_DMR1         LPSPI_2.DMR1.R                /* Data Match Register 1 */
#define LPSPI_2_CCR          LPSPI_2.CCR.R                 /* Clock Configuration Register */
#define LPSPI_2_CCR1         LPSPI_2.CCR1.R                /* Clock Configuration Register 1 */
#define LPSPI_2_FCR          LPSPI_2.FCR.R                 /* The FIFO Control register contains the RXWATER and TXWATER control fields. */
#define LPSPI_2_FSR          LPSPI_2.FSR.R                 /* FIFO Status Register */
#define LPSPI_2_TCR          LPSPI_2.TCR.R                 /* Transmit Command Register */
#define LPSPI_2_TDR          LPSPI_2.TDR.R                 /* Transmit Data Register */
#define LPSPI_2_RSR          LPSPI_2.RSR.R                 /* Receive Status Register */
#define LPSPI_2_RDR          LPSPI_2.RDR.R                 /* Receive Data Register */
#define LPSPI_2_RDROR        LPSPI_2.RDROR.R               /* Receive Data Read Only Register */
#define LPSPI_2_TCBR         LPSPI_2.TCBR.R                /* Transmit Command Burst Register */
#define LPSPI_2_TDBR         LPSPI_2.TDBR.R                /* Transmit Data Burst Register */
#define LPSPI_2_RDBR         LPSPI_2.RDBR.R                /* Receive Data Burst Register */

#define LPSPI_3_VERID        LPSPI_3.VERID.R               /* Version ID Register */
#define LPSPI_3_PARAM        LPSPI_3.PARAM.R               /* Parameter Register */
#define LPSPI_3_CR           LPSPI_3.CR.R                  /* Control Register */
#define LPSPI_3_SR           LPSPI_3.SR.R                  /* Status Register */
#define LPSPI_3_IER          LPSPI_3.IER.R                 /* Interrupt Enable Register */
#define LPSPI_3_DER          LPSPI_3.DER.R                 /* DMA Enable Register */
#define LPSPI_3_CFGR0        LPSPI_3.CFGR0.R               /* Configuration Register 0 */
#define LPSPI_3_CFGR1        LPSPI_3.CFGR1.R               /* Configuration Register 1 */
#define LPSPI_3_DMR0         LPSPI_3.DMR0.R                /* Data Match Register 0 */
#define LPSPI_3_DMR1         LPSPI_3.DMR1.R                /* Data Match Register 1 */
#define LPSPI_3_CCR          LPSPI_3.CCR.R                 /* Clock Configuration Register */
#define LPSPI_3_CCR1         LPSPI_3.CCR1.R                /* Clock Configuration Register 1 */
#define LPSPI_3_FCR          LPSPI_3.FCR.R                 /* The FIFO Control register contains the RXWATER and TXWATER control fields. */
#define LPSPI_3_FSR          LPSPI_3.FSR.R                 /* FIFO Status Register */
#define LPSPI_3_TCR          LPSPI_3.TCR.R                 /* Transmit Command Register */
#define LPSPI_3_TDR          LPSPI_3.TDR.R                 /* Transmit Data Register */
#define LPSPI_3_RSR          LPSPI_3.RSR.R                 /* Receive Status Register */
#define LPSPI_3_RDR          LPSPI_3.RDR.R                 /* Receive Data Register */
#define LPSPI_3_RDROR        LPSPI_3.RDROR.R               /* Receive Data Read Only Register */
#define LPSPI_3_TCBR         LPSPI_3.TCBR.R                /* Transmit Command Burst Register */
#define LPSPI_3_TDBR         LPSPI_3.TDBR.R                /* Transmit Data Burst Register */
#define LPSPI_3_RDBR         LPSPI_3.RDBR.R                /* Receive Data Burst Register */

#define LPSPI_4_VERID        LPSPI_4.VERID.R               /* Version ID Register */
#define LPSPI_4_PARAM        LPSPI_4.PARAM.R               /* Parameter Register */
#define LPSPI_4_CR           LPSPI_4.CR.R                  /* Control Register */
#define LPSPI_4_SR           LPSPI_4.SR.R                  /* Status Register */
#define LPSPI_4_IER          LPSPI_4.IER.R                 /* Interrupt Enable Register */
#define LPSPI_4_DER          LPSPI_4.DER.R                 /* DMA Enable Register */
#define LPSPI_4_CFGR0        LPSPI_4.CFGR0.R               /* Configuration Register 0 */
#define LPSPI_4_CFGR1        LPSPI_4.CFGR1.R               /* Configuration Register 1 */
#define LPSPI_4_DMR0         LPSPI_4.DMR0.R                /* Data Match Register 0 */
#define LPSPI_4_DMR1         LPSPI_4.DMR1.R                /* Data Match Register 1 */
#define LPSPI_4_CCR          LPSPI_4.CCR.R                 /* Clock Configuration Register */
#define LPSPI_4_CCR1         LPSPI_4.CCR1.R                /* Clock Configuration Register 1 */
#define LPSPI_4_FCR          LPSPI_4.FCR.R                 /* The FIFO Control register contains the RXWATER and TXWATER control fields. */
#define LPSPI_4_FSR          LPSPI_4.FSR.R                 /* FIFO Status Register */
#define LPSPI_4_TCR          LPSPI_4.TCR.R                 /* Transmit Command Register */
#define LPSPI_4_TDR          LPSPI_4.TDR.R                 /* Transmit Data Register */
#define LPSPI_4_RSR          LPSPI_4.RSR.R                 /* Receive Status Register */
#define LPSPI_4_RDR          LPSPI_4.RDR.R                 /* Receive Data Register */
#define LPSPI_4_RDROR        LPSPI_4.RDROR.R               /* Receive Data Read Only Register */
#define LPSPI_4_TCBR         LPSPI_4.TCBR.R                /* Transmit Command Burst Register */
#define LPSPI_4_TDBR         LPSPI_4.TDBR.R                /* Transmit Data Burst Register */
#define LPSPI_4_RDBR         LPSPI_4.RDBR.R                /* Receive Data Burst Register */

#define LPSPI_5_VERID        LPSPI_5.VERID.R               /* Version ID Register */
#define LPSPI_5_PARAM        LPSPI_5.PARAM.R               /* Parameter Register */
#define LPSPI_5_CR           LPSPI_5.CR.R                  /* Control Register */
#define LPSPI_5_SR           LPSPI_5.SR.R                  /* Status Register */
#define LPSPI_5_IER          LPSPI_5.IER.R                 /* Interrupt Enable Register */
#define LPSPI_5_DER          LPSPI_5.DER.R                 /* DMA Enable Register */
#define LPSPI_5_CFGR0        LPSPI_5.CFGR0.R               /* Configuration Register 0 */
#define LPSPI_5_CFGR1        LPSPI_5.CFGR1.R               /* Configuration Register 1 */
#define LPSPI_5_DMR0         LPSPI_5.DMR0.R                /* Data Match Register 0 */
#define LPSPI_5_DMR1         LPSPI_5.DMR1.R                /* Data Match Register 1 */
#define LPSPI_5_CCR          LPSPI_5.CCR.R                 /* Clock Configuration Register */
#define LPSPI_5_CCR1         LPSPI_5.CCR1.R                /* Clock Configuration Register 1 */
#define LPSPI_5_FCR          LPSPI_5.FCR.R                 /* The FIFO Control register contains the RXWATER and TXWATER control fields. */
#define LPSPI_5_FSR          LPSPI_5.FSR.R                 /* FIFO Status Register */
#define LPSPI_5_TCR          LPSPI_5.TCR.R                 /* Transmit Command Register */
#define LPSPI_5_TDR          LPSPI_5.TDR.R                 /* Transmit Data Register */
#define LPSPI_5_RSR          LPSPI_5.RSR.R                 /* Receive Status Register */
#define LPSPI_5_RDR          LPSPI_5.RDR.R                 /* Receive Data Register */
#define LPSPI_5_RDROR        LPSPI_5.RDROR.R               /* Receive Data Read Only Register */
#define LPSPI_5_TCBR         LPSPI_5.TCBR.R                /* Transmit Command Burst Register */
#define LPSPI_5_TDBR         LPSPI_5.TDBR.R                /* Transmit Data Burst Register */
#define LPSPI_5_RDBR         LPSPI_5.RDBR.R                /* Receive Data Burst Register */

/* LPUART */
#define LPUART_0_VERID       LPUART_0.VERID.R              /* Version ID Register */
#define LPUART_0_PARAM       LPUART_0.PARAM.R              /* Parameter Register */
#define LPUART_0_GLOBAL      LPUART_0.GLOBAL.R             /* LPUART Global Register */
#define LPUART_0_PINCFG      LPUART_0.PINCFG.R             /* LPUART Pin Configuration Register */
#define LPUART_0_BAUD        LPUART_0.BAUD.R               /* LPUART Baud Rate Register */
#define LPUART_0_STAT        LPUART_0.STAT.R               /* LPUART Status Register */
#define LPUART_0_CTRL        LPUART_0.CTRL.R               /* LPUART Control Register */
#define LPUART_0_DATA        LPUART_0.DATA.R               /* LPUART Data Register */
#define LPUART_0_MATCH       LPUART_0.MATCH.R              /* LPUART Match Address Register */
#define LPUART_0_MODIR       LPUART_0.MODIR.R              /* LPUART Modem IrDA Register */
#define LPUART_0_FIFO        LPUART_0.FIFO.R               /* LPUART FIFO Register */
#define LPUART_0_WATER       LPUART_0.WATER.R              /* LPUART Watermark Register */
#define LPUART_0_DATARO      LPUART_0.DATARO.R             /* Data read-only Register */

#define LPUART_1_VERID       LPUART_1.VERID.R              /* Version ID Register */
#define LPUART_1_PARAM       LPUART_1.PARAM.R              /* Parameter Register */
#define LPUART_1_GLOBAL      LPUART_1.GLOBAL.R             /* LPUART Global Register */
#define LPUART_1_PINCFG      LPUART_1.PINCFG.R             /* LPUART Pin Configuration Register */
#define LPUART_1_BAUD        LPUART_1.BAUD.R               /* LPUART Baud Rate Register */
#define LPUART_1_STAT        LPUART_1.STAT.R               /* LPUART Status Register */
#define LPUART_1_CTRL        LPUART_1.CTRL.R               /* LPUART Control Register */
#define LPUART_1_DATA        LPUART_1.DATA.R               /* LPUART Data Register */
#define LPUART_1_MATCH       LPUART_1.MATCH.R              /* LPUART Match Address Register */
#define LPUART_1_MODIR       LPUART_1.MODIR.R              /* LPUART Modem IrDA Register */
#define LPUART_1_FIFO        LPUART_1.FIFO.R               /* LPUART FIFO Register */
#define LPUART_1_WATER       LPUART_1.WATER.R              /* LPUART Watermark Register */
#define LPUART_1_DATARO      LPUART_1.DATARO.R             /* Data read-only Register */

#define LPUART_10_VERID      LPUART_10.VERID.R             /* Version ID Register */
#define LPUART_10_PARAM      LPUART_10.PARAM.R             /* Parameter Register */
#define LPUART_10_GLOBAL     LPUART_10.GLOBAL.R            /* LPUART Global Register */
#define LPUART_10_PINCFG     LPUART_10.PINCFG.R            /* LPUART Pin Configuration Register */
#define LPUART_10_BAUD       LPUART_10.BAUD.R              /* LPUART Baud Rate Register */
#define LPUART_10_STAT       LPUART_10.STAT.R              /* LPUART Status Register */
#define LPUART_10_CTRL       LPUART_10.CTRL.R              /* LPUART Control Register */
#define LPUART_10_DATA       LPUART_10.DATA.R              /* LPUART Data Register */
#define LPUART_10_MATCH      LPUART_10.MATCH.R             /* LPUART Match Address Register */
#define LPUART_10_MODIR      LPUART_10.MODIR.R             /* LPUART Modem IrDA Register */
#define LPUART_10_FIFO       LPUART_10.FIFO.R              /* LPUART FIFO Register */
#define LPUART_10_WATER      LPUART_10.WATER.R             /* LPUART Watermark Register */
#define LPUART_10_DATARO     LPUART_10.DATARO.R            /* Data read-only Register */

#define LPUART_11_VERID      LPUART_11.VERID.R             /* Version ID Register */
#define LPUART_11_PARAM      LPUART_11.PARAM.R             /* Parameter Register */
#define LPUART_11_GLOBAL     LPUART_11.GLOBAL.R            /* LPUART Global Register */
#define LPUART_11_PINCFG     LPUART_11.PINCFG.R            /* LPUART Pin Configuration Register */
#define LPUART_11_BAUD       LPUART_11.BAUD.R              /* LPUART Baud Rate Register */
#define LPUART_11_STAT       LPUART_11.STAT.R              /* LPUART Status Register */
#define LPUART_11_CTRL       LPUART_11.CTRL.R              /* LPUART Control Register */
#define LPUART_11_DATA       LPUART_11.DATA.R              /* LPUART Data Register */
#define LPUART_11_MATCH      LPUART_11.MATCH.R             /* LPUART Match Address Register */
#define LPUART_11_MODIR      LPUART_11.MODIR.R             /* LPUART Modem IrDA Register */
#define LPUART_11_FIFO       LPUART_11.FIFO.R              /* LPUART FIFO Register */
#define LPUART_11_WATER      LPUART_11.WATER.R             /* LPUART Watermark Register */
#define LPUART_11_DATARO     LPUART_11.DATARO.R            /* Data read-only Register */

#define LPUART_12_VERID      LPUART_12.VERID.R             /* Version ID Register */
#define LPUART_12_PARAM      LPUART_12.PARAM.R             /* Parameter Register */
#define LPUART_12_GLOBAL     LPUART_12.GLOBAL.R            /* LPUART Global Register */
#define LPUART_12_PINCFG     LPUART_12.PINCFG.R            /* LPUART Pin Configuration Register */
#define LPUART_12_BAUD       LPUART_12.BAUD.R              /* LPUART Baud Rate Register */
#define LPUART_12_STAT       LPUART_12.STAT.R              /* LPUART Status Register */
#define LPUART_12_CTRL       LPUART_12.CTRL.R              /* LPUART Control Register */
#define LPUART_12_DATA       LPUART_12.DATA.R              /* LPUART Data Register */
#define LPUART_12_MATCH      LPUART_12.MATCH.R             /* LPUART Match Address Register */
#define LPUART_12_MODIR      LPUART_12.MODIR.R             /* LPUART Modem IrDA Register */
#define LPUART_12_FIFO       LPUART_12.FIFO.R              /* LPUART FIFO Register */
#define LPUART_12_WATER      LPUART_12.WATER.R             /* LPUART Watermark Register */
#define LPUART_12_DATARO     LPUART_12.DATARO.R            /* Data read-only Register */

#define LPUART_13_VERID      LPUART_13.VERID.R             /* Version ID Register */
#define LPUART_13_PARAM      LPUART_13.PARAM.R             /* Parameter Register */
#define LPUART_13_GLOBAL     LPUART_13.GLOBAL.R            /* LPUART Global Register */
#define LPUART_13_PINCFG     LPUART_13.PINCFG.R            /* LPUART Pin Configuration Register */
#define LPUART_13_BAUD       LPUART_13.BAUD.R              /* LPUART Baud Rate Register */
#define LPUART_13_STAT       LPUART_13.STAT.R              /* LPUART Status Register */
#define LPUART_13_CTRL       LPUART_13.CTRL.R              /* LPUART Control Register */
#define LPUART_13_DATA       LPUART_13.DATA.R              /* LPUART Data Register */
#define LPUART_13_MATCH      LPUART_13.MATCH.R             /* LPUART Match Address Register */
#define LPUART_13_MODIR      LPUART_13.MODIR.R             /* LPUART Modem IrDA Register */
#define LPUART_13_FIFO       LPUART_13.FIFO.R              /* LPUART FIFO Register */
#define LPUART_13_WATER      LPUART_13.WATER.R             /* LPUART Watermark Register */
#define LPUART_13_DATARO     LPUART_13.DATARO.R            /* Data read-only Register */

#define LPUART_14_VERID      LPUART_14.VERID.R             /* Version ID Register */
#define LPUART_14_PARAM      LPUART_14.PARAM.R             /* Parameter Register */
#define LPUART_14_GLOBAL     LPUART_14.GLOBAL.R            /* LPUART Global Register */
#define LPUART_14_PINCFG     LPUART_14.PINCFG.R            /* LPUART Pin Configuration Register */
#define LPUART_14_BAUD       LPUART_14.BAUD.R              /* LPUART Baud Rate Register */
#define LPUART_14_STAT       LPUART_14.STAT.R              /* LPUART Status Register */
#define LPUART_14_CTRL       LPUART_14.CTRL.R              /* LPUART Control Register */
#define LPUART_14_DATA       LPUART_14.DATA.R              /* LPUART Data Register */
#define LPUART_14_MATCH      LPUART_14.MATCH.R             /* LPUART Match Address Register */
#define LPUART_14_MODIR      LPUART_14.MODIR.R             /* LPUART Modem IrDA Register */
#define LPUART_14_FIFO       LPUART_14.FIFO.R              /* LPUART FIFO Register */
#define LPUART_14_WATER      LPUART_14.WATER.R             /* LPUART Watermark Register */
#define LPUART_14_DATARO     LPUART_14.DATARO.R            /* Data read-only Register */

#define LPUART_15_VERID      LPUART_15.VERID.R             /* Version ID Register */
#define LPUART_15_PARAM      LPUART_15.PARAM.R             /* Parameter Register */
#define LPUART_15_GLOBAL     LPUART_15.GLOBAL.R            /* LPUART Global Register */
#define LPUART_15_PINCFG     LPUART_15.PINCFG.R            /* LPUART Pin Configuration Register */
#define LPUART_15_BAUD       LPUART_15.BAUD.R              /* LPUART Baud Rate Register */
#define LPUART_15_STAT       LPUART_15.STAT.R              /* LPUART Status Register */
#define LPUART_15_CTRL       LPUART_15.CTRL.R              /* LPUART Control Register */
#define LPUART_15_DATA       LPUART_15.DATA.R              /* LPUART Data Register */
#define LPUART_15_MATCH      LPUART_15.MATCH.R             /* LPUART Match Address Register */
#define LPUART_15_MODIR      LPUART_15.MODIR.R             /* LPUART Modem IrDA Register */
#define LPUART_15_FIFO       LPUART_15.FIFO.R              /* LPUART FIFO Register */
#define LPUART_15_WATER      LPUART_15.WATER.R             /* LPUART Watermark Register */
#define LPUART_15_DATARO     LPUART_15.DATARO.R            /* Data read-only Register */

#define LPUART_2_VERID       LPUART_2.VERID.R              /* Version ID Register */
#define LPUART_2_PARAM       LPUART_2.PARAM.R              /* Parameter Register */
#define LPUART_2_GLOBAL      LPUART_2.GLOBAL.R             /* LPUART Global Register */
#define LPUART_2_PINCFG      LPUART_2.PINCFG.R             /* LPUART Pin Configuration Register */
#define LPUART_2_BAUD        LPUART_2.BAUD.R               /* LPUART Baud Rate Register */
#define LPUART_2_STAT        LPUART_2.STAT.R               /* LPUART Status Register */
#define LPUART_2_CTRL        LPUART_2.CTRL.R               /* LPUART Control Register */
#define LPUART_2_DATA        LPUART_2.DATA.R               /* LPUART Data Register */
#define LPUART_2_MATCH       LPUART_2.MATCH.R              /* LPUART Match Address Register */
#define LPUART_2_MODIR       LPUART_2.MODIR.R              /* LPUART Modem IrDA Register */
#define LPUART_2_FIFO        LPUART_2.FIFO.R               /* LPUART FIFO Register */
#define LPUART_2_WATER       LPUART_2.WATER.R              /* LPUART Watermark Register */
#define LPUART_2_DATARO      LPUART_2.DATARO.R             /* Data read-only Register */

#define LPUART_3_VERID       LPUART_3.VERID.R              /* Version ID Register */
#define LPUART_3_PARAM       LPUART_3.PARAM.R              /* Parameter Register */
#define LPUART_3_GLOBAL      LPUART_3.GLOBAL.R             /* LPUART Global Register */
#define LPUART_3_PINCFG      LPUART_3.PINCFG.R             /* LPUART Pin Configuration Register */
#define LPUART_3_BAUD        LPUART_3.BAUD.R               /* LPUART Baud Rate Register */
#define LPUART_3_STAT        LPUART_3.STAT.R               /* LPUART Status Register */
#define LPUART_3_CTRL        LPUART_3.CTRL.R               /* LPUART Control Register */
#define LPUART_3_DATA        LPUART_3.DATA.R               /* LPUART Data Register */
#define LPUART_3_MATCH       LPUART_3.MATCH.R              /* LPUART Match Address Register */
#define LPUART_3_MODIR       LPUART_3.MODIR.R              /* LPUART Modem IrDA Register */
#define LPUART_3_FIFO        LPUART_3.FIFO.R               /* LPUART FIFO Register */
#define LPUART_3_WATER       LPUART_3.WATER.R              /* LPUART Watermark Register */
#define LPUART_3_DATARO      LPUART_3.DATARO.R             /* Data read-only Register */

#define LPUART_4_VERID       LPUART_4.VERID.R              /* Version ID Register */
#define LPUART_4_PARAM       LPUART_4.PARAM.R              /* Parameter Register */
#define LPUART_4_GLOBAL      LPUART_4.GLOBAL.R             /* LPUART Global Register */
#define LPUART_4_PINCFG      LPUART_4.PINCFG.R             /* LPUART Pin Configuration Register */
#define LPUART_4_BAUD        LPUART_4.BAUD.R               /* LPUART Baud Rate Register */
#define LPUART_4_STAT        LPUART_4.STAT.R               /* LPUART Status Register */
#define LPUART_4_CTRL        LPUART_4.CTRL.R               /* LPUART Control Register */
#define LPUART_4_DATA        LPUART_4.DATA.R               /* LPUART Data Register */
#define LPUART_4_MATCH       LPUART_4.MATCH.R              /* LPUART Match Address Register */
#define LPUART_4_MODIR       LPUART_4.MODIR.R              /* LPUART Modem IrDA Register */
#define LPUART_4_FIFO        LPUART_4.FIFO.R               /* LPUART FIFO Register */
#define LPUART_4_WATER       LPUART_4.WATER.R              /* LPUART Watermark Register */
#define LPUART_4_DATARO      LPUART_4.DATARO.R             /* Data read-only Register */

#define LPUART_5_VERID       LPUART_5.VERID.R              /* Version ID Register */
#define LPUART_5_PARAM       LPUART_5.PARAM.R              /* Parameter Register */
#define LPUART_5_GLOBAL      LPUART_5.GLOBAL.R             /* LPUART Global Register */
#define LPUART_5_PINCFG      LPUART_5.PINCFG.R             /* LPUART Pin Configuration Register */
#define LPUART_5_BAUD        LPUART_5.BAUD.R               /* LPUART Baud Rate Register */
#define LPUART_5_STAT        LPUART_5.STAT.R               /* LPUART Status Register */
#define LPUART_5_CTRL        LPUART_5.CTRL.R               /* LPUART Control Register */
#define LPUART_5_DATA        LPUART_5.DATA.R               /* LPUART Data Register */
#define LPUART_5_MATCH       LPUART_5.MATCH.R              /* LPUART Match Address Register */
#define LPUART_5_MODIR       LPUART_5.MODIR.R              /* LPUART Modem IrDA Register */
#define LPUART_5_FIFO        LPUART_5.FIFO.R               /* LPUART FIFO Register */
#define LPUART_5_WATER       LPUART_5.WATER.R              /* LPUART Watermark Register */
#define LPUART_5_DATARO      LPUART_5.DATARO.R             /* Data read-only Register */

#define LPUART_6_VERID       LPUART_6.VERID.R              /* Version ID Register */
#define LPUART_6_PARAM       LPUART_6.PARAM.R              /* Parameter Register */
#define LPUART_6_GLOBAL      LPUART_6.GLOBAL.R             /* LPUART Global Register */
#define LPUART_6_PINCFG      LPUART_6.PINCFG.R             /* LPUART Pin Configuration Register */
#define LPUART_6_BAUD        LPUART_6.BAUD.R               /* LPUART Baud Rate Register */
#define LPUART_6_STAT        LPUART_6.STAT.R               /* LPUART Status Register */
#define LPUART_6_CTRL        LPUART_6.CTRL.R               /* LPUART Control Register */
#define LPUART_6_DATA        LPUART_6.DATA.R               /* LPUART Data Register */
#define LPUART_6_MATCH       LPUART_6.MATCH.R              /* LPUART Match Address Register */
#define LPUART_6_MODIR       LPUART_6.MODIR.R              /* LPUART Modem IrDA Register */
#define LPUART_6_FIFO        LPUART_6.FIFO.R               /* LPUART FIFO Register */
#define LPUART_6_WATER       LPUART_6.WATER.R              /* LPUART Watermark Register */
#define LPUART_6_DATARO      LPUART_6.DATARO.R             /* Data read-only Register */

#define LPUART_7_VERID       LPUART_7.VERID.R              /* Version ID Register */
#define LPUART_7_PARAM       LPUART_7.PARAM.R              /* Parameter Register */
#define LPUART_7_GLOBAL      LPUART_7.GLOBAL.R             /* LPUART Global Register */
#define LPUART_7_PINCFG      LPUART_7.PINCFG.R             /* LPUART Pin Configuration Register */
#define LPUART_7_BAUD        LPUART_7.BAUD.R               /* LPUART Baud Rate Register */
#define LPUART_7_STAT        LPUART_7.STAT.R               /* LPUART Status Register */
#define LPUART_7_CTRL        LPUART_7.CTRL.R               /* LPUART Control Register */
#define LPUART_7_DATA        LPUART_7.DATA.R               /* LPUART Data Register */
#define LPUART_7_MATCH       LPUART_7.MATCH.R              /* LPUART Match Address Register */
#define LPUART_7_MODIR       LPUART_7.MODIR.R              /* LPUART Modem IrDA Register */
#define LPUART_7_FIFO        LPUART_7.FIFO.R               /* LPUART FIFO Register */
#define LPUART_7_WATER       LPUART_7.WATER.R              /* LPUART Watermark Register */
#define LPUART_7_DATARO      LPUART_7.DATARO.R             /* Data read-only Register */

#define LPUART_8_VERID       LPUART_8.VERID.R              /* Version ID Register */
#define LPUART_8_PARAM       LPUART_8.PARAM.R              /* Parameter Register */
#define LPUART_8_GLOBAL      LPUART_8.GLOBAL.R             /* LPUART Global Register */
#define LPUART_8_PINCFG      LPUART_8.PINCFG.R             /* LPUART Pin Configuration Register */
#define LPUART_8_BAUD        LPUART_8.BAUD.R               /* LPUART Baud Rate Register */
#define LPUART_8_STAT        LPUART_8.STAT.R               /* LPUART Status Register */
#define LPUART_8_CTRL        LPUART_8.CTRL.R               /* LPUART Control Register */
#define LPUART_8_DATA        LPUART_8.DATA.R               /* LPUART Data Register */
#define LPUART_8_MATCH       LPUART_8.MATCH.R              /* LPUART Match Address Register */
#define LPUART_8_MODIR       LPUART_8.MODIR.R              /* LPUART Modem IrDA Register */
#define LPUART_8_FIFO        LPUART_8.FIFO.R               /* LPUART FIFO Register */
#define LPUART_8_WATER       LPUART_8.WATER.R              /* LPUART Watermark Register */
#define LPUART_8_DATARO      LPUART_8.DATARO.R             /* Data read-only Register */

#define LPUART_9_VERID       LPUART_9.VERID.R              /* Version ID Register */
#define LPUART_9_PARAM       LPUART_9.PARAM.R              /* Parameter Register */
#define LPUART_9_GLOBAL      LPUART_9.GLOBAL.R             /* LPUART Global Register */
#define LPUART_9_PINCFG      LPUART_9.PINCFG.R             /* LPUART Pin Configuration Register */
#define LPUART_9_BAUD        LPUART_9.BAUD.R               /* LPUART Baud Rate Register */
#define LPUART_9_STAT        LPUART_9.STAT.R               /* LPUART Status Register */
#define LPUART_9_CTRL        LPUART_9.CTRL.R               /* LPUART Control Register */
#define LPUART_9_DATA        LPUART_9.DATA.R               /* LPUART Data Register */
#define LPUART_9_MATCH       LPUART_9.MATCH.R              /* LPUART Match Address Register */
#define LPUART_9_MODIR       LPUART_9.MODIR.R              /* LPUART Modem IrDA Register */
#define LPUART_9_FIFO        LPUART_9.FIFO.R               /* LPUART FIFO Register */
#define LPUART_9_WATER       LPUART_9.WATER.R              /* LPUART Watermark Register */
#define LPUART_9_DATARO      LPUART_9.DATARO.R             /* Data read-only Register */

/* MCM_CM7 */
#define MCM_0_CM7_PLREV      MCM_0_CM7.PLREV.R             /* SoC-defined Platform Revision */
#define MCM_0_CM7_PCT        MCM_0_CM7.PCT.R               /* Processor Core Type */
#define MCM_0_CM7_CPCR       MCM_0_CM7.CPCR.R              /* Core Platform Control */
#define MCM_0_CM7_ISCR       MCM_0_CM7.ISCR.R              /* Interrupt Status and Control */
#define MCM_0_CM7_LMEM_DESC_0 MCM_0_CM7.LMEM_DESC[0].R     /* Local Memory Descriptor 0 */
#define MCM_0_CM7_LMEM_DESC_1 MCM_0_CM7.LMEM_DESC[1].R     /* Local Memory Descriptor 1 */
#define MCM_0_CM7_LMEM_DESC_2 MCM_0_CM7.LMEM_DESC[2].R     /* Local Memory Descriptor 2 */
#define MCM_0_CM7_LMEM_DESC_3 MCM_0_CM7.LMEM_DESC[3].R     /* Local Memory Descriptor 3 */
#define MCM_0_CM7_LMEM_DESC_4 MCM_0_CM7.LMEM_DESC[4].R     /* Local Memory Descriptor 4 */

#define MCM_1_CM7_PLREV      MCM_1_CM7.PLREV.R             /* SoC-defined Platform Revision */
#define MCM_1_CM7_PCT        MCM_1_CM7.PCT.R               /* Processor Core Type */
#define MCM_1_CM7_CPCR       MCM_1_CM7.CPCR.R              /* Core Platform Control */
#define MCM_1_CM7_ISCR       MCM_1_CM7.ISCR.R              /* Interrupt Status and Control */
#define MCM_1_CM7_LMEM_DESC_0 MCM_1_CM7.LMEM_DESC[0].R     /* Local Memory Descriptor 0 */
#define MCM_1_CM7_LMEM_DESC_1 MCM_1_CM7.LMEM_DESC[1].R     /* Local Memory Descriptor 1 */
#define MCM_1_CM7_LMEM_DESC_2 MCM_1_CM7.LMEM_DESC[2].R     /* Local Memory Descriptor 2 */
#define MCM_1_CM7_LMEM_DESC_3 MCM_1_CM7.LMEM_DESC[3].R     /* Local Memory Descriptor 3 */
#define MCM_1_CM7_LMEM_DESC_4 MCM_1_CM7.LMEM_DESC[4].R     /* Local Memory Descriptor 4 */

/* MC_CGM */
#define MC_CGM_PCFS_SDUR     MC_CGM.PCFS_SDUR.R            /* PCFS Step Duration */
#define MC_CGM_MUX_0_CSC     MC_CGM.MUX_0_CSC.R            /* Clock Mux 0 Select Control Register */
#define MC_CGM_MUX_0_CSS     MC_CGM.MUX_0_CSS.R            /* Clock Mux 0 Select Status Register */
#define MC_CGM_MUX_0_DC_0    MC_CGM.MUX_0_DC_0.R           /* Clock Mux 0 Divider 0 Control Register */
#define MC_CGM_MUX_0_DC_1    MC_CGM.MUX_0_DC_1.R           /* Clock Mux 0 Divider 1 Control Register */
#define MC_CGM_MUX_0_DC_2    MC_CGM.MUX_0_DC_2.R           /* Clock Mux 0 Divider 2 Control Register */
#define MC_CGM_MUX_0_DC_3    MC_CGM.MUX_0_DC_3.R           /* Clock Mux 0 Divider 3 Control Register */
#define MC_CGM_MUX_0_DC_4    MC_CGM.MUX_0_DC_4.R           /* Clock Mux 0 Divider 4 Control Register */
#define MC_CGM_MUX_0_DC_5    MC_CGM.MUX_0_DC_5.R           /* Clock Mux 0 Divider 5 Control Register */
#define MC_CGM_MUX_0_DC_6    MC_CGM.MUX_0_DC_6.R           /* Clock Mux 0 Divider 6 Control Register */
#define MC_CGM_MUX_0_DIV_TRIG_CTRL MC_CGM.MUX_0_DIV_TRIG_CTRL.R /* Clock Mux 0 Divider Trigger Control Register */
#define MC_CGM_MUX_0_DIV_TRIG MC_CGM.MUX_0_DIV_TRIG.R      /* Clock Mux 0 Divider Trigger Register */
#define MC_CGM_MUX_0_DIV_UPD_STAT MC_CGM.MUX_0_DIV_UPD_STAT.R /* Clock Mux 0 Divider Update Status Register */
#define MC_CGM_MUX_1_CSC     MC_CGM.MUX_1_CSC.R            /* Clock Mux 1 Select Control Register */
#define MC_CGM_MUX_1_CSS     MC_CGM.MUX_1_CSS.R            /* Clock Mux 1 Select Status Register */
#define MC_CGM_MUX_1_DC_0    MC_CGM.MUX_1_DC_0.R           /* Clock Mux 1 Divider 0 Control Register */
#define MC_CGM_MUX_1_DIV_UPD_STAT MC_CGM.MUX_1_DIV_UPD_STAT.R /* Clock Mux 1 Divider Update Status Register */
#define MC_CGM_MUX_2_CSC     MC_CGM.MUX_2_CSC.R            /* Clock Mux 2 Select Control Register */
#define MC_CGM_MUX_2_CSS     MC_CGM.MUX_2_CSS.R            /* Clock Mux 2 Select Status Register */
#define MC_CGM_MUX_2_DC_0    MC_CGM.MUX_2_DC_0.R           /* Clock Mux 2 Divider 0 Control Register */
#define MC_CGM_MUX_2_DIV_UPD_STAT MC_CGM.MUX_2_DIV_UPD_STAT.R /* Clock Mux 2 Divider Update Status Register */
#define MC_CGM_MUX_3_CSC     MC_CGM.MUX_3_CSC.R            /* Clock Mux 3 Select Control Register */
#define MC_CGM_MUX_3_CSS     MC_CGM.MUX_3_CSS.R            /* Clock Mux 3 Select Status Register */
#define MC_CGM_MUX_3_DC_0    MC_CGM.MUX_3_DC_0.R           /* Clock Mux 3 Divider 0 Control Register */
#define MC_CGM_MUX_3_DIV_UPD_STAT MC_CGM.MUX_3_DIV_UPD_STAT.R /* Clock Mux 3 Divider Update Status Register */
#define MC_CGM_MUX_4_CSC     MC_CGM.MUX_4_CSC.R            /* Clock Mux 4 Select Control Register */
#define MC_CGM_MUX_4_CSS     MC_CGM.MUX_4_CSS.R            /* Clock Mux 4 Select Status Register */
#define MC_CGM_MUX_4_DC_0    MC_CGM.MUX_4_DC_0.R           /* Clock Mux 4 Divider 0 Control Register */
#define MC_CGM_MUX_4_DIV_UPD_STAT MC_CGM.MUX_4_DIV_UPD_STAT.R /* Clock Mux 4 Divider Update Status Register */
#define MC_CGM_MUX_5_CSC     MC_CGM.MUX_5_CSC.R            /* Clock Mux 5 Select Control Register */
#define MC_CGM_MUX_5_CSS     MC_CGM.MUX_5_CSS.R            /* Clock Mux 5 Select Status Register */
#define MC_CGM_MUX_5_DC_0    MC_CGM.MUX_5_DC_0.R           /* Clock Mux 5 Divider 0 Control Register */
#define MC_CGM_MUX_5_DIV_UPD_STAT MC_CGM.MUX_5_DIV_UPD_STAT.R /* Clock Mux 5 Divider Update Status Register */
#define MC_CGM_MUX_6_CSC     MC_CGM.MUX_6_CSC.R            /* Clock Mux 6 Select Control Register */
#define MC_CGM_MUX_6_CSS     MC_CGM.MUX_6_CSS.R            /* Clock Mux 6 Select Status Register */
#define MC_CGM_MUX_6_DC_0    MC_CGM.MUX_6_DC_0.R           /* Clock Mux 6 Divider 0 Control Register */
#define MC_CGM_MUX_6_DIV_UPD_STAT MC_CGM.MUX_6_DIV_UPD_STAT.R /* Clock Mux 6 Divider Update Status Register */
#define MC_CGM_MUX_7_CSC     MC_CGM.MUX_7_CSC.R            /* Clock Mux 7 Select Control Register */
#define MC_CGM_MUX_7_CSS     MC_CGM.MUX_7_CSS.R            /* Clock Mux 7 Select Status Register */
#define MC_CGM_MUX_7_DC_0    MC_CGM.MUX_7_DC_0.R           /* Clock Mux 7 Divider 0 Control Register */
#define MC_CGM_MUX_7_DIV_UPD_STAT MC_CGM.MUX_7_DIV_UPD_STAT.R /* Clock Mux 7 Divider Update Status Register */
#define MC_CGM_MUX_8_CSC     MC_CGM.MUX_8_CSC.R            /* Clock Mux 8 Select Control Register */
#define MC_CGM_MUX_8_CSS     MC_CGM.MUX_8_CSS.R            /* Clock Mux 8 Select Status Register */
#define MC_CGM_MUX_8_DC_0    MC_CGM.MUX_8_DC_0.R           /* Clock Mux 8 Divider 0 Control Register */
#define MC_CGM_MUX_8_DIV_UPD_STAT MC_CGM.MUX_8_DIV_UPD_STAT.R /* Clock Mux 8 Divider Update Status Register */
#define MC_CGM_MUX_9_CSC     MC_CGM.MUX_9_CSC.R            /* Clock Mux 9 Select Control Register */
#define MC_CGM_MUX_9_CSS     MC_CGM.MUX_9_CSS.R            /* Clock Mux 9 Select Status Register */
#define MC_CGM_MUX_9_DC_0    MC_CGM.MUX_9_DC_0.R           /* Clock Mux 9 Divider 0 Control Register */
#define MC_CGM_MUX_9_DIV_UPD_STAT MC_CGM.MUX_9_DIV_UPD_STAT.R /* Clock Mux 9 Divider Update Status Register */
#define MC_CGM_MUX_10_CSC    MC_CGM.MUX_10_CSC.R           /* Clock Mux 10 Select Control Register */
#define MC_CGM_MUX_10_CSS    MC_CGM.MUX_10_CSS.R           /* Clock Mux 10 Select Status Register */
#define MC_CGM_MUX_10_DC_0   MC_CGM.MUX_10_DC_0.R          /* Clock Mux 10 Divider 0 Control Register */
#define MC_CGM_MUX_10_DIV_UPD_STAT MC_CGM.MUX_10_DIV_UPD_STAT.R /* Clock Mux 10 Divider Update Status Register */
#define MC_CGM_MUX_11_CSC    MC_CGM.MUX_11_CSC.R           /* Clock Mux 11 Select Control Register */
#define MC_CGM_MUX_11_CSS    MC_CGM.MUX_11_CSS.R           /* Clock Mux 11 Select Status Register */
#define MC_CGM_MUX_11_DC_0   MC_CGM.MUX_11_DC_0.R          /* Clock Mux 11 Divider 0 Control Register */
#define MC_CGM_MUX_11_DIV_UPD_STAT MC_CGM.MUX_11_DIV_UPD_STAT.R /* Clock Mux 11 Divider Update Status Register */

/* MC_ME */
#define MC_ME_CTL_KEY        MC_ME.CTL_KEY.R               /* Control Key Register */
#define MC_ME_MODE_CONF      MC_ME.MODE_CONF.R             /* Mode Configuration Register */
#define MC_ME_MODE_UPD       MC_ME.MODE_UPD.R              /* Mode Update Register */
#define MC_ME_MODE_STAT      MC_ME.MODE_STAT.R             /* Mode Status Register */
#define MC_ME_MAIN_COREID    MC_ME.MAIN_COREID.R           /* Main Core ID Register */
#define MC_ME_PRTN0_PCONF    MC_ME.PRTN0_PCONF.R           /* Partition 0 Process Configuration Register */
#define MC_ME_PRTN0_PUPD     MC_ME.PRTN0_PUPD.R            /* Partition 0 Process Update Register */
#define MC_ME_PRTN0_STAT     MC_ME.PRTN0_STAT.R            /* Partition 0 Status Register */
#define MC_ME_PRTN0_COFB1_STAT MC_ME.PRTN0_COFB1_STAT.R    /* Partition 0 COFB Set 1 Clock Status Register */
#define MC_ME_PRTN0_COFB1_CLKEN MC_ME.PRTN0_COFB1_CLKEN.R  /* Partition 0 COFB Set 1 Clock Enable Register */
#define MC_ME_PRTN0_CORE0_PCONF MC_ME.PRTN0_CORE0_PCONF.R  /* Partition 0 Core 0 Process Configuration Register */
#define MC_ME_PRTN0_CORE0_PUPD MC_ME.PRTN0_CORE0_PUPD.R    /* Partition 0 Core 0 Process Update Register */
#define MC_ME_PRTN0_CORE0_STAT MC_ME.PRTN0_CORE0_STAT.R    /* Partition 0 Core 0 Status Register */
#define MC_ME_PRTN0_CORE0_ADDR MC_ME.PRTN0_CORE0_ADDR.R    /* Partition 0 Core 0 Address Register */
#define MC_ME_PRTN0_CORE1_PCONF MC_ME.PRTN0_CORE1_PCONF.R  /* Partition 0 Core 1 Process Configuration Register */
#define MC_ME_PRTN0_CORE1_PUPD MC_ME.PRTN0_CORE1_PUPD.R    /* Partition 0 Core 1 Process Update Register */
#define MC_ME_PRTN0_CORE1_STAT MC_ME.PRTN0_CORE1_STAT.R    /* Partition 0 Core 1 Status Register */
#define MC_ME_PRTN0_CORE1_ADDR MC_ME.PRTN0_CORE1_ADDR.R    /* Partition 0 Core 1 Address Register */
#define MC_ME_PRTN0_CORE2_STAT MC_ME.PRTN0_CORE2_STAT.R    /* Partition 0 Core 2 Status Register */
#define MC_ME_PRTN0_CORE2_ADDR MC_ME.PRTN0_CORE2_ADDR.R    /* Partition 0 Core 2 Address Register */
#define MC_ME_PRTN1_PCONF    MC_ME.PRTN1_PCONF.R           /* Partition 1 Process Configuration Register */
#define MC_ME_PRTN1_PUPD     MC_ME.PRTN1_PUPD.R            /* Partition 1 Process Update Register */
#define MC_ME_PRTN1_STAT     MC_ME.PRTN1_STAT.R            /* Partition 1 Status Register */
#define MC_ME_PRTN1_COFB0_STAT MC_ME.PRTN1_COFB0_STAT.R    /* Partition 1 COFB Set 0 Clock Status Register */
#define MC_ME_PRTN1_COFB1_STAT MC_ME.PRTN1_COFB1_STAT.R    /* Partition 1 COFB Set 1 Clock Status Register */
#define MC_ME_PRTN1_COFB2_STAT MC_ME.PRTN1_COFB2_STAT.R    /* Partition 1 COFB Set 2 Clock Status Register */
#define MC_ME_PRTN1_COFB3_STAT MC_ME.PRTN1_COFB3_STAT.R    /* Partition 1 COFB Set 3 Clock Status Register */
#define MC_ME_PRTN1_COFB0_CLKEN MC_ME.PRTN1_COFB0_CLKEN.R  /* Partition 1 COFB Set 0 Clock Enable Register */
#define MC_ME_PRTN1_COFB1_CLKEN MC_ME.PRTN1_COFB1_CLKEN.R  /* Partition 1 COFB Set 1 Clock Enable Register */
#define MC_ME_PRTN1_COFB2_CLKEN MC_ME.PRTN1_COFB2_CLKEN.R  /* Partition 1 COFB Set 2 Clock Enable Register */
#define MC_ME_PRTN1_COFB3_CLKEN MC_ME.PRTN1_COFB3_CLKEN.R  /* Partition 1 COFB Set 3 Clock Enable Register */
#define MC_ME_PRTN2_PCONF    MC_ME.PRTN2_PCONF.R           /* Partition 2 Process Configuration Register */
#define MC_ME_PRTN2_PUPD     MC_ME.PRTN2_PUPD.R            /* Partition 2 Process Update Register */
#define MC_ME_PRTN2_STAT     MC_ME.PRTN2_STAT.R            /* Partition 2 Status Register */
#define MC_ME_PRTN2_COFB0_STAT MC_ME.PRTN2_COFB0_STAT.R    /* Partition 2 COFB Set 0 Clock Status Register */
#define MC_ME_PRTN2_COFB1_STAT MC_ME.PRTN2_COFB1_STAT.R    /* Partition 2 COFB Set 1 Clock Status Register */
#define MC_ME_PRTN2_COFB0_CLKEN MC_ME.PRTN2_COFB0_CLKEN.R  /* Partition 2 COFB Set 0 Clock Enable Register */
#define MC_ME_PRTN2_COFB1_CLKEN MC_ME.PRTN2_COFB1_CLKEN.R  /* Partition 2 COFB Set 1 Clock Enable Register */

/* MC_RGM */
#define MC_RGM_DES           MC_RGM.DES.R                  /* Destructive Event Status Register */
#define MC_RGM_FES           MC_RGM.FES.R                  /* Functional /External Reset Status Register */
#define MC_RGM_FERD          MC_RGM.FERD.R                 /* Functional Event Reset Disable Register */
#define MC_RGM_FREC          MC_RGM.FREC.R                 /* Functional Reset Escalation Counter Register */
#define MC_RGM_FRET          MC_RGM.FRET.R                 /* Functional Reset Escalation Threshold Register */
#define MC_RGM_DRET          MC_RGM.DRET.R                 /* Destructive Reset Escalation Threshold Register */
#define MC_RGM_ERCTRL        MC_RGM.ERCTRL.R               /* External Reset Control Register */
#define MC_RGM_RDSS          MC_RGM.RDSS.R                 /* Reset During Standby Status Register */
#define MC_RGM_LPDEBUG       MC_RGM.LPDEBUG.R              /* Low Power Debug Control Register */

/* MDM_AP */
#define MDM_AP_MDMAPSTTS     MDM_AP.MDMAPSTTS.R            /* Status */
#define MDM_AP_MDMAPCTL      MDM_AP.MDMAPCTL.R             /* Control */
#define MDM_AP_MDMAPWIREN    MDM_AP.MDMAPWIREN.R           /* WIR Enable */
#define MDM_AP_MDMAPWIRSTTS  MDM_AP.MDMAPWIRSTTS.R         /* WIR Status */
#define MDM_AP_MDMAPWIRREL   MDM_AP.MDMAPWIRREL.R          /* WIR Release */
#define MDM_AP_ID            MDM_AP.ID.R                   /* Identity */

/* MSCM */
#define MSCM_CPXTYPE         MSCM.CPXTYPE.R                /* Processor X Type */
#define MSCM_CPXNUM          MSCM.CPXNUM.R                 /* Processor X Number */
#define MSCM_CPXREV          MSCM.CPXREV.R                 /* Processor X Revision */
#define MSCM_CPXCFG0         MSCM.CPXCFG0.R                /* Processor X Configuration 0 */
#define MSCM_CPXCFG1         MSCM.CPXCFG1.R                /* Processor X Configuration 1 */
#define MSCM_CPXCFG2         MSCM.CPXCFG2.R                /* Processor X Configuration 2 */
#define MSCM_CPXCFG3         MSCM.CPXCFG3.R                /* Processor x Configuration 3 */
#define MSCM_CP0TYPE         MSCM.CP0TYPE.R                /* Processor 0 Type */
#define MSCM_CP0NUM          MSCM.CP0NUM.R                 /* Processor 0 Number */
#define MSCM_CP0REV          MSCM.CP0REV.R                 /* Processor 0 Count */
#define MSCM_CP0CFG0         MSCM.CP0CFG0.R                /* Processor 0 Configuration 0 */
#define MSCM_CP0CFG1         MSCM.CP0CFG1.R                /* Processor 0 Configuration 1 */
#define MSCM_CP0CFG2         MSCM.CP0CFG2.R                /* Processor 0 Configuration 2 */
#define MSCM_CP0CFG3         MSCM.CP0CFG3.R                /* Processor 0 Configuration 3 */
#define MSCM_CP1TYPE         MSCM.CP1TYPE.R                /* Processor 1 Type */
#define MSCM_CP1NUM          MSCM.CP1NUM.R                 /* Processor 1 Number */
#define MSCM_CP1REV          MSCM.CP1REV.R                 /* Processor 1 Count */
#define MSCM_CP1CFG0         MSCM.CP1CFG0.R                /* Processor 1 Configuration 0 */
#define MSCM_CP1CFG1         MSCM.CP1CFG1.R                /* Processor 1 Configuration 1 */
#define MSCM_CP1CFG2         MSCM.CP1CFG2.R                /* Processor 1 Configuration 2 */
#define MSCM_CP1CFG3         MSCM.CP1CFG3.R                /* Processor 1 Configuration 3 */
#define MSCM_IRCP0ISR0       MSCM.IRCP0ISR0.R              /* Interrupt Router CP0 Interrupt Status */
#define MSCM_IRCP0IGR0       MSCM.IRCP0IGR0.R              /* Interrupt Router CP0 Interrupt Generation */
#define MSCM_IRCP0ISR1       MSCM.IRCP0ISR1.R              /* Interrupt Router CP0 Interrupt Status */
#define MSCM_IRCP0IGR1       MSCM.IRCP0IGR1.R              /* Interrupt Router CP0 Interrupt Generation */
#define MSCM_IRCP0ISR2       MSCM.IRCP0ISR2.R              /* Interrupt Router CP0 Interrupt Status */
#define MSCM_IRCP0IGR2       MSCM.IRCP0IGR2.R              /* Interrupt Router CP0 Interrupt Generation */
#define MSCM_IRCP0ISR3       MSCM.IRCP0ISR3.R              /* Interrupt Router CP0 Interrupt Status */
#define MSCM_IRCP0IGR3       MSCM.IRCP0IGR3.R              /* Interrupt Router CP0 Interrupt Generation */
#define MSCM_IRCP1ISR0       MSCM.IRCP1ISR0.R              /* Interrupt Router CP1 Interrupt Status */
#define MSCM_IRCP1IGR0       MSCM.IRCP1IGR0.R              /* Interrupt Router CP1 Interrupt Generation */
#define MSCM_IRCP1ISR1       MSCM.IRCP1ISR1.R              /* Interrupt Router CP1 Interrupt Status */
#define MSCM_IRCP1IGR1       MSCM.IRCP1IGR1.R              /* Interrupt Router CP1 Interrupt Generation */
#define MSCM_IRCP1ISR2       MSCM.IRCP1ISR2.R              /* Interrupt Router CP1 Interrupt Status */
#define MSCM_IRCP1IGR2       MSCM.IRCP1IGR2.R              /* Interrupt Router CP1 Interrupt Generation */
#define MSCM_IRCP1ISR3       MSCM.IRCP1ISR3.R              /* Interrupt Router CP1 Interrupt Status */
#define MSCM_IRCP1IGR3       MSCM.IRCP1IGR3.R              /* Interrupt Router CP1 Interrupt Generation */
#define MSCM_IRCPCFG         MSCM.IRCPCFG.R                /* Interrupt Router Configuration */
#define MSCM_ENEDC           MSCM.ENEDC.R                  /* Enable Interconnect Error Detection */
#define MSCM_IAHBCFGREG      MSCM.IAHBCFGREG.R             /* AHB Gasket Configuration */
#define MSCM_IRSPRC0         MSCM.IRSPRC[0].R              /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC1         MSCM.IRSPRC[1].R              /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC2         MSCM.IRSPRC[2].R              /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC3         MSCM.IRSPRC[3].R              /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC4         MSCM.IRSPRC[4].R              /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC5         MSCM.IRSPRC[5].R              /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC6         MSCM.IRSPRC[6].R              /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC7         MSCM.IRSPRC[7].R              /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC8         MSCM.IRSPRC[8].R              /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC9         MSCM.IRSPRC[9].R              /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC10        MSCM.IRSPRC[10].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC11        MSCM.IRSPRC[11].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC12        MSCM.IRSPRC[12].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC13        MSCM.IRSPRC[13].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC14        MSCM.IRSPRC[14].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC15        MSCM.IRSPRC[15].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC16        MSCM.IRSPRC[16].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC17        MSCM.IRSPRC[17].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC18        MSCM.IRSPRC[18].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC19        MSCM.IRSPRC[19].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC20        MSCM.IRSPRC[20].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC21        MSCM.IRSPRC[21].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC22        MSCM.IRSPRC[22].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC23        MSCM.IRSPRC[23].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC24        MSCM.IRSPRC[24].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC25        MSCM.IRSPRC[25].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC26        MSCM.IRSPRC[26].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC27        MSCM.IRSPRC[27].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC28        MSCM.IRSPRC[28].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC29        MSCM.IRSPRC[29].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC30        MSCM.IRSPRC[30].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC31        MSCM.IRSPRC[31].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC32        MSCM.IRSPRC[32].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC33        MSCM.IRSPRC[33].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC34        MSCM.IRSPRC[34].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC35        MSCM.IRSPRC[35].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC36        MSCM.IRSPRC[36].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC37        MSCM.IRSPRC[37].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC38        MSCM.IRSPRC[38].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC39        MSCM.IRSPRC[39].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC40        MSCM.IRSPRC[40].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC41        MSCM.IRSPRC[41].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC42        MSCM.IRSPRC[42].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC43        MSCM.IRSPRC[43].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC44        MSCM.IRSPRC[44].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC45        MSCM.IRSPRC[45].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC46        MSCM.IRSPRC[46].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC47        MSCM.IRSPRC[47].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC48        MSCM.IRSPRC[48].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC49        MSCM.IRSPRC[49].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC50        MSCM.IRSPRC[50].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC51        MSCM.IRSPRC[51].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC52        MSCM.IRSPRC[52].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC53        MSCM.IRSPRC[53].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC54        MSCM.IRSPRC[54].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC55        MSCM.IRSPRC[55].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC56        MSCM.IRSPRC[56].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC57        MSCM.IRSPRC[57].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC58        MSCM.IRSPRC[58].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC59        MSCM.IRSPRC[59].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC60        MSCM.IRSPRC[60].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC61        MSCM.IRSPRC[61].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC62        MSCM.IRSPRC[62].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC63        MSCM.IRSPRC[63].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC64        MSCM.IRSPRC[64].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC65        MSCM.IRSPRC[65].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC66        MSCM.IRSPRC[66].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC67        MSCM.IRSPRC[67].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC68        MSCM.IRSPRC[68].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC69        MSCM.IRSPRC[69].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC70        MSCM.IRSPRC[70].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC71        MSCM.IRSPRC[71].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC72        MSCM.IRSPRC[72].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC73        MSCM.IRSPRC[73].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC74        MSCM.IRSPRC[74].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC75        MSCM.IRSPRC[75].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC76        MSCM.IRSPRC[76].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC77        MSCM.IRSPRC[77].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC78        MSCM.IRSPRC[78].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC79        MSCM.IRSPRC[79].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC80        MSCM.IRSPRC[80].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC81        MSCM.IRSPRC[81].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC82        MSCM.IRSPRC[82].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC83        MSCM.IRSPRC[83].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC84        MSCM.IRSPRC[84].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC85        MSCM.IRSPRC[85].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC86        MSCM.IRSPRC[86].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC87        MSCM.IRSPRC[87].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC88        MSCM.IRSPRC[88].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC89        MSCM.IRSPRC[89].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC90        MSCM.IRSPRC[90].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC91        MSCM.IRSPRC[91].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC92        MSCM.IRSPRC[92].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC93        MSCM.IRSPRC[93].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC94        MSCM.IRSPRC[94].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC95        MSCM.IRSPRC[95].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC96        MSCM.IRSPRC[96].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC97        MSCM.IRSPRC[97].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC98        MSCM.IRSPRC[98].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC99        MSCM.IRSPRC[99].R             /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC100       MSCM.IRSPRC[100].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC101       MSCM.IRSPRC[101].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC102       MSCM.IRSPRC[102].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC103       MSCM.IRSPRC[103].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC104       MSCM.IRSPRC[104].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC105       MSCM.IRSPRC[105].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC106       MSCM.IRSPRC[106].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC107       MSCM.IRSPRC[107].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC108       MSCM.IRSPRC[108].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC109       MSCM.IRSPRC[109].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC110       MSCM.IRSPRC[110].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC111       MSCM.IRSPRC[111].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC112       MSCM.IRSPRC[112].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC113       MSCM.IRSPRC[113].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC114       MSCM.IRSPRC[114].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC115       MSCM.IRSPRC[115].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC116       MSCM.IRSPRC[116].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC117       MSCM.IRSPRC[117].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC118       MSCM.IRSPRC[118].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC119       MSCM.IRSPRC[119].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC120       MSCM.IRSPRC[120].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC121       MSCM.IRSPRC[121].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC122       MSCM.IRSPRC[122].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC123       MSCM.IRSPRC[123].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC124       MSCM.IRSPRC[124].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC125       MSCM.IRSPRC[125].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC126       MSCM.IRSPRC[126].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC127       MSCM.IRSPRC[127].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC128       MSCM.IRSPRC[128].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC129       MSCM.IRSPRC[129].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC130       MSCM.IRSPRC[130].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC131       MSCM.IRSPRC[131].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC132       MSCM.IRSPRC[132].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC133       MSCM.IRSPRC[133].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC134       MSCM.IRSPRC[134].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC135       MSCM.IRSPRC[135].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC136       MSCM.IRSPRC[136].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC137       MSCM.IRSPRC[137].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC138       MSCM.IRSPRC[138].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC139       MSCM.IRSPRC[139].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC140       MSCM.IRSPRC[140].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC141       MSCM.IRSPRC[141].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC142       MSCM.IRSPRC[142].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC143       MSCM.IRSPRC[143].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC144       MSCM.IRSPRC[144].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC145       MSCM.IRSPRC[145].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC146       MSCM.IRSPRC[146].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC147       MSCM.IRSPRC[147].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC148       MSCM.IRSPRC[148].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC149       MSCM.IRSPRC[149].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC150       MSCM.IRSPRC[150].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC151       MSCM.IRSPRC[151].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC152       MSCM.IRSPRC[152].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC153       MSCM.IRSPRC[153].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC154       MSCM.IRSPRC[154].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC155       MSCM.IRSPRC[155].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC156       MSCM.IRSPRC[156].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC157       MSCM.IRSPRC[157].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC158       MSCM.IRSPRC[158].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC159       MSCM.IRSPRC[159].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC160       MSCM.IRSPRC[160].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC161       MSCM.IRSPRC[161].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC162       MSCM.IRSPRC[162].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC163       MSCM.IRSPRC[163].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC164       MSCM.IRSPRC[164].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC165       MSCM.IRSPRC[165].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC166       MSCM.IRSPRC[166].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC167       MSCM.IRSPRC[167].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC168       MSCM.IRSPRC[168].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC169       MSCM.IRSPRC[169].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC170       MSCM.IRSPRC[170].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC171       MSCM.IRSPRC[171].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC172       MSCM.IRSPRC[172].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC173       MSCM.IRSPRC[173].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC174       MSCM.IRSPRC[174].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC175       MSCM.IRSPRC[175].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC176       MSCM.IRSPRC[176].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC177       MSCM.IRSPRC[177].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC178       MSCM.IRSPRC[178].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC179       MSCM.IRSPRC[179].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC180       MSCM.IRSPRC[180].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC181       MSCM.IRSPRC[181].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC182       MSCM.IRSPRC[182].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC183       MSCM.IRSPRC[183].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC184       MSCM.IRSPRC[184].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC185       MSCM.IRSPRC[185].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC186       MSCM.IRSPRC[186].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC187       MSCM.IRSPRC[187].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC188       MSCM.IRSPRC[188].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC189       MSCM.IRSPRC[189].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC190       MSCM.IRSPRC[190].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC191       MSCM.IRSPRC[191].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC192       MSCM.IRSPRC[192].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC193       MSCM.IRSPRC[193].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC194       MSCM.IRSPRC[194].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC195       MSCM.IRSPRC[195].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC196       MSCM.IRSPRC[196].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC197       MSCM.IRSPRC[197].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC198       MSCM.IRSPRC[198].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC199       MSCM.IRSPRC[199].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC200       MSCM.IRSPRC[200].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC201       MSCM.IRSPRC[201].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC202       MSCM.IRSPRC[202].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC203       MSCM.IRSPRC[203].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC204       MSCM.IRSPRC[204].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC205       MSCM.IRSPRC[205].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC206       MSCM.IRSPRC[206].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC207       MSCM.IRSPRC[207].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC208       MSCM.IRSPRC[208].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC209       MSCM.IRSPRC[209].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC210       MSCM.IRSPRC[210].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC211       MSCM.IRSPRC[211].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC212       MSCM.IRSPRC[212].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC213       MSCM.IRSPRC[213].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC214       MSCM.IRSPRC[214].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC215       MSCM.IRSPRC[215].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC216       MSCM.IRSPRC[216].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC217       MSCM.IRSPRC[217].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC218       MSCM.IRSPRC[218].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC219       MSCM.IRSPRC[219].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC220       MSCM.IRSPRC[220].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC221       MSCM.IRSPRC[221].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC222       MSCM.IRSPRC[222].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC223       MSCM.IRSPRC[223].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC224       MSCM.IRSPRC[224].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC225       MSCM.IRSPRC[225].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC226       MSCM.IRSPRC[226].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC227       MSCM.IRSPRC[227].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC228       MSCM.IRSPRC[228].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC229       MSCM.IRSPRC[229].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC230       MSCM.IRSPRC[230].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC231       MSCM.IRSPRC[231].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC232       MSCM.IRSPRC[232].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC233       MSCM.IRSPRC[233].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC234       MSCM.IRSPRC[234].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC235       MSCM.IRSPRC[235].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC236       MSCM.IRSPRC[236].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC237       MSCM.IRSPRC[237].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC238       MSCM.IRSPRC[238].R            /* Interrupt Router Shared Peripheral Routing Control */
#define MSCM_IRSPRC239       MSCM.IRSPRC[239].R            /* Interrupt Router Shared Peripheral Routing Control */

/* MU */
#define MU_2__MUA_VER        MU_2__MUA.VER.R               /* Version ID Register */
#define MU_2__MUA_PAR        MU_2__MUA.PAR.R               /* Parameter Register */
#define MU_2__MUA_CR         MU_2__MUA.CR.R                /* Control Register */
#define MU_2__MUA_SR         MU_2__MUA.SR.R                /* Status Register */
#define MU_2__MUA_FCR        MU_2__MUA.FCR.R               /* Flag Control Register */
#define MU_2__MUA_FSR        MU_2__MUA.FSR.R               /* Flag Status Register */
#define MU_2__MUA_GIER       MU_2__MUA.GIER.R              /* General Interrupt Enable Register */
#define MU_2__MUA_GCR        MU_2__MUA.GCR.R               /* General Control Register */
#define MU_2__MUA_GSR        MU_2__MUA.GSR.R               /* General Status Register */
#define MU_2__MUA_TCR        MU_2__MUA.TCR.R               /* Transmit Control Register */
#define MU_2__MUA_TSR        MU_2__MUA.TSR.R               /* Transmit Status Register */
#define MU_2__MUA_RCR        MU_2__MUA.RCR.R               /* Receive Control Register */
#define MU_2__MUA_RSR        MU_2__MUA.RSR.R               /* Receive Status Register */
#define MU_2__MUA_TR0        MU_2__MUA.TR[0].R             /* Transmit Register */
#define MU_2__MUA_TR1        MU_2__MUA.TR[1].R             /* Transmit Register */
#define MU_2__MUA_TR2        MU_2__MUA.TR[2].R             /* Transmit Register */
#define MU_2__MUA_TR3        MU_2__MUA.TR[3].R             /* Transmit Register */
#define MU_2__MUA_RR0        MU_2__MUA.RR[0].R             /* Receive Register */
#define MU_2__MUA_RR1        MU_2__MUA.RR[1].R             /* Receive Register */
#define MU_2__MUA_RR2        MU_2__MUA.RR[2].R             /* Receive Register */
#define MU_2__MUA_RR3        MU_2__MUA.RR[3].R             /* Receive Register */

#define MU_0__MUB_VER        MU_0__MUB.VER.R               /* Version ID Register */
#define MU_0__MUB_PAR        MU_0__MUB.PAR.R               /* Parameter Register */
#define MU_0__MUB_CR         MU_0__MUB.CR.R                /* Control Register */
#define MU_0__MUB_SR         MU_0__MUB.SR.R                /* Status Register */
#define MU_0__MUB_CCR0       MU_0__MUB.CCR0.R              /* Core Control Register 0 */
#define MU_0__MUB_CSSR0      MU_0__MUB.CSSR0.R             /* Core Sticky Status Register 0 */
#define MU_0__MUB_FCR        MU_0__MUB.FCR.R               /* Flag Control Register */
#define MU_0__MUB_FSR        MU_0__MUB.FSR.R               /* Flag Status Register */
#define MU_0__MUB_GIER       MU_0__MUB.GIER.R              /* General Interrupt Enable Register */
#define MU_0__MUB_GCR        MU_0__MUB.GCR.R               /* General Control Register */
#define MU_0__MUB_GSR        MU_0__MUB.GSR.R               /* General Status Register */
#define MU_0__MUB_TCR        MU_0__MUB.TCR.R               /* Transmit Control Register */
#define MU_0__MUB_TSR        MU_0__MUB.TSR.R               /* Transmit Status Register */
#define MU_0__MUB_RCR        MU_0__MUB.RCR.R               /* Receive Control Register */
#define MU_0__MUB_RSR        MU_0__MUB.RSR.R               /* Receive Status Register */
#define MU_0__MUB_TR0        MU_0__MUB.TR[0].R             /* Transmit Register */
#define MU_0__MUB_TR1        MU_0__MUB.TR[1].R             /* Transmit Register */
#define MU_0__MUB_TR2        MU_0__MUB.TR[2].R             /* Transmit Register */
#define MU_0__MUB_TR3        MU_0__MUB.TR[3].R             /* Transmit Register */
#define MU_0__MUB_RR0        MU_0__MUB.RR[0].R             /* Receive Register */
#define MU_0__MUB_RR1        MU_0__MUB.RR[1].R             /* Receive Register */
#define MU_0__MUB_RR2        MU_0__MUB.RR[2].R             /* Receive Register */
#define MU_0__MUB_RR3        MU_0__MUB.RR[3].R             /* Receive Register */

#define MU_1__MUB_VER        MU_1__MUB.VER.R               /* Version ID Register */
#define MU_1__MUB_PAR        MU_1__MUB.PAR.R               /* Parameter Register */
#define MU_1__MUB_CR         MU_1__MUB.CR.R                /* Control Register */
#define MU_1__MUB_SR         MU_1__MUB.SR.R                /* Status Register */
#define MU_1__MUB_CCR0       MU_1__MUB.CCR0.R              /* Core Control Register 0 */
#define MU_1__MUB_CSSR0      MU_1__MUB.CSSR0.R             /* Core Sticky Status Register 0 */
#define MU_1__MUB_FCR        MU_1__MUB.FCR.R               /* Flag Control Register */
#define MU_1__MUB_FSR        MU_1__MUB.FSR.R               /* Flag Status Register */
#define MU_1__MUB_GIER       MU_1__MUB.GIER.R              /* General Interrupt Enable Register */
#define MU_1__MUB_GCR        MU_1__MUB.GCR.R               /* General Control Register */
#define MU_1__MUB_GSR        MU_1__MUB.GSR.R               /* General Status Register */
#define MU_1__MUB_TCR        MU_1__MUB.TCR.R               /* Transmit Control Register */
#define MU_1__MUB_TSR        MU_1__MUB.TSR.R               /* Transmit Status Register */
#define MU_1__MUB_RCR        MU_1__MUB.RCR.R               /* Receive Control Register */
#define MU_1__MUB_RSR        MU_1__MUB.RSR.R               /* Receive Status Register */
#define MU_1__MUB_TR0        MU_1__MUB.TR[0].R             /* Transmit Register */
#define MU_1__MUB_TR1        MU_1__MUB.TR[1].R             /* Transmit Register */
#define MU_1__MUB_TR2        MU_1__MUB.TR[2].R             /* Transmit Register */
#define MU_1__MUB_TR3        MU_1__MUB.TR[3].R             /* Transmit Register */
#define MU_1__MUB_RR0        MU_1__MUB.RR[0].R             /* Receive Register */
#define MU_1__MUB_RR1        MU_1__MUB.RR[1].R             /* Receive Register */
#define MU_1__MUB_RR2        MU_1__MUB.RR[2].R             /* Receive Register */
#define MU_1__MUB_RR3        MU_1__MUB.RR[3].R             /* Receive Register */

#define MU_2__MUB_VER        MU_2__MUB.VER.R               /* Version ID Register */
#define MU_2__MUB_PAR        MU_2__MUB.PAR.R               /* Parameter Register */
#define MU_2__MUB_CR         MU_2__MUB.CR.R                /* Control Register */
#define MU_2__MUB_SR         MU_2__MUB.SR.R                /* Status Register */
#define MU_2__MUB_FCR        MU_2__MUB.FCR.R               /* Flag Control Register */
#define MU_2__MUB_FSR        MU_2__MUB.FSR.R               /* Flag Status Register */
#define MU_2__MUB_GIER       MU_2__MUB.GIER.R              /* General Interrupt Enable Register */
#define MU_2__MUB_GCR        MU_2__MUB.GCR.R               /* General Control Register */
#define MU_2__MUB_GSR        MU_2__MUB.GSR.R               /* General Status Register */
#define MU_2__MUB_TCR        MU_2__MUB.TCR.R               /* Transmit Control Register */
#define MU_2__MUB_TSR        MU_2__MUB.TSR.R               /* Transmit Status Register */
#define MU_2__MUB_RCR        MU_2__MUB.RCR.R               /* Receive Control Register */
#define MU_2__MUB_RSR        MU_2__MUB.RSR.R               /* Receive Status Register */
#define MU_2__MUB_TR0        MU_2__MUB.TR[0].R             /* Transmit Register */
#define MU_2__MUB_TR1        MU_2__MUB.TR[1].R             /* Transmit Register */
#define MU_2__MUB_TR2        MU_2__MUB.TR[2].R             /* Transmit Register */
#define MU_2__MUB_TR3        MU_2__MUB.TR[3].R             /* Transmit Register */
#define MU_2__MUB_RR0        MU_2__MUB.RR[0].R             /* Receive Register */
#define MU_2__MUB_RR1        MU_2__MUB.RR[1].R             /* Receive Register */
#define MU_2__MUB_RR2        MU_2__MUB.RR[2].R             /* Receive Register */
#define MU_2__MUB_RR3        MU_2__MUB.RR[3].R             /* Receive Register */

/* PFLASH */
#define PFLASH_PFCR0         PFLASH.PFCR[0].R              /* Platform Flash Memory Configuration 0 */
#define PFLASH_PFCR1         PFLASH.PFCR[1].R              /* Platform Flash Memory Configuration 1 */
#define PFLASH_PFCR2         PFLASH.PFCR[2].R              /* Platform Flash Memory Configuration 2 */
#define PFLASH_PFCR4         PFLASH.PFCR4.R                /* Platform Flash Memory Configuration 4 */
#define PFLASH_PFAPR         PFLASH.PFAPR.R                /* Platform Flash Memory Access Protection */
#define PFLASH_PFCPGM_PEADR_L PFLASH.PFCPGM_PEADR_L.R      /* Platform Flash Memory Program Erase Address Logical */
#define PFLASH_PFCPGM_PEADR_P PFLASH.PFCPGM_PEADR_P.R      /* Platform Flash Memory Program Erase Address Physical */
#define PFLASH_PFCPGM_XPEADR_L PFLASH.PFCPGM_XPEADR_L.R    /* Platform Flash Memory Express Program Erase Address Logical */
#define PFLASH_PFCPGM_XPEADR_P PFLASH.PFCPGM_XPEADR_P.R    /* Platform Flash Memory Express Program Erase Address Physical */
#define PFLASH_PFCPGM_APEADR_L PFLASH.PFCPGM_APEADR_L.R    /* Platform Flash Memory Alternate Program Erase Address Logical */
#define PFLASH_PFCPGM_APEADR_P PFLASH.PFCPGM_APEADR_P.R    /* Platform Flash Memory Alternate Program Erase Address Physical */
#define PFLASH_PFCBLK0_SPELOCK PFLASH.PFCBLK_SPELOCK[0].R  /* Block n Sector Program Erase Lock */
#define PFLASH_PFCBLK1_SPELOCK PFLASH.PFCBLK_SPELOCK[1].R  /* Block n Sector Program Erase Lock */
#define PFLASH_PFCBLK2_SPELOCK PFLASH.PFCBLK_SPELOCK[2].R  /* Block n Sector Program Erase Lock */
#define PFLASH_PFCBLK3_SPELOCK PFLASH.PFCBLK_SPELOCK[3].R  /* Block n Sector Program Erase Lock */
#define PFLASH_PFCBLK4_SPELOCK PFLASH.PFCBLK_SPELOCK[4].R  /* Block n Sector Program Erase Lock */
#define PFLASH_PFCBLKU_SPELOCK PFLASH.PFCBLKU_SPELOCK[0].R /* Block UTEST Sector Program Erase Lock */
#define PFLASH_PFCBLK0_SSPELOCK PFLASH.PFCBLK_SSPELOCK[0].R /* Block n Super Sector Program Erase Lock */
#define PFLASH_PFCBLK1_SSPELOCK PFLASH.PFCBLK_SSPELOCK[1].R /* Block n Super Sector Program Erase Lock */
#define PFLASH_PFCBLK2_SSPELOCK PFLASH.PFCBLK_SSPELOCK[2].R /* Block n Super Sector Program Erase Lock */
#define PFLASH_PFCBLK3_SSPELOCK PFLASH.PFCBLK_SSPELOCK[3].R /* Block n Super Sector Program Erase Lock */
#define PFLASH_PFCDBLK4_SSPELOCK PFLASH.PFCDBLK_SSPELOCK[0].R /* Block n Super Sector Program Erase Lock */
#define PFLASH_PFCBLK0_SETSLOCK PFLASH.PFCBLK_SETSLOCK[0].R /* Block n Set Sector Lock */
#define PFLASH_PFCBLK1_SETSLOCK PFLASH.PFCBLK_SETSLOCK[1].R /* Block n Set Sector Lock */
#define PFLASH_PFCBLK2_SETSLOCK PFLASH.PFCBLK_SETSLOCK[2].R /* Block n Set Sector Lock */
#define PFLASH_PFCBLK3_SETSLOCK PFLASH.PFCBLK_SETSLOCK[3].R /* Block n Set Sector Lock */
#define PFLASH_PFCBLK4_SETSLOCK PFLASH.PFCBLK_SETSLOCK[4].R /* Block n Set Sector Lock */
#define PFLASH_PFCBLKU_SETSLOCK PFLASH.PFCBLKU_SETSLOCK[0].R /* Block UTEST Set Sector Lock */
#define PFLASH_PFCBLK0_SSETSLOCK PFLASH.PFCBLK_SSETSLOCK[0].R /* Block n Set Super Sector Lock */
#define PFLASH_PFCBLK1_SSETSLOCK PFLASH.PFCBLK_SSETSLOCK[1].R /* Block n Set Super Sector Lock */
#define PFLASH_PFCBLK2_SSETSLOCK PFLASH.PFCBLK_SSETSLOCK[2].R /* Block n Set Super Sector Lock */
#define PFLASH_PFCBLK3_SSETSLOCK PFLASH.PFCBLK_SSETSLOCK[3].R /* Block n Set Super Sector Lock */
#define PFLASH_PFCDBLK4_SSETSLOCK PFLASH.PFCDBLK_SSETSLOCK[0].R /* Block n Set Super Sector Lock */
#define PFLASH_PFCBLK0_LOCKMASTER_S0 PFLASH.PFCBLK_LOCKMASTER_S[0][0].R /* Block a Lock Master Sectorb */
#define PFLASH_PFCBLK0_LOCKMASTER_S1 PFLASH.PFCBLK_LOCKMASTER_S[0][1].R /* Block a Lock Master Sectorb */
#define PFLASH_PFCBLK0_LOCKMASTER_S2 PFLASH.PFCBLK_LOCKMASTER_S[0][2].R /* Block a Lock Master Sectorb */
#define PFLASH_PFCBLK0_LOCKMASTER_S3 PFLASH.PFCBLK_LOCKMASTER_S[0][3].R /* Block a Lock Master Sectorb */
#define PFLASH_PFCBLK0_LOCKMASTER_S4 PFLASH.PFCBLK_LOCKMASTER_S[0][4].R /* Block a Lock Master Sectorb */
#define PFLASH_PFCBLK0_LOCKMASTER_S5 PFLASH.PFCBLK_LOCKMASTER_S[0][5].R /* Block a Lock Master Sectorb */
#define PFLASH_PFCBLK0_LOCKMASTER_S6 PFLASH.PFCBLK_LOCKMASTER_S[0][6].R /* Block a Lock Master Sectorb */
#define PFLASH_PFCBLK0_LOCKMASTER_S7 PFLASH.PFCBLK_LOCKMASTER_S[0][7].R /* Block a Lock Master Sectorb */
#define PFLASH_PFCBLK1_LOCKMASTER_S0 PFLASH.PFCBLK_LOCKMASTER_S[1][0].R /* Block a Lock Master Sectorb */
#define PFLASH_PFCBLK1_LOCKMASTER_S1 PFLASH.PFCBLK_LOCKMASTER_S[1][1].R /* Block a Lock Master Sectorb */
#define PFLASH_PFCBLK1_LOCKMASTER_S2 PFLASH.PFCBLK_LOCKMASTER_S[1][2].R /* Block a Lock Master Sectorb */
#define PFLASH_PFCBLK1_LOCKMASTER_S3 PFLASH.PFCBLK_LOCKMASTER_S[1][3].R /* Block a Lock Master Sectorb */
#define PFLASH_PFCBLK1_LOCKMASTER_S4 PFLASH.PFCBLK_LOCKMASTER_S[1][4].R /* Block a Lock Master Sectorb */
#define PFLASH_PFCBLK1_LOCKMASTER_S5 PFLASH.PFCBLK_LOCKMASTER_S[1][5].R /* Block a Lock Master Sectorb */
#define PFLASH_PFCBLK1_LOCKMASTER_S6 PFLASH.PFCBLK_LOCKMASTER_S[1][6].R /* Block a Lock Master Sectorb */
#define PFLASH_PFCBLK1_LOCKMASTER_S7 PFLASH.PFCBLK_LOCKMASTER_S[1][7].R /* Block a Lock Master Sectorb */
#define PFLASH_PFCBLK2_LOCKMASTER_S0 PFLASH.PFCBLK_LOCKMASTER_S[2][0].R /* Block a Lock Master Sectorb */
#define PFLASH_PFCBLK2_LOCKMASTER_S1 PFLASH.PFCBLK_LOCKMASTER_S[2][1].R /* Block a Lock Master Sectorb */
#define PFLASH_PFCBLK2_LOCKMASTER_S2 PFLASH.PFCBLK_LOCKMASTER_S[2][2].R /* Block a Lock Master Sectorb */
#define PFLASH_PFCBLK2_LOCKMASTER_S3 PFLASH.PFCBLK_LOCKMASTER_S[2][3].R /* Block a Lock Master Sectorb */
#define PFLASH_PFCBLK2_LOCKMASTER_S4 PFLASH.PFCBLK_LOCKMASTER_S[2][4].R /* Block a Lock Master Sectorb */
#define PFLASH_PFCBLK2_LOCKMASTER_S5 PFLASH.PFCBLK_LOCKMASTER_S[2][5].R /* Block a Lock Master Sectorb */
#define PFLASH_PFCBLK2_LOCKMASTER_S6 PFLASH.PFCBLK_LOCKMASTER_S[2][6].R /* Block a Lock Master Sectorb */
#define PFLASH_PFCBLK2_LOCKMASTER_S7 PFLASH.PFCBLK_LOCKMASTER_S[2][7].R /* Block a Lock Master Sectorb */
#define PFLASH_PFCBLK3_LOCKMASTER_S0 PFLASH.PFCBLK_LOCKMASTER_S[3][0].R /* Block a Lock Master Sectorb */
#define PFLASH_PFCBLK3_LOCKMASTER_S1 PFLASH.PFCBLK_LOCKMASTER_S[3][1].R /* Block a Lock Master Sectorb */
#define PFLASH_PFCBLK3_LOCKMASTER_S2 PFLASH.PFCBLK_LOCKMASTER_S[3][2].R /* Block a Lock Master Sectorb */
#define PFLASH_PFCBLK3_LOCKMASTER_S3 PFLASH.PFCBLK_LOCKMASTER_S[3][3].R /* Block a Lock Master Sectorb */
#define PFLASH_PFCBLK3_LOCKMASTER_S4 PFLASH.PFCBLK_LOCKMASTER_S[3][4].R /* Block a Lock Master Sectorb */
#define PFLASH_PFCBLK3_LOCKMASTER_S5 PFLASH.PFCBLK_LOCKMASTER_S[3][5].R /* Block a Lock Master Sectorb */
#define PFLASH_PFCBLK3_LOCKMASTER_S6 PFLASH.PFCBLK_LOCKMASTER_S[3][6].R /* Block a Lock Master Sectorb */
#define PFLASH_PFCBLK3_LOCKMASTER_S7 PFLASH.PFCBLK_LOCKMASTER_S[3][7].R /* Block a Lock Master Sectorb */
#define PFLASH_PFCBLK4_LOCKMASTER_S0 PFLASH.PFCBLK_LOCKMASTER_S[4][0].R /* Block a Lock Master Sectorb */
#define PFLASH_PFCBLK4_LOCKMASTER_S1 PFLASH.PFCBLK_LOCKMASTER_S[4][1].R /* Block a Lock Master Sectorb */
#define PFLASH_PFCBLK4_LOCKMASTER_S2 PFLASH.PFCBLK_LOCKMASTER_S[4][2].R /* Block a Lock Master Sectorb */
#define PFLASH_PFCBLK4_LOCKMASTER_S3 PFLASH.PFCBLK_LOCKMASTER_S[4][3].R /* Block a Lock Master Sectorb */
#define PFLASH_PFCBLK4_LOCKMASTER_S4 PFLASH.PFCBLK_LOCKMASTER_S[4][4].R /* Block a Lock Master Sectorb */
#define PFLASH_PFCBLK4_LOCKMASTER_S5 PFLASH.PFCBLK_LOCKMASTER_S[4][5].R /* Block a Lock Master Sectorb */
#define PFLASH_PFCBLK4_LOCKMASTER_S6 PFLASH.PFCBLK_LOCKMASTER_S[4][6].R /* Block a Lock Master Sectorb */
#define PFLASH_PFCBLK4_LOCKMASTER_S7 PFLASH.PFCBLK_LOCKMASTER_S[4][7].R /* Block a Lock Master Sectorb */
#define PFLASH_PFCBLKU_LOCKMASTER_S PFLASH.PFCBLKU_LOCKMASTER_S[0].R /* Block UTEST Lock Master Sector */
#define PFLASH_PFCBLK0_LOCKMASTER_SS0 PFLASH.PFCBLK0_LOCKMASTER_SS0.R /* Block m Lock Master Super Sector n */
#define PFLASH_PFCBLK0_LOCKMASTER_SS1 PFLASH.PFCBLK0_LOCKMASTER_SS1.R /* Block m Lock Master Super Sector n */
#define PFLASH_PFCBLK0_LOCKMASTER_SS2 PFLASH.PFCBLK0_LOCKMASTER_SS2.R /* Block m Lock Master Super Sector n */
#define PFLASH_PFCBLK1_LOCKMASTER_SS0 PFLASH.PFCBLK1_LOCKMASTER_SS0.R /* Block m Lock Master Super Sector n */
#define PFLASH_PFCBLK1_LOCKMASTER_SS1 PFLASH.PFCBLK1_LOCKMASTER_SS1.R /* Block m Lock Master Super Sector n */
#define PFLASH_PFCBLK1_LOCKMASTER_SS2 PFLASH.PFCBLK1_LOCKMASTER_SS2.R /* Block m Lock Master Super Sector n */
#define PFLASH_PFCBLK2_LOCKMASTER_SS0 PFLASH.PFCBLK2_LOCKMASTER_SS0.R /* Block m Lock Master Super Sector n */
#define PFLASH_PFCBLK2_LOCKMASTER_SS1 PFLASH.PFCBLK2_LOCKMASTER_SS1.R /* Block m Lock Master Super Sector n */
#define PFLASH_PFCBLK2_LOCKMASTER_SS2 PFLASH.PFCBLK2_LOCKMASTER_SS2.R /* Block m Lock Master Super Sector n */
#define PFLASH_PFCBLK3_LOCKMASTER_SS0 PFLASH.PFCBLK3_LOCKMASTER_SS0.R /* Block m Lock Master Super Sector n */
#define PFLASH_PFCBLK3_LOCKMASTER_SS1 PFLASH.PFCBLK3_LOCKMASTER_SS1.R /* Block m Lock Master Super Sector n */
#define PFLASH_PFCBLK3_LOCKMASTER_SS2 PFLASH.PFCBLK3_LOCKMASTER_SS2.R /* Block m Lock Master Super Sector n */
#define PFLASH_PFCBLK4_LOCKMASTER_SS0 PFLASH.PFCBLK4_LOCKMASTER_SS0.R /* Block m Lock Master Super Sector n */

#define PFLASH_ALT_PFCR0     PFLASH_ALT.PFCR[0].R          /* Platform Flash Memory Configuration 0 */
#define PFLASH_ALT_PFCR1     PFLASH_ALT.PFCR[1].R          /* Platform Flash Memory Configuration 1 */
#define PFLASH_ALT_PFCR2     PFLASH_ALT.PFCR[2].R          /* Platform Flash Memory Configuration 2 */
#define PFLASH_ALT_PFCR4     PFLASH_ALT.PFCR4.R            /* Platform Flash Memory Configuration 4 */
#define PFLASH_ALT_PFAPR     PFLASH_ALT.PFAPR.R            /* Platform Flash Memory Access Protection */
#define PFLASH_ALT_PFCPGM_PEADR_L PFLASH_ALT.PFCPGM_PEADR_L.R /* Platform Flash Memory Program Erase Address Logical */
#define PFLASH_ALT_PFCPGM_PEADR_P PFLASH_ALT.PFCPGM_PEADR_P.R /* Platform Flash Memory Program Erase Address Physical */
#define PFLASH_ALT_PFCPGM_XPEADR_L PFLASH_ALT.PFCPGM_XPEADR_L.R /* Platform Flash Memory Express Program Erase Address Logical */
#define PFLASH_ALT_PFCPGM_XPEADR_P PFLASH_ALT.PFCPGM_XPEADR_P.R /* Platform Flash Memory Express Program Erase Address Physical */
#define PFLASH_ALT_PFCPGM_APEADR_L PFLASH_ALT.PFCPGM_APEADR_L.R /* Platform Flash Memory Alternate Program Erase Address Logical */
#define PFLASH_ALT_PFCPGM_APEADR_P PFLASH_ALT.PFCPGM_APEADR_P.R /* Platform Flash Memory Alternate Program Erase Address Physical */
#define PFLASH_ALT_PFCBLK0_SPELOCK PFLASH_ALT.PFCBLK_SPELOCK[0].R /* Block n Sector Program Erase Lock */
#define PFLASH_ALT_PFCBLK1_SPELOCK PFLASH_ALT.PFCBLK_SPELOCK[1].R /* Block n Sector Program Erase Lock */
#define PFLASH_ALT_PFCBLK2_SPELOCK PFLASH_ALT.PFCBLK_SPELOCK[2].R /* Block n Sector Program Erase Lock */
#define PFLASH_ALT_PFCBLK3_SPELOCK PFLASH_ALT.PFCBLK_SPELOCK[3].R /* Block n Sector Program Erase Lock */
#define PFLASH_ALT_PFCBLK4_SPELOCK PFLASH_ALT.PFCBLK_SPELOCK[4].R /* Block n Sector Program Erase Lock */
#define PFLASH_ALT_PFCBLKU_SPELOCK PFLASH_ALT.PFCBLKU_SPELOCK[0].R /* Block UTEST Sector Program Erase Lock */
#define PFLASH_ALT_PFCBLK0_SSPELOCK PFLASH_ALT.PFCBLK_SSPELOCK[0].R /* Block n Super Sector Program Erase Lock */
#define PFLASH_ALT_PFCBLK1_SSPELOCK PFLASH_ALT.PFCBLK_SSPELOCK[1].R /* Block n Super Sector Program Erase Lock */
#define PFLASH_ALT_PFCBLK2_SSPELOCK PFLASH_ALT.PFCBLK_SSPELOCK[2].R /* Block n Super Sector Program Erase Lock */
#define PFLASH_ALT_PFCBLK3_SSPELOCK PFLASH_ALT.PFCBLK_SSPELOCK[3].R /* Block n Super Sector Program Erase Lock */
#define PFLASH_ALT_PFCDBLK4_SSPELOCK PFLASH_ALT.PFCDBLK_SSPELOCK[0].R /* Block n Super Sector Program Erase Lock */
#define PFLASH_ALT_PFCBLK0_SETSLOCK PFLASH_ALT.PFCBLK_SETSLOCK[0].R /* Block n Set Sector Lock */
#define PFLASH_ALT_PFCBLK1_SETSLOCK PFLASH_ALT.PFCBLK_SETSLOCK[1].R /* Block n Set Sector Lock */
#define PFLASH_ALT_PFCBLK2_SETSLOCK PFLASH_ALT.PFCBLK_SETSLOCK[2].R /* Block n Set Sector Lock */
#define PFLASH_ALT_PFCBLK3_SETSLOCK PFLASH_ALT.PFCBLK_SETSLOCK[3].R /* Block n Set Sector Lock */
#define PFLASH_ALT_PFCBLK4_SETSLOCK PFLASH_ALT.PFCBLK_SETSLOCK[4].R /* Block n Set Sector Lock */
#define PFLASH_ALT_PFCBLKU_SETSLOCK PFLASH_ALT.PFCBLKU_SETSLOCK[0].R /* Block UTEST Set Sector Lock */
#define PFLASH_ALT_PFCBLK0_SSETSLOCK PFLASH_ALT.PFCBLK_SSETSLOCK[0].R /* Block n Set Super Sector Lock */
#define PFLASH_ALT_PFCBLK1_SSETSLOCK PFLASH_ALT.PFCBLK_SSETSLOCK[1].R /* Block n Set Super Sector Lock */
#define PFLASH_ALT_PFCBLK2_SSETSLOCK PFLASH_ALT.PFCBLK_SSETSLOCK[2].R /* Block n Set Super Sector Lock */
#define PFLASH_ALT_PFCBLK3_SSETSLOCK PFLASH_ALT.PFCBLK_SSETSLOCK[3].R /* Block n Set Super Sector Lock */
#define PFLASH_ALT_PFCDBLK4_SSETSLOCK PFLASH_ALT.PFCDBLK_SSETSLOCK[0].R /* Block n Set Super Sector Lock */
#define PFLASH_ALT_PFCBLK0_LOCKMASTER_S0 PFLASH_ALT.PFCBLK_LOCKMASTER_S[0][0].R /* Block a Lock Master Sectorb */
#define PFLASH_ALT_PFCBLK0_LOCKMASTER_S1 PFLASH_ALT.PFCBLK_LOCKMASTER_S[0][1].R /* Block a Lock Master Sectorb */
#define PFLASH_ALT_PFCBLK0_LOCKMASTER_S2 PFLASH_ALT.PFCBLK_LOCKMASTER_S[0][2].R /* Block a Lock Master Sectorb */
#define PFLASH_ALT_PFCBLK0_LOCKMASTER_S3 PFLASH_ALT.PFCBLK_LOCKMASTER_S[0][3].R /* Block a Lock Master Sectorb */
#define PFLASH_ALT_PFCBLK0_LOCKMASTER_S4 PFLASH_ALT.PFCBLK_LOCKMASTER_S[0][4].R /* Block a Lock Master Sectorb */
#define PFLASH_ALT_PFCBLK0_LOCKMASTER_S5 PFLASH_ALT.PFCBLK_LOCKMASTER_S[0][5].R /* Block a Lock Master Sectorb */
#define PFLASH_ALT_PFCBLK0_LOCKMASTER_S6 PFLASH_ALT.PFCBLK_LOCKMASTER_S[0][6].R /* Block a Lock Master Sectorb */
#define PFLASH_ALT_PFCBLK0_LOCKMASTER_S7 PFLASH_ALT.PFCBLK_LOCKMASTER_S[0][7].R /* Block a Lock Master Sectorb */
#define PFLASH_ALT_PFCBLK1_LOCKMASTER_S0 PFLASH_ALT.PFCBLK_LOCKMASTER_S[1][0].R /* Block a Lock Master Sectorb */
#define PFLASH_ALT_PFCBLK1_LOCKMASTER_S1 PFLASH_ALT.PFCBLK_LOCKMASTER_S[1][1].R /* Block a Lock Master Sectorb */
#define PFLASH_ALT_PFCBLK1_LOCKMASTER_S2 PFLASH_ALT.PFCBLK_LOCKMASTER_S[1][2].R /* Block a Lock Master Sectorb */
#define PFLASH_ALT_PFCBLK1_LOCKMASTER_S3 PFLASH_ALT.PFCBLK_LOCKMASTER_S[1][3].R /* Block a Lock Master Sectorb */
#define PFLASH_ALT_PFCBLK1_LOCKMASTER_S4 PFLASH_ALT.PFCBLK_LOCKMASTER_S[1][4].R /* Block a Lock Master Sectorb */
#define PFLASH_ALT_PFCBLK1_LOCKMASTER_S5 PFLASH_ALT.PFCBLK_LOCKMASTER_S[1][5].R /* Block a Lock Master Sectorb */
#define PFLASH_ALT_PFCBLK1_LOCKMASTER_S6 PFLASH_ALT.PFCBLK_LOCKMASTER_S[1][6].R /* Block a Lock Master Sectorb */
#define PFLASH_ALT_PFCBLK1_LOCKMASTER_S7 PFLASH_ALT.PFCBLK_LOCKMASTER_S[1][7].R /* Block a Lock Master Sectorb */
#define PFLASH_ALT_PFCBLK2_LOCKMASTER_S0 PFLASH_ALT.PFCBLK_LOCKMASTER_S[2][0].R /* Block a Lock Master Sectorb */
#define PFLASH_ALT_PFCBLK2_LOCKMASTER_S1 PFLASH_ALT.PFCBLK_LOCKMASTER_S[2][1].R /* Block a Lock Master Sectorb */
#define PFLASH_ALT_PFCBLK2_LOCKMASTER_S2 PFLASH_ALT.PFCBLK_LOCKMASTER_S[2][2].R /* Block a Lock Master Sectorb */
#define PFLASH_ALT_PFCBLK2_LOCKMASTER_S3 PFLASH_ALT.PFCBLK_LOCKMASTER_S[2][3].R /* Block a Lock Master Sectorb */
#define PFLASH_ALT_PFCBLK2_LOCKMASTER_S4 PFLASH_ALT.PFCBLK_LOCKMASTER_S[2][4].R /* Block a Lock Master Sectorb */
#define PFLASH_ALT_PFCBLK2_LOCKMASTER_S5 PFLASH_ALT.PFCBLK_LOCKMASTER_S[2][5].R /* Block a Lock Master Sectorb */
#define PFLASH_ALT_PFCBLK2_LOCKMASTER_S6 PFLASH_ALT.PFCBLK_LOCKMASTER_S[2][6].R /* Block a Lock Master Sectorb */
#define PFLASH_ALT_PFCBLK2_LOCKMASTER_S7 PFLASH_ALT.PFCBLK_LOCKMASTER_S[2][7].R /* Block a Lock Master Sectorb */
#define PFLASH_ALT_PFCBLK3_LOCKMASTER_S0 PFLASH_ALT.PFCBLK_LOCKMASTER_S[3][0].R /* Block a Lock Master Sectorb */
#define PFLASH_ALT_PFCBLK3_LOCKMASTER_S1 PFLASH_ALT.PFCBLK_LOCKMASTER_S[3][1].R /* Block a Lock Master Sectorb */
#define PFLASH_ALT_PFCBLK3_LOCKMASTER_S2 PFLASH_ALT.PFCBLK_LOCKMASTER_S[3][2].R /* Block a Lock Master Sectorb */
#define PFLASH_ALT_PFCBLK3_LOCKMASTER_S3 PFLASH_ALT.PFCBLK_LOCKMASTER_S[3][3].R /* Block a Lock Master Sectorb */
#define PFLASH_ALT_PFCBLK3_LOCKMASTER_S4 PFLASH_ALT.PFCBLK_LOCKMASTER_S[3][4].R /* Block a Lock Master Sectorb */
#define PFLASH_ALT_PFCBLK3_LOCKMASTER_S5 PFLASH_ALT.PFCBLK_LOCKMASTER_S[3][5].R /* Block a Lock Master Sectorb */
#define PFLASH_ALT_PFCBLK3_LOCKMASTER_S6 PFLASH_ALT.PFCBLK_LOCKMASTER_S[3][6].R /* Block a Lock Master Sectorb */
#define PFLASH_ALT_PFCBLK3_LOCKMASTER_S7 PFLASH_ALT.PFCBLK_LOCKMASTER_S[3][7].R /* Block a Lock Master Sectorb */
#define PFLASH_ALT_PFCBLK4_LOCKMASTER_S0 PFLASH_ALT.PFCBLK_LOCKMASTER_S[4][0].R /* Block a Lock Master Sectorb */
#define PFLASH_ALT_PFCBLK4_LOCKMASTER_S1 PFLASH_ALT.PFCBLK_LOCKMASTER_S[4][1].R /* Block a Lock Master Sectorb */
#define PFLASH_ALT_PFCBLK4_LOCKMASTER_S2 PFLASH_ALT.PFCBLK_LOCKMASTER_S[4][2].R /* Block a Lock Master Sectorb */
#define PFLASH_ALT_PFCBLK4_LOCKMASTER_S3 PFLASH_ALT.PFCBLK_LOCKMASTER_S[4][3].R /* Block a Lock Master Sectorb */
#define PFLASH_ALT_PFCBLK4_LOCKMASTER_S4 PFLASH_ALT.PFCBLK_LOCKMASTER_S[4][4].R /* Block a Lock Master Sectorb */
#define PFLASH_ALT_PFCBLK4_LOCKMASTER_S5 PFLASH_ALT.PFCBLK_LOCKMASTER_S[4][5].R /* Block a Lock Master Sectorb */
#define PFLASH_ALT_PFCBLK4_LOCKMASTER_S6 PFLASH_ALT.PFCBLK_LOCKMASTER_S[4][6].R /* Block a Lock Master Sectorb */
#define PFLASH_ALT_PFCBLK4_LOCKMASTER_S7 PFLASH_ALT.PFCBLK_LOCKMASTER_S[4][7].R /* Block a Lock Master Sectorb */
#define PFLASH_ALT_PFCBLKU_LOCKMASTER_S PFLASH_ALT.PFCBLKU_LOCKMASTER_S[0].R /* Block UTEST Lock Master Sector */
#define PFLASH_ALT_PFCBLK0_LOCKMASTER_SS0 PFLASH_ALT.PFCBLK0_LOCKMASTER_SS0.R /* Block m Lock Master Super Sector n */
#define PFLASH_ALT_PFCBLK0_LOCKMASTER_SS1 PFLASH_ALT.PFCBLK0_LOCKMASTER_SS1.R /* Block m Lock Master Super Sector n */
#define PFLASH_ALT_PFCBLK0_LOCKMASTER_SS2 PFLASH_ALT.PFCBLK0_LOCKMASTER_SS2.R /* Block m Lock Master Super Sector n */
#define PFLASH_ALT_PFCBLK1_LOCKMASTER_SS0 PFLASH_ALT.PFCBLK1_LOCKMASTER_SS0.R /* Block m Lock Master Super Sector n */
#define PFLASH_ALT_PFCBLK1_LOCKMASTER_SS1 PFLASH_ALT.PFCBLK1_LOCKMASTER_SS1.R /* Block m Lock Master Super Sector n */
#define PFLASH_ALT_PFCBLK1_LOCKMASTER_SS2 PFLASH_ALT.PFCBLK1_LOCKMASTER_SS2.R /* Block m Lock Master Super Sector n */
#define PFLASH_ALT_PFCBLK2_LOCKMASTER_SS0 PFLASH_ALT.PFCBLK2_LOCKMASTER_SS0.R /* Block m Lock Master Super Sector n */
#define PFLASH_ALT_PFCBLK2_LOCKMASTER_SS1 PFLASH_ALT.PFCBLK2_LOCKMASTER_SS1.R /* Block m Lock Master Super Sector n */
#define PFLASH_ALT_PFCBLK2_LOCKMASTER_SS2 PFLASH_ALT.PFCBLK2_LOCKMASTER_SS2.R /* Block m Lock Master Super Sector n */
#define PFLASH_ALT_PFCBLK3_LOCKMASTER_SS0 PFLASH_ALT.PFCBLK3_LOCKMASTER_SS0.R /* Block m Lock Master Super Sector n */
#define PFLASH_ALT_PFCBLK3_LOCKMASTER_SS1 PFLASH_ALT.PFCBLK3_LOCKMASTER_SS1.R /* Block m Lock Master Super Sector n */
#define PFLASH_ALT_PFCBLK3_LOCKMASTER_SS2 PFLASH_ALT.PFCBLK3_LOCKMASTER_SS2.R /* Block m Lock Master Super Sector n */
#define PFLASH_ALT_PFCBLK4_LOCKMASTER_SS0 PFLASH_ALT.PFCBLK4_LOCKMASTER_SS0.R /* Block m Lock Master Super Sector n */

/* PIT */
#define PIT_1_MCR            PIT_1.MCR.R                   /* PIT Module Control Register */
#define PIT_1_LDVAL0         PIT_1.TIMER[0].LDVAL.R        /* Timer Load Value Register */
#define PIT_1_CVAL0          PIT_1.TIMER[0].CVAL.R         /* Current Timer Value Register */
#define PIT_1_TCTRL0         PIT_1.TIMER[0].TCTRL.R        /* Timer Control Register */
#define PIT_1_TFLG0          PIT_1.TIMER[0].TFLG.R         /* Timer Flag Register */
#define PIT_1_LDVAL1         PIT_1.TIMER[1].LDVAL.R        /* Timer Load Value Register */
#define PIT_1_CVAL1          PIT_1.TIMER[1].CVAL.R         /* Current Timer Value Register */
#define PIT_1_TCTRL1         PIT_1.TIMER[1].TCTRL.R        /* Timer Control Register */
#define PIT_1_TFLG1          PIT_1.TIMER[1].TFLG.R         /* Timer Flag Register */
#define PIT_1_LDVAL2         PIT_1.TIMER[2].LDVAL.R        /* Timer Load Value Register */
#define PIT_1_CVAL2          PIT_1.TIMER[2].CVAL.R         /* Current Timer Value Register */
#define PIT_1_TCTRL2         PIT_1.TIMER[2].TCTRL.R        /* Timer Control Register */
#define PIT_1_TFLG2          PIT_1.TIMER[2].TFLG.R         /* Timer Flag Register */
#define PIT_1_LDVAL3         PIT_1.TIMER[3].LDVAL.R        /* Timer Load Value Register */
#define PIT_1_CVAL3          PIT_1.TIMER[3].CVAL.R         /* Current Timer Value Register */
#define PIT_1_TCTRL3         PIT_1.TIMER[3].TCTRL.R        /* Timer Control Register */
#define PIT_1_TFLG3          PIT_1.TIMER[3].TFLG.R         /* Timer Flag Register */

#define PIT_2_MCR            PIT_2.MCR.R                   /* PIT Module Control Register */
#define PIT_2_LDVAL0         PIT_2.TIMER[0].LDVAL.R        /* Timer Load Value Register */
#define PIT_2_CVAL0          PIT_2.TIMER[0].CVAL.R         /* Current Timer Value Register */
#define PIT_2_TCTRL0         PIT_2.TIMER[0].TCTRL.R        /* Timer Control Register */
#define PIT_2_TFLG0          PIT_2.TIMER[0].TFLG.R         /* Timer Flag Register */
#define PIT_2_LDVAL1         PIT_2.TIMER[1].LDVAL.R        /* Timer Load Value Register */
#define PIT_2_CVAL1          PIT_2.TIMER[1].CVAL.R         /* Current Timer Value Register */
#define PIT_2_TCTRL1         PIT_2.TIMER[1].TCTRL.R        /* Timer Control Register */
#define PIT_2_TFLG1          PIT_2.TIMER[1].TFLG.R         /* Timer Flag Register */
#define PIT_2_LDVAL2         PIT_2.TIMER[2].LDVAL.R        /* Timer Load Value Register */
#define PIT_2_CVAL2          PIT_2.TIMER[2].CVAL.R         /* Current Timer Value Register */
#define PIT_2_TCTRL2         PIT_2.TIMER[2].TCTRL.R        /* Timer Control Register */
#define PIT_2_TFLG2          PIT_2.TIMER[2].TFLG.R         /* Timer Flag Register */
#define PIT_2_LDVAL3         PIT_2.TIMER[3].LDVAL.R        /* Timer Load Value Register */
#define PIT_2_CVAL3          PIT_2.TIMER[3].CVAL.R         /* Current Timer Value Register */
#define PIT_2_TCTRL3         PIT_2.TIMER[3].TCTRL.R        /* Timer Control Register */
#define PIT_2_TFLG3          PIT_2.TIMER[3].TFLG.R         /* Timer Flag Register */

#define PIT_0_MCR            PIT_0.MCR.R                   /* PIT Module Control Register */
#define PIT_0_LTMR64H        PIT_0.LTMR64H.R               /* PIT Upper Lifetime Timer Register */
#define PIT_0_LTMR64L        PIT_0.LTMR64L.R               /* PIT Lower Lifetime Timer Register */
#define PIT_0_RTI_LDVAL_STAT PIT_0.RTI_LDVAL_STAT.R        /* RTI Timer Load Value Sync Status Register */
#define PIT_0_RTI_LDVAL      PIT_0.RTI_LDVAL.R             /* Timer Load Value Register */
#define PIT_0_RTI_CVAL       PIT_0.RTI_CVAL.R              /* Current Timer Value Register */
#define PIT_0_RTI_TCTRL      PIT_0.RTI_TCTRL.R             /* Timer Control Register */
#define PIT_0_RTI_TFLG       PIT_0.RTI_TFLG.R              /* Timer Flag Register */
#define PIT_0_LDVAL0         PIT_0.TIMER[0].LDVAL.R        /* Timer Load Value Register */
#define PIT_0_CVAL0          PIT_0.TIMER[0].CVAL.R         /* Current Timer Value Register */
#define PIT_0_TCTRL0         PIT_0.TIMER[0].TCTRL.R        /* Timer Control Register */
#define PIT_0_TFLG0          PIT_0.TIMER[0].TFLG.R         /* Timer Flag Register */
#define PIT_0_LDVAL1         PIT_0.TIMER[1].LDVAL.R        /* Timer Load Value Register */
#define PIT_0_CVAL1          PIT_0.TIMER[1].CVAL.R         /* Current Timer Value Register */
#define PIT_0_TCTRL1         PIT_0.TIMER[1].TCTRL.R        /* Timer Control Register */
#define PIT_0_TFLG1          PIT_0.TIMER[1].TFLG.R         /* Timer Flag Register */
#define PIT_0_LDVAL2         PIT_0.TIMER[2].LDVAL.R        /* Timer Load Value Register */
#define PIT_0_CVAL2          PIT_0.TIMER[2].CVAL.R         /* Current Timer Value Register */
#define PIT_0_TCTRL2         PIT_0.TIMER[2].TCTRL.R        /* Timer Control Register */
#define PIT_0_TFLG2          PIT_0.TIMER[2].TFLG.R         /* Timer Flag Register */
#define PIT_0_LDVAL3         PIT_0.TIMER[3].LDVAL.R        /* Timer Load Value Register */
#define PIT_0_CVAL3          PIT_0.TIMER[3].CVAL.R         /* Current Timer Value Register */
#define PIT_0_TCTRL3         PIT_0.TIMER[3].TCTRL.R        /* Timer Control Register */
#define PIT_0_TFLG3          PIT_0.TIMER[3].TFLG.R         /* Timer Flag Register */

/* PLL */
#define PLL_PLLCR            PLL.PLLCR.R                   /* PLL Control Register */
#define PLL_PLLSR            PLL.PLLSR.R                   /* PLL Status Register */
#define PLL_PLLDV            PLL.PLLDV.R                   /* PLL Divider */
#define PLL_PLLFM            PLL.PLLFM.R                   /* PLL Frequency Modulation */
#define PLL_PLLFD            PLL.PLLFD.R                   /* PLL Fractional Divider */
#define PLL_PLLCAL2          PLL.PLLCAL2.R                 /* PLL Calibration Register 2 */
#define PLL_PLLODIV_0        PLL.PLLODIV[0].R              /* PLL Output Divider */
#define PLL_PLLODIV_1        PLL.PLLODIV[1].R              /* PLL Output Divider */

/* PMC */
#define PMC_LVSC             PMC.LVSC.R                    /* Low Voltage Status and Control Register */
#define PMC_CONFIG           PMC.CONFIG.R                  /* PMC Configuration Register */
#define PMC_VERID            PMC.VERID.R                   /* Version ID register */

/* PRAMC */
#define PRAMC_0_PRCR1        PRAMC_0.PRCR1.R               /* Platform RAM Configuration register 1 */

#define PRAMC_1_PRCR1        PRAMC_1.PRCR1.R               /* Platform RAM Configuration register 1 */

/* Peripheral_Debug_Freeze */
#define PERIPHERAL_DEBUG_FREEZE_Core0_DBGFRZ_CTRL_GPR PERIPHERAL_DEBUG_FREEZE.CORE0_DBGFRZ_CTRL_GPR.R /* Core 0 Debug Freeze Control */
#define PERIPHERAL_DEBUG_FREEZE_Core1_DBGFRZ_CTRL_GPR PERIPHERAL_DEBUG_FREEZE.CORE1_DBGFRZ_CTRL_GPR.R /* Core 1 Debug Freeze Control */

/* QuadSPI */
#define QUADSPI_MCR          QUADSPI.MCR.R                 /* Module Configuration Register */
#define QUADSPI_IPCR         QUADSPI.IPCR.R                /* IP Configuration Register */
#define QUADSPI_FLSHCR       QUADSPI.FLSHCR.R              /* Flash Memory Configuration Register */
#define QUADSPI_BUF0CR       QUADSPI.BUF0CR.R              /* Buffer 0 Configuration Register */
#define QUADSPI_BUF1CR       QUADSPI.BUF1CR.R              /* Buffer 1 Configuration Register */
#define QUADSPI_BUF2CR       QUADSPI.BUF2CR.R              /* Buffer 2 Configuration Register */
#define QUADSPI_BUF3CR       QUADSPI.BUF3CR.R              /* Buffer 3 Configuration Register */
#define QUADSPI_BFGENCR      QUADSPI.BFGENCR.R             /* Buffer Generic Configuration Register */
#define QUADSPI_SOCCR        QUADSPI.SOCCR.R               /* SOC Configuration Register */
#define QUADSPI_BUF0IND      QUADSPI.BUF0IND.R             /* Buffer 0 Top Index Register */
#define QUADSPI_BUF1IND      QUADSPI.BUF1IND.R             /* Buffer 1 Top Index Register */
#define QUADSPI_BUF2IND      QUADSPI.BUF2IND.R             /* Buffer 2 Top Index Register */
#define QUADSPI_DLLCRA       QUADSPI.DLLCRA.R              /* DLL Flash Memory A Configuration Register */
#define QUADSPI_SFAR         QUADSPI.SFAR.R                /* Serial Flash Memory Address Register */
#define QUADSPI_SMPR         QUADSPI.SMPR.R                /* Sampling Register */
#define QUADSPI_RBSR         QUADSPI.RBSR.R                /* RX Buffer Status Register */
#define QUADSPI_RBCT         QUADSPI.RBCT.R                /* RX Buffer Control Register */
#define QUADSPI_DLSR_FA      QUADSPI.DLSR_FA.R             /* Data Learning Status Flash Memory A Register */
#define QUADSPI_TBSR         QUADSPI.TBSR.R                /* TX Buffer Status Register */
#define QUADSPI_TBDR         QUADSPI.TBDR.R                /* TX Buffer Data Register */
#define QUADSPI_TBCT         QUADSPI.TBCT.R                /* TX Buffer Control Register */
#define QUADSPI_SR           QUADSPI.SR.R                  /* Status Register */
#define QUADSPI_FR           QUADSPI.FR.R                  /* Flag Register */
#define QUADSPI_RSER         QUADSPI.RSER.R                /* Interrupt and DMA Request Select and Enable Register */
#define QUADSPI_SPTRCLR      QUADSPI.SPTRCLR.R             /* Sequence Pointer Clear Register */
#define QUADSPI_SFA1AD       QUADSPI.SFA1AD.R              /* Serial Flash Memory A1 Top Address Register */
#define QUADSPI_SFA2AD       QUADSPI.SFA2AD.R              /* Serial Flash Memory A2 Top Address Register */
#define QUADSPI_SFB1AD       QUADSPI.SFB1AD.R              /* Serial Flash Memory B1 Top Address Register */
#define QUADSPI_SFB2AD       QUADSPI.SFB2AD.R              /* Serial Flash Memory B2 Top Address Register */
#define QUADSPI_RBDR0        QUADSPI.RBDR[0].R             /* RX Buffer Data Register */
#define QUADSPI_RBDR1        QUADSPI.RBDR[1].R             /* RX Buffer Data Register */
#define QUADSPI_RBDR2        QUADSPI.RBDR[2].R             /* RX Buffer Data Register */
#define QUADSPI_RBDR3        QUADSPI.RBDR[3].R             /* RX Buffer Data Register */
#define QUADSPI_RBDR4        QUADSPI.RBDR[4].R             /* RX Buffer Data Register */
#define QUADSPI_RBDR5        QUADSPI.RBDR[5].R             /* RX Buffer Data Register */
#define QUADSPI_RBDR6        QUADSPI.RBDR[6].R             /* RX Buffer Data Register */
#define QUADSPI_RBDR7        QUADSPI.RBDR[7].R             /* RX Buffer Data Register */
#define QUADSPI_RBDR8        QUADSPI.RBDR[8].R             /* RX Buffer Data Register */
#define QUADSPI_RBDR9        QUADSPI.RBDR[9].R             /* RX Buffer Data Register */
#define QUADSPI_RBDR10       QUADSPI.RBDR[10].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR11       QUADSPI.RBDR[11].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR12       QUADSPI.RBDR[12].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR13       QUADSPI.RBDR[13].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR14       QUADSPI.RBDR[14].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR15       QUADSPI.RBDR[15].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR16       QUADSPI.RBDR[16].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR17       QUADSPI.RBDR[17].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR18       QUADSPI.RBDR[18].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR19       QUADSPI.RBDR[19].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR20       QUADSPI.RBDR[20].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR21       QUADSPI.RBDR[21].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR22       QUADSPI.RBDR[22].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR23       QUADSPI.RBDR[23].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR24       QUADSPI.RBDR[24].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR25       QUADSPI.RBDR[25].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR26       QUADSPI.RBDR[26].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR27       QUADSPI.RBDR[27].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR28       QUADSPI.RBDR[28].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR29       QUADSPI.RBDR[29].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR30       QUADSPI.RBDR[30].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR31       QUADSPI.RBDR[31].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR32       QUADSPI.RBDR[32].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR33       QUADSPI.RBDR[33].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR34       QUADSPI.RBDR[34].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR35       QUADSPI.RBDR[35].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR36       QUADSPI.RBDR[36].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR37       QUADSPI.RBDR[37].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR38       QUADSPI.RBDR[38].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR39       QUADSPI.RBDR[39].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR40       QUADSPI.RBDR[40].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR41       QUADSPI.RBDR[41].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR42       QUADSPI.RBDR[42].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR43       QUADSPI.RBDR[43].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR44       QUADSPI.RBDR[44].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR45       QUADSPI.RBDR[45].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR46       QUADSPI.RBDR[46].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR47       QUADSPI.RBDR[47].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR48       QUADSPI.RBDR[48].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR49       QUADSPI.RBDR[49].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR50       QUADSPI.RBDR[50].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR51       QUADSPI.RBDR[51].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR52       QUADSPI.RBDR[52].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR53       QUADSPI.RBDR[53].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR54       QUADSPI.RBDR[54].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR55       QUADSPI.RBDR[55].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR56       QUADSPI.RBDR[56].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR57       QUADSPI.RBDR[57].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR58       QUADSPI.RBDR[58].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR59       QUADSPI.RBDR[59].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR60       QUADSPI.RBDR[60].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR61       QUADSPI.RBDR[61].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR62       QUADSPI.RBDR[62].R            /* RX Buffer Data Register */
#define QUADSPI_RBDR63       QUADSPI.RBDR[63].R            /* RX Buffer Data Register */
#define QUADSPI_LUTKEY       QUADSPI.LUTKEY.R              /* LUT Key Register */
#define QUADSPI_LCKCR        QUADSPI.LCKCR.R               /* LUT Lock Configuration Register */
#define QUADSPI_LUT0         QUADSPI.LUT[0].R              /* LUT Register */
#define QUADSPI_LUT1         QUADSPI.LUT[1].R              /* LUT Register */
#define QUADSPI_LUT2         QUADSPI.LUT[2].R              /* LUT Register */
#define QUADSPI_LUT3         QUADSPI.LUT[3].R              /* LUT Register */
#define QUADSPI_LUT4         QUADSPI.LUT[4].R              /* LUT Register */
#define QUADSPI_LUT5         QUADSPI.LUT[5].R              /* LUT Register */
#define QUADSPI_LUT6         QUADSPI.LUT[6].R              /* LUT Register */
#define QUADSPI_LUT7         QUADSPI.LUT[7].R              /* LUT Register */
#define QUADSPI_LUT8         QUADSPI.LUT[8].R              /* LUT Register */
#define QUADSPI_LUT9         QUADSPI.LUT[9].R              /* LUT Register */
#define QUADSPI_LUT10        QUADSPI.LUT[10].R             /* LUT Register */
#define QUADSPI_LUT11        QUADSPI.LUT[11].R             /* LUT Register */
#define QUADSPI_LUT12        QUADSPI.LUT[12].R             /* LUT Register */
#define QUADSPI_LUT13        QUADSPI.LUT[13].R             /* LUT Register */
#define QUADSPI_LUT14        QUADSPI.LUT[14].R             /* LUT Register */
#define QUADSPI_LUT15        QUADSPI.LUT[15].R             /* LUT Register */
#define QUADSPI_LUT16        QUADSPI.LUT[16].R             /* LUT Register */
#define QUADSPI_LUT17        QUADSPI.LUT[17].R             /* LUT Register */
#define QUADSPI_LUT18        QUADSPI.LUT[18].R             /* LUT Register */
#define QUADSPI_LUT19        QUADSPI.LUT[19].R             /* LUT Register */

/* QuadSPI_ARDB */
#define QUADSPI_ARDB_ARDB0   QUADSPI_ARDB.ARDB[0].R        /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB1   QUADSPI_ARDB.ARDB[1].R        /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB2   QUADSPI_ARDB.ARDB[2].R        /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB3   QUADSPI_ARDB.ARDB[3].R        /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB4   QUADSPI_ARDB.ARDB[4].R        /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB5   QUADSPI_ARDB.ARDB[5].R        /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB6   QUADSPI_ARDB.ARDB[6].R        /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB7   QUADSPI_ARDB.ARDB[7].R        /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB8   QUADSPI_ARDB.ARDB[8].R        /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB9   QUADSPI_ARDB.ARDB[9].R        /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB10  QUADSPI_ARDB.ARDB[10].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB11  QUADSPI_ARDB.ARDB[11].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB12  QUADSPI_ARDB.ARDB[12].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB13  QUADSPI_ARDB.ARDB[13].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB14  QUADSPI_ARDB.ARDB[14].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB15  QUADSPI_ARDB.ARDB[15].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB16  QUADSPI_ARDB.ARDB[16].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB17  QUADSPI_ARDB.ARDB[17].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB18  QUADSPI_ARDB.ARDB[18].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB19  QUADSPI_ARDB.ARDB[19].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB20  QUADSPI_ARDB.ARDB[20].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB21  QUADSPI_ARDB.ARDB[21].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB22  QUADSPI_ARDB.ARDB[22].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB23  QUADSPI_ARDB.ARDB[23].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB24  QUADSPI_ARDB.ARDB[24].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB25  QUADSPI_ARDB.ARDB[25].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB26  QUADSPI_ARDB.ARDB[26].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB27  QUADSPI_ARDB.ARDB[27].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB28  QUADSPI_ARDB.ARDB[28].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB29  QUADSPI_ARDB.ARDB[29].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB30  QUADSPI_ARDB.ARDB[30].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB31  QUADSPI_ARDB.ARDB[31].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB32  QUADSPI_ARDB.ARDB[32].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB33  QUADSPI_ARDB.ARDB[33].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB34  QUADSPI_ARDB.ARDB[34].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB35  QUADSPI_ARDB.ARDB[35].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB36  QUADSPI_ARDB.ARDB[36].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB37  QUADSPI_ARDB.ARDB[37].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB38  QUADSPI_ARDB.ARDB[38].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB39  QUADSPI_ARDB.ARDB[39].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB40  QUADSPI_ARDB.ARDB[40].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB41  QUADSPI_ARDB.ARDB[41].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB42  QUADSPI_ARDB.ARDB[42].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB43  QUADSPI_ARDB.ARDB[43].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB44  QUADSPI_ARDB.ARDB[44].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB45  QUADSPI_ARDB.ARDB[45].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB46  QUADSPI_ARDB.ARDB[46].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB47  QUADSPI_ARDB.ARDB[47].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB48  QUADSPI_ARDB.ARDB[48].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB49  QUADSPI_ARDB.ARDB[49].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB50  QUADSPI_ARDB.ARDB[50].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB51  QUADSPI_ARDB.ARDB[51].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB52  QUADSPI_ARDB.ARDB[52].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB53  QUADSPI_ARDB.ARDB[53].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB54  QUADSPI_ARDB.ARDB[54].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB55  QUADSPI_ARDB.ARDB[55].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB56  QUADSPI_ARDB.ARDB[56].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB57  QUADSPI_ARDB.ARDB[57].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB58  QUADSPI_ARDB.ARDB[58].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB59  QUADSPI_ARDB.ARDB[59].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB60  QUADSPI_ARDB.ARDB[60].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB61  QUADSPI_ARDB.ARDB[61].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB62  QUADSPI_ARDB.ARDB[62].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB63  QUADSPI_ARDB.ARDB[63].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB64  QUADSPI_ARDB.ARDB[64].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB65  QUADSPI_ARDB.ARDB[65].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB66  QUADSPI_ARDB.ARDB[66].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB67  QUADSPI_ARDB.ARDB[67].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB68  QUADSPI_ARDB.ARDB[68].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB69  QUADSPI_ARDB.ARDB[69].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB70  QUADSPI_ARDB.ARDB[70].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB71  QUADSPI_ARDB.ARDB[71].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB72  QUADSPI_ARDB.ARDB[72].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB73  QUADSPI_ARDB.ARDB[73].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB74  QUADSPI_ARDB.ARDB[74].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB75  QUADSPI_ARDB.ARDB[75].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB76  QUADSPI_ARDB.ARDB[76].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB77  QUADSPI_ARDB.ARDB[77].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB78  QUADSPI_ARDB.ARDB[78].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB79  QUADSPI_ARDB.ARDB[79].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB80  QUADSPI_ARDB.ARDB[80].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB81  QUADSPI_ARDB.ARDB[81].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB82  QUADSPI_ARDB.ARDB[82].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB83  QUADSPI_ARDB.ARDB[83].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB84  QUADSPI_ARDB.ARDB[84].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB85  QUADSPI_ARDB.ARDB[85].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB86  QUADSPI_ARDB.ARDB[86].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB87  QUADSPI_ARDB.ARDB[87].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB88  QUADSPI_ARDB.ARDB[88].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB89  QUADSPI_ARDB.ARDB[89].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB90  QUADSPI_ARDB.ARDB[90].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB91  QUADSPI_ARDB.ARDB[91].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB92  QUADSPI_ARDB.ARDB[92].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB93  QUADSPI_ARDB.ARDB[93].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB94  QUADSPI_ARDB.ARDB[94].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB95  QUADSPI_ARDB.ARDB[95].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB96  QUADSPI_ARDB.ARDB[96].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB97  QUADSPI_ARDB.ARDB[97].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB98  QUADSPI_ARDB.ARDB[98].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB99  QUADSPI_ARDB.ARDB[99].R       /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB100 QUADSPI_ARDB.ARDB[100].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB101 QUADSPI_ARDB.ARDB[101].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB102 QUADSPI_ARDB.ARDB[102].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB103 QUADSPI_ARDB.ARDB[103].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB104 QUADSPI_ARDB.ARDB[104].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB105 QUADSPI_ARDB.ARDB[105].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB106 QUADSPI_ARDB.ARDB[106].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB107 QUADSPI_ARDB.ARDB[107].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB108 QUADSPI_ARDB.ARDB[108].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB109 QUADSPI_ARDB.ARDB[109].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB110 QUADSPI_ARDB.ARDB[110].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB111 QUADSPI_ARDB.ARDB[111].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB112 QUADSPI_ARDB.ARDB[112].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB113 QUADSPI_ARDB.ARDB[113].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB114 QUADSPI_ARDB.ARDB[114].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB115 QUADSPI_ARDB.ARDB[115].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB116 QUADSPI_ARDB.ARDB[116].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB117 QUADSPI_ARDB.ARDB[117].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB118 QUADSPI_ARDB.ARDB[118].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB119 QUADSPI_ARDB.ARDB[119].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB120 QUADSPI_ARDB.ARDB[120].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB121 QUADSPI_ARDB.ARDB[121].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB122 QUADSPI_ARDB.ARDB[122].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB123 QUADSPI_ARDB.ARDB[123].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB124 QUADSPI_ARDB.ARDB[124].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB125 QUADSPI_ARDB.ARDB[125].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB126 QUADSPI_ARDB.ARDB[126].R      /* AHB RX Data Buffer Register */
#define QUADSPI_ARDB_ARDB127 QUADSPI_ARDB.ARDB[127].R      /* AHB RX Data Buffer Register */

/* RTC */
#define RTC_RTCSUPV          RTC.RTCSUPV.R                 /* RTC Supervisor control register */
#define RTC_RTCC             RTC.RTCC.R                    /* RTC Control register */
#define RTC_RTCS             RTC.RTCS.R                    /* RTC Status register */
#define RTC_RTCCNT           RTC.RTCCNT.R                  /* RTC Counter register */
#define RTC_APIVAL           RTC.APIVAL.R                  /* API Compare value register */
#define RTC_RTCVAL           RTC.RTCVAL.R                  /* RTC Compare value register */

/* SAI */
#define SAI_0_VERID          SAI_0.VERID.R                 /* Version ID Register */
#define SAI_0_PARAM          SAI_0.PARAM.R                 /* Parameter Register */
#define SAI_0_TCSR           SAI_0.TCSR.R                  /* SAI Transmit Control Register */
#define SAI_0_TCR1           SAI_0.TCR1.R                  /* SAI Transmit Configuration 1 Register */
#define SAI_0_TCR2           SAI_0.TCR2.R                  /* SAI Transmit Configuration 2 Register */
#define SAI_0_TCR3           SAI_0.TCR3.R                  /* SAI Transmit Configuration 3 Register */
#define SAI_0_TCR4           SAI_0.TCR4.R                  /* SAI Transmit Configuration 4 Register */
#define SAI_0_TCR5           SAI_0.TCR5.R                  /* SAI Transmit Configuration 5 Register */
#define SAI_0_TDR0           SAI_0.TDR[0].R                /* SAI Transmit Data Register */
#define SAI_0_TDR1           SAI_0.TDR[1].R                /* SAI Transmit Data Register */
#define SAI_0_TDR2           SAI_0.TDR[2].R                /* SAI Transmit Data Register */
#define SAI_0_TDR3           SAI_0.TDR[3].R                /* SAI Transmit Data Register */
#define SAI_0_TFR0           SAI_0.TFR[0].R                /* SAI Transmit FIFO Register */
#define SAI_0_TFR1           SAI_0.TFR[1].R                /* SAI Transmit FIFO Register */
#define SAI_0_TFR2           SAI_0.TFR[2].R                /* SAI Transmit FIFO Register */
#define SAI_0_TFR3           SAI_0.TFR[3].R                /* SAI Transmit FIFO Register */
#define SAI_0_TMR            SAI_0.TMR.R                   /* SAI Transmit Mask Register */
#define SAI_0_RCSR           SAI_0.RCSR.R                  /* SAI Receive Control Register */
#define SAI_0_RCR1           SAI_0.RCR1.R                  /* SAI Receive Configuration 1 Register */
#define SAI_0_RCR2           SAI_0.RCR2.R                  /* SAI Receive Configuration 2 Register */
#define SAI_0_RCR3           SAI_0.RCR3.R                  /* SAI Receive Configuration 3 Register */
#define SAI_0_RCR4           SAI_0.RCR4.R                  /* SAI Receive Configuration 4 Register */
#define SAI_0_RCR5           SAI_0.RCR5.R                  /* SAI Receive Configuration 5 Register */
#define SAI_0_RDR0           SAI_0.RDR[0].R                /* SAI Receive Data Register */
#define SAI_0_RDR1           SAI_0.RDR[1].R                /* SAI Receive Data Register */
#define SAI_0_RDR2           SAI_0.RDR[2].R                /* SAI Receive Data Register */
#define SAI_0_RDR3           SAI_0.RDR[3].R                /* SAI Receive Data Register */
#define SAI_0_RFR0           SAI_0.RFR[0].R                /* SAI Receive FIFO Register */
#define SAI_0_RFR1           SAI_0.RFR[1].R                /* SAI Receive FIFO Register */
#define SAI_0_RFR2           SAI_0.RFR[2].R                /* SAI Receive FIFO Register */
#define SAI_0_RFR3           SAI_0.RFR[3].R                /* SAI Receive FIFO Register */
#define SAI_0_RMR            SAI_0.RMR.R                   /* SAI Receive Mask Register */

#define SAI_1_VERID          SAI_1.VERID.R                 /* Version ID Register */
#define SAI_1_PARAM          SAI_1.PARAM.R                 /* Parameter Register */
#define SAI_1_TCSR           SAI_1.TCSR.R                  /* SAI Transmit Control Register */
#define SAI_1_TCR1           SAI_1.TCR1.R                  /* SAI Transmit Configuration 1 Register */
#define SAI_1_TCR2           SAI_1.TCR2.R                  /* SAI Transmit Configuration 2 Register */
#define SAI_1_TCR3           SAI_1.TCR3.R                  /* SAI Transmit Configuration 3 Register */
#define SAI_1_TCR4           SAI_1.TCR4.R                  /* SAI Transmit Configuration 4 Register */
#define SAI_1_TCR5           SAI_1.TCR5.R                  /* SAI Transmit Configuration 5 Register */
#define SAI_1_TDR0           SAI_1.TDR[0].R                /* SAI Transmit Data Register */
#define SAI_1_TFR0           SAI_1.TFR[0].R                /* SAI Transmit FIFO Register */
#define SAI_1_TMR            SAI_1.TMR.R                   /* SAI Transmit Mask Register */
#define SAI_1_RCSR           SAI_1.RCSR.R                  /* SAI Receive Control Register */
#define SAI_1_RCR1           SAI_1.RCR1.R                  /* SAI Receive Configuration 1 Register */
#define SAI_1_RCR2           SAI_1.RCR2.R                  /* SAI Receive Configuration 2 Register */
#define SAI_1_RCR3           SAI_1.RCR3.R                  /* SAI Receive Configuration 3 Register */
#define SAI_1_RCR4           SAI_1.RCR4.R                  /* SAI Receive Configuration 4 Register */
#define SAI_1_RCR5           SAI_1.RCR5.R                  /* SAI Receive Configuration 5 Register */
#define SAI_1_RDR0           SAI_1.RDR[0].R                /* SAI Receive Data Register */
#define SAI_1_RFR0           SAI_1.RFR[0].R                /* SAI Receive FIFO Register */
#define SAI_1_RMR            SAI_1.RMR.R                   /* SAI Receive Mask Register */

/* SDA_AP */
#define SDA_AP_AUTHSTTS      SDA_AP.AUTHSTTS.R             /* Authentication Status */
#define SDA_AP_AUTHCTL       SDA_AP.AUTHCTL.R              /* Authentication Control */
#define SDA_AP_KEYCHAL0      SDA_AP.KEYCHAL[0].R           /* Key Challenge */
#define SDA_AP_KEYCHAL1      SDA_AP.KEYCHAL[1].R           /* Key Challenge */
#define SDA_AP_KEYCHAL2      SDA_AP.KEYCHAL[2].R           /* Key Challenge */
#define SDA_AP_KEYCHAL3      SDA_AP.KEYCHAL[3].R           /* Key Challenge */
#define SDA_AP_KEYCHAL4      SDA_AP.KEYCHAL[4].R           /* Key Challenge */
#define SDA_AP_KEYCHAL5      SDA_AP.KEYCHAL[5].R           /* Key Challenge */
#define SDA_AP_KEYCHAL6      SDA_AP.KEYCHAL[6].R           /* Key Challenge */
#define SDA_AP_KEYCHAL7      SDA_AP.KEYCHAL[7].R           /* Key Challenge */
#define SDA_AP_KEYRESP0      SDA_AP.KEYRESP[0].R           /* Key Response */
#define SDA_AP_KEYRESP1      SDA_AP.KEYRESP[1].R           /* Key Response */
#define SDA_AP_KEYRESP2      SDA_AP.KEYRESP[2].R           /* Key Response */
#define SDA_AP_KEYRESP3      SDA_AP.KEYRESP[3].R           /* Key Response */
#define SDA_AP_KEYRESP4      SDA_AP.KEYRESP[4].R           /* Key Response */
#define SDA_AP_KEYRESP5      SDA_AP.KEYRESP[5].R           /* Key Response */
#define SDA_AP_KEYRESP6      SDA_AP.KEYRESP[6].R           /* Key Response */
#define SDA_AP_KEYRESP7      SDA_AP.KEYRESP[7].R           /* Key Response */
#define SDA_AP_UID0          SDA_AP.UID0.R                 /* User Identification 0 */
#define SDA_AP_UID1          SDA_AP.UID1.R                 /* User Identification 1 */
#define SDA_AP_DBGENCTRL     SDA_AP.DBGENCTRL.R            /* Debug Enable Control */
#define SDA_AP_SDAAPRSTCTRL  SDA_AP.SDAAPRSTCTRL.R         /* Reset Control */
#define SDA_AP_SDAAPGENSTATUS0 SDA_AP.SDAAPGENSTATUS0.R    /* SDA_AP Generic Status */
#define SDA_AP_SDAAPGENCTRL0 SDA_AP.SDAAPGENCTRL0.R        /* Generic Control 0 */
#define SDA_AP_SDAAPGENSTATUS1 SDA_AP.SDAAPGENSTATUS1.R    /* SDA_AP Generic Status */
#define SDA_AP_SDAAPGENSTATUS2 SDA_AP.SDAAPGENSTATUS2.R    /* SDA_AP Generic Status */
#define SDA_AP_SDAAPGENSTATUS3 SDA_AP.SDAAPGENSTATUS3.R    /* SDA_AP Generic Status */
#define SDA_AP_SDAAPGENSTATUS4 SDA_AP.SDAAPGENSTATUS4.R    /* SDA_AP Generic Status */
#define SDA_AP_ID            SDA_AP.ID.R                   /* Identity */

/* SELFTEST_GPR */
#define SELFTEST_GPR_CONFIG_REG SELFTEST_GPR.CONFIG_REG.R  /* Configuration register */
#define SELFTEST_GPR_LBIST_PROG_REG SELFTEST_GPR.LBIST_PROG_REG.R /* LBIST Program */

/* SEMA42 */
#define SEMA42_GATE3         SEMA42.GATE[0].R              /* Gate Register */
#define SEMA42_GATE2         SEMA42.GATE[1].R              /* Gate Register */
#define SEMA42_GATE1         SEMA42.GATE[2].R              /* Gate Register */
#define SEMA42_GATE0         SEMA42.GATE[3].R              /* Gate Register */
#define SEMA42_GATE7         SEMA42.GATE[4].R              /* Gate Register */
#define SEMA42_GATE6         SEMA42.GATE[5].R              /* Gate Register */
#define SEMA42_GATE5         SEMA42.GATE[6].R              /* Gate Register */
#define SEMA42_GATE4         SEMA42.GATE[7].R              /* Gate Register */
#define SEMA42_GATE11        SEMA42.GATE[8].R              /* Gate Register */
#define SEMA42_GATE10        SEMA42.GATE[9].R              /* Gate Register */
#define SEMA42_GATE9         SEMA42.GATE[10].R             /* Gate Register */
#define SEMA42_GATE8         SEMA42.GATE[11].R             /* Gate Register */
#define SEMA42_GATE15        SEMA42.GATE[12].R             /* Gate Register */
#define SEMA42_GATE14        SEMA42.GATE[13].R             /* Gate Register */
#define SEMA42_GATE13        SEMA42.GATE[14].R             /* Gate Register */
#define SEMA42_GATE12        SEMA42.GATE[15].R             /* Gate Register */
#define SEMA42_RSTGT_R       SEMA42.RSTGT.R.R              /* Reset Gate Read */
#define SEMA42_RSTGT_W       SEMA42.RSTGT.W.R              /* Reset Gate Write */

/* SIRC */
#define SIRC_SR              SIRC.SR.R                     /* Status Register */
#define SIRC_MISCELLANEOUS_IN SIRC.MISCELLANEOUS_IN.R      /* Miscellaneous input */

/* SIUL2 */
#define SIUL2_MIDR1          SIUL2.MIDR1.R                 /* SIUL2 MCU ID Register #1 */
#define SIUL2_MIDR2          SIUL2.MIDR2.R                 /* SIUL2 MCU ID Register #2 */
#define SIUL2_DISR0          SIUL2.DISR0.R                 /* SIUL2 DMA/Interrupt Status Flag Register0 */
#define SIUL2_DIRER0         SIUL2.DIRER0.R                /* SIUL2 DMA/Interrupt Request Enable Register0 */
#define SIUL2_DIRSR0         SIUL2.DIRSR0.R                /* SIUL2 DMA/Interrupt Request Select Register0 */
#define SIUL2_IREER0         SIUL2.IREER0.R                /* SIUL2 Interrupt Rising-Edge Event Enable Register 0 */
#define SIUL2_IFEER0         SIUL2.IFEER0.R                /* SIUL2 Interrupt Falling-Edge Event Enable Register 0 */
#define SIUL2_IFER0          SIUL2.IFER0.R                 /* SIUL2 Interrupt Filter Enable Register 0 */
#define SIUL2_IFMCR0         SIUL2.IFMCR[0].R              /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR1         SIUL2.IFMCR[1].R              /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR2         SIUL2.IFMCR[2].R              /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR3         SIUL2.IFMCR[3].R              /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR4         SIUL2.IFMCR[4].R              /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR5         SIUL2.IFMCR[5].R              /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR6         SIUL2.IFMCR[6].R              /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR7         SIUL2.IFMCR[7].R              /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR8         SIUL2.IFMCR[8].R              /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR9         SIUL2.IFMCR[9].R              /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR10        SIUL2.IFMCR[10].R             /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR11        SIUL2.IFMCR[11].R             /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR12        SIUL2.IFMCR[12].R             /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR13        SIUL2.IFMCR[13].R             /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR14        SIUL2.IFMCR[14].R             /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR15        SIUL2.IFMCR[15].R             /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR16        SIUL2.IFMCR[16].R             /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR17        SIUL2.IFMCR[17].R             /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR18        SIUL2.IFMCR[18].R             /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR19        SIUL2.IFMCR[19].R             /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR20        SIUL2.IFMCR[20].R             /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR21        SIUL2.IFMCR[21].R             /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR22        SIUL2.IFMCR[22].R             /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR23        SIUL2.IFMCR[23].R             /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR24        SIUL2.IFMCR[24].R             /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR25        SIUL2.IFMCR[25].R             /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR26        SIUL2.IFMCR[26].R             /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR27        SIUL2.IFMCR[27].R             /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR28        SIUL2.IFMCR[28].R             /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR29        SIUL2.IFMCR[29].R             /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR30        SIUL2.IFMCR[30].R             /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFMCR31        SIUL2.IFMCR[31].R             /* SIUL2 Interrupt Filter Maximum Counter Register */
#define SIUL2_IFCPR          SIUL2.IFCPR.R                 /* SIUL2 Interrupt Filter Clock Prescaler Register */
#define SIUL2_MIDR3          SIUL2.MIDR3.R                 /* SIUL2 MCU ID Register 3 */
#define SIUL2_MIDR4          SIUL2.MIDR4.R                 /* SIUL2 MCU ID Register 4 */
#define SIUL2_MSCR0          SIUL2.MSCR[0].R               /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR1          SIUL2.MSCR[1].R               /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR2          SIUL2.MSCR[2].R               /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR3          SIUL2.MSCR[3].R               /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR4          SIUL2.MSCR[4].R               /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR5          SIUL2.MSCR[5].R               /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR6          SIUL2.MSCR[6].R               /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR7          SIUL2.MSCR[7].R               /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR8          SIUL2.MSCR[8].R               /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR9          SIUL2.MSCR[9].R               /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR10         SIUL2.MSCR[10].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR11         SIUL2.MSCR[11].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR12         SIUL2.MSCR[12].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR13         SIUL2.MSCR[13].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR14         SIUL2.MSCR[14].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR15         SIUL2.MSCR[15].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR16         SIUL2.MSCR[16].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR17         SIUL2.MSCR[17].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR18         SIUL2.MSCR[18].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR19         SIUL2.MSCR[19].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR20         SIUL2.MSCR[20].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR21         SIUL2.MSCR[21].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR22         SIUL2.MSCR[22].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR23         SIUL2.MSCR[23].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR24         SIUL2.MSCR[24].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR25         SIUL2.MSCR[25].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR26         SIUL2.MSCR[26].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR27         SIUL2.MSCR[27].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR28         SIUL2.MSCR[28].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR29         SIUL2.MSCR[29].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR30         SIUL2.MSCR[30].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR31         SIUL2.MSCR[31].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR32         SIUL2.MSCR[32].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR33         SIUL2.MSCR[33].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR34         SIUL2.MSCR[34].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR35         SIUL2.MSCR[35].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR36         SIUL2.MSCR[36].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR37         SIUL2.MSCR[37].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR40         SIUL2.MSCR[40].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR41         SIUL2.MSCR[41].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR42         SIUL2.MSCR[42].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR43         SIUL2.MSCR[43].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR44         SIUL2.MSCR[44].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR45         SIUL2.MSCR[45].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR46         SIUL2.MSCR[46].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR47         SIUL2.MSCR[47].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR48         SIUL2.MSCR[48].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR49         SIUL2.MSCR[49].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR50         SIUL2.MSCR[50].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR51         SIUL2.MSCR[51].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR52         SIUL2.MSCR[52].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR53         SIUL2.MSCR[53].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR54         SIUL2.MSCR[54].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR55         SIUL2.MSCR[55].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR56         SIUL2.MSCR[56].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR57         SIUL2.MSCR[57].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR58         SIUL2.MSCR[58].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR59         SIUL2.MSCR[59].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR60         SIUL2.MSCR[60].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR61         SIUL2.MSCR[61].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR62         SIUL2.MSCR[62].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR63         SIUL2.MSCR[63].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR64         SIUL2.MSCR[64].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR65         SIUL2.MSCR[65].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR66         SIUL2.MSCR[66].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR67         SIUL2.MSCR[67].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR68         SIUL2.MSCR[68].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR69         SIUL2.MSCR[69].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR70         SIUL2.MSCR[70].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR71         SIUL2.MSCR[71].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR72         SIUL2.MSCR[72].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR73         SIUL2.MSCR[73].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR74         SIUL2.MSCR[74].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR75         SIUL2.MSCR[75].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR76         SIUL2.MSCR[76].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR77         SIUL2.MSCR[77].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR78         SIUL2.MSCR[78].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR79         SIUL2.MSCR[79].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR80         SIUL2.MSCR[80].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR81         SIUL2.MSCR[81].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR82         SIUL2.MSCR[82].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR83         SIUL2.MSCR[83].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR84         SIUL2.MSCR[84].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR85         SIUL2.MSCR[85].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR86         SIUL2.MSCR[86].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR87         SIUL2.MSCR[87].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR88         SIUL2.MSCR[88].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR89         SIUL2.MSCR[89].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR90         SIUL2.MSCR[90].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR91         SIUL2.MSCR[91].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR92         SIUL2.MSCR[92].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR93         SIUL2.MSCR[93].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR94         SIUL2.MSCR[94].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR95         SIUL2.MSCR[95].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR96         SIUL2.MSCR[96].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR97         SIUL2.MSCR[97].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR98         SIUL2.MSCR[98].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR99         SIUL2.MSCR[99].R              /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR100        SIUL2.MSCR[100].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR101        SIUL2.MSCR[101].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR102        SIUL2.MSCR[102].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR103        SIUL2.MSCR[103].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR104        SIUL2.MSCR[104].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR105        SIUL2.MSCR[105].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR106        SIUL2.MSCR[106].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR107        SIUL2.MSCR[107].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR108        SIUL2.MSCR[108].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR109        SIUL2.MSCR[109].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR110        SIUL2.MSCR[110].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR111        SIUL2.MSCR[111].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR112        SIUL2.MSCR[112].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR113        SIUL2.MSCR[113].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR114        SIUL2.MSCR[114].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR115        SIUL2.MSCR[115].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR116        SIUL2.MSCR[116].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR117        SIUL2.MSCR[117].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR118        SIUL2.MSCR[118].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR119        SIUL2.MSCR[119].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR120        SIUL2.MSCR[120].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR121        SIUL2.MSCR[121].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR122        SIUL2.MSCR[122].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR123        SIUL2.MSCR[123].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR124        SIUL2.MSCR[124].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR125        SIUL2.MSCR[125].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR126        SIUL2.MSCR[126].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR127        SIUL2.MSCR[127].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR128        SIUL2.MSCR[128].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR129        SIUL2.MSCR[129].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR130        SIUL2.MSCR[130].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR131        SIUL2.MSCR[131].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR132        SIUL2.MSCR[132].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR133        SIUL2.MSCR[133].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR134        SIUL2.MSCR[134].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR135        SIUL2.MSCR[135].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR136        SIUL2.MSCR[136].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR137        SIUL2.MSCR[137].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR138        SIUL2.MSCR[138].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR139        SIUL2.MSCR[139].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR140        SIUL2.MSCR[140].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR141        SIUL2.MSCR[141].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR142        SIUL2.MSCR[142].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR143        SIUL2.MSCR[143].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR144        SIUL2.MSCR[144].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR145        SIUL2.MSCR[145].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR146        SIUL2.MSCR[146].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR147        SIUL2.MSCR[147].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR148        SIUL2.MSCR[148].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR149        SIUL2.MSCR[149].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR150        SIUL2.MSCR[150].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR151        SIUL2.MSCR[151].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR152        SIUL2.MSCR[152].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR153        SIUL2.MSCR[153].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR154        SIUL2.MSCR[154].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR155        SIUL2.MSCR[155].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR156        SIUL2.MSCR[156].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR157        SIUL2.MSCR[157].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR158        SIUL2.MSCR[158].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR159        SIUL2.MSCR[159].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR160        SIUL2.MSCR[160].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR161        SIUL2.MSCR[161].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR162        SIUL2.MSCR[162].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR163        SIUL2.MSCR[163].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR164        SIUL2.MSCR[164].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR165        SIUL2.MSCR[165].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR166        SIUL2.MSCR[166].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR167        SIUL2.MSCR[167].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR168        SIUL2.MSCR[168].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR169        SIUL2.MSCR[169].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR170        SIUL2.MSCR[170].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR171        SIUL2.MSCR[171].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR172        SIUL2.MSCR[172].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR173        SIUL2.MSCR[173].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR174        SIUL2.MSCR[174].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR175        SIUL2.MSCR[175].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR176        SIUL2.MSCR[176].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR177        SIUL2.MSCR[177].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR178        SIUL2.MSCR[178].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR179        SIUL2.MSCR[179].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR180        SIUL2.MSCR[180].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR181        SIUL2.MSCR[181].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR182        SIUL2.MSCR[182].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR183        SIUL2.MSCR[183].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR184        SIUL2.MSCR[184].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR185        SIUL2.MSCR[185].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR186        SIUL2.MSCR[186].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR187        SIUL2.MSCR[187].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR188        SIUL2.MSCR[188].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR189        SIUL2.MSCR[189].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR190        SIUL2.MSCR[190].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR191        SIUL2.MSCR[191].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR192        SIUL2.MSCR[192].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR193        SIUL2.MSCR[193].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR194        SIUL2.MSCR[194].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR195        SIUL2.MSCR[195].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR196        SIUL2.MSCR[196].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR197        SIUL2.MSCR[197].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR198        SIUL2.MSCR[198].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR199        SIUL2.MSCR[199].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR200        SIUL2.MSCR[200].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR201        SIUL2.MSCR[201].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR202        SIUL2.MSCR[202].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR203        SIUL2.MSCR[203].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR204        SIUL2.MSCR[204].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR205        SIUL2.MSCR[205].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR206        SIUL2.MSCR[206].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR207        SIUL2.MSCR[207].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR208        SIUL2.MSCR[208].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR209        SIUL2.MSCR[209].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR210        SIUL2.MSCR[210].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR211        SIUL2.MSCR[211].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR212        SIUL2.MSCR[212].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR213        SIUL2.MSCR[213].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR214        SIUL2.MSCR[214].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR215        SIUL2.MSCR[215].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR216        SIUL2.MSCR[216].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR217        SIUL2.MSCR[217].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR218        SIUL2.MSCR[218].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_MSCR219        SIUL2.MSCR[219].R             /* SIUL2 Multiplexed Signal Configuration Register */
#define SIUL2_IMCR0          SIUL2.IMCR[0].R               /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR1          SIUL2.IMCR[1].R               /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR2          SIUL2.IMCR[2].R               /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR3          SIUL2.IMCR[3].R               /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR4          SIUL2.IMCR[4].R               /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR5          SIUL2.IMCR[5].R               /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR16         SIUL2.IMCR[16].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR17         SIUL2.IMCR[17].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR18         SIUL2.IMCR[18].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR19         SIUL2.IMCR[19].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR20         SIUL2.IMCR[20].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR21         SIUL2.IMCR[21].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR22         SIUL2.IMCR[22].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR23         SIUL2.IMCR[23].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR24         SIUL2.IMCR[24].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR25         SIUL2.IMCR[25].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR26         SIUL2.IMCR[26].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR27         SIUL2.IMCR[27].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR28         SIUL2.IMCR[28].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR29         SIUL2.IMCR[29].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR30         SIUL2.IMCR[30].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR31         SIUL2.IMCR[31].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR32         SIUL2.IMCR[32].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR33         SIUL2.IMCR[33].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR34         SIUL2.IMCR[34].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR35         SIUL2.IMCR[35].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR36         SIUL2.IMCR[36].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR37         SIUL2.IMCR[37].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR38         SIUL2.IMCR[38].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR39         SIUL2.IMCR[39].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR40         SIUL2.IMCR[40].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR41         SIUL2.IMCR[41].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR42         SIUL2.IMCR[42].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR43         SIUL2.IMCR[43].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR44         SIUL2.IMCR[44].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR45         SIUL2.IMCR[45].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR46         SIUL2.IMCR[46].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR47         SIUL2.IMCR[47].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR48         SIUL2.IMCR[48].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR49         SIUL2.IMCR[49].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR50         SIUL2.IMCR[50].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR51         SIUL2.IMCR[51].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR52         SIUL2.IMCR[52].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR53         SIUL2.IMCR[53].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR54         SIUL2.IMCR[54].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR55         SIUL2.IMCR[55].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR56         SIUL2.IMCR[56].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR57         SIUL2.IMCR[57].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR58         SIUL2.IMCR[58].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR59         SIUL2.IMCR[59].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR60         SIUL2.IMCR[60].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR61         SIUL2.IMCR[61].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR62         SIUL2.IMCR[62].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR63         SIUL2.IMCR[63].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR64         SIUL2.IMCR[64].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR65         SIUL2.IMCR[65].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR66         SIUL2.IMCR[66].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR67         SIUL2.IMCR[67].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR68         SIUL2.IMCR[68].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR69         SIUL2.IMCR[69].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR70         SIUL2.IMCR[70].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR71         SIUL2.IMCR[71].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR80         SIUL2.IMCR[80].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR81         SIUL2.IMCR[81].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR82         SIUL2.IMCR[82].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR83         SIUL2.IMCR[83].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR84         SIUL2.IMCR[84].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR85         SIUL2.IMCR[85].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR86         SIUL2.IMCR[86].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR87         SIUL2.IMCR[87].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR88         SIUL2.IMCR[88].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR89         SIUL2.IMCR[89].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR90         SIUL2.IMCR[90].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR91         SIUL2.IMCR[91].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR92         SIUL2.IMCR[92].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR93         SIUL2.IMCR[93].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR94         SIUL2.IMCR[94].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR95         SIUL2.IMCR[95].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR96         SIUL2.IMCR[96].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR97         SIUL2.IMCR[97].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR98         SIUL2.IMCR[98].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR99         SIUL2.IMCR[99].R              /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR100        SIUL2.IMCR[100].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR101        SIUL2.IMCR[101].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR102        SIUL2.IMCR[102].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR103        SIUL2.IMCR[103].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR112        SIUL2.IMCR[112].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR113        SIUL2.IMCR[113].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR114        SIUL2.IMCR[114].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR115        SIUL2.IMCR[115].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR116        SIUL2.IMCR[116].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR117        SIUL2.IMCR[117].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR118        SIUL2.IMCR[118].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR119        SIUL2.IMCR[119].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR120        SIUL2.IMCR[120].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR121        SIUL2.IMCR[121].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR122        SIUL2.IMCR[122].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR123        SIUL2.IMCR[123].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR124        SIUL2.IMCR[124].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR125        SIUL2.IMCR[125].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR126        SIUL2.IMCR[126].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR127        SIUL2.IMCR[127].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR128        SIUL2.IMCR[128].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR129        SIUL2.IMCR[129].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR130        SIUL2.IMCR[130].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR131        SIUL2.IMCR[131].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR132        SIUL2.IMCR[132].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR133        SIUL2.IMCR[133].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR134        SIUL2.IMCR[134].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR135        SIUL2.IMCR[135].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR144        SIUL2.IMCR[144].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR145        SIUL2.IMCR[145].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR146        SIUL2.IMCR[146].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR147        SIUL2.IMCR[147].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR148        SIUL2.IMCR[148].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR149        SIUL2.IMCR[149].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR152        SIUL2.IMCR[152].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR153        SIUL2.IMCR[153].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR154        SIUL2.IMCR[154].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR155        SIUL2.IMCR[155].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR156        SIUL2.IMCR[156].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR157        SIUL2.IMCR[157].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR158        SIUL2.IMCR[158].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR159        SIUL2.IMCR[159].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR160        SIUL2.IMCR[160].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR161        SIUL2.IMCR[161].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR162        SIUL2.IMCR[162].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR163        SIUL2.IMCR[163].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR164        SIUL2.IMCR[164].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR165        SIUL2.IMCR[165].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR166        SIUL2.IMCR[166].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR167        SIUL2.IMCR[167].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR168        SIUL2.IMCR[168].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR169        SIUL2.IMCR[169].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR170        SIUL2.IMCR[170].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR171        SIUL2.IMCR[171].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR172        SIUL2.IMCR[172].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR173        SIUL2.IMCR[173].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR174        SIUL2.IMCR[174].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR175        SIUL2.IMCR[175].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR176        SIUL2.IMCR[176].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR177        SIUL2.IMCR[177].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR178        SIUL2.IMCR[178].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR179        SIUL2.IMCR[179].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR180        SIUL2.IMCR[180].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR181        SIUL2.IMCR[181].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR182        SIUL2.IMCR[182].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR183        SIUL2.IMCR[183].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR184        SIUL2.IMCR[184].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR185        SIUL2.IMCR[185].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR186        SIUL2.IMCR[186].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR187        SIUL2.IMCR[187].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR188        SIUL2.IMCR[188].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR189        SIUL2.IMCR[189].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR190        SIUL2.IMCR[190].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR191        SIUL2.IMCR[191].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR192        SIUL2.IMCR[192].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR193        SIUL2.IMCR[193].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR194        SIUL2.IMCR[194].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR195        SIUL2.IMCR[195].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR196        SIUL2.IMCR[196].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR197        SIUL2.IMCR[197].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR198        SIUL2.IMCR[198].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR199        SIUL2.IMCR[199].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR200        SIUL2.IMCR[200].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR201        SIUL2.IMCR[201].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR202        SIUL2.IMCR[202].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR211        SIUL2.IMCR[211].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR212        SIUL2.IMCR[212].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR213        SIUL2.IMCR[213].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR214        SIUL2.IMCR[214].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR215        SIUL2.IMCR[215].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR216        SIUL2.IMCR[216].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR217        SIUL2.IMCR[217].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR218        SIUL2.IMCR[218].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR219        SIUL2.IMCR[219].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR220        SIUL2.IMCR[220].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR221        SIUL2.IMCR[221].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR222        SIUL2.IMCR[222].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR223        SIUL2.IMCR[223].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR224        SIUL2.IMCR[224].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR225        SIUL2.IMCR[225].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR226        SIUL2.IMCR[226].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR227        SIUL2.IMCR[227].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR228        SIUL2.IMCR[228].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR229        SIUL2.IMCR[229].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR230        SIUL2.IMCR[230].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR231        SIUL2.IMCR[231].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR232        SIUL2.IMCR[232].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR233        SIUL2.IMCR[233].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR234        SIUL2.IMCR[234].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR235        SIUL2.IMCR[235].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR236        SIUL2.IMCR[236].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR237        SIUL2.IMCR[237].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR238        SIUL2.IMCR[238].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR239        SIUL2.IMCR[239].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR240        SIUL2.IMCR[240].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR241        SIUL2.IMCR[241].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR242        SIUL2.IMCR[242].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR243        SIUL2.IMCR[243].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR244        SIUL2.IMCR[244].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR245        SIUL2.IMCR[245].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR246        SIUL2.IMCR[246].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR247        SIUL2.IMCR[247].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR248        SIUL2.IMCR[248].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR249        SIUL2.IMCR[249].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR250        SIUL2.IMCR[250].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR251        SIUL2.IMCR[251].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR252        SIUL2.IMCR[252].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR253        SIUL2.IMCR[253].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR254        SIUL2.IMCR[254].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR255        SIUL2.IMCR[255].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR256        SIUL2.IMCR[256].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR257        SIUL2.IMCR[257].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR258        SIUL2.IMCR[258].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR259        SIUL2.IMCR[259].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR260        SIUL2.IMCR[260].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR261        SIUL2.IMCR[261].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR262        SIUL2.IMCR[262].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR263        SIUL2.IMCR[263].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR264        SIUL2.IMCR[264].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR265        SIUL2.IMCR[265].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR266        SIUL2.IMCR[266].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR267        SIUL2.IMCR[267].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR268        SIUL2.IMCR[268].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR289        SIUL2.IMCR[289].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR290        SIUL2.IMCR[290].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR291        SIUL2.IMCR[291].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR292        SIUL2.IMCR[292].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR293        SIUL2.IMCR[293].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR294        SIUL2.IMCR[294].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR295        SIUL2.IMCR[295].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR296        SIUL2.IMCR[296].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR297        SIUL2.IMCR[297].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR298        SIUL2.IMCR[298].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR299        SIUL2.IMCR[299].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR300        SIUL2.IMCR[300].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR301        SIUL2.IMCR[301].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR302        SIUL2.IMCR[302].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR303        SIUL2.IMCR[303].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR304        SIUL2.IMCR[304].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR305        SIUL2.IMCR[305].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR306        SIUL2.IMCR[306].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR307        SIUL2.IMCR[307].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR308        SIUL2.IMCR[308].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR309        SIUL2.IMCR[309].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR315        SIUL2.IMCR[315].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR316        SIUL2.IMCR[316].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR317        SIUL2.IMCR[317].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR318        SIUL2.IMCR[318].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR319        SIUL2.IMCR[319].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR320        SIUL2.IMCR[320].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR321        SIUL2.IMCR[321].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR322        SIUL2.IMCR[322].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR323        SIUL2.IMCR[323].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR324        SIUL2.IMCR[324].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR325        SIUL2.IMCR[325].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR343        SIUL2.IMCR[343].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR344        SIUL2.IMCR[344].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR345        SIUL2.IMCR[345].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR346        SIUL2.IMCR[346].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR347        SIUL2.IMCR[347].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR348        SIUL2.IMCR[348].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR349        SIUL2.IMCR[349].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR350        SIUL2.IMCR[350].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR351        SIUL2.IMCR[351].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR352        SIUL2.IMCR[352].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR353        SIUL2.IMCR[353].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR354        SIUL2.IMCR[354].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR355        SIUL2.IMCR[355].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR356        SIUL2.IMCR[356].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR357        SIUL2.IMCR[357].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR358        SIUL2.IMCR[358].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR359        SIUL2.IMCR[359].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR360        SIUL2.IMCR[360].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR361        SIUL2.IMCR[361].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR362        SIUL2.IMCR[362].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR363        SIUL2.IMCR[363].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR364        SIUL2.IMCR[364].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR365        SIUL2.IMCR[365].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR366        SIUL2.IMCR[366].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR367        SIUL2.IMCR[367].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR368        SIUL2.IMCR[368].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR369        SIUL2.IMCR[369].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR370        SIUL2.IMCR[370].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR371        SIUL2.IMCR[371].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR372        SIUL2.IMCR[372].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR373        SIUL2.IMCR[373].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR374        SIUL2.IMCR[374].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR375        SIUL2.IMCR[375].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR376        SIUL2.IMCR[376].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR377        SIUL2.IMCR[377].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR378        SIUL2.IMCR[378].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR379        SIUL2.IMCR[379].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR380        SIUL2.IMCR[380].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR381        SIUL2.IMCR[381].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR382        SIUL2.IMCR[382].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR383        SIUL2.IMCR[383].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR384        SIUL2.IMCR[384].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR385        SIUL2.IMCR[385].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR398        SIUL2.IMCR[398].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR399        SIUL2.IMCR[399].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR400        SIUL2.IMCR[400].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR401        SIUL2.IMCR[401].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR402        SIUL2.IMCR[402].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR403        SIUL2.IMCR[403].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR404        SIUL2.IMCR[404].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR405        SIUL2.IMCR[405].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR406        SIUL2.IMCR[406].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR407        SIUL2.IMCR[407].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_IMCR408        SIUL2.IMCR[408].R             /* SIUL2 Input Multiplexed Signal Configuration Register */
#define SIUL2_GPDO3          SIUL2.GPDO3.R                 /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO2          SIUL2.GPDO2.R                 /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO1          SIUL2.GPDO1.R                 /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO0          SIUL2.GPDO0.R                 /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO7          SIUL2.GPDO7.R                 /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO6          SIUL2.GPDO6.R                 /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO5          SIUL2.GPDO5.R                 /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO4          SIUL2.GPDO4.R                 /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO11         SIUL2.GPDO11.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO10         SIUL2.GPDO10.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO9          SIUL2.GPDO9.R                 /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO8          SIUL2.GPDO8.R                 /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO15         SIUL2.GPDO15.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO14         SIUL2.GPDO14.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO13         SIUL2.GPDO13.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO12         SIUL2.GPDO12.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO19         SIUL2.GPDO19.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO18         SIUL2.GPDO18.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO17         SIUL2.GPDO17.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO16         SIUL2.GPDO16.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO23         SIUL2.GPDO23.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO22         SIUL2.GPDO22.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO21         SIUL2.GPDO21.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO20         SIUL2.GPDO20.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO27         SIUL2.GPDO27.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO26         SIUL2.GPDO26.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO25         SIUL2.GPDO25.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO24         SIUL2.GPDO24.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO31         SIUL2.GPDO31.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO30         SIUL2.GPDO30.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO29         SIUL2.GPDO29.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO28         SIUL2.GPDO28.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO35         SIUL2.GPDO35.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO34         SIUL2.GPDO34.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO33         SIUL2.GPDO33.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO32         SIUL2.GPDO32.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO37         SIUL2.GPDO37.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO36         SIUL2.GPDO36.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO43         SIUL2.GPDO43.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO42         SIUL2.GPDO42.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO41         SIUL2.GPDO41.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO40         SIUL2.GPDO40.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO47         SIUL2.GPDO47.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO46         SIUL2.GPDO46.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO45         SIUL2.GPDO45.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO44         SIUL2.GPDO44.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO51         SIUL2.GPDO51.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO50         SIUL2.GPDO50.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO49         SIUL2.GPDO49.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO48         SIUL2.GPDO48.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO55         SIUL2.GPDO55.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO54         SIUL2.GPDO54.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO53         SIUL2.GPDO53.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO52         SIUL2.GPDO52.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO59         SIUL2.GPDO59.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO58         SIUL2.GPDO58.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO57         SIUL2.GPDO57.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO56         SIUL2.GPDO56.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO63         SIUL2.GPDO63.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO62         SIUL2.GPDO62.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO61         SIUL2.GPDO61.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO60         SIUL2.GPDO60.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO67         SIUL2.GPDO67.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO66         SIUL2.GPDO66.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO65         SIUL2.GPDO65.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO64         SIUL2.GPDO64.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO71         SIUL2.GPDO71.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO70         SIUL2.GPDO70.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO69         SIUL2.GPDO69.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO68         SIUL2.GPDO68.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO75         SIUL2.GPDO75.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO74         SIUL2.GPDO74.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO73         SIUL2.GPDO73.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO72         SIUL2.GPDO72.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO79         SIUL2.GPDO79.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO78         SIUL2.GPDO78.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO77         SIUL2.GPDO77.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO76         SIUL2.GPDO76.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO83         SIUL2.GPDO83.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO82         SIUL2.GPDO82.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO81         SIUL2.GPDO81.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO80         SIUL2.GPDO80.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO87         SIUL2.GPDO87.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO86         SIUL2.GPDO86.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO85         SIUL2.GPDO85.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO84         SIUL2.GPDO84.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO91         SIUL2.GPDO91.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO90         SIUL2.GPDO90.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO89         SIUL2.GPDO89.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO88         SIUL2.GPDO88.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO95         SIUL2.GPDO95.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO94         SIUL2.GPDO94.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO93         SIUL2.GPDO93.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO92         SIUL2.GPDO92.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO99         SIUL2.GPDO99.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO98         SIUL2.GPDO98.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO97         SIUL2.GPDO97.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO96         SIUL2.GPDO96.R                /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO103        SIUL2.GPDO103.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO102        SIUL2.GPDO102.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO101        SIUL2.GPDO101.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO100        SIUL2.GPDO100.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO107        SIUL2.GPDO107.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO106        SIUL2.GPDO106.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO105        SIUL2.GPDO105.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO104        SIUL2.GPDO104.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO111        SIUL2.GPDO111.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO110        SIUL2.GPDO110.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO109        SIUL2.GPDO109.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO108        SIUL2.GPDO108.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO115        SIUL2.GPDO115.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO114        SIUL2.GPDO114.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO113        SIUL2.GPDO113.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO112        SIUL2.GPDO112.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO119        SIUL2.GPDO119.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO118        SIUL2.GPDO118.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO117        SIUL2.GPDO117.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO116        SIUL2.GPDO116.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO123        SIUL2.GPDO123.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO122        SIUL2.GPDO122.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO121        SIUL2.GPDO121.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO120        SIUL2.GPDO120.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO127        SIUL2.GPDO127.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO126        SIUL2.GPDO126.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO125        SIUL2.GPDO125.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO124        SIUL2.GPDO124.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO131        SIUL2.GPDO131.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO130        SIUL2.GPDO130.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO129        SIUL2.GPDO129.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO128        SIUL2.GPDO128.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO135        SIUL2.GPDO135.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO134        SIUL2.GPDO134.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO133        SIUL2.GPDO133.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO132        SIUL2.GPDO132.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO139        SIUL2.GPDO139.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO138        SIUL2.GPDO138.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO137        SIUL2.GPDO137.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO136        SIUL2.GPDO136.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO143        SIUL2.GPDO143.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO142        SIUL2.GPDO142.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO141        SIUL2.GPDO141.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO140        SIUL2.GPDO140.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO147        SIUL2.GPDO147.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO146        SIUL2.GPDO146.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO145        SIUL2.GPDO145.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO144        SIUL2.GPDO144.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO151        SIUL2.GPDO151.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO150        SIUL2.GPDO150.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO149        SIUL2.GPDO149.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO148        SIUL2.GPDO148.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO155        SIUL2.GPDO155.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO154        SIUL2.GPDO154.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO153        SIUL2.GPDO153.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO152        SIUL2.GPDO152.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO159        SIUL2.GPDO159.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO158        SIUL2.GPDO158.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO157        SIUL2.GPDO157.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO156        SIUL2.GPDO156.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO163        SIUL2.GPDO163.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO162        SIUL2.GPDO162.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO161        SIUL2.GPDO161.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO160        SIUL2.GPDO160.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO167        SIUL2.GPDO167.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO166        SIUL2.GPDO166.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO165        SIUL2.GPDO165.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO164        SIUL2.GPDO164.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO171        SIUL2.GPDO171.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO170        SIUL2.GPDO170.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO169        SIUL2.GPDO169.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO168        SIUL2.GPDO168.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO175        SIUL2.GPDO175.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO174        SIUL2.GPDO174.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO173        SIUL2.GPDO173.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO172        SIUL2.GPDO172.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO179        SIUL2.GPDO179.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO178        SIUL2.GPDO178.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO177        SIUL2.GPDO177.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO176        SIUL2.GPDO176.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO183        SIUL2.GPDO183.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO182        SIUL2.GPDO182.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO181        SIUL2.GPDO181.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO180        SIUL2.GPDO180.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO187        SIUL2.GPDO187.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO186        SIUL2.GPDO186.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO185        SIUL2.GPDO185.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO184        SIUL2.GPDO184.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO191        SIUL2.GPDO191.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO190        SIUL2.GPDO190.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO189        SIUL2.GPDO189.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO188        SIUL2.GPDO188.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO195        SIUL2.GPDO195.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO194        SIUL2.GPDO194.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO193        SIUL2.GPDO193.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO192        SIUL2.GPDO192.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO199        SIUL2.GPDO199.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO198        SIUL2.GPDO198.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO197        SIUL2.GPDO197.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO196        SIUL2.GPDO196.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO203        SIUL2.GPDO203.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO202        SIUL2.GPDO202.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO201        SIUL2.GPDO201.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO200        SIUL2.GPDO200.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO207        SIUL2.GPDO207.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO206        SIUL2.GPDO206.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO205        SIUL2.GPDO205.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO204        SIUL2.GPDO204.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO211        SIUL2.GPDO211.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO210        SIUL2.GPDO210.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO209        SIUL2.GPDO209.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO208        SIUL2.GPDO208.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO215        SIUL2.GPDO215.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO214        SIUL2.GPDO214.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO213        SIUL2.GPDO213.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO212        SIUL2.GPDO212.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO219        SIUL2.GPDO219.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO218        SIUL2.GPDO218.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO217        SIUL2.GPDO217.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDO216        SIUL2.GPDO216.R               /* SIUL2 GPIO Pad Data Output Register */
#define SIUL2_GPDI3          SIUL2.GPDI3.R                 /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI2          SIUL2.GPDI2.R                 /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI1          SIUL2.GPDI1.R                 /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI0          SIUL2.GPDI0.R                 /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI7          SIUL2.GPDI7.R                 /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI6          SIUL2.GPDI6.R                 /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI5          SIUL2.GPDI5.R                 /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI4          SIUL2.GPDI4.R                 /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI11         SIUL2.GPDI11.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI10         SIUL2.GPDI10.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI9          SIUL2.GPDI9.R                 /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI8          SIUL2.GPDI8.R                 /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI15         SIUL2.GPDI15.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI14         SIUL2.GPDI14.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI13         SIUL2.GPDI13.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI12         SIUL2.GPDI12.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI19         SIUL2.GPDI19.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI18         SIUL2.GPDI18.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI17         SIUL2.GPDI17.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI16         SIUL2.GPDI16.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI23         SIUL2.GPDI23.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI22         SIUL2.GPDI22.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI21         SIUL2.GPDI21.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI20         SIUL2.GPDI20.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI27         SIUL2.GPDI27.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI26         SIUL2.GPDI26.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI25         SIUL2.GPDI25.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI24         SIUL2.GPDI24.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI31         SIUL2.GPDI31.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI30         SIUL2.GPDI30.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI29         SIUL2.GPDI29.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI28         SIUL2.GPDI28.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI35         SIUL2.GPDI35.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI34         SIUL2.GPDI34.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI33         SIUL2.GPDI33.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI32         SIUL2.GPDI32.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI37         SIUL2.GPDI37.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI36         SIUL2.GPDI36.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI43         SIUL2.GPDI43.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI42         SIUL2.GPDI42.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI41         SIUL2.GPDI41.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI40         SIUL2.GPDI40.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI47         SIUL2.GPDI47.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI46         SIUL2.GPDI46.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI45         SIUL2.GPDI45.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI44         SIUL2.GPDI44.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI51         SIUL2.GPDI51.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI50         SIUL2.GPDI50.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI49         SIUL2.GPDI49.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI48         SIUL2.GPDI48.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI55         SIUL2.GPDI55.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI54         SIUL2.GPDI54.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI53         SIUL2.GPDI53.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI52         SIUL2.GPDI52.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI59         SIUL2.GPDI59.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI58         SIUL2.GPDI58.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI57         SIUL2.GPDI57.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI56         SIUL2.GPDI56.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI63         SIUL2.GPDI63.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI62         SIUL2.GPDI62.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI61         SIUL2.GPDI61.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI60         SIUL2.GPDI60.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI67         SIUL2.GPDI67.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI66         SIUL2.GPDI66.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI65         SIUL2.GPDI65.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI64         SIUL2.GPDI64.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI71         SIUL2.GPDI71.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI70         SIUL2.GPDI70.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI69         SIUL2.GPDI69.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI68         SIUL2.GPDI68.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI75         SIUL2.GPDI75.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI74         SIUL2.GPDI74.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI73         SIUL2.GPDI73.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI72         SIUL2.GPDI72.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI79         SIUL2.GPDI79.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI78         SIUL2.GPDI78.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI77         SIUL2.GPDI77.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI76         SIUL2.GPDI76.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI83         SIUL2.GPDI83.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI82         SIUL2.GPDI82.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI81         SIUL2.GPDI81.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI80         SIUL2.GPDI80.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI87         SIUL2.GPDI87.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI86         SIUL2.GPDI86.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI85         SIUL2.GPDI85.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI84         SIUL2.GPDI84.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI91         SIUL2.GPDI91.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI90         SIUL2.GPDI90.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI89         SIUL2.GPDI89.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI88         SIUL2.GPDI88.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI95         SIUL2.GPDI95.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI94         SIUL2.GPDI94.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI93         SIUL2.GPDI93.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI92         SIUL2.GPDI92.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI99         SIUL2.GPDI99.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI98         SIUL2.GPDI98.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI97         SIUL2.GPDI97.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI96         SIUL2.GPDI96.R                /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI103        SIUL2.GPDI103.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI102        SIUL2.GPDI102.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI101        SIUL2.GPDI101.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI100        SIUL2.GPDI100.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI107        SIUL2.GPDI107.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI106        SIUL2.GPDI106.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI105        SIUL2.GPDI105.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI104        SIUL2.GPDI104.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI111        SIUL2.GPDI111.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI110        SIUL2.GPDI110.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI109        SIUL2.GPDI109.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI108        SIUL2.GPDI108.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI115        SIUL2.GPDI115.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI114        SIUL2.GPDI114.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI113        SIUL2.GPDI113.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI112        SIUL2.GPDI112.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI119        SIUL2.GPDI119.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI118        SIUL2.GPDI118.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI117        SIUL2.GPDI117.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI116        SIUL2.GPDI116.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI123        SIUL2.GPDI123.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI122        SIUL2.GPDI122.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI121        SIUL2.GPDI121.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI120        SIUL2.GPDI120.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI127        SIUL2.GPDI127.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI126        SIUL2.GPDI126.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI125        SIUL2.GPDI125.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI124        SIUL2.GPDI124.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI131        SIUL2.GPDI131.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI130        SIUL2.GPDI130.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI129        SIUL2.GPDI129.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI128        SIUL2.GPDI128.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI135        SIUL2.GPDI135.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI134        SIUL2.GPDI134.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI133        SIUL2.GPDI133.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI132        SIUL2.GPDI132.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI139        SIUL2.GPDI139.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI138        SIUL2.GPDI138.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI137        SIUL2.GPDI137.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI136        SIUL2.GPDI136.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI143        SIUL2.GPDI143.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI142        SIUL2.GPDI142.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI141        SIUL2.GPDI141.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI140        SIUL2.GPDI140.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI147        SIUL2.GPDI147.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI146        SIUL2.GPDI146.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI145        SIUL2.GPDI145.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI144        SIUL2.GPDI144.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI151        SIUL2.GPDI151.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI150        SIUL2.GPDI150.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI149        SIUL2.GPDI149.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI148        SIUL2.GPDI148.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI155        SIUL2.GPDI155.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI154        SIUL2.GPDI154.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI153        SIUL2.GPDI153.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI152        SIUL2.GPDI152.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI159        SIUL2.GPDI159.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI158        SIUL2.GPDI158.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI157        SIUL2.GPDI157.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI156        SIUL2.GPDI156.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI163        SIUL2.GPDI163.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI162        SIUL2.GPDI162.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI161        SIUL2.GPDI161.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI160        SIUL2.GPDI160.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI167        SIUL2.GPDI167.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI166        SIUL2.GPDI166.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI165        SIUL2.GPDI165.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI164        SIUL2.GPDI164.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI171        SIUL2.GPDI171.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI170        SIUL2.GPDI170.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI169        SIUL2.GPDI169.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI168        SIUL2.GPDI168.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI175        SIUL2.GPDI175.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI174        SIUL2.GPDI174.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI173        SIUL2.GPDI173.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI172        SIUL2.GPDI172.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI179        SIUL2.GPDI179.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI178        SIUL2.GPDI178.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI177        SIUL2.GPDI177.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI176        SIUL2.GPDI176.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI183        SIUL2.GPDI183.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI182        SIUL2.GPDI182.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI181        SIUL2.GPDI181.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI180        SIUL2.GPDI180.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI187        SIUL2.GPDI187.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI186        SIUL2.GPDI186.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI185        SIUL2.GPDI185.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI184        SIUL2.GPDI184.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI191        SIUL2.GPDI191.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI190        SIUL2.GPDI190.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI189        SIUL2.GPDI189.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI188        SIUL2.GPDI188.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI195        SIUL2.GPDI195.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI194        SIUL2.GPDI194.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI193        SIUL2.GPDI193.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI192        SIUL2.GPDI192.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI199        SIUL2.GPDI199.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI198        SIUL2.GPDI198.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI197        SIUL2.GPDI197.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI196        SIUL2.GPDI196.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI203        SIUL2.GPDI203.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI202        SIUL2.GPDI202.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI201        SIUL2.GPDI201.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI200        SIUL2.GPDI200.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI207        SIUL2.GPDI207.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI206        SIUL2.GPDI206.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI205        SIUL2.GPDI205.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI204        SIUL2.GPDI204.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI211        SIUL2.GPDI211.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI210        SIUL2.GPDI210.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI209        SIUL2.GPDI209.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI208        SIUL2.GPDI208.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI215        SIUL2.GPDI215.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI214        SIUL2.GPDI214.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI213        SIUL2.GPDI213.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI212        SIUL2.GPDI212.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI219        SIUL2.GPDI219.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI218        SIUL2.GPDI218.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI217        SIUL2.GPDI217.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_GPDI216        SIUL2.GPDI216.R               /* SIUL2 GPIO Pad Data Input Register */
#define SIUL2_PGPDO1         SIUL2.PGPDO1.R                /* SIUL2 Parallel GPIO Pad Data Out Register */
#define SIUL2_PGPDO0         SIUL2.PGPDO0.R                /* SIUL2 Parallel GPIO Pad Data Out Register */
#define SIUL2_PGPDO3         SIUL2.PGPDO3.R                /* SIUL2 Parallel GPIO Pad Data Out Register */
#define SIUL2_PGPDO2         SIUL2.PGPDO2.R                /* SIUL2 Parallel GPIO Pad Data Out Register */
#define SIUL2_PGPDO5         SIUL2.PGPDO5.R                /* SIUL2 Parallel GPIO Pad Data Out Register */
#define SIUL2_PGPDO4         SIUL2.PGPDO4.R                /* SIUL2 Parallel GPIO Pad Data Out Register */
#define SIUL2_PGPDO7         SIUL2.PGPDO7.R                /* SIUL2 Parallel GPIO Pad Data Out Register */
#define SIUL2_PGPDO6         SIUL2.PGPDO6.R                /* SIUL2 Parallel GPIO Pad Data Out Register */
#define SIUL2_PGPDO9         SIUL2.PGPDO9.R                /* SIUL2 Parallel GPIO Pad Data Out Register */
#define SIUL2_PGPDO8         SIUL2.PGPDO8.R                /* SIUL2 Parallel GPIO Pad Data Out Register */
#define SIUL2_PGPDO11        SIUL2.PGPDO11.R               /* SIUL2 Parallel GPIO Pad Data Out Register */
#define SIUL2_PGPDO10        SIUL2.PGPDO10.R               /* SIUL2 Parallel GPIO Pad Data Out Register */
#define SIUL2_PGPDO13        SIUL2.PGPDO13.R               /* SIUL2 Parallel GPIO Pad Data Out Register */
#define SIUL2_PGPDO12        SIUL2.PGPDO12.R               /* SIUL2 Parallel GPIO Pad Data Out Register */
#define SIUL2_PGPDI1         SIUL2.PGPDI1.R                /* SIUL2 Parallel GPIO Pad Data In Register */
#define SIUL2_PGPDI0         SIUL2.PGPDI0.R                /* SIUL2 Parallel GPIO Pad Data In Register */
#define SIUL2_PGPDI3         SIUL2.PGPDI3.R                /* SIUL2 Parallel GPIO Pad Data In Register */
#define SIUL2_PGPDI2         SIUL2.PGPDI2.R                /* SIUL2 Parallel GPIO Pad Data In Register */
#define SIUL2_PGPDI5         SIUL2.PGPDI5.R                /* SIUL2 Parallel GPIO Pad Data In Register */
#define SIUL2_PGPDI4         SIUL2.PGPDI4.R                /* SIUL2 Parallel GPIO Pad Data In Register */
#define SIUL2_PGPDI7         SIUL2.PGPDI7.R                /* SIUL2 Parallel GPIO Pad Data In Register */
#define SIUL2_PGPDI6         SIUL2.PGPDI6.R                /* SIUL2 Parallel GPIO Pad Data In Register */
#define SIUL2_PGPDI9         SIUL2.PGPDI9.R                /* SIUL2 Parallel GPIO Pad Data In Register */
#define SIUL2_PGPDI8         SIUL2.PGPDI8.R                /* SIUL2 Parallel GPIO Pad Data In Register */
#define SIUL2_PGPDI11        SIUL2.PGPDI11.R               /* SIUL2 Parallel GPIO Pad Data In Register */
#define SIUL2_PGPDI10        SIUL2.PGPDI10.R               /* SIUL2 Parallel GPIO Pad Data In Register */
#define SIUL2_PGPDI13        SIUL2.PGPDI13.R               /* SIUL2 Parallel GPIO Pad Data In Register */
#define SIUL2_PGPDI12        SIUL2.PGPDI12.R               /* SIUL2 Parallel GPIO Pad Data In Register */
#define SIUL2_MPGPDO0        SIUL2.MPGPDO[0].R             /* SIUL2 Masked Parallel GPIO Pad Data Out Register */
#define SIUL2_MPGPDO1        SIUL2.MPGPDO[1].R             /* SIUL2 Masked Parallel GPIO Pad Data Out Register */
#define SIUL2_MPGPDO2        SIUL2.MPGPDO[2].R             /* SIUL2 Masked Parallel GPIO Pad Data Out Register */
#define SIUL2_MPGPDO3        SIUL2.MPGPDO[3].R             /* SIUL2 Masked Parallel GPIO Pad Data Out Register */
#define SIUL2_MPGPDO4        SIUL2.MPGPDO[4].R             /* SIUL2 Masked Parallel GPIO Pad Data Out Register */
#define SIUL2_MPGPDO5        SIUL2.MPGPDO[5].R             /* SIUL2 Masked Parallel GPIO Pad Data Out Register */
#define SIUL2_MPGPDO6        SIUL2.MPGPDO[6].R             /* SIUL2 Masked Parallel GPIO Pad Data Out Register */
#define SIUL2_MPGPDO7        SIUL2.MPGPDO[7].R             /* SIUL2 Masked Parallel GPIO Pad Data Out Register */
#define SIUL2_MPGPDO8        SIUL2.MPGPDO[8].R             /* SIUL2 Masked Parallel GPIO Pad Data Out Register */
#define SIUL2_MPGPDO9        SIUL2.MPGPDO[9].R             /* SIUL2 Masked Parallel GPIO Pad Data Out Register */
#define SIUL2_MPGPDO10       SIUL2.MPGPDO[10].R            /* SIUL2 Masked Parallel GPIO Pad Data Out Register */
#define SIUL2_MPGPDO11       SIUL2.MPGPDO[11].R            /* SIUL2 Masked Parallel GPIO Pad Data Out Register */
#define SIUL2_MPGPDO12       SIUL2.MPGPDO[12].R            /* SIUL2 Masked Parallel GPIO Pad Data Out Register */
#define SIUL2_MPGPDO13       SIUL2.MPGPDO[13].R            /* SIUL2 Masked Parallel GPIO Pad Data Out Register */

/* STCU */
#define STCU_RUNSW           STCU.RUNSW.R                  /* STCU2 Run Software */
#define STCU_SKC             STCU.SKC.R                    /* STCU2 SK Code */
#define STCU_CFG             STCU.CFG.R                    /* STCU2 Configuration */
#define STCU_WDG             STCU.WDG.R                    /* STCU2 Watchdog Granularity */
#define STCU_ERR_STAT        STCU.ERR_STAT.R               /* STCU2 Error */
#define STCU_ERR_FM          STCU.ERR_FM.R                 /* STCU2 Error FM */
#define STCU_LBSSW0          STCU.LBSSW0.R                 /* STCU2 Online LBIST Status */
#define STCU_LBESW0          STCU.LBESW0.R                 /* STCU2 Online LBIST End Flag */
#define STCU_LBUFM0          STCU.LBUFM0.R                 /* STCU2 Online LBIST Unrecoverable FM */
#define STCU_MBSSW0          STCU.MBSSW0.R                 /* STCU2 Online MBIST Status */
#define STCU_MBESW0          STCU.MBESW0.R                 /* STCU2 Online MBIST End Flag */
#define STCU_MBUFM0          STCU.MBUFM0.R                 /* STCU2 MBIST Unrecoverable FM */
#define STCU_LB_CTRL0        STCU.LB[0].CTRL.R             /* STCU2 LBIST Control */
#define STCU_LB_PCS0         STCU.LB[0].PCS.R              /* STCU2 LBIST PC Stop */
#define STCU_LB_MISRELSW0    STCU.LB[0].MISRELSW.R         /* STCU2 Online LBIST MISR Expected Low */
#define STCU_LB_MISREHSW0    STCU.LB[0].MISREHSW.R         /* STCU2 Online LBIST MISR Expected High */
#define STCU_LB_MISRRLSW0    STCU.LB[0].MISRRLSW.R         /* STCU2 Online LBIST MISR Read Low */
#define STCU_LB_MISRRHSW0    STCU.LB[0].MISRRHSW.R         /* STCU2 Online LBIST MISR Read High */
#define STCU_ALGOSEL         STCU.ALGOSEL.R                /* STCU2 Algorithm Select */
#define STCU_STGGR           STCU.STGGR.R                  /* STCU2 MBIST Stagger */
#define STCU_BSTART          STCU.BSTART.R                 /* STCU2 BIST Start */
#define STCU_MB_CTRL0        STCU.MB_CTRL[0].R             /* STCU2 MBIST Control */
#define STCU_MB_CTRL1        STCU.MB_CTRL[1].R             /* STCU2 MBIST Control */
#define STCU_MB_CTRL2        STCU.MB_CTRL[2].R             /* STCU2 MBIST Control */
#define STCU_MB_CTRL3        STCU.MB_CTRL[3].R             /* STCU2 MBIST Control */
#define STCU_MB_CTRL4        STCU.MB_CTRL[4].R             /* STCU2 MBIST Control */
#define STCU_MB_CTRL5        STCU.MB_CTRL[5].R             /* STCU2 MBIST Control */
#define STCU_MB_CTRL6        STCU.MB_CTRL[6].R             /* STCU2 MBIST Control */
#define STCU_MB_CTRL7        STCU.MB_CTRL[7].R             /* STCU2 MBIST Control */
#define STCU_MB_CTRL8        STCU.MB_CTRL[8].R             /* STCU2 MBIST Control */
#define STCU_MB_CTRL9        STCU.MB_CTRL[9].R             /* STCU2 MBIST Control */
#define STCU_MB_CTRL10       STCU.MB_CTRL[10].R            /* STCU2 MBIST Control */
#define STCU_MB_CTRL11       STCU.MB_CTRL[11].R            /* STCU2 MBIST Control */

/* STM */
#define STM_0_CR             STM_0.CR.R                    /* Control */
#define STM_0_CNT            STM_0.CNT.R                   /* Count */
#define STM_0_CCR0           STM_0.CHANNEL[0].CCR.R        /* Channel Control */
#define STM_0_CIR0           STM_0.CHANNEL[0].CIR.R        /* Channel Interrupt */
#define STM_0_CMP0           STM_0.CHANNEL[0].CMP.R        /* Channel Compare */
#define STM_0_CCR1           STM_0.CHANNEL[1].CCR.R        /* Channel Control */
#define STM_0_CIR1           STM_0.CHANNEL[1].CIR.R        /* Channel Interrupt */
#define STM_0_CMP1           STM_0.CHANNEL[1].CMP.R        /* Channel Compare */
#define STM_0_CCR2           STM_0.CHANNEL[2].CCR.R        /* Channel Control */
#define STM_0_CIR2           STM_0.CHANNEL[2].CIR.R        /* Channel Interrupt */
#define STM_0_CMP2           STM_0.CHANNEL[2].CMP.R        /* Channel Compare */
#define STM_0_CCR3           STM_0.CHANNEL[3].CCR.R        /* Channel Control */
#define STM_0_CIR3           STM_0.CHANNEL[3].CIR.R        /* Channel Interrupt */
#define STM_0_CMP3           STM_0.CHANNEL[3].CMP.R        /* Channel Compare */

#define STM_1_CR             STM_1.CR.R                    /* Control */
#define STM_1_CNT            STM_1.CNT.R                   /* Count */
#define STM_1_CCR0           STM_1.CHANNEL[0].CCR.R        /* Channel Control */
#define STM_1_CIR0           STM_1.CHANNEL[0].CIR.R        /* Channel Interrupt */
#define STM_1_CMP0           STM_1.CHANNEL[0].CMP.R        /* Channel Compare */
#define STM_1_CCR1           STM_1.CHANNEL[1].CCR.R        /* Channel Control */
#define STM_1_CIR1           STM_1.CHANNEL[1].CIR.R        /* Channel Interrupt */
#define STM_1_CMP1           STM_1.CHANNEL[1].CMP.R        /* Channel Compare */
#define STM_1_CCR2           STM_1.CHANNEL[2].CCR.R        /* Channel Control */
#define STM_1_CIR2           STM_1.CHANNEL[2].CIR.R        /* Channel Interrupt */
#define STM_1_CMP2           STM_1.CHANNEL[2].CMP.R        /* Channel Compare */
#define STM_1_CCR3           STM_1.CHANNEL[3].CCR.R        /* Channel Control */
#define STM_1_CIR3           STM_1.CHANNEL[3].CIR.R        /* Channel Interrupt */
#define STM_1_CMP3           STM_1.CHANNEL[3].CMP.R        /* Channel Compare */

/* SWT */
#define SWT_1_CR             SWT_1.CR.R                    /* Control */
#define SWT_1_IR             SWT_1.IR.R                    /* Interrupt */
#define SWT_1_TO             SWT_1.TO.R                    /* Timeout */
#define SWT_1_WN             SWT_1.WN.R                    /* Window */
#define SWT_1_SR             SWT_1.SR.R                    /* Service */
#define SWT_1_CO             SWT_1.CO.R                    /* Counter Output */
#define SWT_1_SK             SWT_1.SK.R                    /* Service Key */
#define SWT_1_RRR            SWT_1.RRR.R                   /* Reset Request */

#define SWT_0_CR             SWT_0.CR.R                    /* Control */
#define SWT_0_IR             SWT_0.IR.R                    /* Interrupt */
#define SWT_0_TO             SWT_0.TO.R                    /* Timeout */
#define SWT_0_WN             SWT_0.WN.R                    /* Window */
#define SWT_0_SR             SWT_0.SR.R                    /* Service */
#define SWT_0_CO             SWT_0.CO.R                    /* Counter Output */
#define SWT_0_SK             SWT_0.SK.R                    /* Service Key */
#define SWT_0_RRR            SWT_0.RRR.R                   /* Reset Request */

/* SXOSC */
#define SXOSC_SXOSC_CTRL     SXOSC.SXOSC_CTRL.R            /* Oscillator Control */
#define SXOSC_SXOSC_STAT     SXOSC.SXOSC_STAT.R            /* Oscillator Status */

/* TCD */
#define TCD_CH0_CSR          TCD.CH0_CSR.R                 /* Channel Control and Status */
#define TCD_CH0_ES           TCD.CH0_ES.R                  /* Channel Error Status */
#define TCD_CH0_INT          TCD.CH0_INT.R                 /* Channel Interrupt Status */
#define TCD_CH0_SBR          TCD.CH0_SBR.R                 /* Channel System Bus */
#define TCD_CH0_PRI          TCD.CH0_PRI.R                 /* Channel Priority */
#define TCD_TCD0_SADDR       TCD.TCD0_SADDR.R              /* TCD Source Address */
#define TCD_TCD0_SOFF        TCD.TCD0_SOFF.R               /* TCD Signed Source Address Offset */
#define TCD_TCD0_ATTR        TCD.TCD0_ATTR.R               /* TCD Transfer Attributes */
#define TCD_TCD0_NBYTES_MLOFFNO TCD.NBYTES0.TCD0_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define TCD_TCD0_NBYTES_MLOFFYES TCD.NBYTES0.TCD0_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define TCD_TCD0_SLAST_SDA   TCD.TCD0_SLAST_SDA.R          /* TCD Last Source Address Adjustment / Store DADDR Address */
#define TCD_TCD0_DADDR       TCD.TCD0_DADDR.R              /* TCD Destination Address */
#define TCD_TCD0_DOFF        TCD.TCD0_DOFF.R               /* TCD Signed Destination Address Offset */
#define TCD_TCD0_CITER_ELINKNO TCD.CITER0.TCD0_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD0_CITER_ELINKYES TCD.CITER0.TCD0_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_TCD0_DLAST_SGA   TCD.TCD0_DLAST_SGA.R          /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define TCD_TCD0_CSR         TCD.TCD0_CSR.R                /* TCD Control and Status */
#define TCD_TCD0_BITER_ELINKNO TCD.BITER0.TCD0_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD0_BITER_ELINKYES TCD.BITER0.TCD0_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_CH1_CSR          TCD.CH1_CSR.R                 /* Channel Control and Status */
#define TCD_CH1_ES           TCD.CH1_ES.R                  /* Channel Error Status */
#define TCD_CH1_INT          TCD.CH1_INT.R                 /* Channel Interrupt Status */
#define TCD_CH1_SBR          TCD.CH1_SBR.R                 /* Channel System Bus */
#define TCD_CH1_PRI          TCD.CH1_PRI.R                 /* Channel Priority */
#define TCD_TCD1_SADDR       TCD.TCD1_SADDR.R              /* TCD Source Address */
#define TCD_TCD1_SOFF        TCD.TCD1_SOFF.R               /* TCD Signed Source Address Offset */
#define TCD_TCD1_ATTR        TCD.TCD1_ATTR.R               /* TCD Transfer Attributes */
#define TCD_TCD1_NBYTES_MLOFFNO TCD.NBYTES1.TCD1_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define TCD_TCD1_NBYTES_MLOFFYES TCD.NBYTES1.TCD1_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define TCD_TCD1_SLAST_SDA   TCD.TCD1_SLAST_SDA.R          /* TCD Last Source Address Adjustment / Store DADDR Address */
#define TCD_TCD1_DADDR       TCD.TCD1_DADDR.R              /* TCD Destination Address */
#define TCD_TCD1_DOFF        TCD.TCD1_DOFF.R               /* TCD Signed Destination Address Offset */
#define TCD_TCD1_CITER_ELINKNO TCD.CITER1.TCD1_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD1_CITER_ELINKYES TCD.CITER1.TCD1_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_TCD1_DLAST_SGA   TCD.TCD1_DLAST_SGA.R          /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define TCD_TCD1_CSR         TCD.TCD1_CSR.R                /* TCD Control and Status */
#define TCD_TCD1_BITER_ELINKNO TCD.BITER1.TCD1_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD1_BITER_ELINKYES TCD.BITER1.TCD1_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_CH2_CSR          TCD.CH2_CSR.R                 /* Channel Control and Status */
#define TCD_CH2_ES           TCD.CH2_ES.R                  /* Channel Error Status */
#define TCD_CH2_INT          TCD.CH2_INT.R                 /* Channel Interrupt Status */
#define TCD_CH2_SBR          TCD.CH2_SBR.R                 /* Channel System Bus */
#define TCD_CH2_PRI          TCD.CH2_PRI.R                 /* Channel Priority */
#define TCD_TCD2_SADDR       TCD.TCD2_SADDR.R              /* TCD Source Address */
#define TCD_TCD2_SOFF        TCD.TCD2_SOFF.R               /* TCD Signed Source Address Offset */
#define TCD_TCD2_ATTR        TCD.TCD2_ATTR.R               /* TCD Transfer Attributes */
#define TCD_TCD2_NBYTES_MLOFFNO TCD.NBYTES2.TCD2_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define TCD_TCD2_NBYTES_MLOFFYES TCD.NBYTES2.TCD2_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define TCD_TCD2_SLAST_SDA   TCD.TCD2_SLAST_SDA.R          /* TCD Last Source Address Adjustment / Store DADDR Address */
#define TCD_TCD2_DADDR       TCD.TCD2_DADDR.R              /* TCD Destination Address */
#define TCD_TCD2_DOFF        TCD.TCD2_DOFF.R               /* TCD Signed Destination Address Offset */
#define TCD_TCD2_CITER_ELINKNO TCD.CITER2.TCD2_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD2_CITER_ELINKYES TCD.CITER2.TCD2_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_TCD2_DLAST_SGA   TCD.TCD2_DLAST_SGA.R          /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define TCD_TCD2_CSR         TCD.TCD2_CSR.R                /* TCD Control and Status */
#define TCD_TCD2_BITER_ELINKNO TCD.BITER2.TCD2_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD2_BITER_ELINKYES TCD.BITER2.TCD2_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_CH3_CSR          TCD.CH3_CSR.R                 /* Channel Control and Status */
#define TCD_CH3_ES           TCD.CH3_ES.R                  /* Channel Error Status */
#define TCD_CH3_INT          TCD.CH3_INT.R                 /* Channel Interrupt Status */
#define TCD_CH3_SBR          TCD.CH3_SBR.R                 /* Channel System Bus */
#define TCD_CH3_PRI          TCD.CH3_PRI.R                 /* Channel Priority */
#define TCD_TCD3_SADDR       TCD.TCD3_SADDR.R              /* TCD Source Address */
#define TCD_TCD3_SOFF        TCD.TCD3_SOFF.R               /* TCD Signed Source Address Offset */
#define TCD_TCD3_ATTR        TCD.TCD3_ATTR.R               /* TCD Transfer Attributes */
#define TCD_TCD3_NBYTES_MLOFFNO TCD.NBYTES3.TCD3_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define TCD_TCD3_NBYTES_MLOFFYES TCD.NBYTES3.TCD3_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define TCD_TCD3_SLAST_SDA   TCD.TCD3_SLAST_SDA.R          /* TCD Last Source Address Adjustment / Store DADDR Address */
#define TCD_TCD3_DADDR       TCD.TCD3_DADDR.R              /* TCD Destination Address */
#define TCD_TCD3_DOFF        TCD.TCD3_DOFF.R               /* TCD Signed Destination Address Offset */
#define TCD_TCD3_CITER_ELINKNO TCD.CITER3.TCD3_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD3_CITER_ELINKYES TCD.CITER3.TCD3_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_TCD3_DLAST_SGA   TCD.TCD3_DLAST_SGA.R          /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define TCD_TCD3_CSR         TCD.TCD3_CSR.R                /* TCD Control and Status */
#define TCD_TCD3_BITER_ELINKNO TCD.BITER3.TCD3_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD3_BITER_ELINKYES TCD.BITER3.TCD3_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_CH4_CSR          TCD.CH4_CSR.R                 /* Channel Control and Status */
#define TCD_CH4_ES           TCD.CH4_ES.R                  /* Channel Error Status */
#define TCD_CH4_INT          TCD.CH4_INT.R                 /* Channel Interrupt Status */
#define TCD_CH4_SBR          TCD.CH4_SBR.R                 /* Channel System Bus */
#define TCD_CH4_PRI          TCD.CH4_PRI.R                 /* Channel Priority */
#define TCD_TCD4_SADDR       TCD.TCD4_SADDR.R              /* TCD Source Address */
#define TCD_TCD4_SOFF        TCD.TCD4_SOFF.R               /* TCD Signed Source Address Offset */
#define TCD_TCD4_ATTR        TCD.TCD4_ATTR.R               /* TCD Transfer Attributes */
#define TCD_TCD4_NBYTES_MLOFFNO TCD.NBYTES4.TCD4_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define TCD_TCD4_NBYTES_MLOFFYES TCD.NBYTES4.TCD4_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define TCD_TCD4_SLAST_SDA   TCD.TCD4_SLAST_SDA.R          /* TCD Last Source Address Adjustment / Store DADDR Address */
#define TCD_TCD4_DADDR       TCD.TCD4_DADDR.R              /* TCD Destination Address */
#define TCD_TCD4_DOFF        TCD.TCD4_DOFF.R               /* TCD Signed Destination Address Offset */
#define TCD_TCD4_CITER_ELINKNO TCD.CITER4.TCD4_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD4_CITER_ELINKYES TCD.CITER4.TCD4_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_TCD4_DLAST_SGA   TCD.TCD4_DLAST_SGA.R          /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define TCD_TCD4_CSR         TCD.TCD4_CSR.R                /* TCD Control and Status */
#define TCD_TCD4_BITER_ELINKNO TCD.BITER4.TCD4_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD4_BITER_ELINKYES TCD.BITER4.TCD4_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_CH5_CSR          TCD.CH5_CSR.R                 /* Channel Control and Status */
#define TCD_CH5_ES           TCD.CH5_ES.R                  /* Channel Error Status */
#define TCD_CH5_INT          TCD.CH5_INT.R                 /* Channel Interrupt Status */
#define TCD_CH5_SBR          TCD.CH5_SBR.R                 /* Channel System Bus */
#define TCD_CH5_PRI          TCD.CH5_PRI.R                 /* Channel Priority */
#define TCD_TCD5_SADDR       TCD.TCD5_SADDR.R              /* TCD Source Address */
#define TCD_TCD5_SOFF        TCD.TCD5_SOFF.R               /* TCD Signed Source Address Offset */
#define TCD_TCD5_ATTR        TCD.TCD5_ATTR.R               /* TCD Transfer Attributes */
#define TCD_TCD5_NBYTES_MLOFFNO TCD.NBYTES5.TCD5_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define TCD_TCD5_NBYTES_MLOFFYES TCD.NBYTES5.TCD5_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define TCD_TCD5_SLAST_SDA   TCD.TCD5_SLAST_SDA.R          /* TCD Last Source Address Adjustment / Store DADDR Address */
#define TCD_TCD5_DADDR       TCD.TCD5_DADDR.R              /* TCD Destination Address */
#define TCD_TCD5_DOFF        TCD.TCD5_DOFF.R               /* TCD Signed Destination Address Offset */
#define TCD_TCD5_CITER_ELINKNO TCD.CITER5.TCD5_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD5_CITER_ELINKYES TCD.CITER5.TCD5_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_TCD5_DLAST_SGA   TCD.TCD5_DLAST_SGA.R          /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define TCD_TCD5_CSR         TCD.TCD5_CSR.R                /* TCD Control and Status */
#define TCD_TCD5_BITER_ELINKNO TCD.BITER5.TCD5_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD5_BITER_ELINKYES TCD.BITER5.TCD5_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_CH6_CSR          TCD.CH6_CSR.R                 /* Channel Control and Status */
#define TCD_CH6_ES           TCD.CH6_ES.R                  /* Channel Error Status */
#define TCD_CH6_INT          TCD.CH6_INT.R                 /* Channel Interrupt Status */
#define TCD_CH6_SBR          TCD.CH6_SBR.R                 /* Channel System Bus */
#define TCD_CH6_PRI          TCD.CH6_PRI.R                 /* Channel Priority */
#define TCD_TCD6_SADDR       TCD.TCD6_SADDR.R              /* TCD Source Address */
#define TCD_TCD6_SOFF        TCD.TCD6_SOFF.R               /* TCD Signed Source Address Offset */
#define TCD_TCD6_ATTR        TCD.TCD6_ATTR.R               /* TCD Transfer Attributes */
#define TCD_TCD6_NBYTES_MLOFFNO TCD.NBYTES6.TCD6_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define TCD_TCD6_NBYTES_MLOFFYES TCD.NBYTES6.TCD6_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define TCD_TCD6_SLAST_SDA   TCD.TCD6_SLAST_SDA.R          /* TCD Last Source Address Adjustment / Store DADDR Address */
#define TCD_TCD6_DADDR       TCD.TCD6_DADDR.R              /* TCD Destination Address */
#define TCD_TCD6_DOFF        TCD.TCD6_DOFF.R               /* TCD Signed Destination Address Offset */
#define TCD_TCD6_CITER_ELINKNO TCD.CITER6.TCD6_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD6_CITER_ELINKYES TCD.CITER6.TCD6_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_TCD6_DLAST_SGA   TCD.TCD6_DLAST_SGA.R          /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define TCD_TCD6_CSR         TCD.TCD6_CSR.R                /* TCD Control and Status */
#define TCD_TCD6_BITER_ELINKNO TCD.BITER6.TCD6_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD6_BITER_ELINKYES TCD.BITER6.TCD6_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_CH7_CSR          TCD.CH7_CSR.R                 /* Channel Control and Status */
#define TCD_CH7_ES           TCD.CH7_ES.R                  /* Channel Error Status */
#define TCD_CH7_INT          TCD.CH7_INT.R                 /* Channel Interrupt Status */
#define TCD_CH7_SBR          TCD.CH7_SBR.R                 /* Channel System Bus */
#define TCD_CH7_PRI          TCD.CH7_PRI.R                 /* Channel Priority */
#define TCD_TCD7_SADDR       TCD.TCD7_SADDR.R              /* TCD Source Address */
#define TCD_TCD7_SOFF        TCD.TCD7_SOFF.R               /* TCD Signed Source Address Offset */
#define TCD_TCD7_ATTR        TCD.TCD7_ATTR.R               /* TCD Transfer Attributes */
#define TCD_TCD7_NBYTES_MLOFFNO TCD.NBYTES7.TCD7_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define TCD_TCD7_NBYTES_MLOFFYES TCD.NBYTES7.TCD7_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define TCD_TCD7_SLAST_SDA   TCD.TCD7_SLAST_SDA.R          /* TCD Last Source Address Adjustment / Store DADDR Address */
#define TCD_TCD7_DADDR       TCD.TCD7_DADDR.R              /* TCD Destination Address */
#define TCD_TCD7_DOFF        TCD.TCD7_DOFF.R               /* TCD Signed Destination Address Offset */
#define TCD_TCD7_CITER_ELINKNO TCD.CITER7.TCD7_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD7_CITER_ELINKYES TCD.CITER7.TCD7_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_TCD7_DLAST_SGA   TCD.TCD7_DLAST_SGA.R          /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define TCD_TCD7_CSR         TCD.TCD7_CSR.R                /* TCD Control and Status */
#define TCD_TCD7_BITER_ELINKNO TCD.BITER7.TCD7_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD7_BITER_ELINKYES TCD.BITER7.TCD7_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_CH8_CSR          TCD.CH8_CSR.R                 /* Channel Control and Status */
#define TCD_CH8_ES           TCD.CH8_ES.R                  /* Channel Error Status */
#define TCD_CH8_INT          TCD.CH8_INT.R                 /* Channel Interrupt Status */
#define TCD_CH8_SBR          TCD.CH8_SBR.R                 /* Channel System Bus */
#define TCD_CH8_PRI          TCD.CH8_PRI.R                 /* Channel Priority */
#define TCD_TCD8_SADDR       TCD.TCD8_SADDR.R              /* TCD Source Address */
#define TCD_TCD8_SOFF        TCD.TCD8_SOFF.R               /* TCD Signed Source Address Offset */
#define TCD_TCD8_ATTR        TCD.TCD8_ATTR.R               /* TCD Transfer Attributes */
#define TCD_TCD8_NBYTES_MLOFFNO TCD.NBYTES8.TCD8_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define TCD_TCD8_NBYTES_MLOFFYES TCD.NBYTES8.TCD8_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define TCD_TCD8_SLAST_SDA   TCD.TCD8_SLAST_SDA.R          /* TCD Last Source Address Adjustment / Store DADDR Address */
#define TCD_TCD8_DADDR       TCD.TCD8_DADDR.R              /* TCD Destination Address */
#define TCD_TCD8_DOFF        TCD.TCD8_DOFF.R               /* TCD Signed Destination Address Offset */
#define TCD_TCD8_CITER_ELINKNO TCD.CITER8.TCD8_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD8_CITER_ELINKYES TCD.CITER8.TCD8_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_TCD8_DLAST_SGA   TCD.TCD8_DLAST_SGA.R          /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define TCD_TCD8_CSR         TCD.TCD8_CSR.R                /* TCD Control and Status */
#define TCD_TCD8_BITER_ELINKNO TCD.BITER8.TCD8_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD8_BITER_ELINKYES TCD.BITER8.TCD8_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_CH9_CSR          TCD.CH9_CSR.R                 /* Channel Control and Status */
#define TCD_CH9_ES           TCD.CH9_ES.R                  /* Channel Error Status */
#define TCD_CH9_INT          TCD.CH9_INT.R                 /* Channel Interrupt Status */
#define TCD_CH9_SBR          TCD.CH9_SBR.R                 /* Channel System Bus */
#define TCD_CH9_PRI          TCD.CH9_PRI.R                 /* Channel Priority */
#define TCD_TCD9_SADDR       TCD.TCD9_SADDR.R              /* TCD Source Address */
#define TCD_TCD9_SOFF        TCD.TCD9_SOFF.R               /* TCD Signed Source Address Offset */
#define TCD_TCD9_ATTR        TCD.TCD9_ATTR.R               /* TCD Transfer Attributes */
#define TCD_TCD9_NBYTES_MLOFFNO TCD.NBYTES9.TCD9_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define TCD_TCD9_NBYTES_MLOFFYES TCD.NBYTES9.TCD9_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define TCD_TCD9_SLAST_SDA   TCD.TCD9_SLAST_SDA.R          /* TCD Last Source Address Adjustment / Store DADDR Address */
#define TCD_TCD9_DADDR       TCD.TCD9_DADDR.R              /* TCD Destination Address */
#define TCD_TCD9_DOFF        TCD.TCD9_DOFF.R               /* TCD Signed Destination Address Offset */
#define TCD_TCD9_CITER_ELINKNO TCD.CITER9.TCD9_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD9_CITER_ELINKYES TCD.CITER9.TCD9_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_TCD9_DLAST_SGA   TCD.TCD9_DLAST_SGA.R          /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define TCD_TCD9_CSR         TCD.TCD9_CSR.R                /* TCD Control and Status */
#define TCD_TCD9_BITER_ELINKNO TCD.BITER9.TCD9_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD9_BITER_ELINKYES TCD.BITER9.TCD9_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_CH10_CSR         TCD.CH10_CSR.R                /* Channel Control and Status */
#define TCD_CH10_ES          TCD.CH10_ES.R                 /* Channel Error Status */
#define TCD_CH10_INT         TCD.CH10_INT.R                /* Channel Interrupt Status */
#define TCD_CH10_SBR         TCD.CH10_SBR.R                /* Channel System Bus */
#define TCD_CH10_PRI         TCD.CH10_PRI.R                /* Channel Priority */
#define TCD_TCD10_SADDR      TCD.TCD10_SADDR.R             /* TCD Source Address */
#define TCD_TCD10_SOFF       TCD.TCD10_SOFF.R              /* TCD Signed Source Address Offset */
#define TCD_TCD10_ATTR       TCD.TCD10_ATTR.R              /* TCD Transfer Attributes */
#define TCD_TCD10_NBYTES_MLOFFNO TCD.NBYTES10.TCD10_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define TCD_TCD10_NBYTES_MLOFFYES TCD.NBYTES10.TCD10_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define TCD_TCD10_SLAST_SDA  TCD.TCD10_SLAST_SDA.R         /* TCD Last Source Address Adjustment / Store DADDR Address */
#define TCD_TCD10_DADDR      TCD.TCD10_DADDR.R             /* TCD Destination Address */
#define TCD_TCD10_DOFF       TCD.TCD10_DOFF.R              /* TCD Signed Destination Address Offset */
#define TCD_TCD10_CITER_ELINKNO TCD.CITER10.TCD10_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD10_CITER_ELINKYES TCD.CITER10.TCD10_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_TCD10_DLAST_SGA  TCD.TCD10_DLAST_SGA.R         /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define TCD_TCD10_CSR        TCD.TCD10_CSR.R               /* TCD Control and Status */
#define TCD_TCD10_BITER_ELINKNO TCD.BITER10.TCD10_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD10_BITER_ELINKYES TCD.BITER10.TCD10_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_CH11_CSR         TCD.CH11_CSR.R                /* Channel Control and Status */
#define TCD_CH11_ES          TCD.CH11_ES.R                 /* Channel Error Status */
#define TCD_CH11_INT         TCD.CH11_INT.R                /* Channel Interrupt Status */
#define TCD_CH11_SBR         TCD.CH11_SBR.R                /* Channel System Bus */
#define TCD_CH11_PRI         TCD.CH11_PRI.R                /* Channel Priority */
#define TCD_TCD11_SADDR      TCD.TCD11_SADDR.R             /* TCD Source Address */
#define TCD_TCD11_SOFF       TCD.TCD11_SOFF.R              /* TCD Signed Source Address Offset */
#define TCD_TCD11_ATTR       TCD.TCD11_ATTR.R              /* TCD Transfer Attributes */
#define TCD_TCD11_NBYTES_MLOFFNO TCD.NBYTES11.TCD11_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define TCD_TCD11_NBYTES_MLOFFYES TCD.NBYTES11.TCD11_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define TCD_TCD11_SLAST_SDA  TCD.TCD11_SLAST_SDA.R         /* TCD Last Source Address Adjustment / Store DADDR Address */
#define TCD_TCD11_DADDR      TCD.TCD11_DADDR.R             /* TCD Destination Address */
#define TCD_TCD11_DOFF       TCD.TCD11_DOFF.R              /* TCD Signed Destination Address Offset */
#define TCD_TCD11_CITER_ELINKNO TCD.CITER11.TCD11_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD11_CITER_ELINKYES TCD.CITER11.TCD11_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_TCD11_DLAST_SGA  TCD.TCD11_DLAST_SGA.R         /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define TCD_TCD11_CSR        TCD.TCD11_CSR.R               /* TCD Control and Status */
#define TCD_TCD11_BITER_ELINKNO TCD.BITER11.TCD11_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD11_BITER_ELINKYES TCD.BITER11.TCD11_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_CH12_CSR         TCD.CH12_CSR.R                /* Channel Control and Status */
#define TCD_CH12_ES          TCD.CH12_ES.R                 /* Channel Error Status */
#define TCD_CH12_INT         TCD.CH12_INT.R                /* Channel Interrupt Status */
#define TCD_CH12_SBR         TCD.CH12_SBR.R                /* Channel System Bus */
#define TCD_CH12_PRI         TCD.CH12_PRI.R                /* Channel Priority */
#define TCD_TCD12_SADDR      TCD.TCD12_SADDR.R             /* TCD Source Address */
#define TCD_TCD12_SOFF       TCD.TCD12_SOFF.R              /* TCD Signed Source Address Offset */
#define TCD_TCD12_ATTR       TCD.TCD12_ATTR.R              /* TCD Transfer Attributes */
#define TCD_TCD12_NBYTES_MLOFFNO TCD.NBYTES12.TCD12_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define TCD_TCD12_NBYTES_MLOFFYES TCD.NBYTES12.TCD12_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define TCD_TCD12_SLAST_SDA  TCD.TCD12_SLAST_SDA.R         /* TCD Last Source Address Adjustment / Store DADDR Address */
#define TCD_TCD12_DADDR      TCD.TCD12_DADDR.R             /* TCD Destination Address */
#define TCD_TCD12_DOFF       TCD.TCD12_DOFF.R              /* TCD Signed Destination Address Offset */
#define TCD_TCD12_CITER_ELINKNO TCD.CITER12.TCD12_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD12_CITER_ELINKYES TCD.CITER12.TCD12_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_TCD12_DLAST_SGA  TCD.TCD12_DLAST_SGA.R         /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define TCD_TCD12_CSR        TCD.TCD12_CSR.R               /* TCD Control and Status */
#define TCD_TCD12_BITER_ELINKNO TCD.BITER12.TCD12_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD12_BITER_ELINKYES TCD.BITER12.TCD12_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_CH13_CSR         TCD.CH13_CSR.R                /* Channel Control and Status */
#define TCD_CH13_ES          TCD.CH13_ES.R                 /* Channel Error Status */
#define TCD_CH13_INT         TCD.CH13_INT.R                /* Channel Interrupt Status */
#define TCD_CH13_SBR         TCD.CH13_SBR.R                /* Channel System Bus */
#define TCD_CH13_PRI         TCD.CH13_PRI.R                /* Channel Priority */
#define TCD_TCD13_SADDR      TCD.TCD13_SADDR.R             /* TCD Source Address */
#define TCD_TCD13_SOFF       TCD.TCD13_SOFF.R              /* TCD Signed Source Address Offset */
#define TCD_TCD13_ATTR       TCD.TCD13_ATTR.R              /* TCD Transfer Attributes */
#define TCD_TCD13_NBYTES_MLOFFNO TCD.NBYTES13.TCD13_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define TCD_TCD13_NBYTES_MLOFFYES TCD.NBYTES13.TCD13_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define TCD_TCD13_SLAST_SDA  TCD.TCD13_SLAST_SDA.R         /* TCD Last Source Address Adjustment / Store DADDR Address */
#define TCD_TCD13_DADDR      TCD.TCD13_DADDR.R             /* TCD Destination Address */
#define TCD_TCD13_DOFF       TCD.TCD13_DOFF.R              /* TCD Signed Destination Address Offset */
#define TCD_TCD13_CITER_ELINKNO TCD.CITER13.TCD13_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD13_CITER_ELINKYES TCD.CITER13.TCD13_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_TCD13_DLAST_SGA  TCD.TCD13_DLAST_SGA.R         /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define TCD_TCD13_CSR        TCD.TCD13_CSR.R               /* TCD Control and Status */
#define TCD_TCD13_BITER_ELINKNO TCD.BITER13.TCD13_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD13_BITER_ELINKYES TCD.BITER13.TCD13_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_CH14_CSR         TCD.CH14_CSR.R                /* Channel Control and Status */
#define TCD_CH14_ES          TCD.CH14_ES.R                 /* Channel Error Status */
#define TCD_CH14_INT         TCD.CH14_INT.R                /* Channel Interrupt Status */
#define TCD_CH14_SBR         TCD.CH14_SBR.R                /* Channel System Bus */
#define TCD_CH14_PRI         TCD.CH14_PRI.R                /* Channel Priority */
#define TCD_TCD14_SADDR      TCD.TCD14_SADDR.R             /* TCD Source Address */
#define TCD_TCD14_SOFF       TCD.TCD14_SOFF.R              /* TCD Signed Source Address Offset */
#define TCD_TCD14_ATTR       TCD.TCD14_ATTR.R              /* TCD Transfer Attributes */
#define TCD_TCD14_NBYTES_MLOFFNO TCD.NBYTES14.TCD14_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define TCD_TCD14_NBYTES_MLOFFYES TCD.NBYTES14.TCD14_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define TCD_TCD14_SLAST_SDA  TCD.TCD14_SLAST_SDA.R         /* TCD Last Source Address Adjustment / Store DADDR Address */
#define TCD_TCD14_DADDR      TCD.TCD14_DADDR.R             /* TCD Destination Address */
#define TCD_TCD14_DOFF       TCD.TCD14_DOFF.R              /* TCD Signed Destination Address Offset */
#define TCD_TCD14_CITER_ELINKNO TCD.CITER14.TCD14_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD14_CITER_ELINKYES TCD.CITER14.TCD14_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_TCD14_DLAST_SGA  TCD.TCD14_DLAST_SGA.R         /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define TCD_TCD14_CSR        TCD.TCD14_CSR.R               /* TCD Control and Status */
#define TCD_TCD14_BITER_ELINKNO TCD.BITER14.TCD14_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD14_BITER_ELINKYES TCD.BITER14.TCD14_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_CH15_CSR         TCD.CH15_CSR.R                /* Channel Control and Status */
#define TCD_CH15_ES          TCD.CH15_ES.R                 /* Channel Error Status */
#define TCD_CH15_INT         TCD.CH15_INT.R                /* Channel Interrupt Status */
#define TCD_CH15_SBR         TCD.CH15_SBR.R                /* Channel System Bus */
#define TCD_CH15_PRI         TCD.CH15_PRI.R                /* Channel Priority */
#define TCD_TCD15_SADDR      TCD.TCD15_SADDR.R             /* TCD Source Address */
#define TCD_TCD15_SOFF       TCD.TCD15_SOFF.R              /* TCD Signed Source Address Offset */
#define TCD_TCD15_ATTR       TCD.TCD15_ATTR.R              /* TCD Transfer Attributes */
#define TCD_TCD15_NBYTES_MLOFFNO TCD.NBYTES15.TCD15_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define TCD_TCD15_NBYTES_MLOFFYES TCD.NBYTES15.TCD15_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define TCD_TCD15_SLAST_SDA  TCD.TCD15_SLAST_SDA.R         /* TCD Last Source Address Adjustment / Store DADDR Address */
#define TCD_TCD15_DADDR      TCD.TCD15_DADDR.R             /* TCD Destination Address */
#define TCD_TCD15_DOFF       TCD.TCD15_DOFF.R              /* TCD Signed Destination Address Offset */
#define TCD_TCD15_CITER_ELINKNO TCD.CITER15.TCD15_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD15_CITER_ELINKYES TCD.CITER15.TCD15_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_TCD15_DLAST_SGA  TCD.TCD15_DLAST_SGA.R         /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define TCD_TCD15_CSR        TCD.TCD15_CSR.R               /* TCD Control and Status */
#define TCD_TCD15_BITER_ELINKNO TCD.BITER15.TCD15_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD15_BITER_ELINKYES TCD.BITER15.TCD15_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_CH16_CSR         TCD.CH16_CSR.R                /* Channel Control and Status */
#define TCD_CH16_ES          TCD.CH16_ES.R                 /* Channel Error Status */
#define TCD_CH16_INT         TCD.CH16_INT.R                /* Channel Interrupt Status */
#define TCD_CH16_SBR         TCD.CH16_SBR.R                /* Channel System Bus */
#define TCD_CH16_PRI         TCD.CH16_PRI.R                /* Channel Priority */
#define TCD_TCD16_SADDR      TCD.TCD16_SADDR.R             /* TCD Source Address */
#define TCD_TCD16_SOFF       TCD.TCD16_SOFF.R              /* TCD Signed Source Address Offset */
#define TCD_TCD16_ATTR       TCD.TCD16_ATTR.R              /* TCD Transfer Attributes */
#define TCD_TCD16_NBYTES_MLOFFNO TCD.NBYTES16.TCD16_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define TCD_TCD16_NBYTES_MLOFFYES TCD.NBYTES16.TCD16_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define TCD_TCD16_SLAST_SDA  TCD.TCD16_SLAST_SDA.R         /* TCD Last Source Address Adjustment / Store DADDR Address */
#define TCD_TCD16_DADDR      TCD.TCD16_DADDR.R             /* TCD Destination Address */
#define TCD_TCD16_DOFF       TCD.TCD16_DOFF.R              /* TCD Signed Destination Address Offset */
#define TCD_TCD16_CITER_ELINKNO TCD.CITER16.TCD16_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD16_CITER_ELINKYES TCD.CITER16.TCD16_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_TCD16_DLAST_SGA  TCD.TCD16_DLAST_SGA.R         /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define TCD_TCD16_CSR        TCD.TCD16_CSR.R               /* TCD Control and Status */
#define TCD_TCD16_BITER_ELINKNO TCD.BITER16.TCD16_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD16_BITER_ELINKYES TCD.BITER16.TCD16_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_CH17_CSR         TCD.CH17_CSR.R                /* Channel Control and Status */
#define TCD_CH17_ES          TCD.CH17_ES.R                 /* Channel Error Status */
#define TCD_CH17_INT         TCD.CH17_INT.R                /* Channel Interrupt Status */
#define TCD_CH17_SBR         TCD.CH17_SBR.R                /* Channel System Bus */
#define TCD_CH17_PRI         TCD.CH17_PRI.R                /* Channel Priority */
#define TCD_TCD17_SADDR      TCD.TCD17_SADDR.R             /* TCD Source Address */
#define TCD_TCD17_SOFF       TCD.TCD17_SOFF.R              /* TCD Signed Source Address Offset */
#define TCD_TCD17_ATTR       TCD.TCD17_ATTR.R              /* TCD Transfer Attributes */
#define TCD_TCD17_NBYTES_MLOFFNO TCD.NBYTES17.TCD17_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define TCD_TCD17_NBYTES_MLOFFYES TCD.NBYTES17.TCD17_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define TCD_TCD17_SLAST_SDA  TCD.TCD17_SLAST_SDA.R         /* TCD Last Source Address Adjustment / Store DADDR Address */
#define TCD_TCD17_DADDR      TCD.TCD17_DADDR.R             /* TCD Destination Address */
#define TCD_TCD17_DOFF       TCD.TCD17_DOFF.R              /* TCD Signed Destination Address Offset */
#define TCD_TCD17_CITER_ELINKNO TCD.CITER17.TCD17_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD17_CITER_ELINKYES TCD.CITER17.TCD17_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_TCD17_DLAST_SGA  TCD.TCD17_DLAST_SGA.R         /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define TCD_TCD17_CSR        TCD.TCD17_CSR.R               /* TCD Control and Status */
#define TCD_TCD17_BITER_ELINKNO TCD.BITER17.TCD17_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD17_BITER_ELINKYES TCD.BITER17.TCD17_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_CH18_CSR         TCD.CH18_CSR.R                /* Channel Control and Status */
#define TCD_CH18_ES          TCD.CH18_ES.R                 /* Channel Error Status */
#define TCD_CH18_INT         TCD.CH18_INT.R                /* Channel Interrupt Status */
#define TCD_CH18_SBR         TCD.CH18_SBR.R                /* Channel System Bus */
#define TCD_CH18_PRI         TCD.CH18_PRI.R                /* Channel Priority */
#define TCD_TCD18_SADDR      TCD.TCD18_SADDR.R             /* TCD Source Address */
#define TCD_TCD18_SOFF       TCD.TCD18_SOFF.R              /* TCD Signed Source Address Offset */
#define TCD_TCD18_ATTR       TCD.TCD18_ATTR.R              /* TCD Transfer Attributes */
#define TCD_TCD18_NBYTES_MLOFFNO TCD.NBYTES18.TCD18_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define TCD_TCD18_NBYTES_MLOFFYES TCD.NBYTES18.TCD18_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define TCD_TCD18_SLAST_SDA  TCD.TCD18_SLAST_SDA.R         /* TCD Last Source Address Adjustment / Store DADDR Address */
#define TCD_TCD18_DADDR      TCD.TCD18_DADDR.R             /* TCD Destination Address */
#define TCD_TCD18_DOFF       TCD.TCD18_DOFF.R              /* TCD Signed Destination Address Offset */
#define TCD_TCD18_CITER_ELINKNO TCD.CITER18.TCD18_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD18_CITER_ELINKYES TCD.CITER18.TCD18_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_TCD18_DLAST_SGA  TCD.TCD18_DLAST_SGA.R         /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define TCD_TCD18_CSR        TCD.TCD18_CSR.R               /* TCD Control and Status */
#define TCD_TCD18_BITER_ELINKNO TCD.BITER18.TCD18_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD18_BITER_ELINKYES TCD.BITER18.TCD18_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_CH19_CSR         TCD.CH19_CSR.R                /* Channel Control and Status */
#define TCD_CH19_ES          TCD.CH19_ES.R                 /* Channel Error Status */
#define TCD_CH19_INT         TCD.CH19_INT.R                /* Channel Interrupt Status */
#define TCD_CH19_SBR         TCD.CH19_SBR.R                /* Channel System Bus */
#define TCD_CH19_PRI         TCD.CH19_PRI.R                /* Channel Priority */
#define TCD_TCD19_SADDR      TCD.TCD19_SADDR.R             /* TCD Source Address */
#define TCD_TCD19_SOFF       TCD.TCD19_SOFF.R              /* TCD Signed Source Address Offset */
#define TCD_TCD19_ATTR       TCD.TCD19_ATTR.R              /* TCD Transfer Attributes */
#define TCD_TCD19_NBYTES_MLOFFNO TCD.NBYTES19.TCD19_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define TCD_TCD19_NBYTES_MLOFFYES TCD.NBYTES19.TCD19_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define TCD_TCD19_SLAST_SDA  TCD.TCD19_SLAST_SDA.R         /* TCD Last Source Address Adjustment / Store DADDR Address */
#define TCD_TCD19_DADDR      TCD.TCD19_DADDR.R             /* TCD Destination Address */
#define TCD_TCD19_DOFF       TCD.TCD19_DOFF.R              /* TCD Signed Destination Address Offset */
#define TCD_TCD19_CITER_ELINKNO TCD.CITER19.TCD19_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD19_CITER_ELINKYES TCD.CITER19.TCD19_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_TCD19_DLAST_SGA  TCD.TCD19_DLAST_SGA.R         /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define TCD_TCD19_CSR        TCD.TCD19_CSR.R               /* TCD Control and Status */
#define TCD_TCD19_BITER_ELINKNO TCD.BITER19.TCD19_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD19_BITER_ELINKYES TCD.BITER19.TCD19_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_CH20_CSR         TCD.CH20_CSR.R                /* Channel Control and Status */
#define TCD_CH20_ES          TCD.CH20_ES.R                 /* Channel Error Status */
#define TCD_CH20_INT         TCD.CH20_INT.R                /* Channel Interrupt Status */
#define TCD_CH20_SBR         TCD.CH20_SBR.R                /* Channel System Bus */
#define TCD_CH20_PRI         TCD.CH20_PRI.R                /* Channel Priority */
#define TCD_TCD20_SADDR      TCD.TCD20_SADDR.R             /* TCD Source Address */
#define TCD_TCD20_SOFF       TCD.TCD20_SOFF.R              /* TCD Signed Source Address Offset */
#define TCD_TCD20_ATTR       TCD.TCD20_ATTR.R              /* TCD Transfer Attributes */
#define TCD_TCD20_NBYTES_MLOFFNO TCD.NBYTES20.TCD20_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define TCD_TCD20_NBYTES_MLOFFYES TCD.NBYTES20.TCD20_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define TCD_TCD20_SLAST_SDA  TCD.TCD20_SLAST_SDA.R         /* TCD Last Source Address Adjustment / Store DADDR Address */
#define TCD_TCD20_DADDR      TCD.TCD20_DADDR.R             /* TCD Destination Address */
#define TCD_TCD20_DOFF       TCD.TCD20_DOFF.R              /* TCD Signed Destination Address Offset */
#define TCD_TCD20_CITER_ELINKNO TCD.CITER20.TCD20_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD20_CITER_ELINKYES TCD.CITER20.TCD20_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_TCD20_DLAST_SGA  TCD.TCD20_DLAST_SGA.R         /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define TCD_TCD20_CSR        TCD.TCD20_CSR.R               /* TCD Control and Status */
#define TCD_TCD20_BITER_ELINKNO TCD.BITER20.TCD20_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD20_BITER_ELINKYES TCD.BITER20.TCD20_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_CH21_CSR         TCD.CH21_CSR.R                /* Channel Control and Status */
#define TCD_CH21_ES          TCD.CH21_ES.R                 /* Channel Error Status */
#define TCD_CH21_INT         TCD.CH21_INT.R                /* Channel Interrupt Status */
#define TCD_CH21_SBR         TCD.CH21_SBR.R                /* Channel System Bus */
#define TCD_CH21_PRI         TCD.CH21_PRI.R                /* Channel Priority */
#define TCD_TCD21_SADDR      TCD.TCD21_SADDR.R             /* TCD Source Address */
#define TCD_TCD21_SOFF       TCD.TCD21_SOFF.R              /* TCD Signed Source Address Offset */
#define TCD_TCD21_ATTR       TCD.TCD21_ATTR.R              /* TCD Transfer Attributes */
#define TCD_TCD21_NBYTES_MLOFFNO TCD.NBYTES21.TCD21_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define TCD_TCD21_NBYTES_MLOFFYES TCD.NBYTES21.TCD21_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define TCD_TCD21_SLAST_SDA  TCD.TCD21_SLAST_SDA.R         /* TCD Last Source Address Adjustment / Store DADDR Address */
#define TCD_TCD21_DADDR      TCD.TCD21_DADDR.R             /* TCD Destination Address */
#define TCD_TCD21_DOFF       TCD.TCD21_DOFF.R              /* TCD Signed Destination Address Offset */
#define TCD_TCD21_CITER_ELINKNO TCD.CITER21.TCD21_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD21_CITER_ELINKYES TCD.CITER21.TCD21_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_TCD21_DLAST_SGA  TCD.TCD21_DLAST_SGA.R         /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define TCD_TCD21_CSR        TCD.TCD21_CSR.R               /* TCD Control and Status */
#define TCD_TCD21_BITER_ELINKNO TCD.BITER21.TCD21_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD21_BITER_ELINKYES TCD.BITER21.TCD21_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_CH22_CSR         TCD.CH22_CSR.R                /* Channel Control and Status */
#define TCD_CH22_ES          TCD.CH22_ES.R                 /* Channel Error Status */
#define TCD_CH22_INT         TCD.CH22_INT.R                /* Channel Interrupt Status */
#define TCD_CH22_SBR         TCD.CH22_SBR.R                /* Channel System Bus */
#define TCD_CH22_PRI         TCD.CH22_PRI.R                /* Channel Priority */
#define TCD_TCD22_SADDR      TCD.TCD22_SADDR.R             /* TCD Source Address */
#define TCD_TCD22_SOFF       TCD.TCD22_SOFF.R              /* TCD Signed Source Address Offset */
#define TCD_TCD22_ATTR       TCD.TCD22_ATTR.R              /* TCD Transfer Attributes */
#define TCD_TCD22_NBYTES_MLOFFNO TCD.NBYTES22.TCD22_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define TCD_TCD22_NBYTES_MLOFFYES TCD.NBYTES22.TCD22_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define TCD_TCD22_SLAST_SDA  TCD.TCD22_SLAST_SDA.R         /* TCD Last Source Address Adjustment / Store DADDR Address */
#define TCD_TCD22_DADDR      TCD.TCD22_DADDR.R             /* TCD Destination Address */
#define TCD_TCD22_DOFF       TCD.TCD22_DOFF.R              /* TCD Signed Destination Address Offset */
#define TCD_TCD22_CITER_ELINKNO TCD.CITER22.TCD22_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD22_CITER_ELINKYES TCD.CITER22.TCD22_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_TCD22_DLAST_SGA  TCD.TCD22_DLAST_SGA.R         /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define TCD_TCD22_CSR        TCD.TCD22_CSR.R               /* TCD Control and Status */
#define TCD_TCD22_BITER_ELINKNO TCD.BITER22.TCD22_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD22_BITER_ELINKYES TCD.BITER22.TCD22_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_CH23_CSR         TCD.CH23_CSR.R                /* Channel Control and Status */
#define TCD_CH23_ES          TCD.CH23_ES.R                 /* Channel Error Status */
#define TCD_CH23_INT         TCD.CH23_INT.R                /* Channel Interrupt Status */
#define TCD_CH23_SBR         TCD.CH23_SBR.R                /* Channel System Bus */
#define TCD_CH23_PRI         TCD.CH23_PRI.R                /* Channel Priority */
#define TCD_TCD23_SADDR      TCD.TCD23_SADDR.R             /* TCD Source Address */
#define TCD_TCD23_SOFF       TCD.TCD23_SOFF.R              /* TCD Signed Source Address Offset */
#define TCD_TCD23_ATTR       TCD.TCD23_ATTR.R              /* TCD Transfer Attributes */
#define TCD_TCD23_NBYTES_MLOFFNO TCD.NBYTES23.TCD23_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define TCD_TCD23_NBYTES_MLOFFYES TCD.NBYTES23.TCD23_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define TCD_TCD23_SLAST_SDA  TCD.TCD23_SLAST_SDA.R         /* TCD Last Source Address Adjustment / Store DADDR Address */
#define TCD_TCD23_DADDR      TCD.TCD23_DADDR.R             /* TCD Destination Address */
#define TCD_TCD23_DOFF       TCD.TCD23_DOFF.R              /* TCD Signed Destination Address Offset */
#define TCD_TCD23_CITER_ELINKNO TCD.CITER23.TCD23_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD23_CITER_ELINKYES TCD.CITER23.TCD23_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_TCD23_DLAST_SGA  TCD.TCD23_DLAST_SGA.R         /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define TCD_TCD23_CSR        TCD.TCD23_CSR.R               /* TCD Control and Status */
#define TCD_TCD23_BITER_ELINKNO TCD.BITER23.TCD23_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD23_BITER_ELINKYES TCD.BITER23.TCD23_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_CH24_CSR         TCD.CH24_CSR.R                /* Channel Control and Status */
#define TCD_CH24_ES          TCD.CH24_ES.R                 /* Channel Error Status */
#define TCD_CH24_INT         TCD.CH24_INT.R                /* Channel Interrupt Status */
#define TCD_CH24_SBR         TCD.CH24_SBR.R                /* Channel System Bus */
#define TCD_CH24_PRI         TCD.CH24_PRI.R                /* Channel Priority */
#define TCD_TCD24_SADDR      TCD.TCD24_SADDR.R             /* TCD Source Address */
#define TCD_TCD24_SOFF       TCD.TCD24_SOFF.R              /* TCD Signed Source Address Offset */
#define TCD_TCD24_ATTR       TCD.TCD24_ATTR.R              /* TCD Transfer Attributes */
#define TCD_TCD24_NBYTES_MLOFFNO TCD.NBYTES24.TCD24_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define TCD_TCD24_NBYTES_MLOFFYES TCD.NBYTES24.TCD24_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define TCD_TCD24_SLAST_SDA  TCD.TCD24_SLAST_SDA.R         /* TCD Last Source Address Adjustment / Store DADDR Address */
#define TCD_TCD24_DADDR      TCD.TCD24_DADDR.R             /* TCD Destination Address */
#define TCD_TCD24_DOFF       TCD.TCD24_DOFF.R              /* TCD Signed Destination Address Offset */
#define TCD_TCD24_CITER_ELINKNO TCD.CITER24.TCD24_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD24_CITER_ELINKYES TCD.CITER24.TCD24_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_TCD24_DLAST_SGA  TCD.TCD24_DLAST_SGA.R         /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define TCD_TCD24_CSR        TCD.TCD24_CSR.R               /* TCD Control and Status */
#define TCD_TCD24_BITER_ELINKNO TCD.BITER24.TCD24_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD24_BITER_ELINKYES TCD.BITER24.TCD24_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_CH25_CSR         TCD.CH25_CSR.R                /* Channel Control and Status */
#define TCD_CH25_ES          TCD.CH25_ES.R                 /* Channel Error Status */
#define TCD_CH25_INT         TCD.CH25_INT.R                /* Channel Interrupt Status */
#define TCD_CH25_SBR         TCD.CH25_SBR.R                /* Channel System Bus */
#define TCD_CH25_PRI         TCD.CH25_PRI.R                /* Channel Priority */
#define TCD_TCD25_SADDR      TCD.TCD25_SADDR.R             /* TCD Source Address */
#define TCD_TCD25_SOFF       TCD.TCD25_SOFF.R              /* TCD Signed Source Address Offset */
#define TCD_TCD25_ATTR       TCD.TCD25_ATTR.R              /* TCD Transfer Attributes */
#define TCD_TCD25_NBYTES_MLOFFNO TCD.NBYTES25.TCD25_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define TCD_TCD25_NBYTES_MLOFFYES TCD.NBYTES25.TCD25_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define TCD_TCD25_SLAST_SDA  TCD.TCD25_SLAST_SDA.R         /* TCD Last Source Address Adjustment / Store DADDR Address */
#define TCD_TCD25_DADDR      TCD.TCD25_DADDR.R             /* TCD Destination Address */
#define TCD_TCD25_DOFF       TCD.TCD25_DOFF.R              /* TCD Signed Destination Address Offset */
#define TCD_TCD25_CITER_ELINKNO TCD.CITER25.TCD25_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD25_CITER_ELINKYES TCD.CITER25.TCD25_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_TCD25_DLAST_SGA  TCD.TCD25_DLAST_SGA.R         /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define TCD_TCD25_CSR        TCD.TCD25_CSR.R               /* TCD Control and Status */
#define TCD_TCD25_BITER_ELINKNO TCD.BITER25.TCD25_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD25_BITER_ELINKYES TCD.BITER25.TCD25_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_CH26_CSR         TCD.CH26_CSR.R                /* Channel Control and Status */
#define TCD_CH26_ES          TCD.CH26_ES.R                 /* Channel Error Status */
#define TCD_CH26_INT         TCD.CH26_INT.R                /* Channel Interrupt Status */
#define TCD_CH26_SBR         TCD.CH26_SBR.R                /* Channel System Bus */
#define TCD_CH26_PRI         TCD.CH26_PRI.R                /* Channel Priority */
#define TCD_TCD26_SADDR      TCD.TCD26_SADDR.R             /* TCD Source Address */
#define TCD_TCD26_SOFF       TCD.TCD26_SOFF.R              /* TCD Signed Source Address Offset */
#define TCD_TCD26_ATTR       TCD.TCD26_ATTR.R              /* TCD Transfer Attributes */
#define TCD_TCD26_NBYTES_MLOFFNO TCD.NBYTES26.TCD26_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define TCD_TCD26_NBYTES_MLOFFYES TCD.NBYTES26.TCD26_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define TCD_TCD26_SLAST_SDA  TCD.TCD26_SLAST_SDA.R         /* TCD Last Source Address Adjustment / Store DADDR Address */
#define TCD_TCD26_DADDR      TCD.TCD26_DADDR.R             /* TCD Destination Address */
#define TCD_TCD26_DOFF       TCD.TCD26_DOFF.R              /* TCD Signed Destination Address Offset */
#define TCD_TCD26_CITER_ELINKNO TCD.CITER26.TCD26_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD26_CITER_ELINKYES TCD.CITER26.TCD26_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_TCD26_DLAST_SGA  TCD.TCD26_DLAST_SGA.R         /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define TCD_TCD26_CSR        TCD.TCD26_CSR.R               /* TCD Control and Status */
#define TCD_TCD26_BITER_ELINKNO TCD.BITER26.TCD26_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD26_BITER_ELINKYES TCD.BITER26.TCD26_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_CH27_CSR         TCD.CH27_CSR.R                /* Channel Control and Status */
#define TCD_CH27_ES          TCD.CH27_ES.R                 /* Channel Error Status */
#define TCD_CH27_INT         TCD.CH27_INT.R                /* Channel Interrupt Status */
#define TCD_CH27_SBR         TCD.CH27_SBR.R                /* Channel System Bus */
#define TCD_CH27_PRI         TCD.CH27_PRI.R                /* Channel Priority */
#define TCD_TCD27_SADDR      TCD.TCD27_SADDR.R             /* TCD Source Address */
#define TCD_TCD27_SOFF       TCD.TCD27_SOFF.R              /* TCD Signed Source Address Offset */
#define TCD_TCD27_ATTR       TCD.TCD27_ATTR.R              /* TCD Transfer Attributes */
#define TCD_TCD27_NBYTES_MLOFFNO TCD.NBYTES27.TCD27_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define TCD_TCD27_NBYTES_MLOFFYES TCD.NBYTES27.TCD27_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define TCD_TCD27_SLAST_SDA  TCD.TCD27_SLAST_SDA.R         /* TCD Last Source Address Adjustment / Store DADDR Address */
#define TCD_TCD27_DADDR      TCD.TCD27_DADDR.R             /* TCD Destination Address */
#define TCD_TCD27_DOFF       TCD.TCD27_DOFF.R              /* TCD Signed Destination Address Offset */
#define TCD_TCD27_CITER_ELINKNO TCD.CITER27.TCD27_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD27_CITER_ELINKYES TCD.CITER27.TCD27_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_TCD27_DLAST_SGA  TCD.TCD27_DLAST_SGA.R         /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define TCD_TCD27_CSR        TCD.TCD27_CSR.R               /* TCD Control and Status */
#define TCD_TCD27_BITER_ELINKNO TCD.BITER27.TCD27_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD27_BITER_ELINKYES TCD.BITER27.TCD27_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_CH28_CSR         TCD.CH28_CSR.R                /* Channel Control and Status */
#define TCD_CH28_ES          TCD.CH28_ES.R                 /* Channel Error Status */
#define TCD_CH28_INT         TCD.CH28_INT.R                /* Channel Interrupt Status */
#define TCD_CH28_SBR         TCD.CH28_SBR.R                /* Channel System Bus */
#define TCD_CH28_PRI         TCD.CH28_PRI.R                /* Channel Priority */
#define TCD_TCD28_SADDR      TCD.TCD28_SADDR.R             /* TCD Source Address */
#define TCD_TCD28_SOFF       TCD.TCD28_SOFF.R              /* TCD Signed Source Address Offset */
#define TCD_TCD28_ATTR       TCD.TCD28_ATTR.R              /* TCD Transfer Attributes */
#define TCD_TCD28_NBYTES_MLOFFNO TCD.NBYTES28.TCD28_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define TCD_TCD28_NBYTES_MLOFFYES TCD.NBYTES28.TCD28_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define TCD_TCD28_SLAST_SDA  TCD.TCD28_SLAST_SDA.R         /* TCD Last Source Address Adjustment / Store DADDR Address */
#define TCD_TCD28_DADDR      TCD.TCD28_DADDR.R             /* TCD Destination Address */
#define TCD_TCD28_DOFF       TCD.TCD28_DOFF.R              /* TCD Signed Destination Address Offset */
#define TCD_TCD28_CITER_ELINKNO TCD.CITER28.TCD28_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD28_CITER_ELINKYES TCD.CITER28.TCD28_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_TCD28_DLAST_SGA  TCD.TCD28_DLAST_SGA.R         /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define TCD_TCD28_CSR        TCD.TCD28_CSR.R               /* TCD Control and Status */
#define TCD_TCD28_BITER_ELINKNO TCD.BITER28.TCD28_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD28_BITER_ELINKYES TCD.BITER28.TCD28_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_CH29_CSR         TCD.CH29_CSR.R                /* Channel Control and Status */
#define TCD_CH29_ES          TCD.CH29_ES.R                 /* Channel Error Status */
#define TCD_CH29_INT         TCD.CH29_INT.R                /* Channel Interrupt Status */
#define TCD_CH29_SBR         TCD.CH29_SBR.R                /* Channel System Bus */
#define TCD_CH29_PRI         TCD.CH29_PRI.R                /* Channel Priority */
#define TCD_TCD29_SADDR      TCD.TCD29_SADDR.R             /* TCD Source Address */
#define TCD_TCD29_SOFF       TCD.TCD29_SOFF.R              /* TCD Signed Source Address Offset */
#define TCD_TCD29_ATTR       TCD.TCD29_ATTR.R              /* TCD Transfer Attributes */
#define TCD_TCD29_NBYTES_MLOFFNO TCD.NBYTES29.TCD29_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define TCD_TCD29_NBYTES_MLOFFYES TCD.NBYTES29.TCD29_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define TCD_TCD29_SLAST_SDA  TCD.TCD29_SLAST_SDA.R         /* TCD Last Source Address Adjustment / Store DADDR Address */
#define TCD_TCD29_DADDR      TCD.TCD29_DADDR.R             /* TCD Destination Address */
#define TCD_TCD29_DOFF       TCD.TCD29_DOFF.R              /* TCD Signed Destination Address Offset */
#define TCD_TCD29_CITER_ELINKNO TCD.CITER29.TCD29_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD29_CITER_ELINKYES TCD.CITER29.TCD29_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_TCD29_DLAST_SGA  TCD.TCD29_DLAST_SGA.R         /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define TCD_TCD29_CSR        TCD.TCD29_CSR.R               /* TCD Control and Status */
#define TCD_TCD29_BITER_ELINKNO TCD.BITER29.TCD29_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD29_BITER_ELINKYES TCD.BITER29.TCD29_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_CH30_CSR         TCD.CH30_CSR.R                /* Channel Control and Status */
#define TCD_CH30_ES          TCD.CH30_ES.R                 /* Channel Error Status */
#define TCD_CH30_INT         TCD.CH30_INT.R                /* Channel Interrupt Status */
#define TCD_CH30_SBR         TCD.CH30_SBR.R                /* Channel System Bus */
#define TCD_CH30_PRI         TCD.CH30_PRI.R                /* Channel Priority */
#define TCD_TCD30_SADDR      TCD.TCD30_SADDR.R             /* TCD Source Address */
#define TCD_TCD30_SOFF       TCD.TCD30_SOFF.R              /* TCD Signed Source Address Offset */
#define TCD_TCD30_ATTR       TCD.TCD30_ATTR.R              /* TCD Transfer Attributes */
#define TCD_TCD30_NBYTES_MLOFFNO TCD.NBYTES30.TCD30_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define TCD_TCD30_NBYTES_MLOFFYES TCD.NBYTES30.TCD30_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define TCD_TCD30_SLAST_SDA  TCD.TCD30_SLAST_SDA.R         /* TCD Last Source Address Adjustment / Store DADDR Address */
#define TCD_TCD30_DADDR      TCD.TCD30_DADDR.R             /* TCD Destination Address */
#define TCD_TCD30_DOFF       TCD.TCD30_DOFF.R              /* TCD Signed Destination Address Offset */
#define TCD_TCD30_CITER_ELINKNO TCD.CITER30.TCD30_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD30_CITER_ELINKYES TCD.CITER30.TCD30_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_TCD30_DLAST_SGA  TCD.TCD30_DLAST_SGA.R         /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define TCD_TCD30_CSR        TCD.TCD30_CSR.R               /* TCD Control and Status */
#define TCD_TCD30_BITER_ELINKNO TCD.BITER30.TCD30_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD30_BITER_ELINKYES TCD.BITER30.TCD30_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_CH31_CSR         TCD.CH31_CSR.R                /* Channel Control and Status */
#define TCD_CH31_ES          TCD.CH31_ES.R                 /* Channel Error Status */
#define TCD_CH31_INT         TCD.CH31_INT.R                /* Channel Interrupt Status */
#define TCD_CH31_SBR         TCD.CH31_SBR.R                /* Channel System Bus */
#define TCD_CH31_PRI         TCD.CH31_PRI.R                /* Channel Priority */
#define TCD_TCD31_SADDR      TCD.TCD31_SADDR.R             /* TCD Source Address */
#define TCD_TCD31_SOFF       TCD.TCD31_SOFF.R              /* TCD Signed Source Address Offset */
#define TCD_TCD31_ATTR       TCD.TCD31_ATTR.R              /* TCD Transfer Attributes */
#define TCD_TCD31_NBYTES_MLOFFNO TCD.NBYTES31.TCD31_NBYTES_MLOFFNO.R /* TCD Transfer Size Without Minor Loop Offsets */
#define TCD_TCD31_NBYTES_MLOFFYES TCD.NBYTES31.TCD31_NBYTES_MLOFFYES.R /* TCD Transfer Size with Minor Loop Offsets */
#define TCD_TCD31_SLAST_SDA  TCD.TCD31_SLAST_SDA.R         /* TCD Last Source Address Adjustment / Store DADDR Address */
#define TCD_TCD31_DADDR      TCD.TCD31_DADDR.R             /* TCD Destination Address */
#define TCD_TCD31_DOFF       TCD.TCD31_DOFF.R              /* TCD Signed Destination Address Offset */
#define TCD_TCD31_CITER_ELINKNO TCD.CITER31.TCD31_CITER_ELINKNO.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD31_CITER_ELINKYES TCD.CITER31.TCD31_CITER_ELINKYES.R /* TCD Current Major Loop Count (Minor Loop Channel Linking Enabled) */
#define TCD_TCD31_DLAST_SGA  TCD.TCD31_DLAST_SGA.R         /* TCD Last Destination Address Adjustment / Scatter Gather Address */
#define TCD_TCD31_CSR        TCD.TCD31_CSR.R               /* TCD Control and Status */
#define TCD_TCD31_BITER_ELINKNO TCD.BITER31.TCD31_BITER_ELINKNO.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Disabled) */
#define TCD_TCD31_BITER_ELINKYES TCD.BITER31.TCD31_BITER_ELINKYES.R /* TCD Beginning Major Loop Count (Minor Loop Channel Linking Enabled) */

/* TEMPSENSE */
#define TEMPSENSE_ETSCTL     TEMPSENSE.ETSCTL.R            /* ETS Control */
#define TEMPSENSE_TCA0       TEMPSENSE.TCA0.R              /* Temperature Coefficient */
#define TEMPSENSE_TCA1       TEMPSENSE.TCA1.R              /* Temperature Coefficient */
#define TEMPSENSE_TCA2       TEMPSENSE.TCA2.R              /* Temperature Coefficient */

/* TRGMUX */
#define TRGMUX_ADC12_0       TRGMUX.ADC12_0.R              /* TRGMUX ADC12_0 Register */
#define TRGMUX_ADC12_1       TRGMUX.ADC12_1.R              /* TRGMUX ADC12_1 Register */
#define TRGMUX_ADC12_2       TRGMUX.ADC12_2.R              /* TRGMUX ADC12_2 Register */
#define TRGMUX_LPCMP_0       TRGMUX.LPCMP_0r.R             /* TRGMUX LPCMP_0 Register */
#define TRGMUX_LPCMP_1       TRGMUX.LPCMP_1r.R             /* TRGMUX LPCMP_1 Register */
#define TRGMUX_LPCMP_2       TRGMUX.LPCMP_2r.R             /* TRGMUX LPCMP_2 Register */
#define TRGMUX_BCTU          TRGMUX.BCTUr.R                /* TRGMUX BCTU Register */
#define TRGMUX_eMIOS012_ODIS TRGMUX.EMIOS012_ODIS.R        /* TRGMUX eMIOS012_ODIS Register */
#define TRGMUX_eMIOS0_0      TRGMUX.EMIOS0_0.R             /* TRGMUX eMIOS0_0 Register */
#define TRGMUX_eMIOS0_1      TRGMUX.EMIOS0_1.R             /* TRGMUX eMIOS0_1 Register */
#define TRGMUX_eMIOS0_2      TRGMUX.EMIOS0_2.R             /* TRGMUX eMIOS0_2 Register */
#define TRGMUX_eMIOS0_3      TRGMUX.EMIOS0_3.R             /* TRGMUX eMIOS0_3 Register */
#define TRGMUX_eMIOS1_0      TRGMUX.EMIOS1_0.R             /* TRGMUX eMIOS1_0 Register */
#define TRGMUX_eMIOS1_1      TRGMUX.EMIOS1_1.R             /* TRGMUX eMIOS1_1 Register */
#define TRGMUX_eMIOS1_2      TRGMUX.EMIOS1_2.R             /* TRGMUX eMIOS1_2 Register */
#define TRGMUX_eMIOS1_3      TRGMUX.EMIOS1_3.R             /* TRGMUX eMIOS1_3 Register */
#define TRGMUX_FlexIO        TRGMUX.FLEXIOr.R              /* TRGMUX FlexIO Register */
#define TRGMUX_SIUL_OUT0     TRGMUX.SIUL_OUT0.R            /* TRGMUX SIUL_OUT0 Register */
#define TRGMUX_SIUL_OUT1     TRGMUX.SIUL_OUT1.R            /* TRGMUX SIUL_OUT1 Register */
#define TRGMUX_SIUL_OUT2     TRGMUX.SIUL_OUT2.R            /* TRGMUX SIUL_OUT2 Register */
#define TRGMUX_SIUL_OUT3     TRGMUX.SIUL_OUT3.R            /* TRGMUX SIUL_OUT3 Register */
#define TRGMUX_LPI2C_0       TRGMUX.LPI2C_0r.R             /* TRGMUX LPI2C_0 Register */
#define TRGMUX_LPSPI_0       TRGMUX.LPSPI_0r.R             /* TRGMUX LPSPI_0 Register */
#define TRGMUX_LPSPI_1       TRGMUX.LPSPI_1r.R             /* TRGMUX LPSPI_1 Register */
#define TRGMUX_LPSPI_2       TRGMUX.LPSPI_2r.R             /* TRGMUX LPSPI_2 Register */
#define TRGMUX_LPUART_0      TRGMUX.LPUART_0r.R            /* TRGMUX LPUART_0 Register */
#define TRGMUX_LPUART_1      TRGMUX.LPUART_1r.R            /* TRGMUX LPUART_1 Register */
#define TRGMUX_LPUART_2      TRGMUX.LPUART_2r.R            /* TRGMUX LPUART_2 Register */
#define TRGMUX_LPUART_3      TRGMUX.LPUART_3r.R            /* TRGMUX LPUART_3 Register */
#define TRGMUX_LCU0_SYNC     TRGMUX.LCU0_SYNC.R            /* TRGMUX LCU0_SYNC Register */
#define TRGMUX_LCU0_FORCE    TRGMUX.LCU0_FORCE.R           /* TRGMUX LCU0_FORCE Register */
#define TRGMUX_LCU0_0        TRGMUX.LCU0_0.R               /* TRGMUX LCU0_0 Register */
#define TRGMUX_LCU0_1        TRGMUX.LCU0_1.R               /* TRGMUX LCU0_1 Register */
#define TRGMUX_LCU0_2        TRGMUX.LCU0_2.R               /* TRGMUX LCU0_2 Register */
#define TRGMUX_LCU1_SYNC     TRGMUX.LCU1_SYNC.R            /* TRGMUX LCU1_SYNC Register */
#define TRGMUX_LCU1_FORCE    TRGMUX.LCU1_FORCE.R           /* TRGMUX LCU1_FORCE Register */
#define TRGMUX_LCU1_0        TRGMUX.LCU1_0.R               /* TRGMUX LCU1_0 Register */
#define TRGMUX_LCU1_1        TRGMUX.LCU1_1.R               /* TRGMUX LCU1_1 Register */
#define TRGMUX_LCU1_2        TRGMUX.LCU1_2.R               /* TRGMUX LCU1_2 Register */
#define TRGMUX_CM7_RXEV      TRGMUX.CM7_RXEV.R             /* TRGMUX CM7_RXEV Register */

/* TSPC */
#define TSPC_GRP_EN          TSPC.GRP_EN.R                 /* Group Enable */
#define TSPC_GRP1_OBE1       TSPC.GROUP[0].GRP_OBE1.R      /* Group OBE */
#define TSPC_GRP1_OBE2       TSPC.GROUP[0].GRP_OBE2.R      /* Group OBE */
#define TSPC_GRP2_OBE1       TSPC.GROUP[1].GRP_OBE1.R      /* Group OBE */
#define TSPC_GRP2_OBE2       TSPC.GROUP[1].GRP_OBE2.R      /* Group OBE */

/* VIRT_WRAPPER */
#define VIRT_WRAPPER_REG_A15_0 VIRT_WRAPPER.A[0].R         /* Parameter_n Register */
#define VIRT_WRAPPER_REG_A31_16 VIRT_WRAPPER.A[1].R        /* Parameter_n Register */
#define VIRT_WRAPPER_REG_A47_32 VIRT_WRAPPER.A[2].R        /* Parameter_n Register */
#define VIRT_WRAPPER_REG_A63_48 VIRT_WRAPPER.A[3].R        /* Parameter_n Register */
#define VIRT_WRAPPER_REG_A79_64 VIRT_WRAPPER.A[4].R        /* Parameter_n Register */
#define VIRT_WRAPPER_REG_A95_80 VIRT_WRAPPER.A[5].R        /* Parameter_n Register */
#define VIRT_WRAPPER_REG_A111_96 VIRT_WRAPPER.A[6].R       /* Parameter_n Register */
#define VIRT_WRAPPER_REG_A127_112 VIRT_WRAPPER.A[7].R      /* Parameter_n Register */
#define VIRT_WRAPPER_REG_A143_128 VIRT_WRAPPER.A[8].R      /* Parameter_n Register */
#define VIRT_WRAPPER_REG_A159_144 VIRT_WRAPPER.A[9].R      /* Parameter_n Register */
#define VIRT_WRAPPER_REG_A175_160 VIRT_WRAPPER.A[10].R     /* Parameter_n Register */
#define VIRT_WRAPPER_REG_A191_176 VIRT_WRAPPER.A[11].R     /* Parameter_n Register */
#define VIRT_WRAPPER_REG_A207_192 VIRT_WRAPPER.A[12].R     /* Parameter_n Register */
#define VIRT_WRAPPER_REG_A223_208 VIRT_WRAPPER.A[13].R     /* Parameter_n Register */
#define VIRT_WRAPPER_REG_A239_224 VIRT_WRAPPER.A[14].R     /* Parameter_n Register */
#define VIRT_WRAPPER_REG_A255_240 VIRT_WRAPPER.A[15].R     /* Parameter_n Register */
#define VIRT_WRAPPER_REG_A271_256 VIRT_WRAPPER.A[16].R     /* Parameter_n Register */
#define VIRT_WRAPPER_REG_A287_272 VIRT_WRAPPER.A[17].R     /* Parameter_n Register */
#define VIRT_WRAPPER_REG_A303_288 VIRT_WRAPPER.A[18].R     /* Parameter_n Register */
#define VIRT_WRAPPER_REG_A319_304 VIRT_WRAPPER.A[19].R     /* Parameter_n Register */
#define VIRT_WRAPPER_REG_A335_320 VIRT_WRAPPER.A[20].R     /* Parameter_n Register */
#define VIRT_WRAPPER_REG_A351_336 VIRT_WRAPPER.A[21].R     /* Parameter_n Register */
#define VIRT_WRAPPER_REG_A367_352 VIRT_WRAPPER.A[22].R     /* Parameter_n Register */
#define VIRT_WRAPPER_REG_A383_368 VIRT_WRAPPER.A[23].R     /* Parameter_n Register */
#define VIRT_WRAPPER_REG_A399_384 VIRT_WRAPPER.A[24].R     /* Parameter_n Register */
#define VIRT_WRAPPER_REG_A415_400 VIRT_WRAPPER.A[25].R     /* Parameter_n Register */
#define VIRT_WRAPPER_REG_A431_416 VIRT_WRAPPER.A[26].R     /* Parameter_n Register */
#define VIRT_WRAPPER_REG_A447_432 VIRT_WRAPPER.A[27].R     /* Parameter_n Register */
#define VIRT_WRAPPER_REG_A463_448 VIRT_WRAPPER.A[28].R     /* Parameter_n Register */
#define VIRT_WRAPPER_REG_A479_464 VIRT_WRAPPER.A[29].R     /* Parameter_n Register */
#define VIRT_WRAPPER_REG_A495_480 VIRT_WRAPPER.A[30].R     /* Parameter_n Register */
#define VIRT_WRAPPER_REG_A511_496 VIRT_WRAPPER.A[31].R     /* Parameter_n Register */
#define VIRT_WRAPPER_REG_B527_512 VIRT_WRAPPER.REG_B[0].R  /* Parameter_n Register */
#define VIRT_WRAPPER_REG_B543_528 VIRT_WRAPPER.REG_B[1].R  /* Parameter_n Register */
#define VIRT_WRAPPER_REG_B559_544 VIRT_WRAPPER.REG_B[2].R  /* Parameter_n Register */
#define VIRT_WRAPPER_REG_B575_560 VIRT_WRAPPER.REG_B[3].R  /* Parameter_n Register */
#define VIRT_WRAPPER_REG_B591_576 VIRT_WRAPPER.REG_B[4].R  /* Parameter_n Register */
#define VIRT_WRAPPER_REG_B607_592 VIRT_WRAPPER.REG_B[5].R  /* Parameter_n Register */
#define VIRT_WRAPPER_REG_B623_608 VIRT_WRAPPER.REG_B[6].R  /* Parameter_n Register */
#define VIRT_WRAPPER_REG_B639_624 VIRT_WRAPPER.REG_B[7].R  /* Parameter_n Register */
#define VIRT_WRAPPER_REG_B655_640 VIRT_WRAPPER.REG_B[8].R  /* Parameter_n Register */
#define VIRT_WRAPPER_REG_B671_656 VIRT_WRAPPER.REG_B[9].R  /* Parameter_n Register */
#define VIRT_WRAPPER_REG_B687_672 VIRT_WRAPPER.REG_B[10].R /* Parameter_n Register */
#define VIRT_WRAPPER_REG_B703_688 VIRT_WRAPPER.REG_B[11].R /* Parameter_n Register */
#define VIRT_WRAPPER_REG_B719_704 VIRT_WRAPPER.REG_B[12].R /* Parameter_n Register */
#define VIRT_WRAPPER_REG_B735_720 VIRT_WRAPPER.REG_B[13].R /* Parameter_n Register */
#define VIRT_WRAPPER_REG_B751_736 VIRT_WRAPPER.REG_B[14].R /* Parameter_n Register */
#define VIRT_WRAPPER_REG_B767_752 VIRT_WRAPPER.REG_B[15].R /* Parameter_n Register */
#define VIRT_WRAPPER_REG_B783_768 VIRT_WRAPPER.REG_B[16].R /* Parameter_n Register */
#define VIRT_WRAPPER_REG_B799_784 VIRT_WRAPPER.REG_B[17].R /* Parameter_n Register */
#define VIRT_WRAPPER_REG_B815_800 VIRT_WRAPPER.REG_B[18].R /* Parameter_n Register */
#define VIRT_WRAPPER_REG_B831_816 VIRT_WRAPPER.REG_B[19].R /* Parameter_n Register */
#define VIRT_WRAPPER_REG_B847_832 VIRT_WRAPPER.REG_B[20].R /* Parameter_n Register */
#define VIRT_WRAPPER_REG_B863_848 VIRT_WRAPPER.REG_B[21].R /* Parameter_n Register */
#define VIRT_WRAPPER_REG_B879_864 VIRT_WRAPPER.REG_B[22].R /* Parameter_n Register */
#define VIRT_WRAPPER_REG_B895_880 VIRT_WRAPPER.REG_B[23].R /* Parameter_n Register */
#define VIRT_WRAPPER_REG_B911_896 VIRT_WRAPPER.REG_B[24].R /* Parameter_n Register */
#define VIRT_WRAPPER_REG_B927_912 VIRT_WRAPPER.REG_B[25].R /* Parameter_n Register */
#define VIRT_WRAPPER_REG_B943_928 VIRT_WRAPPER.REG_B[26].R /* Parameter_n Register */
#define VIRT_WRAPPER_REG_B959_944 VIRT_WRAPPER.REG_B[27].R /* Parameter_n Register */
#define VIRT_WRAPPER_REG_B975_960 VIRT_WRAPPER.REG_B[28].R /* Parameter_n Register */
#define VIRT_WRAPPER_REG_B991_976 VIRT_WRAPPER.REG_B[29].R /* Parameter_n Register */
#define VIRT_WRAPPER_REG_B1007_992 VIRT_WRAPPER.REG_B[30].R /* Parameter_n Register */
#define VIRT_WRAPPER_REG_B1023_1008 VIRT_WRAPPER.REG_B[31].R /* Parameter_n Register */
#define VIRT_WRAPPER_REG_C1039_1024 VIRT_WRAPPER.REG_C[0].R /* Parameter_n Register */
#define VIRT_WRAPPER_REG_D1055_1040 VIRT_WRAPPER.REG_D[0].R /* Parameter_n Register */

/* WKPU */
#define WKPU_NSR             WKPU.NSR.R                    /* NMI Status Flag Register */
#define WKPU_NCR             WKPU.NCR.R                    /* NMI Configuration Register */
#define WKPU_WISR            WKPU.WISR.R                   /* Wakeup/Interrupt Status Flag Register */
#define WKPU_IRER            WKPU.IRER.R                   /* Interrupt Request Enable Register */
#define WKPU_WRER            WKPU.WRER.R                   /* Wakeup Request Enable Register */
#define WKPU_WIREER          WKPU.WIREER.R                 /* Wakeup/Interrupt Rising-Edge Event Enable Register */
#define WKPU_WIFEER          WKPU.WIFEER.R                 /* Wakeup/Interrupt Falling-Edge Event Enable Register */
#define WKPU_WIFER           WKPU.WIFER.R                  /* Wakeup/Interrupt Filter Enable Register */
#define WKPU_WISR_64         WKPU.WISR_64.R                /* Wakeup/Interrupt Status Flag Register */
#define WKPU_IRER_64         WKPU.IRER_64.R                /* Interrupt Request Enable Register */
#define WKPU_WRER_64         WKPU.WRER_64.R                /* Wakeup Request Enable Register */
#define WKPU_WIREER_64       WKPU.WIREER_64.R              /* Wakeup/Interrupt Rising-Edge Event Enable Register */
#define WKPU_WIFEER_64       WKPU.WIFEER_64.R              /* Wakeup/Interrupt Falling-Edge Event Enable Register */
#define WKPU_WIFER_64        WKPU.WIFER_64.R               /* Wakeup/Interrupt Filter Enable Register */

/* XBIC */
#define XBIC_AXBS_MCR        XBIC_AXBS.MCR.R               /* XBIC Module Control */
#define XBIC_AXBS_EIR        XBIC_AXBS.EIR.R               /* XBIC Error Injection */
#define XBIC_AXBS_ESR        XBIC_AXBS.ESR.R               /* XBIC Error Status */
#define XBIC_AXBS_EAR        XBIC_AXBS.EAR.R               /* XBIC Error Address */

#define XBIC_AXBS_EDMA_MCR   XBIC_AXBS_EDMA.MCR.R          /* XBIC Module Control */
#define XBIC_AXBS_EDMA_EIR   XBIC_AXBS_EDMA.EIR.R          /* XBIC Error Injection */
#define XBIC_AXBS_EDMA_ESR   XBIC_AXBS_EDMA.ESR.R          /* XBIC Error Status */
#define XBIC_AXBS_EDMA_EAR   XBIC_AXBS_EDMA.EAR.R          /* XBIC Error Address */

#define XBIC_AXBS_PERI_MCR   XBIC_AXBS_PERI.MCR.R          /* XBIC Module Control */
#define XBIC_AXBS_PERI_EIR   XBIC_AXBS_PERI.EIR.R          /* XBIC Error Injection */
#define XBIC_AXBS_PERI_ESR   XBIC_AXBS_PERI.ESR.R          /* XBIC Error Status */
#define XBIC_AXBS_PERI_EAR   XBIC_AXBS_PERI.EAR.R          /* XBIC Error Address */

#define XBIC_AXBS_TCM_MCR    XBIC_AXBS_TCM.MCR.R           /* XBIC Module Control */
#define XBIC_AXBS_TCM_EIR    XBIC_AXBS_TCM.EIR.R           /* XBIC Error Injection */
#define XBIC_AXBS_TCM_ESR    XBIC_AXBS_TCM.ESR.R           /* XBIC Error Status */
#define XBIC_AXBS_TCM_EAR    XBIC_AXBS_TCM.EAR.R           /* XBIC Error Address */

/* XRDC */
#define XRDC_CR              XRDC.CR.R                     /* Control */
#define XRDC_HWCFG0          XRDC.HWCFG0.R                 /* Hardware Configuration 0 */
#define XRDC_HWCFG1          XRDC.HWCFG1.R                 /* Hardware Configuration 1 */
#define XRDC_HWCFG2          XRDC.HWCFG2.R                 /* Hardware Configuration 2 */
#define XRDC_MDACFG0         XRDC.MDACFG[0].R              /* Master Domain Assignment Configuration */
#define XRDC_MDACFG1         XRDC.MDACFG[1].R              /* Master Domain Assignment Configuration */
#define XRDC_MDACFG2         XRDC.MDACFG[2].R              /* Master Domain Assignment Configuration */
#define XRDC_MDACFG3         XRDC.MDACFG[3].R              /* Master Domain Assignment Configuration */
#define XRDC_MDACFG4         XRDC.MDACFG[4].R              /* Master Domain Assignment Configuration */
#define XRDC_MDACFG5         XRDC.MDACFG[5].R              /* Master Domain Assignment Configuration */
#define XRDC_MRCFG0          XRDC.MRCFG[0].R               /* Memory Region Configuration */
#define XRDC_MRCFG1          XRDC.MRCFG[1].R               /* Memory Region Configuration */
#define XRDC_MRCFG2          XRDC.MRCFG[2].R               /* Memory Region Configuration */
#define XRDC_DERRLOC0        XRDC.DERRLOC[0].R             /* Domain Error Location */
#define XRDC_DERRLOC1        XRDC.DERRLOC[1].R             /* Domain Error Location */
#define XRDC_DERRLOC2        XRDC.DERRLOC[2].R             /* Domain Error Location */
#define XRDC_DERR_W0_0       XRDC.DERRW0[0].DERR_W0.R      /* Domain Error Word0 */
#define XRDC_DERR_W1_0       XRDC.DERRW0[0].DERR_W1.R      /* Domain Error Word1 */
#define XRDC_DERR_W3_0       XRDC.DERRW0[0].DERR_W3.R      /* Domain Error Word3 */
#define XRDC_DERR_W0_1       XRDC.DERRW0[1].DERR_W0.R      /* Domain Error Word0 */
#define XRDC_DERR_W1_1       XRDC.DERRW0[1].DERR_W1.R      /* Domain Error Word1 */
#define XRDC_DERR_W3_1       XRDC.DERRW0[1].DERR_W3.R      /* Domain Error Word3 */
#define XRDC_DERR_W0_2       XRDC.DERRW0[2].DERR_W0.R      /* Domain Error Word0 */
#define XRDC_DERR_W1_2       XRDC.DERRW0[2].DERR_W1.R      /* Domain Error Word1 */
#define XRDC_DERR_W3_2       XRDC.DERRW0[2].DERR_W3.R      /* Domain Error Word3 */
#define XRDC_DERR_W0_16      XRDC.DERRW0[16].DERR_W0.R     /* Domain Error Word0 */
#define XRDC_DERR_W1_16      XRDC.DERRW0[16].DERR_W1.R     /* Domain Error Word1 */
#define XRDC_DERR_W3_16      XRDC.DERRW0[16].DERR_W3.R     /* Domain Error Word3 */
#define XRDC_DERR_W0_17      XRDC.DERRW0[17].DERR_W0.R     /* Domain Error Word0 */
#define XRDC_DERR_W1_17      XRDC.DERRW0[17].DERR_W1.R     /* Domain Error Word1 */
#define XRDC_DERR_W3_17      XRDC.DERRW0[17].DERR_W3.R     /* Domain Error Word3 */
#define XRDC_DERR_W0_18      XRDC.DERRW0[18].DERR_W0.R     /* Domain Error Word0 */
#define XRDC_DERR_W1_18      XRDC.DERRW0[18].DERR_W1.R     /* Domain Error Word1 */
#define XRDC_DERR_W3_18      XRDC.DERRW0[18].DERR_W3.R     /* Domain Error Word3 */
#define XRDC_PID0            XRDC.PID[0].R                 /* Process Identifier */
#define XRDC_PID3            XRDC.PID[3].R                 /* Process Identifier */
#define XRDC_PID4            XRDC.PID[4].R                 /* Process Identifier */
#define XRDC_MDA_W0_0_DFMT0  XRDC.MDA_W0_0_DFMT0.R         /* Master Domain Assignment */
#define XRDC_MDA_W0_1_DFMT1  XRDC.MDA_W0_1_DFMT1.R         /* Master Domain Assignment */
#define XRDC_MDA_W0_2_DFMT1  XRDC.MDA_W0_2_DFMT1.R         /* Master Domain Assignment */
#define XRDC_MDA_W0_3_DFMT0  XRDC.MDA_W0_3_DFMT0.R         /* Master Domain Assignment */
#define XRDC_MDA_W0_4_DFMT0  XRDC.MDA_W0_4_DFMT0.R         /* Master Domain Assignment */
#define XRDC_MDA_W0_5_DFMT1  XRDC.MDA_W0_5_DFMT1.R         /* Master Domain Assignment */
#define XRDC_PDAC_W0_32      XRDC.PDAC_SLOT[0].PDACN[32].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_32      XRDC.PDAC_SLOT[0].PDACN[32].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_33      XRDC.PDAC_SLOT[0].PDACN[33].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_33      XRDC.PDAC_SLOT[0].PDACN[33].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_34      XRDC.PDAC_SLOT[0].PDACN[34].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_34      XRDC.PDAC_SLOT[0].PDACN[34].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_35      XRDC.PDAC_SLOT[0].PDACN[35].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_35      XRDC.PDAC_SLOT[0].PDACN[35].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_36      XRDC.PDAC_SLOT[0].PDACN[36].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_36      XRDC.PDAC_SLOT[0].PDACN[36].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_38      XRDC.PDAC_SLOT[0].PDACN[38].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_38      XRDC.PDAC_SLOT[0].PDACN[38].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_39      XRDC.PDAC_SLOT[0].PDACN[39].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_39      XRDC.PDAC_SLOT[0].PDACN[39].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_40      XRDC.PDAC_SLOT[0].PDACN[40].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_40      XRDC.PDAC_SLOT[0].PDACN[40].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_41      XRDC.PDAC_SLOT[0].PDACN[41].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_41      XRDC.PDAC_SLOT[0].PDACN[41].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_42      XRDC.PDAC_SLOT[0].PDACN[42].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_42      XRDC.PDAC_SLOT[0].PDACN[42].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_44      XRDC.PDAC_SLOT[0].PDACN[44].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_44      XRDC.PDAC_SLOT[0].PDACN[44].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_45      XRDC.PDAC_SLOT[0].PDACN[45].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_45      XRDC.PDAC_SLOT[0].PDACN[45].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_46      XRDC.PDAC_SLOT[0].PDACN[46].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_46      XRDC.PDAC_SLOT[0].PDACN[46].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_47      XRDC.PDAC_SLOT[0].PDACN[47].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_47      XRDC.PDAC_SLOT[0].PDACN[47].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_128     XRDC.PDAC_SLOT[1].PDACN[0].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_128     XRDC.PDAC_SLOT[1].PDACN[0].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_129     XRDC.PDAC_SLOT[1].PDACN[1].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_129     XRDC.PDAC_SLOT[1].PDACN[1].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_130     XRDC.PDAC_SLOT[1].PDACN[2].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_130     XRDC.PDAC_SLOT[1].PDACN[2].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_131     XRDC.PDAC_SLOT[1].PDACN[3].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_131     XRDC.PDAC_SLOT[1].PDACN[3].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_132     XRDC.PDAC_SLOT[1].PDACN[4].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_132     XRDC.PDAC_SLOT[1].PDACN[4].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_133     XRDC.PDAC_SLOT[1].PDACN[5].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_133     XRDC.PDAC_SLOT[1].PDACN[5].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_134     XRDC.PDAC_SLOT[1].PDACN[6].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_134     XRDC.PDAC_SLOT[1].PDACN[6].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_135     XRDC.PDAC_SLOT[1].PDACN[7].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_135     XRDC.PDAC_SLOT[1].PDACN[7].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_136     XRDC.PDAC_SLOT[1].PDACN[8].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_136     XRDC.PDAC_SLOT[1].PDACN[8].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_137     XRDC.PDAC_SLOT[1].PDACN[9].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_137     XRDC.PDAC_SLOT[1].PDACN[9].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_138     XRDC.PDAC_SLOT[1].PDACN[10].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_138     XRDC.PDAC_SLOT[1].PDACN[10].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_139     XRDC.PDAC_SLOT[1].PDACN[11].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_139     XRDC.PDAC_SLOT[1].PDACN[11].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_140     XRDC.PDAC_SLOT[1].PDACN[12].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_140     XRDC.PDAC_SLOT[1].PDACN[12].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_141     XRDC.PDAC_SLOT[1].PDACN[13].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_141     XRDC.PDAC_SLOT[1].PDACN[13].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_142     XRDC.PDAC_SLOT[1].PDACN[14].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_142     XRDC.PDAC_SLOT[1].PDACN[14].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_143     XRDC.PDAC_SLOT[1].PDACN[15].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_143     XRDC.PDAC_SLOT[1].PDACN[15].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_144     XRDC.PDAC_SLOT[1].PDACN[16].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_144     XRDC.PDAC_SLOT[1].PDACN[16].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_145     XRDC.PDAC_SLOT[1].PDACN[17].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_145     XRDC.PDAC_SLOT[1].PDACN[17].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_146     XRDC.PDAC_SLOT[1].PDACN[18].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_146     XRDC.PDAC_SLOT[1].PDACN[18].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_147     XRDC.PDAC_SLOT[1].PDACN[19].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_147     XRDC.PDAC_SLOT[1].PDACN[19].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_148     XRDC.PDAC_SLOT[1].PDACN[20].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_148     XRDC.PDAC_SLOT[1].PDACN[20].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_149     XRDC.PDAC_SLOT[1].PDACN[21].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_149     XRDC.PDAC_SLOT[1].PDACN[21].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_150     XRDC.PDAC_SLOT[1].PDACN[22].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_150     XRDC.PDAC_SLOT[1].PDACN[22].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_151     XRDC.PDAC_SLOT[1].PDACN[23].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_151     XRDC.PDAC_SLOT[1].PDACN[23].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_152     XRDC.PDAC_SLOT[1].PDACN[24].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_152     XRDC.PDAC_SLOT[1].PDACN[24].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_153     XRDC.PDAC_SLOT[1].PDACN[25].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_153     XRDC.PDAC_SLOT[1].PDACN[25].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_154     XRDC.PDAC_SLOT[1].PDACN[26].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_154     XRDC.PDAC_SLOT[1].PDACN[26].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_155     XRDC.PDAC_SLOT[1].PDACN[27].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_155     XRDC.PDAC_SLOT[1].PDACN[27].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_156     XRDC.PDAC_SLOT[1].PDACN[28].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_156     XRDC.PDAC_SLOT[1].PDACN[28].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_157     XRDC.PDAC_SLOT[1].PDACN[29].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_157     XRDC.PDAC_SLOT[1].PDACN[29].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_158     XRDC.PDAC_SLOT[1].PDACN[30].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_158     XRDC.PDAC_SLOT[1].PDACN[30].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_159     XRDC.PDAC_SLOT[1].PDACN[31].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_159     XRDC.PDAC_SLOT[1].PDACN[31].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_160     XRDC.PDAC_SLOT[1].PDACN[32].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_160     XRDC.PDAC_SLOT[1].PDACN[32].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_161     XRDC.PDAC_SLOT[1].PDACN[33].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_161     XRDC.PDAC_SLOT[1].PDACN[33].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_162     XRDC.PDAC_SLOT[1].PDACN[34].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_162     XRDC.PDAC_SLOT[1].PDACN[34].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_163     XRDC.PDAC_SLOT[1].PDACN[35].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_163     XRDC.PDAC_SLOT[1].PDACN[35].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_164     XRDC.PDAC_SLOT[1].PDACN[36].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_164     XRDC.PDAC_SLOT[1].PDACN[36].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_165     XRDC.PDAC_SLOT[1].PDACN[37].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_165     XRDC.PDAC_SLOT[1].PDACN[37].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_166     XRDC.PDAC_SLOT[1].PDACN[38].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_166     XRDC.PDAC_SLOT[1].PDACN[38].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_167     XRDC.PDAC_SLOT[1].PDACN[39].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_167     XRDC.PDAC_SLOT[1].PDACN[39].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_168     XRDC.PDAC_SLOT[1].PDACN[40].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_168     XRDC.PDAC_SLOT[1].PDACN[40].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_169     XRDC.PDAC_SLOT[1].PDACN[41].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_169     XRDC.PDAC_SLOT[1].PDACN[41].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_170     XRDC.PDAC_SLOT[1].PDACN[42].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_170     XRDC.PDAC_SLOT[1].PDACN[42].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_171     XRDC.PDAC_SLOT[1].PDACN[43].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_171     XRDC.PDAC_SLOT[1].PDACN[43].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_173     XRDC.PDAC_SLOT[1].PDACN[45].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_173     XRDC.PDAC_SLOT[1].PDACN[45].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_175     XRDC.PDAC_SLOT[1].PDACN[47].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_175     XRDC.PDAC_SLOT[1].PDACN[47].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_177     XRDC.PDAC_SLOT[1].PDACN[49].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_177     XRDC.PDAC_SLOT[1].PDACN[49].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_178     XRDC.PDAC_SLOT[1].PDACN[50].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_178     XRDC.PDAC_SLOT[1].PDACN[50].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_179     XRDC.PDAC_SLOT[1].PDACN[51].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_179     XRDC.PDAC_SLOT[1].PDACN[51].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_180     XRDC.PDAC_SLOT[1].PDACN[52].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_180     XRDC.PDAC_SLOT[1].PDACN[52].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_181     XRDC.PDAC_SLOT[1].PDACN[53].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_181     XRDC.PDAC_SLOT[1].PDACN[53].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_182     XRDC.PDAC_SLOT[1].PDACN[54].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_182     XRDC.PDAC_SLOT[1].PDACN[54].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_183     XRDC.PDAC_SLOT[1].PDACN[55].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_183     XRDC.PDAC_SLOT[1].PDACN[55].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_184     XRDC.PDAC_SLOT[1].PDACN[56].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_184     XRDC.PDAC_SLOT[1].PDACN[56].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_186     XRDC.PDAC_SLOT[1].PDACN[58].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_186     XRDC.PDAC_SLOT[1].PDACN[58].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_187     XRDC.PDAC_SLOT[1].PDACN[59].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_187     XRDC.PDAC_SLOT[1].PDACN[59].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_188     XRDC.PDAC_SLOT[1].PDACN[60].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_188     XRDC.PDAC_SLOT[1].PDACN[60].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_191     XRDC.PDAC_SLOT[1].PDACN[63].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_191     XRDC.PDAC_SLOT[1].PDACN[63].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_193     XRDC.PDAC_SLOT[1].PDACN[65].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_193     XRDC.PDAC_SLOT[1].PDACN[65].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_194     XRDC.PDAC_SLOT[1].PDACN[66].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_194     XRDC.PDAC_SLOT[1].PDACN[66].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_195     XRDC.PDAC_SLOT[1].PDACN[67].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_195     XRDC.PDAC_SLOT[1].PDACN[67].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_196     XRDC.PDAC_SLOT[1].PDACN[68].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_196     XRDC.PDAC_SLOT[1].PDACN[68].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_197     XRDC.PDAC_SLOT[1].PDACN[69].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_197     XRDC.PDAC_SLOT[1].PDACN[69].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_198     XRDC.PDAC_SLOT[1].PDACN[70].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_198     XRDC.PDAC_SLOT[1].PDACN[70].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_201     XRDC.PDAC_SLOT[1].PDACN[73].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_201     XRDC.PDAC_SLOT[1].PDACN[73].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_202     XRDC.PDAC_SLOT[1].PDACN[74].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_202     XRDC.PDAC_SLOT[1].PDACN[74].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_203     XRDC.PDAC_SLOT[1].PDACN[75].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_203     XRDC.PDAC_SLOT[1].PDACN[75].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_204     XRDC.PDAC_SLOT[1].PDACN[76].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_204     XRDC.PDAC_SLOT[1].PDACN[76].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_205     XRDC.PDAC_SLOT[1].PDACN[77].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_205     XRDC.PDAC_SLOT[1].PDACN[77].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_206     XRDC.PDAC_SLOT[1].PDACN[78].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_206     XRDC.PDAC_SLOT[1].PDACN[78].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_207     XRDC.PDAC_SLOT[1].PDACN[79].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_207     XRDC.PDAC_SLOT[1].PDACN[79].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_208     XRDC.PDAC_SLOT[1].PDACN[80].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_208     XRDC.PDAC_SLOT[1].PDACN[80].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_209     XRDC.PDAC_SLOT[1].PDACN[81].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_209     XRDC.PDAC_SLOT[1].PDACN[81].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_212     XRDC.PDAC_SLOT[1].PDACN[84].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_212     XRDC.PDAC_SLOT[1].PDACN[84].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_213     XRDC.PDAC_SLOT[1].PDACN[85].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_213     XRDC.PDAC_SLOT[1].PDACN[85].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_214     XRDC.PDAC_SLOT[1].PDACN[86].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_214     XRDC.PDAC_SLOT[1].PDACN[86].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_215     XRDC.PDAC_SLOT[1].PDACN[87].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_215     XRDC.PDAC_SLOT[1].PDACN[87].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_216     XRDC.PDAC_SLOT[1].PDACN[88].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_216     XRDC.PDAC_SLOT[1].PDACN[88].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_217     XRDC.PDAC_SLOT[1].PDACN[89].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_217     XRDC.PDAC_SLOT[1].PDACN[89].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_219     XRDC.PDAC_SLOT[1].PDACN[91].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_219     XRDC.PDAC_SLOT[1].PDACN[91].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_220     XRDC.PDAC_SLOT[1].PDACN[92].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_220     XRDC.PDAC_SLOT[1].PDACN[92].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_221     XRDC.PDAC_SLOT[1].PDACN[93].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_221     XRDC.PDAC_SLOT[1].PDACN[93].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_223     XRDC.PDAC_SLOT[1].PDACN[95].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_223     XRDC.PDAC_SLOT[1].PDACN[95].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_224     XRDC.PDAC_SLOT[1].PDACN[96].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_224     XRDC.PDAC_SLOT[1].PDACN[96].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_225     XRDC.PDAC_SLOT[1].PDACN[97].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_225     XRDC.PDAC_SLOT[1].PDACN[97].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_226     XRDC.PDAC_SLOT[1].PDACN[98].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_226     XRDC.PDAC_SLOT[1].PDACN[98].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_227     XRDC.PDAC_SLOT[1].PDACN[99].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_227     XRDC.PDAC_SLOT[1].PDACN[99].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_229     XRDC.PDAC_SLOT[1].PDACN[101].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_229     XRDC.PDAC_SLOT[1].PDACN[101].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_230     XRDC.PDAC_SLOT[1].PDACN[102].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_230     XRDC.PDAC_SLOT[1].PDACN[102].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_231     XRDC.PDAC_SLOT[1].PDACN[103].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_231     XRDC.PDAC_SLOT[1].PDACN[103].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_232     XRDC.PDAC_SLOT[1].PDACN[104].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_232     XRDC.PDAC_SLOT[1].PDACN[104].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_233     XRDC.PDAC_SLOT[1].PDACN[105].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_233     XRDC.PDAC_SLOT[1].PDACN[105].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_234     XRDC.PDAC_SLOT[1].PDACN[106].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_234     XRDC.PDAC_SLOT[1].PDACN[106].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_235     XRDC.PDAC_SLOT[1].PDACN[107].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_235     XRDC.PDAC_SLOT[1].PDACN[107].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_236     XRDC.PDAC_SLOT[1].PDACN[108].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_236     XRDC.PDAC_SLOT[1].PDACN[108].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_238     XRDC.PDAC_SLOT[1].PDACN[110].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_238     XRDC.PDAC_SLOT[1].PDACN[110].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_256     XRDC.PDAC_SLOT[2].PDACN[0].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_256     XRDC.PDAC_SLOT[2].PDACN[0].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_257     XRDC.PDAC_SLOT[2].PDACN[1].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_257     XRDC.PDAC_SLOT[2].PDACN[1].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_260     XRDC.PDAC_SLOT[2].PDACN[4].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_260     XRDC.PDAC_SLOT[2].PDACN[4].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_261     XRDC.PDAC_SLOT[2].PDACN[5].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_261     XRDC.PDAC_SLOT[2].PDACN[5].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_262     XRDC.PDAC_SLOT[2].PDACN[6].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_262     XRDC.PDAC_SLOT[2].PDACN[6].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_263     XRDC.PDAC_SLOT[2].PDACN[7].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_263     XRDC.PDAC_SLOT[2].PDACN[7].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_264     XRDC.PDAC_SLOT[2].PDACN[8].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_264     XRDC.PDAC_SLOT[2].PDACN[8].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_265     XRDC.PDAC_SLOT[2].PDACN[9].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_265     XRDC.PDAC_SLOT[2].PDACN[9].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_266     XRDC.PDAC_SLOT[2].PDACN[10].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_266     XRDC.PDAC_SLOT[2].PDACN[10].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_267     XRDC.PDAC_SLOT[2].PDACN[11].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_267     XRDC.PDAC_SLOT[2].PDACN[11].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_268     XRDC.PDAC_SLOT[2].PDACN[12].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_268     XRDC.PDAC_SLOT[2].PDACN[12].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_269     XRDC.PDAC_SLOT[2].PDACN[13].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_269     XRDC.PDAC_SLOT[2].PDACN[13].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_270     XRDC.PDAC_SLOT[2].PDACN[14].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_270     XRDC.PDAC_SLOT[2].PDACN[14].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_271     XRDC.PDAC_SLOT[2].PDACN[15].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_271     XRDC.PDAC_SLOT[2].PDACN[15].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_272     XRDC.PDAC_SLOT[2].PDACN[16].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_272     XRDC.PDAC_SLOT[2].PDACN[16].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_273     XRDC.PDAC_SLOT[2].PDACN[17].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_273     XRDC.PDAC_SLOT[2].PDACN[17].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_274     XRDC.PDAC_SLOT[2].PDACN[18].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_274     XRDC.PDAC_SLOT[2].PDACN[18].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_275     XRDC.PDAC_SLOT[2].PDACN[19].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_275     XRDC.PDAC_SLOT[2].PDACN[19].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_276     XRDC.PDAC_SLOT[2].PDACN[20].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_276     XRDC.PDAC_SLOT[2].PDACN[20].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_277     XRDC.PDAC_SLOT[2].PDACN[21].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_277     XRDC.PDAC_SLOT[2].PDACN[21].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_278     XRDC.PDAC_SLOT[2].PDACN[22].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_278     XRDC.PDAC_SLOT[2].PDACN[22].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_279     XRDC.PDAC_SLOT[2].PDACN[23].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_279     XRDC.PDAC_SLOT[2].PDACN[23].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_280     XRDC.PDAC_SLOT[2].PDACN[24].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_280     XRDC.PDAC_SLOT[2].PDACN[24].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_281     XRDC.PDAC_SLOT[2].PDACN[25].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_281     XRDC.PDAC_SLOT[2].PDACN[25].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_283     XRDC.PDAC_SLOT[2].PDACN[27].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_283     XRDC.PDAC_SLOT[2].PDACN[27].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_285     XRDC.PDAC_SLOT[2].PDACN[29].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_285     XRDC.PDAC_SLOT[2].PDACN[29].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_288     XRDC.PDAC_SLOT[2].PDACN[32].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_288     XRDC.PDAC_SLOT[2].PDACN[32].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_291     XRDC.PDAC_SLOT[2].PDACN[35].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_291     XRDC.PDAC_SLOT[2].PDACN[35].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_292     XRDC.PDAC_SLOT[2].PDACN[36].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_292     XRDC.PDAC_SLOT[2].PDACN[36].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_293     XRDC.PDAC_SLOT[2].PDACN[37].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_293     XRDC.PDAC_SLOT[2].PDACN[37].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_294     XRDC.PDAC_SLOT[2].PDACN[38].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_294     XRDC.PDAC_SLOT[2].PDACN[38].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_295     XRDC.PDAC_SLOT[2].PDACN[39].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_295     XRDC.PDAC_SLOT[2].PDACN[39].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_296     XRDC.PDAC_SLOT[2].PDACN[40].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_296     XRDC.PDAC_SLOT[2].PDACN[40].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_297     XRDC.PDAC_SLOT[2].PDACN[41].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_297     XRDC.PDAC_SLOT[2].PDACN[41].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_298     XRDC.PDAC_SLOT[2].PDACN[42].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_298     XRDC.PDAC_SLOT[2].PDACN[42].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_303     XRDC.PDAC_SLOT[2].PDACN[47].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_303     XRDC.PDAC_SLOT[2].PDACN[47].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_304     XRDC.PDAC_SLOT[2].PDACN[48].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_304     XRDC.PDAC_SLOT[2].PDACN[48].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_307     XRDC.PDAC_SLOT[2].PDACN[51].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_307     XRDC.PDAC_SLOT[2].PDACN[51].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_311     XRDC.PDAC_SLOT[2].PDACN[55].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_311     XRDC.PDAC_SLOT[2].PDACN[55].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_314     XRDC.PDAC_SLOT[2].PDACN[58].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_314     XRDC.PDAC_SLOT[2].PDACN[58].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W0_315     XRDC.PDAC_SLOT[2].PDACN[59].PDAC_W0.R /* Peripheral Domain Access Control */
#define XRDC_PDAC_W1_315     XRDC.PDAC_SLOT[2].PDACN[59].PDAC_W1.R /* Peripheral Domain Access Control */
#define XRDC_MRGD_W0_0       XRDC.MRGDN[0][0].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_MRGD_W1_0       XRDC.MRGDN[0][0].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_MRGD_W2_0       XRDC.MRGDN[0][0].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_MRGD_W3_0       XRDC.MRGDN[0][0].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_MRGD_W0_1       XRDC.MRGDN[0][1].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_MRGD_W1_1       XRDC.MRGDN[0][1].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_MRGD_W2_1       XRDC.MRGDN[0][1].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_MRGD_W3_1       XRDC.MRGDN[0][1].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_MRGD_W0_2       XRDC.MRGDN[0][2].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_MRGD_W1_2       XRDC.MRGDN[0][2].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_MRGD_W2_2       XRDC.MRGDN[0][2].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_MRGD_W3_2       XRDC.MRGDN[0][2].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_MRGD_W0_3       XRDC.MRGDN[0][3].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_MRGD_W1_3       XRDC.MRGDN[0][3].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_MRGD_W2_3       XRDC.MRGDN[0][3].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_MRGD_W3_3       XRDC.MRGDN[0][3].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_MRGD_W0_4       XRDC.MRGDN[0][4].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_MRGD_W1_4       XRDC.MRGDN[0][4].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_MRGD_W2_4       XRDC.MRGDN[0][4].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_MRGD_W3_4       XRDC.MRGDN[0][4].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_MRGD_W0_5       XRDC.MRGDN[0][5].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_MRGD_W1_5       XRDC.MRGDN[0][5].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_MRGD_W2_5       XRDC.MRGDN[0][5].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_MRGD_W3_5       XRDC.MRGDN[0][5].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_MRGD_W0_6       XRDC.MRGDN[0][6].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_MRGD_W1_6       XRDC.MRGDN[0][6].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_MRGD_W2_6       XRDC.MRGDN[0][6].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_MRGD_W3_6       XRDC.MRGDN[0][6].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_MRGD_W0_7       XRDC.MRGDN[0][7].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_MRGD_W1_7       XRDC.MRGDN[0][7].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_MRGD_W2_7       XRDC.MRGDN[0][7].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_MRGD_W3_7       XRDC.MRGDN[0][7].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_MRGD_W0_8       XRDC.MRGDN[0][8].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_MRGD_W1_8       XRDC.MRGDN[0][8].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_MRGD_W2_8       XRDC.MRGDN[0][8].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_MRGD_W3_8       XRDC.MRGDN[0][8].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_MRGD_W0_9       XRDC.MRGDN[0][9].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_MRGD_W1_9       XRDC.MRGDN[0][9].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_MRGD_W2_9       XRDC.MRGDN[0][9].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_MRGD_W3_9       XRDC.MRGDN[0][9].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_MRGD_W0_10      XRDC.MRGDN[0][10].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_MRGD_W1_10      XRDC.MRGDN[0][10].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_MRGD_W2_10      XRDC.MRGDN[0][10].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_MRGD_W3_10      XRDC.MRGDN[0][10].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_MRGD_W0_11      XRDC.MRGDN[0][11].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_MRGD_W1_11      XRDC.MRGDN[0][11].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_MRGD_W2_11      XRDC.MRGDN[0][11].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_MRGD_W3_11      XRDC.MRGDN[0][11].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_MRGD_W0_12      XRDC.MRGDN[0][12].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_MRGD_W1_12      XRDC.MRGDN[0][12].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_MRGD_W2_12      XRDC.MRGDN[0][12].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_MRGD_W3_12      XRDC.MRGDN[0][12].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_MRGD_W0_13      XRDC.MRGDN[0][13].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_MRGD_W1_13      XRDC.MRGDN[0][13].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_MRGD_W2_13      XRDC.MRGDN[0][13].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_MRGD_W3_13      XRDC.MRGDN[0][13].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_MRGD_W0_14      XRDC.MRGDN[0][14].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_MRGD_W1_14      XRDC.MRGDN[0][14].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_MRGD_W2_14      XRDC.MRGDN[0][14].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_MRGD_W3_14      XRDC.MRGDN[0][14].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_MRGD_W0_15      XRDC.MRGDN[0][15].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_MRGD_W1_15      XRDC.MRGDN[0][15].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_MRGD_W2_15      XRDC.MRGDN[0][15].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_MRGD_W3_15      XRDC.MRGDN[0][15].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_MRGD_W0_16      XRDC.MRGDN[1][0].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_MRGD_W1_16      XRDC.MRGDN[1][0].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_MRGD_W2_16      XRDC.MRGDN[1][0].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_MRGD_W3_16      XRDC.MRGDN[1][0].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_MRGD_W0_17      XRDC.MRGDN[1][1].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_MRGD_W1_17      XRDC.MRGDN[1][1].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_MRGD_W2_17      XRDC.MRGDN[1][1].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_MRGD_W3_17      XRDC.MRGDN[1][1].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_MRGD_W0_18      XRDC.MRGDN[1][2].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_MRGD_W1_18      XRDC.MRGDN[1][2].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_MRGD_W2_18      XRDC.MRGDN[1][2].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_MRGD_W3_18      XRDC.MRGDN[1][2].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_MRGD_W0_19      XRDC.MRGDN[1][3].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_MRGD_W1_19      XRDC.MRGDN[1][3].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_MRGD_W2_19      XRDC.MRGDN[1][3].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_MRGD_W3_19      XRDC.MRGDN[1][3].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_MRGD_W0_20      XRDC.MRGDN[1][4].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_MRGD_W1_20      XRDC.MRGDN[1][4].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_MRGD_W2_20      XRDC.MRGDN[1][4].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_MRGD_W3_20      XRDC.MRGDN[1][4].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_MRGD_W0_21      XRDC.MRGDN[1][5].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_MRGD_W1_21      XRDC.MRGDN[1][5].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_MRGD_W2_21      XRDC.MRGDN[1][5].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_MRGD_W3_21      XRDC.MRGDN[1][5].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_MRGD_W0_22      XRDC.MRGDN[1][6].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_MRGD_W1_22      XRDC.MRGDN[1][6].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_MRGD_W2_22      XRDC.MRGDN[1][6].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_MRGD_W3_22      XRDC.MRGDN[1][6].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_MRGD_W0_23      XRDC.MRGDN[1][7].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_MRGD_W1_23      XRDC.MRGDN[1][7].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_MRGD_W2_23      XRDC.MRGDN[1][7].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_MRGD_W3_23      XRDC.MRGDN[1][7].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_MRGD_W0_24      XRDC.MRGDN[1][8].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_MRGD_W1_24      XRDC.MRGDN[1][8].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_MRGD_W2_24      XRDC.MRGDN[1][8].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_MRGD_W3_24      XRDC.MRGDN[1][8].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_MRGD_W0_25      XRDC.MRGDN[1][9].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_MRGD_W1_25      XRDC.MRGDN[1][9].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_MRGD_W2_25      XRDC.MRGDN[1][9].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_MRGD_W3_25      XRDC.MRGDN[1][9].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_MRGD_W0_26      XRDC.MRGDN[1][10].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_MRGD_W1_26      XRDC.MRGDN[1][10].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_MRGD_W2_26      XRDC.MRGDN[1][10].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_MRGD_W3_26      XRDC.MRGDN[1][10].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_MRGD_W0_27      XRDC.MRGDN[1][11].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_MRGD_W1_27      XRDC.MRGDN[1][11].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_MRGD_W2_27      XRDC.MRGDN[1][11].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_MRGD_W3_27      XRDC.MRGDN[1][11].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_MRGD_W0_28      XRDC.MRGDN[1][12].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_MRGD_W1_28      XRDC.MRGDN[1][12].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_MRGD_W2_28      XRDC.MRGDN[1][12].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_MRGD_W3_28      XRDC.MRGDN[1][12].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_MRGD_W0_29      XRDC.MRGDN[1][13].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_MRGD_W1_29      XRDC.MRGDN[1][13].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_MRGD_W2_29      XRDC.MRGDN[1][13].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_MRGD_W3_29      XRDC.MRGDN[1][13].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_MRGD_W0_30      XRDC.MRGDN[1][14].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_MRGD_W1_30      XRDC.MRGDN[1][14].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_MRGD_W2_30      XRDC.MRGDN[1][14].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_MRGD_W3_30      XRDC.MRGDN[1][14].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_MRGD_W0_31      XRDC.MRGDN[1][15].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_MRGD_W1_31      XRDC.MRGDN[1][15].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_MRGD_W2_31      XRDC.MRGDN[1][15].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_MRGD_W3_31      XRDC.MRGDN[1][15].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_MRGD_W0_32      XRDC.MRGDN[2][0].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_MRGD_W1_32      XRDC.MRGDN[2][0].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_MRGD_W2_32      XRDC.MRGDN[2][0].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_MRGD_W3_32      XRDC.MRGDN[2][0].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_MRGD_W0_33      XRDC.MRGDN[2][1].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_MRGD_W1_33      XRDC.MRGDN[2][1].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_MRGD_W2_33      XRDC.MRGDN[2][1].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_MRGD_W3_33      XRDC.MRGDN[2][1].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_MRGD_W0_34      XRDC.MRGDN[2][2].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_MRGD_W1_34      XRDC.MRGDN[2][2].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_MRGD_W2_34      XRDC.MRGDN[2][2].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_MRGD_W3_34      XRDC.MRGDN[2][2].XRDC_MRGD_W3.R /* Memory Region Descriptor */
#define XRDC_MRGD_W0_35      XRDC.MRGDN[2][3].XRDC_MRGD_W0.R /* Memory Region Descriptor */
#define XRDC_MRGD_W1_35      XRDC.MRGDN[2][3].XRDC_MRGD_W1.R /* Memory Region Descriptor */
#define XRDC_MRGD_W2_35      XRDC.MRGDN[2][3].XRDC_MRGD_W2.R /* Memory Region Descriptor */
#define XRDC_MRGD_W3_35      XRDC.MRGDN[2][3].XRDC_MRGD_W3.R /* Memory Region Descriptor */

/* eDMA */
#define EDMA_CSR             EDMA.CSR.R                    /* Management Page Control */
#define EDMA_ES              EDMA.ES.R                     /* Management Page Error Status */
#define EDMA_INT             EDMA.INT.R                    /* Management Page Interrupt Request Status */
#define EDMA_HRS             EDMA.HRS.R                    /* Management Page Hardware Request Status */
#define EDMA_CH0_GRPRI       EDMA.CH_GRPRI[0].R            /* Channel Arbitration Group */
#define EDMA_CH1_GRPRI       EDMA.CH_GRPRI[1].R            /* Channel Arbitration Group */
#define EDMA_CH2_GRPRI       EDMA.CH_GRPRI[2].R            /* Channel Arbitration Group */
#define EDMA_CH3_GRPRI       EDMA.CH_GRPRI[3].R            /* Channel Arbitration Group */
#define EDMA_CH4_GRPRI       EDMA.CH_GRPRI[4].R            /* Channel Arbitration Group */
#define EDMA_CH5_GRPRI       EDMA.CH_GRPRI[5].R            /* Channel Arbitration Group */
#define EDMA_CH6_GRPRI       EDMA.CH_GRPRI[6].R            /* Channel Arbitration Group */
#define EDMA_CH7_GRPRI       EDMA.CH_GRPRI[7].R            /* Channel Arbitration Group */
#define EDMA_CH8_GRPRI       EDMA.CH_GRPRI[8].R            /* Channel Arbitration Group */
#define EDMA_CH9_GRPRI       EDMA.CH_GRPRI[9].R            /* Channel Arbitration Group */
#define EDMA_CH10_GRPRI      EDMA.CH_GRPRI[10].R           /* Channel Arbitration Group */
#define EDMA_CH11_GRPRI      EDMA.CH_GRPRI[11].R           /* Channel Arbitration Group */
#define EDMA_CH12_GRPRI      EDMA.CH_GRPRI[12].R           /* Channel Arbitration Group */
#define EDMA_CH13_GRPRI      EDMA.CH_GRPRI[13].R           /* Channel Arbitration Group */
#define EDMA_CH14_GRPRI      EDMA.CH_GRPRI[14].R           /* Channel Arbitration Group */
#define EDMA_CH15_GRPRI      EDMA.CH_GRPRI[15].R           /* Channel Arbitration Group */
#define EDMA_CH16_GRPRI      EDMA.CH_GRPRI[16].R           /* Channel Arbitration Group */
#define EDMA_CH17_GRPRI      EDMA.CH_GRPRI[17].R           /* Channel Arbitration Group */
#define EDMA_CH18_GRPRI      EDMA.CH_GRPRI[18].R           /* Channel Arbitration Group */
#define EDMA_CH19_GRPRI      EDMA.CH_GRPRI[19].R           /* Channel Arbitration Group */
#define EDMA_CH20_GRPRI      EDMA.CH_GRPRI[20].R           /* Channel Arbitration Group */
#define EDMA_CH21_GRPRI      EDMA.CH_GRPRI[21].R           /* Channel Arbitration Group */
#define EDMA_CH22_GRPRI      EDMA.CH_GRPRI[22].R           /* Channel Arbitration Group */
#define EDMA_CH23_GRPRI      EDMA.CH_GRPRI[23].R           /* Channel Arbitration Group */
#define EDMA_CH24_GRPRI      EDMA.CH_GRPRI[24].R           /* Channel Arbitration Group */
#define EDMA_CH25_GRPRI      EDMA.CH_GRPRI[25].R           /* Channel Arbitration Group */
#define EDMA_CH26_GRPRI      EDMA.CH_GRPRI[26].R           /* Channel Arbitration Group */
#define EDMA_CH27_GRPRI      EDMA.CH_GRPRI[27].R           /* Channel Arbitration Group */
#define EDMA_CH28_GRPRI      EDMA.CH_GRPRI[28].R           /* Channel Arbitration Group */
#define EDMA_CH29_GRPRI      EDMA.CH_GRPRI[29].R           /* Channel Arbitration Group */
#define EDMA_CH30_GRPRI      EDMA.CH_GRPRI[30].R           /* Channel Arbitration Group */
#define EDMA_CH31_GRPRI      EDMA.CH_GRPRI[31].R           /* Channel Arbitration Group */

/* eMIOS_0 */
#define EMIOS_0_MCR          EMIOS_0.MCR.R                 /* Module Configuration */
#define EMIOS_0_GFLAG        EMIOS_0.GFLAG.R               /* Global FLAG */
#define EMIOS_0_OUDIS        EMIOS_0.OUDIS.R               /* Output Update Disable */
#define EMIOS_0_UCDIS        EMIOS_0.UCDIS.R               /* Disable Channel */
#define EMIOS_0_A0           EMIOS_0.UC[0].A.R             /* UC A 0 */
#define EMIOS_0_B0           EMIOS_0.UC[0].B.R             /* UC B 0 */
#define EMIOS_0_CNT0         EMIOS_0.UC[0].CNT.R           /* UC Counter 0 */
#define EMIOS_0_C0           EMIOS_0.UC[0].C.R             /* UC Control 0 */
#define EMIOS_0_S0           EMIOS_0.UC[0].S.R             /* UC Status 0 */
#define EMIOS_0_ALTA0        EMIOS_0.UC[0].ALTA.R          /* Alternate Address 0 */
#define EMIOS_0_C2_0         EMIOS_0.UC[0].C2.R            /* UC Control 2 0 */
#define EMIOS_0_A1           EMIOS_0.UC[1].A.R             /* UC A 1 */
#define EMIOS_0_B1           EMIOS_0.UC[1].B.R             /* UC B 1 */
#define EMIOS_0_CNT1         EMIOS_0.UC[1].CNT.R           /* UC Counter 1 */
#define EMIOS_0_C1           EMIOS_0.UC[1].C.R             /* UC Control 1 */
#define EMIOS_0_S1           EMIOS_0.UC[1].S.R             /* UC Status 1 */
#define EMIOS_0_ALTA1        EMIOS_0.UC[1].ALTA.R          /* Alternate Address 1 */
#define EMIOS_0_C2_1         EMIOS_0.UC[1].C2.R            /* UC Control 2 1 */
#define EMIOS_0_A2           EMIOS_0.UC[2].A.R             /* UC A 2 */
#define EMIOS_0_B2           EMIOS_0.UC[2].B.R             /* UC B 2 */
#define EMIOS_0_CNT2         EMIOS_0.UC[2].CNT.R           /* UC Counter 2 */
#define EMIOS_0_C2           EMIOS_0.UC[2].C.R             /* UC Control 2 */
#define EMIOS_0_S2           EMIOS_0.UC[2].S.R             /* UC Status 2 */
#define EMIOS_0_ALTA2        EMIOS_0.UC[2].ALTA.R          /* Alternate Address 2 */
#define EMIOS_0_C2_2         EMIOS_0.UC[2].C2.R            /* UC Control 2 2 */
#define EMIOS_0_A3           EMIOS_0.UC[3].A.R             /* UC A 3 */
#define EMIOS_0_B3           EMIOS_0.UC[3].B.R             /* UC B 3 */
#define EMIOS_0_CNT3         EMIOS_0.UC[3].CNT.R           /* UC Counter 3 */
#define EMIOS_0_C3           EMIOS_0.UC[3].C.R             /* UC Control 3 */
#define EMIOS_0_S3           EMIOS_0.UC[3].S.R             /* UC Status 3 */
#define EMIOS_0_ALTA3        EMIOS_0.UC[3].ALTA.R          /* Alternate Address 3 */
#define EMIOS_0_C2_3         EMIOS_0.UC[3].C2.R            /* UC Control 2 3 */
#define EMIOS_0_A4           EMIOS_0.UC[4].A.R             /* UC A 4 */
#define EMIOS_0_B4           EMIOS_0.UC[4].B.R             /* UC B 4 */
#define EMIOS_0_CNT4         EMIOS_0.UC[4].CNT.R           /* UC Counter 4 */
#define EMIOS_0_C4           EMIOS_0.UC[4].C.R             /* UC Control 4 */
#define EMIOS_0_S4           EMIOS_0.UC[4].S.R             /* UC Status 4 */
#define EMIOS_0_ALTA4        EMIOS_0.UC[4].ALTA.R          /* Alternate Address 4 */
#define EMIOS_0_C2_4         EMIOS_0.UC[4].C2.R            /* UC Control 2 4 */
#define EMIOS_0_A5           EMIOS_0.UC[5].A.R             /* UC A 5 */
#define EMIOS_0_B5           EMIOS_0.UC[5].B.R             /* UC B 5 */
#define EMIOS_0_CNT5         EMIOS_0.UC[5].CNT.R           /* UC Counter 5 */
#define EMIOS_0_C5           EMIOS_0.UC[5].C.R             /* UC Control 5 */
#define EMIOS_0_S5           EMIOS_0.UC[5].S.R             /* UC Status 5 */
#define EMIOS_0_ALTA5        EMIOS_0.UC[5].ALTA.R          /* Alternate Address 5 */
#define EMIOS_0_C2_5         EMIOS_0.UC[5].C2.R            /* UC Control 2 5 */
#define EMIOS_0_A6           EMIOS_0.UC[6].A.R             /* UC A 6 */
#define EMIOS_0_B6           EMIOS_0.UC[6].B.R             /* UC B 6 */
#define EMIOS_0_CNT6         EMIOS_0.UC[6].CNT.R           /* UC Counter 6 */
#define EMIOS_0_C6           EMIOS_0.UC[6].C.R             /* UC Control 6 */
#define EMIOS_0_S6           EMIOS_0.UC[6].S.R             /* UC Status 6 */
#define EMIOS_0_ALTA6        EMIOS_0.UC[6].ALTA.R          /* Alternate Address 6 */
#define EMIOS_0_C2_6         EMIOS_0.UC[6].C2.R            /* UC Control 2 6 */
#define EMIOS_0_A7           EMIOS_0.UC[7].A.R             /* UC A 7 */
#define EMIOS_0_B7           EMIOS_0.UC[7].B.R             /* UC B 7 */
#define EMIOS_0_CNT7         EMIOS_0.UC[7].CNT.R           /* UC Counter 7 */
#define EMIOS_0_C7           EMIOS_0.UC[7].C.R             /* UC Control 7 */
#define EMIOS_0_S7           EMIOS_0.UC[7].S.R             /* UC Status 7 */
#define EMIOS_0_ALTA7        EMIOS_0.UC[7].ALTA.R          /* Alternate Address 7 */
#define EMIOS_0_C2_7         EMIOS_0.UC[7].C2.R            /* UC Control 2 7 */
#define EMIOS_0_A8           EMIOS_0.UC[8].A.R             /* UC A 8 */
#define EMIOS_0_B8           EMIOS_0.UC[8].B.R             /* UC B 8 */
#define EMIOS_0_CNT8         EMIOS_0.UC[8].CNT.R           /* UC Counter 8 */
#define EMIOS_0_C8           EMIOS_0.UC[8].C.R             /* UC Control 8 */
#define EMIOS_0_S8           EMIOS_0.UC[8].S.R             /* UC Status 8 */
#define EMIOS_0_ALTA8        EMIOS_0.UC[8].ALTA.R          /* Alternate Address 8 */
#define EMIOS_0_C2_8         EMIOS_0.UC[8].C2.R            /* UC Control 2 8 */
#define EMIOS_0_A9           EMIOS_0.UC[9].A.R             /* UC A 9 */
#define EMIOS_0_B9           EMIOS_0.UC[9].B.R             /* UC B 9 */
#define EMIOS_0_C9           EMIOS_0.UC[9].C.R             /* UC Control 9 */
#define EMIOS_0_S9           EMIOS_0.UC[9].S.R             /* UC Status 9 */
#define EMIOS_0_ALTA9        EMIOS_0.UC[9].ALTA.R          /* Alternate Address 9 */
#define EMIOS_0_C2_9         EMIOS_0.UC[9].C2.R            /* UC Control 2 9 */
#define EMIOS_0_A10          EMIOS_0.UC[10].A.R            /* UC A 10 */
#define EMIOS_0_B10          EMIOS_0.UC[10].B.R            /* UC B 10 */
#define EMIOS_0_C10          EMIOS_0.UC[10].C.R            /* UC Control 10 */
#define EMIOS_0_S10          EMIOS_0.UC[10].S.R            /* UC Status 10 */
#define EMIOS_0_ALTA10       EMIOS_0.UC[10].ALTA.R         /* Alternate Address 10 */
#define EMIOS_0_C2_10        EMIOS_0.UC[10].C2.R           /* UC Control 2 10 */
#define EMIOS_0_A11          EMIOS_0.UC[11].A.R            /* UC A 11 */
#define EMIOS_0_B11          EMIOS_0.UC[11].B.R            /* UC B 11 */
#define EMIOS_0_C11          EMIOS_0.UC[11].C.R            /* UC Control 11 */
#define EMIOS_0_S11          EMIOS_0.UC[11].S.R            /* UC Status 11 */
#define EMIOS_0_ALTA11       EMIOS_0.UC[11].ALTA.R         /* Alternate Address 11 */
#define EMIOS_0_C2_11        EMIOS_0.UC[11].C2.R           /* UC Control 2 11 */
#define EMIOS_0_A12          EMIOS_0.UC[12].A.R            /* UC A 12 */
#define EMIOS_0_B12          EMIOS_0.UC[12].B.R            /* UC B 12 */
#define EMIOS_0_C12          EMIOS_0.UC[12].C.R            /* UC Control 12 */
#define EMIOS_0_S12          EMIOS_0.UC[12].S.R            /* UC Status 12 */
#define EMIOS_0_ALTA12       EMIOS_0.UC[12].ALTA.R         /* Alternate Address 12 */
#define EMIOS_0_C2_12        EMIOS_0.UC[12].C2.R           /* UC Control 2 12 */
#define EMIOS_0_A13          EMIOS_0.UC[13].A.R            /* UC A 13 */
#define EMIOS_0_B13          EMIOS_0.UC[13].B.R            /* UC B 13 */
#define EMIOS_0_C13          EMIOS_0.UC[13].C.R            /* UC Control 13 */
#define EMIOS_0_S13          EMIOS_0.UC[13].S.R            /* UC Status 13 */
#define EMIOS_0_ALTA13       EMIOS_0.UC[13].ALTA.R         /* Alternate Address 13 */
#define EMIOS_0_C2_13        EMIOS_0.UC[13].C2.R           /* UC Control 2 13 */
#define EMIOS_0_A14          EMIOS_0.UC[14].A.R            /* UC A 14 */
#define EMIOS_0_B14          EMIOS_0.UC[14].B.R            /* UC B 14 */
#define EMIOS_0_C14          EMIOS_0.UC[14].C.R            /* UC Control 14 */
#define EMIOS_0_S14          EMIOS_0.UC[14].S.R            /* UC Status 14 */
#define EMIOS_0_ALTA14       EMIOS_0.UC[14].ALTA.R         /* Alternate Address 14 */
#define EMIOS_0_C2_14        EMIOS_0.UC[14].C2.R           /* UC Control 2 14 */
#define EMIOS_0_A15          EMIOS_0.UC[15].A.R            /* UC A 15 */
#define EMIOS_0_B15          EMIOS_0.UC[15].B.R            /* UC B 15 */
#define EMIOS_0_C15          EMIOS_0.UC[15].C.R            /* UC Control 15 */
#define EMIOS_0_S15          EMIOS_0.UC[15].S.R            /* UC Status 15 */
#define EMIOS_0_ALTA15       EMIOS_0.UC[15].ALTA.R         /* Alternate Address 15 */
#define EMIOS_0_C2_15        EMIOS_0.UC[15].C2.R           /* UC Control 2 15 */
#define EMIOS_0_A16          EMIOS_0.UC[16].A.R            /* UC A 16 */
#define EMIOS_0_B16          EMIOS_0.UC[16].B.R            /* UC B 16 */
#define EMIOS_0_CNT16        EMIOS_0.UC[16].CNT.R          /* UC Counter 16 */
#define EMIOS_0_C16          EMIOS_0.UC[16].C.R            /* UC Control 16 */
#define EMIOS_0_S16          EMIOS_0.UC[16].S.R            /* UC Status 16 */
#define EMIOS_0_ALTA16       EMIOS_0.UC[16].ALTA.R         /* Alternate Address 16 */
#define EMIOS_0_C2_16        EMIOS_0.UC[16].C2.R           /* UC Control 2 16 */
#define EMIOS_0_A17          EMIOS_0.UC[17].A.R            /* UC A 17 */
#define EMIOS_0_B17          EMIOS_0.UC[17].B.R            /* UC B 17 */
#define EMIOS_0_C17          EMIOS_0.UC[17].C.R            /* UC Control 17 */
#define EMIOS_0_S17          EMIOS_0.UC[17].S.R            /* UC Status 17 */
#define EMIOS_0_ALTA17       EMIOS_0.UC[17].ALTA.R         /* Alternate Address 17 */
#define EMIOS_0_C2_17        EMIOS_0.UC[17].C2.R           /* UC Control 2 17 */
#define EMIOS_0_A18          EMIOS_0.UC[18].A.R            /* UC A 18 */
#define EMIOS_0_B18          EMIOS_0.UC[18].B.R            /* UC B 18 */
#define EMIOS_0_C18          EMIOS_0.UC[18].C.R            /* UC Control 18 */
#define EMIOS_0_S18          EMIOS_0.UC[18].S.R            /* UC Status 18 */
#define EMIOS_0_ALTA18       EMIOS_0.UC[18].ALTA.R         /* Alternate Address 18 */
#define EMIOS_0_C2_18        EMIOS_0.UC[18].C2.R           /* UC Control 2 18 */
#define EMIOS_0_A19          EMIOS_0.UC[19].A.R            /* UC A 19 */
#define EMIOS_0_B19          EMIOS_0.UC[19].B.R            /* UC B 19 */
#define EMIOS_0_C19          EMIOS_0.UC[19].C.R            /* UC Control 19 */
#define EMIOS_0_S19          EMIOS_0.UC[19].S.R            /* UC Status 19 */
#define EMIOS_0_ALTA19       EMIOS_0.UC[19].ALTA.R         /* Alternate Address 19 */
#define EMIOS_0_C2_19        EMIOS_0.UC[19].C2.R           /* UC Control 2 19 */
#define EMIOS_0_A20          EMIOS_0.UC[20].A.R            /* UC A 20 */
#define EMIOS_0_B20          EMIOS_0.UC[20].B.R            /* UC B 20 */
#define EMIOS_0_C20          EMIOS_0.UC[20].C.R            /* UC Control 20 */
#define EMIOS_0_S20          EMIOS_0.UC[20].S.R            /* UC Status 20 */
#define EMIOS_0_ALTA20       EMIOS_0.UC[20].ALTA.R         /* Alternate Address 20 */
#define EMIOS_0_C2_20        EMIOS_0.UC[20].C2.R           /* UC Control 2 20 */
#define EMIOS_0_A21          EMIOS_0.UC[21].A.R            /* UC A 21 */
#define EMIOS_0_B21          EMIOS_0.UC[21].B.R            /* UC B 21 */
#define EMIOS_0_C21          EMIOS_0.UC[21].C.R            /* UC Control 21 */
#define EMIOS_0_S21          EMIOS_0.UC[21].S.R            /* UC Status 21 */
#define EMIOS_0_ALTA21       EMIOS_0.UC[21].ALTA.R         /* Alternate Address 21 */
#define EMIOS_0_C2_21        EMIOS_0.UC[21].C2.R           /* UC Control 2 21 */
#define EMIOS_0_A22          EMIOS_0.UC[22].A.R            /* UC A 22 */
#define EMIOS_0_B22          EMIOS_0.UC[22].B.R            /* UC B 22 */
#define EMIOS_0_CNT22        EMIOS_0.UC[22].CNT.R          /* UC Counter 22 */
#define EMIOS_0_C22          EMIOS_0.UC[22].C.R            /* UC Control 22 */
#define EMIOS_0_S22          EMIOS_0.UC[22].S.R            /* UC Status 22 */
#define EMIOS_0_ALTA22       EMIOS_0.UC[22].ALTA.R         /* Alternate Address 22 */
#define EMIOS_0_C2_22        EMIOS_0.UC[22].C2.R           /* UC Control 2 22 */
#define EMIOS_0_A23          EMIOS_0.UC[23].A.R            /* UC A 23 */
#define EMIOS_0_B23          EMIOS_0.UC[23].B.R            /* UC B 23 */
#define EMIOS_0_CNT23        EMIOS_0.UC[23].CNT.R          /* UC Counter 23 */
#define EMIOS_0_C23          EMIOS_0.UC[23].C.R            /* UC Control 23 */
#define EMIOS_0_S23          EMIOS_0.UC[23].S.R            /* UC Status 23 */
#define EMIOS_0_ALTA23       EMIOS_0.UC[23].ALTA.R         /* Alternate Address 23 */
#define EMIOS_0_C2_23        EMIOS_0.UC[23].C2.R           /* UC Control 2 23 */

/* eMIOS_1 */
#define EMIOS_1_MCR          EMIOS_1.MCR.R                 /* Module Configuration */
#define EMIOS_1_GFLAG        EMIOS_1.GFLAG.R               /* Global FLAG */
#define EMIOS_1_OUDIS        EMIOS_1.OUDIS.R               /* Output Update Disable */
#define EMIOS_1_UCDIS        EMIOS_1.UCDIS.R               /* Disable Channel */
#define EMIOS_1_A0           EMIOS_1.UC[0].A.R             /* UC A 0 */
#define EMIOS_1_B0           EMIOS_1.UC[0].B.R             /* UC B 0 */
#define EMIOS_1_CNT0         EMIOS_1.UC[0].CNT.R           /* UC Counter 0 */
#define EMIOS_1_C0           EMIOS_1.UC[0].C.R             /* UC Control 0 */
#define EMIOS_1_S0           EMIOS_1.UC[0].S.R             /* UC Status 0 */
#define EMIOS_1_ALTA0        EMIOS_1.UC[0].ALTA.R          /* Alternate Address 0 */
#define EMIOS_1_C2_0         EMIOS_1.UC[0].C2.R            /* UC Control 2 0 */
#define EMIOS_1_A1           EMIOS_1.UC[1].A.R             /* UC A 1 */
#define EMIOS_1_B1           EMIOS_1.UC[1].B.R             /* UC B 1 */
#define EMIOS_1_C1           EMIOS_1.UC[1].C.R             /* UC Control 1 */
#define EMIOS_1_S1           EMIOS_1.UC[1].S.R             /* UC Status 1 */
#define EMIOS_1_ALTA1        EMIOS_1.UC[1].ALTA.R          /* Alternate Address 1 */
#define EMIOS_1_C2_1         EMIOS_1.UC[1].C2.R            /* UC Control 2 1 */
#define EMIOS_1_A2           EMIOS_1.UC[2].A.R             /* UC A 2 */
#define EMIOS_1_B2           EMIOS_1.UC[2].B.R             /* UC B 2 */
#define EMIOS_1_C2           EMIOS_1.UC[2].C.R             /* UC Control 2 */
#define EMIOS_1_S2           EMIOS_1.UC[2].S.R             /* UC Status 2 */
#define EMIOS_1_ALTA2        EMIOS_1.UC[2].ALTA.R          /* Alternate Address 2 */
#define EMIOS_1_C2_2         EMIOS_1.UC[2].C2.R            /* UC Control 2 2 */
#define EMIOS_1_A3           EMIOS_1.UC[3].A.R             /* UC A 3 */
#define EMIOS_1_B3           EMIOS_1.UC[3].B.R             /* UC B 3 */
#define EMIOS_1_C3           EMIOS_1.UC[3].C.R             /* UC Control 3 */
#define EMIOS_1_S3           EMIOS_1.UC[3].S.R             /* UC Status 3 */
#define EMIOS_1_ALTA3        EMIOS_1.UC[3].ALTA.R          /* Alternate Address 3 */
#define EMIOS_1_C2_3         EMIOS_1.UC[3].C2.R            /* UC Control 2 3 */
#define EMIOS_1_A4           EMIOS_1.UC[4].A.R             /* UC A 4 */
#define EMIOS_1_B4           EMIOS_1.UC[4].B.R             /* UC B 4 */
#define EMIOS_1_C4           EMIOS_1.UC[4].C.R             /* UC Control 4 */
#define EMIOS_1_S4           EMIOS_1.UC[4].S.R             /* UC Status 4 */
#define EMIOS_1_ALTA4        EMIOS_1.UC[4].ALTA.R          /* Alternate Address 4 */
#define EMIOS_1_C2_4         EMIOS_1.UC[4].C2.R            /* UC Control 2 4 */
#define EMIOS_1_A5           EMIOS_1.UC[5].A.R             /* UC A 5 */
#define EMIOS_1_B5           EMIOS_1.UC[5].B.R             /* UC B 5 */
#define EMIOS_1_C5           EMIOS_1.UC[5].C.R             /* UC Control 5 */
#define EMIOS_1_S5           EMIOS_1.UC[5].S.R             /* UC Status 5 */
#define EMIOS_1_ALTA5        EMIOS_1.UC[5].ALTA.R          /* Alternate Address 5 */
#define EMIOS_1_C2_5         EMIOS_1.UC[5].C2.R            /* UC Control 2 5 */
#define EMIOS_1_A6           EMIOS_1.UC[6].A.R             /* UC A 6 */
#define EMIOS_1_B6           EMIOS_1.UC[6].B.R             /* UC B 6 */
#define EMIOS_1_C6           EMIOS_1.UC[6].C.R             /* UC Control 6 */
#define EMIOS_1_S6           EMIOS_1.UC[6].S.R             /* UC Status 6 */
#define EMIOS_1_ALTA6        EMIOS_1.UC[6].ALTA.R          /* Alternate Address 6 */
#define EMIOS_1_C2_6         EMIOS_1.UC[6].C2.R            /* UC Control 2 6 */
#define EMIOS_1_A7           EMIOS_1.UC[7].A.R             /* UC A 7 */
#define EMIOS_1_B7           EMIOS_1.UC[7].B.R             /* UC B 7 */
#define EMIOS_1_C7           EMIOS_1.UC[7].C.R             /* UC Control 7 */
#define EMIOS_1_S7           EMIOS_1.UC[7].S.R             /* UC Status 7 */
#define EMIOS_1_ALTA7        EMIOS_1.UC[7].ALTA.R          /* Alternate Address 7 */
#define EMIOS_1_C2_7         EMIOS_1.UC[7].C2.R            /* UC Control 2 7 */
#define EMIOS_1_A8           EMIOS_1.UC[8].A.R             /* UC A 8 */
#define EMIOS_1_B8           EMIOS_1.UC[8].B.R             /* UC B 8 */
#define EMIOS_1_CNT8         EMIOS_1.UC[8].CNT.R           /* UC Counter 8 */
#define EMIOS_1_C8           EMIOS_1.UC[8].C.R             /* UC Control 8 */
#define EMIOS_1_S8           EMIOS_1.UC[8].S.R             /* UC Status 8 */
#define EMIOS_1_ALTA8        EMIOS_1.UC[8].ALTA.R          /* Alternate Address 8 */
#define EMIOS_1_C2_8         EMIOS_1.UC[8].C2.R            /* UC Control 2 8 */
#define EMIOS_1_A9           EMIOS_1.UC[9].A.R             /* UC A 9 */
#define EMIOS_1_B9           EMIOS_1.UC[9].B.R             /* UC B 9 */
#define EMIOS_1_C9           EMIOS_1.UC[9].C.R             /* UC Control 9 */
#define EMIOS_1_S9           EMIOS_1.UC[9].S.R             /* UC Status 9 */
#define EMIOS_1_ALTA9        EMIOS_1.UC[9].ALTA.R          /* Alternate Address 9 */
#define EMIOS_1_C2_9         EMIOS_1.UC[9].C2.R            /* UC Control 2 9 */
#define EMIOS_1_A10          EMIOS_1.UC[10].A.R            /* UC A 10 */
#define EMIOS_1_B10          EMIOS_1.UC[10].B.R            /* UC B 10 */
#define EMIOS_1_C10          EMIOS_1.UC[10].C.R            /* UC Control 10 */
#define EMIOS_1_S10          EMIOS_1.UC[10].S.R            /* UC Status 10 */
#define EMIOS_1_ALTA10       EMIOS_1.UC[10].ALTA.R         /* Alternate Address 10 */
#define EMIOS_1_C2_10        EMIOS_1.UC[10].C2.R           /* UC Control 2 10 */
#define EMIOS_1_A11          EMIOS_1.UC[11].A.R            /* UC A 11 */
#define EMIOS_1_B11          EMIOS_1.UC[11].B.R            /* UC B 11 */
#define EMIOS_1_C11          EMIOS_1.UC[11].C.R            /* UC Control 11 */
#define EMIOS_1_S11          EMIOS_1.UC[11].S.R            /* UC Status 11 */
#define EMIOS_1_ALTA11       EMIOS_1.UC[11].ALTA.R         /* Alternate Address 11 */
#define EMIOS_1_C2_11        EMIOS_1.UC[11].C2.R           /* UC Control 2 11 */
#define EMIOS_1_A12          EMIOS_1.UC[12].A.R            /* UC A 12 */
#define EMIOS_1_B12          EMIOS_1.UC[12].B.R            /* UC B 12 */
#define EMIOS_1_C12          EMIOS_1.UC[12].C.R            /* UC Control 12 */
#define EMIOS_1_S12          EMIOS_1.UC[12].S.R            /* UC Status 12 */
#define EMIOS_1_ALTA12       EMIOS_1.UC[12].ALTA.R         /* Alternate Address 12 */
#define EMIOS_1_C2_12        EMIOS_1.UC[12].C2.R           /* UC Control 2 12 */
#define EMIOS_1_A13          EMIOS_1.UC[13].A.R            /* UC A 13 */
#define EMIOS_1_B13          EMIOS_1.UC[13].B.R            /* UC B 13 */
#define EMIOS_1_C13          EMIOS_1.UC[13].C.R            /* UC Control 13 */
#define EMIOS_1_S13          EMIOS_1.UC[13].S.R            /* UC Status 13 */
#define EMIOS_1_ALTA13       EMIOS_1.UC[13].ALTA.R         /* Alternate Address 13 */
#define EMIOS_1_C2_13        EMIOS_1.UC[13].C2.R           /* UC Control 2 13 */
#define EMIOS_1_A14          EMIOS_1.UC[14].A.R            /* UC A 14 */
#define EMIOS_1_B14          EMIOS_1.UC[14].B.R            /* UC B 14 */
#define EMIOS_1_C14          EMIOS_1.UC[14].C.R            /* UC Control 14 */
#define EMIOS_1_S14          EMIOS_1.UC[14].S.R            /* UC Status 14 */
#define EMIOS_1_ALTA14       EMIOS_1.UC[14].ALTA.R         /* Alternate Address 14 */
#define EMIOS_1_C2_14        EMIOS_1.UC[14].C2.R           /* UC Control 2 14 */
#define EMIOS_1_A15          EMIOS_1.UC[15].A.R            /* UC A 15 */
#define EMIOS_1_B15          EMIOS_1.UC[15].B.R            /* UC B 15 */
#define EMIOS_1_C15          EMIOS_1.UC[15].C.R            /* UC Control 15 */
#define EMIOS_1_S15          EMIOS_1.UC[15].S.R            /* UC Status 15 */
#define EMIOS_1_ALTA15       EMIOS_1.UC[15].ALTA.R         /* Alternate Address 15 */
#define EMIOS_1_C2_15        EMIOS_1.UC[15].C2.R           /* UC Control 2 15 */
#define EMIOS_1_A16          EMIOS_1.UC[16].A.R            /* UC A 16 */
#define EMIOS_1_B16          EMIOS_1.UC[16].B.R            /* UC B 16 */
#define EMIOS_1_CNT16        EMIOS_1.UC[16].CNT.R          /* UC Counter 16 */
#define EMIOS_1_C16          EMIOS_1.UC[16].C.R            /* UC Control 16 */
#define EMIOS_1_S16          EMIOS_1.UC[16].S.R            /* UC Status 16 */
#define EMIOS_1_ALTA16       EMIOS_1.UC[16].ALTA.R         /* Alternate Address 16 */
#define EMIOS_1_C2_16        EMIOS_1.UC[16].C2.R           /* UC Control 2 16 */
#define EMIOS_1_A17          EMIOS_1.UC[17].A.R            /* UC A 17 */
#define EMIOS_1_B17          EMIOS_1.UC[17].B.R            /* UC B 17 */
#define EMIOS_1_C17          EMIOS_1.UC[17].C.R            /* UC Control 17 */
#define EMIOS_1_S17          EMIOS_1.UC[17].S.R            /* UC Status 17 */
#define EMIOS_1_ALTA17       EMIOS_1.UC[17].ALTA.R         /* Alternate Address 17 */
#define EMIOS_1_C2_17        EMIOS_1.UC[17].C2.R           /* UC Control 2 17 */
#define EMIOS_1_A18          EMIOS_1.UC[18].A.R            /* UC A 18 */
#define EMIOS_1_B18          EMIOS_1.UC[18].B.R            /* UC B 18 */
#define EMIOS_1_C18          EMIOS_1.UC[18].C.R            /* UC Control 18 */
#define EMIOS_1_S18          EMIOS_1.UC[18].S.R            /* UC Status 18 */
#define EMIOS_1_ALTA18       EMIOS_1.UC[18].ALTA.R         /* Alternate Address 18 */
#define EMIOS_1_C2_18        EMIOS_1.UC[18].C2.R           /* UC Control 2 18 */
#define EMIOS_1_A19          EMIOS_1.UC[19].A.R            /* UC A 19 */
#define EMIOS_1_B19          EMIOS_1.UC[19].B.R            /* UC B 19 */
#define EMIOS_1_C19          EMIOS_1.UC[19].C.R            /* UC Control 19 */
#define EMIOS_1_S19          EMIOS_1.UC[19].S.R            /* UC Status 19 */
#define EMIOS_1_ALTA19       EMIOS_1.UC[19].ALTA.R         /* Alternate Address 19 */
#define EMIOS_1_C2_19        EMIOS_1.UC[19].C2.R           /* UC Control 2 19 */
#define EMIOS_1_A20          EMIOS_1.UC[20].A.R            /* UC A 20 */
#define EMIOS_1_B20          EMIOS_1.UC[20].B.R            /* UC B 20 */
#define EMIOS_1_C20          EMIOS_1.UC[20].C.R            /* UC Control 20 */
#define EMIOS_1_S20          EMIOS_1.UC[20].S.R            /* UC Status 20 */
#define EMIOS_1_ALTA20       EMIOS_1.UC[20].ALTA.R         /* Alternate Address 20 */
#define EMIOS_1_C2_20        EMIOS_1.UC[20].C2.R           /* UC Control 2 20 */
#define EMIOS_1_A21          EMIOS_1.UC[21].A.R            /* UC A 21 */
#define EMIOS_1_B21          EMIOS_1.UC[21].B.R            /* UC B 21 */
#define EMIOS_1_C21          EMIOS_1.UC[21].C.R            /* UC Control 21 */
#define EMIOS_1_S21          EMIOS_1.UC[21].S.R            /* UC Status 21 */
#define EMIOS_1_ALTA21       EMIOS_1.UC[21].ALTA.R         /* Alternate Address 21 */
#define EMIOS_1_C2_21        EMIOS_1.UC[21].C2.R           /* UC Control 2 21 */
#define EMIOS_1_A22          EMIOS_1.UC[22].A.R            /* UC A 22 */
#define EMIOS_1_B22          EMIOS_1.UC[22].B.R            /* UC B 22 */
#define EMIOS_1_CNT22        EMIOS_1.UC[22].CNT.R          /* UC Counter 22 */
#define EMIOS_1_C22          EMIOS_1.UC[22].C.R            /* UC Control 22 */
#define EMIOS_1_S22          EMIOS_1.UC[22].S.R            /* UC Status 22 */
#define EMIOS_1_ALTA22       EMIOS_1.UC[22].ALTA.R         /* Alternate Address 22 */
#define EMIOS_1_C2_22        EMIOS_1.UC[22].C2.R           /* UC Control 2 22 */
#define EMIOS_1_A23          EMIOS_1.UC[23].A.R            /* UC A 23 */
#define EMIOS_1_B23          EMIOS_1.UC[23].B.R            /* UC B 23 */
#define EMIOS_1_CNT23        EMIOS_1.UC[23].CNT.R          /* UC Counter 23 */
#define EMIOS_1_C23          EMIOS_1.UC[23].C.R            /* UC Control 23 */
#define EMIOS_1_S23          EMIOS_1.UC[23].S.R            /* UC Status 23 */
#define EMIOS_1_ALTA23       EMIOS_1.UC[23].ALTA.R         /* Alternate Address 23 */
#define EMIOS_1_C2_23        EMIOS_1.UC[23].C2.R           /* UC Control 2 23 */

/* eMIOS_2 */
#define EMIOS_2_MCR          EMIOS_2.MCR.R                 /* Module Configuration */
#define EMIOS_2_GFLAG        EMIOS_2.GFLAG.R               /* Global FLAG */
#define EMIOS_2_OUDIS        EMIOS_2.OUDIS.R               /* Output Update Disable */
#define EMIOS_2_UCDIS        EMIOS_2.UCDIS.R               /* Disable Channel */
#define EMIOS_2_A0           EMIOS_2.UC[0].A.R             /* UC A 0 */
#define EMIOS_2_B0           EMIOS_2.UC[0].B.R             /* UC B 0 */
#define EMIOS_2_CNT0         EMIOS_2.UC[0].CNT.R           /* UC Counter 0 */
#define EMIOS_2_C0           EMIOS_2.UC[0].C.R             /* UC Control 0 */
#define EMIOS_2_S0           EMIOS_2.UC[0].S.R             /* UC Status 0 */
#define EMIOS_2_ALTA0        EMIOS_2.UC[0].ALTA.R          /* Alternate Address 0 */
#define EMIOS_2_C2_0         EMIOS_2.UC[0].C2.R            /* UC Control 2 0 */
#define EMIOS_2_A1           EMIOS_2.UC[1].A.R             /* UC A 1 */
#define EMIOS_2_B1           EMIOS_2.UC[1].B.R             /* UC B 1 */
#define EMIOS_2_C1           EMIOS_2.UC[1].C.R             /* UC Control 1 */
#define EMIOS_2_S1           EMIOS_2.UC[1].S.R             /* UC Status 1 */
#define EMIOS_2_ALTA1        EMIOS_2.UC[1].ALTA.R          /* Alternate Address 1 */
#define EMIOS_2_C2_1         EMIOS_2.UC[1].C2.R            /* UC Control 2 1 */
#define EMIOS_2_A2           EMIOS_2.UC[2].A.R             /* UC A 2 */
#define EMIOS_2_B2           EMIOS_2.UC[2].B.R             /* UC B 2 */
#define EMIOS_2_C2           EMIOS_2.UC[2].C.R             /* UC Control 2 */
#define EMIOS_2_S2           EMIOS_2.UC[2].S.R             /* UC Status 2 */
#define EMIOS_2_ALTA2        EMIOS_2.UC[2].ALTA.R          /* Alternate Address 2 */
#define EMIOS_2_C2_2         EMIOS_2.UC[2].C2.R            /* UC Control 2 2 */
#define EMIOS_2_A3           EMIOS_2.UC[3].A.R             /* UC A 3 */
#define EMIOS_2_B3           EMIOS_2.UC[3].B.R             /* UC B 3 */
#define EMIOS_2_C3           EMIOS_2.UC[3].C.R             /* UC Control 3 */
#define EMIOS_2_S3           EMIOS_2.UC[3].S.R             /* UC Status 3 */
#define EMIOS_2_ALTA3        EMIOS_2.UC[3].ALTA.R          /* Alternate Address 3 */
#define EMIOS_2_C2_3         EMIOS_2.UC[3].C2.R            /* UC Control 2 3 */
#define EMIOS_2_A4           EMIOS_2.UC[4].A.R             /* UC A 4 */
#define EMIOS_2_B4           EMIOS_2.UC[4].B.R             /* UC B 4 */
#define EMIOS_2_C4           EMIOS_2.UC[4].C.R             /* UC Control 4 */
#define EMIOS_2_S4           EMIOS_2.UC[4].S.R             /* UC Status 4 */
#define EMIOS_2_ALTA4        EMIOS_2.UC[4].ALTA.R          /* Alternate Address 4 */
#define EMIOS_2_C2_4         EMIOS_2.UC[4].C2.R            /* UC Control 2 4 */
#define EMIOS_2_A5           EMIOS_2.UC[5].A.R             /* UC A 5 */
#define EMIOS_2_B5           EMIOS_2.UC[5].B.R             /* UC B 5 */
#define EMIOS_2_C5           EMIOS_2.UC[5].C.R             /* UC Control 5 */
#define EMIOS_2_S5           EMIOS_2.UC[5].S.R             /* UC Status 5 */
#define EMIOS_2_ALTA5        EMIOS_2.UC[5].ALTA.R          /* Alternate Address 5 */
#define EMIOS_2_C2_5         EMIOS_2.UC[5].C2.R            /* UC Control 2 5 */
#define EMIOS_2_A6           EMIOS_2.UC[6].A.R             /* UC A 6 */
#define EMIOS_2_B6           EMIOS_2.UC[6].B.R             /* UC B 6 */
#define EMIOS_2_C6           EMIOS_2.UC[6].C.R             /* UC Control 6 */
#define EMIOS_2_S6           EMIOS_2.UC[6].S.R             /* UC Status 6 */
#define EMIOS_2_ALTA6        EMIOS_2.UC[6].ALTA.R          /* Alternate Address 6 */
#define EMIOS_2_C2_6         EMIOS_2.UC[6].C2.R            /* UC Control 2 6 */
#define EMIOS_2_A7           EMIOS_2.UC[7].A.R             /* UC A 7 */
#define EMIOS_2_B7           EMIOS_2.UC[7].B.R             /* UC B 7 */
#define EMIOS_2_C7           EMIOS_2.UC[7].C.R             /* UC Control 7 */
#define EMIOS_2_S7           EMIOS_2.UC[7].S.R             /* UC Status 7 */
#define EMIOS_2_ALTA7        EMIOS_2.UC[7].ALTA.R          /* Alternate Address 7 */
#define EMIOS_2_C2_7         EMIOS_2.UC[7].C2.R            /* UC Control 2 7 */
#define EMIOS_2_A8           EMIOS_2.UC[8].A.R             /* UC A 8 */
#define EMIOS_2_B8           EMIOS_2.UC[8].B.R             /* UC B 8 */
#define EMIOS_2_CNT8         EMIOS_2.UC[8].CNT.R           /* UC Counter 8 */
#define EMIOS_2_C8           EMIOS_2.UC[8].C.R             /* UC Control 8 */
#define EMIOS_2_S8           EMIOS_2.UC[8].S.R             /* UC Status 8 */
#define EMIOS_2_ALTA8        EMIOS_2.UC[8].ALTA.R          /* Alternate Address 8 */
#define EMIOS_2_C2_8         EMIOS_2.UC[8].C2.R            /* UC Control 2 8 */
#define EMIOS_2_A9           EMIOS_2.UC[9].A.R             /* UC A 9 */
#define EMIOS_2_B9           EMIOS_2.UC[9].B.R             /* UC B 9 */
#define EMIOS_2_C9           EMIOS_2.UC[9].C.R             /* UC Control 9 */
#define EMIOS_2_S9           EMIOS_2.UC[9].S.R             /* UC Status 9 */
#define EMIOS_2_ALTA9        EMIOS_2.UC[9].ALTA.R          /* Alternate Address 9 */
#define EMIOS_2_C2_9         EMIOS_2.UC[9].C2.R            /* UC Control 2 9 */
#define EMIOS_2_A10          EMIOS_2.UC[10].A.R            /* UC A 10 */
#define EMIOS_2_B10          EMIOS_2.UC[10].B.R            /* UC B 10 */
#define EMIOS_2_C10          EMIOS_2.UC[10].C.R            /* UC Control 10 */
#define EMIOS_2_S10          EMIOS_2.UC[10].S.R            /* UC Status 10 */
#define EMIOS_2_ALTA10       EMIOS_2.UC[10].ALTA.R         /* Alternate Address 10 */
#define EMIOS_2_C2_10        EMIOS_2.UC[10].C2.R           /* UC Control 2 10 */
#define EMIOS_2_A11          EMIOS_2.UC[11].A.R            /* UC A 11 */
#define EMIOS_2_B11          EMIOS_2.UC[11].B.R            /* UC B 11 */
#define EMIOS_2_C11          EMIOS_2.UC[11].C.R            /* UC Control 11 */
#define EMIOS_2_S11          EMIOS_2.UC[11].S.R            /* UC Status 11 */
#define EMIOS_2_ALTA11       EMIOS_2.UC[11].ALTA.R         /* Alternate Address 11 */
#define EMIOS_2_C2_11        EMIOS_2.UC[11].C2.R           /* UC Control 2 11 */
#define EMIOS_2_A12          EMIOS_2.UC[12].A.R            /* UC A 12 */
#define EMIOS_2_B12          EMIOS_2.UC[12].B.R            /* UC B 12 */
#define EMIOS_2_C12          EMIOS_2.UC[12].C.R            /* UC Control 12 */
#define EMIOS_2_S12          EMIOS_2.UC[12].S.R            /* UC Status 12 */
#define EMIOS_2_ALTA12       EMIOS_2.UC[12].ALTA.R         /* Alternate Address 12 */
#define EMIOS_2_C2_12        EMIOS_2.UC[12].C2.R           /* UC Control 2 12 */
#define EMIOS_2_A13          EMIOS_2.UC[13].A.R            /* UC A 13 */
#define EMIOS_2_B13          EMIOS_2.UC[13].B.R            /* UC B 13 */
#define EMIOS_2_C13          EMIOS_2.UC[13].C.R            /* UC Control 13 */
#define EMIOS_2_S13          EMIOS_2.UC[13].S.R            /* UC Status 13 */
#define EMIOS_2_ALTA13       EMIOS_2.UC[13].ALTA.R         /* Alternate Address 13 */
#define EMIOS_2_C2_13        EMIOS_2.UC[13].C2.R           /* UC Control 2 13 */
#define EMIOS_2_A14          EMIOS_2.UC[14].A.R            /* UC A 14 */
#define EMIOS_2_B14          EMIOS_2.UC[14].B.R            /* UC B 14 */
#define EMIOS_2_C14          EMIOS_2.UC[14].C.R            /* UC Control 14 */
#define EMIOS_2_S14          EMIOS_2.UC[14].S.R            /* UC Status 14 */
#define EMIOS_2_ALTA14       EMIOS_2.UC[14].ALTA.R         /* Alternate Address 14 */
#define EMIOS_2_C2_14        EMIOS_2.UC[14].C2.R           /* UC Control 2 14 */
#define EMIOS_2_A15          EMIOS_2.UC[15].A.R            /* UC A 15 */
#define EMIOS_2_B15          EMIOS_2.UC[15].B.R            /* UC B 15 */
#define EMIOS_2_C15          EMIOS_2.UC[15].C.R            /* UC Control 15 */
#define EMIOS_2_S15          EMIOS_2.UC[15].S.R            /* UC Status 15 */
#define EMIOS_2_ALTA15       EMIOS_2.UC[15].ALTA.R         /* Alternate Address 15 */
#define EMIOS_2_C2_15        EMIOS_2.UC[15].C2.R           /* UC Control 2 15 */
#define EMIOS_2_A16          EMIOS_2.UC[16].A.R            /* UC A 16 */
#define EMIOS_2_B16          EMIOS_2.UC[16].B.R            /* UC B 16 */
#define EMIOS_2_CNT16        EMIOS_2.UC[16].CNT.R          /* UC Counter 16 */
#define EMIOS_2_C16          EMIOS_2.UC[16].C.R            /* UC Control 16 */
#define EMIOS_2_S16          EMIOS_2.UC[16].S.R            /* UC Status 16 */
#define EMIOS_2_ALTA16       EMIOS_2.UC[16].ALTA.R         /* Alternate Address 16 */
#define EMIOS_2_C2_16        EMIOS_2.UC[16].C2.R           /* UC Control 2 16 */
#define EMIOS_2_A17          EMIOS_2.UC[17].A.R            /* UC A 17 */
#define EMIOS_2_B17          EMIOS_2.UC[17].B.R            /* UC B 17 */
#define EMIOS_2_C17          EMIOS_2.UC[17].C.R            /* UC Control 17 */
#define EMIOS_2_S17          EMIOS_2.UC[17].S.R            /* UC Status 17 */
#define EMIOS_2_ALTA17       EMIOS_2.UC[17].ALTA.R         /* Alternate Address 17 */
#define EMIOS_2_C2_17        EMIOS_2.UC[17].C2.R           /* UC Control 2 17 */
#define EMIOS_2_A18          EMIOS_2.UC[18].A.R            /* UC A 18 */
#define EMIOS_2_B18          EMIOS_2.UC[18].B.R            /* UC B 18 */
#define EMIOS_2_C18          EMIOS_2.UC[18].C.R            /* UC Control 18 */
#define EMIOS_2_S18          EMIOS_2.UC[18].S.R            /* UC Status 18 */
#define EMIOS_2_ALTA18       EMIOS_2.UC[18].ALTA.R         /* Alternate Address 18 */
#define EMIOS_2_C2_18        EMIOS_2.UC[18].C2.R           /* UC Control 2 18 */
#define EMIOS_2_A19          EMIOS_2.UC[19].A.R            /* UC A 19 */
#define EMIOS_2_B19          EMIOS_2.UC[19].B.R            /* UC B 19 */
#define EMIOS_2_C19          EMIOS_2.UC[19].C.R            /* UC Control 19 */
#define EMIOS_2_S19          EMIOS_2.UC[19].S.R            /* UC Status 19 */
#define EMIOS_2_ALTA19       EMIOS_2.UC[19].ALTA.R         /* Alternate Address 19 */
#define EMIOS_2_C2_19        EMIOS_2.UC[19].C2.R           /* UC Control 2 19 */
#define EMIOS_2_A20          EMIOS_2.UC[20].A.R            /* UC A 20 */
#define EMIOS_2_B20          EMIOS_2.UC[20].B.R            /* UC B 20 */
#define EMIOS_2_C20          EMIOS_2.UC[20].C.R            /* UC Control 20 */
#define EMIOS_2_S20          EMIOS_2.UC[20].S.R            /* UC Status 20 */
#define EMIOS_2_ALTA20       EMIOS_2.UC[20].ALTA.R         /* Alternate Address 20 */
#define EMIOS_2_C2_20        EMIOS_2.UC[20].C2.R           /* UC Control 2 20 */
#define EMIOS_2_A21          EMIOS_2.UC[21].A.R            /* UC A 21 */
#define EMIOS_2_B21          EMIOS_2.UC[21].B.R            /* UC B 21 */
#define EMIOS_2_C21          EMIOS_2.UC[21].C.R            /* UC Control 21 */
#define EMIOS_2_S21          EMIOS_2.UC[21].S.R            /* UC Status 21 */
#define EMIOS_2_ALTA21       EMIOS_2.UC[21].ALTA.R         /* Alternate Address 21 */
#define EMIOS_2_C2_21        EMIOS_2.UC[21].C2.R           /* UC Control 2 21 */
#define EMIOS_2_A22          EMIOS_2.UC[22].A.R            /* UC A 22 */
#define EMIOS_2_B22          EMIOS_2.UC[22].B.R            /* UC B 22 */
#define EMIOS_2_CNT22        EMIOS_2.UC[22].CNT.R          /* UC Counter 22 */
#define EMIOS_2_C22          EMIOS_2.UC[22].C.R            /* UC Control 22 */
#define EMIOS_2_S22          EMIOS_2.UC[22].S.R            /* UC Status 22 */
#define EMIOS_2_ALTA22       EMIOS_2.UC[22].ALTA.R         /* Alternate Address 22 */
#define EMIOS_2_C2_22        EMIOS_2.UC[22].C2.R           /* UC Control 2 22 */
#define EMIOS_2_A23          EMIOS_2.UC[23].A.R            /* UC A 23 */
#define EMIOS_2_B23          EMIOS_2.UC[23].B.R            /* UC B 23 */
#define EMIOS_2_CNT23        EMIOS_2.UC[23].CNT.R          /* UC Counter 23 */
#define EMIOS_2_C23          EMIOS_2.UC[23].C.R            /* UC Control 23 */
#define EMIOS_2_S23          EMIOS_2.UC[23].S.R            /* UC Status 23 */
#define EMIOS_2_ALTA23       EMIOS_2.UC[23].ALTA.R         /* Alternate Address 23 */
#define EMIOS_2_C2_23        EMIOS_2.UC[23].C2.R           /* UC Control 2 23 */

#ifdef __MWERKS__
#pragma pop
#endif
#ifdef __ghs__
#pragma ghs endnowarning
#endif
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif
#ifdef  __cplusplus
}
#endif
#endif /* ifdef _S32K344_H */
