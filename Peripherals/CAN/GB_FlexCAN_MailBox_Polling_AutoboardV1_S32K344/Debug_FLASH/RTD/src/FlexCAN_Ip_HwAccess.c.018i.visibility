
Marking local functions: FlexCAN_CanBitSampling/36 FlexCAN_SetEdgeFilter/35 FlexCAN_SetBusOffAutorecovery/34 FlexCAN_SetRemoteReqStore/33 FlexCAN_SetProtocolException/32 FlexCAN_SetEntireFrameArbitrationFieldComparison/31 FlexCAN_SetIsoCan/30 FlexCAN_IsFDEnabled/27 FlexCAN_SetSelfReception/26 DevAssert/0


Marking externally visible functions: FlexCAN_ResetImaskBuff/84 FlexCAN_ConfigCtrlOptions/83 FlexCAN_SetEnhancedRxFifoFilter/82 FlexCAN_EnableEnhancedRxFifo/81 FlexCAN_IsEnhancedRxFifoAvailable/80 FlexCAN_IsMbOutOfRange/79 FlexCAN_ReadEnhancedRxFifo/78 FlexCAN_ReadRxFifo/77 FlexCAN_SetRxFifoFilter/76 FlexCAN_SetOperationMode/75 FlexCAN_SetMaxMsgBuffNum/74 FlexCAN_SetTxMsgBuff/73 FlexCAN_GetMsgBuff/72 FlexCAN_GetMsgBuffTimestamp/71 FlexCAN_SetRxMsgBuff/70 FlexCAN_EnableInterrupts/69 FlexCAN_DisableInterrupts/68 FLEXCAN_ClearMsgBuffIntCmd/67 FlexCAN_SetMsgBuffIntCmd/66 FlexCAN_LockRxMsgBuff/65 FlexCAN_GetMbPayloadSize/64 FlexCAN_SetPayloadSize/62 FlexCAN_EnableRxFifo/61 FlexCAN_Init/60 FlexCAN_SetErrIntCmd/59 FlexCAN_Disable/58 FlexCAN_ExitFreezeMode/57 FlexCAN_Enable/56 FlexCAN_EnterFreezeMode/55 FlexCAN_GetMaxMbNum/54 FlexCAN_GetMsgBuffRegion/53 FlexCAN_ComputePayloadSize/52


Marking externally visible variables:


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

FlexcanBase.0/107 (FlexcanBase) @07eb0240
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: FlexCAN_IsEnhancedRxFifoAvailable/80 (read) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_13/106 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_13) @07e80d20
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_SetRxFifoFilter/76 FlexCAN_SetRxFifoFilter/76 FlexCAN_SetRxFifoFilter/76 FlexCAN_SetRxFifoFilter/76 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_13/105 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_13) @07e80c40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_SetRxFifoFilter/76 FlexCAN_SetRxFifoFilter/76 FlexCAN_SetRxFifoFilter/76 FlexCAN_SetRxFifoFilter/76 
  Calls: 
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_11/104 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_11) @07e68ee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FLEXCAN_ClearMsgBuffIntCmd/67 FLEXCAN_ClearMsgBuffIntCmd/67 FLEXCAN_ClearMsgBuffIntCmd/67 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_11/103 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_11) @07e68e00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FLEXCAN_ClearMsgBuffIntCmd/67 FLEXCAN_ClearMsgBuffIntCmd/67 FLEXCAN_ClearMsgBuffIntCmd/67 
  Calls: 
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_18/102 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_18) @07e68b60
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_SetMsgBuffIntCmd/66 FlexCAN_SetMsgBuffIntCmd/66 FlexCAN_SetMsgBuffIntCmd/66 FlexCAN_SetMsgBuffIntCmd/66 FlexCAN_SetMsgBuffIntCmd/66 FlexCAN_SetMsgBuffIntCmd/66 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_18/101 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_18) @07e68a80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_SetMsgBuffIntCmd/66 FlexCAN_SetMsgBuffIntCmd/66 FlexCAN_SetMsgBuffIntCmd/66 FlexCAN_SetMsgBuffIntCmd/66 FlexCAN_SetMsgBuffIntCmd/66 FlexCAN_SetMsgBuffIntCmd/66 
  Calls: 
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_06/100 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_06) @07e680e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_SetErrIntCmd/59 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_06/99 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_06) @07e68000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_SetErrIntCmd/59 
  Calls: 
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_05/98 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_05) @07e5be00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Disable/58 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_05/97 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_05) @07e5bd20
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Disable/58 
  Calls: 
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_04/96 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_04) @07e5bb60
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_ExitFreezeMode/57 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_04/95 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_04) @07e5ba80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_ExitFreezeMode/57 
  Calls: 
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_03/94 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_03) @07e5b8c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Enable/56 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_03/93 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_03) @07e5b7e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Enable/56 
  Calls: 
OsIf_GetElapsed/92 (OsIf_GetElapsed) @07e5b620
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Init/60 FlexCAN_Disable/58 FlexCAN_ExitFreezeMode/57 FlexCAN_Enable/56 FlexCAN_EnterFreezeMode/55 
  Calls: 
OsIf_GetCounter/91 (OsIf_GetCounter) @07e5b540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Init/60 FlexCAN_Disable/58 FlexCAN_ExitFreezeMode/57 FlexCAN_Enable/56 FlexCAN_EnterFreezeMode/55 
  Calls: 
SchM_Exit_Can_CAN_EXCLUSIVE_AREA_02/90 (SchM_Exit_Can_CAN_EXCLUSIVE_AREA_02) @07e5b460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_EnterFreezeMode/55 
  Calls: 
SchM_Enter_Can_CAN_EXCLUSIVE_AREA_02/89 (SchM_Enter_Can_CAN_EXCLUSIVE_AREA_02) @07e5b380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_EnterFreezeMode/55 
  Calls: 
OsIf_MicrosToTicks/88 (OsIf_MicrosToTicks) @07e5b2a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Init/60 FlexCAN_Disable/58 FlexCAN_ExitFreezeMode/57 FlexCAN_Enable/56 FlexCAN_EnterFreezeMode/55 
  Calls: 
maxMbNum.1/87 (maxMbNum) @07e5f120
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: FlexCAN_GetMaxMbNum/54 (read) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
flexcanBase.2/86 (flexcanBase) @07e5f0d8
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: FlexCAN_GetMaxMbNum/54 (read) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
payload_code.3/85 (payload_code) @07def0d8
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: FlexCAN_ComputeDLCValue/50 (read) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
FlexCAN_ResetImaskBuff/84 (FlexCAN_ResetImaskBuff) @07dc1e00
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: FlexCAN_Ip_au32ImaskBuff/49 (write) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
FlexCAN_ConfigCtrlOptions/83 (FlexCAN_ConfigCtrlOptions) @07dc1b60
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_SetEdgeFilter/35 FlexCAN_SetEdgeFilter/35 FlexCAN_SetRemoteReqStore/33 FlexCAN_SetRemoteReqStore/33 FlexCAN_SetBusOffAutorecovery/34 FlexCAN_SetBusOffAutorecovery/34 FlexCAN_CanBitSampling/36 FlexCAN_CanBitSampling/36 FlexCAN_SetProtocolException/32 FlexCAN_SetProtocolException/32 FlexCAN_SetEntireFrameArbitrationFieldComparison/31 FlexCAN_SetEntireFrameArbitrationFieldComparison/31 FlexCAN_SetIsoCan/30 FlexCAN_SetIsoCan/30 
FlexCAN_SetEnhancedRxFifoFilter/82 (FlexCAN_SetEnhancedRxFifoFilter) @07dc18c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: DevAssert/0 DevAssert/0 
FlexCAN_EnableEnhancedRxFifo/81 (FlexCAN_EnableEnhancedRxFifo) @07dc1620
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_IsEnhancedRxFifoAvailable/80 
FlexCAN_IsEnhancedRxFifoAvailable/80 (FlexCAN_IsEnhancedRxFifoAvailable) @07dc11c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: FlexcanBase.0/107 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_EnableEnhancedRxFifo/81 
  Calls: 
FlexCAN_IsMbOutOfRange/79 (FlexCAN_IsMbOutOfRange) @07d36e00
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
FlexCAN_ReadEnhancedRxFifo/78 (FlexCAN_ReadEnhancedRxFifo) @07d367e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: DevAssert/0 FlexCAN_ComputePayloadSize/52 
FlexCAN_ReadRxFifo/77 (FlexCAN_ReadRxFifo) @07d36d20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: DevAssert/0 FlexCAN_ComputePayloadSize/52 
FlexCAN_SetRxFifoFilter/76 (FlexCAN_SetRxFifoFilter) @07d369a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: SchM_Exit_Can_CAN_EXCLUSIVE_AREA_13/106 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_13/105 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_13/106 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_13/105 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_13/106 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_13/105 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_13/106 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_13/105 DevAssert/0 
FlexCAN_SetOperationMode/75 (FlexCAN_SetOperationMode) @07d36700
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_SetSelfReception/26 
FlexCAN_SetMaxMsgBuffNum/74 (FlexCAN_SetMaxMsgBuffNum) @07d36000
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_GetMbPayloadSize/64 FlexCAN_GetMsgBuffRegion/53 FlexCAN_GetMaxMbNum/54 FlexCAN_GetMaxMbNum/54 FlexCAN_GetMsgBuffRegion/53 DevAssert/0 FlexCAN_GetMbPayloadSize/64 
FlexCAN_SetTxMsgBuff/73 (FlexCAN_SetTxMsgBuff) @07d22a80
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_ComputePayloadSize/52 FlexCAN_ComputeDLCValue/50 DevAssert/0 
FlexCAN_GetMsgBuff/72 (FlexCAN_GetMsgBuff) @07d22e00
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_GetMbPayloadSize/64 FlexCAN_GetMbPayloadSize/64 DevAssert/0 FlexCAN_ComputePayloadSize/52 FlexCAN_GetMsgBuffRegion/53 
FlexCAN_GetMsgBuffTimestamp/71 (FlexCAN_GetMsgBuffTimestamp) @07d229a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_GetMsgBuffRegion/53 
FlexCAN_SetRxMsgBuff/70 (FlexCAN_SetRxMsgBuff) @07d22700
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: DevAssert/0 FlexCAN_GetMsgBuffRegion/53 
FlexCAN_EnableInterrupts/69 (FlexCAN_EnableInterrupts) @07d22460
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: FlexCAN_Ip_au32ImaskBuff/49 (read) FlexCAN_Ip_au32ImaskBuff/49 (read) FlexCAN_Ip_au32ImaskBuff/49 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_GetMaxMbNum/54 
FlexCAN_DisableInterrupts/68 (FlexCAN_DisableInterrupts) @07d221c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_GetMaxMbNum/54 
FLEXCAN_ClearMsgBuffIntCmd/67 (FLEXCAN_ClearMsgBuffIntCmd) @07d15e00
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: FlexCAN_Ip_au32ImaskBuff/49 (write) FlexCAN_Ip_au32ImaskBuff/49 (read) FlexCAN_Ip_au32ImaskBuff/49 (write) FlexCAN_Ip_au32ImaskBuff/49 (read) FlexCAN_Ip_au32ImaskBuff/49 (write) FlexCAN_Ip_au32ImaskBuff/49 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: SchM_Exit_Can_CAN_EXCLUSIVE_AREA_11/104 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_11/103 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_11/104 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_11/103 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_11/104 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_11/103 
FlexCAN_SetMsgBuffIntCmd/66 (FlexCAN_SetMsgBuffIntCmd) @07d158c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: FlexCAN_Ip_au32ImaskBuff/49 (read) FlexCAN_Ip_au32ImaskBuff/49 (write) FlexCAN_Ip_au32ImaskBuff/49 (read) FlexCAN_Ip_au32ImaskBuff/49 (read) FlexCAN_Ip_au32ImaskBuff/49 (write) FlexCAN_Ip_au32ImaskBuff/49 (read) FlexCAN_Ip_au32ImaskBuff/49 (read) FlexCAN_Ip_au32ImaskBuff/49 (write) FlexCAN_Ip_au32ImaskBuff/49 (read) FlexCAN_Ip_au32ImaskBuff/49 (read) FlexCAN_Ip_au32ImaskBuff/49 (write) FlexCAN_Ip_au32ImaskBuff/49 (read) FlexCAN_Ip_au32ImaskBuff/49 (read) FlexCAN_Ip_au32ImaskBuff/49 (write) FlexCAN_Ip_au32ImaskBuff/49 (read) FlexCAN_Ip_au32ImaskBuff/49 (read) FlexCAN_Ip_au32ImaskBuff/49 (write) FlexCAN_Ip_au32ImaskBuff/49 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: SchM_Exit_Can_CAN_EXCLUSIVE_AREA_18/102 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_18/101 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_18/102 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_18/101 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_18/102 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_18/101 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_18/102 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_18/101 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_18/102 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_18/101 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_18/102 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_18/101 
FlexCAN_LockRxMsgBuff/65 (FlexCAN_LockRxMsgBuff) @07d152a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_GetMsgBuffRegion/53 
FlexCAN_GetMbPayloadSize/64 (FlexCAN_GetMbPayloadSize) @07d15d20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_SetMaxMsgBuffNum/74 FlexCAN_SetMaxMsgBuffNum/74 FlexCAN_GetMsgBuff/72 FlexCAN_GetMsgBuff/72 
  Calls: FlexCAN_GetPayloadSize/63 
FlexCAN_GetPayloadSize/63 (FlexCAN_GetPayloadSize) @07d15a80
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_GetMbPayloadSize/64 FlexCAN_GetMsgBuffRegion/53 
  Calls: 
FlexCAN_SetPayloadSize/62 (FlexCAN_SetPayloadSize) @07d157e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_IsFDEnabled/27 DevAssert/0 FlexCAN_IsFDEnabled/27 DevAssert/0 FlexCAN_IsFDEnabled/27 DevAssert/0 FlexCAN_IsFDEnabled/27 
FlexCAN_EnableRxFifo/61 (FlexCAN_EnableRxFifo) @07d15540
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_GetMaxMbNum/54 
FlexCAN_Init/60 (FlexCAN_Init) @07d151c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_GetMaxMbNum/54 FlexCAN_GetMaxMbNum/54 FlexCAN_ClearRAM/51 OsIf_GetElapsed/92 OsIf_GetCounter/91 OsIf_MicrosToTicks/88 
FlexCAN_SetErrIntCmd/59 (FlexCAN_SetErrIntCmd) @07d0d8c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: SchM_Exit_Can_CAN_EXCLUSIVE_AREA_06/100 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_06/99 
FlexCAN_Disable/58 (FlexCAN_Disable) @07d0db60
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: OsIf_GetElapsed/92 OsIf_GetCounter/91 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_05/98 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_05/97 OsIf_MicrosToTicks/88 
FlexCAN_ExitFreezeMode/57 (FlexCAN_ExitFreezeMode) @07d0d7e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: OsIf_GetElapsed/92 OsIf_GetCounter/91 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_04/96 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_04/95 OsIf_MicrosToTicks/88 
FlexCAN_Enable/56 (FlexCAN_Enable) @07d0d380
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: OsIf_GetElapsed/92 OsIf_GetCounter/91 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_03/94 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_03/93 OsIf_MicrosToTicks/88 
FlexCAN_EnterFreezeMode/55 (FlexCAN_EnterFreezeMode) @07d0d0e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: OsIf_GetElapsed/92 OsIf_GetCounter/91 SchM_Exit_Can_CAN_EXCLUSIVE_AREA_02/90 SchM_Enter_Can_CAN_EXCLUSIVE_AREA_02/89 OsIf_MicrosToTicks/88 
FlexCAN_GetMaxMbNum/54 (FlexCAN_GetMaxMbNum) @07da5700
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: flexcanBase.2/86 (read) maxMbNum.1/87 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_SetMaxMsgBuffNum/74 FlexCAN_SetMaxMsgBuffNum/74 FlexCAN_EnableInterrupts/69 FlexCAN_DisableInterrupts/68 FlexCAN_EnableRxFifo/61 FlexCAN_Init/60 FlexCAN_Init/60 FlexCAN_ClearRAM/51 FlexCAN_ClearRAM/51 
  Calls: 
FlexCAN_GetMsgBuffRegion/53 (FlexCAN_GetMsgBuffRegion) @07da5380
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_SetMaxMsgBuffNum/74 FlexCAN_SetMaxMsgBuffNum/74 FlexCAN_GetMsgBuff/72 FlexCAN_GetMsgBuffTimestamp/71 FlexCAN_SetRxMsgBuff/70 FlexCAN_LockRxMsgBuff/65 
  Calls: FlexCAN_GetPayloadSize/63 
FlexCAN_ComputePayloadSize/52 (FlexCAN_ComputePayloadSize) @07da5d20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_ReadEnhancedRxFifo/78 FlexCAN_ReadRxFifo/77 FlexCAN_SetTxMsgBuff/73 FlexCAN_GetMsgBuff/72 
  Calls: 
FlexCAN_ClearRAM/51 (FlexCAN_ClearRAM) @07da5a80
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_Init/60 
  Calls: FlexCAN_GetMaxMbNum/54 FlexCAN_GetMaxMbNum/54 
FlexCAN_ComputeDLCValue/50 (FlexCAN_ComputeDLCValue) @07da5620
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: payload_code.3/85 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_SetTxMsgBuff/73 
  Calls: 
FlexCAN_Ip_au32ImaskBuff/49 (FlexCAN_Ip_au32ImaskBuff) @069a5438
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: FlexCAN_SetMsgBuffIntCmd/66 (read) FlexCAN_SetMsgBuffIntCmd/66 (write) FlexCAN_SetMsgBuffIntCmd/66 (read) FlexCAN_SetMsgBuffIntCmd/66 (read) FlexCAN_SetMsgBuffIntCmd/66 (write) FlexCAN_SetMsgBuffIntCmd/66 (read) FlexCAN_SetMsgBuffIntCmd/66 (read) FlexCAN_SetMsgBuffIntCmd/66 (write) FlexCAN_SetMsgBuffIntCmd/66 (read) FlexCAN_SetMsgBuffIntCmd/66 (read) FlexCAN_SetMsgBuffIntCmd/66 (write) FlexCAN_SetMsgBuffIntCmd/66 (read) FlexCAN_SetMsgBuffIntCmd/66 (read) FlexCAN_SetMsgBuffIntCmd/66 (write) FlexCAN_SetMsgBuffIntCmd/66 (read) FlexCAN_SetMsgBuffIntCmd/66 (read) FlexCAN_SetMsgBuffIntCmd/66 (write) FlexCAN_SetMsgBuffIntCmd/66 (read) FLEXCAN_ClearMsgBuffIntCmd/67 (write) FLEXCAN_ClearMsgBuffIntCmd/67 (read) FLEXCAN_ClearMsgBuffIntCmd/67 (write) FLEXCAN_ClearMsgBuffIntCmd/67 (read) FLEXCAN_ClearMsgBuffIntCmd/67 (write) FLEXCAN_ClearMsgBuffIntCmd/67 (read) FlexCAN_EnableInterrupts/69 (read) FlexCAN_EnableInterrupts/69 (read) FlexCAN_EnableInterrupts/69 (read) FlexCAN_ResetImaskBuff/84 (write) 
  Availability: available
  Varpool flags:
FlexCAN_CanBitSampling/36 (FlexCAN_CanBitSampling) @07cf40e0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_ConfigCtrlOptions/83 FlexCAN_ConfigCtrlOptions/83 
  Calls: 
FlexCAN_SetEdgeFilter/35 (FlexCAN_SetEdgeFilter) @07cf1d20
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_ConfigCtrlOptions/83 FlexCAN_ConfigCtrlOptions/83 
  Calls: 
FlexCAN_SetBusOffAutorecovery/34 (FlexCAN_SetBusOffAutorecovery) @07cf19a0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_ConfigCtrlOptions/83 FlexCAN_ConfigCtrlOptions/83 
  Calls: 
FlexCAN_SetRemoteReqStore/33 (FlexCAN_SetRemoteReqStore) @07cf1620
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_ConfigCtrlOptions/83 FlexCAN_ConfigCtrlOptions/83 
  Calls: 
FlexCAN_SetProtocolException/32 (FlexCAN_SetProtocolException) @07cf12a0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_ConfigCtrlOptions/83 FlexCAN_ConfigCtrlOptions/83 
  Calls: 
FlexCAN_SetEntireFrameArbitrationFieldComparison/31 (FlexCAN_SetEntireFrameArbitrationFieldComparison) @07cedee0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_ConfigCtrlOptions/83 FlexCAN_ConfigCtrlOptions/83 
  Calls: 
FlexCAN_SetIsoCan/30 (FlexCAN_SetIsoCan) @07cedb60
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_ConfigCtrlOptions/83 FlexCAN_ConfigCtrlOptions/83 
  Calls: 
FlexCAN_IsFDEnabled/27 (FlexCAN_IsFDEnabled) @07ced0e0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_SetPayloadSize/62 FlexCAN_SetPayloadSize/62 FlexCAN_SetPayloadSize/62 FlexCAN_SetPayloadSize/62 
  Calls: 
FlexCAN_SetSelfReception/26 (FlexCAN_SetSelfReception) @07ceae00
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_SetOperationMode/75 
  Calls: 
DevAssert/0 (DevAssert) @07c157e0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_SetEnhancedRxFifoFilter/82 FlexCAN_SetEnhancedRxFifoFilter/82 FlexCAN_ReadEnhancedRxFifo/78 FlexCAN_ReadRxFifo/77 FlexCAN_SetRxFifoFilter/76 FlexCAN_SetMaxMsgBuffNum/74 FlexCAN_SetTxMsgBuff/73 FlexCAN_GetMsgBuff/72 FlexCAN_SetRxMsgBuff/70 FlexCAN_SetPayloadSize/62 FlexCAN_SetPayloadSize/62 FlexCAN_SetPayloadSize/62 
  Calls: 
FlexCAN_ResetImaskBuff (uint8 Instance)
{
  uint8 ImaskCnt;

  <bb 2> :
  ImaskCnt = 0;
  ImaskCnt = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  _1 = (int) Instance;
  _2 = (int) ImaskCnt;
  FlexCAN_Ip_au32ImaskBuff[_1][_2] = 0;
  ImaskCnt.27_3 = ImaskCnt;
  ImaskCnt = ImaskCnt.27_3 + 1;

  <bb 4> :
  if (ImaskCnt <= 2)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  return;

}


FlexCAN_ConfigCtrlOptions (struct FLEXCAN_Type * pBase, uint32 u32Options)
{
  <bb 2> :
  _1 = u32Options & 32;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  FlexCAN_SetIsoCan (pBase, 1);
  goto <bb 5>; [INV]

  <bb 4> :
  FlexCAN_SetIsoCan (pBase, 0);

  <bb 5> :
  _2 = u32Options & 64;
  if (_2 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  FlexCAN_SetEntireFrameArbitrationFieldComparison (pBase, 1);
  goto <bb 8>; [INV]

  <bb 7> :
  FlexCAN_SetEntireFrameArbitrationFieldComparison (pBase, 0);

  <bb 8> :
  _3 = u32Options & 8;
  if (_3 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  FlexCAN_SetProtocolException (pBase, 1);
  goto <bb 11>; [INV]

  <bb 10> :
  FlexCAN_SetProtocolException (pBase, 0);

  <bb 11> :
  _4 = u32Options & 2;
  if (_4 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 12> :
  _5 = pBase->MCR;
  _6 = _5 & 2048;
  if (_6 == 0)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  FlexCAN_CanBitSampling (pBase, 1);
  goto <bb 15>; [INV]

  <bb 14> :
  FlexCAN_CanBitSampling (pBase, 0);

  <bb 15> :
  _7 = u32Options & 4;
  if (_7 != 0)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  FlexCAN_SetBusOffAutorecovery (pBase, 1);
  goto <bb 18>; [INV]

  <bb 17> :
  FlexCAN_SetBusOffAutorecovery (pBase, 0);

  <bb 18> :
  _8 = u32Options & 1;
  if (_8 != 0)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  FlexCAN_SetRemoteReqStore (pBase, 1);
  goto <bb 21>; [INV]

  <bb 20> :
  FlexCAN_SetRemoteReqStore (pBase, 0);

  <bb 21> :
  _9 = u32Options & 16;
  if (_9 != 0)
    goto <bb 22>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 22> :
  FlexCAN_SetEdgeFilter (pBase, 1);
  goto <bb 24>; [INV]

  <bb 23> :
  FlexCAN_SetEdgeFilter (pBase, 0);

  <bb 24> :
  return;

}


FlexCAN_SetEnhancedRxFifoFilter (struct FLEXCAN_Type * base, const struct Flexcan_Ip_EnhancedIdTableType * idFilterTable)
{
  volatile uint32 * FilterStdIDTable;
  volatile uint32 * FilterExtIDTable;
  uint32 Val;
  uint32 Val1;
  uint32 Val2;
  uint32 NumOfStdIDFilter;
  uint32 NumOfExtIDFilter;
  uint32 NumOfEnhancedFilter;
  uint32 n;
  uint32 j;
  uint32 i;

  <bb 2> :
  Val2 = 0;
  Val1 = 0;
  Val = 0;
  FilterExtIDTable = 0B;
  FilterStdIDTable = 0B;
  _1 = base->ERFCR;
  _2 = _1 >> 8;
  NumOfEnhancedFilter = _2 & 63;
  _3 = base->ERFCR;
  _4 = _3 >> 16;
  NumOfExtIDFilter = _4 & 127;
  _5 = NumOfEnhancedFilter - NumOfExtIDFilter;
  _6 = _5 + 1;
  NumOfStdIDFilter = _6 * 2;
  FilterExtIDTable = &base->ERFFEL[0];
  _7 = NumOfExtIDFilter * 2;
  FilterStdIDTable = &base->ERFFEL[_7];
  j = 0;
  n = 0;
  i = 0;
  goto <bb 25>; [INV]

  <bb 3> :
  _8 = i * 16;
  _9 = idFilterTable + _8;
  _10 = _9->isExtendedFrame;
  _11 = ~_10;
  if (_11 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 4> :
  Val = 0;
  _12 = i * 16;
  _13 = idFilterTable + _12;
  _14 = _13->rtr2;
  if (_14 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Val = 134217728;

  <bb 6> :
  _15 = i * 16;
  _16 = idFilterTable + _15;
  _17 = _16->rtr1;
  if (_17 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Val = Val | 2048;

  <bb 8> :
  _18 = i * 16;
  _19 = idFilterTable + _18;
  _20 = _19->id2;
  _21 = _20 << 16;
  _22 = _21 & 134152192;
  _23 = i * 16;
  _24 = idFilterTable + _23;
  _25 = _24->id1;
  _26 = _25 & 2047;
  _27 = _22 | _26;
  _28 = j * 4;
  _29 = FilterStdIDTable + _28;
  _30 = Val | _27;
  *_29 = _30;
  _31 = i * 16;
  _32 = idFilterTable + _31;
  _33 = _32->filterType;
  switch (_33) <default: <L9> [INV], case 0: <L6> [INV], case 1: <L7> [INV], case 2: <L8> [INV]>

  <bb 9> :
<L6>:
  _34 = j * 4;
  _35 = FilterStdIDTable + _34;
  _36 = j * 4;
  _37 = FilterStdIDTable + _36;
  _38 = *_35;
  *_37 = _38;
  goto <bb 13>; [INV]

  <bb 10> :
<L7>:
  _39 = j * 4;
  _40 = FilterStdIDTable + _39;
  _41 = *_40;
  _42 = j * 4;
  _43 = FilterStdIDTable + _42;
  _44 = _41 | 1073741824;
  *_43 = _44;
  goto <bb 13>; [INV]

  <bb 11> :
<L8>:
  _45 = j * 4;
  _46 = FilterStdIDTable + _45;
  _47 = *_46;
  _48 = j * 4;
  _49 = FilterStdIDTable + _48;
  _50 = _47 | 2147483648;
  *_49 = _50;
  goto <bb 13>; [INV]

  <bb 12> :
<L9>:
  DevAssert (0);

  <bb 13> :
  j = j + 1;
  goto <bb 24>; [INV]

  <bb 14> :
  Val2 = 0;
  Val1 = 0;
  _51 = i * 16;
  _52 = idFilterTable + _51;
  _53 = _52->rtr2;
  if (_53 != 0)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  Val2 = 536870912;

  <bb 16> :
  _54 = i * 16;
  _55 = idFilterTable + _54;
  _56 = _55->rtr1;
  if (_56 != 0)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 17> :
  Val1 = 536870912;

  <bb 18> :
  _57 = i * 16;
  _58 = idFilterTable + _57;
  _59 = _58->id2;
  _60 = _59 & 536870911;
  _61 = n * 4;
  _62 = FilterExtIDTable + _61;
  _63 = Val2 | _60;
  *_62 = _63;
  _64 = i * 16;
  _65 = idFilterTable + _64;
  _66 = _65->id1;
  _67 = _66 & 536870911;
  _68 = n + 1;
  _69 = _68 * 4;
  _70 = FilterExtIDTable + _69;
  _71 = Val1 | _67;
  *_70 = _71;
  _72 = i * 16;
  _73 = idFilterTable + _72;
  _74 = _73->filterType;
  switch (_74) <default: <L19> [INV], case 0: <L16> [INV], case 1: <L17> [INV], case 2: <L18> [INV]>

  <bb 19> :
<L16>:
  _75 = n * 4;
  _76 = FilterExtIDTable + _75;
  _77 = n * 4;
  _78 = FilterExtIDTable + _77;
  _79 = *_76;
  *_78 = _79;
  goto <bb 23>; [INV]

  <bb 20> :
<L17>:
  _80 = n * 4;
  _81 = FilterExtIDTable + _80;
  _82 = *_81;
  _83 = n * 4;
  _84 = FilterExtIDTable + _83;
  _85 = _82 | 1073741824;
  *_84 = _85;
  goto <bb 23>; [INV]

  <bb 21> :
<L18>:
  _86 = n * 4;
  _87 = FilterExtIDTable + _86;
  _88 = *_87;
  _89 = n * 4;
  _90 = FilterExtIDTable + _89;
  _91 = _88 | 2147483648;
  *_90 = _91;
  goto <bb 23>; [INV]

  <bb 22> :
<L19>:
  DevAssert (0);

  <bb 23> :
  n = n + 2;

  <bb 24> :
  i = i + 1;

  <bb 25> :
  _92 = NumOfExtIDFilter + NumOfStdIDFilter;
  if (i < _92)
    goto <bb 3>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 26> :
  return;

}


FlexCAN_EnableEnhancedRxFifo (struct FLEXCAN_Type * base, uint32 numOfStdIDFilters, uint32 numOfExtIDFilters, uint32 numOfWatermark)
{
  uint32 NumOfEnhancedFilters;
  Flexcan_Ip_StatusType Stat;
  Flexcan_Ip_StatusType D.10506;

  <bb 2> :
  Stat = 0;
  NumOfEnhancedFilters = 0;
  _1 = FlexCAN_IsEnhancedRxFifoAvailable (base);
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 3> :
  _2 = numOfStdIDFilters >> 1;
  _3 = numOfExtIDFilters + _2;
  NumOfEnhancedFilters = _3 + 4294967295;
  if (numOfStdIDFilters == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  if (numOfExtIDFilters == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Stat = 1;

  <bb 6> :
  _4 = numOfStdIDFilters & 1;
  if (_4 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Stat = 1;

  <bb 8> :
  _5 = base->MCR;
  _6 = _5 & 536870912;
  if (_6 == 536870912)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  Stat = 1;

  <bb 10> :
  if (Stat == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 11> :
  _7 = base->ERFCR;
  _8 = _7 | 2147483648;
  base->ERFCR = _8;
  _9 = base->ERFSR;
  _10 = _9 | 134217728;
  base->ERFSR = _10;
  _11 = base->ERFSR;
  _12 = _11 & 268435455;
  base->ERFSR = _12;
  _13 = base->ERFCR;
  _14 = _13 & 4294951167;
  _15 = NumOfEnhancedFilters << 8;
  _16 = _15 & 16128;
  _17 = _14 | _16;
  base->ERFCR = _17;
  _18 = base->ERFCR;
  _19 = _18 & 4286644223;
  _20 = numOfExtIDFilters << 16;
  _21 = _20 & 8323072;
  _22 = _19 | _21;
  base->ERFCR = _22;
  _23 = base->ERFCR;
  _24 = _23 & 4294967264;
  _25 = numOfWatermark & 31;
  _26 = _24 | _25;
  base->ERFCR = _26;
  goto <bb 13>; [INV]

  <bb 12> :
  Stat = 1;

  <bb 13> :
  D.10506 = Stat;

  <bb 14> :
<L13>:
  return D.10506;

}


FlexCAN_IsEnhancedRxFifoAvailable (const struct FLEXCAN_Type * base)
{
  boolean ReturnValue;
  static struct FLEXCAN_Type * const FlexcanBase[1] = {1076903936B};
  uint32 i;
  boolean D.10491;

  <bb 2> :
  i = 0;
  ReturnValue = 0;
  i = 0;
  goto <bb 6>; [INV]

  <bb 3> :
  _1 = FlexcanBase[i];
  if (base == _1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  ReturnValue = 1;
  goto <bb 7>; [INV]

  <bb 5> :
  i = i + 1;

  <bb 6> :
  if (i == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  D.10491 = ReturnValue;

  <bb 8> :
<L5>:
  return D.10491;

}


FlexCAN_IsMbOutOfRange (const struct FLEXCAN_Type * pBase, uint8 u8MbIndex, boolean bIsLegacyFifoEn, uint32 u32MaxMbNum)
{
  uint32 u32NumOfMbOccupiedByFiFo;
  uint32 u32NumOfFiFoElement;
  boolean ReturnValue;
  boolean D.10487;

  <bb 2> :
  ReturnValue = 0;
  u32NumOfFiFoElement = 0;
  u32NumOfMbOccupiedByFiFo = 0;
  _1 = (unsigned char) u32MaxMbNum;
  if (u8MbIndex >= _1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  ReturnValue = 1;
  goto <bb 8>; [INV]

  <bb 4> :
  if (bIsLegacyFifoEn != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _2 = pBase->CTRL2;
  _3 = _2 >> 24;
  u32NumOfFiFoElement = _3 & 15;
  _4 = u32NumOfFiFoElement + 1;
  _5 = _4 * 8;
  _6 = _5 / 4;
  u32NumOfMbOccupiedByFiFo = _6 + 5;
  _7 = (long unsigned int) u8MbIndex;
  if (u32NumOfMbOccupiedByFiFo >= _7)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  ReturnValue = 1;
  goto <bb 8>; [INV]

  <bb 7> :
  ReturnValue = 0;

  <bb 8> :
  D.10487 = ReturnValue;

  <bb 9> :
<L8>:
  return D.10487;

}


FlexCAN_ReadEnhancedRxFifo (const struct FLEXCAN_Type * base, struct Flexcan_Ip_MsgBuffType * rxFifo)
{
  uint8 can_real_payload;
  uint8 flexcan_mb_dlc_value;
  uint32 * MsgData_32;
  const uint32 * Flexcan_Mb_Data_32;
  const uint32 * Flexcan_Mb_Id;
  const uint32 * Flexcan_Mb;
  uint8 Idhit_Offset;
  uint32 MbWord;
  uint32 DataByte;
  uint8 iftmp.19;

  <bb 2> :
  base.18_1 = (long unsigned int) base;
  _2 = base.18_1 + 8192;
  Flexcan_Mb = (const uint32 *) _2;
  Flexcan_Mb_Id = Flexcan_Mb + 4;
  Flexcan_Mb_Data_32 = Flexcan_Mb + 8;
  MsgData_32 = 0B;
  _3 = *Flexcan_Mb;
  _4 = _3 >> 16;
  _5 = (unsigned char) _4;
  flexcan_mb_dlc_value = _5 & 15;
  can_real_payload = FlexCAN_ComputePayloadSize (flexcan_mb_dlc_value);
  _6 = rxFifo != 0B;
  DevAssert (_6);
  MsgData_32 = &rxFifo->data;
  rxFifo->dataLen = can_real_payload;
  _7 = *Flexcan_Mb;
  rxFifo->cs = _7;
  _8 = rxFifo->cs;
  _9 = _8 & 2097152;
  if (_9 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _10 = *Flexcan_Mb_Id;
  rxFifo->msgId = _10;
  goto <bb 5>; [INV]

  <bb 4> :
  _11 = *Flexcan_Mb_Id;
  _12 = _11 >> 18;
  rxFifo->msgId = _12;

  <bb 5> :
  _13 = rxFifo->cs;
  _14 = _13 & 1048576;
  if (_14 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  can_real_payload = 0;

  <bb 7> :
  _15 = can_real_payload >> 2;
  _16 = can_real_payload & 3;
  if (_16 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  iftmp.19 = 1;
  goto <bb 10>; [INV]

  <bb 9> :
  iftmp.19 = 0;

  <bb 10> :
  Idhit_Offset = iftmp.19 + _15;
  _17 = (unsigned int) Idhit_Offset;
  _18 = _17 * 4;
  _19 = Flexcan_Mb_Data_32 + _18;
  _20 = *_19;
  _21 = (unsigned char) _20;
  _22 = _21 & 127;
  rxFifo->id_hit = _22;
  _23 = rxFifo->cs;
  _24 = _23 & 65535;
  rxFifo->time_stamp = _24;
  DataByte = 0;
  goto <bb 12>; [INV]

  <bb 11> :
  _25 = DataByte >> 2;
  _26 = _25 * 4;
  _27 = Flexcan_Mb_Data_32 + _26;
  MbWord = *_27;
  _28 = MbWord >> 24;
  _29 = MbWord >> 8;
  _30 = _29 & 65280;
  _31 = _28 | _30;
  _32 = MbWord << 8;
  _33 = _32 & 16711680;
  _34 = _31 | _33;
  _35 = MbWord << 24;
  _36 = DataByte >> 2;
  _37 = _36 * 4;
  _38 = MsgData_32 + _37;
  _39 = _34 | _35;
  *_38 = _39;
  DataByte = DataByte + 4;

  <bb 12> :
  _40 = (long unsigned int) can_real_payload;
  if (DataByte < _40)
    goto <bb 11>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  return;

}


FlexCAN_ReadRxFifo (const struct FLEXCAN_Type * base, struct Flexcan_Ip_MsgBuffType * rxFifo)
{
  uint8 can_real_payload;
  uint8 flexcan_mb_dlc_value;
  uint32 * msgData_32;
  const uint32 * flexcan_mb_data_32;
  const uint32 * flexcan_mb_id;
  const uint32 * flexcan_mb;
  uint32 MbWord;
  uint32 DataByte;

  <bb 2> :
  base.17_1 = (long unsigned int) base;
  _2 = base.17_1 + 128;
  flexcan_mb = (const uint32 *) _2;
  flexcan_mb_id = flexcan_mb + 4;
  flexcan_mb_data_32 = flexcan_mb + 8;
  msgData_32 = &rxFifo->data;
  _3 = *flexcan_mb;
  _4 = _3 >> 16;
  _5 = (unsigned char) _4;
  flexcan_mb_dlc_value = _5 & 15;
  can_real_payload = FlexCAN_ComputePayloadSize (flexcan_mb_dlc_value);
  _6 = rxFifo != 0B;
  DevAssert (_6);
  if (can_real_payload > 8)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  can_real_payload = 8;

  <bb 4> :
  rxFifo->dataLen = can_real_payload;
  _7 = *flexcan_mb;
  rxFifo->cs = _7;
  _8 = rxFifo->cs;
  _9 = _8 & 2097152;
  if (_9 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _10 = *flexcan_mb_id;
  rxFifo->msgId = _10;
  goto <bb 7>; [INV]

  <bb 6> :
  _11 = *flexcan_mb_id;
  _12 = _11 >> 18;
  rxFifo->msgId = _12;

  <bb 7> :
  _13 = base->RXFIR;
  _14 = (unsigned char) _13;
  rxFifo->id_hit = _14;
  _15 = rxFifo->cs;
  _16 = _15 & 65535;
  rxFifo->time_stamp = _16;
  DataByte = 0;
  goto <bb 9>; [INV]

  <bb 8> :
  _17 = DataByte >> 2;
  _18 = _17 * 4;
  _19 = flexcan_mb_data_32 + _18;
  MbWord = *_19;
  _20 = MbWord >> 24;
  _21 = MbWord >> 8;
  _22 = _21 & 65280;
  _23 = _20 | _22;
  _24 = MbWord << 8;
  _25 = _24 & 16711680;
  _26 = _23 | _25;
  _27 = MbWord << 24;
  _28 = DataByte >> 2;
  _29 = _28 * 4;
  _30 = msgData_32 + _29;
  _31 = _26 | _27;
  *_30 = _31;
  DataByte = DataByte + 4;

  <bb 9> :
  _32 = (long unsigned int) can_real_payload;
  if (DataByte < _32)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  return;

}


FlexCAN_SetRxFifoFilter (struct FLEXCAN_Type * base, Flexcan_Ip_RxFifoIdElementFormatType idFormat, const struct Flexcan_Ip_IdTableType * idFilterTable)
{
  volatile uint32 * FilterTable;
  uint32 Val;
  uint32 Val2;
  uint32 Val1;
  uint32 NumOfFilters;
  uint32 j;
  uint32 i;
  int iftmp.16;

  <bb 2> :
  Val1 = 0;
  Val2 = 0;
  Val = 0;
  base.15_1 = (long unsigned int) base;
  _2 = base.15_1 + 224;
  FilterTable = (volatile uint32 *) _2;
  if (idFilterTable != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  if (idFormat == 3)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  iftmp.16 = 1;
  goto <bb 6>; [INV]

  <bb 5> :
  iftmp.16 = 0;

  <bb 6> :
  _3 = (_Bool) iftmp.16;
  DevAssert (_3);
  _4 = base->CTRL2;
  _5 = _4 >> 24;
  NumOfFilters = _5 & 15;
  switch (idFormat) <default: <L44> [INV], case 0: <L4> [INV], case 1: <L13> [INV], case 2: <L27> [INV], case 3: <L43> [INV]>

  <bb 7> :
<L4>:
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_13 ();
  _6 = base->MCR;
  _7 = _6 & 4294966527;
  base->MCR = _7;
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_13 ();
  i = 0;
  goto <bb 14>; [INV]

  <bb 8> :
  Val = 0;
  _8 = i * 8;
  _9 = idFilterTable + _8;
  _10 = _9->isRemoteFrame;
  if (_10 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  Val = 2147483648;

  <bb 10> :
  _11 = i * 8;
  _12 = idFilterTable + _11;
  _13 = _12->isExtendedFrame;
  if (_13 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  Val = Val | 1073741824;
  _14 = i * 8;
  _15 = idFilterTable + _14;
  _16 = _15->id;
  _17 = _16 << 1;
  _18 = _17 & 1073741823;
  _19 = i * 4;
  _20 = FilterTable + _19;
  _21 = Val + _18;
  *_20 = _21;
  goto <bb 13>; [INV]

  <bb 12> :
  _22 = i * 8;
  _23 = idFilterTable + _22;
  _24 = _23->id;
  _25 = _24 << 19;
  _26 = _25 & 1073217536;
  _27 = i * 4;
  _28 = FilterTable + _27;
  _29 = Val + _26;
  *_28 = _29;

  <bb 13> :
  i = i + 1;

  <bb 14> :
  _30 = NumOfFilters + 1;
  _31 = _30 * 8;
  if (i < _31)
    goto <bb 8>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 15> :
  goto <bb 48>; [INV]

  <bb 16> :
<L13>:
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_13 ();
  _32 = base->MCR;
  _33 = _32 & 4294966527;
  _34 = _33 | 256;
  base->MCR = _34;
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_13 ();
  j = 0;
  i = 0;
  goto <bb 28>; [INV]

  <bb 17> :
  Val1 = 0;
  Val2 = 0;
  _35 = j * 8;
  _36 = idFilterTable + _35;
  _37 = _36->isRemoteFrame;
  if (_37 != 0)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  Val1 = 2147483648;

  <bb 19> :
  _38 = j + 1;
  _39 = _38 * 8;
  _40 = idFilterTable + _39;
  _41 = _40->isRemoteFrame;
  if (_41 != 0)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  Val2 = 32768;

  <bb 21> :
  _42 = j * 8;
  _43 = idFilterTable + _42;
  _44 = _43->isExtendedFrame;
  if (_44 != 0)
    goto <bb 22>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 22> :
  Val1 = Val1 | 1073741824;
  _45 = j * 8;
  _46 = idFilterTable + _45;
  _47 = _46->id;
  _48 = _47 >> 15;
  _49 = _48 << 16;
  _50 = _49 & 1073676288;
  _51 = i * 4;
  _52 = FilterTable + _51;
  _53 = Val1 + _50;
  *_52 = _53;
  goto <bb 24>; [INV]

  <bb 23> :
  _54 = j * 8;
  _55 = idFilterTable + _54;
  _56 = _55->id;
  _57 = _56 << 19;
  _58 = _57 & 1073217536;
  _59 = i * 4;
  _60 = FilterTable + _59;
  _61 = Val1 + _58;
  *_60 = _61;

  <bb 24> :
  _62 = j + 1;
  _63 = _62 * 8;
  _64 = idFilterTable + _63;
  _65 = _64->isExtendedFrame;
  if (_65 != 0)
    goto <bb 25>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 25> :
  Val2 = Val2 | 16384;
  _66 = i * 4;
  _67 = FilterTable + _66;
  _68 = *_67;
  _69 = j + 1;
  _70 = _69 * 8;
  _71 = idFilterTable + _70;
  _72 = _71->id;
  _73 = _72 >> 15;
  _74 = _73 & 16383;
  _75 = Val2 + _74;
  _76 = i * 4;
  _77 = FilterTable + _76;
  _78 = _68 | _75;
  *_77 = _78;
  goto <bb 27>; [INV]

  <bb 26> :
  _79 = i * 4;
  _80 = FilterTable + _79;
  _81 = *_80;
  _82 = j + 1;
  _83 = _82 * 8;
  _84 = idFilterTable + _83;
  _85 = _84->id;
  _86 = _85 << 3;
  _87 = _86 & 16376;
  _88 = Val2 + _87;
  _89 = i * 4;
  _90 = FilterTable + _89;
  _91 = _81 | _88;
  *_90 = _91;

  <bb 27> :
  j = j + 2;
  i = i + 1;

  <bb 28> :
  _92 = NumOfFilters + 1;
  _93 = _92 * 8;
  if (i < _93)
    goto <bb 17>; [INV]
  else
    goto <bb 29>; [INV]

  <bb 29> :
  goto <bb 48>; [INV]

  <bb 30> :
<L27>:
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_13 ();
  _94 = base->MCR;
  _95 = _94 & 4294966527;
  _96 = _95 | 512;
  base->MCR = _96;
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_13 ();
  j = 0;
  i = 0;
  goto <bb 44>; [INV]

  <bb 31> :
  _97 = j * 8;
  _98 = idFilterTable + _97;
  _99 = _98->isExtendedFrame;
  if (_99 != 0)
    goto <bb 32>; [INV]
  else
    goto <bb 33>; [INV]

  <bb 32> :
  _100 = j * 8;
  _101 = idFilterTable + _100;
  _102 = _101->id;
  _103 = _102 >> 21;
  _104 = _103 << 24;
  _105 = i * 4;
  _106 = FilterTable + _105;
  _107 = Val1 + _104;
  *_106 = _107;
  goto <bb 34>; [INV]

  <bb 33> :
  _108 = j * 8;
  _109 = idFilterTable + _108;
  _110 = _109->id;
  _111 = _110 >> 3;
  _112 = _111 << 24;
  _113 = i * 4;
  _114 = FilterTable + _113;
  _115 = Val1 + _112;
  *_114 = _115;

  <bb 34> :
  _116 = j + 1;
  _117 = _116 * 8;
  _118 = idFilterTable + _117;
  _119 = _118->isExtendedFrame;
  if (_119 != 0)
    goto <bb 35>; [INV]
  else
    goto <bb 36>; [INV]

  <bb 35> :
  _120 = i * 4;
  _121 = FilterTable + _120;
  _122 = *_121;
  _123 = j + 1;
  _124 = _123 * 8;
  _125 = idFilterTable + _124;
  _126 = _125->id;
  _127 = _126 >> 21;
  _128 = _127 << 16;
  _129 = _128 & 16711680;
  _130 = Val1 + _129;
  _131 = i * 4;
  _132 = FilterTable + _131;
  _133 = _122 | _130;
  *_132 = _133;
  goto <bb 37>; [INV]

  <bb 36> :
  _134 = i * 4;
  _135 = FilterTable + _134;
  _136 = *_135;
  _137 = j + 1;
  _138 = _137 * 8;
  _139 = idFilterTable + _138;
  _140 = _139->id;
  _141 = _140 >> 3;
  _142 = _141 << 16;
  _143 = _142 & 16711680;
  _144 = Val1 + _143;
  _145 = i * 4;
  _146 = FilterTable + _145;
  _147 = _136 | _144;
  *_146 = _147;

  <bb 37> :
  _148 = j + 2;
  _149 = _148 * 8;
  _150 = idFilterTable + _149;
  _151 = _150->isExtendedFrame;
  if (_151 != 0)
    goto <bb 38>; [INV]
  else
    goto <bb 39>; [INV]

  <bb 38> :
  _152 = i * 4;
  _153 = FilterTable + _152;
  _154 = *_153;
  _155 = j + 2;
  _156 = _155 * 8;
  _157 = idFilterTable + _156;
  _158 = _157->id;
  _159 = _158 >> 21;
  _160 = _159 << 8;
  _161 = _160 & 65535;
  _162 = Val1 + _161;
  _163 = i * 4;
  _164 = FilterTable + _163;
  _165 = _154 | _162;
  *_164 = _165;
  goto <bb 40>; [INV]

  <bb 39> :
  _166 = i * 4;
  _167 = FilterTable + _166;
  _168 = *_167;
  _169 = j + 2;
  _170 = _169 * 8;
  _171 = idFilterTable + _170;
  _172 = _171->id;
  _173 = _172 >> 3;
  _174 = _173 << 8;
  _175 = _174 & 65535;
  _176 = Val1 + _175;
  _177 = i * 4;
  _178 = FilterTable + _177;
  _179 = _168 | _176;
  *_178 = _179;

  <bb 40> :
  _180 = j + 3;
  _181 = _180 * 8;
  _182 = idFilterTable + _181;
  _183 = _182->isExtendedFrame;
  if (_183 != 0)
    goto <bb 41>; [INV]
  else
    goto <bb 42>; [INV]

  <bb 41> :
  _184 = i * 4;
  _185 = FilterTable + _184;
  _186 = *_185;
  _187 = j + 3;
  _188 = _187 * 8;
  _189 = idFilterTable + _188;
  _190 = _189->id;
  _191 = _190 >> 21;
  _192 = _191 & 255;
  _193 = Val1 + _192;
  _194 = i * 4;
  _195 = FilterTable + _194;
  _196 = _186 | _193;
  *_195 = _196;
  goto <bb 43>; [INV]

  <bb 42> :
  _197 = i * 4;
  _198 = FilterTable + _197;
  _199 = *_198;
  _200 = j + 3;
  _201 = _200 * 8;
  _202 = idFilterTable + _201;
  _203 = _202->id;
  _204 = _203 >> 3;
  _205 = _204 & 255;
  _206 = Val1 + _205;
  _207 = i * 4;
  _208 = FilterTable + _207;
  _209 = _199 | _206;
  *_208 = _209;

  <bb 43> :
  j = j + 4;
  i = i + 1;

  <bb 44> :
  _210 = NumOfFilters + 1;
  _211 = _210 * 8;
  if (i < _211)
    goto <bb 31>; [INV]
  else
    goto <bb 45>; [INV]

  <bb 45> :
  goto <bb 48>; [INV]

  <bb 46> :
<L43>:
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_13 ();
  _212 = base->MCR;
  _213 = _212 | 768;
  base->MCR = _213;
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_13 ();
  goto <bb 48>; [INV]

  <bb 47> :
<L44>:

  <bb 48> :
  return;

}


FlexCAN_SetOperationMode (struct FLEXCAN_Type * base, Flexcan_Ip_ModesType mode)
{
  <bb 2> :
  switch (mode) <default: <L3> [INV], case 0: <L0> [INV], case 1: <L1> [INV], case 2: <L2> [INV]>

  <bb 3> :
<L0>:
  _1 = base->CTRL1;
  _2 = _1 & 4294967287;
  base->CTRL1 = _2;
  _3 = base->CTRL1;
  _4 = _3 & 4294963199;
  base->CTRL1 = _4;
  goto <bb 7>; [INV]

  <bb 4> :
<L1>:
  _5 = base->CTRL1;
  _6 = _5 | 8;
  base->CTRL1 = _6;
  goto <bb 7>; [INV]

  <bb 5> :
<L2>:
  _7 = base->CTRL1;
  _8 = _7 | 4096;
  base->CTRL1 = _8;
  _9 = base->CTRL1;
  _10 = _9 & 4294967287;
  base->CTRL1 = _10;
  FlexCAN_SetSelfReception (base, 1);
  goto <bb 7>; [INV]

  <bb 6> :
<L3>:

  <bb 7> :
  return;

}


FlexCAN_SetMaxMsgBuffNum (struct FLEXCAN_Type * base, uint32 maxMsgBuffNum)
{
  Flexcan_Ip_StatusType Status;
  uint32 ValEndRam;
  uint32 ValEndMb;
  uint8 Can_Real_Payload;
  uint8 Arbitration_Field_Size;
  volatile uint8 * Flexcan_Mb_Data;
  volatile uint32 * Flexcan_Mb_Id;
  volatile uint32 * Flexcan_Mb;
  const uint32 * ValEndMbPointer;
  const uint32 * RAM;
  uint32 DataByte;
  uint8 MsgBuffIdx;
  Flexcan_Ip_StatusType D.10427;

  <bb 2> :
  base.11_1 = (long unsigned int) base;
  _2 = base.11_1 + 128;
  RAM = (const uint32 *) _2;
  ValEndMbPointer = 0B;
  Flexcan_Mb = 0B;
  Flexcan_Mb_Id = 0B;
  Flexcan_Mb_Data = 0B;
  Arbitration_Field_Size = 8;
  _3 = maxMsgBuffNum + 4294967295;
  Can_Real_Payload = FlexCAN_GetMbPayloadSize (base, _3);
  ValEndMb = 0;
  ValEndRam = 0;
  Status = 0;
  _4 = maxMsgBuffNum != 0;
  DevAssert (_4);
  _5 = maxMsgBuffNum + 4294967295;
  ValEndMbPointer = FlexCAN_GetMsgBuffRegion (base, _5);
  _6 = (long unsigned int) Can_Real_Payload;
  ValEndMbPointer.12_7 = (long unsigned int) ValEndMbPointer;
  _8 = _6 + ValEndMbPointer.12_7;
  _9 = (long unsigned int) Arbitration_Field_Size;
  ValEndMb = _8 + _9;
  _10 = FlexCAN_GetMaxMbNum (base);
  _11 = _10 * 16;
  _12 = RAM + _11;
  ValEndRam = (uint32) _12;
  if (ValEndMb > ValEndRam)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  _13 = FlexCAN_GetMaxMbNum (base);
  if (maxMsgBuffNum > _13)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Status = 4;

  <bb 5> :
  if (Status == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 6> :
  _14 = base->MCR;
  _15 = _14 & 4294967168;
  _16 = maxMsgBuffNum + 4294967295;
  _17 = _16 & 127;
  _18 = _15 | _17;
  base->MCR = _18;
  _19 = base->MCR;
  _20 = _19 & 536870912;
  if (_20 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 7> :
  MsgBuffIdx = 0;
  goto <bb 12>; [INV]

  <bb 8> :
  _21 = (long unsigned int) MsgBuffIdx;
  Flexcan_Mb = FlexCAN_GetMsgBuffRegion (base, _21);
  Flexcan_Mb_Id = Flexcan_Mb + 4;
  Flexcan_Mb_Data = Flexcan_Mb + 8;
  *Flexcan_Mb = 0;
  *Flexcan_Mb_Id = 0;
  _22 = (long unsigned int) MsgBuffIdx;
  Can_Real_Payload = FlexCAN_GetMbPayloadSize (base, _22);
  DataByte = 0;
  goto <bb 10>; [INV]

  <bb 9> :
  _23 = Flexcan_Mb_Data + DataByte;
  *_23 = 0;
  DataByte = DataByte + 1;

  <bb 10> :
  _24 = (long unsigned int) Can_Real_Payload;
  if (DataByte < _24)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  MsgBuffIdx.13_25 = MsgBuffIdx;
  MsgBuffIdx = MsgBuffIdx.13_25 + 1;

  <bb 12> :
  _26 = (long unsigned int) MsgBuffIdx;
  if (maxMsgBuffNum > _26)
    goto <bb 8>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  D.10427 = Status;

  <bb 14> :
<L13>:
  return D.10427;

}


FlexCAN_SetTxMsgBuff (volatile uint32 * const pMbAddr, const struct Flexcan_Ip_MsbuffCodeStatusType * cs, uint32 msgId, const uint8 * msgData, const boolean isRemote)
{
  const uint32 * MsgData_32;
  volatile uint32 * Flexcan_Mb_Data_32;
  volatile uint8 * Flexcan_Mb_Data;
  volatile uint32 * Flexcan_Mb_Id;
  volatile uint32 * Flexcan_Mb;
  uint8 Payload_Size;
  uint8 Dlc_Value;
  uint32 DataByte;
  uint32 Flexcan_Mb_Config;

  <bb 2> :
  Flexcan_Mb_Config = 0;
  Flexcan_Mb = pMbAddr;
  Flexcan_Mb_Id = Flexcan_Mb + 4;
  Flexcan_Mb_Data = Flexcan_Mb + 8;
  Flexcan_Mb_Data_32 = Flexcan_Mb + 8;
  MsgData_32 = msgData;
  _1 = cs != 0B;
  DevAssert (_1);
  *Flexcan_Mb = 134217728;
  *Flexcan_Mb_Id = 0;
  _2 = cs->dataLen;
  _3 = (unsigned char) _2;
  Dlc_Value = FlexCAN_ComputeDLCValue (_3);
  if (msgData != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 3> :
  DataByte = 0;
  goto <bb 5>; [INV]

  <bb 4> :
  _4 = DataByte >> 2;
  _5 = _4 * 4;
  _6 = MsgData_32 + _5;
  _7 = *_6;
  _8 = _7 >> 24;
  _9 = DataByte >> 2;
  _10 = _9 * 4;
  _11 = MsgData_32 + _10;
  _12 = *_11;
  _13 = _12 >> 8;
  _14 = _13 & 65280;
  _15 = _8 | _14;
  _16 = DataByte >> 2;
  _17 = _16 * 4;
  _18 = MsgData_32 + _17;
  _19 = *_18;
  _20 = _19 << 8;
  _21 = _20 & 16711680;
  _22 = _15 | _21;
  _23 = DataByte >> 2;
  _24 = _23 * 4;
  _25 = MsgData_32 + _24;
  _26 = *_25;
  _27 = _26 << 24;
  _28 = DataByte >> 2;
  _29 = _28 * 4;
  _30 = Flexcan_Mb_Data_32 + _29;
  _31 = _22 | _27;
  *_30 = _31;
  DataByte = DataByte + 4;

  <bb 5> :
  _32 = cs->dataLen;
  _33 = _32 & 4294967292;
  if (DataByte < _33)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  goto <bb 8>; [INV]

  <bb 7> :
  _34 = msgData + DataByte;
  _35 = DataByte ^ 3;
  _36 = Flexcan_Mb_Data + _35;
  _37 = *_34;
  *_36 = _37;
  DataByte = DataByte + 1;

  <bb 8> :
  _38 = cs->dataLen;
  if (DataByte < _38)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  Payload_Size = FlexCAN_ComputePayloadSize (Dlc_Value);
  DataByte = cs->dataLen;
  goto <bb 11>; [INV]

  <bb 10> :
  _39 = DataByte ^ 3;
  _40 = Flexcan_Mb_Data + _39;
  _41 = cs->fd_padding;
  *_40 = _41;
  DataByte = DataByte + 1;

  <bb 11> :
  _42 = (long unsigned int) Payload_Size;
  if (DataByte < _42)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  _43 = cs->msgIdType;
  if (_43 == 1)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  _44 = *Flexcan_Mb_Id;
  _45 = _44 & 3758096384;
  *Flexcan_Mb_Id = _45;
  _46 = *Flexcan_Mb_Id;
  _47 = msgId & 536870911;
  _48 = _46 | _47;
  *Flexcan_Mb_Id = _48;
  Flexcan_Mb_Config = Flexcan_Mb_Config | 6291456;

  <bb 14> :
  _49 = cs->msgIdType;
  if (_49 == 0)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  _50 = *Flexcan_Mb_Id;
  _51 = _50 & 3758358527;
  *Flexcan_Mb_Id = _51;
  _52 = *Flexcan_Mb_Id;
  _53 = msgId << 18;
  _54 = _53 & 536608768;
  _55 = _52 | _54;
  *Flexcan_Mb_Id = _55;
  Flexcan_Mb_Config = Flexcan_Mb_Config & 4288675839;

  <bb 16> :
  Flexcan_Mb_Config = Flexcan_Mb_Config & 4293984255;
  _56 = (long unsigned int) Dlc_Value;
  _57 = _56 << 16;
  _58 = _57 & 983040;
  Flexcan_Mb_Config = Flexcan_Mb_Config | _58;
  _59 = cs->code;
  if (_59 != 15)
    goto <bb 17>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 17> :
  _60 = cs->code;
  if (_60 == 28)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  Flexcan_Mb_Config = Flexcan_Mb_Config | 1048576;
  goto <bb 21>; [INV]

  <bb 19> :
  if (isRemote != 0)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 20> :
  Flexcan_Mb_Config = Flexcan_Mb_Config | 1048576;

  <bb 21> :
  Flexcan_Mb_Config = Flexcan_Mb_Config & 4043309055;
  _61 = cs->fd_enable;
  if (_61 != 0)
    goto <bb 22>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 22> :
  _62 = cs->code;
  _63 = _62 << 24;
  _64 = _63 & 251658240;
  _65 = Flexcan_Mb_Config | _64;
  Flexcan_Mb_Config = _65 | 2147483648;
  Flexcan_Mb_Config = Flexcan_Mb_Config & 4293918719;
  goto <bb 24>; [INV]

  <bb 23> :
  _66 = cs->code;
  _67 = _66 << 24;
  _68 = _67 & 251658240;
  Flexcan_Mb_Config = Flexcan_Mb_Config | _68;

  <bb 24> :
  _69 = cs->enable_brs;
  if (_69 != 0)
    goto <bb 25>; [INV]
  else
    goto <bb 26>; [INV]

  <bb 25> :
  Flexcan_Mb_Config = Flexcan_Mb_Config | 1073741824;

  <bb 26> :
  _70 = *Flexcan_Mb;
  _71 = Flexcan_Mb_Config | _70;
  *Flexcan_Mb = _71;

  <bb 27> :
  return;

}


FlexCAN_GetMsgBuff (const struct FLEXCAN_Type * base, uint32 msgBuffIdx, struct Flexcan_Ip_MsgBuffType * msgBuff)
{
  uint8 Payload_Size;
  uint8 Flexcan_Mb_Dlc_Value;
  uint32 MbWord;
  uint32 * MsgBuff_Data_32;
  const uint32 * Flexcan_Mb_Data_32;
  const uint8 * Flexcan_Mb_Data;
  const uint32 * Flexcan_Mb_Id;
  const uint32 * Flexcan_Mb;
  uint8 i;

  <bb 2> :
  Flexcan_Mb = FlexCAN_GetMsgBuffRegion (base, msgBuffIdx);
  Flexcan_Mb_Id = Flexcan_Mb + 4;
  Flexcan_Mb_Data = Flexcan_Mb + 8;
  Flexcan_Mb_Data_32 = Flexcan_Mb + 8;
  MsgBuff_Data_32 = &msgBuff->data;
  _1 = *Flexcan_Mb;
  _2 = _1 >> 16;
  _3 = (unsigned char) _2;
  Flexcan_Mb_Dlc_Value = _3 & 15;
  Payload_Size = FlexCAN_ComputePayloadSize (Flexcan_Mb_Dlc_Value);
  _4 = msgBuff != 0B;
  DevAssert (_4);
  _5 = FlexCAN_GetMbPayloadSize (base, msgBuffIdx);
  if (Payload_Size > _5)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Payload_Size = FlexCAN_GetMbPayloadSize (base, msgBuffIdx);

  <bb 4> :
  msgBuff->dataLen = Payload_Size;
  _6 = *Flexcan_Mb;
  msgBuff->cs = _6;
  _7 = msgBuff->cs;
  _8 = _7 & 2097152;
  if (_8 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _9 = *Flexcan_Mb_Id;
  msgBuff->msgId = _9;
  goto <bb 7>; [INV]

  <bb 6> :
  _10 = *Flexcan_Mb_Id;
  _11 = _10 >> 18;
  msgBuff->msgId = _11;

  <bb 7> :
  _12 = msgBuff->cs;
  _13 = _12 & 65535;
  msgBuff->time_stamp = _13;
  i = 0;
  goto <bb 9>; [INV]

  <bb 8> :
  _14 = i >> 2;
  _15 = (unsigned int) _14;
  _16 = _15 * 4;
  _17 = Flexcan_Mb_Data_32 + _16;
  MbWord = *_17;
  _18 = MbWord >> 24;
  _19 = MbWord >> 8;
  _20 = _19 & 65280;
  _21 = _18 | _20;
  _22 = MbWord << 8;
  _23 = _22 & 16711680;
  _24 = _21 | _23;
  _25 = MbWord << 24;
  _26 = i >> 2;
  _27 = (unsigned int) _26;
  _28 = _27 * 4;
  _29 = MsgBuff_Data_32 + _28;
  _30 = _24 | _25;
  *_29 = _30;
  i = i + 4;

  <bb 9> :
  _31 = (unsigned int) i;
  _32 = (unsigned int) Payload_Size;
  _33 = _32 & 4294967292;
  if (_31 < _33)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  goto <bb 12>; [INV]

  <bb 11> :
  _34 = i ^ 3;
  _35 = (sizetype) _34;
  _36 = Flexcan_Mb_Data + _35;
  _37 = (int) i;
  _38 = *_36;
  msgBuff->data[_37] = _38;
  i.10_39 = i;
  i = i.10_39 + 1;

  <bb 12> :
  if (i < Payload_Size)
    goto <bb 11>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  return;

}


FlexCAN_GetMsgBuffTimestamp (const struct FLEXCAN_Type * base, uint32 msgBuffIdx)
{
  const uint32 * Flexcan_Mb;
  uint32 TimeStamp;
  uint32 D.10395;

  <bb 2> :
  TimeStamp = 0;
  Flexcan_Mb = FlexCAN_GetMsgBuffRegion (base, msgBuffIdx);
  _1 = *Flexcan_Mb;
  TimeStamp = _1 & 65535;
  D.10395 = TimeStamp;

  <bb 3> :
<L0>:
  return D.10395;

}


FlexCAN_SetRxMsgBuff (const struct FLEXCAN_Type * base, uint32 msgBuffIdx, const struct Flexcan_Ip_MsbuffCodeStatusType * cs, uint32 msgId)
{
  volatile uint32 * flexcan_mb_id;
  volatile uint32 * flexcan_mb;

  <bb 2> :
  flexcan_mb = FlexCAN_GetMsgBuffRegion (base, msgBuffIdx);
  flexcan_mb_id = flexcan_mb + 4;
  _1 = cs != 0B;
  DevAssert (_1);
  *flexcan_mb = 0;
  *flexcan_mb_id = 0;
  _2 = cs->msgIdType;
  if (_2 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _3 = *flexcan_mb;
  _4 = _3 | 2097152;
  *flexcan_mb = _4;
  _5 = *flexcan_mb;
  _6 = _5 & 4290772991;
  *flexcan_mb = _6;
  _7 = *flexcan_mb_id;
  _8 = _7 & 3758096384;
  *flexcan_mb_id = _8;
  _9 = *flexcan_mb_id;
  _10 = msgId & 536870911;
  _11 = _9 | _10;
  *flexcan_mb_id = _11;

  <bb 4> :
  _12 = cs->msgIdType;
  if (_12 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _13 = *flexcan_mb;
  _14 = _13 & 4288675839;
  *flexcan_mb = _14;
  _15 = *flexcan_mb_id;
  _16 = _15 & 3758358527;
  *flexcan_mb_id = _16;
  _17 = *flexcan_mb_id;
  _18 = msgId << 18;
  _19 = _18 & 536608768;
  _20 = _17 | _19;
  *flexcan_mb_id = _20;

  <bb 6> :
  _21 = cs->code;
  if (_21 != 15)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _22 = *flexcan_mb;
  _23 = _22 & 4043309055;
  *flexcan_mb = _23;
  _24 = *flexcan_mb;
  _25 = cs->code;
  _26 = _25 << 24;
  _27 = _26 & 251658240;
  _28 = _24 | _27;
  *flexcan_mb = _28;

  <bb 8> :
  return;

}


FlexCAN_EnableInterrupts (struct FLEXCAN_Type * pBase, uint8 u8Instance)
{
  uint32 u32MaxMbCrtlNum;

  <bb 2> :
  u32MaxMbCrtlNum = FlexCAN_GetMaxMbNum (pBase);
  _1 = (int) u8Instance;
  _2 = FlexCAN_Ip_au32ImaskBuff[_1][0];
  pBase->IMASK1 = _2;
  if (u32MaxMbCrtlNum > 32)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _3 = (int) u8Instance;
  _4 = FlexCAN_Ip_au32ImaskBuff[_3][1];
  pBase->IMASK2 = _4;

  <bb 4> :
  if (u32MaxMbCrtlNum > 64)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _5 = (int) u8Instance;
  _6 = FlexCAN_Ip_au32ImaskBuff[_5][2];
  pBase->IMASK3 = _6;

  <bb 6> :
  return;

}


FlexCAN_DisableInterrupts (struct FLEXCAN_Type * pBase)
{
  uint32 u32MaxMbCrtlNum;

  <bb 2> :
  u32MaxMbCrtlNum = FlexCAN_GetMaxMbNum (pBase);
  pBase->IMASK1 = 0;
  if (u32MaxMbCrtlNum > 32)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  pBase->IMASK2 = 0;

  <bb 4> :
  if (u32MaxMbCrtlNum > 64)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  pBase->IMASK3 = 0;

  <bb 6> :
  return;

}


FLEXCAN_ClearMsgBuffIntCmd (struct FLEXCAN_Type * pBase, uint8 u8Instance, uint32 mb_idx, boolean bIsIntActive)
{
  uint32 temp;

  <bb 2> :
  _1 = mb_idx & 31;
  temp = 1 << _1;
  if (mb_idx <= 31)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_11 ();
  _2 = pBase->IMASK1;
  _3 = ~temp;
  _4 = (int) u8Instance;
  _5 = _2 & _3;
  FlexCAN_Ip_au32ImaskBuff[_4][0] = _5;
  if (bIsIntActive != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _6 = (int) u8Instance;
  _7 = FlexCAN_Ip_au32ImaskBuff[_6][0];
  pBase->IMASK1 = _7;

  <bb 5> :
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_11 ();

  <bb 6> :
  if (mb_idx > 31)
    goto <bb 7>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 7> :
  if (mb_idx <= 63)
    goto <bb 8>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 8> :
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_11 ();
  _8 = pBase->IMASK2;
  _9 = ~temp;
  _10 = (int) u8Instance;
  _11 = _8 & _9;
  FlexCAN_Ip_au32ImaskBuff[_10][1] = _11;
  if (bIsIntActive != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  _12 = (int) u8Instance;
  _13 = FlexCAN_Ip_au32ImaskBuff[_12][1];
  pBase->IMASK2 = _13;

  <bb 10> :
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_11 ();

  <bb 11> :
  if (mb_idx > 63)
    goto <bb 12>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 12> :
  if (mb_idx <= 95)
    goto <bb 13>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 13> :
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_11 ();
  _14 = pBase->IMASK3;
  _15 = ~temp;
  _16 = (int) u8Instance;
  _17 = _14 & _15;
  FlexCAN_Ip_au32ImaskBuff[_16][2] = _17;
  if (bIsIntActive != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  _18 = (int) u8Instance;
  _19 = FlexCAN_Ip_au32ImaskBuff[_18][2];
  pBase->IMASK3 = _19;

  <bb 15> :
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_11 ();

  <bb 16> :
  return;

}


FlexCAN_SetMsgBuffIntCmd (struct FLEXCAN_Type * base, uint8 u8Instance, uint32 msgBuffIdx, boolean enable, boolean bIsIntActive)
{
  Flexcan_Ip_StatusType stat;
  uint32 temp;
  Flexcan_Ip_StatusType D.10363;

  <bb 2> :
  stat = 0;
  _1 = msgBuffIdx & 31;
  temp = 1 << _1;
  if (msgBuffIdx <= 31)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  if (enable != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_18 ();
  _2 = (int) u8Instance;
  _3 = FlexCAN_Ip_au32ImaskBuff[_2][0];
  _4 = (int) u8Instance;
  _5 = temp | _3;
  FlexCAN_Ip_au32ImaskBuff[_4][0] = _5;
  if (bIsIntActive != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _6 = (int) u8Instance;
  _7 = FlexCAN_Ip_au32ImaskBuff[_6][0];
  base->IMASK1 = _7;

  <bb 6> :
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_18 ();
  goto <bb 8>; [INV]

  <bb 7> :
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_18 ();
  _8 = (int) u8Instance;
  _9 = FlexCAN_Ip_au32ImaskBuff[_8][0];
  _10 = ~temp;
  _11 = (int) u8Instance;
  _12 = _9 & _10;
  FlexCAN_Ip_au32ImaskBuff[_11][0] = _12;
  _13 = (int) u8Instance;
  _14 = FlexCAN_Ip_au32ImaskBuff[_13][0];
  base->IMASK1 = _14;
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_18 ();

  <bb 8> :
  if (msgBuffIdx > 31)
    goto <bb 9>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 9> :
  if (msgBuffIdx <= 63)
    goto <bb 10>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 10> :
  if (enable != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 11> :
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_18 ();
  _15 = (int) u8Instance;
  _16 = FlexCAN_Ip_au32ImaskBuff[_15][1];
  _17 = (int) u8Instance;
  _18 = temp | _16;
  FlexCAN_Ip_au32ImaskBuff[_17][1] = _18;
  if (bIsIntActive != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  _19 = (int) u8Instance;
  _20 = FlexCAN_Ip_au32ImaskBuff[_19][1];
  base->IMASK2 = _20;

  <bb 13> :
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_18 ();
  goto <bb 15>; [INV]

  <bb 14> :
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_18 ();
  _21 = (int) u8Instance;
  _22 = FlexCAN_Ip_au32ImaskBuff[_21][1];
  _23 = ~temp;
  _24 = (int) u8Instance;
  _25 = _22 & _23;
  FlexCAN_Ip_au32ImaskBuff[_24][1] = _25;
  _26 = (int) u8Instance;
  _27 = FlexCAN_Ip_au32ImaskBuff[_26][1];
  base->IMASK2 = _27;
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_18 ();

  <bb 15> :
  if (msgBuffIdx > 63)
    goto <bb 16>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 16> :
  if (msgBuffIdx <= 95)
    goto <bb 17>; [INV]
  else
    goto <bb 22>; [INV]

  <bb 17> :
  if (enable != 0)
    goto <bb 18>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 18> :
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_18 ();
  _28 = (int) u8Instance;
  _29 = FlexCAN_Ip_au32ImaskBuff[_28][2];
  _30 = (int) u8Instance;
  _31 = temp | _29;
  FlexCAN_Ip_au32ImaskBuff[_30][2] = _31;
  if (bIsIntActive != 0)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  _32 = (int) u8Instance;
  _33 = FlexCAN_Ip_au32ImaskBuff[_32][2];
  base->IMASK3 = _33;

  <bb 20> :
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_18 ();
  goto <bb 22>; [INV]

  <bb 21> :
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_18 ();
  _34 = (int) u8Instance;
  _35 = FlexCAN_Ip_au32ImaskBuff[_34][2];
  _36 = ~temp;
  _37 = (int) u8Instance;
  _38 = _35 & _36;
  FlexCAN_Ip_au32ImaskBuff[_37][2] = _38;
  _39 = (int) u8Instance;
  _40 = FlexCAN_Ip_au32ImaskBuff[_39][2];
  base->IMASK3 = _40;
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_18 ();

  <bb 22> :
  D.10363 = stat;

  <bb 23> :
<L25>:
  return D.10363;

}


FlexCAN_LockRxMsgBuff (const struct FLEXCAN_Type * base, uint32 msgBuffIdx)
{
  const uint32 * flexcan_mb;
  long unsigned int vol.9;

  <bb 2> :
  flexcan_mb = FlexCAN_GetMsgBuffRegion (base, msgBuffIdx);
  vol.9 = *flexcan_mb;
  return;

}


FlexCAN_GetMbPayloadSize (const struct FLEXCAN_Type * base, uint32 maxMsgBuffNum)
{
  uint8 mb_size;
  uint8 i;
  uint8 maxMbBlockNum;
  uint8 can_real_payload;
  uint32 ramBlockSize;
  uint8 arbitration_field_size;
  uint8 D.10335;

  <bb 2> :
  arbitration_field_size = 8;
  ramBlockSize = 512;
  can_real_payload = 8;
  maxMbBlockNum = 0;
  i = 0;
  mb_size = 0;
  i = 0;
  goto <bb 6>; [INV]

  <bb 3> :
  can_real_payload = FlexCAN_GetPayloadSize (base, i);
  mb_size = can_real_payload + arbitration_field_size;
  _1 = (long unsigned int) mb_size;
  _2 = ramBlockSize / _1;
  _3 = (unsigned char) _2;
  maxMbBlockNum = maxMbBlockNum + _3;
  _4 = (long unsigned int) maxMbBlockNum;
  if (maxMsgBuffNum < _4)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  goto <bb 7>; [INV]

  <bb 5> :
  i.8_5 = i;
  i = i.8_5 + 1;

  <bb 6> :
  if (i <= 2)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  D.10335 = can_real_payload;

  <bb 8> :
<L5>:
  return D.10335;

}


FlexCAN_GetPayloadSize (const struct FLEXCAN_Type * base, uint8 mbdsrIdx)
{
  uint32 payloadSize;
  uint8 D.10331;

  <bb 2> :
  payloadSize = 8;
  _1 = (int) mbdsrIdx;
  switch (_1) <default: <L3> [INV], case 0: <L0> [INV], case 1: <L1> [INV], case 2: <L2> [INV]>

  <bb 3> :
<L0>:
  _2 = base->FDCTRL;
  _3 = _2 >> 16;
  _4 = _3 & 3;
  payloadSize = 8 << _4;
  goto <bb 7>; [INV]

  <bb 4> :
<L1>:
  _5 = base->FDCTRL;
  _6 = _5 >> 19;
  _7 = _6 & 3;
  payloadSize = 8 << _7;
  goto <bb 7>; [INV]

  <bb 5> :
<L2>:
  _8 = base->FDCTRL;
  _9 = _8 >> 22;
  _10 = _9 & 3;
  payloadSize = 8 << _10;
  goto <bb 7>; [INV]

  <bb 6> :
<L3>:
  _11 = base->FDCTRL;
  _12 = _11 >> 16;
  _13 = _12 & 3;
  payloadSize = 8 << _13;

  <bb 7> :
  D.10331 = (uint8) payloadSize;

  <bb 8> :
<L5>:
  return D.10331;

}


FlexCAN_SetPayloadSize (struct FLEXCAN_Type * base, const struct Flexcan_Ip_PayloadSizeType * payloadSize)
{
  uint32 tmp;
  int iftmp.6;
  int iftmp.5;
  int iftmp.4;

  <bb 2> :
  _1 = FlexCAN_IsFDEnabled (base);
  if (_1 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  _2 = payloadSize->payloadBlock0;
  if (_2 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  iftmp.4 = 1;
  goto <bb 6>; [INV]

  <bb 5> :
  iftmp.4 = 0;

  <bb 6> :
  _3 = (_Bool) iftmp.4;
  DevAssert (_3);
  _4 = FlexCAN_IsFDEnabled (base);
  if (_4 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _5 = payloadSize->payloadBlock1;
  if (_5 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  iftmp.5 = 1;
  goto <bb 10>; [INV]

  <bb 9> :
  iftmp.5 = 0;

  <bb 10> :
  _6 = (_Bool) iftmp.5;
  DevAssert (_6);
  _7 = FlexCAN_IsFDEnabled (base);
  if (_7 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  _8 = payloadSize->payloadBlock2;
  if (_8 == 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  iftmp.6 = 1;
  goto <bb 14>; [INV]

  <bb 13> :
  iftmp.6 = 0;

  <bb 14> :
  _9 = (_Bool) iftmp.6;
  DevAssert (_9);
  _10 = FlexCAN_IsFDEnabled (base);
  if (_10 != 0)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  tmp = base->FDCTRL;
  tmp = tmp & 4294770687;
  _11 = payloadSize->payloadBlock0;
  _12 = _11 << 16;
  tmp = tmp | _12;
  tmp = tmp & 4293394431;
  _13 = payloadSize->payloadBlock1;
  _14 = _13 << 19;
  tmp = tmp | _14;
  tmp = tmp & 4282384383;
  _15 = payloadSize->payloadBlock2;
  _16 = _15 << 22;
  tmp = tmp | _16;
  base->FDCTRL = tmp;

  <bb 16> :
  return;

}


FlexCAN_EnableRxFifo (struct FLEXCAN_Type * base, uint32 numOfFilters)
{
  Flexcan_Ip_StatusType stat;
  uint16 noOfMbx;
  uint32 i;
  Flexcan_Ip_StatusType D.10307;

  <bb 2> :
  _1 = FlexCAN_GetMaxMbNum (base);
  noOfMbx = (uint16) _1;
  stat = 0;
  _2 = base->MCR;
  _3 = _2 & 2048;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  stat = 1;

  <bb 4> :
  if (stat == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  _4 = base->MCR;
  _5 = _4 | 536870912;
  base->MCR = _5;
  _6 = base->CTRL2;
  _7 = _6 & 4043309055;
  _8 = numOfFilters << 24;
  _9 = _8 & 251658240;
  _10 = _7 | _9;
  base->CTRL2 = _10;
  base->RXFGMASK = 4294967295;
  i = 0;
  goto <bb 7>; [INV]

  <bb 6> :
  base->RXIMR[i] = 536870911;
  i = i + 1;

  <bb 7> :
  _11 = (long unsigned int) noOfMbx;
  if (i < _11)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  D.10307 = stat;

  <bb 9> :
<L7>:
  return D.10307;

}


FlexCAN_Init (struct FLEXCAN_Type * base)
{
  Flexcan_Ip_StatusType returnResult;
  uint32 uS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  Flexcan_Ip_StatusType D.10300;
  long unsigned int D.10291;

  <bb 2> :
  timeStart = 0;
  timeElapsed = 0;
  uS2Ticks = OsIf_MicrosToTicks (10000, 0);
  returnResult = 0;
  _1 = base->MCR;
  _2 = _1 | 33554432;
  base->MCR = _2;
  _3 = OsIf_GetCounter (0);
  timeStart = _3;
  goto <bb 5>; [INV]

  <bb 3> :
  D.10291 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed = D.10291 + timeElapsed;
  if (timeElapsed >= uS2Ticks)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  returnResult = 3;
  goto <bb 6>; [INV]

  <bb 5> :
  _4 = base->MCR;
  _5 = _4 & 33554432;
  if (_5 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  if (returnResult == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 7> :
  _6 = base->MCR;
  _7 = _6 | 4096;
  base->MCR = _7;
  FlexCAN_ClearRAM (base);
  base->RXMGMASK = 4294967295;
  base->RX14MASK = 4294967295;
  base->RX15MASK = 4294967295;
  base->IMASK1 = 0;
  base->IFLAG1 = 4294967295;
  _8 = FlexCAN_GetMaxMbNum (base);
  if (_8 > 32)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  base->IMASK2 = 0;
  base->IFLAG2 = 4294967295;

  <bb 9> :
  _9 = FlexCAN_GetMaxMbNum (base);
  if (_9 > 64)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  base->IMASK3 = 0;
  base->IFLAG3 = 4294967295;

  <bb 11> :
  base->ESR1 = 3866630;
  base->CTRL1 = 0;
  base->CTRL2 = 1048576;
  base->CBT = 0;
  base->EPRS = 0;
  base->ENCBT = 0;
  base->EDCBT = 0;
  base->ETDC = 0;
  base->FDCBT = 0;
  base->FDCTRL = 2147500288;

  <bb 12> :
  D.10300 = returnResult;
  timeStart = {CLOBBER};

  <bb 13> :
<L12>:
  return D.10300;

}


FlexCAN_SetErrIntCmd (struct FLEXCAN_Type * base, flexcan_int_type_t errType, boolean enable)
{
  uint32 temp;

  <bb 2> :
  temp = errType;
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_06 ();
  if (enable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  if (errType == 16385)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _1 = base->CTRL2;
  _2 = _1 | 2147483648;
  base->CTRL2 = _2;
  goto <bb 14>; [INV]

  <bb 5> :
  if (errType == 1024)
    goto <bb 7>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  if (errType == 2048)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _3 = base->MCR;
  _4 = _3 | 2097152;
  base->MCR = _4;

  <bb 8> :
  _5 = base->CTRL1;
  _6 = temp | _5;
  base->CTRL1 = _6;
  goto <bb 14>; [INV]

  <bb 9> :
  if (errType == 16385)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  _7 = base->CTRL2;
  _8 = _7 & 2147483647;
  base->CTRL2 = _8;
  goto <bb 14>; [INV]

  <bb 11> :
  _9 = base->CTRL1;
  _10 = ~temp;
  _11 = _9 & _10;
  base->CTRL1 = _11;
  temp = base->CTRL1;
  _12 = temp & 1024;
  if (_12 == 0)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 12> :
  _13 = temp & 2048;
  if (_13 == 0)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  _14 = base->MCR;
  _15 = _14 & 4292870143;
  base->MCR = _15;

  <bb 14> :
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_06 ();
  return;

}


FlexCAN_Disable (struct FLEXCAN_Type * base)
{
  Flexcan_Ip_StatusType returnResult;
  uint32 uS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  Flexcan_Ip_StatusType D.10272;
  long unsigned int D.10269;

  <bb 2> :
  timeStart = 0;
  timeElapsed = 0;
  uS2Ticks = OsIf_MicrosToTicks (10000, 0);
  returnResult = 0;
  _1 = base->MCR;
  _2 = (signed int) _1;
  if (_2 >= 0)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_05 ();
  _3 = base->MCR;
  _4 = _3 | 2147483648;
  base->MCR = _4;
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_05 ();
  _5 = OsIf_GetCounter (0);
  timeStart = _5;
  goto <bb 6>; [INV]

  <bb 4> :
  D.10269 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed = D.10269 + timeElapsed;
  if (timeElapsed >= uS2Ticks)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  returnResult = 3;
  goto <bb 7>; [INV]

  <bb 6> :
  _6 = base->MCR;
  _7 = _6 & 1048576;
  if (_7 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  D.10272 = returnResult;
  timeStart = {CLOBBER};

  <bb 8> :
<L8>:
  return D.10272;

}


FlexCAN_ExitFreezeMode (struct FLEXCAN_Type * base)
{
  Flexcan_Ip_StatusType returnValue;
  uint32 uS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  Flexcan_Ip_StatusType D.10264;
  long unsigned int D.10261;

  <bb 2> :
  timeStart = 0;
  timeElapsed = 0;
  uS2Ticks = OsIf_MicrosToTicks (10000, 0);
  returnValue = 0;
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_04 ();
  _1 = base->MCR;
  _2 = _1 & 4026531839;
  base->MCR = _2;
  _3 = base->MCR;
  _4 = _3 & 3221225471;
  base->MCR = _4;
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_04 ();
  _5 = OsIf_GetCounter (0);
  timeStart = _5;
  goto <bb 5>; [INV]

  <bb 3> :
  D.10261 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed = D.10261 + timeElapsed;
  if (timeElapsed >= uS2Ticks)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  returnValue = 3;
  goto <bb 6>; [INV]

  <bb 5> :
  _6 = base->MCR;
  _7 = _6 & 16777216;
  if (_7 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  D.10264 = returnValue;
  timeStart = {CLOBBER};

  <bb 7> :
<L6>:
  return D.10264;

}


FlexCAN_Enable (struct FLEXCAN_Type * base)
{
  Flexcan_Ip_StatusType returnValue;
  uint32 uS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  Flexcan_Ip_StatusType D.10258;
  long unsigned int D.10255;

  <bb 2> :
  timeStart = 0;
  timeElapsed = 0;
  uS2Ticks = OsIf_MicrosToTicks (10000, 0);
  returnValue = 0;
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_03 ();
  _1 = base->MCR;
  _2 = _1 & 2147483647;
  base->MCR = _2;
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_03 ();
  _3 = OsIf_GetCounter (0);
  timeStart = _3;
  goto <bb 5>; [INV]

  <bb 3> :
  D.10255 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed = D.10255 + timeElapsed;
  if (timeElapsed >= uS2Ticks)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  returnValue = 3;
  goto <bb 6>; [INV]

  <bb 5> :
  _4 = base->MCR;
  _5 = _4 & 16777216;
  if (_5 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  D.10258 = returnValue;
  timeStart = {CLOBBER};

  <bb 7> :
<L6>:
  return D.10258;

}


FlexCAN_EnterFreezeMode (struct FLEXCAN_Type * base)
{
  Flexcan_Ip_StatusType returnResult;
  uint32 uS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  Flexcan_Ip_StatusType D.10252;
  long unsigned int D.10249;

  <bb 2> :
  timeStart = 0;
  timeElapsed = 0;
  uS2Ticks = OsIf_MicrosToTicks (10000, 0);
  returnResult = 0;
  SchM_Enter_Can_CAN_EXCLUSIVE_AREA_02 ();
  _1 = base->MCR;
  _2 = _1 | 1073741824;
  base->MCR = _2;
  _3 = base->MCR;
  _4 = _3 | 268435456;
  base->MCR = _4;
  _5 = base->MCR;
  _6 = (signed int) _5;
  if (_6 < 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _7 = base->MCR;
  _8 = _7 & 2147483647;
  base->MCR = _8;

  <bb 4> :
  SchM_Exit_Can_CAN_EXCLUSIVE_AREA_02 ();
  _9 = OsIf_GetCounter (0);
  timeStart = _9;
  goto <bb 7>; [INV]

  <bb 5> :
  D.10249 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed = D.10249 + timeElapsed;
  if (timeElapsed >= uS2Ticks)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  returnResult = 3;
  goto <bb 8>; [INV]

  <bb 7> :
  _10 = base->MCR;
  _11 = _10 & 16777216;
  if (_11 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  D.10252 = returnResult;
  timeStart = {CLOBBER};

  <bb 9> :
<L8>:
  return D.10252;

}


FlexCAN_GetMaxMbNum (const struct FLEXCAN_Type * base)
{
  static const uint32 maxMbNum[6] = {96, 64, 64, 32, 32, 32};
  static struct FLEXCAN_Type * const flexcanBase[6] = {1076903936B, 1076920320B, 1076936704B, 1076953088B, 1076969472B, 1076985856B};
  uint32 ret;
  uint32 i;
  uint32 D.10245;

  <bb 2> :
  ret = 0;
  i = 0;
  goto <bb 6>; [INV]

  <bb 3> :
  _1 = flexcanBase[i];
  if (base == _1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  ret = maxMbNum[i];

  <bb 5> :
  i = i + 1;

  <bb 6> :
  if (i <= 5)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  D.10245 = ret;

  <bb 8> :
<L5>:
  return D.10245;

}


FlexCAN_GetMsgBuffRegion (const struct FLEXCAN_Type * base, uint32 msgBuffIdx)
{
  volatile uint32 * pAddressRet;
  volatile uint32 * RAM;
  uint8 payload_size;
  uint32 mb_index;
  uint8 maxMbNum;
  uint8 i;
  uint32 msgBuffIdxBackup;
  uint32 ramBlockOffset;
  uint32 ramBlockSize;
  uint8 mb_size;
  uint8 arbitration_field_size;
  volatile uint32 * D.10241;

  <bb 2> :
  arbitration_field_size = 8;
  mb_size = 0;
  ramBlockSize = 512;
  ramBlockOffset = 0;
  msgBuffIdxBackup = msgBuffIdx;
  i = 0;
  maxMbNum = 0;
  mb_index = 0;
  payload_size = 0;
  base.2_1 = (long unsigned int) base;
  _2 = base.2_1 + 128;
  RAM = (volatile uint32 *) _2;
  pAddressRet = 0B;
  i = 0;
  goto <bb 6>; [INV]

  <bb 3> :
  payload_size = FlexCAN_GetPayloadSize (base, i);
  mb_size = payload_size + arbitration_field_size;
  _3 = (long unsigned int) mb_size;
  _4 = ramBlockSize / _3;
  maxMbNum = (uint8) _4;
  _5 = (long unsigned int) maxMbNum;
  if (msgBuffIdxBackup < _5)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  goto <bb 7>; [INV]

  <bb 5> :
  ramBlockOffset = ramBlockOffset + 128;
  _6 = (long unsigned int) maxMbNum;
  msgBuffIdxBackup = msgBuffIdxBackup - _6;
  i.3_7 = i;
  i = i.3_7 + 1;

  <bb 6> :
  if (i <= 2)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _8 = (long unsigned int) maxMbNum;
  _9 = msgBuffIdxBackup % _8;
  _10 = mb_size >> 2;
  _11 = (long unsigned int) _10;
  _12 = _9 * _11;
  mb_index = ramBlockOffset + _12;
  _13 = mb_index * 4;
  pAddressRet = RAM + _13;
  D.10241 = pAddressRet;

  <bb 8> :
<L5>:
  return D.10241;

}


FlexCAN_ComputePayloadSize (uint8 dlcValue)
{
  uint8 ret;
  uint8 D.10237;

  <bb 2> :
  ret = 8;
  if (dlcValue <= 8)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  ret = dlcValue;
  goto <bb 13>; [INV]

  <bb 4> :
  _1 = (int) dlcValue;
  switch (_1) <default: <L9> [INV], case 9: <L2> [INV], case 10: <L3> [INV], case 11: <L4> [INV], case 12: <L5> [INV], case 13: <L6> [INV], case 14: <L7> [INV], case 15: <L8> [INV]>

  <bb 5> :
<L2>:
  ret = 12;
  goto <bb 13>; [INV]

  <bb 6> :
<L3>:
  ret = 16;
  goto <bb 13>; [INV]

  <bb 7> :
<L4>:
  ret = 20;
  goto <bb 13>; [INV]

  <bb 8> :
<L5>:
  ret = 24;
  goto <bb 13>; [INV]

  <bb 9> :
<L6>:
  ret = 32;
  goto <bb 13>; [INV]

  <bb 10> :
<L7>:
  ret = 48;
  goto <bb 13>; [INV]

  <bb 11> :
<L8>:
  ret = 64;
  goto <bb 13>; [INV]

  <bb 12> :
<L9>:

  <bb 13> :
  D.10237 = ret;

  <bb 14> :
<L12>:
  return D.10237;

}


FlexCAN_ClearRAM (struct FLEXCAN_Type * base)
{
  uint32 ram_addr;
  volatile uint32 * RAM;
  uint32 RXIMR_size;
  uint32 RAM_size;
  uint32 databyte;

  <bb 2> :
  _1 = FlexCAN_GetMaxMbNum (base);
  RAM_size = _1 * 4;
  RXIMR_size = FlexCAN_GetMaxMbNum (base);
  base.0_2 = (long unsigned int) base;
  _3 = base.0_2 + 128;
  RAM = (volatile uint32 *) _3;
  databyte = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  _4 = databyte * 4;
  _5 = RAM + _4;
  *_5 = 0;
  databyte = databyte + 1;

  <bb 4> :
  if (databyte < RAM_size)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  RAM = &base->RXIMR;
  databyte = 0;
  goto <bb 7>; [INV]

  <bb 6> :
  _6 = databyte * 4;
  _7 = RAM + _6;
  *_7 = 0;
  databyte = databyte + 1;

  <bb 7> :
  if (databyte < RXIMR_size)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  _8 = base->CTRL2;
  _9 = _8 | 268435456;
  base->CTRL2 = _9;
  base.1_10 = (long unsigned int) base;
  ram_addr = base.1_10 + 128;
  RAM = (volatile uint32 *) ram_addr;
  base->RXMGMASK = 0;
  base->RXFGMASK = 0;
  base->RX14MASK = 0;
  base->RX15MASK = 0;
  databyte = 0;
  goto <bb 10>; [INV]

  <bb 9> :
  _11 = databyte * 4;
  _12 = RAM + _11;
  *_12 = 0;
  databyte = databyte + 1;

  <bb 10> :
  if (databyte == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  _13 = base->CTRL2;
  _14 = _13 & 4026531839;
  base->CTRL2 = _14;
  return;

}


FlexCAN_ComputeDLCValue (uint8 payloadSize)
{
  static const uint8 payload_code[65] = "\x00\x01\x02\x03\x04\x05\x06\x07\b\t\t\t\t\n\n\n\n\v\v\v\v\f\f\f\f\r\r\r\r\r\r\r\r\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f";
  uint32 ret;
  uint8 D.10232;

  <bb 2> :
  ret = 255;
  if (payloadSize <= 64)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 = (int) payloadSize;
  _2 = payload_code[_1];
  ret = (uint32) _2;

  <bb 4> :
  D.10232 = (uint8) ret;

  <bb 5> :
<L3>:
  return D.10232;

}


FlexCAN_CanBitSampling (struct FLEXCAN_Type * base, boolean enable)
{
  long unsigned int iftmp.23;

  <bb 2> :
  _1 = base->CTRL1;
  _2 = _1 & 4294967167;
  if (enable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.23 = 128;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.23 = 0;

  <bb 5> :
  _3 = iftmp.23 | _2;
  base->CTRL1 = _3;
  return;

}


FlexCAN_SetEdgeFilter (struct FLEXCAN_Type * base, boolean enable)
{
  long unsigned int iftmp.26;

  <bb 2> :
  _1 = base->CTRL2;
  _2 = _1 & 4294965247;
  if (enable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.26 = 0;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.26 = 2048;

  <bb 5> :
  _3 = iftmp.26 | _2;
  base->CTRL2 = _3;
  return;

}


FlexCAN_SetBusOffAutorecovery (struct FLEXCAN_Type * base, boolean enable)
{
  long unsigned int iftmp.24;

  <bb 2> :
  _1 = base->CTRL1;
  _2 = _1 & 4294967231;
  if (enable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.24 = 0;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.24 = 64;

  <bb 5> :
  _3 = iftmp.24 | _2;
  base->CTRL1 = _3;
  return;

}


FlexCAN_SetRemoteReqStore (struct FLEXCAN_Type * base, boolean enable)
{
  long unsigned int iftmp.25;

  <bb 2> :
  _1 = base->CTRL2;
  _2 = _1 & 4294836223;
  if (enable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.25 = 131072;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.25 = 0;

  <bb 5> :
  _3 = iftmp.25 | _2;
  base->CTRL2 = _3;
  return;

}


FlexCAN_SetProtocolException (struct FLEXCAN_Type * base, boolean enable)
{
  long unsigned int iftmp.22;

  <bb 2> :
  _1 = base->CTRL2;
  _2 = _1 & 4294950911;
  if (enable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.22 = 16384;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.22 = 0;

  <bb 5> :
  _3 = iftmp.22 | _2;
  base->CTRL2 = _3;
  return;

}


FlexCAN_SetEntireFrameArbitrationFieldComparison (struct FLEXCAN_Type * base, boolean enable)
{
  long unsigned int iftmp.21;

  <bb 2> :
  _1 = base->CTRL2;
  _2 = _1 & 4294901759;
  if (enable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.21 = 65536;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.21 = 0;

  <bb 5> :
  _3 = iftmp.21 | _2;
  base->CTRL2 = _3;
  return;

}


FlexCAN_SetIsoCan (struct FLEXCAN_Type * base, boolean enable)
{
  long unsigned int iftmp.20;

  <bb 2> :
  _1 = base->CTRL2;
  _2 = _1 & 4294963199;
  if (enable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.20 = 4096;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.20 = 0;

  <bb 5> :
  _3 = iftmp.20 | _2;
  base->CTRL2 = _3;
  return;

}


FlexCAN_IsFDEnabled (const struct FLEXCAN_Type * base)
{
  boolean D.10329;

  <bb 2> :
  _1 = base->MCR;
  _2 = _1 & 2048;
  D.10329 = _2 != 0;

  <bb 3> :
<L0>:
  return D.10329;

}


FlexCAN_SetSelfReception (struct FLEXCAN_Type * base, boolean enable)
{
  long unsigned int iftmp.14;

  <bb 2> :
  _1 = base->MCR;
  _2 = _1 & 4294836223;
  if (enable != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.14 = 0;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.14 = 131072;

  <bb 5> :
  _3 = iftmp.14 | _2;
  base->MCR = _3;
  return;

}


DevAssert (volatile boolean x)
{
  <bb 2> :
  x.7_1 = x;
  if (x.7_1 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  __asm__ __volatile__("BKPT #0");
  goto <bb 3>; [INV]

  <bb 4> :
  return;

}


